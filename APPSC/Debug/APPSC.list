
APPSC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0003333c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004d84  080334d0  080334d0  000434d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08038254  08038254  00050728  2**0
                  CONTENTS
  4 .ARM          00000008  08038254  08038254  00048254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0803825c  0803825c  00050728  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0803825c  0803825c  0004825c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08038264  08038264  00048264  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000728  20000000  08038268  00050000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00050728  2**0
                  CONTENTS
 10 .bss          00001dac  20000728  20000728  00050728  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200024d4  200024d4  00050728  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00050728  2**0
                  CONTENTS, READONLY
 13 .debug_info   0013edd2  00000000  00000000  00050758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0001680d  00000000  00000000  0018f52a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00006190  00000000  00000000  001a5d38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00005d60  00000000  00000000  001abec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00038a0c  00000000  00000000  001b1c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00083601  00000000  00000000  001ea634  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00193ae8  00000000  00000000  0026dc35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0040171d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0001c72c  00000000  00000000  00401770  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000728 	.word	0x20000728
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080334b4 	.word	0x080334b4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000072c 	.word	0x2000072c
 80001cc:	080334b4 	.word	0x080334b4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strcmp>:
 8000270:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000274:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000278:	2a01      	cmp	r2, #1
 800027a:	bf28      	it	cs
 800027c:	429a      	cmpcs	r2, r3
 800027e:	d0f7      	beq.n	8000270 <strcmp>
 8000280:	1ad0      	subs	r0, r2, r3
 8000282:	4770      	bx	lr

08000284 <strlen>:
 8000284:	4603      	mov	r3, r0
 8000286:	f813 2b01 	ldrb.w	r2, [r3], #1
 800028a:	2a00      	cmp	r2, #0
 800028c:	d1fb      	bne.n	8000286 <strlen+0x2>
 800028e:	1a18      	subs	r0, r3, r0
 8000290:	3801      	subs	r0, #1
 8000292:	4770      	bx	lr

08000294 <__aeabi_drsub>:
 8000294:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000298:	e002      	b.n	80002a0 <__adddf3>
 800029a:	bf00      	nop

0800029c <__aeabi_dsub>:
 800029c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002a0 <__adddf3>:
 80002a0:	b530      	push	{r4, r5, lr}
 80002a2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002aa:	ea94 0f05 	teq	r4, r5
 80002ae:	bf08      	it	eq
 80002b0:	ea90 0f02 	teqeq	r0, r2
 80002b4:	bf1f      	itttt	ne
 80002b6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ba:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002be:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002c2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c6:	f000 80e2 	beq.w	800048e <__adddf3+0x1ee>
 80002ca:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ce:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002d2:	bfb8      	it	lt
 80002d4:	426d      	neglt	r5, r5
 80002d6:	dd0c      	ble.n	80002f2 <__adddf3+0x52>
 80002d8:	442c      	add	r4, r5
 80002da:	ea80 0202 	eor.w	r2, r0, r2
 80002de:	ea81 0303 	eor.w	r3, r1, r3
 80002e2:	ea82 0000 	eor.w	r0, r2, r0
 80002e6:	ea83 0101 	eor.w	r1, r3, r1
 80002ea:	ea80 0202 	eor.w	r2, r0, r2
 80002ee:	ea81 0303 	eor.w	r3, r1, r3
 80002f2:	2d36      	cmp	r5, #54	; 0x36
 80002f4:	bf88      	it	hi
 80002f6:	bd30      	pophi	{r4, r5, pc}
 80002f8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000300:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000304:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x70>
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000314:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000318:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800031c:	d002      	beq.n	8000324 <__adddf3+0x84>
 800031e:	4252      	negs	r2, r2
 8000320:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000324:	ea94 0f05 	teq	r4, r5
 8000328:	f000 80a7 	beq.w	800047a <__adddf3+0x1da>
 800032c:	f1a4 0401 	sub.w	r4, r4, #1
 8000330:	f1d5 0e20 	rsbs	lr, r5, #32
 8000334:	db0d      	blt.n	8000352 <__adddf3+0xb2>
 8000336:	fa02 fc0e 	lsl.w	ip, r2, lr
 800033a:	fa22 f205 	lsr.w	r2, r2, r5
 800033e:	1880      	adds	r0, r0, r2
 8000340:	f141 0100 	adc.w	r1, r1, #0
 8000344:	fa03 f20e 	lsl.w	r2, r3, lr
 8000348:	1880      	adds	r0, r0, r2
 800034a:	fa43 f305 	asr.w	r3, r3, r5
 800034e:	4159      	adcs	r1, r3
 8000350:	e00e      	b.n	8000370 <__adddf3+0xd0>
 8000352:	f1a5 0520 	sub.w	r5, r5, #32
 8000356:	f10e 0e20 	add.w	lr, lr, #32
 800035a:	2a01      	cmp	r2, #1
 800035c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000360:	bf28      	it	cs
 8000362:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	18c0      	adds	r0, r0, r3
 800036c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000370:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000374:	d507      	bpl.n	8000386 <__adddf3+0xe6>
 8000376:	f04f 0e00 	mov.w	lr, #0
 800037a:	f1dc 0c00 	rsbs	ip, ip, #0
 800037e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000382:	eb6e 0101 	sbc.w	r1, lr, r1
 8000386:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800038a:	d31b      	bcc.n	80003c4 <__adddf3+0x124>
 800038c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000390:	d30c      	bcc.n	80003ac <__adddf3+0x10c>
 8000392:	0849      	lsrs	r1, r1, #1
 8000394:	ea5f 0030 	movs.w	r0, r0, rrx
 8000398:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800039c:	f104 0401 	add.w	r4, r4, #1
 80003a0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a8:	f080 809a 	bcs.w	80004e0 <__adddf3+0x240>
 80003ac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003b0:	bf08      	it	eq
 80003b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b6:	f150 0000 	adcs.w	r0, r0, #0
 80003ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003be:	ea41 0105 	orr.w	r1, r1, r5
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c8:	4140      	adcs	r0, r0
 80003ca:	eb41 0101 	adc.w	r1, r1, r1
 80003ce:	3c01      	subs	r4, #1
 80003d0:	bf28      	it	cs
 80003d2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d6:	d2e9      	bcs.n	80003ac <__adddf3+0x10c>
 80003d8:	f091 0f00 	teq	r1, #0
 80003dc:	bf04      	itt	eq
 80003de:	4601      	moveq	r1, r0
 80003e0:	2000      	moveq	r0, #0
 80003e2:	fab1 f381 	clz	r3, r1
 80003e6:	bf08      	it	eq
 80003e8:	3320      	addeq	r3, #32
 80003ea:	f1a3 030b 	sub.w	r3, r3, #11
 80003ee:	f1b3 0220 	subs.w	r2, r3, #32
 80003f2:	da0c      	bge.n	800040e <__adddf3+0x16e>
 80003f4:	320c      	adds	r2, #12
 80003f6:	dd08      	ble.n	800040a <__adddf3+0x16a>
 80003f8:	f102 0c14 	add.w	ip, r2, #20
 80003fc:	f1c2 020c 	rsb	r2, r2, #12
 8000400:	fa01 f00c 	lsl.w	r0, r1, ip
 8000404:	fa21 f102 	lsr.w	r1, r1, r2
 8000408:	e00c      	b.n	8000424 <__adddf3+0x184>
 800040a:	f102 0214 	add.w	r2, r2, #20
 800040e:	bfd8      	it	le
 8000410:	f1c2 0c20 	rsble	ip, r2, #32
 8000414:	fa01 f102 	lsl.w	r1, r1, r2
 8000418:	fa20 fc0c 	lsr.w	ip, r0, ip
 800041c:	bfdc      	itt	le
 800041e:	ea41 010c 	orrle.w	r1, r1, ip
 8000422:	4090      	lslle	r0, r2
 8000424:	1ae4      	subs	r4, r4, r3
 8000426:	bfa2      	ittt	ge
 8000428:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800042c:	4329      	orrge	r1, r5
 800042e:	bd30      	popge	{r4, r5, pc}
 8000430:	ea6f 0404 	mvn.w	r4, r4
 8000434:	3c1f      	subs	r4, #31
 8000436:	da1c      	bge.n	8000472 <__adddf3+0x1d2>
 8000438:	340c      	adds	r4, #12
 800043a:	dc0e      	bgt.n	800045a <__adddf3+0x1ba>
 800043c:	f104 0414 	add.w	r4, r4, #20
 8000440:	f1c4 0220 	rsb	r2, r4, #32
 8000444:	fa20 f004 	lsr.w	r0, r0, r4
 8000448:	fa01 f302 	lsl.w	r3, r1, r2
 800044c:	ea40 0003 	orr.w	r0, r0, r3
 8000450:	fa21 f304 	lsr.w	r3, r1, r4
 8000454:	ea45 0103 	orr.w	r1, r5, r3
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	f1c4 040c 	rsb	r4, r4, #12
 800045e:	f1c4 0220 	rsb	r2, r4, #32
 8000462:	fa20 f002 	lsr.w	r0, r0, r2
 8000466:	fa01 f304 	lsl.w	r3, r1, r4
 800046a:	ea40 0003 	orr.w	r0, r0, r3
 800046e:	4629      	mov	r1, r5
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	fa21 f004 	lsr.w	r0, r1, r4
 8000476:	4629      	mov	r1, r5
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	f094 0f00 	teq	r4, #0
 800047e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000482:	bf06      	itte	eq
 8000484:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000488:	3401      	addeq	r4, #1
 800048a:	3d01      	subne	r5, #1
 800048c:	e74e      	b.n	800032c <__adddf3+0x8c>
 800048e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000492:	bf18      	it	ne
 8000494:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000498:	d029      	beq.n	80004ee <__adddf3+0x24e>
 800049a:	ea94 0f05 	teq	r4, r5
 800049e:	bf08      	it	eq
 80004a0:	ea90 0f02 	teqeq	r0, r2
 80004a4:	d005      	beq.n	80004b2 <__adddf3+0x212>
 80004a6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004aa:	bf04      	itt	eq
 80004ac:	4619      	moveq	r1, r3
 80004ae:	4610      	moveq	r0, r2
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	ea91 0f03 	teq	r1, r3
 80004b6:	bf1e      	ittt	ne
 80004b8:	2100      	movne	r1, #0
 80004ba:	2000      	movne	r0, #0
 80004bc:	bd30      	popne	{r4, r5, pc}
 80004be:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004c2:	d105      	bne.n	80004d0 <__adddf3+0x230>
 80004c4:	0040      	lsls	r0, r0, #1
 80004c6:	4149      	adcs	r1, r1
 80004c8:	bf28      	it	cs
 80004ca:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ce:	bd30      	pop	{r4, r5, pc}
 80004d0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d4:	bf3c      	itt	cc
 80004d6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004da:	bd30      	popcc	{r4, r5, pc}
 80004dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e8:	f04f 0000 	mov.w	r0, #0
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004f2:	bf1a      	itte	ne
 80004f4:	4619      	movne	r1, r3
 80004f6:	4610      	movne	r0, r2
 80004f8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004fc:	bf1c      	itt	ne
 80004fe:	460b      	movne	r3, r1
 8000500:	4602      	movne	r2, r0
 8000502:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000506:	bf06      	itte	eq
 8000508:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800050c:	ea91 0f03 	teqeq	r1, r3
 8000510:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000514:	bd30      	pop	{r4, r5, pc}
 8000516:	bf00      	nop

08000518 <__aeabi_ui2d>:
 8000518:	f090 0f00 	teq	r0, #0
 800051c:	bf04      	itt	eq
 800051e:	2100      	moveq	r1, #0
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000528:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052c:	f04f 0500 	mov.w	r5, #0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e750      	b.n	80003d8 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_i2d>:
 8000538:	f090 0f00 	teq	r0, #0
 800053c:	bf04      	itt	eq
 800053e:	2100      	moveq	r1, #0
 8000540:	4770      	bxeq	lr
 8000542:	b530      	push	{r4, r5, lr}
 8000544:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000548:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800054c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000550:	bf48      	it	mi
 8000552:	4240      	negmi	r0, r0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e73e      	b.n	80003d8 <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_f2d>:
 800055c:	0042      	lsls	r2, r0, #1
 800055e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000562:	ea4f 0131 	mov.w	r1, r1, rrx
 8000566:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800056a:	bf1f      	itttt	ne
 800056c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000570:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000574:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000578:	4770      	bxne	lr
 800057a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057e:	bf08      	it	eq
 8000580:	4770      	bxeq	lr
 8000582:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000586:	bf04      	itt	eq
 8000588:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000594:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000598:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800059c:	e71c      	b.n	80003d8 <__adddf3+0x138>
 800059e:	bf00      	nop

080005a0 <__aeabi_ul2d>:
 80005a0:	ea50 0201 	orrs.w	r2, r0, r1
 80005a4:	bf08      	it	eq
 80005a6:	4770      	bxeq	lr
 80005a8:	b530      	push	{r4, r5, lr}
 80005aa:	f04f 0500 	mov.w	r5, #0
 80005ae:	e00a      	b.n	80005c6 <__aeabi_l2d+0x16>

080005b0 <__aeabi_l2d>:
 80005b0:	ea50 0201 	orrs.w	r2, r0, r1
 80005b4:	bf08      	it	eq
 80005b6:	4770      	bxeq	lr
 80005b8:	b530      	push	{r4, r5, lr}
 80005ba:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005be:	d502      	bpl.n	80005c6 <__aeabi_l2d+0x16>
 80005c0:	4240      	negs	r0, r0
 80005c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ca:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ce:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005d2:	f43f aed8 	beq.w	8000386 <__adddf3+0xe6>
 80005d6:	f04f 0203 	mov.w	r2, #3
 80005da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005de:	bf18      	it	ne
 80005e0:	3203      	addne	r2, #3
 80005e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e6:	bf18      	it	ne
 80005e8:	3203      	addne	r2, #3
 80005ea:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ee:	f1c2 0320 	rsb	r3, r2, #32
 80005f2:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f6:	fa20 f002 	lsr.w	r0, r0, r2
 80005fa:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fe:	ea40 000e 	orr.w	r0, r0, lr
 8000602:	fa21 f102 	lsr.w	r1, r1, r2
 8000606:	4414      	add	r4, r2
 8000608:	e6bd      	b.n	8000386 <__adddf3+0xe6>
 800060a:	bf00      	nop

0800060c <__aeabi_dmul>:
 800060c:	b570      	push	{r4, r5, r6, lr}
 800060e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000612:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000616:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800061a:	bf1d      	ittte	ne
 800061c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000620:	ea94 0f0c 	teqne	r4, ip
 8000624:	ea95 0f0c 	teqne	r5, ip
 8000628:	f000 f8de 	bleq	80007e8 <__aeabi_dmul+0x1dc>
 800062c:	442c      	add	r4, r5
 800062e:	ea81 0603 	eor.w	r6, r1, r3
 8000632:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000636:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800063a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063e:	bf18      	it	ne
 8000640:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000644:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000648:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800064c:	d038      	beq.n	80006c0 <__aeabi_dmul+0xb4>
 800064e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000652:	f04f 0500 	mov.w	r5, #0
 8000656:	fbe1 e502 	umlal	lr, r5, r1, r2
 800065a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000662:	f04f 0600 	mov.w	r6, #0
 8000666:	fbe1 5603 	umlal	r5, r6, r1, r3
 800066a:	f09c 0f00 	teq	ip, #0
 800066e:	bf18      	it	ne
 8000670:	f04e 0e01 	orrne.w	lr, lr, #1
 8000674:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000678:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800067c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000680:	d204      	bcs.n	800068c <__aeabi_dmul+0x80>
 8000682:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000686:	416d      	adcs	r5, r5
 8000688:	eb46 0606 	adc.w	r6, r6, r6
 800068c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000690:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000694:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000698:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800069c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006a0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a4:	bf88      	it	hi
 80006a6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006aa:	d81e      	bhi.n	80006ea <__aeabi_dmul+0xde>
 80006ac:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006b0:	bf08      	it	eq
 80006b2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b6:	f150 0000 	adcs.w	r0, r0, #0
 80006ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006be:	bd70      	pop	{r4, r5, r6, pc}
 80006c0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c4:	ea46 0101 	orr.w	r1, r6, r1
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	ea81 0103 	eor.w	r1, r1, r3
 80006d0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d4:	bfc2      	ittt	gt
 80006d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006de:	bd70      	popgt	{r4, r5, r6, pc}
 80006e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e4:	f04f 0e00 	mov.w	lr, #0
 80006e8:	3c01      	subs	r4, #1
 80006ea:	f300 80ab 	bgt.w	8000844 <__aeabi_dmul+0x238>
 80006ee:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006f2:	bfde      	ittt	le
 80006f4:	2000      	movle	r0, #0
 80006f6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006fa:	bd70      	pople	{r4, r5, r6, pc}
 80006fc:	f1c4 0400 	rsb	r4, r4, #0
 8000700:	3c20      	subs	r4, #32
 8000702:	da35      	bge.n	8000770 <__aeabi_dmul+0x164>
 8000704:	340c      	adds	r4, #12
 8000706:	dc1b      	bgt.n	8000740 <__aeabi_dmul+0x134>
 8000708:	f104 0414 	add.w	r4, r4, #20
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f305 	lsl.w	r3, r0, r5
 8000714:	fa20 f004 	lsr.w	r0, r0, r4
 8000718:	fa01 f205 	lsl.w	r2, r1, r5
 800071c:	ea40 0002 	orr.w	r0, r0, r2
 8000720:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000724:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000728:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800072c:	fa21 f604 	lsr.w	r6, r1, r4
 8000730:	eb42 0106 	adc.w	r1, r2, r6
 8000734:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000738:	bf08      	it	eq
 800073a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073e:	bd70      	pop	{r4, r5, r6, pc}
 8000740:	f1c4 040c 	rsb	r4, r4, #12
 8000744:	f1c4 0520 	rsb	r5, r4, #32
 8000748:	fa00 f304 	lsl.w	r3, r0, r4
 800074c:	fa20 f005 	lsr.w	r0, r0, r5
 8000750:	fa01 f204 	lsl.w	r2, r1, r4
 8000754:	ea40 0002 	orr.w	r0, r0, r2
 8000758:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	f141 0100 	adc.w	r1, r1, #0
 8000764:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000768:	bf08      	it	eq
 800076a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076e:	bd70      	pop	{r4, r5, r6, pc}
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f205 	lsl.w	r2, r0, r5
 8000778:	ea4e 0e02 	orr.w	lr, lr, r2
 800077c:	fa20 f304 	lsr.w	r3, r0, r4
 8000780:	fa01 f205 	lsl.w	r2, r1, r5
 8000784:	ea43 0302 	orr.w	r3, r3, r2
 8000788:	fa21 f004 	lsr.w	r0, r1, r4
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	fa21 f204 	lsr.w	r2, r1, r4
 8000794:	ea20 0002 	bic.w	r0, r0, r2
 8000798:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800079c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a0:	bf08      	it	eq
 80007a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a6:	bd70      	pop	{r4, r5, r6, pc}
 80007a8:	f094 0f00 	teq	r4, #0
 80007ac:	d10f      	bne.n	80007ce <__aeabi_dmul+0x1c2>
 80007ae:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007b2:	0040      	lsls	r0, r0, #1
 80007b4:	eb41 0101 	adc.w	r1, r1, r1
 80007b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007bc:	bf08      	it	eq
 80007be:	3c01      	subeq	r4, #1
 80007c0:	d0f7      	beq.n	80007b2 <__aeabi_dmul+0x1a6>
 80007c2:	ea41 0106 	orr.w	r1, r1, r6
 80007c6:	f095 0f00 	teq	r5, #0
 80007ca:	bf18      	it	ne
 80007cc:	4770      	bxne	lr
 80007ce:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007d2:	0052      	lsls	r2, r2, #1
 80007d4:	eb43 0303 	adc.w	r3, r3, r3
 80007d8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007dc:	bf08      	it	eq
 80007de:	3d01      	subeq	r5, #1
 80007e0:	d0f7      	beq.n	80007d2 <__aeabi_dmul+0x1c6>
 80007e2:	ea43 0306 	orr.w	r3, r3, r6
 80007e6:	4770      	bx	lr
 80007e8:	ea94 0f0c 	teq	r4, ip
 80007ec:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007f0:	bf18      	it	ne
 80007f2:	ea95 0f0c 	teqne	r5, ip
 80007f6:	d00c      	beq.n	8000812 <__aeabi_dmul+0x206>
 80007f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fc:	bf18      	it	ne
 80007fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000802:	d1d1      	bne.n	80007a8 <__aeabi_dmul+0x19c>
 8000804:	ea81 0103 	eor.w	r1, r1, r3
 8000808:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	bd70      	pop	{r4, r5, r6, pc}
 8000812:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000816:	bf06      	itte	eq
 8000818:	4610      	moveq	r0, r2
 800081a:	4619      	moveq	r1, r3
 800081c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000820:	d019      	beq.n	8000856 <__aeabi_dmul+0x24a>
 8000822:	ea94 0f0c 	teq	r4, ip
 8000826:	d102      	bne.n	800082e <__aeabi_dmul+0x222>
 8000828:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800082c:	d113      	bne.n	8000856 <__aeabi_dmul+0x24a>
 800082e:	ea95 0f0c 	teq	r5, ip
 8000832:	d105      	bne.n	8000840 <__aeabi_dmul+0x234>
 8000834:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000838:	bf1c      	itt	ne
 800083a:	4610      	movne	r0, r2
 800083c:	4619      	movne	r1, r3
 800083e:	d10a      	bne.n	8000856 <__aeabi_dmul+0x24a>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800084c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000850:	f04f 0000 	mov.w	r0, #0
 8000854:	bd70      	pop	{r4, r5, r6, pc}
 8000856:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800085a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085e:	bd70      	pop	{r4, r5, r6, pc}

08000860 <__aeabi_ddiv>:
 8000860:	b570      	push	{r4, r5, r6, lr}
 8000862:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000866:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800086a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086e:	bf1d      	ittte	ne
 8000870:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000874:	ea94 0f0c 	teqne	r4, ip
 8000878:	ea95 0f0c 	teqne	r5, ip
 800087c:	f000 f8a7 	bleq	80009ce <__aeabi_ddiv+0x16e>
 8000880:	eba4 0405 	sub.w	r4, r4, r5
 8000884:	ea81 0e03 	eor.w	lr, r1, r3
 8000888:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800088c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000890:	f000 8088 	beq.w	80009a4 <__aeabi_ddiv+0x144>
 8000894:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000898:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800089c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008a0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008ac:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008b0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b8:	429d      	cmp	r5, r3
 80008ba:	bf08      	it	eq
 80008bc:	4296      	cmpeq	r6, r2
 80008be:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008c2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c6:	d202      	bcs.n	80008ce <__aeabi_ddiv+0x6e>
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	1ab6      	subs	r6, r6, r2
 80008d0:	eb65 0503 	sbc.w	r5, r5, r3
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008de:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ea:	bf22      	ittt	cs
 80008ec:	1ab6      	subcs	r6, r6, r2
 80008ee:	4675      	movcs	r5, lr
 80008f0:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000902:	bf22      	ittt	cs
 8000904:	1ab6      	subcs	r6, r6, r2
 8000906:	4675      	movcs	r5, lr
 8000908:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800090c:	085b      	lsrs	r3, r3, #1
 800090e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000912:	ebb6 0e02 	subs.w	lr, r6, r2
 8000916:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091a:	bf22      	ittt	cs
 800091c:	1ab6      	subcs	r6, r6, r2
 800091e:	4675      	movcs	r5, lr
 8000920:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	ebb6 0e02 	subs.w	lr, r6, r2
 800092e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000932:	bf22      	ittt	cs
 8000934:	1ab6      	subcs	r6, r6, r2
 8000936:	4675      	movcs	r5, lr
 8000938:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800093c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000940:	d018      	beq.n	8000974 <__aeabi_ddiv+0x114>
 8000942:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000946:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800094a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000952:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000956:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800095a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095e:	d1c0      	bne.n	80008e2 <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	d10b      	bne.n	800097e <__aeabi_ddiv+0x11e>
 8000966:	ea41 0100 	orr.w	r1, r1, r0
 800096a:	f04f 0000 	mov.w	r0, #0
 800096e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000972:	e7b6      	b.n	80008e2 <__aeabi_ddiv+0x82>
 8000974:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000978:	bf04      	itt	eq
 800097a:	4301      	orreq	r1, r0
 800097c:	2000      	moveq	r0, #0
 800097e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000982:	bf88      	it	hi
 8000984:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000988:	f63f aeaf 	bhi.w	80006ea <__aeabi_dmul+0xde>
 800098c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000990:	bf04      	itt	eq
 8000992:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000996:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800099a:	f150 0000 	adcs.w	r0, r0, #0
 800099e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009a2:	bd70      	pop	{r4, r5, r6, pc}
 80009a4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009ac:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009b0:	bfc2      	ittt	gt
 80009b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ba:	bd70      	popgt	{r4, r5, r6, pc}
 80009bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009c0:	f04f 0e00 	mov.w	lr, #0
 80009c4:	3c01      	subs	r4, #1
 80009c6:	e690      	b.n	80006ea <__aeabi_dmul+0xde>
 80009c8:	ea45 0e06 	orr.w	lr, r5, r6
 80009cc:	e68d      	b.n	80006ea <__aeabi_dmul+0xde>
 80009ce:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009d2:	ea94 0f0c 	teq	r4, ip
 80009d6:	bf08      	it	eq
 80009d8:	ea95 0f0c 	teqeq	r5, ip
 80009dc:	f43f af3b 	beq.w	8000856 <__aeabi_dmul+0x24a>
 80009e0:	ea94 0f0c 	teq	r4, ip
 80009e4:	d10a      	bne.n	80009fc <__aeabi_ddiv+0x19c>
 80009e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ea:	f47f af34 	bne.w	8000856 <__aeabi_dmul+0x24a>
 80009ee:	ea95 0f0c 	teq	r5, ip
 80009f2:	f47f af25 	bne.w	8000840 <__aeabi_dmul+0x234>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e72c      	b.n	8000856 <__aeabi_dmul+0x24a>
 80009fc:	ea95 0f0c 	teq	r5, ip
 8000a00:	d106      	bne.n	8000a10 <__aeabi_ddiv+0x1b0>
 8000a02:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a06:	f43f aefd 	beq.w	8000804 <__aeabi_dmul+0x1f8>
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	e722      	b.n	8000856 <__aeabi_dmul+0x24a>
 8000a10:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a14:	bf18      	it	ne
 8000a16:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a1a:	f47f aec5 	bne.w	80007a8 <__aeabi_dmul+0x19c>
 8000a1e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a22:	f47f af0d 	bne.w	8000840 <__aeabi_dmul+0x234>
 8000a26:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a2a:	f47f aeeb 	bne.w	8000804 <__aeabi_dmul+0x1f8>
 8000a2e:	e712      	b.n	8000856 <__aeabi_dmul+0x24a>

08000a30 <__gedf2>:
 8000a30:	f04f 3cff 	mov.w	ip, #4294967295
 8000a34:	e006      	b.n	8000a44 <__cmpdf2+0x4>
 8000a36:	bf00      	nop

08000a38 <__ledf2>:
 8000a38:	f04f 0c01 	mov.w	ip, #1
 8000a3c:	e002      	b.n	8000a44 <__cmpdf2+0x4>
 8000a3e:	bf00      	nop

08000a40 <__cmpdf2>:
 8000a40:	f04f 0c01 	mov.w	ip, #1
 8000a44:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a48:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	bf18      	it	ne
 8000a56:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a5a:	d01b      	beq.n	8000a94 <__cmpdf2+0x54>
 8000a5c:	b001      	add	sp, #4
 8000a5e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a62:	bf0c      	ite	eq
 8000a64:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a68:	ea91 0f03 	teqne	r1, r3
 8000a6c:	bf02      	ittt	eq
 8000a6e:	ea90 0f02 	teqeq	r0, r2
 8000a72:	2000      	moveq	r0, #0
 8000a74:	4770      	bxeq	lr
 8000a76:	f110 0f00 	cmn.w	r0, #0
 8000a7a:	ea91 0f03 	teq	r1, r3
 8000a7e:	bf58      	it	pl
 8000a80:	4299      	cmppl	r1, r3
 8000a82:	bf08      	it	eq
 8000a84:	4290      	cmpeq	r0, r2
 8000a86:	bf2c      	ite	cs
 8000a88:	17d8      	asrcs	r0, r3, #31
 8000a8a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8e:	f040 0001 	orr.w	r0, r0, #1
 8000a92:	4770      	bx	lr
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__cmpdf2+0x64>
 8000a9e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa2:	d107      	bne.n	8000ab4 <__cmpdf2+0x74>
 8000aa4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	d1d6      	bne.n	8000a5c <__cmpdf2+0x1c>
 8000aae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab2:	d0d3      	beq.n	8000a5c <__cmpdf2+0x1c>
 8000ab4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_cdrcmple>:
 8000abc:	4684      	mov	ip, r0
 8000abe:	4610      	mov	r0, r2
 8000ac0:	4662      	mov	r2, ip
 8000ac2:	468c      	mov	ip, r1
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4663      	mov	r3, ip
 8000ac8:	e000      	b.n	8000acc <__aeabi_cdcmpeq>
 8000aca:	bf00      	nop

08000acc <__aeabi_cdcmpeq>:
 8000acc:	b501      	push	{r0, lr}
 8000ace:	f7ff ffb7 	bl	8000a40 <__cmpdf2>
 8000ad2:	2800      	cmp	r0, #0
 8000ad4:	bf48      	it	mi
 8000ad6:	f110 0f00 	cmnmi.w	r0, #0
 8000ada:	bd01      	pop	{r0, pc}

08000adc <__aeabi_dcmpeq>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff fff4 	bl	8000acc <__aeabi_cdcmpeq>
 8000ae4:	bf0c      	ite	eq
 8000ae6:	2001      	moveq	r0, #1
 8000ae8:	2000      	movne	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmplt>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffea 	bl	8000acc <__aeabi_cdcmpeq>
 8000af8:	bf34      	ite	cc
 8000afa:	2001      	movcc	r0, #1
 8000afc:	2000      	movcs	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmple>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffe0 	bl	8000acc <__aeabi_cdcmpeq>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpge>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffce 	bl	8000abc <__aeabi_cdrcmple>
 8000b20:	bf94      	ite	ls
 8000b22:	2001      	movls	r0, #1
 8000b24:	2000      	movhi	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpgt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffc4 	bl	8000abc <__aeabi_cdrcmple>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmpun>:
 8000b40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b48:	d102      	bne.n	8000b50 <__aeabi_dcmpun+0x10>
 8000b4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4e:	d10a      	bne.n	8000b66 <__aeabi_dcmpun+0x26>
 8000b50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b58:	d102      	bne.n	8000b60 <__aeabi_dcmpun+0x20>
 8000b5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5e:	d102      	bne.n	8000b66 <__aeabi_dcmpun+0x26>
 8000b60:	f04f 0000 	mov.w	r0, #0
 8000b64:	4770      	bx	lr
 8000b66:	f04f 0001 	mov.w	r0, #1
 8000b6a:	4770      	bx	lr

08000b6c <__aeabi_d2iz>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d215      	bcs.n	8000ba2 <__aeabi_d2iz+0x36>
 8000b76:	d511      	bpl.n	8000b9c <__aeabi_d2iz+0x30>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d912      	bls.n	8000ba8 <__aeabi_d2iz+0x3c>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b92:	fa23 f002 	lsr.w	r0, r3, r2
 8000b96:	bf18      	it	ne
 8000b98:	4240      	negne	r0, r0
 8000b9a:	4770      	bx	lr
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba6:	d105      	bne.n	8000bb4 <__aeabi_d2iz+0x48>
 8000ba8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bac:	bf08      	it	eq
 8000bae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__aeabi_d2uiz>:
 8000bbc:	004a      	lsls	r2, r1, #1
 8000bbe:	d211      	bcs.n	8000be4 <__aeabi_d2uiz+0x28>
 8000bc0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc4:	d211      	bcs.n	8000bea <__aeabi_d2uiz+0x2e>
 8000bc6:	d50d      	bpl.n	8000be4 <__aeabi_d2uiz+0x28>
 8000bc8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bcc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bd0:	d40e      	bmi.n	8000bf0 <__aeabi_d2uiz+0x34>
 8000bd2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bda:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	4770      	bx	lr
 8000be4:	f04f 0000 	mov.w	r0, #0
 8000be8:	4770      	bx	lr
 8000bea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bee:	d102      	bne.n	8000bf6 <__aeabi_d2uiz+0x3a>
 8000bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf4:	4770      	bx	lr
 8000bf6:	f04f 0000 	mov.w	r0, #0
 8000bfa:	4770      	bx	lr

08000bfc <__aeabi_d2f>:
 8000bfc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c00:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c04:	bf24      	itt	cs
 8000c06:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c0a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0e:	d90d      	bls.n	8000c2c <__aeabi_d2f+0x30>
 8000c10:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c14:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c18:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c1c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c20:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c24:	bf08      	it	eq
 8000c26:	f020 0001 	biceq.w	r0, r0, #1
 8000c2a:	4770      	bx	lr
 8000c2c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c30:	d121      	bne.n	8000c76 <__aeabi_d2f+0x7a>
 8000c32:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c36:	bfbc      	itt	lt
 8000c38:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	4770      	bxlt	lr
 8000c3e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c42:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c46:	f1c2 0218 	rsb	r2, r2, #24
 8000c4a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c52:	fa20 f002 	lsr.w	r0, r0, r2
 8000c56:	bf18      	it	ne
 8000c58:	f040 0001 	orrne.w	r0, r0, #1
 8000c5c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c60:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c64:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c68:	ea40 000c 	orr.w	r0, r0, ip
 8000c6c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c70:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c74:	e7cc      	b.n	8000c10 <__aeabi_d2f+0x14>
 8000c76:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c7a:	d107      	bne.n	8000c8c <__aeabi_d2f+0x90>
 8000c7c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c80:	bf1e      	ittt	ne
 8000c82:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c86:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c8a:	4770      	bxne	lr
 8000c8c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c90:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c94:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop

08000c9c <__aeabi_ldivmod>:
 8000c9c:	b97b      	cbnz	r3, 8000cbe <__aeabi_ldivmod+0x22>
 8000c9e:	b972      	cbnz	r2, 8000cbe <__aeabi_ldivmod+0x22>
 8000ca0:	2900      	cmp	r1, #0
 8000ca2:	bfbe      	ittt	lt
 8000ca4:	2000      	movlt	r0, #0
 8000ca6:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000caa:	e006      	blt.n	8000cba <__aeabi_ldivmod+0x1e>
 8000cac:	bf08      	it	eq
 8000cae:	2800      	cmpeq	r0, #0
 8000cb0:	bf1c      	itt	ne
 8000cb2:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cb6:	f04f 30ff 	movne.w	r0, #4294967295
 8000cba:	f000 b9dd 	b.w	8001078 <__aeabi_idiv0>
 8000cbe:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc6:	2900      	cmp	r1, #0
 8000cc8:	db09      	blt.n	8000cde <__aeabi_ldivmod+0x42>
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	db1a      	blt.n	8000d04 <__aeabi_ldivmod+0x68>
 8000cce:	f000 f86b 	bl	8000da8 <__udivmoddi4>
 8000cd2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cda:	b004      	add	sp, #16
 8000cdc:	4770      	bx	lr
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	db1b      	blt.n	8000d20 <__aeabi_ldivmod+0x84>
 8000ce8:	f000 f85e 	bl	8000da8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4240      	negs	r0, r0
 8000cf8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cfc:	4252      	negs	r2, r2
 8000cfe:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d02:	4770      	bx	lr
 8000d04:	4252      	negs	r2, r2
 8000d06:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d0a:	f000 f84d 	bl	8000da8 <__udivmoddi4>
 8000d0e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d12:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d16:	b004      	add	sp, #16
 8000d18:	4240      	negs	r0, r0
 8000d1a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1e:	4770      	bx	lr
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	f000 f83f 	bl	8000da8 <__udivmoddi4>
 8000d2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d32:	b004      	add	sp, #16
 8000d34:	4252      	negs	r2, r2
 8000d36:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d3a:	4770      	bx	lr

08000d3c <__aeabi_d2lz>:
 8000d3c:	b538      	push	{r3, r4, r5, lr}
 8000d3e:	2200      	movs	r2, #0
 8000d40:	2300      	movs	r3, #0
 8000d42:	4604      	mov	r4, r0
 8000d44:	460d      	mov	r5, r1
 8000d46:	f7ff fed3 	bl	8000af0 <__aeabi_dcmplt>
 8000d4a:	b928      	cbnz	r0, 8000d58 <__aeabi_d2lz+0x1c>
 8000d4c:	4620      	mov	r0, r4
 8000d4e:	4629      	mov	r1, r5
 8000d50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d54:	f000 b80a 	b.w	8000d6c <__aeabi_d2ulz>
 8000d58:	4620      	mov	r0, r4
 8000d5a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d5e:	f000 f805 	bl	8000d6c <__aeabi_d2ulz>
 8000d62:	4240      	negs	r0, r0
 8000d64:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d68:	bd38      	pop	{r3, r4, r5, pc}
 8000d6a:	bf00      	nop

08000d6c <__aeabi_d2ulz>:
 8000d6c:	b5d0      	push	{r4, r6, r7, lr}
 8000d6e:	4b0c      	ldr	r3, [pc, #48]	; (8000da0 <__aeabi_d2ulz+0x34>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	4606      	mov	r6, r0
 8000d74:	460f      	mov	r7, r1
 8000d76:	f7ff fc49 	bl	800060c <__aeabi_dmul>
 8000d7a:	f7ff ff1f 	bl	8000bbc <__aeabi_d2uiz>
 8000d7e:	4604      	mov	r4, r0
 8000d80:	f7ff fbca 	bl	8000518 <__aeabi_ui2d>
 8000d84:	4b07      	ldr	r3, [pc, #28]	; (8000da4 <__aeabi_d2ulz+0x38>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	f7ff fc40 	bl	800060c <__aeabi_dmul>
 8000d8c:	4602      	mov	r2, r0
 8000d8e:	460b      	mov	r3, r1
 8000d90:	4630      	mov	r0, r6
 8000d92:	4639      	mov	r1, r7
 8000d94:	f7ff fa82 	bl	800029c <__aeabi_dsub>
 8000d98:	f7ff ff10 	bl	8000bbc <__aeabi_d2uiz>
 8000d9c:	4621      	mov	r1, r4
 8000d9e:	bdd0      	pop	{r4, r6, r7, pc}
 8000da0:	3df00000 	.word	0x3df00000
 8000da4:	41f00000 	.word	0x41f00000

08000da8 <__udivmoddi4>:
 8000da8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dac:	9d08      	ldr	r5, [sp, #32]
 8000dae:	4604      	mov	r4, r0
 8000db0:	468e      	mov	lr, r1
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d14d      	bne.n	8000e52 <__udivmoddi4+0xaa>
 8000db6:	428a      	cmp	r2, r1
 8000db8:	4694      	mov	ip, r2
 8000dba:	d969      	bls.n	8000e90 <__udivmoddi4+0xe8>
 8000dbc:	fab2 f282 	clz	r2, r2
 8000dc0:	b152      	cbz	r2, 8000dd8 <__udivmoddi4+0x30>
 8000dc2:	fa01 f302 	lsl.w	r3, r1, r2
 8000dc6:	f1c2 0120 	rsb	r1, r2, #32
 8000dca:	fa20 f101 	lsr.w	r1, r0, r1
 8000dce:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dd2:	ea41 0e03 	orr.w	lr, r1, r3
 8000dd6:	4094      	lsls	r4, r2
 8000dd8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ddc:	0c21      	lsrs	r1, r4, #16
 8000dde:	fbbe f6f8 	udiv	r6, lr, r8
 8000de2:	fa1f f78c 	uxth.w	r7, ip
 8000de6:	fb08 e316 	mls	r3, r8, r6, lr
 8000dea:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000dee:	fb06 f107 	mul.w	r1, r6, r7
 8000df2:	4299      	cmp	r1, r3
 8000df4:	d90a      	bls.n	8000e0c <__udivmoddi4+0x64>
 8000df6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dfa:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dfe:	f080 811f 	bcs.w	8001040 <__udivmoddi4+0x298>
 8000e02:	4299      	cmp	r1, r3
 8000e04:	f240 811c 	bls.w	8001040 <__udivmoddi4+0x298>
 8000e08:	3e02      	subs	r6, #2
 8000e0a:	4463      	add	r3, ip
 8000e0c:	1a5b      	subs	r3, r3, r1
 8000e0e:	b2a4      	uxth	r4, r4
 8000e10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e14:	fb08 3310 	mls	r3, r8, r0, r3
 8000e18:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e1c:	fb00 f707 	mul.w	r7, r0, r7
 8000e20:	42a7      	cmp	r7, r4
 8000e22:	d90a      	bls.n	8000e3a <__udivmoddi4+0x92>
 8000e24:	eb1c 0404 	adds.w	r4, ip, r4
 8000e28:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2c:	f080 810a 	bcs.w	8001044 <__udivmoddi4+0x29c>
 8000e30:	42a7      	cmp	r7, r4
 8000e32:	f240 8107 	bls.w	8001044 <__udivmoddi4+0x29c>
 8000e36:	4464      	add	r4, ip
 8000e38:	3802      	subs	r0, #2
 8000e3a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e3e:	1be4      	subs	r4, r4, r7
 8000e40:	2600      	movs	r6, #0
 8000e42:	b11d      	cbz	r5, 8000e4c <__udivmoddi4+0xa4>
 8000e44:	40d4      	lsrs	r4, r2
 8000e46:	2300      	movs	r3, #0
 8000e48:	e9c5 4300 	strd	r4, r3, [r5]
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	428b      	cmp	r3, r1
 8000e54:	d909      	bls.n	8000e6a <__udivmoddi4+0xc2>
 8000e56:	2d00      	cmp	r5, #0
 8000e58:	f000 80ef 	beq.w	800103a <__udivmoddi4+0x292>
 8000e5c:	2600      	movs	r6, #0
 8000e5e:	e9c5 0100 	strd	r0, r1, [r5]
 8000e62:	4630      	mov	r0, r6
 8000e64:	4631      	mov	r1, r6
 8000e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6a:	fab3 f683 	clz	r6, r3
 8000e6e:	2e00      	cmp	r6, #0
 8000e70:	d14a      	bne.n	8000f08 <__udivmoddi4+0x160>
 8000e72:	428b      	cmp	r3, r1
 8000e74:	d302      	bcc.n	8000e7c <__udivmoddi4+0xd4>
 8000e76:	4282      	cmp	r2, r0
 8000e78:	f200 80f9 	bhi.w	800106e <__udivmoddi4+0x2c6>
 8000e7c:	1a84      	subs	r4, r0, r2
 8000e7e:	eb61 0303 	sbc.w	r3, r1, r3
 8000e82:	2001      	movs	r0, #1
 8000e84:	469e      	mov	lr, r3
 8000e86:	2d00      	cmp	r5, #0
 8000e88:	d0e0      	beq.n	8000e4c <__udivmoddi4+0xa4>
 8000e8a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e8e:	e7dd      	b.n	8000e4c <__udivmoddi4+0xa4>
 8000e90:	b902      	cbnz	r2, 8000e94 <__udivmoddi4+0xec>
 8000e92:	deff      	udf	#255	; 0xff
 8000e94:	fab2 f282 	clz	r2, r2
 8000e98:	2a00      	cmp	r2, #0
 8000e9a:	f040 8092 	bne.w	8000fc2 <__udivmoddi4+0x21a>
 8000e9e:	eba1 010c 	sub.w	r1, r1, ip
 8000ea2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea6:	fa1f fe8c 	uxth.w	lr, ip
 8000eaa:	2601      	movs	r6, #1
 8000eac:	0c20      	lsrs	r0, r4, #16
 8000eae:	fbb1 f3f7 	udiv	r3, r1, r7
 8000eb2:	fb07 1113 	mls	r1, r7, r3, r1
 8000eb6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eba:	fb0e f003 	mul.w	r0, lr, r3
 8000ebe:	4288      	cmp	r0, r1
 8000ec0:	d908      	bls.n	8000ed4 <__udivmoddi4+0x12c>
 8000ec2:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000eca:	d202      	bcs.n	8000ed2 <__udivmoddi4+0x12a>
 8000ecc:	4288      	cmp	r0, r1
 8000ece:	f200 80cb 	bhi.w	8001068 <__udivmoddi4+0x2c0>
 8000ed2:	4643      	mov	r3, r8
 8000ed4:	1a09      	subs	r1, r1, r0
 8000ed6:	b2a4      	uxth	r4, r4
 8000ed8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000edc:	fb07 1110 	mls	r1, r7, r0, r1
 8000ee0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ee4:	fb0e fe00 	mul.w	lr, lr, r0
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x156>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ef4:	d202      	bcs.n	8000efc <__udivmoddi4+0x154>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	f200 80bb 	bhi.w	8001072 <__udivmoddi4+0x2ca>
 8000efc:	4608      	mov	r0, r1
 8000efe:	eba4 040e 	sub.w	r4, r4, lr
 8000f02:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f06:	e79c      	b.n	8000e42 <__udivmoddi4+0x9a>
 8000f08:	f1c6 0720 	rsb	r7, r6, #32
 8000f0c:	40b3      	lsls	r3, r6
 8000f0e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f12:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f16:	fa20 f407 	lsr.w	r4, r0, r7
 8000f1a:	fa01 f306 	lsl.w	r3, r1, r6
 8000f1e:	431c      	orrs	r4, r3
 8000f20:	40f9      	lsrs	r1, r7
 8000f22:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f26:	fa00 f306 	lsl.w	r3, r0, r6
 8000f2a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f2e:	0c20      	lsrs	r0, r4, #16
 8000f30:	fa1f fe8c 	uxth.w	lr, ip
 8000f34:	fb09 1118 	mls	r1, r9, r8, r1
 8000f38:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f3c:	fb08 f00e 	mul.w	r0, r8, lr
 8000f40:	4288      	cmp	r0, r1
 8000f42:	fa02 f206 	lsl.w	r2, r2, r6
 8000f46:	d90b      	bls.n	8000f60 <__udivmoddi4+0x1b8>
 8000f48:	eb1c 0101 	adds.w	r1, ip, r1
 8000f4c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f50:	f080 8088 	bcs.w	8001064 <__udivmoddi4+0x2bc>
 8000f54:	4288      	cmp	r0, r1
 8000f56:	f240 8085 	bls.w	8001064 <__udivmoddi4+0x2bc>
 8000f5a:	f1a8 0802 	sub.w	r8, r8, #2
 8000f5e:	4461      	add	r1, ip
 8000f60:	1a09      	subs	r1, r1, r0
 8000f62:	b2a4      	uxth	r4, r4
 8000f64:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f68:	fb09 1110 	mls	r1, r9, r0, r1
 8000f6c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f70:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f74:	458e      	cmp	lr, r1
 8000f76:	d908      	bls.n	8000f8a <__udivmoddi4+0x1e2>
 8000f78:	eb1c 0101 	adds.w	r1, ip, r1
 8000f7c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f80:	d26c      	bcs.n	800105c <__udivmoddi4+0x2b4>
 8000f82:	458e      	cmp	lr, r1
 8000f84:	d96a      	bls.n	800105c <__udivmoddi4+0x2b4>
 8000f86:	3802      	subs	r0, #2
 8000f88:	4461      	add	r1, ip
 8000f8a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f8e:	fba0 9402 	umull	r9, r4, r0, r2
 8000f92:	eba1 010e 	sub.w	r1, r1, lr
 8000f96:	42a1      	cmp	r1, r4
 8000f98:	46c8      	mov	r8, r9
 8000f9a:	46a6      	mov	lr, r4
 8000f9c:	d356      	bcc.n	800104c <__udivmoddi4+0x2a4>
 8000f9e:	d053      	beq.n	8001048 <__udivmoddi4+0x2a0>
 8000fa0:	b15d      	cbz	r5, 8000fba <__udivmoddi4+0x212>
 8000fa2:	ebb3 0208 	subs.w	r2, r3, r8
 8000fa6:	eb61 010e 	sbc.w	r1, r1, lr
 8000faa:	fa01 f707 	lsl.w	r7, r1, r7
 8000fae:	fa22 f306 	lsr.w	r3, r2, r6
 8000fb2:	40f1      	lsrs	r1, r6
 8000fb4:	431f      	orrs	r7, r3
 8000fb6:	e9c5 7100 	strd	r7, r1, [r5]
 8000fba:	2600      	movs	r6, #0
 8000fbc:	4631      	mov	r1, r6
 8000fbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fc2:	f1c2 0320 	rsb	r3, r2, #32
 8000fc6:	40d8      	lsrs	r0, r3
 8000fc8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fcc:	fa21 f303 	lsr.w	r3, r1, r3
 8000fd0:	4091      	lsls	r1, r2
 8000fd2:	4301      	orrs	r1, r0
 8000fd4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fd8:	fa1f fe8c 	uxth.w	lr, ip
 8000fdc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000fe0:	fb07 3610 	mls	r6, r7, r0, r3
 8000fe4:	0c0b      	lsrs	r3, r1, #16
 8000fe6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fea:	fb00 f60e 	mul.w	r6, r0, lr
 8000fee:	429e      	cmp	r6, r3
 8000ff0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ff4:	d908      	bls.n	8001008 <__udivmoddi4+0x260>
 8000ff6:	eb1c 0303 	adds.w	r3, ip, r3
 8000ffa:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ffe:	d22f      	bcs.n	8001060 <__udivmoddi4+0x2b8>
 8001000:	429e      	cmp	r6, r3
 8001002:	d92d      	bls.n	8001060 <__udivmoddi4+0x2b8>
 8001004:	3802      	subs	r0, #2
 8001006:	4463      	add	r3, ip
 8001008:	1b9b      	subs	r3, r3, r6
 800100a:	b289      	uxth	r1, r1
 800100c:	fbb3 f6f7 	udiv	r6, r3, r7
 8001010:	fb07 3316 	mls	r3, r7, r6, r3
 8001014:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001018:	fb06 f30e 	mul.w	r3, r6, lr
 800101c:	428b      	cmp	r3, r1
 800101e:	d908      	bls.n	8001032 <__udivmoddi4+0x28a>
 8001020:	eb1c 0101 	adds.w	r1, ip, r1
 8001024:	f106 38ff 	add.w	r8, r6, #4294967295
 8001028:	d216      	bcs.n	8001058 <__udivmoddi4+0x2b0>
 800102a:	428b      	cmp	r3, r1
 800102c:	d914      	bls.n	8001058 <__udivmoddi4+0x2b0>
 800102e:	3e02      	subs	r6, #2
 8001030:	4461      	add	r1, ip
 8001032:	1ac9      	subs	r1, r1, r3
 8001034:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001038:	e738      	b.n	8000eac <__udivmoddi4+0x104>
 800103a:	462e      	mov	r6, r5
 800103c:	4628      	mov	r0, r5
 800103e:	e705      	b.n	8000e4c <__udivmoddi4+0xa4>
 8001040:	4606      	mov	r6, r0
 8001042:	e6e3      	b.n	8000e0c <__udivmoddi4+0x64>
 8001044:	4618      	mov	r0, r3
 8001046:	e6f8      	b.n	8000e3a <__udivmoddi4+0x92>
 8001048:	454b      	cmp	r3, r9
 800104a:	d2a9      	bcs.n	8000fa0 <__udivmoddi4+0x1f8>
 800104c:	ebb9 0802 	subs.w	r8, r9, r2
 8001050:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001054:	3801      	subs	r0, #1
 8001056:	e7a3      	b.n	8000fa0 <__udivmoddi4+0x1f8>
 8001058:	4646      	mov	r6, r8
 800105a:	e7ea      	b.n	8001032 <__udivmoddi4+0x28a>
 800105c:	4620      	mov	r0, r4
 800105e:	e794      	b.n	8000f8a <__udivmoddi4+0x1e2>
 8001060:	4640      	mov	r0, r8
 8001062:	e7d1      	b.n	8001008 <__udivmoddi4+0x260>
 8001064:	46d0      	mov	r8, sl
 8001066:	e77b      	b.n	8000f60 <__udivmoddi4+0x1b8>
 8001068:	3b02      	subs	r3, #2
 800106a:	4461      	add	r1, ip
 800106c:	e732      	b.n	8000ed4 <__udivmoddi4+0x12c>
 800106e:	4630      	mov	r0, r6
 8001070:	e709      	b.n	8000e86 <__udivmoddi4+0xde>
 8001072:	4464      	add	r4, ip
 8001074:	3802      	subs	r0, #2
 8001076:	e742      	b.n	8000efe <__udivmoddi4+0x156>

08001078 <__aeabi_idiv0>:
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop

0800107c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b094      	sub	sp, #80	; 0x50
 8001080:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001082:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001086:	2200      	movs	r2, #0
 8001088:	601a      	str	r2, [r3, #0]
 800108a:	605a      	str	r2, [r3, #4]
 800108c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800108e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001092:	2200      	movs	r2, #0
 8001094:	601a      	str	r2, [r3, #0]
 8001096:	605a      	str	r2, [r3, #4]
 8001098:	609a      	str	r2, [r3, #8]
 800109a:	60da      	str	r2, [r3, #12]
 800109c:	611a      	str	r2, [r3, #16]
 800109e:	615a      	str	r2, [r3, #20]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80010a0:	1d3b      	adds	r3, r7, #4
 80010a2:	2228      	movs	r2, #40	; 0x28
 80010a4:	2100      	movs	r1, #0
 80010a6:	4618      	mov	r0, r3
 80010a8:	f031 f87e 	bl	80321a8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80010ac:	4b40      	ldr	r3, [pc, #256]	; (80011b0 <MX_ADC1_Init+0x134>)
 80010ae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80010b2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80010b4:	4b3e      	ldr	r3, [pc, #248]	; (80011b0 <MX_ADC1_Init+0x134>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010ba:	4b3d      	ldr	r3, [pc, #244]	; (80011b0 <MX_ADC1_Init+0x134>)
 80010bc:	2200      	movs	r2, #0
 80010be:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010c0:	4b3b      	ldr	r3, [pc, #236]	; (80011b0 <MX_ADC1_Init+0x134>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010c6:	4b3a      	ldr	r3, [pc, #232]	; (80011b0 <MX_ADC1_Init+0x134>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010cc:	4b38      	ldr	r3, [pc, #224]	; (80011b0 <MX_ADC1_Init+0x134>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010d4:	4b36      	ldr	r3, [pc, #216]	; (80011b0 <MX_ADC1_Init+0x134>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010da:	4b35      	ldr	r3, [pc, #212]	; (80011b0 <MX_ADC1_Init+0x134>)
 80010dc:	2201      	movs	r2, #1
 80010de:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010e0:	4b33      	ldr	r3, [pc, #204]	; (80011b0 <MX_ADC1_Init+0x134>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80010e6:	4b32      	ldr	r3, [pc, #200]	; (80011b0 <MX_ADC1_Init+0x134>)
 80010e8:	2201      	movs	r2, #1
 80010ea:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010ec:	4b30      	ldr	r3, [pc, #192]	; (80011b0 <MX_ADC1_Init+0x134>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010f4:	4b2e      	ldr	r3, [pc, #184]	; (80011b0 <MX_ADC1_Init+0x134>)
 80010f6:	2204      	movs	r2, #4
 80010f8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80010fa:	4b2d      	ldr	r3, [pc, #180]	; (80011b0 <MX_ADC1_Init+0x134>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001100:	4b2b      	ldr	r3, [pc, #172]	; (80011b0 <MX_ADC1_Init+0x134>)
 8001102:	2200      	movs	r2, #0
 8001104:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001106:	482a      	ldr	r0, [pc, #168]	; (80011b0 <MX_ADC1_Init+0x134>)
 8001108:	f006 fd36 	bl	8007b78 <HAL_ADC_Init>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 8001112:	f004 fd39 	bl	8005b88 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001116:	2300      	movs	r3, #0
 8001118:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800111a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800111e:	4619      	mov	r1, r3
 8001120:	4823      	ldr	r0, [pc, #140]	; (80011b0 <MX_ADC1_Init+0x134>)
 8001122:	f008 fb17 	bl	8009754 <HAL_ADCEx_MultiModeConfigChannel>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 800112c:	f004 fd2c 	bl	8005b88 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001130:	2306      	movs	r3, #6
 8001132:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001134:	2301      	movs	r3, #1
 8001136:	633b      	str	r3, [r7, #48]	; 0x30
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001138:	2300      	movs	r3, #0
 800113a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800113c:	2300      	movs	r3, #0
 800113e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001140:	2300      	movs	r3, #0
 8001142:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfig.Offset = 0;
 8001144:	2300      	movs	r3, #0
 8001146:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001148:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800114c:	4619      	mov	r1, r3
 800114e:	4818      	ldr	r0, [pc, #96]	; (80011b0 <MX_ADC1_Init+0x134>)
 8001150:	f007 f8fa 	bl	8008348 <HAL_ADC_ConfigChannel>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 800115a:	f004 fd15 	bl	8005b88 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_6;
 800115e:	2306      	movs	r3, #6
 8001160:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8001162:	2301      	movs	r3, #1
 8001164:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8001166:	2300      	movs	r3, #0
 8001168:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedNbrOfConversion = 1;
 800116a:	2301      	movs	r3, #1
 800116c:	61fb      	str	r3, [r7, #28]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800116e:	2300      	movs	r3, #0
 8001170:	60fb      	str	r3, [r7, #12]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8001172:	2340      	movs	r3, #64	; 0x40
 8001174:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8001176:	2301      	movs	r3, #1
 8001178:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigInjected.AutoInjectedConv = DISABLE;
 800117a:	2300      	movs	r3, #0
 800117c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8001180:	2300      	movs	r3, #0
 8001182:	f887 3020 	strb.w	r3, [r7, #32]
  sConfigInjected.QueueInjectedContext = DISABLE;
 8001186:	2300      	movs	r3, #0
 8001188:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  sConfigInjected.InjectedOffset = 0;
 800118c:	2300      	movs	r3, #0
 800118e:	61bb      	str	r3, [r7, #24]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8001190:	2300      	movs	r3, #0
 8001192:	617b      	str	r3, [r7, #20]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001194:	1d3b      	adds	r3, r7, #4
 8001196:	4619      	mov	r1, r3
 8001198:	4805      	ldr	r0, [pc, #20]	; (80011b0 <MX_ADC1_Init+0x134>)
 800119a:	f007 fd4b 	bl	8008c34 <HAL_ADCEx_InjectedConfigChannel>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_ADC1_Init+0x12c>
  {
    Error_Handler();
 80011a4:	f004 fcf0 	bl	8005b88 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011a8:	bf00      	nop
 80011aa:	3750      	adds	r7, #80	; 0x50
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	20000744 	.word	0x20000744

080011b4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b08a      	sub	sp, #40	; 0x28
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011bc:	f107 0314 	add.w	r3, r7, #20
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	605a      	str	r2, [r3, #4]
 80011c6:	609a      	str	r2, [r3, #8]
 80011c8:	60da      	str	r2, [r3, #12]
 80011ca:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80011d4:	d123      	bne.n	800121e <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80011d6:	4b14      	ldr	r3, [pc, #80]	; (8001228 <HAL_ADC_MspInit+0x74>)
 80011d8:	695b      	ldr	r3, [r3, #20]
 80011da:	4a13      	ldr	r2, [pc, #76]	; (8001228 <HAL_ADC_MspInit+0x74>)
 80011dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011e0:	6153      	str	r3, [r2, #20]
 80011e2:	4b11      	ldr	r3, [pc, #68]	; (8001228 <HAL_ADC_MspInit+0x74>)
 80011e4:	695b      	ldr	r3, [r3, #20]
 80011e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ea:	613b      	str	r3, [r7, #16]
 80011ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ee:	4b0e      	ldr	r3, [pc, #56]	; (8001228 <HAL_ADC_MspInit+0x74>)
 80011f0:	695b      	ldr	r3, [r3, #20]
 80011f2:	4a0d      	ldr	r2, [pc, #52]	; (8001228 <HAL_ADC_MspInit+0x74>)
 80011f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80011f8:	6153      	str	r3, [r2, #20]
 80011fa:	4b0b      	ldr	r3, [pc, #44]	; (8001228 <HAL_ADC_MspInit+0x74>)
 80011fc:	695b      	ldr	r3, [r3, #20]
 80011fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001206:	2301      	movs	r3, #1
 8001208:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800120a:	2303      	movs	r3, #3
 800120c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120e:	2300      	movs	r3, #0
 8001210:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001212:	f107 0314 	add.w	r3, r7, #20
 8001216:	4619      	mov	r1, r3
 8001218:	4804      	ldr	r0, [pc, #16]	; (800122c <HAL_ADC_MspInit+0x78>)
 800121a:	f008 ff0d 	bl	800a038 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800121e:	bf00      	nop
 8001220:	3728      	adds	r7, #40	; 0x28
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	40021000 	.word	0x40021000
 800122c:	48000800 	.word	0x48000800

08001230 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001234:	4b0d      	ldr	r3, [pc, #52]	; (800126c <MX_CRC_Init+0x3c>)
 8001236:	4a0e      	ldr	r2, [pc, #56]	; (8001270 <MX_CRC_Init+0x40>)
 8001238:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800123a:	4b0c      	ldr	r3, [pc, #48]	; (800126c <MX_CRC_Init+0x3c>)
 800123c:	2200      	movs	r2, #0
 800123e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001240:	4b0a      	ldr	r3, [pc, #40]	; (800126c <MX_CRC_Init+0x3c>)
 8001242:	2200      	movs	r2, #0
 8001244:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001246:	4b09      	ldr	r3, [pc, #36]	; (800126c <MX_CRC_Init+0x3c>)
 8001248:	2200      	movs	r2, #0
 800124a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800124c:	4b07      	ldr	r3, [pc, #28]	; (800126c <MX_CRC_Init+0x3c>)
 800124e:	2200      	movs	r2, #0
 8001250:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001252:	4b06      	ldr	r3, [pc, #24]	; (800126c <MX_CRC_Init+0x3c>)
 8001254:	2201      	movs	r2, #1
 8001256:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001258:	4804      	ldr	r0, [pc, #16]	; (800126c <MX_CRC_Init+0x3c>)
 800125a:	f008 fd9d 	bl	8009d98 <HAL_CRC_Init>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001264:	f004 fc90 	bl	8005b88 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001268:	bf00      	nop
 800126a:	bd80      	pop	{r7, pc}
 800126c:	20000794 	.word	0x20000794
 8001270:	40023000 	.word	0x40023000

08001274 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8001274:	b480      	push	{r7}
 8001276:	b085      	sub	sp, #20
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a0a      	ldr	r2, [pc, #40]	; (80012ac <HAL_CRC_MspInit+0x38>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d10b      	bne.n	800129e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001286:	4b0a      	ldr	r3, [pc, #40]	; (80012b0 <HAL_CRC_MspInit+0x3c>)
 8001288:	695b      	ldr	r3, [r3, #20]
 800128a:	4a09      	ldr	r2, [pc, #36]	; (80012b0 <HAL_CRC_MspInit+0x3c>)
 800128c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001290:	6153      	str	r3, [r2, #20]
 8001292:	4b07      	ldr	r3, [pc, #28]	; (80012b0 <HAL_CRC_MspInit+0x3c>)
 8001294:	695b      	ldr	r3, [r3, #20]
 8001296:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800129a:	60fb      	str	r3, [r7, #12]
 800129c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800129e:	bf00      	nop
 80012a0:	3714      	adds	r7, #20
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	40023000 	.word	0x40023000
 80012b0:	40021000 	.word	0x40021000

080012b4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b08a      	sub	sp, #40	; 0x28
 80012b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ba:	f107 0314 	add.w	r3, r7, #20
 80012be:	2200      	movs	r2, #0
 80012c0:	601a      	str	r2, [r3, #0]
 80012c2:	605a      	str	r2, [r3, #4]
 80012c4:	609a      	str	r2, [r3, #8]
 80012c6:	60da      	str	r2, [r3, #12]
 80012c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012ca:	4b37      	ldr	r3, [pc, #220]	; (80013a8 <MX_GPIO_Init+0xf4>)
 80012cc:	695b      	ldr	r3, [r3, #20]
 80012ce:	4a36      	ldr	r2, [pc, #216]	; (80013a8 <MX_GPIO_Init+0xf4>)
 80012d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012d4:	6153      	str	r3, [r2, #20]
 80012d6:	4b34      	ldr	r3, [pc, #208]	; (80013a8 <MX_GPIO_Init+0xf4>)
 80012d8:	695b      	ldr	r3, [r3, #20]
 80012da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012de:	613b      	str	r3, [r7, #16]
 80012e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012e2:	4b31      	ldr	r3, [pc, #196]	; (80013a8 <MX_GPIO_Init+0xf4>)
 80012e4:	695b      	ldr	r3, [r3, #20]
 80012e6:	4a30      	ldr	r2, [pc, #192]	; (80013a8 <MX_GPIO_Init+0xf4>)
 80012e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80012ec:	6153      	str	r3, [r2, #20]
 80012ee:	4b2e      	ldr	r3, [pc, #184]	; (80013a8 <MX_GPIO_Init+0xf4>)
 80012f0:	695b      	ldr	r3, [r3, #20]
 80012f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80012f6:	60fb      	str	r3, [r7, #12]
 80012f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012fa:	4b2b      	ldr	r3, [pc, #172]	; (80013a8 <MX_GPIO_Init+0xf4>)
 80012fc:	695b      	ldr	r3, [r3, #20]
 80012fe:	4a2a      	ldr	r2, [pc, #168]	; (80013a8 <MX_GPIO_Init+0xf4>)
 8001300:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001304:	6153      	str	r3, [r2, #20]
 8001306:	4b28      	ldr	r3, [pc, #160]	; (80013a8 <MX_GPIO_Init+0xf4>)
 8001308:	695b      	ldr	r3, [r3, #20]
 800130a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800130e:	60bb      	str	r3, [r7, #8]
 8001310:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001312:	4b25      	ldr	r3, [pc, #148]	; (80013a8 <MX_GPIO_Init+0xf4>)
 8001314:	695b      	ldr	r3, [r3, #20]
 8001316:	4a24      	ldr	r2, [pc, #144]	; (80013a8 <MX_GPIO_Init+0xf4>)
 8001318:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800131c:	6153      	str	r3, [r2, #20]
 800131e:	4b22      	ldr	r3, [pc, #136]	; (80013a8 <MX_GPIO_Init+0xf4>)
 8001320:	695b      	ldr	r3, [r3, #20]
 8001322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001326:	607b      	str	r3, [r7, #4]
 8001328:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800132a:	4b1f      	ldr	r3, [pc, #124]	; (80013a8 <MX_GPIO_Init+0xf4>)
 800132c:	695b      	ldr	r3, [r3, #20]
 800132e:	4a1e      	ldr	r2, [pc, #120]	; (80013a8 <MX_GPIO_Init+0xf4>)
 8001330:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001334:	6153      	str	r3, [r2, #20]
 8001336:	4b1c      	ldr	r3, [pc, #112]	; (80013a8 <MX_GPIO_Init+0xf4>)
 8001338:	695b      	ldr	r3, [r3, #20]
 800133a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800133e:	603b      	str	r3, [r7, #0]
 8001340:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8001342:	2200      	movs	r2, #0
 8001344:	f64f 7108 	movw	r1, #65288	; 0xff08
 8001348:	4818      	ldr	r0, [pc, #96]	; (80013ac <MX_GPIO_Init+0xf8>)
 800134a:	f009 f8bd 	bl	800a4c8 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 800134e:	2337      	movs	r3, #55	; 0x37
 8001350:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001352:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001356:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001358:	2300      	movs	r3, #0
 800135a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800135c:	f107 0314 	add.w	r3, r7, #20
 8001360:	4619      	mov	r1, r3
 8001362:	4812      	ldr	r0, [pc, #72]	; (80013ac <MX_GPIO_Init+0xf8>)
 8001364:	f008 fe68 	bl	800a038 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8001368:	f64f 7308 	movw	r3, #65288	; 0xff08
 800136c:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800136e:	2301      	movs	r3, #1
 8001370:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001372:	2300      	movs	r3, #0
 8001374:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001376:	2300      	movs	r3, #0
 8001378:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800137a:	f107 0314 	add.w	r3, r7, #20
 800137e:	4619      	mov	r1, r3
 8001380:	480a      	ldr	r0, [pc, #40]	; (80013ac <MX_GPIO_Init+0xf8>)
 8001382:	f008 fe59 	bl	800a038 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001386:	2301      	movs	r3, #1
 8001388:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800138a:	2300      	movs	r3, #0
 800138c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138e:	2300      	movs	r3, #0
 8001390:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001392:	f107 0314 	add.w	r3, r7, #20
 8001396:	4619      	mov	r1, r3
 8001398:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800139c:	f008 fe4c 	bl	800a038 <HAL_GPIO_Init>

}
 80013a0:	bf00      	nop
 80013a2:	3728      	adds	r7, #40	; 0x28
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	40021000 	.word	0x40021000
 80013ac:	48001000 	.word	0x48001000

080013b0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013b4:	4b1b      	ldr	r3, [pc, #108]	; (8001424 <MX_I2C1_Init+0x74>)
 80013b6:	4a1c      	ldr	r2, [pc, #112]	; (8001428 <MX_I2C1_Init+0x78>)
 80013b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80013ba:	4b1a      	ldr	r3, [pc, #104]	; (8001424 <MX_I2C1_Init+0x74>)
 80013bc:	4a1b      	ldr	r2, [pc, #108]	; (800142c <MX_I2C1_Init+0x7c>)
 80013be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80013c0:	4b18      	ldr	r3, [pc, #96]	; (8001424 <MX_I2C1_Init+0x74>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013c6:	4b17      	ldr	r3, [pc, #92]	; (8001424 <MX_I2C1_Init+0x74>)
 80013c8:	2201      	movs	r2, #1
 80013ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013cc:	4b15      	ldr	r3, [pc, #84]	; (8001424 <MX_I2C1_Init+0x74>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80013d2:	4b14      	ldr	r3, [pc, #80]	; (8001424 <MX_I2C1_Init+0x74>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80013d8:	4b12      	ldr	r3, [pc, #72]	; (8001424 <MX_I2C1_Init+0x74>)
 80013da:	2200      	movs	r2, #0
 80013dc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013de:	4b11      	ldr	r3, [pc, #68]	; (8001424 <MX_I2C1_Init+0x74>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013e4:	4b0f      	ldr	r3, [pc, #60]	; (8001424 <MX_I2C1_Init+0x74>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013ea:	480e      	ldr	r0, [pc, #56]	; (8001424 <MX_I2C1_Init+0x74>)
 80013ec:	f009 f89c 	bl	800a528 <HAL_I2C_Init>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80013f6:	f004 fbc7 	bl	8005b88 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80013fa:	2100      	movs	r1, #0
 80013fc:	4809      	ldr	r0, [pc, #36]	; (8001424 <MX_I2C1_Init+0x74>)
 80013fe:	f009 f9a7 	bl	800a750 <HAL_I2CEx_ConfigAnalogFilter>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001408:	f004 fbbe 	bl	8005b88 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800140c:	2100      	movs	r1, #0
 800140e:	4805      	ldr	r0, [pc, #20]	; (8001424 <MX_I2C1_Init+0x74>)
 8001410:	f009 fa06 	bl	800a820 <HAL_I2CEx_ConfigDigitalFilter>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800141a:	f004 fbb5 	bl	8005b88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800141e:	bf00      	nop
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	200007b8 	.word	0x200007b8
 8001428:	40005400 	.word	0x40005400
 800142c:	2000090e 	.word	0x2000090e

08001430 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b08a      	sub	sp, #40	; 0x28
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001438:	f107 0314 	add.w	r3, r7, #20
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	605a      	str	r2, [r3, #4]
 8001442:	609a      	str	r2, [r3, #8]
 8001444:	60da      	str	r2, [r3, #12]
 8001446:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a17      	ldr	r2, [pc, #92]	; (80014ac <HAL_I2C_MspInit+0x7c>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d127      	bne.n	80014a2 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001452:	4b17      	ldr	r3, [pc, #92]	; (80014b0 <HAL_I2C_MspInit+0x80>)
 8001454:	695b      	ldr	r3, [r3, #20]
 8001456:	4a16      	ldr	r2, [pc, #88]	; (80014b0 <HAL_I2C_MspInit+0x80>)
 8001458:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800145c:	6153      	str	r3, [r2, #20]
 800145e:	4b14      	ldr	r3, [pc, #80]	; (80014b0 <HAL_I2C_MspInit+0x80>)
 8001460:	695b      	ldr	r3, [r3, #20]
 8001462:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001466:	613b      	str	r3, [r7, #16]
 8001468:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800146a:	23c0      	movs	r3, #192	; 0xc0
 800146c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800146e:	2312      	movs	r3, #18
 8001470:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001472:	2301      	movs	r3, #1
 8001474:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001476:	2303      	movs	r3, #3
 8001478:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800147a:	2304      	movs	r3, #4
 800147c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800147e:	f107 0314 	add.w	r3, r7, #20
 8001482:	4619      	mov	r1, r3
 8001484:	480b      	ldr	r0, [pc, #44]	; (80014b4 <HAL_I2C_MspInit+0x84>)
 8001486:	f008 fdd7 	bl	800a038 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800148a:	4b09      	ldr	r3, [pc, #36]	; (80014b0 <HAL_I2C_MspInit+0x80>)
 800148c:	69db      	ldr	r3, [r3, #28]
 800148e:	4a08      	ldr	r2, [pc, #32]	; (80014b0 <HAL_I2C_MspInit+0x80>)
 8001490:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001494:	61d3      	str	r3, [r2, #28]
 8001496:	4b06      	ldr	r3, [pc, #24]	; (80014b0 <HAL_I2C_MspInit+0x80>)
 8001498:	69db      	ldr	r3, [r3, #28]
 800149a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800149e:	60fb      	str	r3, [r7, #12]
 80014a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80014a2:	bf00      	nop
 80014a4:	3728      	adds	r7, #40	; 0x28
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	40005400 	.word	0x40005400
 80014b0:	40021000 	.word	0x40021000
 80014b4:	48000400 	.word	0x48000400

080014b8 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	6039      	str	r1, [r7, #0]
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	4618      	mov	r0, r3
 80014c6:	370c      	adds	r7, #12
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr

080014d0 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj>:
* aligned_malloc takes in the requested alignment and size
*	We will call malloc with extra bytes for our header and the offset
*	required to guarantee the desired alignment.
*/
__attribute__((unused)) void * ei_aligned_calloc(size_t align, size_t size)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b086      	sub	sp, #24
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	6039      	str	r1, [r7, #0]
	void * ptr = NULL;
 80014da:	2300      	movs	r3, #0
 80014dc:	617b      	str	r3, [r7, #20]

	//We want it to be a power of two since align_up operates on powers of two
	assert((align & (align - 1)) == 0);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	1e5a      	subs	r2, r3, #1
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4013      	ands	r3, r2
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d005      	beq.n	80014f6 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x26>
 80014ea:	4b17      	ldr	r3, [pc, #92]	; (8001548 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x78>)
 80014ec:	4a17      	ldr	r2, [pc, #92]	; (800154c <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x7c>)
 80014ee:	2137      	movs	r1, #55	; 0x37
 80014f0:	4817      	ldr	r0, [pc, #92]	; (8001550 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x80>)
 80014f2:	f030 fdbb 	bl	803206c <__assert_func>

	if(align && size)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d01f      	beq.n	800153c <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x6c>
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d01c      	beq.n	800153c <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x6c>
	{
		/*
		 * We know we have to fit an offset value
		 * We also allocate extra bytes to ensure we can meet the alignment
		 */
		uint32_t hdr_size = PTR_OFFSET_SZ + (align - 1);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	3301      	adds	r3, #1
 8001506:	613b      	str	r3, [r7, #16]
		void * p = ei_calloc(size + hdr_size, 1);
 8001508:	683a      	ldr	r2, [r7, #0]
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	4413      	add	r3, r2
 800150e:	2101      	movs	r1, #1
 8001510:	4618      	mov	r0, r3
 8001512:	f026 f9f1 	bl	80278f8 <_Z9ei_callocjj>
 8001516:	60f8      	str	r0, [r7, #12]

		if(p)
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d00e      	beq.n	800153c <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x6c>
		{
			/*
			 * Add the offset size to malloc's pointer (we will always store that)
			 * Then align the resulting value to the arget alignment
			 */
			ptr = (void *) align_up(((uintptr_t)p + PTR_OFFSET_SZ), align);
 800151e:	68fa      	ldr	r2, [r7, #12]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	4413      	add	r3, r2
 8001524:	1c5a      	adds	r2, r3, #1
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	425b      	negs	r3, r3
 800152a:	4013      	ands	r3, r2
 800152c:	617b      	str	r3, [r7, #20]

			//Calculate the offset and store it behind our aligned pointer
			*((offset_t *)ptr - 1) = (offset_t)((uintptr_t)ptr - (uintptr_t)p);
 800152e:	697a      	ldr	r2, [r7, #20]
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	1ad2      	subs	r2, r2, r3
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	3b02      	subs	r3, #2
 8001538:	b292      	uxth	r2, r2
 800153a:	801a      	strh	r2, [r3, #0]

		} // else NULL, could not malloc
	} //else NULL, invalid arguments

	return ptr;
 800153c:	697b      	ldr	r3, [r7, #20]
}
 800153e:	4618      	mov	r0, r3
 8001540:	3718      	adds	r7, #24
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	080334f4 	.word	0x080334f4
 800154c:	08033510 	.word	0x08033510
 8001550:	08033548 	.word	0x08033548

08001554 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv>:
* aligned_free works like free(), but we work backwards from the returned
* pointer to find the correct offset and pointer location to return to free()
* Note that it is VERY BAD to call free() on an aligned_malloc() pointer.
*/
__attribute__((unused)) void ei_aligned_free(void * ptr)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
	assert(ptr);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d105      	bne.n	800156e <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x1a>
 8001562:	4b0b      	ldr	r3, [pc, #44]	; (8001590 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x3c>)
 8001564:	4a0b      	ldr	r2, [pc, #44]	; (8001594 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x40>)
 8001566:	215a      	movs	r1, #90	; 0x5a
 8001568:	480b      	ldr	r0, [pc, #44]	; (8001598 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x44>)
 800156a:	f030 fd7f 	bl	803206c <__assert_func>

	/*
	* Walk backwards from the passed-in pointer to get the pointer offset
	* We convert to an offset_t pointer and rely on pointer math to get the data
	*/
	offset_t offset = *((offset_t *)ptr - 1);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	f833 3c02 	ldrh.w	r3, [r3, #-2]
 8001574:	81fb      	strh	r3, [r7, #14]

	/*
	* Once we have the offset, we can get our original pointer and call free
	*/
	void * p = (void *)((uint8_t *)ptr - offset);
 8001576:	89fb      	ldrh	r3, [r7, #14]
 8001578:	425b      	negs	r3, r3
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	4413      	add	r3, r2
 800157e:	60bb      	str	r3, [r7, #8]
	ei_free(p);
 8001580:	68b8      	ldr	r0, [r7, #8]
 8001582:	f026 f9c7 	bl	8027914 <_Z7ei_freePv>
}
 8001586:	bf00      	nop
 8001588:	3710      	adds	r7, #16
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	080335c8 	.word	0x080335c8
 8001594:	080335cc 	.word	0x080335cc
 8001598:	08033548 	.word	0x08033548

0800159c <_ZNSt9_Any_data9_M_accessEv>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void*       _M_access()       { return &_M_pod_data[0]; }
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	4618      	mov	r0, r3
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr

080015b2 <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
 80015b2:	b480      	push	{r7}
 80015b4:	b083      	sub	sp, #12
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4618      	mov	r0, r3
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr

080015c8 <_ZNSt14_Function_baseC1Ev>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2200      	movs	r2, #0
 80015d4:	609a      	str	r2, [r3, #8]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4618      	mov	r0, r3
 80015da:	370c      	adds	r7, #12
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr

080015e4 <_ZNSt14_Function_baseD1Ev>:

    ~_Function_base()
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d005      	beq.n	8001600 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	6879      	ldr	r1, [r7, #4]
 80015fc:	2203      	movs	r2, #3
 80015fe:	4798      	blx	r3
    }
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	4618      	mov	r0, r3
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <_ZNKSt14_Function_base8_M_emptyEv>:

    bool _M_empty() const { return !_M_manager; }
 800160a:	b480      	push	{r7}
 800160c:	b083      	sub	sp, #12
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	2b00      	cmp	r3, #0
 8001618:	bf0c      	ite	eq
 800161a:	2301      	moveq	r3, #1
 800161c:	2300      	movne	r3, #0
 800161e:	b2db      	uxtb	r3, r3
 8001620:	4618      	mov	r0, r3
 8001622:	370c      	adds	r7, #12
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <_ZN2ei9ei_matrixC1EmmPf>:
     * Create a new matrix
     * @param n_rows Number of rows
     * @param n_cols Number of columns
     * @param a_buffer Buffer, if not provided we'll alloc on the heap
     */
    ei_matrix(
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	60b9      	str	r1, [r7, #8]
 8001636:	607a      	str	r2, [r7, #4]
 8001638:	603b      	str	r3, [r7, #0]
        const char *file = NULL,
        int line = 0
#endif
        )
    {
        if (a_buffer) {
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d006      	beq.n	800164e <_ZN2ei9ei_matrixC1EmmPf+0x22>
            buffer = a_buffer;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	683a      	ldr	r2, [r7, #0]
 8001644:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = false;
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	2200      	movs	r2, #0
 800164a:	731a      	strb	r2, [r3, #12]
 800164c:	e00e      	b.n	800166c <_ZN2ei9ei_matrixC1EmmPf+0x40>
        }
        else {
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	687a      	ldr	r2, [r7, #4]
 8001652:	fb02 f303 	mul.w	r3, r2, r3
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	2101      	movs	r1, #1
 800165a:	4618      	mov	r0, r3
 800165c:	f026 f94c 	bl	80278f8 <_Z9ei_callocjj>
 8001660:	4602      	mov	r2, r0
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = true;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	2201      	movs	r2, #1
 800166a:	731a      	strb	r2, [r3, #12]
        }
        rows = n_rows;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	68ba      	ldr	r2, [r7, #8]
 8001670:	605a      	str	r2, [r3, #4]
        cols = n_cols;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	687a      	ldr	r2, [r7, #4]
 8001676:	609a      	str	r2, [r3, #8]
            else {
                ei_dsp_register_matrix_alloc(rows, cols, sizeof(float), buffer);
            }
#endif
        }
    }
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	4618      	mov	r0, r3
 800167c:	3710      	adds	r7, #16
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <_ZN2ei9ei_matrixD1Ev>:

    ~ei_matrix() {
 8001682:	b580      	push	{r7, lr}
 8001684:	b082      	sub	sp, #8
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
        if (buffer && buffer_managed_by_me) {
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d008      	beq.n	80016a4 <_ZN2ei9ei_matrixD1Ev+0x22>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	7b1b      	ldrb	r3, [r3, #12]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d004      	beq.n	80016a4 <_ZN2ei9ei_matrixD1Ev+0x22>
            ei_free(buffer);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4618      	mov	r0, r3
 80016a0:	f026 f938 	bl	8027914 <_Z7ei_freePv>
                ei_dsp_register_matrix_free(_originally_allocated_rows, _originally_allocated_cols,
                    sizeof(float), buffer);
            }
#endif
        }
    }
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	4618      	mov	r0, r3
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <_ZN2ei12ei_matrix_i8C1EmmPa>:
     * Create a new matrix
     * @param n_rows Number of rows
     * @param n_cols Number of columns
     * @param a_buffer Buffer, if not provided we'll alloc on the heap
     */
    ei_matrix_i8(
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b084      	sub	sp, #16
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	60f8      	str	r0, [r7, #12]
 80016b6:	60b9      	str	r1, [r7, #8]
 80016b8:	607a      	str	r2, [r7, #4]
 80016ba:	603b      	str	r3, [r7, #0]
        const char *file = NULL,
        int line = 0
#endif
        )
    {
        if (a_buffer) {
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d006      	beq.n	80016d0 <_ZN2ei12ei_matrix_i8C1EmmPa+0x22>
            buffer = a_buffer;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	683a      	ldr	r2, [r7, #0]
 80016c6:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = false;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	2200      	movs	r2, #0
 80016cc:	731a      	strb	r2, [r3, #12]
 80016ce:	e00d      	b.n	80016ec <_ZN2ei12ei_matrix_i8C1EmmPa+0x3e>
        }
        else {
            buffer = (int8_t*)ei_calloc(n_rows * n_cols * sizeof(int8_t), 1);
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	fb02 f303 	mul.w	r3, r2, r3
 80016d8:	2101      	movs	r1, #1
 80016da:	4618      	mov	r0, r3
 80016dc:	f026 f90c 	bl	80278f8 <_Z9ei_callocjj>
 80016e0:	4602      	mov	r2, r0
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = true;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	2201      	movs	r2, #1
 80016ea:	731a      	strb	r2, [r3, #12]
        }
        rows = n_rows;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	68ba      	ldr	r2, [r7, #8]
 80016f0:	605a      	str	r2, [r3, #4]
        cols = n_cols;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	687a      	ldr	r2, [r7, #4]
 80016f6:	609a      	str	r2, [r3, #8]
            else {
                ei_dsp_register_matrix_alloc(rows, cols, sizeof(int8_t), buffer);
            }
#endif
        }
    }
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	4618      	mov	r0, r3
 80016fc:	3710      	adds	r7, #16
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}

08001702 <_ZN2ei12ei_matrix_i8D1Ev>:

    ~ei_matrix_i8() {
 8001702:	b580      	push	{r7, lr}
 8001704:	b082      	sub	sp, #8
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
        if (buffer && buffer_managed_by_me) {
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d008      	beq.n	8001724 <_ZN2ei12ei_matrix_i8D1Ev+0x22>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	7b1b      	ldrb	r3, [r3, #12]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d004      	beq.n	8001724 <_ZN2ei12ei_matrix_i8D1Ev+0x22>
            ei_free(buffer);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4618      	mov	r0, r3
 8001720:	f026 f8f8 	bl	8027914 <_Z7ei_freePv>
                ei_dsp_register_matrix_free(_originally_allocated_rows, _originally_allocated_cols,
                    sizeof(int8_t), buffer);
            }
#endif
        }
    }
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	4618      	mov	r0, r3
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <_ZN2ei19ei_quantized_matrixC1EmmPFfhEPh>:
     * @param n_rows Number of rows
     * @param n_cols Number of columns
     * @param a_dequantization_fn How to dequantize the values in this matrix
     * @param a_buffer Optional: a buffer, if set we won't allocate memory ourselves
     */
    ei_quantized_matrix(uint32_t n_rows,
 800172e:	b580      	push	{r7, lr}
 8001730:	b084      	sub	sp, #16
 8001732:	af00      	add	r7, sp, #0
 8001734:	60f8      	str	r0, [r7, #12]
 8001736:	60b9      	str	r1, [r7, #8]
 8001738:	607a      	str	r2, [r7, #4]
 800173a:	603b      	str	r3, [r7, #0]
                        const char *file = NULL,
                        int line = 0
#endif
                        )
    {
        if (a_buffer) {
 800173c:	69bb      	ldr	r3, [r7, #24]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d006      	beq.n	8001750 <_ZN2ei19ei_quantized_matrixC1EmmPFfhEPh+0x22>
            buffer = a_buffer;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	69ba      	ldr	r2, [r7, #24]
 8001746:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = false;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	2200      	movs	r2, #0
 800174c:	731a      	strb	r2, [r3, #12]
 800174e:	e00d      	b.n	800176c <_ZN2ei19ei_quantized_matrixC1EmmPFfhEPh+0x3e>
        }
        else {
            buffer = (uint8_t*)ei_calloc(n_rows * n_cols * sizeof(uint8_t), 1);
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	fb02 f303 	mul.w	r3, r2, r3
 8001758:	2101      	movs	r1, #1
 800175a:	4618      	mov	r0, r3
 800175c:	f026 f8cc 	bl	80278f8 <_Z9ei_callocjj>
 8001760:	4602      	mov	r2, r0
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = true;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	2201      	movs	r2, #1
 800176a:	731a      	strb	r2, [r3, #12]
        }
        rows = n_rows;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	68ba      	ldr	r2, [r7, #8]
 8001770:	605a      	str	r2, [r3, #4]
        cols = n_cols;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	609a      	str	r2, [r3, #8]
        dequantization_fn = a_dequantization_fn;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	683a      	ldr	r2, [r7, #0]
 800177c:	611a      	str	r2, [r3, #16]
            else {
                ei_dsp_register_matrix_alloc(rows, cols, sizeof(uint8_t), buffer);
            }
#endif
        }
    }
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	4618      	mov	r0, r3
 8001782:	3710      	adds	r7, #16
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}

08001788 <_ZN2ei19ei_quantized_matrixD1Ev>:

    ~ei_quantized_matrix() {
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
        if (buffer && buffer_managed_by_me) {
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d008      	beq.n	80017aa <_ZN2ei19ei_quantized_matrixD1Ev+0x22>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	7b1b      	ldrb	r3, [r3, #12]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d004      	beq.n	80017aa <_ZN2ei19ei_quantized_matrixD1Ev+0x22>
            ei_free(buffer);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4618      	mov	r0, r3
 80017a6:	f026 f8b5 	bl	8027914 <_Z7ei_freePv>
                ei_dsp_register_matrix_free(_originally_allocated_rows, _originally_allocated_cols,
                    sizeof(uint8_t), buffer);
            }
#endif
        }
    }
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4618      	mov	r0, r3
 80017ae:	3708      	adds	r7, #8
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <_ZSt25__throw_bad_function_callv>:
#endif // __cplusplus

// required on Adafruit nRF52, it seems not to matter too much on other targets...
#ifdef __cplusplus
namespace std {
    __attribute__((weak)) void __throw_bad_function_call() { while(1); };
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	e7fe      	b.n	80017b8 <_ZSt25__throw_bad_function_callv+0x4>

080017ba <_ZSt4ceilf>:
  using ::ceil;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  ceil(float __x)
  { return __builtin_ceilf(__x); }
 80017ba:	b580      	push	{r7, lr}
 80017bc:	b082      	sub	sp, #8
 80017be:	af00      	add	r7, sp, #0
 80017c0:	ed87 0a01 	vstr	s0, [r7, #4]
 80017c4:	ed97 0a01 	vldr	s0, [r7, #4]
 80017c8:	f02e fa7a 	bl	802fcc0 <ceilf>
 80017cc:	eef0 7a40 	vmov.f32	s15, s0
 80017d0:	eeb0 0a67 	vmov.f32	s0, s15
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}

080017da <_ZSt3expf>:
  using ::exp;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  exp(float __x)
  { return __builtin_expf(__x); }
 80017da:	b580      	push	{r7, lr}
 80017dc:	b082      	sub	sp, #8
 80017de:	af00      	add	r7, sp, #0
 80017e0:	ed87 0a01 	vstr	s0, [r7, #4]
 80017e4:	ed97 0a01 	vldr	s0, [r7, #4]
 80017e8:	f02e fbd8 	bl	802ff9c <expf>
 80017ec:	eef0 7a40 	vmov.f32	s15, s0
 80017f0:	eeb0 0a67 	vmov.f32	s0, s15
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}

080017fa <_ZSt5floorf>:
  using ::floor;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  floor(float __x)
  { return __builtin_floorf(__x); }
 80017fa:	b580      	push	{r7, lr}
 80017fc:	b082      	sub	sp, #8
 80017fe:	af00      	add	r7, sp, #0
 8001800:	ed87 0a01 	vstr	s0, [r7, #4]
 8001804:	ed97 0a01 	vldr	s0, [r7, #4]
 8001808:	f02e fa9c 	bl	802fd44 <floorf>
 800180c:	eef0 7a40 	vmov.f32	s15, s0
 8001810:	eeb0 0a67 	vmov.f32	s0, s15
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 800181a:	b580      	push	{r7, lr}
 800181c:	b082      	sub	sp, #8
 800181e:	af00      	add	r7, sp, #0
 8001820:	ed87 0a01 	vstr	s0, [r7, #4]
 8001824:	ed97 0a01 	vldr	s0, [r7, #4]
 8001828:	f02e faf8 	bl	802fe1c <roundf>
 800182c:	eef0 7a40 	vmov.f32	s15, s0
 8001830:	eeb0 0a67 	vmov.f32	s0, s15
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}

0800183a <_ZN2ei5numpy4sqrtEf>:
// clang-format on

class numpy {
public:

    static float sqrt(float x) {
 800183a:	b580      	push	{r7, lr}
 800183c:	b086      	sub	sp, #24
 800183e:	af00      	add	r7, sp, #0
 8001840:	ed87 0a01 	vstr	s0, [r7, #4]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	617b      	str	r3, [r7, #20]
 8001848:	f107 030c 	add.w	r3, r7, #12
 800184c:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 800184e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001852:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800185a:	db09      	blt.n	8001870 <_ZN2ei5numpy4sqrtEf+0x36>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 800185c:	ed97 0a05 	vldr	s0, [r7, #20]
 8001860:	f02e fc00 	bl	8030064 <sqrtf>
 8001864:	eef0 7a40 	vmov.f32	s15, s0
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	edc3 7a00 	vstr	s15, [r3]
#endif

      return (ARM_MATH_SUCCESS);
 800186e:	e004      	b.n	800187a <_ZN2ei5numpy4sqrtEf+0x40>
    }
    else
    {
      *pOut = 0.0f;
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	f04f 0200 	mov.w	r2, #0
 8001876:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8001878:	bf00      	nop
#if EIDSP_USE_CMSIS_DSP
        float temp;
        arm_sqrt_f32(x, &temp);
        return temp;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	ee07 3a90 	vmov	s15, r3
#else
        return sqrtf(x);
#endif
    }
 8001880:	eeb0 0a67 	vmov.f32	s0, s15
 8001884:	3718      	adds	r7, #24
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
	...

0800188c <_ZN2ei5numpy4rollEPfji>:
     * @param input_array
     * @param input_array_size
     * @param shift The number of places by which elements are shifted.
     * @returns EIDSP_OK if OK
     */
    static int roll(float *input_array, size_t input_array_size, int shift) {
 800188c:	b590      	push	{r4, r7, lr}
 800188e:	b089      	sub	sp, #36	; 0x24
 8001890:	af00      	add	r7, sp, #0
 8001892:	60f8      	str	r0, [r7, #12]
 8001894:	60b9      	str	r1, [r7, #8]
 8001896:	607a      	str	r2, [r7, #4]
        if (shift < 0) {
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2b00      	cmp	r3, #0
 800189c:	da03      	bge.n	80018a6 <_ZN2ei5numpy4rollEPfji+0x1a>
            shift = input_array_size + shift;
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	4413      	add	r3, r2
 80018a4:	607b      	str	r3, [r7, #4]
        }

        if (shift == 0) {
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d101      	bne.n	80018b0 <_ZN2ei5numpy4rollEPfji+0x24>
            return EIDSP_OK;
 80018ac:	2400      	movs	r4, #0
 80018ae:	e030      	b.n	8001912 <_ZN2ei5numpy4rollEPfji+0x86>
        }

        // so we need to allocate a buffer of the size of shift...
        EI_DSP_MATRIX(shift_matrix, 1, shift);
 80018b0:	687a      	ldr	r2, [r7, #4]
 80018b2:	f107 0010 	add.w	r0, r7, #16
 80018b6:	2300      	movs	r3, #0
 80018b8:	2101      	movs	r1, #1
 80018ba:	f7ff feb7 	bl	800162c <_ZN2ei9ei_matrixC1EmmPf>
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d101      	bne.n	80018c8 <_ZN2ei5numpy4rollEPfji+0x3c>
 80018c4:	4c15      	ldr	r4, [pc, #84]	; (800191c <_ZN2ei5numpy4rollEPfji+0x90>)
 80018c6:	e01f      	b.n	8001908 <_ZN2ei5numpy4rollEPfji+0x7c>

        // we copy from the end of the buffer into the shift buffer
        memcpy(shift_matrix.buffer, input_array + input_array_size - shift, shift * sizeof(float));
 80018c8:	6938      	ldr	r0, [r7, #16]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	68ba      	ldr	r2, [r7, #8]
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	68fa      	ldr	r2, [r7, #12]
 80018d4:	18d1      	adds	r1, r2, r3
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	461a      	mov	r2, r3
 80018dc:	f030 fc3c 	bl	8032158 <memcpy>

        // now we do a memmove to shift the array
        memmove(input_array + shift, input_array, (input_array_size - shift) * sizeof(float));
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	68fa      	ldr	r2, [r7, #12]
 80018e6:	18d0      	adds	r0, r2, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	68ba      	ldr	r2, [r7, #8]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	461a      	mov	r2, r3
 80018f2:	68f9      	ldr	r1, [r7, #12]
 80018f4:	f030 fc3e 	bl	8032174 <memmove>

        // and copy the shift buffer back to the beginning of the array
        memcpy(input_array, shift_matrix.buffer, shift * sizeof(float));
 80018f8:	6939      	ldr	r1, [r7, #16]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	461a      	mov	r2, r3
 8001900:	68f8      	ldr	r0, [r7, #12]
 8001902:	f030 fc29 	bl	8032158 <memcpy>

        return EIDSP_OK;
 8001906:	2400      	movs	r4, #0
        EI_DSP_MATRIX(shift_matrix, 1, shift);
 8001908:	f107 0310 	add.w	r3, r7, #16
 800190c:	4618      	mov	r0, r3
 800190e:	f7ff feb8 	bl	8001682 <_ZN2ei9ei_matrixD1Ev>
    }
 8001912:	4623      	mov	r3, r4
 8001914:	4618      	mov	r0, r3
 8001916:	3724      	adds	r7, #36	; 0x24
 8001918:	46bd      	mov	sp, r7
 800191a:	bd90      	pop	{r4, r7, pc}
 800191c:	fffffc16 	.word	0xfffffc16

08001920 <_ZN2ei5numpy3sumEPfj>:
        memcpy(input_array, shift_matrix.buffer, shift * sizeof(int16_t));

        return EIDSP_OK;
    }

    static float sum(float *input_array, size_t input_array_size) {
 8001920:	b480      	push	{r7}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	6039      	str	r1, [r7, #0]
        float res = 0.0f;
 800192a:	f04f 0300 	mov.w	r3, #0
 800192e:	60fb      	str	r3, [r7, #12]
        for (size_t ix = 0; ix < input_array_size; ix++) {
 8001930:	2300      	movs	r3, #0
 8001932:	60bb      	str	r3, [r7, #8]
 8001934:	68ba      	ldr	r2, [r7, #8]
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	429a      	cmp	r2, r3
 800193a:	d20f      	bcs.n	800195c <_ZN2ei5numpy3sumEPfj+0x3c>
            res += input_array[ix];
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	687a      	ldr	r2, [r7, #4]
 8001942:	4413      	add	r3, r2
 8001944:	edd3 7a00 	vldr	s15, [r3]
 8001948:	ed97 7a03 	vldr	s14, [r7, #12]
 800194c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001950:	edc7 7a03 	vstr	s15, [r7, #12]
        for (size_t ix = 0; ix < input_array_size; ix++) {
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	3301      	adds	r3, #1
 8001958:	60bb      	str	r3, [r7, #8]
 800195a:	e7eb      	b.n	8001934 <_ZN2ei5numpy3sumEPfj+0x14>
        }
        return res;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	ee07 3a90 	vmov	s15, r3
    }
 8001962:	eeb0 0a67 	vmov.f32	s0, s15
 8001966:	3714      	adds	r7, #20
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr

08001970 <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE>:
     * @param matrix1_cols matrix1 row size
     * @param matrix2 Pointer to matrix2 (NxK)
     * @param out_matrix Pointer to out matrix (MxK)
     * @returns EIDSP_OK if OK
     */
    static inline int dot_by_row(int i, float *row, size_t matrix1_cols,
 8001970:	b480      	push	{r7}
 8001972:	b089      	sub	sp, #36	; 0x24
 8001974:	af00      	add	r7, sp, #0
 8001976:	60f8      	str	r0, [r7, #12]
 8001978:	60b9      	str	r1, [r7, #8]
 800197a:	607a      	str	r2, [r7, #4]
 800197c:	603b      	str	r3, [r7, #0]
        quantized_matrix_t *matrix2, matrix_t *out_matrix)
    {
        if (matrix1_cols != matrix2->rows) {
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	429a      	cmp	r2, r3
 8001986:	d001      	beq.n	800198c <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE+0x1c>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001988:	4b28      	ldr	r3, [pc, #160]	; (8001a2c <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE+0xbc>)
 800198a:	e048      	b.n	8001a1e <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE+0xae>
        }

        for (uint16_t j = 0; j < matrix2->cols; j++) {
 800198c:	2300      	movs	r3, #0
 800198e:	83fb      	strh	r3, [r7, #30]
 8001990:	8bfa      	ldrh	r2, [r7, #30]
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	429a      	cmp	r2, r3
 8001998:	d240      	bcs.n	8001a1c <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE+0xac>
            float tmp = 0.0;
 800199a:	f04f 0300 	mov.w	r3, #0
 800199e:	61bb      	str	r3, [r7, #24]
            for (uint16_t k = 0; k < matrix1_cols; k++) {
 80019a0:	2300      	movs	r3, #0
 80019a2:	82fb      	strh	r3, [r7, #22]
 80019a4:	8afb      	ldrh	r3, [r7, #22]
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d926      	bls.n	80019fa <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE+0x8a>
                uint8_t u8 = matrix2->buffer[k * matrix2->cols + j];
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	8afb      	ldrh	r3, [r7, #22]
 80019b2:	6839      	ldr	r1, [r7, #0]
 80019b4:	6889      	ldr	r1, [r1, #8]
 80019b6:	fb03 f101 	mul.w	r1, r3, r1
 80019ba:	8bfb      	ldrh	r3, [r7, #30]
 80019bc:	440b      	add	r3, r1
 80019be:	4413      	add	r3, r2
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	757b      	strb	r3, [r7, #21]
                if (u8) { // this matrix appears to be very sparsely populated
 80019c4:	7d7b      	ldrb	r3, [r7, #21]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d013      	beq.n	80019f2 <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE+0x82>
                    tmp += row[k] * quantized_values_one_zero[u8];
 80019ca:	8afb      	ldrh	r3, [r7, #22]
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	68ba      	ldr	r2, [r7, #8]
 80019d0:	4413      	add	r3, r2
 80019d2:	ed93 7a00 	vldr	s14, [r3]
 80019d6:	7d7b      	ldrb	r3, [r7, #21]
 80019d8:	4a15      	ldr	r2, [pc, #84]	; (8001a30 <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE+0xc0>)
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	4413      	add	r3, r2
 80019de:	edd3 7a00 	vldr	s15, [r3]
 80019e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019e6:	ed97 7a06 	vldr	s14, [r7, #24]
 80019ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019ee:	edc7 7a06 	vstr	s15, [r7, #24]
            for (uint16_t k = 0; k < matrix1_cols; k++) {
 80019f2:	8afb      	ldrh	r3, [r7, #22]
 80019f4:	3301      	adds	r3, #1
 80019f6:	82fb      	strh	r3, [r7, #22]
 80019f8:	e7d4      	b.n	80019a4 <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE+0x34>
                }
            }
            out_matrix->buffer[i * matrix2->cols + j] = tmp;
 80019fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	68f9      	ldr	r1, [r7, #12]
 8001a04:	fb03 f101 	mul.w	r1, r3, r1
 8001a08:	8bfb      	ldrh	r3, [r7, #30]
 8001a0a:	440b      	add	r3, r1
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	4413      	add	r3, r2
 8001a10:	69ba      	ldr	r2, [r7, #24]
 8001a12:	601a      	str	r2, [r3, #0]
        for (uint16_t j = 0; j < matrix2->cols; j++) {
 8001a14:	8bfb      	ldrh	r3, [r7, #30]
 8001a16:	3301      	adds	r3, #1
 8001a18:	83fb      	strh	r3, [r7, #30]
 8001a1a:	e7b9      	b.n	8001990 <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE+0x20>
        }

        return EIDSP_OK;
 8001a1c:	2300      	movs	r3, #0
    }
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3724      	adds	r7, #36	; 0x24
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	fffffc14 	.word	0xfffffc14
 8001a30:	08035edc 	.word	0x08035edc

08001a34 <_ZN2ei5numpy17quantize_zero_oneEf>:

    /**
     * Quantize a float value between zero and one
     * @param value Float value
     */
    static uint8_t quantize_zero_one(float value) {
 8001a34:	b480      	push	{r7}
 8001a36:	b089      	sub	sp, #36	; 0x24
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	ed87 0a01 	vstr	s0, [r7, #4]
        const size_t length = sizeof(quantized_values_one_zero) / sizeof(float);
 8001a3e:	23ef      	movs	r3, #239	; 0xef
 8001a40:	613b      	str	r3, [r7, #16]

        // look in the table
        for (size_t ix = 0; ix < length; ix++) {
 8001a42:	2300      	movs	r3, #0
 8001a44:	61fb      	str	r3, [r7, #28]
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	2bee      	cmp	r3, #238	; 0xee
 8001a4a:	d813      	bhi.n	8001a74 <_ZN2ei5numpy17quantize_zero_oneEf+0x40>
            if (quantized_values_one_zero[ix] == value) return ix;
 8001a4c:	4a4c      	ldr	r2, [pc, #304]	; (8001b80 <_ZN2ei5numpy17quantize_zero_oneEf+0x14c>)
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	4413      	add	r3, r2
 8001a54:	edd3 7a00 	vldr	s15, [r3]
 8001a58:	ed97 7a01 	vldr	s14, [r7, #4]
 8001a5c:	eeb4 7a67 	vcmp.f32	s14, s15
 8001a60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a64:	d102      	bne.n	8001a6c <_ZN2ei5numpy17quantize_zero_oneEf+0x38>
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	e083      	b.n	8001b74 <_ZN2ei5numpy17quantize_zero_oneEf+0x140>
        for (size_t ix = 0; ix < length; ix++) {
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	3301      	adds	r3, #1
 8001a70:	61fb      	str	r3, [r7, #28]
 8001a72:	e7e8      	b.n	8001a46 <_ZN2ei5numpy17quantize_zero_oneEf+0x12>
        }

        // no match?

        if (value < quantized_values_one_zero[0]) {
 8001a74:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8001b84 <_ZN2ei5numpy17quantize_zero_oneEf+0x150>
 8001a78:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a84:	d508      	bpl.n	8001a98 <_ZN2ei5numpy17quantize_zero_oneEf+0x64>
            return quantized_values_one_zero[0];
 8001a86:	eddf 7a3f 	vldr	s15, [pc, #252]	; 8001b84 <_ZN2ei5numpy17quantize_zero_oneEf+0x150>
 8001a8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a8e:	edc7 7a00 	vstr	s15, [r7]
 8001a92:	783b      	ldrb	r3, [r7, #0]
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	e06d      	b.n	8001b74 <_ZN2ei5numpy17quantize_zero_oneEf+0x140>
        }
        if (value > quantized_values_one_zero[length - 1]) {
 8001a98:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001a9c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001aa0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aa8:	dd08      	ble.n	8001abc <_ZN2ei5numpy17quantize_zero_oneEf+0x88>
            return quantized_values_one_zero[length - 1];
 8001aaa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001aae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ab2:	edc7 7a00 	vstr	s15, [r7]
 8001ab6:	783b      	ldrb	r3, [r7, #0]
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	e05b      	b.n	8001b74 <_ZN2ei5numpy17quantize_zero_oneEf+0x140>
        }

        int lo = 0;
 8001abc:	2300      	movs	r3, #0
 8001abe:	61bb      	str	r3, [r7, #24]
        int hi = length - 1;
 8001ac0:	23ee      	movs	r3, #238	; 0xee
 8001ac2:	617b      	str	r3, [r7, #20]

        while (lo <= hi) {
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	dc35      	bgt.n	8001b38 <_ZN2ei5numpy17quantize_zero_oneEf+0x104>
            int mid = (hi + lo) / 2;
 8001acc:	697a      	ldr	r2, [r7, #20]
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	4413      	add	r3, r2
 8001ad2:	0fda      	lsrs	r2, r3, #31
 8001ad4:	4413      	add	r3, r2
 8001ad6:	105b      	asrs	r3, r3, #1
 8001ad8:	60fb      	str	r3, [r7, #12]

            if (value < quantized_values_one_zero[mid]) {
 8001ada:	4a29      	ldr	r2, [pc, #164]	; (8001b80 <_ZN2ei5numpy17quantize_zero_oneEf+0x14c>)
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	4413      	add	r3, r2
 8001ae2:	edd3 7a00 	vldr	s15, [r3]
 8001ae6:	ed97 7a01 	vldr	s14, [r7, #4]
 8001aea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001aee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001af2:	d503      	bpl.n	8001afc <_ZN2ei5numpy17quantize_zero_oneEf+0xc8>
                hi = mid - 1;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	3b01      	subs	r3, #1
 8001af8:	617b      	str	r3, [r7, #20]
 8001afa:	e7e3      	b.n	8001ac4 <_ZN2ei5numpy17quantize_zero_oneEf+0x90>
            } else if (value > quantized_values_one_zero[mid]) {
 8001afc:	4a20      	ldr	r2, [pc, #128]	; (8001b80 <_ZN2ei5numpy17quantize_zero_oneEf+0x14c>)
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	4413      	add	r3, r2
 8001b04:	edd3 7a00 	vldr	s15, [r3]
 8001b08:	ed97 7a01 	vldr	s14, [r7, #4]
 8001b0c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b14:	dd03      	ble.n	8001b1e <_ZN2ei5numpy17quantize_zero_oneEf+0xea>
                lo = mid + 1;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	3301      	adds	r3, #1
 8001b1a:	61bb      	str	r3, [r7, #24]
 8001b1c:	e7d2      	b.n	8001ac4 <_ZN2ei5numpy17quantize_zero_oneEf+0x90>
            } else {
                return quantized_values_one_zero[mid];
 8001b1e:	4a18      	ldr	r2, [pc, #96]	; (8001b80 <_ZN2ei5numpy17quantize_zero_oneEf+0x14c>)
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	4413      	add	r3, r2
 8001b26:	edd3 7a00 	vldr	s15, [r3]
 8001b2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b2e:	edc7 7a00 	vstr	s15, [r7]
 8001b32:	783b      	ldrb	r3, [r7, #0]
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	e01d      	b.n	8001b74 <_ZN2ei5numpy17quantize_zero_oneEf+0x140>
            }
        }

        // lo == hi + 1
        return (quantized_values_one_zero[lo] - value) < (value - quantized_values_one_zero[hi]) ?
 8001b38:	4a11      	ldr	r2, [pc, #68]	; (8001b80 <_ZN2ei5numpy17quantize_zero_oneEf+0x14c>)
 8001b3a:	69bb      	ldr	r3, [r7, #24]
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	4413      	add	r3, r2
 8001b40:	ed93 7a00 	vldr	s14, [r3]
 8001b44:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b48:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b4c:	4a0c      	ldr	r2, [pc, #48]	; (8001b80 <_ZN2ei5numpy17quantize_zero_oneEf+0x14c>)
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	4413      	add	r3, r2
 8001b54:	edd3 7a00 	vldr	s15, [r3]
 8001b58:	edd7 6a01 	vldr	s13, [r7, #4]
 8001b5c:	ee76 7ae7 	vsub.f32	s15, s13, s15
            lo :
            hi;
 8001b60:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b68:	d502      	bpl.n	8001b70 <_ZN2ei5numpy17quantize_zero_oneEf+0x13c>
 8001b6a:	69bb      	ldr	r3, [r7, #24]
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	e001      	b.n	8001b74 <_ZN2ei5numpy17quantize_zero_oneEf+0x140>
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	b2db      	uxtb	r3, r3
    }
 8001b74:	4618      	mov	r0, r3
 8001b76:	3724      	adds	r7, #36	; 0x24
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr
 8001b80:	08035edc 	.word	0x08035edc
 8001b84:	00000000 	.word	0x00000000

08001b88 <_ZN2ei5numpy19dequantize_zero_oneEh>:

    /**
     * Dequantize a float value between zero and one
     * @param value
     */
    static float dequantize_zero_one(uint8_t value) {
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	4603      	mov	r3, r0
 8001b90:	71fb      	strb	r3, [r7, #7]
        return quantized_values_one_zero[value];
 8001b92:	79fb      	ldrb	r3, [r7, #7]
 8001b94:	4a06      	ldr	r2, [pc, #24]	; (8001bb0 <_ZN2ei5numpy19dequantize_zero_oneEh+0x28>)
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	4413      	add	r3, r2
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	ee07 3a90 	vmov	s15, r3
    }
 8001ba0:	eeb0 0a67 	vmov.f32	s0, s15
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	08035edc 	.word	0x08035edc

08001bb4 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt>:
     * @param output Output matrix of size (M+pad_before+pad_after x N)
     * @param pad_before Number of items to pad before
     * @param pad_after Number of items to pad after
     * @returns 0 if OK
     */
    static int pad_1d_symmetric(matrix_t *input, matrix_t *output, uint16_t pad_before, uint16_t pad_after) {
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b08a      	sub	sp, #40	; 0x28
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	60f8      	str	r0, [r7, #12]
 8001bbc:	60b9      	str	r1, [r7, #8]
 8001bbe:	4611      	mov	r1, r2
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	80fb      	strh	r3, [r7, #6]
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	80bb      	strh	r3, [r7, #4]
        if (output->cols != input->cols) {
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	689a      	ldr	r2, [r3, #8]
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d001      	beq.n	8001bda <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001bd6:	4b66      	ldr	r3, [pc, #408]	; (8001d70 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x1bc>)
 8001bd8:	e0c5      	b.n	8001d66 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x1b2>
        }

        if (output->rows != input->rows + pad_before + pad_after) {
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	685a      	ldr	r2, [r3, #4]
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	6859      	ldr	r1, [r3, #4]
 8001be2:	88fb      	ldrh	r3, [r7, #6]
 8001be4:	4419      	add	r1, r3
 8001be6:	88bb      	ldrh	r3, [r7, #4]
 8001be8:	440b      	add	r3, r1
 8001bea:	429a      	cmp	r2, r3
 8001bec:	d001      	beq.n	8001bf2 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x3e>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001bee:	4b60      	ldr	r3, [pc, #384]	; (8001d70 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x1bc>)
 8001bf0:	e0b9      	b.n	8001d66 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x1b2>
        }

        if (input->rows == 0) {
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d101      	bne.n	8001bfe <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x4a>
            EIDSP_ERR(EIDSP_INPUT_MATRIX_EMPTY);
 8001bfa:	4b5e      	ldr	r3, [pc, #376]	; (8001d74 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x1c0>)
 8001bfc:	e0b3      	b.n	8001d66 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x1b2>
        }

        uint32_t pad_before_index = 0;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	627b      	str	r3, [r7, #36]	; 0x24
        bool pad_before_direction_up = true;
 8001c02:	2301      	movs	r3, #1
 8001c04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

        for (int32_t ix = pad_before - 1; ix >= 0; ix--) {
 8001c08:	88fb      	ldrh	r3, [r7, #6]
 8001c0a:	3b01      	subs	r3, #1
 8001c0c:	61fb      	str	r3, [r7, #28]
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	db42      	blt.n	8001c9a <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xe6>
            memcpy(output->buffer + (input->cols * ix),
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	69f9      	ldr	r1, [r7, #28]
 8001c1e:	fb01 f303 	mul.w	r3, r1, r3
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	18d0      	adds	r0, r2, r3
                input->buffer + (pad_before_index * input->cols),
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c30:	fb01 f303 	mul.w	r3, r1, r3
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	18d1      	adds	r1, r2, r3
                input->cols * sizeof(float));
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	009b      	lsls	r3, r3, #2
            memcpy(output->buffer + (input->cols * ix),
 8001c3e:	461a      	mov	r2, r3
 8001c40:	f030 fa8a 	bl	8032158 <memcpy>

            if (pad_before_index == 0 && !pad_before_direction_up) {
 8001c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d10a      	bne.n	8001c60 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xac>
 8001c4a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001c4e:	f083 0301 	eor.w	r3, r3, #1
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d003      	beq.n	8001c60 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xac>
                pad_before_direction_up = true;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001c5e:	e018      	b.n	8001c92 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xde>
            }
            else if (pad_before_index == input->rows - 1 && pad_before_direction_up) {
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	3b01      	subs	r3, #1
 8001c66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d107      	bne.n	8001c7c <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xc8>
 8001c6c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d003      	beq.n	8001c7c <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xc8>
                pad_before_direction_up = false;
 8001c74:	2300      	movs	r3, #0
 8001c76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001c7a:	e00a      	b.n	8001c92 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xde>
            }
            else if (pad_before_direction_up) {
 8001c7c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d003      	beq.n	8001c8c <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xd8>
                pad_before_index++;
 8001c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c86:	3301      	adds	r3, #1
 8001c88:	627b      	str	r3, [r7, #36]	; 0x24
 8001c8a:	e002      	b.n	8001c92 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xde>
            }
            else {
                pad_before_index--;
 8001c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	627b      	str	r3, [r7, #36]	; 0x24
        for (int32_t ix = pad_before - 1; ix >= 0; ix--) {
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	3b01      	subs	r3, #1
 8001c96:	61fb      	str	r3, [r7, #28]
 8001c98:	e7b9      	b.n	8001c0e <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x5a>
            }
        }

        memcpy(output->buffer + (input->cols * pad_before),
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	88f9      	ldrh	r1, [r7, #6]
 8001ca4:	fb01 f303 	mul.w	r3, r1, r3
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	18d0      	adds	r0, r2, r3
            input->buffer,
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	6819      	ldr	r1, [r3, #0]
            input->rows * input->cols * sizeof(float));
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	68fa      	ldr	r2, [r7, #12]
 8001cb6:	6892      	ldr	r2, [r2, #8]
 8001cb8:	fb02 f303 	mul.w	r3, r2, r3
 8001cbc:	009b      	lsls	r3, r3, #2
        memcpy(output->buffer + (input->cols * pad_before),
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	f030 fa4a 	bl	8032158 <memcpy>

        int32_t pad_after_index = input->rows - 1;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	3b01      	subs	r3, #1
 8001cca:	61bb      	str	r3, [r7, #24]
        bool pad_after_direction_up = false;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	75fb      	strb	r3, [r7, #23]

        for (int32_t ix = 0; ix < pad_after; ix++) {
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	613b      	str	r3, [r7, #16]
 8001cd4:	88bb      	ldrh	r3, [r7, #4]
 8001cd6:	693a      	ldr	r2, [r7, #16]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	da43      	bge.n	8001d64 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x1b0>
            memcpy(output->buffer + (input->cols * (ix + pad_before + input->rows)),
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	88f8      	ldrh	r0, [r7, #6]
 8001ce6:	6939      	ldr	r1, [r7, #16]
 8001ce8:	4401      	add	r1, r0
 8001cea:	4608      	mov	r0, r1
 8001cec:	68f9      	ldr	r1, [r7, #12]
 8001cee:	6849      	ldr	r1, [r1, #4]
 8001cf0:	4401      	add	r1, r0
 8001cf2:	fb01 f303 	mul.w	r3, r1, r3
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	18d0      	adds	r0, r2, r3
                input->buffer + (pad_after_index * input->cols),
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	69b9      	ldr	r1, [r7, #24]
 8001d04:	fb01 f303 	mul.w	r3, r1, r3
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	18d1      	adds	r1, r2, r3
                input->cols * sizeof(float));
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	009b      	lsls	r3, r3, #2
            memcpy(output->buffer + (input->cols * (ix + pad_before + input->rows)),
 8001d12:	461a      	mov	r2, r3
 8001d14:	f030 fa20 	bl	8032158 <memcpy>

            if (pad_after_index == 0 && !pad_after_direction_up) {
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d108      	bne.n	8001d30 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x17c>
 8001d1e:	7dfb      	ldrb	r3, [r7, #23]
 8001d20:	f083 0301 	eor.w	r3, r3, #1
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d002      	beq.n	8001d30 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x17c>
                pad_after_direction_up = true;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	75fb      	strb	r3, [r7, #23]
 8001d2e:	e015      	b.n	8001d5c <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x1a8>
            }
            else if (pad_after_index == static_cast<int32_t>(input->rows) - 1 && pad_after_direction_up) {
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	3b01      	subs	r3, #1
 8001d36:	69ba      	ldr	r2, [r7, #24]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d105      	bne.n	8001d48 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x194>
 8001d3c:	7dfb      	ldrb	r3, [r7, #23]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d002      	beq.n	8001d48 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x194>
                pad_after_direction_up = false;
 8001d42:	2300      	movs	r3, #0
 8001d44:	75fb      	strb	r3, [r7, #23]
 8001d46:	e009      	b.n	8001d5c <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x1a8>
            }
            else if (pad_after_direction_up) {
 8001d48:	7dfb      	ldrb	r3, [r7, #23]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d003      	beq.n	8001d56 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x1a2>
                pad_after_index++;
 8001d4e:	69bb      	ldr	r3, [r7, #24]
 8001d50:	3301      	adds	r3, #1
 8001d52:	61bb      	str	r3, [r7, #24]
 8001d54:	e002      	b.n	8001d5c <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x1a8>
            }
            else {
                pad_after_index--;
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	3b01      	subs	r3, #1
 8001d5a:	61bb      	str	r3, [r7, #24]
        for (int32_t ix = 0; ix < pad_after; ix++) {
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	3301      	adds	r3, #1
 8001d60:	613b      	str	r3, [r7, #16]
 8001d62:	e7b7      	b.n	8001cd4 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x120>
            }
        }

        return EIDSP_OK;
 8001d64:	2300      	movs	r3, #0
    }
 8001d66:	4618      	mov	r0, r3
 8001d68:	3728      	adds	r7, #40	; 0x28
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	fffffc14 	.word	0xfffffc14
 8001d74:	fffffc12 	.word	0xfffffc12

08001d78 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf>:
     * Scale a matrix in place
     * @param matrix
     * @param scale
     * @returns 0 if OK
     */
    static int scale(matrix_t *matrix, float scale) {
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b088      	sub	sp, #32
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	ed87 0a00 	vstr	s0, [r7]
        if (scale == 1.0f) return EIDSP_OK;
 8001d84:	edd7 7a00 	vldr	s15, [r7]
 8001d88:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001d8c:	eef4 7a47 	vcmp.f32	s15, s14
 8001d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d94:	d101      	bne.n	8001d9a <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x22>
 8001d96:	2300      	movs	r3, #0
 8001d98:	e033      	b.n	8001e02 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x8a>

#if EIDSP_USE_CMSIS_DSP
        if (matrix->rows > EI_MAX_UINT16 || matrix->cols > EI_MAX_UINT16) {
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001da2:	d204      	bcs.n	8001dae <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x36>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dac:	d301      	bcc.n	8001db2 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x3a>
            return EIDSP_NARROWING;
 8001dae:	4b17      	ldr	r3, [pc, #92]	; (8001e0c <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x94>)
 8001db0:	e027      	b.n	8001e02 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x8a>
        }

        const arm_matrix_instance_f32 mi = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	82bb      	strh	r3, [r7, #20]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	82fb      	strh	r3, [r7, #22]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	61bb      	str	r3, [r7, #24]
        arm_matrix_instance_f32 mo = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	81bb      	strh	r3, [r7, #12]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	81fb      	strh	r3, [r7, #14]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	613b      	str	r3, [r7, #16]
        int status = arm_mat_scale_f32(&mi, scale, &mo);
 8001dde:	f107 020c 	add.w	r2, r7, #12
 8001de2:	f107 0314 	add.w	r3, r7, #20
 8001de6:	4611      	mov	r1, r2
 8001de8:	ed97 0a00 	vldr	s0, [r7]
 8001dec:	4618      	mov	r0, r3
 8001dee:	f012 ff08 	bl	8014c02 <arm_mat_scale_f32>
 8001df2:	4603      	mov	r3, r0
 8001df4:	61fb      	str	r3, [r7, #28]
        if (status != ARM_MATH_SUCCESS) {
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x88>
            return status;
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	e000      	b.n	8001e02 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x8a>
#else
        for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
            matrix->buffer[ix] *= scale;
        }
#endif
        return EIDSP_OK;
 8001e00:	2300      	movs	r3, #0
    }
 8001e02:	4618      	mov	r0, r3
 8001e04:	3720      	adds	r7, #32
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	fffffc0c 	.word	0xfffffc0c

08001e10 <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf>:
     * Subtract from matrix in place
     * @param matrix
     * @param subtraction
     * @returns 0 if OK
     */
    static int subtract(matrix_t *matrix, float subtraction) {
 8001e10:	b480      	push	{r7}
 8001e12:	b085      	sub	sp, #20
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	ed87 0a00 	vstr	s0, [r7]
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	60fb      	str	r3, [r7, #12]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	6892      	ldr	r2, [r2, #8]
 8001e28:	fb02 f303 	mul.w	r3, r2, r3
 8001e2c:	68fa      	ldr	r2, [r7, #12]
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d215      	bcs.n	8001e5e <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf+0x4e>
            matrix->buffer[ix] -= subtraction;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	4413      	add	r3, r2
 8001e3c:	ed93 7a00 	vldr	s14, [r3]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	4413      	add	r3, r2
 8001e4a:	edd7 7a00 	vldr	s15, [r7]
 8001e4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e52:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	3301      	adds	r3, #1
 8001e5a:	60fb      	str	r3, [r7, #12]
 8001e5c:	e7e0      	b.n	8001e20 <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf+0x10>
        }
        return EIDSP_OK;
 8001e5e:	2300      	movs	r3, #0
    }
 8001e60:	4618      	mov	r0, r3
 8001e62:	3714      	adds	r7, #20
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_>:
     * Calculate the mean over a matrix on axis 0
     * @param input_matrix Input matrix (MxN)
     * @param output_matrix Output matrix (Nx1)
     * @returns 0 if OK
     */
    static int mean_axis0(matrix_t *input_matrix, matrix_t *output_matrix) {
 8001e6c:	b480      	push	{r7}
 8001e6e:	b087      	sub	sp, #28
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	6039      	str	r1, [r7, #0]
        if (input_matrix->cols != output_matrix->rows) {
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	689a      	ldr	r2, [r3, #8]
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d001      	beq.n	8001e86 <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0x1a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001e82:	4b26      	ldr	r3, [pc, #152]	; (8001f1c <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0xb0>)
 8001e84:	e043      	b.n	8001f0e <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0xa2>
        }

        if (output_matrix->cols != 1) {
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d001      	beq.n	8001e92 <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001e8e:	4b23      	ldr	r3, [pc, #140]	; (8001f1c <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0xb0>)
 8001e90:	e03d      	b.n	8001f0e <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0xa2>
        }

        for (size_t col = 0; col < input_matrix->cols; col++) {
 8001e92:	2300      	movs	r3, #0
 8001e94:	617b      	str	r3, [r7, #20]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	697a      	ldr	r2, [r7, #20]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d235      	bcs.n	8001f0c <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0xa0>
            // gathering up the current columnand moving it into sequential memory to use
            // SIMD to calculate the mean would take more time than the simple loop
            // so disable this case. The alternative is to use 2 transposes and on a "big" ARM
            // platform that will take more time

            float sum = 0.0f;
 8001ea0:	f04f 0300 	mov.w	r3, #0
 8001ea4:	613b      	str	r3, [r7, #16]

            for (size_t row = 0; row < input_matrix->rows; row++) {
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	60fb      	str	r3, [r7, #12]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	68fa      	ldr	r2, [r7, #12]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d216      	bcs.n	8001ee2 <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0x76>
                sum += input_matrix->buffer[( row * input_matrix->cols ) + col];
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	68f9      	ldr	r1, [r7, #12]
 8001ebe:	fb03 f101 	mul.w	r1, r3, r1
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	440b      	add	r3, r1
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	4413      	add	r3, r2
 8001eca:	edd3 7a00 	vldr	s15, [r3]
 8001ece:	ed97 7a04 	vldr	s14, [r7, #16]
 8001ed2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ed6:	edc7 7a04 	vstr	s15, [r7, #16]
            for (size_t row = 0; row < input_matrix->rows; row++) {
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	3301      	adds	r3, #1
 8001ede:	60fb      	str	r3, [r7, #12]
 8001ee0:	e7e3      	b.n	8001eaa <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0x3e>
            }

            output_matrix->buffer[col] = sum / input_matrix->rows;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	ee07 3a90 	vmov	s15, r3
 8001eea:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	4413      	add	r3, r2
 8001ef8:	edd7 6a04 	vldr	s13, [r7, #16]
 8001efc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f00:	edc3 7a00 	vstr	s15, [r3]
        for (size_t col = 0; col < input_matrix->cols; col++) {
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	3301      	adds	r3, #1
 8001f08:	617b      	str	r3, [r7, #20]
 8001f0a:	e7c4      	b.n	8001e96 <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0x2a>
        }

        return EIDSP_OK;
 8001f0c:	2300      	movs	r3, #0
    }
 8001f0e:	4618      	mov	r0, r3
 8001f10:	371c      	adds	r7, #28
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	fffffc14 	.word	0xfffffc14

08001f20 <_ZN2ei5numpy9std_axis0EPNS_9ei_matrixES2_>:
     * Calculate the standard deviation over a matrix on axis 0
     * @param input_matrix Input matrix (MxN)
     * @param output_matrix Output matrix (Nx1)
     * @returns 0 if OK
     */
    static int std_axis0(matrix_t *input_matrix, matrix_t *output_matrix) {
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	6039      	str	r1, [r7, #0]
#if EIDSP_USE_CMSIS_DSP
        return std_axis0_CMSIS(input_matrix, output_matrix);
 8001f2a:	6839      	ldr	r1, [r7, #0]
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f000 fbc9 	bl	80026c4 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_>
 8001f32:	4603      	mov	r3, r0
            output_matrix->buffer[col] = sqrt(std / input_matrix->rows);
        }

        return EIDSP_OK;
#endif
    }
 8001f34:	4618      	mov	r0, r3
 8001f36:	3708      	adds	r7, #8
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <_ZN2ei5numpy3minEPNS_9ei_matrixES2_>:
    /**
     * Get the minimum value in a matrix per row
     * @param input_matrix Input matrix (MxN)
     * @param output_matrix Output matrix (Mx1)
     */
    static int min(matrix_t *input_matrix, matrix_t *output_matrix) {
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b086      	sub	sp, #24
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	6039      	str	r1, [r7, #0]
        if (input_matrix->rows != output_matrix->rows) {
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	685a      	ldr	r2, [r3, #4]
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d001      	beq.n	8001f56 <_ZN2ei5numpy3minEPNS_9ei_matrixES2_+0x1a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001f52:	4b18      	ldr	r3, [pc, #96]	; (8001fb4 <_ZN2ei5numpy3minEPNS_9ei_matrixES2_+0x78>)
 8001f54:	e029      	b.n	8001faa <_ZN2ei5numpy3minEPNS_9ei_matrixES2_+0x6e>
        }
        if (output_matrix->cols != 1) {
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d001      	beq.n	8001f62 <_ZN2ei5numpy3minEPNS_9ei_matrixES2_+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001f5e:	4b15      	ldr	r3, [pc, #84]	; (8001fb4 <_ZN2ei5numpy3minEPNS_9ei_matrixES2_+0x78>)
 8001f60:	e023      	b.n	8001faa <_ZN2ei5numpy3minEPNS_9ei_matrixES2_+0x6e>
        }

        for (size_t row = 0; row < input_matrix->rows; row++) {
 8001f62:	2300      	movs	r3, #0
 8001f64:	617b      	str	r3, [r7, #20]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	697a      	ldr	r2, [r7, #20]
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d21b      	bcs.n	8001fa8 <_ZN2ei5numpy3minEPNS_9ei_matrixES2_+0x6c>
#if EIDSP_USE_CMSIS_DSP
            float min;
            uint32_t ix;
            arm_min_f32(input_matrix->buffer + (row * input_matrix->cols), input_matrix->cols, &min, &ix);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	6979      	ldr	r1, [r7, #20]
 8001f7a:	fb01 f303 	mul.w	r3, r1, r3
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	18d0      	adds	r0, r2, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6899      	ldr	r1, [r3, #8]
 8001f86:	f107 030c 	add.w	r3, r7, #12
 8001f8a:	f107 0210 	add.w	r2, r7, #16
 8001f8e:	f012 fee7 	bl	8014d60 <arm_min_f32>
            output_matrix->buffer[row] = min;
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	4413      	add	r3, r2
 8001f9c:	693a      	ldr	r2, [r7, #16]
 8001f9e:	601a      	str	r2, [r3, #0]
        for (size_t row = 0; row < input_matrix->rows; row++) {
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	617b      	str	r3, [r7, #20]
 8001fa6:	e7de      	b.n	8001f66 <_ZN2ei5numpy3minEPNS_9ei_matrixES2_+0x2a>

            output_matrix->buffer[row] = min;
#endif
        }

        return EIDSP_OK;
 8001fa8:	2300      	movs	r3, #0
    }
 8001faa:	4618      	mov	r0, r3
 8001fac:	3718      	adds	r7, #24
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	fffffc14 	.word	0xfffffc14

08001fb8 <_ZN2ei5numpy3maxEPNS_9ei_matrixES2_>:
    /**
     * Get the maximum value in a matrix per row
     * @param input_matrix Input matrix (MxN)
     * @param output_matrix Output matrix (Mx1)
     */
    static int max(matrix_t *input_matrix, matrix_t *output_matrix) {
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b086      	sub	sp, #24
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	6039      	str	r1, [r7, #0]
        if (input_matrix->rows != output_matrix->rows) {
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685a      	ldr	r2, [r3, #4]
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d001      	beq.n	8001fd2 <_ZN2ei5numpy3maxEPNS_9ei_matrixES2_+0x1a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001fce:	4b18      	ldr	r3, [pc, #96]	; (8002030 <_ZN2ei5numpy3maxEPNS_9ei_matrixES2_+0x78>)
 8001fd0:	e029      	b.n	8002026 <_ZN2ei5numpy3maxEPNS_9ei_matrixES2_+0x6e>
        }
        if (output_matrix->cols != 1) {
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d001      	beq.n	8001fde <_ZN2ei5numpy3maxEPNS_9ei_matrixES2_+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001fda:	4b15      	ldr	r3, [pc, #84]	; (8002030 <_ZN2ei5numpy3maxEPNS_9ei_matrixES2_+0x78>)
 8001fdc:	e023      	b.n	8002026 <_ZN2ei5numpy3maxEPNS_9ei_matrixES2_+0x6e>
        }

        for (size_t row = 0; row < input_matrix->rows; row++) {
 8001fde:	2300      	movs	r3, #0
 8001fe0:	617b      	str	r3, [r7, #20]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	697a      	ldr	r2, [r7, #20]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d21b      	bcs.n	8002024 <_ZN2ei5numpy3maxEPNS_9ei_matrixES2_+0x6c>
#if EIDSP_USE_CMSIS_DSP
            float max;
            uint32_t ix;
            arm_max_f32(input_matrix->buffer + (row * input_matrix->cols), input_matrix->cols, &max, &ix);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	6979      	ldr	r1, [r7, #20]
 8001ff6:	fb01 f303 	mul.w	r3, r1, r3
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	18d0      	adds	r0, r2, r3
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6899      	ldr	r1, [r3, #8]
 8002002:	f107 030c 	add.w	r3, r7, #12
 8002006:	f107 0210 	add.w	r2, r7, #16
 800200a:	f012 fe71 	bl	8014cf0 <arm_max_f32>
            output_matrix->buffer[row] = max;
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	4413      	add	r3, r2
 8002018:	693a      	ldr	r2, [r7, #16]
 800201a:	601a      	str	r2, [r3, #0]
        for (size_t row = 0; row < input_matrix->rows; row++) {
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	3301      	adds	r3, #1
 8002020:	617b      	str	r3, [r7, #20]
 8002022:	e7de      	b.n	8001fe2 <_ZN2ei5numpy3maxEPNS_9ei_matrixES2_+0x2a>

            output_matrix->buffer[row] = max;
#endif
        }

        return EIDSP_OK;
 8002024:	2300      	movs	r3, #0
    }
 8002026:	4618      	mov	r0, r3
 8002028:	3718      	adds	r7, #24
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	fffffc14 	.word	0xfffffc14

08002034 <_ZN2ei5numpy4rfftEPKfjPfjj>:
     * @param src_size Size of the source buffer
     * @param output Output buffer
     * @param output_size Size of the output buffer, should be n_fft / 2 + 1
     * @returns 0 if OK
     */
    static int rfft(const float *src, size_t src_size, float *output, size_t output_size, size_t n_fft) {
 8002034:	b5b0      	push	{r4, r5, r7, lr}
 8002036:	b098      	sub	sp, #96	; 0x60
 8002038:	af00      	add	r7, sp, #0
 800203a:	60f8      	str	r0, [r7, #12]
 800203c:	60b9      	str	r1, [r7, #8]
 800203e:	607a      	str	r2, [r7, #4]
 8002040:	603b      	str	r3, [r7, #0]
        size_t n_fft_out_features = (n_fft / 2) + 1;
 8002042:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002044:	085b      	lsrs	r3, r3, #1
 8002046:	3301      	adds	r3, #1
 8002048:	657b      	str	r3, [r7, #84]	; 0x54
        if (output_size != n_fft_out_features) {
 800204a:	683a      	ldr	r2, [r7, #0]
 800204c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800204e:	429a      	cmp	r2, r3
 8002050:	d001      	beq.n	8002056 <_ZN2ei5numpy4rfftEPKfjPfjj+0x22>
            EIDSP_ERR(EIDSP_BUFFER_SIZE_MISMATCH);
 8002052:	4c65      	ldr	r4, [pc, #404]	; (80021e8 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1b4>)
 8002054:	e0c2      	b.n	80021dc <_ZN2ei5numpy4rfftEPKfjPfjj+0x1a8>
        }

        // truncate if needed
        if (src_size > n_fft) {
 8002056:	68ba      	ldr	r2, [r7, #8]
 8002058:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800205a:	429a      	cmp	r2, r3
 800205c:	d901      	bls.n	8002062 <_ZN2ei5numpy4rfftEPKfjPfjj+0x2e>
            src_size = n_fft;
 800205e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002060:	60bb      	str	r3, [r7, #8]
        }

        // declare input and output arrays
        EI_DSP_MATRIX(fft_input, 1, n_fft);
 8002062:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8002066:	2300      	movs	r3, #0
 8002068:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800206a:	2101      	movs	r1, #1
 800206c:	f7ff fade 	bl	800162c <_ZN2ei9ei_matrixC1EmmPf>
 8002070:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002072:	2b00      	cmp	r3, #0
 8002074:	d101      	bne.n	800207a <_ZN2ei5numpy4rfftEPKfjPfjj+0x46>
 8002076:	4c5d      	ldr	r4, [pc, #372]	; (80021ec <_ZN2ei5numpy4rfftEPKfjPfjj+0x1b8>)
 8002078:	e0ab      	b.n	80021d2 <_ZN2ei5numpy4rfftEPKfjPfjj+0x19e>
        if (!fft_input.buffer) {
 800207a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800207c:	2b00      	cmp	r3, #0
 800207e:	d101      	bne.n	8002084 <_ZN2ei5numpy4rfftEPKfjPfjj+0x50>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8002080:	4c5a      	ldr	r4, [pc, #360]	; (80021ec <_ZN2ei5numpy4rfftEPKfjPfjj+0x1b8>)
 8002082:	e0a6      	b.n	80021d2 <_ZN2ei5numpy4rfftEPKfjPfjj+0x19e>
        }

        // copy from src to fft_input
        memcpy(fft_input.buffer, src, src_size * sizeof(float));
 8002084:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	461a      	mov	r2, r3
 800208c:	68f9      	ldr	r1, [r7, #12]
 800208e:	f030 f863 	bl	8032158 <memcpy>
        // pad to the rigth with zeros
        memset(fft_input.buffer + src_size, 0, (n_fft - src_size) * sizeof(kiss_fft_scalar));
 8002092:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	18d0      	adds	r0, r2, r3
 800209a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	461a      	mov	r2, r3
 80020a4:	2100      	movs	r1, #0
 80020a6:	f030 f87f 	bl	80321a8 <memset>

#if EIDSP_USE_CMSIS_DSP
        if (n_fft != 32 && n_fft != 64 && n_fft != 128 && n_fft != 256 &&
 80020aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020ac:	2b20      	cmp	r3, #32
 80020ae:	d025      	beq.n	80020fc <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
 80020b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020b2:	2b40      	cmp	r3, #64	; 0x40
 80020b4:	d022      	beq.n	80020fc <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
 80020b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020b8:	2b80      	cmp	r3, #128	; 0x80
 80020ba:	d01f      	beq.n	80020fc <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
 80020bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020c2:	d01b      	beq.n	80020fc <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
 80020c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020ca:	d017      	beq.n	80020fc <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
            n_fft != 512 && n_fft != 1024 && n_fft != 2048 && n_fft != 4096) {
 80020cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020d2:	d013      	beq.n	80020fc <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
 80020d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80020da:	d00f      	beq.n	80020fc <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
 80020dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020e2:	d00b      	beq.n	80020fc <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
            int ret = software_rfft(fft_input.buffer, output, n_fft, n_fft_out_features);
 80020e4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80020e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020e8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80020ea:	6879      	ldr	r1, [r7, #4]
 80020ec:	f000 f97a 	bl	80023e4 <_ZN2ei5numpy13software_rfftEPfS1_jj>
 80020f0:	6538      	str	r0, [r7, #80]	; 0x50
            if (ret != EIDSP_OK) {
 80020f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d068      	beq.n	80021ca <_ZN2ei5numpy4rfftEPKfjPfjj+0x196>
                EIDSP_ERR(ret);
 80020f8:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 80020fa:	e06a      	b.n	80021d2 <_ZN2ei5numpy4rfftEPKfjPfjj+0x19e>
            }
        }
        else {
            // hardware acceleration only works for the powers above...
            arm_rfft_fast_instance_f32 rfft_instance;
            int status = cmsis_rfft_init_f32(&rfft_instance, n_fft);
 80020fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002100:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8002102:	4618      	mov	r0, r3
 8002104:	f000 fb6e 	bl	80027e4 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j>
 8002108:	64f8      	str	r0, [r7, #76]	; 0x4c
            if (status != ARM_MATH_SUCCESS) {
 800210a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800210c:	2b00      	cmp	r3, #0
 800210e:	d001      	beq.n	8002114 <_ZN2ei5numpy4rfftEPKfjPfjj+0xe0>
                return status;
 8002110:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8002112:	e05d      	b.n	80021d0 <_ZN2ei5numpy4rfftEPKfjPfjj+0x19c>
            }

            EI_DSP_MATRIX(fft_output, 1, n_fft);
 8002114:	f107 0014 	add.w	r0, r7, #20
 8002118:	2300      	movs	r3, #0
 800211a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800211c:	2101      	movs	r1, #1
 800211e:	f7ff fa85 	bl	800162c <_ZN2ei9ei_matrixC1EmmPf>
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d102      	bne.n	800212e <_ZN2ei5numpy4rfftEPKfjPfjj+0xfa>
 8002128:	4c30      	ldr	r4, [pc, #192]	; (80021ec <_ZN2ei5numpy4rfftEPKfjPfjj+0x1b8>)
 800212a:	2500      	movs	r5, #0
 800212c:	e045      	b.n	80021ba <_ZN2ei5numpy4rfftEPKfjPfjj+0x186>
            if (!fft_output.buffer) {
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d102      	bne.n	800213a <_ZN2ei5numpy4rfftEPKfjPfjj+0x106>
                EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8002134:	4c2d      	ldr	r4, [pc, #180]	; (80021ec <_ZN2ei5numpy4rfftEPKfjPfjj+0x1b8>)
 8002136:	2500      	movs	r5, #0
 8002138:	e03f      	b.n	80021ba <_ZN2ei5numpy4rfftEPKfjPfjj+0x186>
            }

            arm_rfft_fast_f32(&rfft_instance, fft_input.buffer, fft_output.buffer, 0);
 800213a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800213c:	697a      	ldr	r2, [r7, #20]
 800213e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002142:	2300      	movs	r3, #0
 8002144:	f015 f972 	bl	801742c <arm_rfft_fast_f32>

            output[0] = fft_output.buffer[0];
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	601a      	str	r2, [r3, #0]
            output[n_fft_out_features - 1] = fft_output.buffer[1];
 8002150:	697a      	ldr	r2, [r7, #20]
 8002152:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002154:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002158:	3b01      	subs	r3, #1
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	6879      	ldr	r1, [r7, #4]
 800215e:	440b      	add	r3, r1
 8002160:	6852      	ldr	r2, [r2, #4]
 8002162:	601a      	str	r2, [r3, #0]

            size_t fft_output_buffer_ix = 2;
 8002164:	2302      	movs	r3, #2
 8002166:	65fb      	str	r3, [r7, #92]	; 0x5c
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
 8002168:	2301      	movs	r3, #1
 800216a:	65bb      	str	r3, [r7, #88]	; 0x58
 800216c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800216e:	3b01      	subs	r3, #1
 8002170:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002172:	429a      	cmp	r2, r3
 8002174:	d220      	bcs.n	80021b8 <_ZN2ei5numpy4rfftEPKfjPfjj+0x184>
                float rms_result;
                arm_rms_f32(fft_output.buffer + fft_output_buffer_ix, 2, &rms_result);
 8002176:	697a      	ldr	r2, [r7, #20]
 8002178:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	4413      	add	r3, r2
 800217e:	f107 0210 	add.w	r2, r7, #16
 8002182:	2102      	movs	r1, #2
 8002184:	4618      	mov	r0, r3
 8002186:	f012 fe23 	bl	8014dd0 <arm_rms_f32>
                output[ix] = rms_result * sqrt(2);
 800218a:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800218e:	f7ff fb54 	bl	800183a <_ZN2ei5numpy4sqrtEf>
 8002192:	eeb0 7a40 	vmov.f32	s14, s0
 8002196:	edd7 7a04 	vldr	s15, [r7, #16]
 800219a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	4413      	add	r3, r2
 80021a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021a6:	edc3 7a00 	vstr	s15, [r3]

                fft_output_buffer_ix += 2;
 80021aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021ac:	3302      	adds	r3, #2
 80021ae:	65fb      	str	r3, [r7, #92]	; 0x5c
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
 80021b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80021b2:	3301      	adds	r3, #1
 80021b4:	65bb      	str	r3, [r7, #88]	; 0x58
 80021b6:	e7d9      	b.n	800216c <_ZN2ei5numpy4rfftEPKfjPfjj+0x138>
 80021b8:	2501      	movs	r5, #1
 80021ba:	f107 0314 	add.w	r3, r7, #20
 80021be:	4618      	mov	r0, r3
 80021c0:	f7ff fa5f 	bl	8001682 <_ZN2ei9ei_matrixD1Ev>
 80021c4:	2d01      	cmp	r5, #1
 80021c6:	d103      	bne.n	80021d0 <_ZN2ei5numpy4rfftEPKfjPfjj+0x19c>
 80021c8:	e000      	b.n	80021cc <_ZN2ei5numpy4rfftEPKfjPfjj+0x198>
            }
 80021ca:	bf00      	nop
        if (ret != EIDSP_OK) {
            EIDSP_ERR(ret);
        }
#endif

        return EIDSP_OK;
 80021cc:	2400      	movs	r4, #0
 80021ce:	e000      	b.n	80021d2 <_ZN2ei5numpy4rfftEPKfjPfjj+0x19e>
                return status;
 80021d0:	bf00      	nop
        EI_DSP_MATRIX(fft_input, 1, n_fft);
 80021d2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7ff fa53 	bl	8001682 <_ZN2ei9ei_matrixD1Ev>
    }
 80021dc:	4623      	mov	r3, r4
 80021de:	4618      	mov	r0, r3
 80021e0:	3760      	adds	r7, #96	; 0x60
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bdb0      	pop	{r4, r5, r7, pc}
 80021e6:	bf00      	nop
 80021e8:	fffffc11 	.word	0xfffffc11
 80021ec:	fffffc16 	.word	0xfffffc16

080021f0 <_ZN2ei5numpy8linspaceEffmPf>:
     * @param stop The end value of the sequence.
     * @param number Number of samples to generate.
     * @param out Out array, with size `number`
     * @returns 0 if OK
     */
    static int linspace(float start, float stop, uint32_t number, float *out)
 80021f0:	b480      	push	{r7}
 80021f2:	b087      	sub	sp, #28
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	ed87 0a03 	vstr	s0, [r7, #12]
 80021fa:	edc7 0a02 	vstr	s1, [r7, #8]
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	6039      	str	r1, [r7, #0]
    {
        if (number < 1 || !out) {
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d002      	beq.n	800220e <_ZN2ei5numpy8linspaceEffmPf+0x1e>
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d101      	bne.n	8002212 <_ZN2ei5numpy8linspaceEffmPf+0x22>
            EIDSP_ERR(EIDSP_PARAMETER_INVALID);
 800220e:	4b24      	ldr	r3, [pc, #144]	; (80022a0 <_ZN2ei5numpy8linspaceEffmPf+0xb0>)
 8002210:	e03f      	b.n	8002292 <_ZN2ei5numpy8linspaceEffmPf+0xa2>
        }

        if (number == 1) {
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2b01      	cmp	r3, #1
 8002216:	d104      	bne.n	8002222 <_ZN2ei5numpy8linspaceEffmPf+0x32>
            out[0] = start;
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	68fa      	ldr	r2, [r7, #12]
 800221c:	601a      	str	r2, [r3, #0]
            return EIDSP_OK;
 800221e:	2300      	movs	r3, #0
 8002220:	e037      	b.n	8002292 <_ZN2ei5numpy8linspaceEffmPf+0xa2>
        }

        // step size
        float step = (stop - start) / (number - 1);
 8002222:	ed97 7a02 	vldr	s14, [r7, #8]
 8002226:	edd7 7a03 	vldr	s15, [r7, #12]
 800222a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	3b01      	subs	r3, #1
 8002232:	ee07 3a90 	vmov	s15, r3
 8002236:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800223a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800223e:	edc7 7a04 	vstr	s15, [r7, #16]

        // do steps
        for (uint32_t ix = 0; ix < number - 1; ix++) {
 8002242:	2300      	movs	r3, #0
 8002244:	617b      	str	r3, [r7, #20]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	3b01      	subs	r3, #1
 800224a:	697a      	ldr	r2, [r7, #20]
 800224c:	429a      	cmp	r2, r3
 800224e:	d216      	bcs.n	800227e <_ZN2ei5numpy8linspaceEffmPf+0x8e>
            out[ix] = start + ix * step;
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	ee07 3a90 	vmov	s15, r3
 8002256:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800225a:	edd7 7a04 	vldr	s15, [r7, #16]
 800225e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	683a      	ldr	r2, [r7, #0]
 8002268:	4413      	add	r3, r2
 800226a:	edd7 7a03 	vldr	s15, [r7, #12]
 800226e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002272:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t ix = 0; ix < number - 1; ix++) {
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	3301      	adds	r3, #1
 800227a:	617b      	str	r3, [r7, #20]
 800227c:	e7e3      	b.n	8002246 <_ZN2ei5numpy8linspaceEffmPf+0x56>
        }

        // last entry always stop
        out[number - 1] = stop;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002284:	3b01      	subs	r3, #1
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	683a      	ldr	r2, [r7, #0]
 800228a:	4413      	add	r3, r2
 800228c:	68ba      	ldr	r2, [r7, #8]
 800228e:	601a      	str	r2, [r3, #0]

        return EIDSP_OK;
 8002290:	2300      	movs	r3, #0
    }
 8002292:	4618      	mov	r0, r3
 8002294:	371c      	adds	r7, #28
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	fffffc10 	.word	0xfffffc10
 80022a4:	00000000 	.word	0x00000000

080022a8 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE>:
    /**
     * Normalize a matrix to 0..1. Does an in-place replacement.
     * Normalization done per row.
     * @param matrix
     */
    static int normalize(matrix_t *matrix) {
 80022a8:	b590      	push	{r4, r7, lr}
 80022aa:	b093      	sub	sp, #76	; 0x4c
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
        // Python implementation:
        //  matrix = (matrix - np.min(matrix)) / (np.max(matrix) - np.min(matrix))
        int r;

        matrix_t temp_matrix(1, matrix->rows * matrix->cols, matrix->buffer);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	6892      	ldr	r2, [r2, #8]
 80022b8:	fb03 f202 	mul.w	r2, r3, r2
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80022c4:	2101      	movs	r1, #1
 80022c6:	f7ff f9b1 	bl	800162c <_ZN2ei9ei_matrixC1EmmPf>

        matrix_t min_matrix(1, 1);
 80022ca:	f107 001c 	add.w	r0, r7, #28
 80022ce:	2300      	movs	r3, #0
 80022d0:	2201      	movs	r2, #1
 80022d2:	2101      	movs	r1, #1
 80022d4:	f7ff f9aa 	bl	800162c <_ZN2ei9ei_matrixC1EmmPf>
        if (!min_matrix.buffer) {
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d101      	bne.n	80022e2 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x3a>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 80022de:	4c40      	ldr	r4, [pc, #256]	; (80023e0 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x138>)
 80022e0:	e06a      	b.n	80023b8 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x110>
        }
        r = min(&temp_matrix, &min_matrix);
 80022e2:	f107 021c 	add.w	r2, r7, #28
 80022e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022ea:	4611      	mov	r1, r2
 80022ec:	4618      	mov	r0, r3
 80022ee:	f7ff fe25 	bl	8001f3c <_ZN2ei5numpy3minEPNS_9ei_matrixES2_>
 80022f2:	6478      	str	r0, [r7, #68]	; 0x44
        if (r != EIDSP_OK) {
 80022f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x56>
            EIDSP_ERR(r);
 80022fa:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 80022fc:	e05c      	b.n	80023b8 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x110>
        }

        matrix_t max_matrix(1, 1);
 80022fe:	f107 000c 	add.w	r0, r7, #12
 8002302:	2300      	movs	r3, #0
 8002304:	2201      	movs	r2, #1
 8002306:	2101      	movs	r1, #1
 8002308:	f7ff f990 	bl	800162c <_ZN2ei9ei_matrixC1EmmPf>
        if (!max_matrix.buffer) {
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d101      	bne.n	8002316 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x6e>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8002312:	4c33      	ldr	r4, [pc, #204]	; (80023e0 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x138>)
 8002314:	e04b      	b.n	80023ae <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x106>
        }
        r = max(&temp_matrix, &max_matrix);
 8002316:	f107 020c 	add.w	r2, r7, #12
 800231a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800231e:	4611      	mov	r1, r2
 8002320:	4618      	mov	r0, r3
 8002322:	f7ff fe49 	bl	8001fb8 <_ZN2ei5numpy3maxEPNS_9ei_matrixES2_>
 8002326:	6478      	str	r0, [r7, #68]	; 0x44
        if (r != EIDSP_OK) {
 8002328:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800232a:	2b00      	cmp	r3, #0
 800232c:	d001      	beq.n	8002332 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x8a>
            EIDSP_ERR(r);
 800232e:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8002330:	e03d      	b.n	80023ae <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x106>
        }

        float min_max_diff = (max_matrix.buffer[0] - min_matrix.buffer[0]);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	ed93 7a00 	vldr	s14, [r3]
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	edd3 7a00 	vldr	s15, [r3]
 800233e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002342:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        /* Prevent divide by 0 by setting minimum value for divider */
        float row_scale = min_max_diff < 0.001 ? 1.0f : 1.0f / min_max_diff;
 8002346:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002348:	f7fe f908 	bl	800055c <__aeabi_f2d>
 800234c:	a322      	add	r3, pc, #136	; (adr r3, 80023d8 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x130>)
 800234e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002352:	f7fe fbcd 	bl	8000af0 <__aeabi_dcmplt>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d002      	beq.n	8002362 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0xba>
 800235c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8002360:	e005      	b.n	800236e <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0xc6>
 8002362:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002366:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800236a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800236e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

        r = subtract(&temp_matrix, min_matrix.buffer[0]);
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	edd3 7a00 	vldr	s15, [r3]
 8002378:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800237c:	eeb0 0a67 	vmov.f32	s0, s15
 8002380:	4618      	mov	r0, r3
 8002382:	f7ff fd45 	bl	8001e10 <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf>
 8002386:	6478      	str	r0, [r7, #68]	; 0x44
        if (r != EIDSP_OK) {
 8002388:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800238a:	2b00      	cmp	r3, #0
 800238c:	d001      	beq.n	8002392 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0xea>
            EIDSP_ERR(r);
 800238e:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8002390:	e00d      	b.n	80023ae <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x106>
        }

        r = scale(&temp_matrix, row_scale);
 8002392:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002396:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 800239a:	4618      	mov	r0, r3
 800239c:	f7ff fcec 	bl	8001d78 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf>
 80023a0:	6478      	str	r0, [r7, #68]	; 0x44
        if (r != EIDSP_OK) {
 80023a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d001      	beq.n	80023ac <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x104>
            EIDSP_ERR(r);
 80023a8:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 80023aa:	e000      	b.n	80023ae <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x106>
        }

        return EIDSP_OK;
 80023ac:	2400      	movs	r4, #0
        matrix_t max_matrix(1, 1);
 80023ae:	f107 030c 	add.w	r3, r7, #12
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7ff f965 	bl	8001682 <_ZN2ei9ei_matrixD1Ev>
        matrix_t min_matrix(1, 1);
 80023b8:	f107 031c 	add.w	r3, r7, #28
 80023bc:	4618      	mov	r0, r3
 80023be:	f7ff f960 	bl	8001682 <_ZN2ei9ei_matrixD1Ev>
        matrix_t temp_matrix(1, matrix->rows * matrix->cols, matrix->buffer);
 80023c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023c6:	4618      	mov	r0, r3
 80023c8:	f7ff f95b 	bl	8001682 <_ZN2ei9ei_matrixD1Ev>
    }
 80023cc:	4623      	mov	r3, r4
 80023ce:	4618      	mov	r0, r3
 80023d0:	374c      	adds	r7, #76	; 0x4c
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd90      	pop	{r4, r7, pc}
 80023d6:	bf00      	nop
 80023d8:	d2f1a9fc 	.word	0xd2f1a9fc
 80023dc:	3f50624d 	.word	0x3f50624d
 80023e0:	fffffc16 	.word	0xfffffc16

080023e4 <_ZN2ei5numpy13software_rfftEPfS1_jj>:
        }

        return EIDSP_OK;
    }

    static int software_rfft(float *fft_input, float *output, size_t n_fft, size_t n_fft_out_features) {
 80023e4:	b5b0      	push	{r4, r5, r7, lr}
 80023e6:	b08a      	sub	sp, #40	; 0x28
 80023e8:	af02      	add	r7, sp, #8
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	60b9      	str	r1, [r7, #8]
 80023ee:	607a      	str	r2, [r7, #4]
 80023f0:	603b      	str	r3, [r7, #0]
        kiss_fft_cpx *fft_output = (kiss_fft_cpx*)ei_dsp_malloc(n_fft_out_features * sizeof(kiss_fft_cpx));
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	00db      	lsls	r3, r3, #3
 80023f6:	4618      	mov	r0, r3
 80023f8:	f025 fa72 	bl	80278e0 <_Z9ei_mallocj>
 80023fc:	61b8      	str	r0, [r7, #24]
        if (!fft_output) {
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d101      	bne.n	8002408 <_ZN2ei5numpy13software_rfftEPfS1_jj+0x24>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8002404:	4b2f      	ldr	r3, [pc, #188]	; (80024c4 <_ZN2ei5numpy13software_rfftEPfS1_jj+0xe0>)
 8002406:	e058      	b.n	80024ba <_ZN2ei5numpy13software_rfftEPfS1_jj+0xd6>
        }

        size_t kiss_fftr_mem_length;

        // create fftr context
        kiss_fftr_cfg cfg = kiss_fftr_alloc(n_fft, 0, NULL, NULL, &kiss_fftr_mem_length);
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f107 0310 	add.w	r3, r7, #16
 800240e:	9300      	str	r3, [sp, #0]
 8002410:	2300      	movs	r3, #0
 8002412:	2200      	movs	r2, #0
 8002414:	2100      	movs	r1, #0
 8002416:	f024 febb 	bl	8027190 <kiss_fftr_alloc>
 800241a:	6178      	str	r0, [r7, #20]
        if (!cfg) {
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d104      	bne.n	800242c <_ZN2ei5numpy13software_rfftEPfS1_jj+0x48>
            ei_dsp_free(fft_output, n_fft_out_features * sizeof(kiss_fft_cpx));
 8002422:	69b8      	ldr	r0, [r7, #24]
 8002424:	f025 fa76 	bl	8027914 <_Z7ei_freePv>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8002428:	4b26      	ldr	r3, [pc, #152]	; (80024c4 <_ZN2ei5numpy13software_rfftEPfS1_jj+0xe0>)
 800242a:	e046      	b.n	80024ba <_ZN2ei5numpy13software_rfftEPfS1_jj+0xd6>
        }

        ei_dsp_register_alloc(kiss_fftr_mem_length, cfg);

        // execute the rfft operation
        kiss_fftr(cfg, fft_input, fft_output);
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	68f9      	ldr	r1, [r7, #12]
 8002430:	6978      	ldr	r0, [r7, #20]
 8002432:	f024 ffcd 	bl	80273d0 <kiss_fftr>

        // and write back to the output
        for (size_t ix = 0; ix < n_fft_out_features; ix++) {
 8002436:	2300      	movs	r3, #0
 8002438:	61fb      	str	r3, [r7, #28]
 800243a:	69fa      	ldr	r2, [r7, #28]
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	429a      	cmp	r2, r3
 8002440:	d234      	bcs.n	80024ac <_ZN2ei5numpy13software_rfftEPfS1_jj+0xc8>
            output[ix] = sqrt(pow(fft_output[ix].r, 2) + pow(fft_output[ix].i, 2));
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	00db      	lsls	r3, r3, #3
 8002446:	69ba      	ldr	r2, [r7, #24]
 8002448:	4413      	add	r3, r2
 800244a:	edd3 7a00 	vldr	s15, [r3]
 800244e:	2002      	movs	r0, #2
 8002450:	eeb0 0a67 	vmov.f32	s0, s15
 8002454:	f003 fbb3 	bl	8005bbe <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002458:	ec55 4b10 	vmov	r4, r5, d0
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	00db      	lsls	r3, r3, #3
 8002460:	69ba      	ldr	r2, [r7, #24]
 8002462:	4413      	add	r3, r2
 8002464:	edd3 7a01 	vldr	s15, [r3, #4]
 8002468:	2002      	movs	r0, #2
 800246a:	eeb0 0a67 	vmov.f32	s0, s15
 800246e:	f003 fba6 	bl	8005bbe <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002472:	ec53 2b10 	vmov	r2, r3, d0
 8002476:	4620      	mov	r0, r4
 8002478:	4629      	mov	r1, r5
 800247a:	f7fd ff11 	bl	80002a0 <__adddf3>
 800247e:	4602      	mov	r2, r0
 8002480:	460b      	mov	r3, r1
 8002482:	4610      	mov	r0, r2
 8002484:	4619      	mov	r1, r3
 8002486:	f7fe fbb9 	bl	8000bfc <__aeabi_d2f>
 800248a:	4601      	mov	r1, r0
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	68ba      	ldr	r2, [r7, #8]
 8002492:	18d4      	adds	r4, r2, r3
 8002494:	ee00 1a10 	vmov	s0, r1
 8002498:	f7ff f9cf 	bl	800183a <_ZN2ei5numpy4sqrtEf>
 800249c:	eef0 7a40 	vmov.f32	s15, s0
 80024a0:	edc4 7a00 	vstr	s15, [r4]
        for (size_t ix = 0; ix < n_fft_out_features; ix++) {
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	3301      	adds	r3, #1
 80024a8:	61fb      	str	r3, [r7, #28]
 80024aa:	e7c6      	b.n	800243a <_ZN2ei5numpy13software_rfftEPfS1_jj+0x56>
        }

        ei_dsp_free(cfg, kiss_fftr_mem_length);
 80024ac:	6978      	ldr	r0, [r7, #20]
 80024ae:	f025 fa31 	bl	8027914 <_Z7ei_freePv>
        ei_dsp_free(fft_output, n_fft_out_features * sizeof(kiss_fft_cpx));
 80024b2:	69b8      	ldr	r0, [r7, #24]
 80024b4:	f025 fa2e 	bl	8027914 <_Z7ei_freePv>

        return EIDSP_OK;
 80024b8:	2300      	movs	r3, #0
    }
 80024ba:	4618      	mov	r0, r3
 80024bc:	3720      	adds	r7, #32
 80024be:	46bd      	mov	sp, r7
 80024c0:	bdb0      	pop	{r4, r5, r7, pc}
 80024c2:	bf00      	nop
 80024c4:	fffffc16 	.word	0xfffffc16

080024c8 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf>:
     * @details    Variance in CMSIS version is calculated using fSum / (float32_t)(blockSize - 1)
     * @param[in]  pSrc       Pointer to float block
     * @param[in]  blockSize  Number of floats in block
     * @param      pResult    The variance
     */
    static void cmsis_arm_variance(const float32_t *pSrc, uint32_t blockSize, float32_t *pResult)
 80024c8:	b480      	push	{r7}
 80024ca:	b08b      	sub	sp, #44	; 0x2c
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	60f8      	str	r0, [r7, #12]
 80024d0:	60b9      	str	r1, [r7, #8]
 80024d2:	607a      	str	r2, [r7, #4]
    {
        uint32_t blkCnt;
        float32_t sum = 0.0f;
 80024d4:	f04f 0300 	mov.w	r3, #0
 80024d8:	623b      	str	r3, [r7, #32]
        float32_t fSum = 0.0f;
 80024da:	f04f 0300 	mov.w	r3, #0
 80024de:	61fb      	str	r3, [r7, #28]
        float32_t fMean, fValue;
        const float32_t *pInput = pSrc;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	61bb      	str	r3, [r7, #24]

        if (blockSize <= 1U) {
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d804      	bhi.n	80024f4 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x2c>
            *pResult = 0;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f04f 0200 	mov.w	r2, #0
 80024f0:	601a      	str	r2, [r3, #0]
            return;
 80024f2:	e0e2      	b.n	80026ba <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x1f2>
        }
        blkCnt = blockSize >> 2U;
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	089b      	lsrs	r3, r3, #2
 80024f8:	627b      	str	r3, [r7, #36]	; 0x24

        while (blkCnt > 0U) {
 80024fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d02f      	beq.n	8002560 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x98>
            sum += *pInput++;
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	1d1a      	adds	r2, r3, #4
 8002504:	61ba      	str	r2, [r7, #24]
 8002506:	edd3 7a00 	vldr	s15, [r3]
 800250a:	ed97 7a08 	vldr	s14, [r7, #32]
 800250e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002512:	edc7 7a08 	vstr	s15, [r7, #32]
            sum += *pInput++;
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	1d1a      	adds	r2, r3, #4
 800251a:	61ba      	str	r2, [r7, #24]
 800251c:	edd3 7a00 	vldr	s15, [r3]
 8002520:	ed97 7a08 	vldr	s14, [r7, #32]
 8002524:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002528:	edc7 7a08 	vstr	s15, [r7, #32]
            sum += *pInput++;
 800252c:	69bb      	ldr	r3, [r7, #24]
 800252e:	1d1a      	adds	r2, r3, #4
 8002530:	61ba      	str	r2, [r7, #24]
 8002532:	edd3 7a00 	vldr	s15, [r3]
 8002536:	ed97 7a08 	vldr	s14, [r7, #32]
 800253a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800253e:	edc7 7a08 	vstr	s15, [r7, #32]
            sum += *pInput++;
 8002542:	69bb      	ldr	r3, [r7, #24]
 8002544:	1d1a      	adds	r2, r3, #4
 8002546:	61ba      	str	r2, [r7, #24]
 8002548:	edd3 7a00 	vldr	s15, [r3]
 800254c:	ed97 7a08 	vldr	s14, [r7, #32]
 8002550:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002554:	edc7 7a08 	vstr	s15, [r7, #32]
            blkCnt--;
 8002558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255a:	3b01      	subs	r3, #1
 800255c:	627b      	str	r3, [r7, #36]	; 0x24
        while (blkCnt > 0U) {
 800255e:	e7cc      	b.n	80024fa <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x32>
        }

        /* Loop unrolling: Compute remaining outputs */
        blkCnt = blockSize % 0x4U;
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	f003 0303 	and.w	r3, r3, #3
 8002566:	627b      	str	r3, [r7, #36]	; 0x24

        while (blkCnt > 0U) {
 8002568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256a:	2b00      	cmp	r3, #0
 800256c:	d00e      	beq.n	800258c <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0xc4>
            sum += *pInput++;
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	1d1a      	adds	r2, r3, #4
 8002572:	61ba      	str	r2, [r7, #24]
 8002574:	edd3 7a00 	vldr	s15, [r3]
 8002578:	ed97 7a08 	vldr	s14, [r7, #32]
 800257c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002580:	edc7 7a08 	vstr	s15, [r7, #32]
            blkCnt--;
 8002584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002586:	3b01      	subs	r3, #1
 8002588:	627b      	str	r3, [r7, #36]	; 0x24
        while (blkCnt > 0U) {
 800258a:	e7ed      	b.n	8002568 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0xa0>
        }

        fMean = sum / (float32_t)blockSize;
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	ee07 3a90 	vmov	s15, r3
 8002592:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002596:	edd7 6a08 	vldr	s13, [r7, #32]
 800259a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800259e:	edc7 7a05 	vstr	s15, [r7, #20]

        pInput = pSrc;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	61bb      	str	r3, [r7, #24]

        /* Loop unrolling: Compute 4 outputs at a time */
        blkCnt = blockSize >> 2U;
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	089b      	lsrs	r3, r3, #2
 80025aa:	627b      	str	r3, [r7, #36]	; 0x24

        while (blkCnt > 0U) {
 80025ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d057      	beq.n	8002662 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x19a>
            fValue = *pInput++ - fMean;
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	1d1a      	adds	r2, r3, #4
 80025b6:	61ba      	str	r2, [r7, #24]
 80025b8:	ed93 7a00 	vldr	s14, [r3]
 80025bc:	edd7 7a05 	vldr	s15, [r7, #20]
 80025c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025c4:	edc7 7a04 	vstr	s15, [r7, #16]
            fSum += fValue * fValue;
 80025c8:	edd7 7a04 	vldr	s15, [r7, #16]
 80025cc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80025d0:	ed97 7a07 	vldr	s14, [r7, #28]
 80025d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025d8:	edc7 7a07 	vstr	s15, [r7, #28]
            fValue = *pInput++ - fMean;
 80025dc:	69bb      	ldr	r3, [r7, #24]
 80025de:	1d1a      	adds	r2, r3, #4
 80025e0:	61ba      	str	r2, [r7, #24]
 80025e2:	ed93 7a00 	vldr	s14, [r3]
 80025e6:	edd7 7a05 	vldr	s15, [r7, #20]
 80025ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025ee:	edc7 7a04 	vstr	s15, [r7, #16]
            fSum += fValue * fValue;
 80025f2:	edd7 7a04 	vldr	s15, [r7, #16]
 80025f6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80025fa:	ed97 7a07 	vldr	s14, [r7, #28]
 80025fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002602:	edc7 7a07 	vstr	s15, [r7, #28]
            fValue = *pInput++ - fMean;
 8002606:	69bb      	ldr	r3, [r7, #24]
 8002608:	1d1a      	adds	r2, r3, #4
 800260a:	61ba      	str	r2, [r7, #24]
 800260c:	ed93 7a00 	vldr	s14, [r3]
 8002610:	edd7 7a05 	vldr	s15, [r7, #20]
 8002614:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002618:	edc7 7a04 	vstr	s15, [r7, #16]
            fSum += fValue * fValue;
 800261c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002620:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002624:	ed97 7a07 	vldr	s14, [r7, #28]
 8002628:	ee77 7a27 	vadd.f32	s15, s14, s15
 800262c:	edc7 7a07 	vstr	s15, [r7, #28]
            fValue = *pInput++ - fMean;
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	1d1a      	adds	r2, r3, #4
 8002634:	61ba      	str	r2, [r7, #24]
 8002636:	ed93 7a00 	vldr	s14, [r3]
 800263a:	edd7 7a05 	vldr	s15, [r7, #20]
 800263e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002642:	edc7 7a04 	vstr	s15, [r7, #16]
            fSum += fValue * fValue;
 8002646:	edd7 7a04 	vldr	s15, [r7, #16]
 800264a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800264e:	ed97 7a07 	vldr	s14, [r7, #28]
 8002652:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002656:	edc7 7a07 	vstr	s15, [r7, #28]
            blkCnt--;
 800265a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265c:	3b01      	subs	r3, #1
 800265e:	627b      	str	r3, [r7, #36]	; 0x24
        while (blkCnt > 0U) {
 8002660:	e7a4      	b.n	80025ac <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0xe4>
        }

        /* Loop unrolling: Compute remaining outputs */
        blkCnt = blockSize % 0x4U;
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	f003 0303 	and.w	r3, r3, #3
 8002668:	627b      	str	r3, [r7, #36]	; 0x24

        while (blkCnt > 0U) {
 800266a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266c:	2b00      	cmp	r3, #0
 800266e:	d018      	beq.n	80026a2 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x1da>
            fValue = *pInput++ - fMean;
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	1d1a      	adds	r2, r3, #4
 8002674:	61ba      	str	r2, [r7, #24]
 8002676:	ed93 7a00 	vldr	s14, [r3]
 800267a:	edd7 7a05 	vldr	s15, [r7, #20]
 800267e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002682:	edc7 7a04 	vstr	s15, [r7, #16]
            fSum += fValue * fValue;
 8002686:	edd7 7a04 	vldr	s15, [r7, #16]
 800268a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800268e:	ed97 7a07 	vldr	s14, [r7, #28]
 8002692:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002696:	edc7 7a07 	vstr	s15, [r7, #28]
            blkCnt--;
 800269a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269c:	3b01      	subs	r3, #1
 800269e:	627b      	str	r3, [r7, #36]	; 0x24
        while (blkCnt > 0U) {
 80026a0:	e7e3      	b.n	800266a <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x1a2>
        }

        /* Variance */
        *pResult = fSum / (float32_t)(blockSize);
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	ee07 3a90 	vmov	s15, r3
 80026a8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80026ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80026b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	edc3 7a00 	vstr	s15, [r3]
    }
 80026ba:	372c      	adds	r7, #44	; 0x2c
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr

080026c4 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_>:
     * @param      input_matrix   The input matrix
     * @param      output_matrix  The output matrix
     *
     * @return     EIDSP error
     */
    static int std_axis0_CMSIS(matrix_t *input_matrix, matrix_t *output_matrix)
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b08c      	sub	sp, #48	; 0x30
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	6039      	str	r1, [r7, #0]
    {
        arm_matrix_instance_f32 arm_in_matrix, arm_transposed_matrix;

        if (input_matrix->cols != output_matrix->rows) {
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	689a      	ldr	r2, [r3, #8]
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d001      	beq.n	80026de <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x1a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80026da:	4b40      	ldr	r3, [pc, #256]	; (80027dc <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x118>)
 80026dc:	e07a      	b.n	80027d4 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x110>
        }

        if (output_matrix->cols != 1) {
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d001      	beq.n	80026ea <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80026e6:	4b3d      	ldr	r3, [pc, #244]	; (80027dc <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x118>)
 80026e8:	e074      	b.n	80027d4 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x110>
        }

        /* Copy input matrix to arm matrix */
        arm_in_matrix.numRows = input_matrix->rows;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	833b      	strh	r3, [r7, #24]
        arm_in_matrix.numCols = input_matrix->cols;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	837b      	strh	r3, [r7, #26]
        arm_in_matrix.pData = &input_matrix->buffer[0];
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	61fb      	str	r3, [r7, #28]
        /* Create transposed matrix */
        arm_transposed_matrix.numRows = input_matrix->cols;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	b29b      	uxth	r3, r3
 8002706:	823b      	strh	r3, [r7, #16]
        arm_transposed_matrix.numCols = input_matrix->rows;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	b29b      	uxth	r3, r3
 800270e:	827b      	strh	r3, [r7, #18]
        arm_transposed_matrix.pData = (float *)ei_calloc(input_matrix->cols * input_matrix->rows * sizeof(float), 1);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	6852      	ldr	r2, [r2, #4]
 8002718:	fb02 f303 	mul.w	r3, r2, r3
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	2101      	movs	r1, #1
 8002720:	4618      	mov	r0, r3
 8002722:	f025 f8e9 	bl	80278f8 <_Z9ei_callocjj>
 8002726:	4603      	mov	r3, r0
 8002728:	617b      	str	r3, [r7, #20]

        if (arm_transposed_matrix.pData == NULL) {
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d101      	bne.n	8002734 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x70>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8002730:	4b2b      	ldr	r3, [pc, #172]	; (80027e0 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x11c>)
 8002732:	e04f      	b.n	80027d4 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x110>
        }

        int ret = arm_mat_trans_f32(&arm_in_matrix, &arm_transposed_matrix);
 8002734:	f107 0210 	add.w	r2, r7, #16
 8002738:	f107 0318 	add.w	r3, r7, #24
 800273c:	4611      	mov	r1, r2
 800273e:	4618      	mov	r0, r3
 8002740:	f012 fa95 	bl	8014c6e <arm_mat_trans_f32>
 8002744:	4603      	mov	r3, r0
 8002746:	62bb      	str	r3, [r7, #40]	; 0x28
        if (ret != EIDSP_OK) {
 8002748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x8e>
            EIDSP_ERR(ret);
 800274e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002750:	e040      	b.n	80027d4 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x110>
        }

        for (size_t row = 0; row < arm_transposed_matrix.numRows; row++) {
 8002752:	2300      	movs	r3, #0
 8002754:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002756:	8a3b      	ldrh	r3, [r7, #16]
 8002758:	461a      	mov	r2, r3
 800275a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800275c:	4293      	cmp	r3, r2
 800275e:	d234      	bcs.n	80027ca <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x106>
            float std;
            float var;

            cmsis_arm_variance(arm_transposed_matrix.pData + (row * arm_transposed_matrix.numCols),
 8002760:	697a      	ldr	r2, [r7, #20]
 8002762:	8a7b      	ldrh	r3, [r7, #18]
 8002764:	4619      	mov	r1, r3
 8002766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002768:	fb01 f303 	mul.w	r3, r1, r3
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	4413      	add	r3, r2
                               arm_transposed_matrix.numCols, &var);
 8002770:	8a7a      	ldrh	r2, [r7, #18]
            cmsis_arm_variance(arm_transposed_matrix.pData + (row * arm_transposed_matrix.numCols),
 8002772:	4611      	mov	r1, r2
 8002774:	f107 0208 	add.w	r2, r7, #8
 8002778:	4618      	mov	r0, r3
 800277a:	f7ff fea5 	bl	80024c8 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf>
            arm_sqrt_f32(var, &std);
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	627b      	str	r3, [r7, #36]	; 0x24
 8002782:	f107 030c 	add.w	r3, r7, #12
 8002786:	623b      	str	r3, [r7, #32]
    if (in >= 0.0f)
 8002788:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800278c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002794:	db09      	blt.n	80027aa <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0xe6>
      *pOut = sqrtf(in);
 8002796:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 800279a:	f02d fc63 	bl	8030064 <sqrtf>
 800279e:	eef0 7a40 	vmov.f32	s15, s0
 80027a2:	6a3b      	ldr	r3, [r7, #32]
 80027a4:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 80027a8:	e004      	b.n	80027b4 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0xf0>
      *pOut = 0.0f;
 80027aa:	6a3b      	ldr	r3, [r7, #32]
 80027ac:	f04f 0200 	mov.w	r2, #0
 80027b0:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 80027b2:	bf00      	nop

            output_matrix->buffer[row] = std;
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	4413      	add	r3, r2
 80027be:	68fa      	ldr	r2, [r7, #12]
 80027c0:	601a      	str	r2, [r3, #0]
        for (size_t row = 0; row < arm_transposed_matrix.numRows; row++) {
 80027c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027c4:	3301      	adds	r3, #1
 80027c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027c8:	e7c5      	b.n	8002756 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x92>
        }

        ei_free(arm_transposed_matrix.pData);
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	4618      	mov	r0, r3
 80027ce:	f025 f8a1 	bl	8027914 <_Z7ei_freePv>

        return EIDSP_OK;
 80027d2:	2300      	movs	r3, #0
    }
 80027d4:	4618      	mov	r0, r3
 80027d6:	3730      	adds	r7, #48	; 0x30
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	fffffc14 	.word	0xfffffc14
 80027e0:	fffffc16 	.word	0xfffffc16

080027e4 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j>:
    /**
     * Initialize a CMSIS-DSP fast rfft structure
     * We do it this way as this means we can compile out fast_init calls which hints the compiler
     * to which tables can be removed
     */
    static int cmsis_rfft_init_f32(arm_rfft_fast_instance_f32 *rfft_instance, const size_t n_fft)
 80027e4:	b480      	push	{r7}
 80027e6:	b085      	sub	sp, #20
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	6039      	str	r1, [r7, #0]
    {
// ARM cores (ex M55) with Helium extensions (MVEF) need special treatment (Issue 2843)
#if EI_CLASSIFIER_HAS_FFT_INFO == 1 && !defined(ARM_MATH_MVEF)
        arm_status status;
        switch (n_fft) {
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027f4:	d120      	bne.n	8002838 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j+0x54>
                break;
            }
#endif
#if EI_CLASSIFIER_LOAD_FFT_256 == 1
            case 256: {
                arm_cfft_instance_f32 *S = &(rfft_instance->Sint);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	60fb      	str	r3, [r7, #12]
                S->fftLen = 128U;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2280      	movs	r2, #128	; 0x80
 80027fe:	801a      	strh	r2, [r3, #0]
                S->pTwiddle = NULL;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2200      	movs	r2, #0
 8002804:	605a      	str	r2, [r3, #4]
                S->bitRevLength = arm_cfft_sR_f32_len128.bitRevLength;
 8002806:	4b10      	ldr	r3, [pc, #64]	; (8002848 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j+0x64>)
 8002808:	899a      	ldrh	r2, [r3, #12]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	819a      	strh	r2, [r3, #12]
                S->pBitRevTable = arm_cfft_sR_f32_len128.pBitRevTable;
 800280e:	4b0e      	ldr	r3, [pc, #56]	; (8002848 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j+0x64>)
 8002810:	689a      	ldr	r2, [r3, #8]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	609a      	str	r2, [r3, #8]
                S->pTwiddle = arm_cfft_sR_f32_len128.pTwiddle;
 8002816:	4b0c      	ldr	r3, [pc, #48]	; (8002848 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j+0x64>)
 8002818:	685a      	ldr	r2, [r3, #4]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	605a      	str	r2, [r3, #4]
                rfft_instance->fftLenRFFT = 256U;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002824:	821a      	strh	r2, [r3, #16]
                rfft_instance->pTwiddleRFFT = (float32_t *) twiddleCoef_rfft_256;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a08      	ldr	r2, [pc, #32]	; (800284c <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j+0x68>)
 800282a:	615a      	str	r2, [r3, #20]
                status = ARM_MATH_SUCCESS;
 800282c:	2300      	movs	r3, #0
 800282e:	72fb      	strb	r3, [r7, #11]
                break;
 8002830:	bf00      	nop
#endif
            default:
                return EIDSP_FFT_TABLE_NOT_LOADED;
        }

        return status;
 8002832:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002836:	e000      	b.n	800283a <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j+0x56>
                return EIDSP_FFT_TABLE_NOT_LOADED;
 8002838:	4b05      	ldr	r3, [pc, #20]	; (8002850 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j+0x6c>)
#else
        return arm_rfft_fast_init_f32(rfft_instance, n_fft);
#endif
    }
 800283a:	4618      	mov	r0, r3
 800283c:	3714      	adds	r7, #20
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	08036c70 	.word	0x08036c70
 800284c:	08036870 	.word	0x08036870
 8002850:	fffffc08 	.word	0xfffffc08

08002854 <_ZN2ei5numpy14power_spectrumEPfjS1_jt>:
     * @param out_buffer Out buffer, size should be fft_points
     * @param out_buffer_size Buffer size
     * @param fft_points (int): The length of FFT. If fft_length is greater than frame_len, the frames will be zero-padded.
     * @returns EIDSP_OK if OK
     */
    static int power_spectrum(
 8002854:	b5b0      	push	{r4, r5, r7, lr}
 8002856:	b088      	sub	sp, #32
 8002858:	af02      	add	r7, sp, #8
 800285a:	60f8      	str	r0, [r7, #12]
 800285c:	60b9      	str	r1, [r7, #8]
 800285e:	607a      	str	r2, [r7, #4]
 8002860:	603b      	str	r3, [r7, #0]
        size_t frame_size,
        float *out_buffer,
        size_t out_buffer_size,
        uint16_t fft_points)
    {
        if (out_buffer_size != static_cast<size_t>(fft_points / 2 + 1)) {
 8002862:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002864:	085b      	lsrs	r3, r3, #1
 8002866:	b29b      	uxth	r3, r3
 8002868:	3301      	adds	r3, #1
 800286a:	461a      	mov	r2, r3
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	4293      	cmp	r3, r2
 8002870:	d001      	beq.n	8002876 <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0x22>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8002872:	4b2b      	ldr	r3, [pc, #172]	; (8002920 <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0xcc>)
 8002874:	e050      	b.n	8002918 <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0xc4>
        }

        int r = numpy::rfft(frame, frame_size, out_buffer, out_buffer_size, fft_points);
 8002876:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002878:	9300      	str	r3, [sp, #0]
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	68b9      	ldr	r1, [r7, #8]
 8002880:	68f8      	ldr	r0, [r7, #12]
 8002882:	f7ff fbd7 	bl	8002034 <_ZN2ei5numpy4rfftEPKfjPfjj>
 8002886:	6138      	str	r0, [r7, #16]
        if (r != EIDSP_OK) {
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d001      	beq.n	8002892 <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0x3e>
            return r;
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	e042      	b.n	8002918 <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0xc4>
        }

        for (size_t ix = 0; ix < out_buffer_size; ix++) {
 8002892:	2300      	movs	r3, #0
 8002894:	617b      	str	r3, [r7, #20]
 8002896:	697a      	ldr	r2, [r7, #20]
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	429a      	cmp	r2, r3
 800289c:	d23b      	bcs.n	8002916 <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0xc2>
            out_buffer[ix] = (1.0 / static_cast<float>(fft_points)) *
 800289e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80028a0:	ee07 3a90 	vmov	s15, r3
 80028a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028a8:	ee17 0a90 	vmov	r0, s15
 80028ac:	f7fd fe56 	bl	800055c <__aeabi_f2d>
 80028b0:	4602      	mov	r2, r0
 80028b2:	460b      	mov	r3, r1
 80028b4:	f04f 0000 	mov.w	r0, #0
 80028b8:	491a      	ldr	r1, [pc, #104]	; (8002924 <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0xd0>)
 80028ba:	f7fd ffd1 	bl	8000860 <__aeabi_ddiv>
 80028be:	4602      	mov	r2, r0
 80028c0:	460b      	mov	r3, r1
 80028c2:	4614      	mov	r4, r2
 80028c4:	461d      	mov	r5, r3
                (out_buffer[ix] * out_buffer[ix]);
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	4413      	add	r3, r2
 80028ce:	ed93 7a00 	vldr	s14, [r3]
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	4413      	add	r3, r2
 80028da:	edd3 7a00 	vldr	s15, [r3]
 80028de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028e2:	ee17 0a90 	vmov	r0, s15
 80028e6:	f7fd fe39 	bl	800055c <__aeabi_f2d>
 80028ea:	4602      	mov	r2, r0
 80028ec:	460b      	mov	r3, r1
            out_buffer[ix] = (1.0 / static_cast<float>(fft_points)) *
 80028ee:	4620      	mov	r0, r4
 80028f0:	4629      	mov	r1, r5
 80028f2:	f7fd fe8b 	bl	800060c <__aeabi_dmul>
 80028f6:	4602      	mov	r2, r0
 80028f8:	460b      	mov	r3, r1
 80028fa:	4610      	mov	r0, r2
 80028fc:	4619      	mov	r1, r3
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	18d4      	adds	r4, r2, r3
 8002906:	f7fe f979 	bl	8000bfc <__aeabi_d2f>
 800290a:	4603      	mov	r3, r0
 800290c:	6023      	str	r3, [r4, #0]
        for (size_t ix = 0; ix < out_buffer_size; ix++) {
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	3301      	adds	r3, #1
 8002912:	617b      	str	r3, [r7, #20]
 8002914:	e7bf      	b.n	8002896 <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0x42>
        }

        return EIDSP_OK;
 8002916:	2300      	movs	r3, #0
    }
 8002918:	4618      	mov	r0, r3
 800291a:	3718      	adds	r7, #24
 800291c:	46bd      	mov	sp, r7
 800291e:	bdb0      	pop	{r4, r5, r7, pc}
 8002920:	fffffc14 	.word	0xfffffc14
 8002924:	3ff00000 	.word	0x3ff00000

08002928 <_ZN2ei5numpy13zero_handlingEPfj>:
     * to become an argument for any log function.
     * @param input Array
     * @param input_size Size of array
     * @returns void
     */
    static void zero_handling(float *input, size_t input_size)
 8002928:	b480      	push	{r7}
 800292a:	b085      	sub	sp, #20
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	6039      	str	r1, [r7, #0]
    {
        for (size_t ix = 0; ix < input_size; ix++) {
 8002932:	2300      	movs	r3, #0
 8002934:	60fb      	str	r3, [r7, #12]
 8002936:	68fa      	ldr	r2, [r7, #12]
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	429a      	cmp	r2, r3
 800293c:	d214      	bcs.n	8002968 <_ZN2ei5numpy13zero_handlingEPfj+0x40>
            if (input[ix] == 0) {
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	4413      	add	r3, r2
 8002946:	edd3 7a00 	vldr	s15, [r3]
 800294a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800294e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002952:	d105      	bne.n	8002960 <_ZN2ei5numpy13zero_handlingEPfj+0x38>
                input[ix] = 1e-10;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	4413      	add	r3, r2
 800295c:	4a05      	ldr	r2, [pc, #20]	; (8002974 <_ZN2ei5numpy13zero_handlingEPfj+0x4c>)
 800295e:	601a      	str	r2, [r3, #0]
        for (size_t ix = 0; ix < input_size; ix++) {
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	3301      	adds	r3, #1
 8002964:	60fb      	str	r3, [r7, #12]
 8002966:	e7e6      	b.n	8002936 <_ZN2ei5numpy13zero_handlingEPfj+0xe>
            }
        }
    }
 8002968:	bf00      	nop
 800296a:	3714      	adds	r7, #20
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr
 8002974:	2edbe6ff 	.word	0x2edbe6ff

08002978 <_ZN2ei5numpy13zero_handlingEPNS_9ei_matrixE>:
     * This function handle the issue with zero values if the are exposed
     * to become an argument for any log function.
     * @param input Matrix
     * @returns void
     */
    static void zero_handling(matrix_t *input)
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
    {
        zero_handling(input->buffer, input->rows * input->cols);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6818      	ldr	r0, [r3, #0]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	6892      	ldr	r2, [r2, #8]
 800298c:	fb02 f303 	mul.w	r3, r2, r3
 8002990:	4619      	mov	r1, r3
 8002992:	f7ff ffc9 	bl	8002928 <_ZN2ei5numpy13zero_handlingEPfj>
    }
 8002996:	bf00      	nop
 8002998:	3708      	adds	r7, #8
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
	...

080029a0 <_ZN2ei8speechpy9functions16frequency_to_melEf>:
     * Converting from frequency to Mel scale
     *
     * @param f The frequency values(or a single frequency) in Hz.
     * @returns The mel scale values(or a single mel).
     */
    static float frequency_to_mel(float f) {
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b08c      	sub	sp, #48	; 0x30
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	ed87 0a01 	vstr	s0, [r7, #4]
#if EI_PORTING_RENESASRA65 == 1
        return 1127.0 * log(1.0 + f / 700.0f);
#else
        return 1127.0 * numpy::log((1.0 + f / 700.0f));
 80029aa:	ed97 7a01 	vldr	s14, [r7, #4]
 80029ae:	eddf 6a42 	vldr	s13, [pc, #264]	; 8002ab8 <_ZN2ei8speechpy9functions16frequency_to_melEf+0x118>
 80029b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80029b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80029ba:	ee77 7a87 	vadd.f32	s15, s15, s14
 80029be:	edc7 7a04 	vstr	s15, [r7, #16]
        int32_t g = (int32_t) * ((int32_t *)&a);
 80029c2:	f107 0310 	add.w	r3, r7, #16
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	60fb      	str	r3, [r7, #12]
        int32_t e = (g - 0x3f2aaaab) & 0xff800000;
 80029ca:	68fa      	ldr	r2, [r7, #12]
 80029cc:	4b3b      	ldr	r3, [pc, #236]	; (8002abc <_ZN2ei8speechpy9functions16frequency_to_melEf+0x11c>)
 80029ce:	4413      	add	r3, r2
 80029d0:	0ddb      	lsrs	r3, r3, #23
 80029d2:	05db      	lsls	r3, r3, #23
 80029d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        g = g - e;
 80029d6:	68fa      	ldr	r2, [r7, #12]
 80029d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	60fb      	str	r3, [r7, #12]
        float m = (float) * ((float *)&g);
 80029de:	f107 030c 	add.w	r3, r7, #12
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	62bb      	str	r3, [r7, #40]	; 0x28
        float i = (float)e * 1.19209290e-7f; // 0x1.0p-23
 80029e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029e8:	ee07 3a90 	vmov	s15, r3
 80029ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029f0:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8002ac0 <_ZN2ei8speechpy9functions16frequency_to_melEf+0x120>
 80029f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029f8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        float f = m - 1.0f;
 80029fc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002a00:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002a04:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002a08:	edc7 7a08 	vstr	s15, [r7, #32]
        float s = f * f;
 8002a0c:	edd7 7a08 	vldr	s15, [r7, #32]
 8002a10:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002a14:	edc7 7a07 	vstr	s15, [r7, #28]
        float r = fmaf(0.230836749f, f, -0.279208571f); // 0x1.d8c0f0p-3, -0x1.1de8dap-2
 8002a18:	ed9f 1a2a 	vldr	s2, [pc, #168]	; 8002ac4 <_ZN2ei8speechpy9functions16frequency_to_melEf+0x124>
 8002a1c:	edd7 0a08 	vldr	s1, [r7, #32]
 8002a20:	ed9f 0a29 	vldr	s0, [pc, #164]	; 8002ac8 <_ZN2ei8speechpy9functions16frequency_to_melEf+0x128>
 8002a24:	f02d f9d0 	bl	802fdc8 <fmaf>
 8002a28:	ed87 0a06 	vstr	s0, [r7, #24]
        float t = fmaf(0.331826031f, f, -0.498910338f); // 0x1.53ca34p-2, -0x1.fee25ap-2
 8002a2c:	ed9f 1a27 	vldr	s2, [pc, #156]	; 8002acc <_ZN2ei8speechpy9functions16frequency_to_melEf+0x12c>
 8002a30:	edd7 0a08 	vldr	s1, [r7, #32]
 8002a34:	ed9f 0a26 	vldr	s0, [pc, #152]	; 8002ad0 <_ZN2ei8speechpy9functions16frequency_to_melEf+0x130>
 8002a38:	f02d f9c6 	bl	802fdc8 <fmaf>
 8002a3c:	ed87 0a05 	vstr	s0, [r7, #20]
        r = fmaf(r, s, t);
 8002a40:	ed97 1a05 	vldr	s2, [r7, #20]
 8002a44:	edd7 0a07 	vldr	s1, [r7, #28]
 8002a48:	ed97 0a06 	vldr	s0, [r7, #24]
 8002a4c:	f02d f9bc 	bl	802fdc8 <fmaf>
 8002a50:	ed87 0a06 	vstr	s0, [r7, #24]
        r = fmaf(r, s, f);
 8002a54:	ed97 1a08 	vldr	s2, [r7, #32]
 8002a58:	edd7 0a07 	vldr	s1, [r7, #28]
 8002a5c:	ed97 0a06 	vldr	s0, [r7, #24]
 8002a60:	f02d f9b2 	bl	802fdc8 <fmaf>
 8002a64:	ed87 0a06 	vstr	s0, [r7, #24]
        r = fmaf(i, 0.693147182f, r); // 0x1.62e430p-1 // log(2)
 8002a68:	ed97 1a06 	vldr	s2, [r7, #24]
 8002a6c:	eddf 0a19 	vldr	s1, [pc, #100]	; 8002ad4 <_ZN2ei8speechpy9functions16frequency_to_melEf+0x134>
 8002a70:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002a74:	f02d f9a8 	bl	802fdc8 <fmaf>
 8002a78:	ed87 0a06 	vstr	s0, [r7, #24]
        return r;
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7fd fd6c 	bl	800055c <__aeabi_f2d>
 8002a84:	a30a      	add	r3, pc, #40	; (adr r3, 8002ab0 <_ZN2ei8speechpy9functions16frequency_to_melEf+0x110>)
 8002a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a8a:	f7fd fdbf 	bl	800060c <__aeabi_dmul>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	460b      	mov	r3, r1
 8002a92:	4610      	mov	r0, r2
 8002a94:	4619      	mov	r1, r3
 8002a96:	f7fe f8b1 	bl	8000bfc <__aeabi_d2f>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	ee07 3a90 	vmov	s15, r3
#endif
    }
 8002aa0:	eeb0 0a67 	vmov.f32	s0, s15
 8002aa4:	3730      	adds	r7, #48	; 0x30
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	f3af 8000 	nop.w
 8002ab0:	00000000 	.word	0x00000000
 8002ab4:	40919c00 	.word	0x40919c00
 8002ab8:	442f0000 	.word	0x442f0000
 8002abc:	c0d55555 	.word	0xc0d55555
 8002ac0:	34000000 	.word	0x34000000
 8002ac4:	be8ef46d 	.word	0xbe8ef46d
 8002ac8:	3e6c6078 	.word	0x3e6c6078
 8002acc:	beff712d 	.word	0xbeff712d
 8002ad0:	3ea9e51a 	.word	0x3ea9e51a
 8002ad4:	3f317218 	.word	0x3f317218

08002ad8 <_ZN2ei8speechpy9functions16mel_to_frequencyEf>:
     * Converting from Mel scale to frequency.
     *
     * @param mel The mel scale values(or a single mel).
     * @returns The frequency values(or a single frequency) in Hz.
     */
    static float mel_to_frequency(float mel) {
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	ed87 0a01 	vstr	s0, [r7, #4]
        return 700.0f * (exp(mel / 1127.0f) - 1.0f);
 8002ae2:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ae6:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8002b14 <_ZN2ei8speechpy9functions16mel_to_frequencyEf+0x3c>
 8002aea:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002aee:	eeb0 0a47 	vmov.f32	s0, s14
 8002af2:	f7fe fe72 	bl	80017da <_ZSt3expf>
 8002af6:	eef0 7a40 	vmov.f32	s15, s0
 8002afa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002afe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002b02:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8002b18 <_ZN2ei8speechpy9functions16mel_to_frequencyEf+0x40>
 8002b06:	ee67 7a87 	vmul.f32	s15, s15, s14
    }
 8002b0a:	eeb0 0a67 	vmov.f32	s0, s15
 8002b0e:	3708      	adds	r7, #8
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	448ce000 	.word	0x448ce000
 8002b18:	442f0000 	.word	0x442f0000

08002b1c <_ZN2ei8speechpy9functions8triangleEPfjiii>:
     * @param x_size Size of the linspace output
     * @param left
     * @param middle
     * @param right
     */
    static int triangle(float *x, size_t x_size, int left, int middle, int right) {
 8002b1c:	b590      	push	{r4, r7, lr}
 8002b1e:	b08b      	sub	sp, #44	; 0x2c
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	60f8      	str	r0, [r7, #12]
 8002b24:	60b9      	str	r1, [r7, #8]
 8002b26:	607a      	str	r2, [r7, #4]
 8002b28:	603b      	str	r3, [r7, #0]
        EI_DSP_MATRIX(out, 1, x_size);
 8002b2a:	f107 0014 	add.w	r0, r7, #20
 8002b2e:	2300      	movs	r3, #0
 8002b30:	68ba      	ldr	r2, [r7, #8]
 8002b32:	2101      	movs	r1, #1
 8002b34:	f7fe fd7a 	bl	800162c <_ZN2ei9ei_matrixC1EmmPf>
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d101      	bne.n	8002b42 <_ZN2ei8speechpy9functions8triangleEPfjiii+0x26>
 8002b3e:	4c4b      	ldr	r4, [pc, #300]	; (8002c6c <_ZN2ei8speechpy9functions8triangleEPfjiii+0x150>)
 8002b40:	e089      	b.n	8002c56 <_ZN2ei8speechpy9functions8triangleEPfjiii+0x13a>

        for (size_t ix = 0; ix < x_size; ix++) {
 8002b42:	2300      	movs	r3, #0
 8002b44:	627b      	str	r3, [r7, #36]	; 0x24
 8002b46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d27b      	bcs.n	8002c46 <_ZN2ei8speechpy9functions8triangleEPfjiii+0x12a>
            if (x[ix] > left && x[ix] <= middle) {
 8002b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b50:	009b      	lsls	r3, r3, #2
 8002b52:	68fa      	ldr	r2, [r7, #12]
 8002b54:	4413      	add	r3, r2
 8002b56:	ed93 7a00 	vldr	s14, [r3]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	ee07 3a90 	vmov	s15, r3
 8002b60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b64:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b6c:	dd2b      	ble.n	8002bc6 <_ZN2ei8speechpy9functions8triangleEPfjiii+0xaa>
 8002b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	68fa      	ldr	r2, [r7, #12]
 8002b74:	4413      	add	r3, r2
 8002b76:	ed93 7a00 	vldr	s14, [r3]
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	ee07 3a90 	vmov	s15, r3
 8002b80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b84:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b8c:	d81b      	bhi.n	8002bc6 <_ZN2ei8speechpy9functions8triangleEPfjiii+0xaa>
                out.buffer[ix] = (x[ix] - left) / (middle - left);
 8002b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	68fa      	ldr	r2, [r7, #12]
 8002b94:	4413      	add	r3, r2
 8002b96:	ed93 7a00 	vldr	s14, [r3]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	ee07 3a90 	vmov	s15, r3
 8002ba0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ba4:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002ba8:	683a      	ldr	r2, [r7, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	ee07 3a90 	vmov	s15, r3
 8002bb2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002bb6:	697a      	ldr	r2, [r7, #20]
 8002bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	4413      	add	r3, r2
 8002bbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002bc2:	edc3 7a00 	vstr	s15, [r3]
            }

            if (x[ix] < right && middle <= x[ix]) {
 8002bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	68fa      	ldr	r2, [r7, #12]
 8002bcc:	4413      	add	r3, r2
 8002bce:	ed93 7a00 	vldr	s14, [r3]
 8002bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bd4:	ee07 3a90 	vmov	s15, r3
 8002bd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bdc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002be0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002be4:	d52b      	bpl.n	8002c3e <_ZN2ei8speechpy9functions8triangleEPfjiii+0x122>
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	ee07 3a90 	vmov	s15, r3
 8002bec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	68fa      	ldr	r2, [r7, #12]
 8002bf6:	4413      	add	r3, r2
 8002bf8:	edd3 7a00 	vldr	s15, [r3]
 8002bfc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c04:	d81b      	bhi.n	8002c3e <_ZN2ei8speechpy9functions8triangleEPfjiii+0x122>
                out.buffer[ix] = (right - x[ix]) / (right - middle);
 8002c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c08:	ee07 3a90 	vmov	s15, r3
 8002c0c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	68fa      	ldr	r2, [r7, #12]
 8002c16:	4413      	add	r3, r2
 8002c18:	edd3 7a00 	vldr	s15, [r3]
 8002c1c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002c20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	ee07 3a90 	vmov	s15, r3
 8002c2a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c2e:	697a      	ldr	r2, [r7, #20]
 8002c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	4413      	add	r3, r2
 8002c36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c3a:	edc3 7a00 	vstr	s15, [r3]
        for (size_t ix = 0; ix < x_size; ix++) {
 8002c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c40:	3301      	adds	r3, #1
 8002c42:	627b      	str	r3, [r7, #36]	; 0x24
 8002c44:	e77f      	b.n	8002b46 <_ZN2ei8speechpy9functions8triangleEPfjiii+0x2a>
            }
        }

        memcpy(x, out.buffer, x_size * sizeof(float));
 8002c46:	6979      	ldr	r1, [r7, #20]
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	68f8      	ldr	r0, [r7, #12]
 8002c50:	f02f fa82 	bl	8032158 <memcpy>

        return EIDSP_OK;
 8002c54:	2400      	movs	r4, #0
        EI_DSP_MATRIX(out, 1, x_size);
 8002c56:	f107 0314 	add.w	r3, r7, #20
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f7fe fd11 	bl	8001682 <_ZN2ei9ei_matrixD1Ev>
    }
 8002c60:	4623      	mov	r3, r4
 8002c62:	4618      	mov	r0, r3
 8002c64:	372c      	adds	r7, #44	; 0x2c
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd90      	pop	{r4, r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	fffffc16 	.word	0xfffffc16

08002c70 <_ZN2ei8speechpy10processing11preemphasisC1EPNS_11ei_signal_tEifb>:
     * @param shift (int): The shift step.
     * @param cof (float): The preemphasising coefficient. 0 equals to no filtering.
     */
    class preemphasis {
public:
        preemphasis(ei_signal_t *signal, int shift, float cof, bool rescale)
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b086      	sub	sp, #24
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6178      	str	r0, [r7, #20]
 8002c78:	6139      	str	r1, [r7, #16]
 8002c7a:	60fa      	str	r2, [r7, #12]
 8002c7c:	ed87 0a02 	vstr	s0, [r7, #8]
 8002c80:	71fb      	strb	r3, [r7, #7]
            : _signal(signal), _shift(shift), _cof(cof), _rescale(rescale)
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	693a      	ldr	r2, [r7, #16]
 8002c86:	601a      	str	r2, [r3, #0]
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	68fa      	ldr	r2, [r7, #12]
 8002c8c:	605a      	str	r2, [r3, #4]
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	68ba      	ldr	r2, [r7, #8]
 8002c92:	609a      	str	r2, [r3, #8]
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	79fa      	ldrb	r2, [r7, #7]
 8002c98:	761a      	strb	r2, [r3, #24]
        {
            _prev_buffer = (float*)ei_dsp_calloc(shift * sizeof(float), 1);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	2101      	movs	r1, #1
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f024 fe29 	bl	80278f8 <_Z9ei_callocjj>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	60da      	str	r2, [r3, #12]
            _end_of_signal_buffer = (float*)ei_dsp_calloc(shift * sizeof(float), 1);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	2101      	movs	r1, #1
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f024 fe20 	bl	80278f8 <_Z9ei_callocjj>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	611a      	str	r2, [r3, #16]
            _next_offset_should_be = 0;
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	615a      	str	r2, [r3, #20]

            if (shift < 0) {
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	da06      	bge.n	8002cd8 <_ZN2ei8speechpy10processing11preemphasisC1EPNS_11ei_signal_tEifb+0x68>
                _shift = signal->total_length + shift;
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	691a      	ldr	r2, [r3, #16]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	4413      	add	r3, r2
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	605a      	str	r2, [r3, #4]
            }

            if (!_prev_buffer || !_end_of_signal_buffer) return;
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d00e      	beq.n	8002cfe <_ZN2ei8speechpy10processing11preemphasisC1EPNS_11ei_signal_tEifb+0x8e>
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	691b      	ldr	r3, [r3, #16]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d00a      	beq.n	8002cfe <_ZN2ei8speechpy10processing11preemphasisC1EPNS_11ei_signal_tEifb+0x8e>

            // we need to get the shift bytes from the end of the buffer...
            signal->get_data(signal->total_length - shift, shift, _end_of_signal_buffer);
 8002ce8:	6938      	ldr	r0, [r7, #16]
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	691a      	ldr	r2, [r3, #16]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	1ad1      	subs	r1, r2, r3
 8002cf2:	68fa      	ldr	r2, [r7, #12]
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	691b      	ldr	r3, [r3, #16]
 8002cf8:	f002 ffe2 	bl	8005cc0 <_ZNKSt8functionIFijjPfEEclEjjS0_>
 8002cfc:	e000      	b.n	8002d00 <_ZN2ei8speechpy10processing11preemphasisC1EPNS_11ei_signal_tEifb+0x90>
            if (!_prev_buffer || !_end_of_signal_buffer) return;
 8002cfe:	bf00      	nop
        }
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	4618      	mov	r0, r3
 8002d04:	3718      	adds	r7, #24
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
	...

08002d0c <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf>:
         * Get preemphasized data from the underlying audio buffer...
         * This retrieves data from the signal then preemphasizes it.
         * @param offset Offset in the audio signal
         * @param length Length of the audio signal
         */
        int get_data(size_t offset, size_t length, float *out_buffer) {
 8002d0c:	b5b0      	push	{r4, r5, r7, lr}
 8002d0e:	b08c      	sub	sp, #48	; 0x30
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	60f8      	str	r0, [r7, #12]
 8002d14:	60b9      	str	r1, [r7, #8]
 8002d16:	607a      	str	r2, [r7, #4]
 8002d18:	603b      	str	r3, [r7, #0]
            if (!_prev_buffer || !_end_of_signal_buffer) {
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	68db      	ldr	r3, [r3, #12]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d003      	beq.n	8002d2a <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x1e>
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d101      	bne.n	8002d2e <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x22>
                EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8002d2a:	4c76      	ldr	r4, [pc, #472]	; (8002f04 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x1f8>)
 8002d2c:	e0e4      	b.n	8002ef8 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x1ec>
            }
            if (offset + length > _signal->total_length) {
 8002d2e:	68ba      	ldr	r2, [r7, #8]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	441a      	add	r2, r3
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	691b      	ldr	r3, [r3, #16]
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d901      	bls.n	8002d42 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x36>
                EIDSP_ERR(EIDSP_OUT_OF_BOUNDS);
 8002d3e:	4c72      	ldr	r4, [pc, #456]	; (8002f08 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x1fc>)
 8002d40:	e0da      	b.n	8002ef8 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x1ec>
            }

            int ret;
            if (static_cast<int32_t>(offset) - _shift >= 0) {
 8002d42:	68ba      	ldr	r2, [r7, #8]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	db14      	blt.n	8002d78 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x6c>
                ret = _signal->get_data(offset - _shift, _shift, _prev_buffer);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4618      	mov	r0, r3
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	461a      	mov	r2, r3
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	1a99      	subs	r1, r3, r2
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	461a      	mov	r2, r3
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	f002 ffaa 	bl	8005cc0 <_ZNKSt8functionIFijjPfEEclEjjS0_>
 8002d6c:	6278      	str	r0, [r7, #36]	; 0x24
                if (ret != 0) {
 8002d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d001      	beq.n	8002d78 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x6c>
                    EIDSP_ERR(ret);
 8002d74:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8002d76:	e0bf      	b.n	8002ef8 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x1ec>
                }
            }
            // else we'll use the end_of_signal_buffer; so no need to check

            ret = _signal->get_data(offset, length, out_buffer);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	68b9      	ldr	r1, [r7, #8]
 8002d84:	f002 ff9c 	bl	8005cc0 <_ZNKSt8functionIFijjPfEEclEjjS0_>
 8002d88:	6278      	str	r0, [r7, #36]	; 0x24
            if (ret != 0) {
 8002d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d001      	beq.n	8002d94 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x88>
                EIDSP_ERR(ret);
 8002d90:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8002d92:	e0b1      	b.n	8002ef8 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x1ec>
            }

            // it might be that everything is already normalized here...
            bool all_between_min_1_and_1 = true;
 8002d94:	2301      	movs	r3, #1
 8002d96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            // now we have the signal and we can preemphasize
            for (size_t ix = 0; ix < length; ix++) {
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d279      	bcs.n	8002e9a <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x18e>
                float now = out_buffer[ix];
 8002da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	683a      	ldr	r2, [r7, #0]
 8002dac:	4413      	add	r3, r2
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	623b      	str	r3, [r7, #32]

                // under shift? read from end
                if (offset + ix < static_cast<uint32_t>(_shift)) {
 8002db2:	68ba      	ldr	r2, [r7, #8]
 8002db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002db6:	4413      	add	r3, r2
 8002db8:	68fa      	ldr	r2, [r7, #12]
 8002dba:	6852      	ldr	r2, [r2, #4]
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d218      	bcs.n	8002df2 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0xe6>
                    out_buffer[ix] = now - (_cof * _end_of_signal_buffer[offset + ix]);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	ed93 7a02 	vldr	s14, [r3, #8]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	691a      	ldr	r2, [r3, #16]
 8002dca:	68b9      	ldr	r1, [r7, #8]
 8002dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dce:	440b      	add	r3, r1
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	4413      	add	r3, r2
 8002dd4:	edd3 7a00 	vldr	s15, [r3]
 8002dd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	683a      	ldr	r2, [r7, #0]
 8002de2:	4413      	add	r3, r2
 8002de4:	ed97 7a08 	vldr	s14, [r7, #32]
 8002de8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dec:	edc3 7a00 	vstr	s15, [r3]
 8002df0:	e012      	b.n	8002e18 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x10c>
                }
                // otherwise read from history buffer
                else {
                    out_buffer[ix] = now - (_cof * _prev_buffer[0]);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	ed93 7a02 	vldr	s14, [r3, #8]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	edd3 7a00 	vldr	s15, [r3]
 8002e00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	683a      	ldr	r2, [r7, #0]
 8002e0a:	4413      	add	r3, r2
 8002e0c:	ed97 7a08 	vldr	s14, [r7, #32]
 8002e10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e14:	edc3 7a00 	vstr	s15, [r3]
                }

                if (_rescale && all_between_min_1_and_1) {
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	7e1b      	ldrb	r3, [r3, #24]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d020      	beq.n	8002e62 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x156>
 8002e20:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d01c      	beq.n	8002e62 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x156>
                    if (out_buffer[ix] < -1.0f || out_buffer[ix] > 1.0f) {
 8002e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	683a      	ldr	r2, [r7, #0]
 8002e2e:	4413      	add	r3, r2
 8002e30:	edd3 7a00 	vldr	s15, [r3]
 8002e34:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8002e38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e40:	d40c      	bmi.n	8002e5c <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x150>
 8002e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	683a      	ldr	r2, [r7, #0]
 8002e48:	4413      	add	r3, r2
 8002e4a:	edd3 7a00 	vldr	s15, [r3]
 8002e4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002e52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e5a:	dd02      	ble.n	8002e62 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x156>
                        all_between_min_1_and_1 = false;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                    }
                }

                // roll through and overwrite last element
                if (_shift != 1) {
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d008      	beq.n	8002e7c <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x170>
                    numpy::roll(_prev_buffer, _shift, -1);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	68d8      	ldr	r0, [r3, #12]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	f04f 32ff 	mov.w	r2, #4294967295
 8002e76:	4619      	mov	r1, r3
 8002e78:	f7fe fd08 	bl	800188c <_ZN2ei5numpy4rollEPfji>
                }
                _prev_buffer[_shift - 1] = now;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	68da      	ldr	r2, [r3, #12]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002e88:	3b01      	subs	r3, #1
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	4413      	add	r3, r2
 8002e8e:	6a3a      	ldr	r2, [r7, #32]
 8002e90:	601a      	str	r2, [r3, #0]
            for (size_t ix = 0; ix < length; ix++) {
 8002e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e94:	3301      	adds	r3, #1
 8002e96:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e98:	e781      	b.n	8002d9e <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x92>
            }

            _next_offset_should_be += length;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	695a      	ldr	r2, [r3, #20]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	441a      	add	r2, r3
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	615a      	str	r2, [r3, #20]

            // rescale from [-1 .. 1] ?
            if (_rescale && !all_between_min_1_and_1) {
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	7e1b      	ldrb	r3, [r3, #24]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d023      	beq.n	8002ef6 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x1ea>
 8002eae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002eb2:	f083 0301 	eor.w	r3, r3, #1
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d01c      	beq.n	8002ef6 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x1ea>
                matrix_t scale_matrix(length, 1, out_buffer);
 8002ebc:	f107 0010 	add.w	r0, r7, #16
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	6879      	ldr	r1, [r7, #4]
 8002ec6:	f7fe fbb1 	bl	800162c <_ZN2ei9ei_matrixC1EmmPf>
                ret = numpy::scale(&scale_matrix, 1.0f / 32768.0f);
 8002eca:	f107 0310 	add.w	r3, r7, #16
 8002ece:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8002f0c <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x200>
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f7fe ff50 	bl	8001d78 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf>
 8002ed8:	6278      	str	r0, [r7, #36]	; 0x24
                if (ret != 0) {
 8002eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d002      	beq.n	8002ee6 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x1da>
                    EIDSP_ERR(ret);
 8002ee0:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8002ee2:	2500      	movs	r5, #0
 8002ee4:	e000      	b.n	8002ee8 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x1dc>
 8002ee6:	2501      	movs	r5, #1
 8002ee8:	f107 0310 	add.w	r3, r7, #16
 8002eec:	4618      	mov	r0, r3
 8002eee:	f7fe fbc8 	bl	8001682 <_ZN2ei9ei_matrixD1Ev>
 8002ef2:	2d01      	cmp	r5, #1
 8002ef4:	d100      	bne.n	8002ef8 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x1ec>
                }
            }

            return EIDSP_OK;
 8002ef6:	2400      	movs	r4, #0
        }
 8002ef8:	4623      	mov	r3, r4
 8002efa:	4618      	mov	r0, r3
 8002efc:	3730      	adds	r7, #48	; 0x30
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bdb0      	pop	{r4, r5, r7, pc}
 8002f02:	bf00      	nop
 8002f04:	fffffc16 	.word	0xfffffc16
 8002f08:	fffffc0e 	.word	0xfffffc0e
 8002f0c:	38000000 	.word	0x38000000

08002f10 <_ZN2ei8speechpy10processing11preemphasisD1Ev>:

        ~preemphasis() {
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b082      	sub	sp, #8
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
            if (_prev_buffer) {
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d004      	beq.n	8002f2a <_ZN2ei8speechpy10processing11preemphasisD1Ev+0x1a>
                ei_dsp_free(_prev_buffer, _shift * sizeof(float));
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	4618      	mov	r0, r3
 8002f26:	f024 fcf5 	bl	8027914 <_Z7ei_freePv>
            }
            if (_end_of_signal_buffer) {
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	691b      	ldr	r3, [r3, #16]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d004      	beq.n	8002f3c <_ZN2ei8speechpy10processing11preemphasisD1Ev+0x2c>
                ei_dsp_free(_end_of_signal_buffer, _shift * sizeof(float));
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	691b      	ldr	r3, [r3, #16]
 8002f36:	4618      	mov	r0, r3
 8002f38:	f024 fcec 	bl	8027914 <_Z7ei_freePv>
            }
        }
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3708      	adds	r7, #8
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
	...

08002f48 <_ZN2ei8speechpy10processingL31ceil_unless_very_close_to_floorEf>:
    /**
     * frame_length is a float and can thus be off by a little bit, e.g.
     * frame_length = 0.018f actually can yield 0.018000011f
     * thus screwing up our frame calculations here...
     */
    static float ceil_unless_very_close_to_floor(float v) {
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	ed87 0a01 	vstr	s0, [r7, #4]
        if (v > floor(v) && v - floor(v) < 0.001f) {
 8002f52:	ed97 0a01 	vldr	s0, [r7, #4]
 8002f56:	f7fe fc50 	bl	80017fa <_ZSt5floorf>
 8002f5a:	eeb0 7a40 	vmov.f32	s14, s0
 8002f5e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f6a:	dd12      	ble.n	8002f92 <_ZN2ei8speechpy10processingL31ceil_unless_very_close_to_floorEf+0x4a>
 8002f6c:	ed97 0a01 	vldr	s0, [r7, #4]
 8002f70:	f7fe fc43 	bl	80017fa <_ZSt5floorf>
 8002f74:	eeb0 7a40 	vmov.f32	s14, s0
 8002f78:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f7c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002f80:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8002fc4 <_ZN2ei8speechpy10processingL31ceil_unless_very_close_to_floorEf+0x7c>
 8002f84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f8c:	d501      	bpl.n	8002f92 <_ZN2ei8speechpy10processingL31ceil_unless_very_close_to_floorEf+0x4a>
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e000      	b.n	8002f94 <_ZN2ei8speechpy10processingL31ceil_unless_very_close_to_floorEf+0x4c>
 8002f92:	2300      	movs	r3, #0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d006      	beq.n	8002fa6 <_ZN2ei8speechpy10processingL31ceil_unless_very_close_to_floorEf+0x5e>
            v = (floor(v));
 8002f98:	ed97 0a01 	vldr	s0, [r7, #4]
 8002f9c:	f7fe fc2d 	bl	80017fa <_ZSt5floorf>
 8002fa0:	ed87 0a01 	vstr	s0, [r7, #4]
 8002fa4:	e005      	b.n	8002fb2 <_ZN2ei8speechpy10processingL31ceil_unless_very_close_to_floorEf+0x6a>
        }
        else {
            v = (ceil(v));
 8002fa6:	ed97 0a01 	vldr	s0, [r7, #4]
 8002faa:	f7fe fc06 	bl	80017ba <_ZSt4ceilf>
 8002fae:	ed87 0a01 	vstr	s0, [r7, #4]
        }
        return v;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	ee07 3a90 	vmov	s15, r3
    }
 8002fb8:	eeb0 0a67 	vmov.f32	s0, s15
 8002fbc:	3708      	adds	r7, #8
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	3a83126f 	.word	0x3a83126f

08002fc8 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt>:
                            float sampling_frequency,
                            float frame_length,
                            float frame_stride,
                            bool zero_padding,
                            uint16_t version)
    {
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b090      	sub	sp, #64	; 0x40
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6178      	str	r0, [r7, #20]
 8002fd0:	ed87 0a04 	vstr	s0, [r7, #16]
 8002fd4:	edc7 0a03 	vstr	s1, [r7, #12]
 8002fd8:	ed87 1a02 	vstr	s2, [r7, #8]
 8002fdc:	460b      	mov	r3, r1
 8002fde:	71fb      	strb	r3, [r7, #7]
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	80bb      	strh	r3, [r7, #4]
        if (!info->signal || !info->signal->get_data || info->signal->total_length == 0) {
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d00f      	beq.n	800300c <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt+0x44>
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f002 fe93 	bl	8005d1c <_ZNKSt8functionIFijjPfEEcvbEv>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	f083 0301 	eor.w	r3, r3, #1
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d104      	bne.n	800300c <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt+0x44>
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	691b      	ldr	r3, [r3, #16]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d101      	bne.n	8003010 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt+0x48>
 800300c:	2301      	movs	r3, #1
 800300e:	e000      	b.n	8003012 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt+0x4a>
 8003010:	2300      	movs	r3, #0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d001      	beq.n	800301a <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt+0x52>
            EIDSP_ERR(EIDSP_SIGNAL_SIZE_MISMATCH);
 8003016:	4b75      	ldr	r3, [pc, #468]	; (80031ec <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt+0x224>)
 8003018:	e0e4      	b.n	80031e4 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt+0x21c>
        }

        size_t length_signal = info->signal->total_length;
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	691b      	ldr	r3, [r3, #16]
 8003020:	62fb      	str	r3, [r7, #44]	; 0x2c
        int frame_sample_length;
        int length;
        if (version == 1) {
 8003022:	88bb      	ldrh	r3, [r7, #4]
 8003024:	2b01      	cmp	r3, #1
 8003026:	d11f      	bne.n	8003068 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt+0xa0>
            frame_sample_length = static_cast<int>(round(static_cast<float>(sampling_frequency) * frame_length));
 8003028:	ed97 7a04 	vldr	s14, [r7, #16]
 800302c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003030:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003034:	eeb0 0a67 	vmov.f32	s0, s15
 8003038:	f7fe fbef 	bl	800181a <_ZSt5roundf>
 800303c:	eef0 7a40 	vmov.f32	s15, s0
 8003040:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003044:	ee17 3a90 	vmov	r3, s15
 8003048:	63fb      	str	r3, [r7, #60]	; 0x3c
            frame_stride = round(static_cast<float>(sampling_frequency) * frame_stride);
 800304a:	ed97 7a04 	vldr	s14, [r7, #16]
 800304e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003052:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003056:	eeb0 0a67 	vmov.f32	s0, s15
 800305a:	f7fe fbde 	bl	800181a <_ZSt5roundf>
 800305e:	ed87 0a02 	vstr	s0, [r7, #8]
            length = frame_sample_length;
 8003062:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003064:	63bb      	str	r3, [r7, #56]	; 0x38
 8003066:	e027      	b.n	80030b8 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt+0xf0>
        }
        else {
            frame_sample_length = static_cast<int>(ceil_unless_very_close_to_floor(static_cast<float>(sampling_frequency) * frame_length));
 8003068:	ed97 7a04 	vldr	s14, [r7, #16]
 800306c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003070:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003074:	eeb0 0a67 	vmov.f32	s0, s15
 8003078:	f7ff ff66 	bl	8002f48 <_ZN2ei8speechpy10processingL31ceil_unless_very_close_to_floorEf>
 800307c:	eef0 7a40 	vmov.f32	s15, s0
 8003080:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003084:	ee17 3a90 	vmov	r3, s15
 8003088:	63fb      	str	r3, [r7, #60]	; 0x3c
            float frame_stride_arg = frame_stride;
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	62bb      	str	r3, [r7, #40]	; 0x28
            frame_stride = ceil_unless_very_close_to_floor(static_cast<float>(sampling_frequency) * frame_stride_arg);
 800308e:	ed97 7a04 	vldr	s14, [r7, #16]
 8003092:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003096:	ee67 7a27 	vmul.f32	s15, s14, s15
 800309a:	eeb0 0a67 	vmov.f32	s0, s15
 800309e:	f7ff ff53 	bl	8002f48 <_ZN2ei8speechpy10processingL31ceil_unless_very_close_to_floorEf>
 80030a2:	ed87 0a02 	vstr	s0, [r7, #8]
            length = (frame_sample_length - (int)frame_stride);
 80030a6:	edd7 7a02 	vldr	s15, [r7, #8]
 80030aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80030ae:	ee17 2a90 	vmov	r2, s15
 80030b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030b4:	1a9b      	subs	r3, r3, r2
 80030b6:	63bb      	str	r3, [r7, #56]	; 0x38
        }

        volatile int numframes;
        volatile int len_sig;

        if (zero_padding) {
 80030b8:	79fb      	ldrb	r3, [r7, #7]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d02a      	beq.n	8003114 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt+0x14c>
            // Calculation of number of frames
            numframes = static_cast<int>(
                ceil(static_cast<float>(length_signal - length) / frame_stride));
 80030be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	ee07 3a90 	vmov	s15, r3
 80030c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80030cc:	edd7 7a02 	vldr	s15, [r7, #8]
 80030d0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80030d4:	eeb0 0a66 	vmov.f32	s0, s13
 80030d8:	f7fe fb6f 	bl	80017ba <_ZSt4ceilf>
 80030dc:	eef0 7a40 	vmov.f32	s15, s0
            numframes = static_cast<int>(
 80030e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80030e4:	ee17 3a90 	vmov	r3, s15
 80030e8:	623b      	str	r3, [r7, #32]

            // Zero padding
            len_sig = static_cast<int>(static_cast<float>(numframes) * frame_stride) + frame_sample_length;
 80030ea:	6a3b      	ldr	r3, [r7, #32]
 80030ec:	ee07 3a90 	vmov	s15, r3
 80030f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80030f4:	edd7 7a02 	vldr	s15, [r7, #8]
 80030f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003100:	ee17 2a90 	vmov	r2, s15
 8003104:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003106:	4413      	add	r3, r2
 8003108:	61fb      	str	r3, [r7, #28]

            info->signal->total_length = static_cast<size_t>(len_sig);
 800310a:	69fa      	ldr	r2, [r7, #28]
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	611a      	str	r2, [r3, #16]
 8003112:	e02f      	b.n	8003174 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt+0x1ac>
        }
        else {
            numframes = static_cast<int>(
                floor(static_cast<float>(length_signal - length) / frame_stride));
 8003114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003116:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	ee07 3a90 	vmov	s15, r3
 800311e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003122:	edd7 7a02 	vldr	s15, [r7, #8]
 8003126:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800312a:	eeb0 0a66 	vmov.f32	s0, s13
 800312e:	f7fe fb64 	bl	80017fa <_ZSt5floorf>
 8003132:	eef0 7a40 	vmov.f32	s15, s0
            numframes = static_cast<int>(
 8003136:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800313a:	ee17 3a90 	vmov	r3, s15
 800313e:	623b      	str	r3, [r7, #32]
            len_sig = static_cast<int>(
                (static_cast<float>(numframes - 1) * frame_stride + frame_sample_length));
 8003140:	6a3b      	ldr	r3, [r7, #32]
 8003142:	3b01      	subs	r3, #1
 8003144:	ee07 3a90 	vmov	s15, r3
 8003148:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800314c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003150:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003154:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003156:	ee07 3a90 	vmov	s15, r3
 800315a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800315e:	ee77 7a27 	vadd.f32	s15, s14, s15
            len_sig = static_cast<int>(
 8003162:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003166:	ee17 3a90 	vmov	r3, s15
 800316a:	61fb      	str	r3, [r7, #28]

            info->signal->total_length = static_cast<size_t>(len_sig);
 800316c:	69fa      	ldr	r2, [r7, #28]
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	611a      	str	r2, [r3, #16]
        }

        info->frame_ixs.clear();
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	3304      	adds	r3, #4
 8003178:	4618      	mov	r0, r3
 800317a:	f002 fddf 	bl	8005d3c <_ZNSt6vectorImSaImEE5clearEv>
        
        int frame_count = 0;
 800317e:	2300      	movs	r3, #0
 8003180:	637b      	str	r3, [r7, #52]	; 0x34

        for (size_t ix = 0; ix < static_cast<uint32_t>(len_sig); ix += static_cast<size_t>(frame_stride)) {
 8003182:	2300      	movs	r3, #0
 8003184:	633b      	str	r3, [r7, #48]	; 0x30
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	461a      	mov	r2, r3
 800318a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800318c:	4293      	cmp	r3, r2
 800318e:	bf34      	ite	cc
 8003190:	2301      	movcc	r3, #1
 8003192:	2300      	movcs	r3, #0
 8003194:	b2db      	uxtb	r3, r3
 8003196:	2b00      	cmp	r3, #0
 8003198:	d020      	beq.n	80031dc <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt+0x214>
            if (++frame_count > numframes) break;
 800319a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800319c:	3301      	adds	r3, #1
 800319e:	637b      	str	r3, [r7, #52]	; 0x34
 80031a0:	6a3b      	ldr	r3, [r7, #32]
 80031a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80031a4:	429a      	cmp	r2, r3
 80031a6:	bfcc      	ite	gt
 80031a8:	2301      	movgt	r3, #1
 80031aa:	2300      	movle	r3, #0
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d113      	bne.n	80031da <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt+0x212>

            info->frame_ixs.push_back(ix);
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	1d1a      	adds	r2, r3, #4
 80031b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031b8:	627b      	str	r3, [r7, #36]	; 0x24
 80031ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031be:	4619      	mov	r1, r3
 80031c0:	4610      	mov	r0, r2
 80031c2:	f002 fdc9 	bl	8005d58 <_ZNSt6vectorImSaImEE9push_backEOm>
        for (size_t ix = 0; ix < static_cast<uint32_t>(len_sig); ix += static_cast<size_t>(frame_stride)) {
 80031c6:	edd7 7a02 	vldr	s15, [r7, #8]
 80031ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031ce:	ee17 2a90 	vmov	r2, s15
 80031d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031d4:	4413      	add	r3, r2
 80031d6:	633b      	str	r3, [r7, #48]	; 0x30
 80031d8:	e7d5      	b.n	8003186 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt+0x1be>
            if (++frame_count > numframes) break;
 80031da:	bf00      	nop
        }

        info->frame_length = frame_sample_length;
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80031e0:	611a      	str	r2, [r3, #16]

        return EIDSP_OK;
 80031e2:	2300      	movs	r3, #0
    }
 80031e4:	4618      	mov	r0, r3
 80031e6:	3740      	adds	r7, #64	; 0x40
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	fffffc15 	.word	0xfffffc15

080031f0 <_ZN2ei8speechpy10processingL28calculate_no_of_stack_framesEjmffbt>:
        uint32_t sampling_frequency,
        float frame_length,
        float frame_stride,
        bool zero_padding,
        uint16_t version)
    {
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b08a      	sub	sp, #40	; 0x28
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6178      	str	r0, [r7, #20]
 80031f8:	6139      	str	r1, [r7, #16]
 80031fa:	ed87 0a03 	vstr	s0, [r7, #12]
 80031fe:	edc7 0a02 	vstr	s1, [r7, #8]
 8003202:	4611      	mov	r1, r2
 8003204:	461a      	mov	r2, r3
 8003206:	460b      	mov	r3, r1
 8003208:	71fb      	strb	r3, [r7, #7]
 800320a:	4613      	mov	r3, r2
 800320c:	80bb      	strh	r3, [r7, #4]
        int frame_sample_length;
        int length;
        if (version == 1) {
 800320e:	88bb      	ldrh	r3, [r7, #4]
 8003210:	2b01      	cmp	r3, #1
 8003212:	d125      	bne.n	8003260 <_ZN2ei8speechpy10processingL28calculate_no_of_stack_framesEjmffbt+0x70>
            frame_sample_length = static_cast<int>(round(static_cast<float>(sampling_frequency) * frame_length));
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	ee07 3a90 	vmov	s15, r3
 800321a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800321e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003222:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003226:	eeb0 0a67 	vmov.f32	s0, s15
 800322a:	f7fe faf6 	bl	800181a <_ZSt5roundf>
 800322e:	eef0 7a40 	vmov.f32	s15, s0
 8003232:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003236:	ee17 3a90 	vmov	r3, s15
 800323a:	623b      	str	r3, [r7, #32]
            frame_stride = round(static_cast<float>(sampling_frequency) * frame_stride);
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	ee07 3a90 	vmov	s15, r3
 8003242:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003246:	edd7 7a02 	vldr	s15, [r7, #8]
 800324a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800324e:	eeb0 0a67 	vmov.f32	s0, s15
 8003252:	f7fe fae2 	bl	800181a <_ZSt5roundf>
 8003256:	ed87 0a02 	vstr	s0, [r7, #8]
            length = frame_sample_length;
 800325a:	6a3b      	ldr	r3, [r7, #32]
 800325c:	627b      	str	r3, [r7, #36]	; 0x24
 800325e:	e02d      	b.n	80032bc <_ZN2ei8speechpy10processingL28calculate_no_of_stack_framesEjmffbt+0xcc>
        }
        else {
            frame_sample_length = static_cast<int>(ceil_unless_very_close_to_floor(static_cast<float>(sampling_frequency) * frame_length));
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	ee07 3a90 	vmov	s15, r3
 8003266:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800326a:	edd7 7a03 	vldr	s15, [r7, #12]
 800326e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003272:	eeb0 0a67 	vmov.f32	s0, s15
 8003276:	f7ff fe67 	bl	8002f48 <_ZN2ei8speechpy10processingL31ceil_unless_very_close_to_floorEf>
 800327a:	eef0 7a40 	vmov.f32	s15, s0
 800327e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003282:	ee17 3a90 	vmov	r3, s15
 8003286:	623b      	str	r3, [r7, #32]
            float frame_stride_arg = frame_stride;
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	61fb      	str	r3, [r7, #28]
            frame_stride = ceil_unless_very_close_to_floor(static_cast<float>(sampling_frequency) * frame_stride_arg);
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	ee07 3a90 	vmov	s15, r3
 8003292:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003296:	edd7 7a07 	vldr	s15, [r7, #28]
 800329a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800329e:	eeb0 0a67 	vmov.f32	s0, s15
 80032a2:	f7ff fe51 	bl	8002f48 <_ZN2ei8speechpy10processingL31ceil_unless_very_close_to_floorEf>
 80032a6:	ed87 0a02 	vstr	s0, [r7, #8]
            length = (frame_sample_length - (int)frame_stride);
 80032aa:	edd7 7a02 	vldr	s15, [r7, #8]
 80032ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80032b2:	ee17 2a90 	vmov	r2, s15
 80032b6:	6a3b      	ldr	r3, [r7, #32]
 80032b8:	1a9b      	subs	r3, r3, r2
 80032ba:	627b      	str	r3, [r7, #36]	; 0x24
        }

        volatile int numframes;

        if (zero_padding) {
 80032bc:	79fb      	ldrb	r3, [r7, #7]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d016      	beq.n	80032f0 <_ZN2ei8speechpy10processingL28calculate_no_of_stack_framesEjmffbt+0x100>
            // Calculation of number of frames
            numframes = static_cast<int>(
                ceil(static_cast<float>(signal_size - length) / frame_stride));
 80032c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c4:	697a      	ldr	r2, [r7, #20]
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	ee07 3a90 	vmov	s15, r3
 80032cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80032d0:	edd7 7a02 	vldr	s15, [r7, #8]
 80032d4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80032d8:	eeb0 0a66 	vmov.f32	s0, s13
 80032dc:	f7fe fa6d 	bl	80017ba <_ZSt4ceilf>
 80032e0:	eef0 7a40 	vmov.f32	s15, s0
            numframes = static_cast<int>(
 80032e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80032e8:	ee17 3a90 	vmov	r3, s15
 80032ec:	61bb      	str	r3, [r7, #24]
 80032ee:	e015      	b.n	800331c <_ZN2ei8speechpy10processingL28calculate_no_of_stack_framesEjmffbt+0x12c>
        }
        else {
            numframes = static_cast<int>(
                floor(static_cast<float>(signal_size - length) / frame_stride));
 80032f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f2:	697a      	ldr	r2, [r7, #20]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	ee07 3a90 	vmov	s15, r3
 80032fa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80032fe:	edd7 7a02 	vldr	s15, [r7, #8]
 8003302:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003306:	eeb0 0a66 	vmov.f32	s0, s13
 800330a:	f7fe fa76 	bl	80017fa <_ZSt5floorf>
 800330e:	eef0 7a40 	vmov.f32	s15, s0
            numframes = static_cast<int>(
 8003312:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003316:	ee17 3a90 	vmov	r3, s15
 800331a:	61bb      	str	r3, [r7, #24]
        }

        return numframes;
 800331c:	69bb      	ldr	r3, [r7, #24]
    }
 800331e:	4618      	mov	r0, r3
 8003320:	3728      	adds	r7, #40	; 0x28
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
	...

08003328 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb>:
     * @param scale Scale output to 0..1
     * @returns 0 if OK
     */
    static int cmvnw(matrix_t *features_matrix, uint16_t win_size = 301, bool variance_normalization = false,
        bool scale = false)
    {
 8003328:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800332c:	b09f      	sub	sp, #124	; 0x7c
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
 8003332:	4608      	mov	r0, r1
 8003334:	4611      	mov	r1, r2
 8003336:	461a      	mov	r2, r3
 8003338:	4603      	mov	r3, r0
 800333a:	807b      	strh	r3, [r7, #2]
 800333c:	460b      	mov	r3, r1
 800333e:	707b      	strb	r3, [r7, #1]
 8003340:	4613      	mov	r3, r2
 8003342:	703b      	strb	r3, [r7, #0]
        if (win_size == 0) {
 8003344:	887b      	ldrh	r3, [r7, #2]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d101      	bne.n	800334e <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x26>
            return EIDSP_OK;
 800334a:	2400      	movs	r4, #0
 800334c:	e15d      	b.n	800360a <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x2e2>
        }

        uint16_t pad_size = (win_size - 1) / 2;
 800334e:	887b      	ldrh	r3, [r7, #2]
 8003350:	3b01      	subs	r3, #1
 8003352:	0fda      	lsrs	r2, r3, #31
 8003354:	4413      	add	r3, r2
 8003356:	105b      	asrs	r3, r3, #1
 8003358:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62

        int ret;
        float *features_buffer_ptr;

        // mean & variance normalization
        EI_DSP_MATRIX(vec_pad, features_matrix->rows + (pad_size * 2), features_matrix->cols);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 8003364:	0052      	lsls	r2, r2, #1
 8003366:	1899      	adds	r1, r3, r2
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	689a      	ldr	r2, [r3, #8]
 800336c:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8003370:	2300      	movs	r3, #0
 8003372:	f7fe f95b 	bl	800162c <_ZN2ei9ei_matrixC1EmmPf>
 8003376:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003378:	2b00      	cmp	r3, #0
 800337a:	d101      	bne.n	8003380 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x58>
 800337c:	4ca8      	ldr	r4, [pc, #672]	; (8003620 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x2f8>)
 800337e:	e13f      	b.n	8003600 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x2d8>
        if (!vec_pad.buffer) {
 8003380:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003382:	2b00      	cmp	r3, #0
 8003384:	d101      	bne.n	800338a <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x62>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8003386:	4ca6      	ldr	r4, [pc, #664]	; (8003620 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x2f8>)
 8003388:	e13a      	b.n	8003600 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x2d8>
        }

        ret = numpy::pad_1d_symmetric(features_matrix, &vec_pad, pad_size, pad_size);
 800338a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800338e:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 8003392:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f7fe fc0c 	bl	8001bb4 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt>
 800339c:	65f8      	str	r0, [r7, #92]	; 0x5c
        if (ret != EIDSP_OK) {
 800339e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d001      	beq.n	80033a8 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x80>
            EIDSP_ERR(ret);
 80033a4:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 80033a6:	e12b      	b.n	8003600 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x2d8>
        }

        EI_DSP_MATRIX(mean_matrix, vec_pad.cols, 1);
 80033a8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80033aa:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 80033ae:	2300      	movs	r3, #0
 80033b0:	2201      	movs	r2, #1
 80033b2:	f7fe f93b 	bl	800162c <_ZN2ei9ei_matrixC1EmmPf>
 80033b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d101      	bne.n	80033c0 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x98>
 80033bc:	4c98      	ldr	r4, [pc, #608]	; (8003620 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x2f8>)
 80033be:	e11a      	b.n	80035f6 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x2ce>
        if (!mean_matrix.buffer) {
 80033c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d101      	bne.n	80033ca <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0xa2>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 80033c6:	4c96      	ldr	r4, [pc, #600]	; (8003620 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x2f8>)
 80033c8:	e115      	b.n	80035f6 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x2ce>
        }

        EI_DSP_MATRIX(window_variance, vec_pad.cols, 1);
 80033ca:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80033cc:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80033d0:	2300      	movs	r3, #0
 80033d2:	2201      	movs	r2, #1
 80033d4:	f7fe f92a 	bl	800162c <_ZN2ei9ei_matrixC1EmmPf>
 80033d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d101      	bne.n	80033e2 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0xba>
 80033de:	4c90      	ldr	r4, [pc, #576]	; (8003620 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x2f8>)
 80033e0:	e104      	b.n	80035ec <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x2c4>
        if (!window_variance.buffer) {
 80033e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d101      	bne.n	80033ec <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0xc4>
            return EIDSP_OUT_OF_MEM;
 80033e8:	4c8d      	ldr	r4, [pc, #564]	; (8003620 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x2f8>)
 80033ea:	e0ff      	b.n	80035ec <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x2c4>
        }

        for (size_t ix = 0; ix < features_matrix->rows; ix++) {
 80033ec:	2300      	movs	r3, #0
 80033ee:	673b      	str	r3, [r7, #112]	; 0x70
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d263      	bcs.n	80034c2 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x19a>
            // create a slice on the vec_pad
            EI_DSP_MATRIX_B(window, win_size, vec_pad.cols, vec_pad.buffer + (ix * vec_pad.cols));
 80033fa:	887d      	ldrh	r5, [r7, #2]
 80033fc:	6d7e      	ldr	r6, [r7, #84]	; 0x54
 80033fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003400:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003402:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8003404:	fb01 f303 	mul.w	r3, r1, r3
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	4413      	add	r3, r2
 800340c:	f107 001c 	add.w	r0, r7, #28
 8003410:	4632      	mov	r2, r6
 8003412:	4629      	mov	r1, r5
 8003414:	f7fe f90a 	bl	800162c <_ZN2ei9ei_matrixC1EmmPf>
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d102      	bne.n	8003424 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0xfc>
 800341e:	4c80      	ldr	r4, [pc, #512]	; (8003620 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x2f8>)
 8003420:	2500      	movs	r5, #0
 8003422:	e042      	b.n	80034aa <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x182>
            if (!window.buffer) {
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d102      	bne.n	8003430 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x108>
                EIDSP_ERR(EIDSP_OUT_OF_MEM);
 800342a:	4c7d      	ldr	r4, [pc, #500]	; (8003620 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x2f8>)
 800342c:	2500      	movs	r5, #0
 800342e:	e03c      	b.n	80034aa <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x182>
            }

            ret = numpy::mean_axis0(&window, &mean_matrix);
 8003430:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003434:	f107 031c 	add.w	r3, r7, #28
 8003438:	4611      	mov	r1, r2
 800343a:	4618      	mov	r0, r3
 800343c:	f7fe fd16 	bl	8001e6c <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_>
 8003440:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (ret != EIDSP_OK) {
 8003442:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003444:	2b00      	cmp	r3, #0
 8003446:	d002      	beq.n	800344e <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x126>
                EIDSP_ERR(ret);
 8003448:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 800344a:	2500      	movs	r5, #0
 800344c:	e02d      	b.n	80034aa <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x182>
            }

            // subtract the mean for the features
            for (size_t fm_col = 0; fm_col < features_matrix->cols; fm_col++) {
 800344e:	2300      	movs	r3, #0
 8003450:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003458:	429a      	cmp	r2, r3
 800345a:	d225      	bcs.n	80034a8 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x180>
                features_matrix->buffer[(ix * features_matrix->cols) + fm_col] =
                    features_matrix->buffer[(ix * features_matrix->cols) + fm_col] - mean_matrix.buffer[fm_col];
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8003466:	fb03 f101 	mul.w	r1, r3, r1
 800346a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800346c:	440b      	add	r3, r1
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	4413      	add	r3, r2
 8003472:	ed93 7a00 	vldr	s14, [r3]
 8003476:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003478:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	4413      	add	r3, r2
 800347e:	edd3 7a00 	vldr	s15, [r3]
                features_matrix->buffer[(ix * features_matrix->cols) + fm_col] =
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800348c:	fb03 f101 	mul.w	r1, r3, r1
 8003490:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003492:	440b      	add	r3, r1
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	4413      	add	r3, r2
                    features_matrix->buffer[(ix * features_matrix->cols) + fm_col] - mean_matrix.buffer[fm_col];
 8003498:	ee77 7a67 	vsub.f32	s15, s14, s15
                features_matrix->buffer[(ix * features_matrix->cols) + fm_col] =
 800349c:	edc3 7a00 	vstr	s15, [r3]
            for (size_t fm_col = 0; fm_col < features_matrix->cols; fm_col++) {
 80034a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034a2:	3301      	adds	r3, #1
 80034a4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80034a6:	e7d4      	b.n	8003452 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x12a>
 80034a8:	2501      	movs	r5, #1
 80034aa:	f107 031c 	add.w	r3, r7, #28
 80034ae:	4618      	mov	r0, r3
 80034b0:	f7fe f8e7 	bl	8001682 <_ZN2ei9ei_matrixD1Ev>
 80034b4:	2d01      	cmp	r5, #1
 80034b6:	f040 8099 	bne.w	80035ec <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x2c4>
        for (size_t ix = 0; ix < features_matrix->rows; ix++) {
 80034ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80034bc:	3301      	adds	r3, #1
 80034be:	673b      	str	r3, [r7, #112]	; 0x70
 80034c0:	e796      	b.n	80033f0 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0xc8>
            }
        }

        ret = numpy::pad_1d_symmetric(features_matrix, &vec_pad, pad_size, pad_size);
 80034c2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80034c6:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 80034ca:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f7fe fb70 	bl	8001bb4 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt>
 80034d4:	65f8      	str	r0, [r7, #92]	; 0x5c
        if (ret != EIDSP_OK) {
 80034d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d001      	beq.n	80034e0 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x1b8>
            EIDSP_ERR(ret);
 80034dc:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 80034de:	e085      	b.n	80035ec <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x2c4>
        }

        for (size_t ix = 0; ix < features_matrix->rows; ix++) {
 80034e0:	2300      	movs	r3, #0
 80034e2:	66bb      	str	r3, [r7, #104]	; 0x68
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d271      	bcs.n	80035d2 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x2aa>
            // create a slice on the vec_pad
            EI_DSP_MATRIX_B(window, win_size, vec_pad.cols, vec_pad.buffer + (ix * vec_pad.cols));
 80034ee:	887d      	ldrh	r5, [r7, #2]
 80034f0:	6d7e      	ldr	r6, [r7, #84]	; 0x54
 80034f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80034f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034f6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80034f8:	fb01 f303 	mul.w	r3, r1, r3
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	4413      	add	r3, r2
 8003500:	f107 000c 	add.w	r0, r7, #12
 8003504:	4632      	mov	r2, r6
 8003506:	4629      	mov	r1, r5
 8003508:	f7fe f890 	bl	800162c <_ZN2ei9ei_matrixC1EmmPf>
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d102      	bne.n	8003518 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x1f0>
 8003512:	4c43      	ldr	r4, [pc, #268]	; (8003620 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x2f8>)
 8003514:	2500      	movs	r5, #0
 8003516:	e051      	b.n	80035bc <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x294>
            if (!window.buffer) {
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d102      	bne.n	8003524 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x1fc>
                EIDSP_ERR(EIDSP_OUT_OF_MEM);
 800351e:	4c40      	ldr	r4, [pc, #256]	; (8003620 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x2f8>)
 8003520:	2500      	movs	r5, #0
 8003522:	e04b      	b.n	80035bc <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x294>
            }

            if (variance_normalization == true) {
 8003524:	787b      	ldrb	r3, [r7, #1]
 8003526:	2b01      	cmp	r3, #1
 8003528:	d147      	bne.n	80035ba <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x292>
                ret = numpy::std_axis0(&window, &window_variance);
 800352a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800352e:	f107 030c 	add.w	r3, r7, #12
 8003532:	4611      	mov	r1, r2
 8003534:	4618      	mov	r0, r3
 8003536:	f7fe fcf3 	bl	8001f20 <_ZN2ei5numpy9std_axis0EPNS_9ei_matrixES2_>
 800353a:	65f8      	str	r0, [r7, #92]	; 0x5c
                if (ret != EIDSP_OK) {
 800353c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800353e:	2b00      	cmp	r3, #0
 8003540:	d002      	beq.n	8003548 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x220>
                    EIDSP_ERR(ret);
 8003542:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 8003544:	2500      	movs	r5, #0
 8003546:	e039      	b.n	80035bc <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x294>
                }

                features_buffer_ptr = &features_matrix->buffer[ix * vec_pad.cols];
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800354e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003550:	fb01 f303 	mul.w	r3, r1, r3
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	4413      	add	r3, r2
 8003558:	677b      	str	r3, [r7, #116]	; 0x74
                for (size_t col = 0; col < vec_pad.cols; col++) {
 800355a:	2300      	movs	r3, #0
 800355c:	667b      	str	r3, [r7, #100]	; 0x64
 800355e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003560:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003562:	429a      	cmp	r2, r3
 8003564:	d229      	bcs.n	80035ba <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x292>
                    *(features_buffer_ptr) = (*(features_buffer_ptr)) /
 8003566:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4618      	mov	r0, r3
 800356c:	f7fc fff6 	bl	800055c <__aeabi_f2d>
 8003570:	4680      	mov	r8, r0
 8003572:	4689      	mov	r9, r1
                                             (window_variance.buffer[col] + 1e-10);
 8003574:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003576:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	4413      	add	r3, r2
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4618      	mov	r0, r3
 8003580:	f7fc ffec 	bl	800055c <__aeabi_f2d>
 8003584:	a324      	add	r3, pc, #144	; (adr r3, 8003618 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x2f0>)
 8003586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800358a:	f7fc fe89 	bl	80002a0 <__adddf3>
 800358e:	4602      	mov	r2, r0
 8003590:	460b      	mov	r3, r1
                    *(features_buffer_ptr) = (*(features_buffer_ptr)) /
 8003592:	4640      	mov	r0, r8
 8003594:	4649      	mov	r1, r9
 8003596:	f7fd f963 	bl	8000860 <__aeabi_ddiv>
 800359a:	4602      	mov	r2, r0
 800359c:	460b      	mov	r3, r1
 800359e:	4610      	mov	r0, r2
 80035a0:	4619      	mov	r1, r3
 80035a2:	f7fd fb2b 	bl	8000bfc <__aeabi_d2f>
 80035a6:	4602      	mov	r2, r0
 80035a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035aa:	601a      	str	r2, [r3, #0]
                    features_buffer_ptr++;
 80035ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035ae:	3304      	adds	r3, #4
 80035b0:	677b      	str	r3, [r7, #116]	; 0x74
                for (size_t col = 0; col < vec_pad.cols; col++) {
 80035b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80035b4:	3301      	adds	r3, #1
 80035b6:	667b      	str	r3, [r7, #100]	; 0x64
 80035b8:	e7d1      	b.n	800355e <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x236>
 80035ba:	2501      	movs	r5, #1
 80035bc:	f107 030c 	add.w	r3, r7, #12
 80035c0:	4618      	mov	r0, r3
 80035c2:	f7fe f85e 	bl	8001682 <_ZN2ei9ei_matrixD1Ev>
 80035c6:	2d01      	cmp	r5, #1
 80035c8:	d110      	bne.n	80035ec <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x2c4>
        for (size_t ix = 0; ix < features_matrix->rows; ix++) {
 80035ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80035cc:	3301      	adds	r3, #1
 80035ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80035d0:	e788      	b.n	80034e4 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x1bc>
                }
            }
        }

        if (scale) {
 80035d2:	783b      	ldrb	r3, [r7, #0]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d008      	beq.n	80035ea <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x2c2>
            ret = numpy::normalize(features_matrix);
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f7fe fe65 	bl	80022a8 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE>
 80035de:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (ret != EIDSP_OK) {
 80035e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d001      	beq.n	80035ea <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x2c2>
                EIDSP_ERR(ret);
 80035e6:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 80035e8:	e000      	b.n	80035ec <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x2c4>
            }
        }

        return EIDSP_OK;
 80035ea:	2400      	movs	r4, #0
        EI_DSP_MATRIX(window_variance, vec_pad.cols, 1);
 80035ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80035f0:	4618      	mov	r0, r3
 80035f2:	f7fe f846 	bl	8001682 <_ZN2ei9ei_matrixD1Ev>
        EI_DSP_MATRIX(mean_matrix, vec_pad.cols, 1);
 80035f6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80035fa:	4618      	mov	r0, r3
 80035fc:	f7fe f841 	bl	8001682 <_ZN2ei9ei_matrixD1Ev>
        EI_DSP_MATRIX(vec_pad, features_matrix->rows + (pad_size * 2), features_matrix->cols);
 8003600:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003604:	4618      	mov	r0, r3
 8003606:	f7fe f83c 	bl	8001682 <_ZN2ei9ei_matrixD1Ev>
    }
 800360a:	4623      	mov	r3, r4
 800360c:	4618      	mov	r0, r3
 800360e:	377c      	adds	r7, #124	; 0x7c
 8003610:	46bd      	mov	sp, r7
 8003612:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003616:	bf00      	nop
 8003618:	d9d7bdbb 	.word	0xd9d7bdbb
 800361c:	3ddb7cdf 	.word	0x3ddb7cdf
 8003620:	fffffc16 	.word	0xfffffc16
 8003624:	00000000 	.word	0x00000000

08003628 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi>:
    /**
     * Perform normalization for MFE frames, this converts the signal to dB,
     * then add a hard filter, and quantize / dequantize the output
     * @param features_matrix input feature matrix, will be modified in place
     */
    static int mfe_normalization(matrix_t *features_matrix, int noise_floor_db) {
 8003628:	b580      	push	{r7, lr}
 800362a:	b08c      	sub	sp, #48	; 0x30
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	6039      	str	r1, [r7, #0]
        const float noise = static_cast<float>(noise_floor_db * -1);
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	425b      	negs	r3, r3
 8003636:	ee07 3a90 	vmov	s15, r3
 800363a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800363e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        const float noise_scale = 1.0f / (static_cast<float>(noise_floor_db * -1) + 12.0f);
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	425b      	negs	r3, r3
 8003646:	ee07 3a90 	vmov	s15, r3
 800364a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800364e:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8003652:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003656:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800365a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800365e:	edc7 7a08 	vstr	s15, [r7, #32]

        for (size_t ix = 0; ix < features_matrix->rows * features_matrix->cols; ix++) {
 8003662:	2300      	movs	r3, #0
 8003664:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	6892      	ldr	r2, [r2, #8]
 800366e:	fb02 f303 	mul.w	r3, r2, r3
 8003672:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003674:	429a      	cmp	r2, r3
 8003676:	f080 80a4 	bcs.w	80037c2 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0x19a>
            float f = features_matrix->buffer[ix];
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	4413      	add	r3, r2
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	62bb      	str	r3, [r7, #40]	; 0x28
            if (f < 1e-30) {
 8003688:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800368a:	f7fc ff67 	bl	800055c <__aeabi_f2d>
 800368e:	a356      	add	r3, pc, #344	; (adr r3, 80037e8 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0x1c0>)
 8003690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003694:	f7fd fa2c 	bl	8000af0 <__aeabi_dcmplt>
 8003698:	4603      	mov	r3, r0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d001      	beq.n	80036a2 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0x7a>
                f = 1e-30;
 800369e:	4b4c      	ldr	r3, [pc, #304]	; (80037d0 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0x1a8>)
 80036a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80036a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036a4:	61fb      	str	r3, [r7, #28]
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	61bb      	str	r3, [r7, #24]
        float f = frexpf(fabsf(a), &e);
 80036aa:	edd7 7a06 	vldr	s15, [r7, #24]
 80036ae:	eef0 7ae7 	vabs.f32	s15, s15
 80036b2:	f107 030c 	add.w	r3, r7, #12
 80036b6:	4618      	mov	r0, r3
 80036b8:	eeb0 0a67 	vmov.f32	s0, s15
 80036bc:	f02c fb88 	bl	802fdd0 <frexpf>
 80036c0:	ed87 0a05 	vstr	s0, [r7, #20]
        float y = 1.23149591368684f;
 80036c4:	4b43      	ldr	r3, [pc, #268]	; (80037d4 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0x1ac>)
 80036c6:	613b      	str	r3, [r7, #16]
        y *= f;
 80036c8:	ed97 7a04 	vldr	s14, [r7, #16]
 80036cc:	edd7 7a05 	vldr	s15, [r7, #20]
 80036d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036d4:	edc7 7a04 	vstr	s15, [r7, #16]
        y += -4.11852516267426f;
 80036d8:	edd7 7a04 	vldr	s15, [r7, #16]
 80036dc:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 80037d8 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0x1b0>
 80036e0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80036e4:	edc7 7a04 	vstr	s15, [r7, #16]
        y *= f;
 80036e8:	ed97 7a04 	vldr	s14, [r7, #16]
 80036ec:	edd7 7a05 	vldr	s15, [r7, #20]
 80036f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036f4:	edc7 7a04 	vstr	s15, [r7, #16]
        y += 6.02197014179219f;
 80036f8:	edd7 7a04 	vldr	s15, [r7, #16]
 80036fc:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80037dc <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0x1b4>
 8003700:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003704:	edc7 7a04 	vstr	s15, [r7, #16]
        y *= f;
 8003708:	ed97 7a04 	vldr	s14, [r7, #16]
 800370c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003710:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003714:	edc7 7a04 	vstr	s15, [r7, #16]
        y += -3.13396450166353f;
 8003718:	edd7 7a04 	vldr	s15, [r7, #16]
 800371c:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80037e0 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0x1b8>
 8003720:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003724:	edc7 7a04 	vstr	s15, [r7, #16]
        y += e;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	ee07 3a90 	vmov	s15, r3
 800372e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003732:	ed97 7a04 	vldr	s14, [r7, #16]
 8003736:	ee77 7a27 	vadd.f32	s15, s14, s15
 800373a:	edc7 7a04 	vstr	s15, [r7, #16]
        return y;
 800373e:	edd7 7a04 	vldr	s15, [r7, #16]
        return numpy::log2(a) * 0.3010299956639812f;
 8003742:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80037e4 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0x1bc>
 8003746:	ee67 7a87 	vmul.f32	s15, s15, s14
            }
            f = numpy::log10(f);
 800374a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            f *= 10.0f; // scale by 10
 800374e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003752:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003756:	ee67 7a87 	vmul.f32	s15, s15, s14
 800375a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            f += noise;
 800375e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003762:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003766:	ee77 7a27 	vadd.f32	s15, s14, s15
 800376a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            f *= noise_scale;
 800376e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003772:	edd7 7a08 	vldr	s15, [r7, #32]
 8003776:	ee67 7a27 	vmul.f32	s15, s14, s15
 800377a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            // clip again
            if (f < 0.0f) f = 0.0f;
 800377e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003782:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800378a:	d503      	bpl.n	8003794 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0x16c>
 800378c:	f04f 0300 	mov.w	r3, #0
 8003790:	62bb      	str	r3, [r7, #40]	; 0x28
 8003792:	e00b      	b.n	80037ac <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0x184>
            else if (f > 1.0f) f = 1.0f;
 8003794:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003798:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800379c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037a4:	dd02      	ble.n	80037ac <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0x184>
 80037a6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80037aa:	62bb      	str	r3, [r7, #40]	; 0x28
            features_matrix->buffer[ix] = f;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	4413      	add	r3, r2
 80037b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037b8:	601a      	str	r2, [r3, #0]
        for (size_t ix = 0; ix < features_matrix->rows * features_matrix->cols; ix++) {
 80037ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037bc:	3301      	adds	r3, #1
 80037be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037c0:	e751      	b.n	8003666 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0x3e>
        }

        return EIDSP_OK;
 80037c2:	2300      	movs	r3, #0
    }
 80037c4:	4618      	mov	r0, r3
 80037c6:	3730      	adds	r7, #48	; 0x30
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	f3af 8000 	nop.w
 80037d0:	0da24260 	.word	0x0da24260
 80037d4:	3f9da1a8 	.word	0x3f9da1a8
 80037d8:	4083caf5 	.word	0x4083caf5
 80037dc:	40c0b3fb 	.word	0x40c0b3fb
 80037e0:	404892e0 	.word	0x404892e0
 80037e4:	3e9a209b 	.word	0x3e9a209b
 80037e8:	feebc2a0 	.word	0xfeebc2a0
 80037ec:	39b4484b 	.word	0x39b4484b

080037f0 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb>:
     * @param output_transposed If set to true this will transpose the matrix (memory efficient).
     *                          This is more efficient than calling this function and then transposing
     *                          as the latter requires the filterbank to be allocated twice (for a short while).
     * @returns EIDSP_OK if OK
     */
    static int filterbanks(
 80037f0:	b5b0      	push	{r4, r5, r7, lr}
 80037f2:	ed2d 8b02 	vpush	{d8}
 80037f6:	b098      	sub	sp, #96	; 0x60
 80037f8:	af02      	add	r7, sp, #8
 80037fa:	60f8      	str	r0, [r7, #12]
 80037fc:	607a      	str	r2, [r7, #4]
 80037fe:	603b      	str	r3, [r7, #0]
 8003800:	460b      	mov	r3, r1
 8003802:	817b      	strh	r3, [r7, #10]
        uint16_t num_filter, int coefficients, uint32_t sampling_freq,
        uint32_t low_freq, uint32_t high_freq,
        bool output_transposed = false
        )
    {
        const size_t mels_mem_size = (num_filter + 2) * sizeof(float);
 8003804:	897b      	ldrh	r3, [r7, #10]
 8003806:	3302      	adds	r3, #2
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	647b      	str	r3, [r7, #68]	; 0x44
        const size_t hertz_mem_size = (num_filter + 2) * sizeof(float);
 800380c:	897b      	ldrh	r3, [r7, #10]
 800380e:	3302      	adds	r3, #2
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	643b      	str	r3, [r7, #64]	; 0x40
        const size_t freq_index_mem_size = (num_filter + 2) * sizeof(int);
 8003814:	897b      	ldrh	r3, [r7, #10]
 8003816:	3302      	adds	r3, #2
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	63fb      	str	r3, [r7, #60]	; 0x3c

        float *mels = (float*)ei_dsp_malloc(mels_mem_size);
 800381c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800381e:	f024 f85f 	bl	80278e0 <_Z9ei_mallocj>
 8003822:	63b8      	str	r0, [r7, #56]	; 0x38
        if (!mels) {
 8003824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003826:	2b00      	cmp	r3, #0
 8003828:	d101      	bne.n	800382e <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x3e>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 800382a:	4ca3      	ldr	r4, [pc, #652]	; (8003ab8 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x2c8>)
 800382c:	e1bf      	b.n	8003bae <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x3be>
        }

        if (filterbanks->rows != num_filter || filterbanks->cols != static_cast<uint32_t>(coefficients)) {
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	685a      	ldr	r2, [r3, #4]
 8003832:	897b      	ldrh	r3, [r7, #10]
 8003834:	429a      	cmp	r2, r3
 8003836:	d104      	bne.n	8003842 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x52>
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	689a      	ldr	r2, [r3, #8]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	429a      	cmp	r2, r3
 8003840:	d001      	beq.n	8003846 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x56>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003842:	4c9e      	ldr	r4, [pc, #632]	; (8003abc <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x2cc>)
 8003844:	e1b3      	b.n	8003bae <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x3be>
        }

#if EIDSP_QUANTIZE_FILTERBANK
        memset(filterbanks->buffer, 0, filterbanks->rows * filterbanks->cols * sizeof(uint8_t));
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	6818      	ldr	r0, [r3, #0]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	68fa      	ldr	r2, [r7, #12]
 8003850:	6892      	ldr	r2, [r2, #8]
 8003852:	fb02 f303 	mul.w	r3, r2, r3
 8003856:	461a      	mov	r2, r3
 8003858:	2100      	movs	r1, #0
 800385a:	f02e fca5 	bl	80321a8 <memset>

        // Computing the Mel filterbank
        // converting the upper and lower frequencies to Mels.
        // num_filter + 2 is because for num_filter filterbanks we need
        // num_filter+2 point.
        numpy::linspace(
 800385e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003860:	ee07 3a90 	vmov	s15, r3
 8003864:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003868:	eeb0 0a67 	vmov.f32	s0, s15
 800386c:	f7ff f898 	bl	80029a0 <_ZN2ei8speechpy9functions16frequency_to_melEf>
 8003870:	eeb0 8a40 	vmov.f32	s16, s0
 8003874:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003876:	ee07 3a90 	vmov	s15, r3
 800387a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800387e:	eeb0 0a67 	vmov.f32	s0, s15
 8003882:	f7ff f88d 	bl	80029a0 <_ZN2ei8speechpy9functions16frequency_to_melEf>
 8003886:	eef0 7a40 	vmov.f32	s15, s0
            functions::frequency_to_mel(static_cast<float>(low_freq)),
            functions::frequency_to_mel(static_cast<float>(high_freq)),
            num_filter + 2,
 800388a:	897b      	ldrh	r3, [r7, #10]
 800388c:	3302      	adds	r3, #2
        numpy::linspace(
 800388e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003890:	4618      	mov	r0, r3
 8003892:	eef0 0a67 	vmov.f32	s1, s15
 8003896:	eeb0 0a48 	vmov.f32	s0, s16
 800389a:	f7fe fca9 	bl	80021f0 <_ZN2ei5numpy8linspaceEffmPf>
            mels);

        // we should convert Mels back to Hertz because the start and end-points
        // should be at the desired frequencies.
        float *hertz = (float*)ei_dsp_malloc(hertz_mem_size);
 800389e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80038a0:	f024 f81e 	bl	80278e0 <_Z9ei_mallocj>
 80038a4:	6378      	str	r0, [r7, #52]	; 0x34
        if (!hertz) {
 80038a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d104      	bne.n	80038b6 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0xc6>
            ei_dsp_free(mels, mels_mem_size);
 80038ac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80038ae:	f024 f831 	bl	8027914 <_Z7ei_freePv>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 80038b2:	4c81      	ldr	r4, [pc, #516]	; (8003ab8 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x2c8>)
 80038b4:	e17b      	b.n	8003bae <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x3be>
        }
        for (uint16_t ix = 0; ix < num_filter + 2; ix++) {
 80038b6:	2300      	movs	r3, #0
 80038b8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80038bc:	897b      	ldrh	r3, [r7, #10]
 80038be:	1c5a      	adds	r2, r3, #1
 80038c0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80038c4:	429a      	cmp	r2, r3
 80038c6:	db74      	blt.n	80039b2 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x1c2>
            hertz[ix] = functions::mel_to_frequency(mels[ix]);
 80038c8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80038d0:	4413      	add	r3, r2
 80038d2:	edd3 7a00 	vldr	s15, [r3]
 80038d6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80038de:	18d5      	adds	r5, r2, r3
 80038e0:	eeb0 0a67 	vmov.f32	s0, s15
 80038e4:	f7ff f8f8 	bl	8002ad8 <_ZN2ei8speechpy9functions16mel_to_frequencyEf>
 80038e8:	eef0 7a40 	vmov.f32	s15, s0
 80038ec:	edc5 7a00 	vstr	s15, [r5]
            if (hertz[ix] < low_freq) {
 80038f0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80038f8:	4413      	add	r3, r2
 80038fa:	ed93 7a00 	vldr	s14, [r3]
 80038fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003900:	ee07 3a90 	vmov	s15, r3
 8003904:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003908:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800390c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003910:	d50b      	bpl.n	800392a <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x13a>
                hertz[ix] = low_freq;
 8003912:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800391a:	4413      	add	r3, r2
 800391c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800391e:	ee07 2a90 	vmov	s15, r2
 8003922:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003926:	edc3 7a00 	vstr	s15, [r3]
            }
            if (hertz[ix] > high_freq) {
 800392a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003932:	4413      	add	r3, r2
 8003934:	ed93 7a00 	vldr	s14, [r3]
 8003938:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800393a:	ee07 3a90 	vmov	s15, r3
 800393e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003942:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800394a:	dd0b      	ble.n	8003964 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x174>
                hertz[ix] = high_freq;
 800394c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003954:	4413      	add	r3, r2
 8003956:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003958:	ee07 2a90 	vmov	s15, r2
 800395c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003960:	edc3 7a00 	vstr	s15, [r3]

            // here is a really annoying bug in Speechpy which calculates the frequency index wrong for the last bucket
            // the last 'hertz' value is not 8,000 (with sampling rate 16,000) but 7,999.999999
            // thus calculating the bucket to 64, not 65.
            // we're adjusting this here a tiny bit to ensure we have the same result
            if (ix == num_filter + 2 - 1) {
 8003964:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 8003968:	897b      	ldrh	r3, [r7, #10]
 800396a:	3301      	adds	r3, #1
 800396c:	429a      	cmp	r2, r3
 800396e:	d11a      	bne.n	80039a6 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x1b6>
                hertz[ix] -= 0.001;
 8003970:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003978:	4413      	add	r3, r2
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4618      	mov	r0, r3
 800397e:	f7fc fded 	bl	800055c <__aeabi_f2d>
 8003982:	a34b      	add	r3, pc, #300	; (adr r3, 8003ab0 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x2c0>)
 8003984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003988:	f7fc fc88 	bl	800029c <__aeabi_dsub>
 800398c:	4602      	mov	r2, r0
 800398e:	460b      	mov	r3, r1
 8003990:	4610      	mov	r0, r2
 8003992:	4619      	mov	r1, r3
 8003994:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800399c:	18d5      	adds	r5, r2, r3
 800399e:	f7fd f92d 	bl	8000bfc <__aeabi_d2f>
 80039a2:	4603      	mov	r3, r0
 80039a4:	602b      	str	r3, [r5, #0]
        for (uint16_t ix = 0; ix < num_filter + 2; ix++) {
 80039a6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80039aa:	3301      	adds	r3, #1
 80039ac:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80039b0:	e784      	b.n	80038bc <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0xcc>
            }
        }
        ei_dsp_free(mels, mels_mem_size);
 80039b2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80039b4:	f023 ffae 	bl	8027914 <_Z7ei_freePv>

        // The frequency resolution required to put filters at the
        // exact points calculated above should be extracted.
        //  So we should round those frequencies to the closest FFT bin.
        int *freq_index = (int*)ei_dsp_malloc(freq_index_mem_size);
 80039b8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80039ba:	f023 ff91 	bl	80278e0 <_Z9ei_mallocj>
 80039be:	6338      	str	r0, [r7, #48]	; 0x30
        if (!freq_index) {
 80039c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d104      	bne.n	80039d0 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x1e0>
            ei_dsp_free(hertz, hertz_mem_size);
 80039c6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80039c8:	f023 ffa4 	bl	8027914 <_Z7ei_freePv>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 80039cc:	4c3a      	ldr	r4, [pc, #232]	; (8003ab8 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x2c8>)
 80039ce:	e0ee      	b.n	8003bae <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x3be>
        }
        for (uint16_t ix = 0; ix < num_filter + 2; ix++) {
 80039d0:	2300      	movs	r3, #0
 80039d2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 80039d6:	897b      	ldrh	r3, [r7, #10]
 80039d8:	1c5a      	adds	r2, r3, #1
 80039da:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80039de:	429a      	cmp	r2, r3
 80039e0:	db2b      	blt.n	8003a3a <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x24a>
            freq_index[ix] = static_cast<int>(floor((coefficients + 1) * hertz[ix] / sampling_freq));
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	3301      	adds	r3, #1
 80039e6:	ee07 3a90 	vmov	s15, r3
 80039ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80039ee:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80039f6:	4413      	add	r3, r2
 80039f8:	edd3 7a00 	vldr	s15, [r3]
 80039fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	ee07 3a90 	vmov	s15, r3
 8003a06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a0a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003a0e:	eeb0 0a66 	vmov.f32	s0, s13
 8003a12:	f7fd fef2 	bl	80017fa <_ZSt5floorf>
 8003a16:	eef0 7a40 	vmov.f32	s15, s0
 8003a1a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a22:	4413      	add	r3, r2
 8003a24:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003a28:	ee17 2a90 	vmov	r2, s15
 8003a2c:	601a      	str	r2, [r3, #0]
        for (uint16_t ix = 0; ix < num_filter + 2; ix++) {
 8003a2e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003a32:	3301      	adds	r3, #1
 8003a34:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 8003a38:	e7cd      	b.n	80039d6 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x1e6>
        }
        ei_dsp_free(hertz, hertz_mem_size);
 8003a3a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003a3c:	f023 ff6a 	bl	8027914 <_Z7ei_freePv>

        for (size_t i = 0; i < num_filter; i++) {
 8003a40:	2300      	movs	r3, #0
 8003a42:	653b      	str	r3, [r7, #80]	; 0x50
 8003a44:	897b      	ldrh	r3, [r7, #10]
 8003a46:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	f080 809e 	bcs.w	8003b8a <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x39a>
            int left = freq_index[i];
 8003a4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a54:	4413      	add	r3, r2
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	62fb      	str	r3, [r7, #44]	; 0x2c
            int middle = freq_index[i + 1];
 8003a5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a5c:	3301      	adds	r3, #1
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a62:	4413      	add	r3, r2
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	62bb      	str	r3, [r7, #40]	; 0x28
            int right = freq_index[i + 2];
 8003a68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a6a:	3302      	adds	r3, #2
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a70:	4413      	add	r3, r2
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	627b      	str	r3, [r7, #36]	; 0x24

            EI_DSP_MATRIX(z, 1, (right - left + 1));
 8003a76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	3301      	adds	r3, #1
 8003a7e:	461a      	mov	r2, r3
 8003a80:	f107 0010 	add.w	r0, r7, #16
 8003a84:	2300      	movs	r3, #0
 8003a86:	2101      	movs	r1, #1
 8003a88:	f7fd fdd0 	bl	800162c <_ZN2ei9ei_matrixC1EmmPf>
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d102      	bne.n	8003a98 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x2a8>
 8003a92:	4c09      	ldr	r4, [pc, #36]	; (8003ab8 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x2c8>)
 8003a94:	2500      	movs	r5, #0
 8003a96:	e06d      	b.n	8003b74 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x384>
            if (!z.buffer) {
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d110      	bne.n	8003ac0 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x2d0>
                ei_dsp_free(freq_index, freq_index_mem_size);
 8003a9e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003aa0:	f023 ff38 	bl	8027914 <_Z7ei_freePv>
                EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8003aa4:	4c04      	ldr	r4, [pc, #16]	; (8003ab8 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x2c8>)
 8003aa6:	2500      	movs	r5, #0
 8003aa8:	e064      	b.n	8003b74 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x384>
 8003aaa:	bf00      	nop
 8003aac:	f3af 8000 	nop.w
 8003ab0:	d2f1a9fc 	.word	0xd2f1a9fc
 8003ab4:	3f50624d 	.word	0x3f50624d
 8003ab8:	fffffc16 	.word	0xfffffc16
 8003abc:	fffffc14 	.word	0xfffffc14
            }
            numpy::linspace(left, right, (right - left + 1), z.buffer);
 8003ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ac2:	ee07 3a90 	vmov	s15, r3
 8003ac6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003acc:	ee07 3a10 	vmov	s14, r3
 8003ad0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003ad4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	3301      	adds	r3, #1
 8003adc:	461a      	mov	r2, r3
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	4619      	mov	r1, r3
 8003ae2:	4610      	mov	r0, r2
 8003ae4:	eef0 0a47 	vmov.f32	s1, s14
 8003ae8:	eeb0 0a67 	vmov.f32	s0, s15
 8003aec:	f7fe fb80 	bl	80021f0 <_ZN2ei5numpy8linspaceEffmPf>
            functions::triangle(z.buffer, (right - left + 1), left, middle, right);
 8003af0:	6938      	ldr	r0, [r7, #16]
 8003af2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003af6:	1ad3      	subs	r3, r2, r3
 8003af8:	3301      	adds	r3, #1
 8003afa:	4619      	mov	r1, r3
 8003afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afe:	9300      	str	r3, [sp, #0]
 8003b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b04:	f7ff f80a 	bl	8002b1c <_ZN2ei8speechpy9functions8triangleEPfjiii>

            // so... z now contains some values that we need to overwrite in the filterbank
            for (int zx = 0; zx < (right - left + 1); zx++) {
 8003b08:	2300      	movs	r3, #0
 8003b0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b14:	429a      	cmp	r2, r3
 8003b16:	dc2c      	bgt.n	8003b72 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x382>
                size_t index = (i * filterbanks->cols) + (left + zx);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003b1e:	fb02 f303 	mul.w	r3, r2, r3
 8003b22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b24:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b26:	440a      	add	r2, r1
 8003b28:	4413      	add	r3, r2
 8003b2a:	64bb      	str	r3, [r7, #72]	; 0x48

                if (output_transposed) {
 8003b2c:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d00a      	beq.n	8003b4a <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x35a>
                    index = ((left + zx) * filterbanks->rows) + i;
 8003b34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b38:	4413      	add	r3, r2
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	fb02 f303 	mul.w	r3, r2, r3
 8003b44:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003b46:	4413      	add	r3, r2
 8003b48:	64bb      	str	r3, [r7, #72]	; 0x48
                }

#if EIDSP_QUANTIZE_FILTERBANK
                filterbanks->buffer[index] = numpy::quantize_zero_one(z.buffer[zx]);
 8003b4a:	693a      	ldr	r2, [r7, #16]
 8003b4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	4413      	add	r3, r2
 8003b52:	edd3 7a00 	vldr	s15, [r3]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b5c:	18d5      	adds	r5, r2, r3
 8003b5e:	eeb0 0a67 	vmov.f32	s0, s15
 8003b62:	f7fd ff67 	bl	8001a34 <_ZN2ei5numpy17quantize_zero_oneEf>
 8003b66:	4603      	mov	r3, r0
 8003b68:	702b      	strb	r3, [r5, #0]
            for (int zx = 0; zx < (right - left + 1); zx++) {
 8003b6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b6c:	3301      	adds	r3, #1
 8003b6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b70:	e7cc      	b.n	8003b0c <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x31c>
 8003b72:	2501      	movs	r5, #1
 8003b74:	f107 0310 	add.w	r3, r7, #16
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f7fd fd82 	bl	8001682 <_ZN2ei9ei_matrixD1Ev>
 8003b7e:	2d01      	cmp	r5, #1
 8003b80:	d115      	bne.n	8003bae <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x3be>
        for (size_t i = 0; i < num_filter; i++) {
 8003b82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b84:	3301      	adds	r3, #1
 8003b86:	653b      	str	r3, [r7, #80]	; 0x50
 8003b88:	e75c      	b.n	8003a44 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x254>
                filterbanks->buffer[index] = z.buffer[zx];
#endif
            }
        }

        if (output_transposed) {
 8003b8a:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d009      	beq.n	8003ba6 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x3b6>
            uint16_t r = filterbanks->rows;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	847b      	strh	r3, [r7, #34]	; 0x22
            filterbanks->rows = filterbanks->cols;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	689a      	ldr	r2, [r3, #8]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	605a      	str	r2, [r3, #4]
            filterbanks->cols = r;
 8003ba0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	609a      	str	r2, [r3, #8]
        }

        ei_dsp_free(freq_index, freq_index_mem_size);
 8003ba6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ba8:	f023 feb4 	bl	8027914 <_Z7ei_freePv>

        return EIDSP_OK;
 8003bac:	2400      	movs	r4, #0
    }
 8003bae:	4623      	mov	r3, r4
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3758      	adds	r7, #88	; 0x58
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	ecbd 8b02 	vpop	{d8}
 8003bba:	bdb0      	pop	{r4, r5, r7, pc}

08003bbc <_ZNSt12_Vector_baseImSaImEE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b082      	sub	sp, #8
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f002 f8e8 	bl	8005d9a <_ZNSaImED1Ev>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3708      	adds	r7, #8
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <_ZNSt12_Vector_baseImSaImEEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	4618      	mov	r0, r3
 8003be0:	f002 f8cb 	bl	8005d7a <_ZNSt12_Vector_baseImSaImEE12_Vector_implC1Ev>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	4618      	mov	r0, r3
 8003be8:	3708      	adds	r7, #8
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}

08003bee <_ZNSt6vectorImSaImEEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 8003bee:	b580      	push	{r7, lr}
 8003bf0:	b082      	sub	sp, #8
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	6078      	str	r0, [r7, #4]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f7ff ffeb 	bl	8003bd4 <_ZNSt12_Vector_baseImSaImEEC1Ev>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4618      	mov	r0, r3
 8003c02:	3708      	adds	r7, #8
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <_ZN2ei8speechpy20ei_stack_frames_infoD1Ev>:
typedef struct ei_stack_frames_info {
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b082      	sub	sp, #8
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	3304      	adds	r3, #4
 8003c14:	4618      	mov	r0, r3
 8003c16:	f002 f8e5 	bl	8005de4 <_ZNSt6vectorImSaImEED1Ev>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3708      	adds	r7, #8
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}

08003c24 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt>:
     *     In Hz, default is 0.
     * @param high_frequency (int): highest band edge of mel filters.
     *     In Hz, default is samplerate/2
     * @EIDSP_OK if OK
     */
    static int mfe(matrix_t *out_features, matrix_t *out_energies,
 8003c24:	b5b0      	push	{r4, r5, r7, lr}
 8003c26:	b0a4      	sub	sp, #144	; 0x90
 8003c28:	af04      	add	r7, sp, #16
 8003c2a:	6178      	str	r0, [r7, #20]
 8003c2c:	6139      	str	r1, [r7, #16]
 8003c2e:	60fa      	str	r2, [r7, #12]
 8003c30:	60bb      	str	r3, [r7, #8]
 8003c32:	ed87 0a01 	vstr	s0, [r7, #4]
 8003c36:	edc7 0a00 	vstr	s1, [r7]
        float frame_length, float frame_stride, uint16_t num_filters,
        uint16_t fft_length, uint32_t low_frequency, uint32_t high_frequency,
        uint16_t version
        )
    {
        int ret = 0;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	66fb      	str	r3, [r7, #108]	; 0x6c

        if (high_frequency == 0) {
 8003c3e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d103      	bne.n	8003c4e <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x2a>
            high_frequency = sampling_frequency / 2;
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	085b      	lsrs	r3, r3, #1
 8003c4a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        }

        if (low_frequency == 0) {
 8003c4e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d103      	bne.n	8003c5e <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x3a>
            low_frequency = 300;
 8003c56:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8003c5a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        }

        stack_frames_info_t stack_frame_info = { 0 };
 8003c5e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003c62:	2200      	movs	r2, #0
 8003c64:	601a      	str	r2, [r3, #0]
 8003c66:	605a      	str	r2, [r3, #4]
 8003c68:	609a      	str	r2, [r3, #8]
 8003c6a:	60da      	str	r2, [r3, #12]
 8003c6c:	611a      	str	r2, [r3, #16]
 8003c6e:	2300      	movs	r3, #0
 8003c70:	653b      	str	r3, [r7, #80]	; 0x50
 8003c72:	2300      	movs	r3, #0
 8003c74:	657b      	str	r3, [r7, #84]	; 0x54
 8003c76:	2300      	movs	r3, #0
 8003c78:	65bb      	str	r3, [r7, #88]	; 0x58
 8003c7a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003c7e:	3304      	adds	r3, #4
 8003c80:	4618      	mov	r0, r3
 8003c82:	f7ff ffb4 	bl	8003bee <_ZNSt6vectorImSaImEEC1Ev>
        stack_frame_info.signal = signal;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	64fb      	str	r3, [r7, #76]	; 0x4c

        ret = processing::stack_frames(
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	ee07 3a90 	vmov	s15, r3
 8003c90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c94:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 8003c98:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003c9c:	2100      	movs	r1, #0
 8003c9e:	ed97 1a00 	vldr	s2, [r7]
 8003ca2:	edd7 0a01 	vldr	s1, [r7, #4]
 8003ca6:	eeb0 0a67 	vmov.f32	s0, s15
 8003caa:	4618      	mov	r0, r3
 8003cac:	f7ff f98c 	bl	8002fc8 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt>
 8003cb0:	66f8      	str	r0, [r7, #108]	; 0x6c
            frame_length,
            frame_stride,
            false,
            version
        );
        if (ret != 0) {
 8003cb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d001      	beq.n	8003cbc <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x98>
            EIDSP_ERR(ret);
 8003cb8:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8003cba:	e134      	b.n	8003f26 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x302>
        }

        if (stack_frame_info.frame_ixs.size() != out_features->rows) {
 8003cbc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003cc0:	3304      	adds	r3, #4
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f002 f8a9 	bl	8005e1a <_ZNKSt6vectorImSaImEE4sizeEv>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	bf14      	ite	ne
 8003cd2:	2301      	movne	r3, #1
 8003cd4:	2300      	moveq	r3, #0
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d001      	beq.n	8003ce0 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0xbc>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003cdc:	4c97      	ldr	r4, [pc, #604]	; (8003f3c <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x318>)
 8003cde:	e122      	b.n	8003f26 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x302>
        }

        if (num_filters != out_features->cols) {
 8003ce0:	f8b7 2090 	ldrh.w	r2, [r7, #144]	; 0x90
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d001      	beq.n	8003cf0 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0xcc>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003cec:	4c93      	ldr	r4, [pc, #588]	; (8003f3c <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x318>)
 8003cee:	e11a      	b.n	8003f26 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x302>
        }

        if (stack_frame_info.frame_ixs.size() != out_energies->rows || out_energies->cols != 1) {
 8003cf0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003cf4:	3304      	adds	r3, #4
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f002 f88f 	bl	8005e1a <_ZNKSt6vectorImSaImEE4sizeEv>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d103      	bne.n	8003d0e <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0xea>
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d001      	beq.n	8003d12 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0xee>
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e000      	b.n	8003d14 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0xf0>
 8003d12:	2300      	movs	r3, #0
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d001      	beq.n	8003d1c <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0xf8>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003d18:	4c88      	ldr	r4, [pc, #544]	; (8003f3c <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x318>)
 8003d1a:	e104      	b.n	8003f26 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x302>
        }

        for (uint32_t i = 0; i < out_features->rows * out_features->cols; i++) {
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	697a      	ldr	r2, [r7, #20]
 8003d26:	6892      	ldr	r2, [r2, #8]
 8003d28:	fb02 f303 	mul.w	r3, r2, r3
 8003d2c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d20b      	bcs.n	8003d4a <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x126>
            *(out_features->buffer + i) = 0;
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	4413      	add	r3, r2
 8003d3c:	f04f 0200 	mov.w	r2, #0
 8003d40:	601a      	str	r2, [r3, #0]
        for (uint32_t i = 0; i < out_features->rows * out_features->cols; i++) {
 8003d42:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003d44:	3301      	adds	r3, #1
 8003d46:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003d48:	e7ea      	b.n	8003d20 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0xfc>
        }

        uint16_t coefficients = fft_length / 2 + 1;
 8003d4a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8003d4e:	085b      	lsrs	r3, r3, #1
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	3301      	adds	r3, #1
 8003d54:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a

        // calculate the filterbanks first... preferably I would want to do the matrix multiplications
        // whenever they happen, but OK...
#if EIDSP_QUANTIZE_FILTERBANK
        EI_DSP_QUANTIZED_MATRIX(filterbanks, num_filters, coefficients, &numpy::dequantize_zero_one);
 8003d58:	f8b7 1090 	ldrh.w	r1, [r7, #144]	; 0x90
 8003d5c:	f8b7 206a 	ldrh.w	r2, [r7, #106]	; 0x6a
 8003d60:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8003d64:	2300      	movs	r3, #0
 8003d66:	9300      	str	r3, [sp, #0]
 8003d68:	4b75      	ldr	r3, [pc, #468]	; (8003f40 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x31c>)
 8003d6a:	f7fd fce0 	bl	800172e <_ZN2ei19ei_quantized_matrixC1EmmPFfhEPh>
 8003d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d101      	bne.n	8003d78 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x154>
 8003d74:	4c73      	ldr	r4, [pc, #460]	; (8003f44 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x320>)
 8003d76:	e0d1      	b.n	8003f1c <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x2f8>
#else
        EI_DSP_MATRIX(filterbanks, num_filters, coefficients);
#endif
        if (!filterbanks.buffer) {
 8003d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d101      	bne.n	8003d82 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x15e>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8003d7e:	4c71      	ldr	r4, [pc, #452]	; (8003f44 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x320>)
 8003d80:	e0cc      	b.n	8003f1c <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x2f8>
        }

        ret = feature::filterbanks(
 8003d82:	f8b7 206a 	ldrh.w	r2, [r7, #106]	; 0x6a
 8003d86:	f8b7 1090 	ldrh.w	r1, [r7, #144]	; 0x90
 8003d8a:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8003d8e:	2301      	movs	r3, #1
 8003d90:	9302      	str	r3, [sp, #8]
 8003d92:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003d96:	9301      	str	r3, [sp, #4]
 8003d98:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003d9c:	9300      	str	r3, [sp, #0]
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	f7ff fd26 	bl	80037f0 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb>
 8003da4:	66f8      	str	r0, [r7, #108]	; 0x6c
            &filterbanks, num_filters, coefficients, sampling_frequency, low_frequency, high_frequency, true);
        if (ret != 0) {
 8003da6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d001      	beq.n	8003db0 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x18c>
            EIDSP_ERR(ret);
 8003dac:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8003dae:	e0b5      	b.n	8003f1c <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x2f8>
        }
        for (size_t ix = 0; ix < stack_frame_info.frame_ixs.size(); ix++) {
 8003db0:	2300      	movs	r3, #0
 8003db2:	67bb      	str	r3, [r7, #120]	; 0x78
 8003db4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003db8:	3304      	adds	r3, #4
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f002 f82d 	bl	8005e1a <_ZNKSt6vectorImSaImEE4sizeEv>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	bf34      	ite	cc
 8003dc8:	2301      	movcc	r3, #1
 8003dca:	2300      	movcs	r3, #0
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	f000 80a0 	beq.w	8003f14 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x2f0>
            size_t power_spectrum_frame_size = (fft_length / 2 + 1);
 8003dd4:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8003dd8:	085b      	lsrs	r3, r3, #1
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	3301      	adds	r3, #1
 8003dde:	667b      	str	r3, [r7, #100]	; 0x64

            EI_DSP_MATRIX(power_spectrum_frame, 1, power_spectrum_frame_size);
 8003de0:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8003de4:	2300      	movs	r3, #0
 8003de6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003de8:	2101      	movs	r1, #1
 8003dea:	f7fd fc1f 	bl	800162c <_ZN2ei9ei_matrixC1EmmPf>
 8003dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d102      	bne.n	8003dfa <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x1d6>
 8003df4:	4c53      	ldr	r4, [pc, #332]	; (8003f44 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x320>)
 8003df6:	2500      	movs	r5, #0
 8003df8:	e081      	b.n	8003efe <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x2da>
            if (!power_spectrum_frame.buffer) {
 8003dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d102      	bne.n	8003e06 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x1e2>
                EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8003e00:	4c50      	ldr	r4, [pc, #320]	; (8003f44 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x320>)
 8003e02:	2500      	movs	r5, #0
 8003e04:	e07b      	b.n	8003efe <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x2da>
            }

            // get signal data from the audio file
            EI_DSP_MATRIX(signal_frame, 1, stack_frame_info.frame_length);
 8003e06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e08:	461a      	mov	r2, r3
 8003e0a:	f107 0018 	add.w	r0, r7, #24
 8003e0e:	2300      	movs	r3, #0
 8003e10:	2101      	movs	r1, #1
 8003e12:	f7fd fc0b 	bl	800162c <_ZN2ei9ei_matrixC1EmmPf>
 8003e16:	69bb      	ldr	r3, [r7, #24]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d102      	bne.n	8003e22 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x1fe>
 8003e1c:	4c49      	ldr	r4, [pc, #292]	; (8003f44 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x320>)
 8003e1e:	2500      	movs	r5, #0
 8003e20:	e063      	b.n	8003eea <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x2c6>

            // don't read outside of the audio buffer... we'll automatically zero pad then
            size_t signal_offset = stack_frame_info.frame_ixs.at(ix);
 8003e22:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003e26:	3304      	adds	r3, #4
 8003e28:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f002 f805 	bl	8005e3a <_ZNSt6vectorImSaImEE2atEj>
 8003e30:	4603      	mov	r3, r0
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	663b      	str	r3, [r7, #96]	; 0x60
            size_t signal_length = stack_frame_info.frame_length;
 8003e36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e38:	677b      	str	r3, [r7, #116]	; 0x74
            if (signal_offset + signal_length > stack_frame_info.signal->total_length) {
 8003e3a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003e3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e3e:	441a      	add	r2, r3
 8003e40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e42:	691b      	ldr	r3, [r3, #16]
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d908      	bls.n	8003e5a <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x236>
                signal_length = signal_length -
                    (stack_frame_info.signal->total_length - (signal_offset + signal_length));
 8003e48:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003e4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e4c:	441a      	add	r2, r3
 8003e4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e50:	691b      	ldr	r3, [r3, #16]
                signal_length = signal_length -
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003e56:	4413      	add	r3, r2
 8003e58:	677b      	str	r3, [r7, #116]	; 0x74
            }

            ret = stack_frame_info.signal->get_data(
 8003e5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	69bb      	ldr	r3, [r7, #24]
 8003e60:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003e62:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003e64:	f001 ff2c 	bl	8005cc0 <_ZNKSt8functionIFijjPfEEclEjjS0_>
 8003e68:	66f8      	str	r0, [r7, #108]	; 0x6c
                signal_offset,
                signal_length,
                signal_frame.buffer
            );
            if (ret != 0) {
 8003e6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d002      	beq.n	8003e76 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x252>
                EIDSP_ERR(ret);
 8003e70:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8003e72:	2500      	movs	r5, #0
 8003e74:	e039      	b.n	8003eea <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x2c6>
            }

            ret = numpy::power_spectrum(
 8003e76:	69b8      	ldr	r0, [r7, #24]
                signal_frame.buffer,
                stack_frame_info.frame_length,
 8003e78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
            ret = numpy::power_spectrum(
 8003e7a:	4619      	mov	r1, r3
 8003e7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e7e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8003e82:	9300      	str	r3, [sp, #0]
 8003e84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e86:	f7fe fce5 	bl	8002854 <_ZN2ei5numpy14power_spectrumEPfjS1_jt>
 8003e8a:	66f8      	str	r0, [r7, #108]	; 0x6c
                power_spectrum_frame.buffer,
                power_spectrum_frame_size,
                fft_length
            );

            if (ret != 0) {
 8003e8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d002      	beq.n	8003e98 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x274>
                EIDSP_ERR(ret);
 8003e92:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8003e94:	2500      	movs	r5, #0
 8003e96:	e028      	b.n	8003eea <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x2c6>
            }

            float energy = numpy::sum(power_spectrum_frame.buffer, power_spectrum_frame_size);
 8003e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e9a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f7fd fd3f 	bl	8001920 <_ZN2ei5numpy3sumEPfj>
 8003ea2:	ed87 0a1c 	vstr	s0, [r7, #112]	; 0x70
            if (energy == 0) {
 8003ea6:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8003eaa:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003eae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003eb2:	d101      	bne.n	8003eb8 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x294>
                energy = 1e-10;
 8003eb4:	4b24      	ldr	r3, [pc, #144]	; (8003f48 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x324>)
 8003eb6:	673b      	str	r3, [r7, #112]	; 0x70
            }

            out_energies->buffer[ix] = energy;
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	4413      	add	r3, r2
 8003ec2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003ec4:	601a      	str	r2, [r3, #0]

            // calculate the out_features directly here
            ret = numpy::dot_by_row(
 8003ec6:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8003ec8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003eca:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	9300      	str	r3, [sp, #0]
 8003ed2:	4613      	mov	r3, r2
 8003ed4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003ed6:	f7fd fd4b 	bl	8001970 <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE>
 8003eda:	66f8      	str	r0, [r7, #108]	; 0x6c
                power_spectrum_frame_size,
                &filterbanks,
                out_features
            );

            if (ret != 0) {
 8003edc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d002      	beq.n	8003ee8 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x2c4>
                EIDSP_ERR(ret);
 8003ee2:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8003ee4:	2500      	movs	r5, #0
 8003ee6:	e000      	b.n	8003eea <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x2c6>
 8003ee8:	2501      	movs	r5, #1
 8003eea:	f107 0318 	add.w	r3, r7, #24
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f7fd fbc7 	bl	8001682 <_ZN2ei9ei_matrixD1Ev>
 8003ef4:	2d01      	cmp	r5, #1
 8003ef6:	d001      	beq.n	8003efc <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x2d8>
 8003ef8:	2500      	movs	r5, #0
 8003efa:	e000      	b.n	8003efe <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x2da>
 8003efc:	2501      	movs	r5, #1
 8003efe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003f02:	4618      	mov	r0, r3
 8003f04:	f7fd fbbd 	bl	8001682 <_ZN2ei9ei_matrixD1Ev>
 8003f08:	2d01      	cmp	r5, #1
 8003f0a:	d107      	bne.n	8003f1c <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x2f8>
        for (size_t ix = 0; ix < stack_frame_info.frame_ixs.size(); ix++) {
 8003f0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f0e:	3301      	adds	r3, #1
 8003f10:	67bb      	str	r3, [r7, #120]	; 0x78
 8003f12:	e74f      	b.n	8003db4 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x190>
            }
        }

        numpy::zero_handling(out_features);
 8003f14:	6978      	ldr	r0, [r7, #20]
 8003f16:	f7fe fd2f 	bl	8002978 <_ZN2ei5numpy13zero_handlingEPNS_9ei_matrixE>

        return EIDSP_OK;
 8003f1a:	2400      	movs	r4, #0
        EI_DSP_QUANTIZED_MATRIX(filterbanks, num_filters, coefficients, &numpy::dequantize_zero_one);
 8003f1c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003f20:	4618      	mov	r0, r3
 8003f22:	f7fd fc31 	bl	8001788 <_ZN2ei19ei_quantized_matrixD1Ev>
        stack_frames_info_t stack_frame_info = { 0 };
 8003f26:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f7ff fe6c 	bl	8003c08 <_ZN2ei8speechpy20ei_stack_frames_infoD1Ev>
    }
 8003f30:	4623      	mov	r3, r4
 8003f32:	4618      	mov	r0, r3
 8003f34:	3780      	adds	r7, #128	; 0x80
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bdb0      	pop	{r4, r5, r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	fffffc14 	.word	0xfffffc14
 8003f40:	08001b89 	.word	0x08001b89
 8003f44:	fffffc16 	.word	0xfffffc16
 8003f48:	2edbe6ff 	.word	0x2edbe6ff

08003f4c <_ZN2ei8speechpy7feature25calculate_mfe_buffer_sizeEjmfftt>:
     * @param sampling_frequency (int): The sampling frequency of the signal.
     * @param frame_length (float): The length of the frame in second.
     * @param frame_stride (float): The stride between frames.
     * @param num_filters
     */
    static matrix_size_t calculate_mfe_buffer_size(
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b088      	sub	sp, #32
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6178      	str	r0, [r7, #20]
 8003f54:	6139      	str	r1, [r7, #16]
 8003f56:	60fa      	str	r2, [r7, #12]
 8003f58:	ed87 0a02 	vstr	s0, [r7, #8]
 8003f5c:	edc7 0a01 	vstr	s1, [r7, #4]
 8003f60:	807b      	strh	r3, [r7, #2]
        size_t signal_length,
        uint32_t sampling_frequency,
        float frame_length, float frame_stride, uint16_t num_filters,
        uint16_t version)
    {
        int32_t rows = processing::calculate_no_of_stack_frames(
 8003f62:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003f64:	2200      	movs	r2, #0
 8003f66:	edd7 0a01 	vldr	s1, [r7, #4]
 8003f6a:	ed97 0a02 	vldr	s0, [r7, #8]
 8003f6e:	68f9      	ldr	r1, [r7, #12]
 8003f70:	6938      	ldr	r0, [r7, #16]
 8003f72:	f7ff f93d 	bl	80031f0 <_ZN2ei8speechpy10processingL28calculate_no_of_stack_framesEjmffbt>
 8003f76:	61f8      	str	r0, [r7, #28]
            sampling_frequency,
            frame_length,
            frame_stride,
            false,
            version);
        int32_t cols = num_filters;
 8003f78:	887b      	ldrh	r3, [r7, #2]
 8003f7a:	61bb      	str	r3, [r7, #24]

        matrix_size_t size_matrix;
        size_matrix.rows = (uint32_t)rows;
 8003f7c:	69fa      	ldr	r2, [r7, #28]
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	601a      	str	r2, [r3, #0]
        size_matrix.cols = (uint32_t)cols;
 8003f82:	69ba      	ldr	r2, [r7, #24]
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	605a      	str	r2, [r3, #4]
        return size_matrix;
 8003f88:	bf00      	nop
    }
 8003f8a:	6978      	ldr	r0, [r7, #20]
 8003f8c:	3720      	adds	r7, #32
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}

08003f92 <_ZNSt8functionIFijjPfEED1Ev>:
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8003f92:	b580      	push	{r7, lr}
 8003f94:	b082      	sub	sp, #8
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	6078      	str	r0, [r7, #4]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f7fd fb21 	bl	80015e4 <_ZNSt14_Function_baseD1Ev>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3708      	adds	r7, #8
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}

08003fac <_ZN2ei11ei_signal_tC1Ev>:
typedef struct ei_signal_t {
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b082      	sub	sp, #8
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f001 ff51 	bl	8005e5e <_ZNSt8functionIFijjPfEEC1Ev>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3708      	adds	r7, #8
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}

08003fc6 <_ZN2ei11ei_signal_tD1Ev>:
 8003fc6:	b580      	push	{r7, lr}
 8003fc8:	b082      	sub	sp, #8
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	6078      	str	r0, [r7, #4]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f7ff ffde 	bl	8003f92 <_ZNSt8functionIFijjPfEED1Ev>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3708      	adds	r7, #8
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}

08003fe0 <_ZN12_GLOBAL__N_1L35preemphasized_audio_signal_get_dataEjjPf>:

    return EIDSP_OK;
}

static class speechpy::processing::preemphasis *preemphasis;
static int preemphasized_audio_signal_get_data(size_t offset, size_t length, float *out_ptr) {
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b084      	sub	sp, #16
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	60f8      	str	r0, [r7, #12]
 8003fe8:	60b9      	str	r1, [r7, #8]
 8003fea:	607a      	str	r2, [r7, #4]
    return preemphasis->get_data(offset, length, out_ptr);
 8003fec:	4b05      	ldr	r3, [pc, #20]	; (8004004 <_ZN12_GLOBAL__N_1L35preemphasized_audio_signal_get_dataEjjPf+0x24>)
 8003fee:	6818      	ldr	r0, [r3, #0]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	68ba      	ldr	r2, [r7, #8]
 8003ff4:	68f9      	ldr	r1, [r7, #12]
 8003ff6:	f7fe fe89 	bl	8002d0c <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf>
 8003ffa:	4603      	mov	r3, r0
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3710      	adds	r7, #16
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}
 8004004:	20000808 	.word	0x20000808

08004008 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf>:
    return EIDSP_OK;
#endif
}


__attribute__((unused)) int extract_mfe_features(signal_t *signal, matrix_t *output_matrix, void *config_ptr, const float sampling_frequency) {
 8004008:	b5f0      	push	{r4, r5, r6, r7, lr}
 800400a:	b0a5      	sub	sp, #148	; 0x94
 800400c:	af06      	add	r7, sp, #24
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	60b9      	str	r1, [r7, #8]
 8004012:	607a      	str	r2, [r7, #4]
 8004014:	ed87 0a00 	vstr	s0, [r7]
    ei_dsp_config_mfe_t config = *((ei_dsp_config_mfe_t*)config_ptr);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f107 0440 	add.w	r4, r7, #64	; 0x40
 800401e:	461d      	mov	r5, r3
 8004020:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004022:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004024:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004026:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004028:	e895 0003 	ldmia.w	r5, {r0, r1}
 800402c:	e884 0003 	stmia.w	r4, {r0, r1}

    if (config.axes != 1) {
 8004030:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004032:	2b01      	cmp	r3, #1
 8004034:	d001      	beq.n	800403a <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x32>
        EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8004036:	4c91      	ldr	r4, [pc, #580]	; (800427c <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x274>)
 8004038:	e11b      	b.n	8004272 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x26a>
    }

    if (signal->total_length == 0) {
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	691b      	ldr	r3, [r3, #16]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d101      	bne.n	8004046 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x3e>
        EIDSP_ERR(EIDSP_PARAMETER_INVALID);
 8004042:	4c8f      	ldr	r4, [pc, #572]	; (8004280 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x278>)
 8004044:	e115      	b.n	8004272 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x26a>
    }

    const uint32_t frequency = static_cast<uint32_t>(sampling_frequency);
 8004046:	edd7 7a00 	vldr	s15, [r7]
 800404a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800404e:	ee17 3a90 	vmov	r3, s15
 8004052:	677b      	str	r3, [r7, #116]	; 0x74

    signal_t preemphasized_audio_signal;
 8004054:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004058:	4618      	mov	r0, r3
 800405a:	f7ff ffa7 	bl	8003fac <_ZN2ei11ei_signal_tC1Ev>

    // before version 3 we did not have preemphasis
    if (config.implementation_version < 3) {
 800405e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004062:	2b02      	cmp	r3, #2
 8004064:	d80d      	bhi.n	8004082 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x7a>
        preemphasis = nullptr;
 8004066:	4b87      	ldr	r3, [pc, #540]	; (8004284 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x27c>)
 8004068:	2200      	movs	r2, #0
 800406a:	601a      	str	r2, [r3, #0]

        preemphasized_audio_signal.total_length = signal->total_length;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	691b      	ldr	r3, [r3, #16]
 8004070:	63fb      	str	r3, [r7, #60]	; 0x3c
        preemphasized_audio_signal.get_data = signal->get_data;
 8004072:	68fa      	ldr	r2, [r7, #12]
 8004074:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004078:	4611      	mov	r1, r2
 800407a:	4618      	mov	r0, r3
 800407c:	f001 ff1c 	bl	8005eb8 <_ZNSt8functionIFijjPfEEaSERKS2_>
 8004080:	e01d      	b.n	80040be <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xb6>
    }
    else {
        // preemphasis class to preprocess the audio...
        class speechpy::processing::preemphasis *pre = new class speechpy::processing::preemphasis(signal, 1, 0.98f, true);
 8004082:	201c      	movs	r0, #28
 8004084:	f02b fb9a 	bl	802f7bc <_Znwj>
 8004088:	4603      	mov	r3, r0
 800408a:	461c      	mov	r4, r3
 800408c:	2301      	movs	r3, #1
 800408e:	ed9f 0a7e 	vldr	s0, [pc, #504]	; 8004288 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x280>
 8004092:	2201      	movs	r2, #1
 8004094:	68f9      	ldr	r1, [r7, #12]
 8004096:	4620      	mov	r0, r4
 8004098:	f7fe fdea 	bl	8002c70 <_ZN2ei8speechpy10processing11preemphasisC1EPNS_11ei_signal_tEifb>
 800409c:	673c      	str	r4, [r7, #112]	; 0x70
        preemphasis = pre;
 800409e:	4a79      	ldr	r2, [pc, #484]	; (8004284 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x27c>)
 80040a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80040a2:	6013      	str	r3, [r2, #0]

        preemphasized_audio_signal.total_length = signal->total_length;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	691b      	ldr	r3, [r3, #16]
 80040a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        preemphasized_audio_signal.get_data = &preemphasized_audio_signal_get_data;
 80040aa:	4b78      	ldr	r3, [pc, #480]	; (800428c <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x284>)
 80040ac:	66bb      	str	r3, [r7, #104]	; 0x68
 80040ae:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80040b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80040b6:	4611      	mov	r1, r2
 80040b8:	4618      	mov	r0, r3
 80040ba:	f001 fedd 	bl	8005e78 <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSA_JjjS0_EEEE5valueERS2_E4typeEOS8_>

    // calculate the size of the MFE matrix
    matrix_size_t out_matrix_size =
        speechpy::feature::calculate_mfe_buffer_size(
            preemphasized_audio_signal.total_length, frequency, config.frame_length, config.frame_stride, config.num_filters,
            config.implementation_version);
 80040be:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80040c0:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80040c4:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
            preemphasized_audio_signal.total_length, frequency, config.frame_length, config.frame_stride, config.num_filters,
 80040c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
            config.implementation_version);
 80040ca:	b29a      	uxth	r2, r3
 80040cc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80040d0:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80040d4:	9300      	str	r3, [sp, #0]
 80040d6:	4613      	mov	r3, r2
 80040d8:	eef0 0a47 	vmov.f32	s1, s14
 80040dc:	eeb0 0a67 	vmov.f32	s0, s15
 80040e0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80040e2:	f7ff ff33 	bl	8003f4c <_ZN2ei8speechpy7feature25calculate_mfe_buffer_sizeEjmfftt>
    /* Only throw size mismatch error calculated buffer doesn't fit for continuous inferencing */
    if (out_matrix_size.rows * out_matrix_size.cols > output_matrix->rows * output_matrix->cols) {
 80040e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040ea:	fb03 f202 	mul.w	r2, r3, r2
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	68b9      	ldr	r1, [r7, #8]
 80040f4:	6889      	ldr	r1, [r1, #8]
 80040f6:	fb01 f303 	mul.w	r3, r1, r3
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d920      	bls.n	8004140 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x138>
        ei_printf("out_matrix = %dx%d\n", (int)output_matrix->rows, (int)output_matrix->cols);
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	4619      	mov	r1, r3
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	461a      	mov	r2, r3
 800410a:	4861      	ldr	r0, [pc, #388]	; (8004290 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x288>)
 800410c:	f001 fbce 	bl	80058ac <_Z9ei_printfPKcz>
        ei_printf("calculated size = %dx%d\n", (int)out_matrix_size.rows, (int)out_matrix_size.cols);
 8004110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004112:	4619      	mov	r1, r3
 8004114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004116:	461a      	mov	r2, r3
 8004118:	485e      	ldr	r0, [pc, #376]	; (8004294 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x28c>)
 800411a:	f001 fbc7 	bl	80058ac <_Z9ei_printfPKcz>
        if (preemphasis) {
 800411e:	4b59      	ldr	r3, [pc, #356]	; (8004284 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x27c>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d00a      	beq.n	800413c <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x134>
            delete preemphasis;
 8004126:	4b57      	ldr	r3, [pc, #348]	; (8004284 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x27c>)
 8004128:	681c      	ldr	r4, [r3, #0]
 800412a:	2c00      	cmp	r4, #0
 800412c:	d006      	beq.n	800413c <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x134>
 800412e:	4620      	mov	r0, r4
 8004130:	f7fe feee 	bl	8002f10 <_ZN2ei8speechpy10processing11preemphasisD1Ev>
 8004134:	211c      	movs	r1, #28
 8004136:	4620      	mov	r0, r4
 8004138:	f02b fb3c 	bl	802f7b4 <_ZdlPvj>
        }
        EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 800413c:	4c4f      	ldr	r4, [pc, #316]	; (800427c <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x274>)
 800413e:	e093      	b.n	8004268 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x260>
    }

    output_matrix->rows = out_matrix_size.rows;
 8004140:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	605a      	str	r2, [r3, #4]
    output_matrix->cols = out_matrix_size.cols;
 8004146:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	609a      	str	r2, [r3, #8]

    // and run the MFE extraction
    EI_DSP_MATRIX(energy_matrix, output_matrix->rows, 1);
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	6859      	ldr	r1, [r3, #4]
 8004150:	f107 0014 	add.w	r0, r7, #20
 8004154:	2300      	movs	r3, #0
 8004156:	2201      	movs	r2, #1
 8004158:	f7fd fa68 	bl	800162c <_ZN2ei9ei_matrixC1EmmPf>
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d101      	bne.n	8004166 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x15e>
 8004162:	4c4d      	ldr	r4, [pc, #308]	; (8004298 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x290>)
 8004164:	e07b      	b.n	800425e <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x256>
    if (!energy_matrix.buffer) {
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d110      	bne.n	800418e <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x186>
        if (preemphasis) {
 800416c:	4b45      	ldr	r3, [pc, #276]	; (8004284 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x27c>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d00a      	beq.n	800418a <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x182>
            delete preemphasis;
 8004174:	4b43      	ldr	r3, [pc, #268]	; (8004284 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x27c>)
 8004176:	681c      	ldr	r4, [r3, #0]
 8004178:	2c00      	cmp	r4, #0
 800417a:	d006      	beq.n	800418a <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x182>
 800417c:	4620      	mov	r0, r4
 800417e:	f7fe fec7 	bl	8002f10 <_ZN2ei8speechpy10processing11preemphasisD1Ev>
 8004182:	211c      	movs	r1, #28
 8004184:	4620      	mov	r0, r4
 8004186:	f02b fb15 	bl	802f7b4 <_ZdlPvj>
        }
        EIDSP_ERR(EIDSP_OUT_OF_MEM);
 800418a:	4c43      	ldr	r4, [pc, #268]	; (8004298 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x290>)
 800418c:	e067      	b.n	800425e <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x256>
    }

    int ret = speechpy::feature::mfe(output_matrix, &energy_matrix, &preemphasized_audio_signal,
 800418e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8004192:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
        frequency, config.frame_length, config.frame_stride, config.num_filters, config.fft_length,
 8004196:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    int ret = speechpy::feature::mfe(output_matrix, &energy_matrix, &preemphasized_audio_signal,
 8004198:	b29b      	uxth	r3, r3
        frequency, config.frame_length, config.frame_stride, config.num_filters, config.fft_length,
 800419a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    int ret = speechpy::feature::mfe(output_matrix, &energy_matrix, &preemphasized_audio_signal,
 800419c:	b292      	uxth	r2, r2
        config.low_frequency, config.high_frequency, config.implementation_version);
 800419e:	6db9      	ldr	r1, [r7, #88]	; 0x58
    int ret = speechpy::feature::mfe(output_matrix, &energy_matrix, &preemphasized_audio_signal,
 80041a0:	460d      	mov	r5, r1
        config.low_frequency, config.high_frequency, config.implementation_version);
 80041a2:	6df9      	ldr	r1, [r7, #92]	; 0x5c
    int ret = speechpy::feature::mfe(output_matrix, &energy_matrix, &preemphasized_audio_signal,
 80041a4:	460e      	mov	r6, r1
 80041a6:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 80041aa:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 80041ae:	f107 0014 	add.w	r0, r7, #20
 80041b2:	9104      	str	r1, [sp, #16]
 80041b4:	9603      	str	r6, [sp, #12]
 80041b6:	9502      	str	r5, [sp, #8]
 80041b8:	9201      	str	r2, [sp, #4]
 80041ba:	9300      	str	r3, [sp, #0]
 80041bc:	eef0 0a47 	vmov.f32	s1, s14
 80041c0:	eeb0 0a67 	vmov.f32	s0, s15
 80041c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041c6:	4622      	mov	r2, r4
 80041c8:	4601      	mov	r1, r0
 80041ca:	68b8      	ldr	r0, [r7, #8]
 80041cc:	f7ff fd2a 	bl	8003c24 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt>
 80041d0:	66f8      	str	r0, [r7, #108]	; 0x6c
    if (preemphasis) {
 80041d2:	4b2c      	ldr	r3, [pc, #176]	; (8004284 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x27c>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d00a      	beq.n	80041f0 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1e8>
        delete preemphasis;
 80041da:	4b2a      	ldr	r3, [pc, #168]	; (8004284 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x27c>)
 80041dc:	681c      	ldr	r4, [r3, #0]
 80041de:	2c00      	cmp	r4, #0
 80041e0:	d006      	beq.n	80041f0 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1e8>
 80041e2:	4620      	mov	r0, r4
 80041e4:	f7fe fe94 	bl	8002f10 <_ZN2ei8speechpy10processing11preemphasisD1Ev>
 80041e8:	211c      	movs	r1, #28
 80041ea:	4620      	mov	r0, r4
 80041ec:	f02b fae2 	bl	802f7b4 <_ZdlPvj>
    }
    if (ret != EIDSP_OK) {
 80041f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d005      	beq.n	8004202 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1fa>
        ei_printf("ERR: MFE failed (%d)\n", ret);
 80041f6:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80041f8:	4828      	ldr	r0, [pc, #160]	; (800429c <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x294>)
 80041fa:	f001 fb57 	bl	80058ac <_Z9ei_printfPKcz>
        EIDSP_ERR(ret);
 80041fe:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8004200:	e02d      	b.n	800425e <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x256>
    }

    if (config.implementation_version < 3) {
 8004202:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004206:	2b02      	cmp	r3, #2
 8004208:	d810      	bhi.n	800422c <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x224>
        // cepstral mean and variance normalization
        ret = speechpy::processing::cmvnw(output_matrix, config.win_size, false, true);
 800420a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800420c:	b299      	uxth	r1, r3
 800420e:	2301      	movs	r3, #1
 8004210:	2200      	movs	r2, #0
 8004212:	68b8      	ldr	r0, [r7, #8]
 8004214:	f7ff f888 	bl	8003328 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb>
 8004218:	66f8      	str	r0, [r7, #108]	; 0x6c
        if (ret != EIDSP_OK) {
 800421a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800421c:	2b00      	cmp	r3, #0
 800421e:	d014      	beq.n	800424a <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x242>
            ei_printf("ERR: cmvnw failed (%d)\n", ret);
 8004220:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8004222:	481f      	ldr	r0, [pc, #124]	; (80042a0 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x298>)
 8004224:	f001 fb42 	bl	80058ac <_Z9ei_printfPKcz>
            EIDSP_ERR(ret);
 8004228:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 800422a:	e018      	b.n	800425e <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x256>
        }
    }
    else {
        // normalization
        ret = speechpy::processing::mfe_normalization(output_matrix, config.noise_floor_db);
 800422c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800422e:	4619      	mov	r1, r3
 8004230:	68b8      	ldr	r0, [r7, #8]
 8004232:	f7ff f9f9 	bl	8003628 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi>
 8004236:	66f8      	str	r0, [r7, #108]	; 0x6c
        if (ret != EIDSP_OK) {
 8004238:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800423a:	2b00      	cmp	r3, #0
 800423c:	d005      	beq.n	800424a <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x242>
            ei_printf("ERR: normalization failed (%d)\n", ret);
 800423e:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8004240:	4818      	ldr	r0, [pc, #96]	; (80042a4 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x29c>)
 8004242:	f001 fb33 	bl	80058ac <_Z9ei_printfPKcz>
            EIDSP_ERR(ret);
 8004246:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8004248:	e009      	b.n	800425e <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x256>
        }
    }

    output_matrix->cols = out_matrix_size.rows * out_matrix_size.cols;
 800424a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800424e:	fb03 f202 	mul.w	r2, r3, r2
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	609a      	str	r2, [r3, #8]
    output_matrix->rows = 1;
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	2201      	movs	r2, #1
 800425a:	605a      	str	r2, [r3, #4]

    return EIDSP_OK;
 800425c:	2400      	movs	r4, #0
    EI_DSP_MATRIX(energy_matrix, output_matrix->rows, 1);
 800425e:	f107 0314 	add.w	r3, r7, #20
 8004262:	4618      	mov	r0, r3
 8004264:	f7fd fa0d 	bl	8001682 <_ZN2ei9ei_matrixD1Ev>
    signal_t preemphasized_audio_signal;
 8004268:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800426c:	4618      	mov	r0, r3
 800426e:	f7ff feaa 	bl	8003fc6 <_ZN2ei11ei_signal_tD1Ev>
}
 8004272:	4623      	mov	r3, r4
 8004274:	4618      	mov	r0, r3
 8004276:	377c      	adds	r7, #124	; 0x7c
 8004278:	46bd      	mov	sp, r7
 800427a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800427c:	fffffc14 	.word	0xfffffc14
 8004280:	fffffc10 	.word	0xfffffc10
 8004284:	20000808 	.word	0x20000808
 8004288:	3f7ae148 	.word	0x3f7ae148
 800428c:	08003fe1 	.word	0x08003fe1
 8004290:	080336a4 	.word	0x080336a4
 8004294:	080336b8 	.word	0x080336b8
 8004298:	fffffc16 	.word	0xfffffc16
 800429c:	0803389c 	.word	0x0803389c
 80042a0:	080336ec 	.word	0x080336ec
 80042a4:	0803383c 	.word	0x0803383c

080042a8 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf>:

    return EIDSP_OK;
#endif
}

__attribute__((unused)) int extract_image_features(signal_t *signal, matrix_t *output_matrix, void *config_ptr, const float frequency) {
 80042a8:	b5b0      	push	{r4, r5, r7, lr}
 80042aa:	b098      	sub	sp, #96	; 0x60
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	60b9      	str	r1, [r7, #8]
 80042b2:	607a      	str	r2, [r7, #4]
 80042b4:	ed87 0a00 	vstr	s0, [r7]
    ei_dsp_config_image_t config = *((ei_dsp_config_image_t*)config_ptr);
 80042b8:	687a      	ldr	r2, [r7, #4]
 80042ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80042be:	ca07      	ldmia	r2, {r0, r1, r2}
 80042c0:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
 80042c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c6:	4967      	ldr	r1, [pc, #412]	; (8004464 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1bc>)
 80042c8:	4618      	mov	r0, r3
 80042ca:	f7fb ffd1 	bl	8000270 <strcmp>
 80042ce:	4603      	mov	r3, r0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d101      	bne.n	80042d8 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x30>
 80042d4:	2301      	movs	r3, #1
 80042d6:	e000      	b.n	80042da <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x32>
 80042d8:	2303      	movs	r3, #3
 80042da:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    size_t output_ix = 0;
 80042de:	2300      	movs	r3, #0
 80042e0:	65fb      	str	r3, [r7, #92]	; 0x5c

#if defined(EI_DSP_IMAGE_BUFFER_STATIC_SIZE)
    const size_t page_size = EI_DSP_IMAGE_BUFFER_STATIC_SIZE;
#else
    const size_t page_size = 1024;
 80042e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80042e6:	64fb      	str	r3, [r7, #76]	; 0x4c
#endif

    // buffered read from the signal
    size_t bytes_left = signal->total_length;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	691b      	ldr	r3, [r3, #16]
 80042ec:	627b      	str	r3, [r7, #36]	; 0x24
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 80042ee:	2300      	movs	r3, #0
 80042f0:	65bb      	str	r3, [r7, #88]	; 0x58
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	691b      	ldr	r3, [r3, #16]
 80042f6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80042f8:	429a      	cmp	r2, r3
 80042fa:	f080 80ac 	bcs.w	8004456 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1ae>
        size_t elements_to_read = bytes_left > page_size ? page_size : bytes_left;
 80042fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004300:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004304:	d803      	bhi.n	800430e <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x66>
 8004306:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	e001      	b.n	8004312 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x6a>
 800430e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004312:	64bb      	str	r3, [r7, #72]	; 0x48

#if defined(EI_DSP_IMAGE_BUFFER_STATIC_SIZE)
        matrix_t input_matrix(elements_to_read, config.axes, ei_dsp_image_buffer);
#else
        matrix_t input_matrix(elements_to_read, config.axes);
 8004314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004316:	461a      	mov	r2, r3
 8004318:	f107 0014 	add.w	r0, r7, #20
 800431c:	2300      	movs	r3, #0
 800431e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004320:	f7fd f984 	bl	800162c <_ZN2ei9ei_matrixC1EmmPf>
#endif
        if (!input_matrix.buffer) {
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d102      	bne.n	8004330 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x88>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 800432a:	4d4f      	ldr	r5, [pc, #316]	; (8004468 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1c0>)
 800432c:	2400      	movs	r4, #0
 800432e:	e086      	b.n	800443e <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x196>
        }
        signal->get_data(ix, elements_to_read, input_matrix.buffer);
 8004330:	68f8      	ldr	r0, [r7, #12]
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004336:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004338:	f001 fcc2 	bl	8005cc0 <_ZNKSt8functionIFijjPfEEclEjjS0_>

        for (size_t jx = 0; jx < elements_to_read; jx++) {
 800433c:	2300      	movs	r3, #0
 800433e:	657b      	str	r3, [r7, #84]	; 0x54
 8004340:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004342:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004344:	429a      	cmp	r2, r3
 8004346:	d275      	bcs.n	8004434 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x18c>
            uint32_t pixel = static_cast<uint32_t>(input_matrix.buffer[jx]);
 8004348:	697a      	ldr	r2, [r7, #20]
 800434a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800434c:	009b      	lsls	r3, r3, #2
 800434e:	4413      	add	r3, r2
 8004350:	edd3 7a00 	vldr	s15, [r3]
 8004354:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004358:	ee17 3a90 	vmov	r3, s15
 800435c:	647b      	str	r3, [r7, #68]	; 0x44

            // rgb to 0..1
            float r = static_cast<float>(pixel >> 16 & 0xff) / 255.0f;
 800435e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004360:	0c1b      	lsrs	r3, r3, #16
 8004362:	b2db      	uxtb	r3, r3
 8004364:	ee07 3a90 	vmov	s15, r3
 8004368:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800436c:	eddf 6a3f 	vldr	s13, [pc, #252]	; 800446c <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1c4>
 8004370:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004374:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
            float g = static_cast<float>(pixel >> 8 & 0xff) / 255.0f;
 8004378:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800437a:	0a1b      	lsrs	r3, r3, #8
 800437c:	b2db      	uxtb	r3, r3
 800437e:	ee07 3a90 	vmov	s15, r3
 8004382:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004386:	eddf 6a39 	vldr	s13, [pc, #228]	; 800446c <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1c4>
 800438a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800438e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
            float b = static_cast<float>(pixel & 0xff) / 255.0f;
 8004392:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004394:	b2db      	uxtb	r3, r3
 8004396:	ee07 3a90 	vmov	s15, r3
 800439a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800439e:	eddf 6a33 	vldr	s13, [pc, #204]	; 800446c <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1c4>
 80043a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80043a6:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

            if (channel_count == 3) {
 80043aa:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80043ae:	2b03      	cmp	r3, #3
 80043b0:	d11b      	bne.n	80043ea <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x142>
                output_matrix->buffer[output_ix++] = r;
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043b8:	1c59      	adds	r1, r3, #1
 80043ba:	65f9      	str	r1, [r7, #92]	; 0x5c
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	4413      	add	r3, r2
 80043c0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80043c2:	601a      	str	r2, [r3, #0]
                output_matrix->buffer[output_ix++] = g;
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043ca:	1c59      	adds	r1, r3, #1
 80043cc:	65f9      	str	r1, [r7, #92]	; 0x5c
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	4413      	add	r3, r2
 80043d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80043d4:	601a      	str	r2, [r3, #0]
                output_matrix->buffer[output_ix++] = b;
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043dc:	1c59      	adds	r1, r3, #1
 80043de:	65f9      	str	r1, [r7, #92]	; 0x5c
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	4413      	add	r3, r2
 80043e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80043e6:	601a      	str	r2, [r3, #0]
 80043e8:	e020      	b.n	800442c <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x184>
            }
            else {
                // ITU-R 601-2 luma transform
                // see: https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.convert
                float v = (0.299f * r) + (0.587f * g) + (0.114f * b);
 80043ea:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80043ee:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8004470 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1c8>
 80043f2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80043f6:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80043fa:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8004474 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1cc>
 80043fe:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004402:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004406:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800440a:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8004478 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1d0>
 800440e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004412:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004416:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
                output_matrix->buffer[output_ix++] = v;
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004420:	1c59      	adds	r1, r3, #1
 8004422:	65f9      	str	r1, [r7, #92]	; 0x5c
 8004424:	009b      	lsls	r3, r3, #2
 8004426:	4413      	add	r3, r2
 8004428:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800442a:	601a      	str	r2, [r3, #0]
        for (size_t jx = 0; jx < elements_to_read; jx++) {
 800442c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800442e:	3301      	adds	r3, #1
 8004430:	657b      	str	r3, [r7, #84]	; 0x54
 8004432:	e785      	b.n	8004340 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x98>
            }
        }

        bytes_left -= elements_to_read;
 8004434:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004436:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	627b      	str	r3, [r7, #36]	; 0x24
 800443c:	2401      	movs	r4, #1
 800443e:	f107 0314 	add.w	r3, r7, #20
 8004442:	4618      	mov	r0, r3
 8004444:	f7fd f91d 	bl	8001682 <_ZN2ei9ei_matrixD1Ev>
 8004448:	2c01      	cmp	r4, #1
 800444a:	d105      	bne.n	8004458 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1b0>
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 800444c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800444e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004452:	65bb      	str	r3, [r7, #88]	; 0x58
 8004454:	e74d      	b.n	80042f2 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x4a>
    }

    return EIDSP_OK;
 8004456:	2500      	movs	r5, #0
}
 8004458:	462b      	mov	r3, r5
 800445a:	4618      	mov	r0, r3
 800445c:	3760      	adds	r7, #96	; 0x60
 800445e:	46bd      	mov	sp, r7
 8004460:	bdb0      	pop	{r4, r5, r7, pc}
 8004462:	bf00      	nop
 8004464:	080338b4 	.word	0x080338b4
 8004468:	fffffc16 	.word	0xfffffc16
 800446c:	437f0000 	.word	0x437f0000
 8004470:	3e991687 	.word	0x3e991687
 8004474:	3f1645a2 	.word	0x3f1645a2
 8004478:	3de978d5 	.word	0x3de978d5

0800447c <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf>:

#endif //(EI_CLASSIFIER_TFLITE_INPUT_QUANTIZED == 1) && (EI_CLASSIFIER_INFERENCING_ENGINE == EI_CLASSIFIER_DRPAI)

#if (EI_CLASSIFIER_TFLITE_INPUT_QUANTIZED == 1) && (EI_CLASSIFIER_INFERENCING_ENGINE != EI_CLASSIFIER_DRPAI)

__attribute__((unused)) int extract_image_features_quantized(const ei_impulse_t *impulse, signal_t *signal, matrix_i8_t *output_matrix, void *config_ptr, const float frequency) {
 800447c:	b5b0      	push	{r4, r5, r7, lr}
 800447e:	b0a6      	sub	sp, #152	; 0x98
 8004480:	af00      	add	r7, sp, #0
 8004482:	6178      	str	r0, [r7, #20]
 8004484:	6139      	str	r1, [r7, #16]
 8004486:	60fa      	str	r2, [r7, #12]
 8004488:	60bb      	str	r3, [r7, #8]
 800448a:	ed87 0a01 	vstr	s0, [r7, #4]
    ei_dsp_config_image_t config = *((ei_dsp_config_image_t*)config_ptr);
 800448e:	68ba      	ldr	r2, [r7, #8]
 8004490:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004494:	ca07      	ldmia	r2, {r0, r1, r2}
 8004496:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
 800449a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800449c:	49ab      	ldr	r1, [pc, #684]	; (800474c <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2d0>)
 800449e:	4618      	mov	r0, r3
 80044a0:	f7fb fee6 	bl	8000270 <strcmp>
 80044a4:	4603      	mov	r3, r0
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d101      	bne.n	80044ae <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x32>
 80044aa:	2301      	movs	r3, #1
 80044ac:	e000      	b.n	80044b0 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x34>
 80044ae:	2303      	movs	r3, #3
 80044b0:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    size_t output_ix = 0;
 80044b4:	2300      	movs	r3, #0
 80044b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    const int32_t iRedToGray = (int32_t)(0.299f * 65536.0f);
 80044ba:	f644 438b 	movw	r3, #19595	; 0x4c8b
 80044be:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    const int32_t iGreenToGray = (int32_t)(0.587f * 65536.0f);
 80044c2:	f249 6345 	movw	r3, #38469	; 0x9645
 80044c6:	67fb      	str	r3, [r7, #124]	; 0x7c
    const int32_t iBlueToGray = (int32_t)(0.114f * 65536.0f);
 80044c8:	f641 532f 	movw	r3, #7471	; 0x1d2f
 80044cc:	67bb      	str	r3, [r7, #120]	; 0x78

#if defined(EI_DSP_IMAGE_BUFFER_STATIC_SIZE)
    const size_t page_size = EI_DSP_IMAGE_BUFFER_STATIC_SIZE;
#else
    const size_t page_size = 1024;
 80044ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80044d2:	677b      	str	r3, [r7, #116]	; 0x74
#endif

    // buffered read from the signal
    size_t bytes_left = signal->total_length;
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	691b      	ldr	r3, [r3, #16]
 80044d8:	62bb      	str	r3, [r7, #40]	; 0x28
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 80044da:	2300      	movs	r3, #0
 80044dc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	691b      	ldr	r3, [r3, #16]
 80044e4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80044e8:	429a      	cmp	r2, r3
 80044ea:	f080 821d 	bcs.w	8004928 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x4ac>
        size_t elements_to_read = bytes_left > page_size ? page_size : bytes_left;
 80044ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044f4:	d803      	bhi.n	80044fe <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x82>
 80044f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	e001      	b.n	8004502 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x86>
 80044fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004502:	673b      	str	r3, [r7, #112]	; 0x70

#if defined(EI_DSP_IMAGE_BUFFER_STATIC_SIZE)
        matrix_t input_matrix(elements_to_read, config.axes, ei_dsp_image_buffer);
#else
        matrix_t input_matrix(elements_to_read, config.axes);
 8004504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004506:	461a      	mov	r2, r3
 8004508:	f107 0018 	add.w	r0, r7, #24
 800450c:	2300      	movs	r3, #0
 800450e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8004510:	f7fd f88c 	bl	800162c <_ZN2ei9ei_matrixC1EmmPf>
#endif
        if (!input_matrix.buffer) {
 8004514:	69bb      	ldr	r3, [r7, #24]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d102      	bne.n	8004520 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0xa4>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 800451a:	4d8d      	ldr	r5, [pc, #564]	; (8004750 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2d4>)
 800451c:	2400      	movs	r4, #0
 800451e:	e1f5      	b.n	800490c <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x490>
        }
        signal->get_data(ix, elements_to_read, input_matrix.buffer);
 8004520:	6938      	ldr	r0, [r7, #16]
 8004522:	69bb      	ldr	r3, [r7, #24]
 8004524:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004526:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800452a:	f001 fbc9 	bl	8005cc0 <_ZNKSt8functionIFijjPfEEclEjjS0_>

        for (size_t jx = 0; jx < elements_to_read; jx++) {
 800452e:	2300      	movs	r3, #0
 8004530:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004534:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8004538:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800453a:	429a      	cmp	r2, r3
 800453c:	f080 81e1 	bcs.w	8004902 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x486>
            uint32_t pixel = static_cast<uint32_t>(input_matrix.buffer[jx]);
 8004540:	69ba      	ldr	r2, [r7, #24]
 8004542:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	4413      	add	r3, r2
 800454a:	edd3 7a00 	vldr	s15, [r3]
 800454e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004552:	ee17 3a90 	vmov	r3, s15
 8004556:	66fb      	str	r3, [r7, #108]	; 0x6c

            if (channel_count == 3) {
 8004558:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 800455c:	2b03      	cmp	r3, #3
 800455e:	f040 8105 	bne.w	800476c <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2f0>
                // fast code path
                if (impulse->tflite_input_scale == 0.003921568859368563f && impulse->tflite_input_zeropoint == -128) {
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8004568:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8004754 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2d8>
 800456c:	eef4 7a47 	vcmp.f32	s15, s14
 8004570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004574:	d160      	bne.n	8004638 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x1bc>
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 800457c:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8004758 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2dc>
 8004580:	eef4 7a47 	vcmp.f32	s15, s14
 8004584:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004588:	d156      	bne.n	8004638 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x1bc>
                    int32_t r = static_cast<int32_t>(pixel >> 16 & 0xff);
 800458a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800458c:	0c1b      	lsrs	r3, r3, #16
 800458e:	b2db      	uxtb	r3, r3
 8004590:	64fb      	str	r3, [r7, #76]	; 0x4c
                    int32_t g = static_cast<int32_t>(pixel >> 8 & 0xff);
 8004592:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004594:	0a1b      	lsrs	r3, r3, #8
 8004596:	b2db      	uxtb	r3, r3
 8004598:	64bb      	str	r3, [r7, #72]	; 0x48
                    int32_t b = static_cast<int32_t>(pixel & 0xff);
 800459a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800459c:	b2db      	uxtb	r3, r3
 800459e:	647b      	str	r3, [r7, #68]	; 0x44

                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(r + impulse->tflite_input_zeropoint);
 80045a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045a2:	ee07 3a90 	vmov	s15, r3
 80045a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 80045b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80045bc:	1c59      	adds	r1, r3, #1
 80045be:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 80045c2:	4413      	add	r3, r2
 80045c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80045c8:	edc7 7a00 	vstr	s15, [r7]
 80045cc:	783a      	ldrb	r2, [r7, #0]
 80045ce:	b252      	sxtb	r2, r2
 80045d0:	701a      	strb	r2, [r3, #0]
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(g + impulse->tflite_input_zeropoint);
 80045d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045d4:	ee07 3a90 	vmov	s15, r3
 80045d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 80045e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80045ee:	1c59      	adds	r1, r3, #1
 80045f0:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 80045f4:	4413      	add	r3, r2
 80045f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80045fa:	edc7 7a00 	vstr	s15, [r7]
 80045fe:	783a      	ldrb	r2, [r7, #0]
 8004600:	b252      	sxtb	r2, r2
 8004602:	701a      	strb	r2, [r3, #0]
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(b + impulse->tflite_input_zeropoint);
 8004604:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004606:	ee07 3a90 	vmov	s15, r3
 800460a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8004614:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004620:	1c59      	adds	r1, r3, #1
 8004622:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8004626:	4413      	add	r3, r2
 8004628:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800462c:	edc7 7a00 	vstr	s15, [r7]
 8004630:	783a      	ldrb	r2, [r7, #0]
 8004632:	b252      	sxtb	r2, r2
 8004634:	701a      	strb	r2, [r3, #0]
 8004636:	e15e      	b.n	80048f6 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x47a>
                }
                // slow code path
                else {
                    float r = static_cast<float>(pixel >> 16 & 0xff) / 255.0f;
 8004638:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800463a:	0c1b      	lsrs	r3, r3, #16
 800463c:	b2db      	uxtb	r3, r3
 800463e:	ee07 3a90 	vmov	s15, r3
 8004642:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004646:	eddf 6a45 	vldr	s13, [pc, #276]	; 800475c <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2e0>
 800464a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800464e:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
                    float g = static_cast<float>(pixel >> 8 & 0xff) / 255.0f;
 8004652:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004654:	0a1b      	lsrs	r3, r3, #8
 8004656:	b2db      	uxtb	r3, r3
 8004658:	ee07 3a90 	vmov	s15, r3
 800465c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004660:	eddf 6a3e 	vldr	s13, [pc, #248]	; 800475c <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2e0>
 8004664:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004668:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
                    float b = static_cast<float>(pixel & 0xff) / 255.0f;
 800466c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800466e:	b2db      	uxtb	r3, r3
 8004670:	ee07 3a90 	vmov	s15, r3
 8004674:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004678:	eddf 6a38 	vldr	s13, [pc, #224]	; 800475c <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2e0>
 800467c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004680:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(r / impulse->tflite_input_scale) + impulse->tflite_input_zeropoint);
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 800468a:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800468e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004692:	eeb0 0a66 	vmov.f32	s0, s13
 8004696:	f7fd f8c0 	bl	800181a <_ZSt5roundf>
 800469a:	eeb0 7a40 	vmov.f32	s14, s0
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 80046a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80046b0:	1c59      	adds	r1, r3, #1
 80046b2:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 80046b6:	4413      	add	r3, r2
 80046b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80046bc:	edc7 7a00 	vstr	s15, [r7]
 80046c0:	783a      	ldrb	r2, [r7, #0]
 80046c2:	b252      	sxtb	r2, r2
 80046c4:	701a      	strb	r2, [r3, #0]
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(g / impulse->tflite_input_scale) + impulse->tflite_input_zeropoint);
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80046cc:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80046d0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80046d4:	eeb0 0a66 	vmov.f32	s0, s13
 80046d8:	f7fd f89f 	bl	800181a <_ZSt5roundf>
 80046dc:	eeb0 7a40 	vmov.f32	s14, s0
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 80046e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80046f2:	1c59      	adds	r1, r3, #1
 80046f4:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 80046f8:	4413      	add	r3, r2
 80046fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80046fe:	edc7 7a00 	vstr	s15, [r7]
 8004702:	783a      	ldrb	r2, [r7, #0]
 8004704:	b252      	sxtb	r2, r2
 8004706:	701a      	strb	r2, [r3, #0]
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(b / impulse->tflite_input_scale) + impulse->tflite_input_zeropoint);
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 800470e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8004712:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004716:	eeb0 0a66 	vmov.f32	s0, s13
 800471a:	f7fd f87e 	bl	800181a <_ZSt5roundf>
 800471e:	eeb0 7a40 	vmov.f32	s14, s0
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8004728:	ee77 7a27 	vadd.f32	s15, s14, s15
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004734:	1c59      	adds	r1, r3, #1
 8004736:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 800473a:	4413      	add	r3, r2
 800473c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004740:	edc7 7a00 	vstr	s15, [r7]
 8004744:	783a      	ldrb	r2, [r7, #0]
 8004746:	b252      	sxtb	r2, r2
 8004748:	701a      	strb	r2, [r3, #0]
 800474a:	e0d4      	b.n	80048f6 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x47a>
 800474c:	080338b4 	.word	0x080338b4
 8004750:	fffffc16 	.word	0xfffffc16
 8004754:	3b808081 	.word	0x3b808081
 8004758:	c3000000 	.word	0xc3000000
 800475c:	437f0000 	.word	0x437f0000
 8004760:	3e991687 	.word	0x3e991687
 8004764:	3f1645a2 	.word	0x3f1645a2
 8004768:	3de978d5 	.word	0x3de978d5
                }
            }
            else {
                // fast code path
                if (impulse->tflite_input_scale == 0.003921568859368563f && impulse->tflite_input_zeropoint == -128) {
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8004772:	ed1f 7a08 	vldr	s14, [pc, #-32]	; 8004754 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2d8>
 8004776:	eef4 7a47 	vcmp.f32	s15, s14
 800477a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800477e:	d15b      	bne.n	8004838 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x3bc>
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8004786:	ed1f 7a0c 	vldr	s14, [pc, #-48]	; 8004758 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2dc>
 800478a:	eef4 7a47 	vcmp.f32	s15, s14
 800478e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004792:	d151      	bne.n	8004838 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x3bc>
                    int32_t r = static_cast<int32_t>(pixel >> 16 & 0xff);
 8004794:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004796:	0c1b      	lsrs	r3, r3, #16
 8004798:	b2db      	uxtb	r3, r3
 800479a:	66bb      	str	r3, [r7, #104]	; 0x68
                    int32_t g = static_cast<int32_t>(pixel >> 8 & 0xff);
 800479c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800479e:	0a1b      	lsrs	r3, r3, #8
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	667b      	str	r3, [r7, #100]	; 0x64
                    int32_t b = static_cast<int32_t>(pixel & 0xff);
 80047a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	663b      	str	r3, [r7, #96]	; 0x60

                    // ITU-R 601-2 luma transform
                    // see: https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.convert
                    int32_t gray = (iRedToGray * r) + (iGreenToGray * g) + (iBlueToGray * b);
 80047aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80047ac:	f644 428b 	movw	r2, #19595	; 0x4c8b
 80047b0:	fb03 f202 	mul.w	r2, r3, r2
 80047b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80047b6:	f249 6145 	movw	r1, #38469	; 0x9645
 80047ba:	fb01 f303 	mul.w	r3, r1, r3
 80047be:	441a      	add	r2, r3
 80047c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047c2:	f641 512f 	movw	r1, #7471	; 0x1d2f
 80047c6:	fb01 f303 	mul.w	r3, r1, r3
 80047ca:	4413      	add	r3, r2
 80047cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                    gray >>= 16; // scale down to int8_t
 80047d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80047d4:	141b      	asrs	r3, r3, #16
 80047d6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                    gray += impulse->tflite_input_zeropoint;
 80047da:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80047de:	ee07 3a90 	vmov	s15, r3
 80047e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 80047ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80047f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80047f4:	ee17 3a90 	vmov	r3, s15
 80047f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                    if (gray < - 128) gray = -128;
 80047fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004800:	f113 0f80 	cmn.w	r3, #128	; 0x80
 8004804:	da04      	bge.n	8004810 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x394>
 8004806:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 800480a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800480e:	e006      	b.n	800481e <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x3a2>
                    else if (gray > 127) gray = 127;
 8004810:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004814:	2b7f      	cmp	r3, #127	; 0x7f
 8004816:	dd02      	ble.n	800481e <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x3a2>
 8004818:	237f      	movs	r3, #127	; 0x7f
 800481a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(gray);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004826:	1c59      	adds	r1, r3, #1
 8004828:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 800482c:	4413      	add	r3, r2
 800482e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8004832:	b252      	sxtb	r2, r2
 8004834:	701a      	strb	r2, [r3, #0]
 8004836:	e05e      	b.n	80048f6 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x47a>
                }
                // slow code path
                else {
                    float r = static_cast<float>(pixel >> 16 & 0xff) / 255.0f;
 8004838:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800483a:	0c1b      	lsrs	r3, r3, #16
 800483c:	b2db      	uxtb	r3, r3
 800483e:	ee07 3a90 	vmov	s15, r3
 8004842:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004846:	ed5f 6a3b 	vldr	s13, [pc, #-236]	; 800475c <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2e0>
 800484a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800484e:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
                    float g = static_cast<float>(pixel >> 8 & 0xff) / 255.0f;
 8004852:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004854:	0a1b      	lsrs	r3, r3, #8
 8004856:	b2db      	uxtb	r3, r3
 8004858:	ee07 3a90 	vmov	s15, r3
 800485c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004860:	ed5f 6a42 	vldr	s13, [pc, #-264]	; 800475c <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2e0>
 8004864:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004868:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
                    float b = static_cast<float>(pixel & 0xff) / 255.0f;
 800486c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800486e:	b2db      	uxtb	r3, r3
 8004870:	ee07 3a90 	vmov	s15, r3
 8004874:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004878:	ed5f 6a48 	vldr	s13, [pc, #-288]	; 800475c <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2e0>
 800487c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004880:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

                    // ITU-R 601-2 luma transform
                    // see: https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.convert
                    float v = (0.299f * r) + (0.587f * g) + (0.114f * b);
 8004884:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8004888:	ed1f 7a4b 	vldr	s14, [pc, #-300]	; 8004760 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2e4>
 800488c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004890:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8004894:	ed5f 6a4d 	vldr	s13, [pc, #-308]	; 8004764 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2e8>
 8004898:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800489c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80048a0:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80048a4:	ed5f 6a50 	vldr	s13, [pc, #-320]	; 8004768 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2ec>
 80048a8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80048ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80048b0:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(v / impulse->tflite_input_scale) + impulse->tflite_input_zeropoint);
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80048ba:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80048be:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80048c2:	eeb0 0a66 	vmov.f32	s0, s13
 80048c6:	f7fc ffa8 	bl	800181a <_ZSt5roundf>
 80048ca:	eeb0 7a40 	vmov.f32	s14, s0
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 80048d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80048e0:	1c59      	adds	r1, r3, #1
 80048e2:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 80048e6:	4413      	add	r3, r2
 80048e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80048ec:	edc7 7a00 	vstr	s15, [r7]
 80048f0:	783a      	ldrb	r2, [r7, #0]
 80048f2:	b252      	sxtb	r2, r2
 80048f4:	701a      	strb	r2, [r3, #0]
        for (size_t jx = 0; jx < elements_to_read; jx++) {
 80048f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80048fa:	3301      	adds	r3, #1
 80048fc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004900:	e618      	b.n	8004534 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0xb8>
                }
            }
        }

        bytes_left -= elements_to_read;
 8004902:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004904:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004906:	1ad3      	subs	r3, r2, r3
 8004908:	62bb      	str	r3, [r7, #40]	; 0x28
 800490a:	2401      	movs	r4, #1
 800490c:	f107 0318 	add.w	r3, r7, #24
 8004910:	4618      	mov	r0, r3
 8004912:	f7fc feb6 	bl	8001682 <_ZN2ei9ei_matrixD1Ev>
 8004916:	2c01      	cmp	r4, #1
 8004918:	d107      	bne.n	800492a <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x4ae>
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 800491a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800491e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004922:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004926:	e5db      	b.n	80044e0 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x64>
    }

    return EIDSP_OK;
 8004928:	2500      	movs	r5, #0
}
 800492a:	462b      	mov	r3, r5
 800492c:	4618      	mov	r0, r3
 800492e:	3798      	adds	r7, #152	; 0x98
 8004930:	46bd      	mov	sp, r7
 8004932:	bdb0      	pop	{r4, r5, r7, pc}

08004934 <_ZN14SignalWithAxesC1EPN2ei11ei_signal_tEPhjPK10ei_impulse>:

using namespace ei;

class SignalWithAxes {
public:
    SignalWithAxes(signal_t *original_signal, uint8_t *axes, size_t axes_count, const ei_impulse_t *impulse):
 8004934:	b580      	push	{r7, lr}
 8004936:	b084      	sub	sp, #16
 8004938:	af00      	add	r7, sp, #0
 800493a:	60f8      	str	r0, [r7, #12]
 800493c:	60b9      	str	r1, [r7, #8]
 800493e:	607a      	str	r2, [r7, #4]
 8004940:	603b      	str	r3, [r7, #0]
        _original_signal(original_signal), _axes(axes), _axes_count(axes_count), _impulse(impulse)
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	68ba      	ldr	r2, [r7, #8]
 8004946:	601a      	str	r2, [r3, #0]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	605a      	str	r2, [r3, #4]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	683a      	ldr	r2, [r7, #0]
 8004952:	609a      	str	r2, [r3, #8]
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	69ba      	ldr	r2, [r7, #24]
 8004958:	60da      	str	r2, [r3, #12]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	3310      	adds	r3, #16
 800495e:	4618      	mov	r0, r3
 8004960:	f7ff fb24 	bl	8003fac <_ZN2ei11ei_signal_tC1Ev>
    {

    }
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	4618      	mov	r0, r3
 8004968:	3710      	adds	r7, #16
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}

0800496e <_ZZN14SignalWithAxes10get_signalEvENKUljjPfE_clEjjS0_>:

        wrapped_signal.total_length = _original_signal->total_length / _impulse->raw_samples_per_frame * _axes_count;
#ifdef __MBED__
        wrapped_signal.get_data = mbed::callback(this, &SignalWithAxes::get_data);
#else
        wrapped_signal.get_data = [this](size_t offset, size_t length, float *out_ptr) {
 800496e:	b580      	push	{r7, lr}
 8004970:	b084      	sub	sp, #16
 8004972:	af00      	add	r7, sp, #0
 8004974:	60f8      	str	r0, [r7, #12]
 8004976:	60b9      	str	r1, [r7, #8]
 8004978:	607a      	str	r2, [r7, #4]
 800497a:	603b      	str	r3, [r7, #0]
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	6818      	ldr	r0, [r3, #0]
            return this->get_data(offset, length, out_ptr);
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	68b9      	ldr	r1, [r7, #8]
 8004986:	f000 f832 	bl	80049ee <_ZN14SignalWithAxes8get_dataEjjPf>
 800498a:	4603      	mov	r3, r0
        };
 800498c:	4618      	mov	r0, r3
 800498e:	3710      	adds	r7, #16
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}

08004994 <_ZN14SignalWithAxes10get_signalEv>:
    signal_t * get_signal() {
 8004994:	b580      	push	{r7, lr}
 8004996:	b084      	sub	sp, #16
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
        if (this->_axes_count == _impulse->raw_samples_per_frame) {
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	689a      	ldr	r2, [r3, #8]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	699b      	ldr	r3, [r3, #24]
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d102      	bne.n	80049b0 <_ZN14SignalWithAxes10get_signalEv+0x1c>
            return this->_original_signal;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	e01a      	b.n	80049e6 <_ZN14SignalWithAxes10get_signalEv+0x52>
        wrapped_signal.total_length = _original_signal->total_length / _impulse->raw_samples_per_frame * _axes_count;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	691a      	ldr	r2, [r3, #16]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	68db      	ldr	r3, [r3, #12]
 80049ba:	699b      	ldr	r3, [r3, #24]
 80049bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	6892      	ldr	r2, [r2, #8]
 80049c4:	fb03 f202 	mul.w	r2, r3, r2
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	621a      	str	r2, [r3, #32]
        };
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	f103 0210 	add.w	r2, r3, #16
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	60fb      	str	r3, [r7, #12]
 80049d6:	f107 030c 	add.w	r3, r7, #12
 80049da:	4619      	mov	r1, r3
 80049dc:	4610      	mov	r0, r2
 80049de:	f001 fa86 	bl	8005eee <_ZNSt8functionIFijjPfEEaSIZN14SignalWithAxes10get_signalEvEUljjS0_E_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JjjS0_EEEE5valueERS2_E4typeEOS9_>
#endif
        return &wrapped_signal;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	3310      	adds	r3, #16
    }
 80049e6:	4618      	mov	r0, r3
 80049e8:	3710      	adds	r7, #16
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}

080049ee <_ZN14SignalWithAxes8get_dataEjjPf>:

    int get_data(size_t offset, size_t length, float *out_ptr) {
 80049ee:	b580      	push	{r7, lr}
 80049f0:	b08a      	sub	sp, #40	; 0x28
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	60f8      	str	r0, [r7, #12]
 80049f6:	60b9      	str	r1, [r7, #8]
 80049f8:	607a      	str	r2, [r7, #4]
 80049fa:	603b      	str	r3, [r7, #0]
        size_t offset_on_original_signal = offset / _axes_count * _impulse->raw_samples_per_frame;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	68ba      	ldr	r2, [r7, #8]
 8004a02:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a06:	68fa      	ldr	r2, [r7, #12]
 8004a08:	68d2      	ldr	r2, [r2, #12]
 8004a0a:	6992      	ldr	r2, [r2, #24]
 8004a0c:	fb02 f303 	mul.w	r3, r2, r3
 8004a10:	61bb      	str	r3, [r7, #24]
        size_t length_on_original_signal = length / _axes_count * _impulse->raw_samples_per_frame;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a1c:	68fa      	ldr	r2, [r7, #12]
 8004a1e:	68d2      	ldr	r2, [r2, #12]
 8004a20:	6992      	ldr	r2, [r2, #24]
 8004a22:	fb02 f303 	mul.w	r3, r2, r3
 8004a26:	617b      	str	r3, [r7, #20]

        size_t out_ptr_ix = 0;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	627b      	str	r3, [r7, #36]	; 0x24

        for (size_t ix = offset_on_original_signal; ix < offset_on_original_signal + length_on_original_signal; ix += _impulse->raw_samples_per_frame) {
 8004a2c:	69bb      	ldr	r3, [r7, #24]
 8004a2e:	623b      	str	r3, [r7, #32]
 8004a30:	69ba      	ldr	r2, [r7, #24]
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	4413      	add	r3, r2
 8004a36:	6a3a      	ldr	r2, [r7, #32]
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d22b      	bcs.n	8004a94 <_ZN14SignalWithAxes8get_dataEjjPf+0xa6>
            for (size_t axis_ix = 0; axis_ix < this->_axes_count; axis_ix++) {
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	61fb      	str	r3, [r7, #28]
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	69fa      	ldr	r2, [r7, #28]
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d21d      	bcs.n	8004a86 <_ZN14SignalWithAxes8get_dataEjjPf+0x98>
                int r = _original_signal->get_data(ix + _axes[axis_ix], 1, &out_ptr[out_ptr_ix++]);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4618      	mov	r0, r3
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	685a      	ldr	r2, [r3, #4]
 8004a54:	69fb      	ldr	r3, [r7, #28]
 8004a56:	4413      	add	r3, r2
 8004a58:	781b      	ldrb	r3, [r3, #0]
 8004a5a:	461a      	mov	r2, r3
 8004a5c:	6a3b      	ldr	r3, [r7, #32]
 8004a5e:	18d1      	adds	r1, r2, r3
 8004a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a62:	1c5a      	adds	r2, r3, #1
 8004a64:	627a      	str	r2, [r7, #36]	; 0x24
 8004a66:	009b      	lsls	r3, r3, #2
 8004a68:	683a      	ldr	r2, [r7, #0]
 8004a6a:	4413      	add	r3, r2
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	f001 f927 	bl	8005cc0 <_ZNKSt8functionIFijjPfEEclEjjS0_>
 8004a72:	6138      	str	r0, [r7, #16]
                if (r != 0) {
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d001      	beq.n	8004a7e <_ZN14SignalWithAxes8get_dataEjjPf+0x90>
                    return r;
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	e00b      	b.n	8004a96 <_ZN14SignalWithAxes8get_dataEjjPf+0xa8>
            for (size_t axis_ix = 0; axis_ix < this->_axes_count; axis_ix++) {
 8004a7e:	69fb      	ldr	r3, [r7, #28]
 8004a80:	3301      	adds	r3, #1
 8004a82:	61fb      	str	r3, [r7, #28]
 8004a84:	e7dc      	b.n	8004a40 <_ZN14SignalWithAxes8get_dataEjjPf+0x52>
        for (size_t ix = offset_on_original_signal; ix < offset_on_original_signal + length_on_original_signal; ix += _impulse->raw_samples_per_frame) {
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	699b      	ldr	r3, [r3, #24]
 8004a8c:	6a3a      	ldr	r2, [r7, #32]
 8004a8e:	4413      	add	r3, r2
 8004a90:	623b      	str	r3, [r7, #32]
 8004a92:	e7cd      	b.n	8004a30 <_ZN14SignalWithAxes8get_dataEjjPf+0x42>
                }
            }
        }

        return 0;
 8004a94:	2300      	movs	r3, #0
    }
 8004a96:	4618      	mov	r0, r3
 8004a98:	3728      	adds	r7, #40	; 0x28
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}

08004a9e <_ZL27fill_result_struct_f32_fomoPK10ei_impulseP19ei_impulse_result_tPfii>:

__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_f32_fomo(const ei_impulse_t *impulse,
                                                                            ei_impulse_result_t *result,
                                                                            float *data,
                                                                            int out_width,
                                                                            int out_height) {
 8004a9e:	b480      	push	{r7}
 8004aa0:	b085      	sub	sp, #20
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	60f8      	str	r0, [r7, #12]
 8004aa6:	60b9      	str	r1, [r7, #8]
 8004aa8:	607a      	str	r2, [r7, #4]
 8004aaa:	603b      	str	r3, [r7, #0]

    fill_result_struct_from_cubes(result, &cubes, out_width_factor, impulse->object_detection_count);

    return EI_IMPULSE_OK;
#else
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 8004aac:	f06f 0314 	mvn.w	r3, #20
#endif
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3714      	adds	r7, #20
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr

08004abc <_ZL26fill_result_struct_i8_fomoPK10ei_impulseP19ei_impulse_result_tPaffii>:
                                                                           ei_impulse_result_t *result,
                                                                           int8_t *data,
                                                                           float zero_point,
                                                                           float scale,
                                                                           int out_width,
                                                                           int out_height) {
 8004abc:	b480      	push	{r7}
 8004abe:	b087      	sub	sp, #28
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6178      	str	r0, [r7, #20]
 8004ac4:	6139      	str	r1, [r7, #16]
 8004ac6:	60fa      	str	r2, [r7, #12]
 8004ac8:	ed87 0a02 	vstr	s0, [r7, #8]
 8004acc:	edc7 0a01 	vstr	s1, [r7, #4]
 8004ad0:	603b      	str	r3, [r7, #0]

    fill_result_struct_from_cubes(result, &cubes, out_width_factor, impulse->object_detection_count);

    return EI_IMPULSE_OK;
#else
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 8004ad2:	f06f 0314 	mvn.w	r3, #20
#endif
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	371c      	adds	r7, #28
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr
	...

08004ae4 <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb>:
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_i8(const ei_impulse_t *impulse,
                                                                      ei_impulse_result_t *result,
                                                                      int8_t *data,
                                                                      float zero_point,
                                                                      float scale,
                                                                      bool debug) {
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b088      	sub	sp, #32
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6178      	str	r0, [r7, #20]
 8004aec:	6139      	str	r1, [r7, #16]
 8004aee:	60fa      	str	r2, [r7, #12]
 8004af0:	ed87 0a02 	vstr	s0, [r7, #8]
 8004af4:	edc7 0a01 	vstr	s1, [r7, #4]
 8004af8:	70fb      	strb	r3, [r7, #3]
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
 8004afa:	2300      	movs	r3, #0
 8004afc:	61fb      	str	r3, [r7, #28]
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8004b02:	461a      	mov	r2, r3
 8004b04:	69fb      	ldr	r3, [r7, #28]
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d23f      	bcs.n	8004b8a <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb+0xa6>
        float value = static_cast<float>(data[ix] - zero_point) * scale;
 8004b0a:	68fa      	ldr	r2, [r7, #12]
 8004b0c:	69fb      	ldr	r3, [r7, #28]
 8004b0e:	4413      	add	r3, r2
 8004b10:	f993 3000 	ldrsb.w	r3, [r3]
 8004b14:	ee07 3a90 	vmov	s15, r3
 8004b18:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004b1c:	edd7 7a02 	vldr	s15, [r7, #8]
 8004b20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b24:	ed97 7a01 	vldr	s14, [r7, #4]
 8004b28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b2c:	edc7 7a06 	vstr	s15, [r7, #24]

        if (debug) {
 8004b30:	78fb      	ldrb	r3, [r7, #3]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d011      	beq.n	8004b5a <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb+0x76>
            ei_printf("%s:\t", impulse->categories[ix]);
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8004b3c:	69fb      	ldr	r3, [r7, #28]
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	4413      	add	r3, r2
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4619      	mov	r1, r3
 8004b46:	4813      	ldr	r0, [pc, #76]	; (8004b94 <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb+0xb0>)
 8004b48:	f000 feb0 	bl	80058ac <_Z9ei_printfPKcz>
            ei_printf_float(value);
 8004b4c:	ed97 0a06 	vldr	s0, [r7, #24]
 8004b50:	f022 fdb6 	bl	80276c0 <_Z15ei_printf_floatf>
            ei_printf("\n");
 8004b54:	4810      	ldr	r0, [pc, #64]	; (8004b98 <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb+0xb4>)
 8004b56:	f000 fea9 	bl	80058ac <_Z9ei_printfPKcz>
        }
        result->classification[ix].label = impulse->categories[ix];
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8004b60:	69fb      	ldr	r3, [r7, #28]
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	4413      	add	r3, r2
 8004b66:	6819      	ldr	r1, [r3, #0]
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	69fa      	ldr	r2, [r7, #28]
 8004b6c:	3201      	adds	r2, #1
 8004b6e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
        result->classification[ix].value = value;
 8004b72:	693a      	ldr	r2, [r7, #16]
 8004b74:	69fb      	ldr	r3, [r7, #28]
 8004b76:	3301      	adds	r3, #1
 8004b78:	00db      	lsls	r3, r3, #3
 8004b7a:	4413      	add	r3, r2
 8004b7c:	3304      	adds	r3, #4
 8004b7e:	69ba      	ldr	r2, [r7, #24]
 8004b80:	601a      	str	r2, [r3, #0]
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
 8004b82:	69fb      	ldr	r3, [r7, #28]
 8004b84:	3301      	adds	r3, #1
 8004b86:	61fb      	str	r3, [r7, #28]
 8004b88:	e7b9      	b.n	8004afe <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb+0x1a>
    }

    return EI_IMPULSE_OK;
 8004b8a:	2300      	movs	r3, #0
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	3720      	adds	r7, #32
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}
 8004b94:	08033930 	.word	0x08033930
 8004b98:	08033938 	.word	0x08033938

08004b9c <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb>:
 * Fill the result structure from an unquantized output tensor
 */
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_f32(const ei_impulse_t *impulse,
                                                                       ei_impulse_result_t *result,
                                                                       float *data,
                                                                       bool debug) {
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b086      	sub	sp, #24
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	60f8      	str	r0, [r7, #12]
 8004ba4:	60b9      	str	r1, [r7, #8]
 8004ba6:	607a      	str	r2, [r7, #4]
 8004ba8:	70fb      	strb	r3, [r7, #3]
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
 8004baa:	2300      	movs	r3, #0
 8004bac:	617b      	str	r3, [r7, #20]
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d232      	bcs.n	8004c20 <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb+0x84>
        float value = data[ix];
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	4413      	add	r3, r2
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	613b      	str	r3, [r7, #16]

        if (debug) {
 8004bc6:	78fb      	ldrb	r3, [r7, #3]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d011      	beq.n	8004bf0 <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb+0x54>
            ei_printf("%s:\t", impulse->categories[ix]);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	009b      	lsls	r3, r3, #2
 8004bd6:	4413      	add	r3, r2
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4619      	mov	r1, r3
 8004bdc:	4813      	ldr	r0, [pc, #76]	; (8004c2c <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb+0x90>)
 8004bde:	f000 fe65 	bl	80058ac <_Z9ei_printfPKcz>
            ei_printf_float(value);
 8004be2:	ed97 0a04 	vldr	s0, [r7, #16]
 8004be6:	f022 fd6b 	bl	80276c0 <_Z15ei_printf_floatf>
            ei_printf("\n");
 8004bea:	4811      	ldr	r0, [pc, #68]	; (8004c30 <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb+0x94>)
 8004bec:	f000 fe5e 	bl	80058ac <_Z9ei_printfPKcz>
        }
        result->classification[ix].label = impulse->categories[ix];
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	009b      	lsls	r3, r3, #2
 8004bfa:	4413      	add	r3, r2
 8004bfc:	6819      	ldr	r1, [r3, #0]
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	697a      	ldr	r2, [r7, #20]
 8004c02:	3201      	adds	r2, #1
 8004c04:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
        result->classification[ix].value = value;
 8004c08:	68ba      	ldr	r2, [r7, #8]
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	3301      	adds	r3, #1
 8004c0e:	00db      	lsls	r3, r3, #3
 8004c10:	4413      	add	r3, r2
 8004c12:	3304      	adds	r3, #4
 8004c14:	693a      	ldr	r2, [r7, #16]
 8004c16:	601a      	str	r2, [r3, #0]
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	3301      	adds	r3, #1
 8004c1c:	617b      	str	r3, [r7, #20]
 8004c1e:	e7c6      	b.n	8004bae <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb+0x12>
    }

    return EI_IMPULSE_OK;
 8004c20:	2300      	movs	r3, #0
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3718      	adds	r7, #24
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}
 8004c2a:	bf00      	nop
 8004c2c:	08033930 	.word	0x08033930
 8004c30:	08033938 	.word	0x08033938

08004c34 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE>:
 * @return  EI_IMPULSE_OK if successful
 */
static EI_IMPULSE_ERROR inference_tflite_setup(const ei_impulse_t *impulse, uint64_t *ctx_start_us, TfLiteTensor** input, TfLiteTensor** output,
    TfLiteTensor** output_labels,
    TfLiteTensor** output_scores,
    ei_unique_ptr_t& p_tensor_arena) {
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b086      	sub	sp, #24
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	60f8      	str	r0, [r7, #12]
 8004c3c:	60b9      	str	r1, [r7, #8]
 8004c3e:	607a      	str	r2, [r7, #4]
 8004c40:	603b      	str	r3, [r7, #0]

    *ctx_start_us = ei_read_timer_us();
 8004c42:	f022 fd29 	bl	8027698 <_Z16ei_read_timer_usv>
 8004c46:	4602      	mov	r2, r0
 8004c48:	460b      	mov	r3, r1
 8004c4a:	68b9      	ldr	r1, [r7, #8]
 8004c4c:	e9c1 2300 	strd	r2, r3, [r1]

    TfLiteStatus init_status = trained_model_init(ei_aligned_calloc);
 8004c50:	486e      	ldr	r0, [pc, #440]	; (8004e0c <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1d8>)
 8004c52:	f029 fdb7 	bl	802e7c4 <_Z18trained_model_initPFPvjjE>
 8004c56:	4603      	mov	r3, r0
 8004c58:	75fb      	strb	r3, [r7, #23]
    if (init_status != kTfLiteOk) {
 8004c5a:	7dfb      	ldrb	r3, [r7, #23]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d007      	beq.n	8004c70 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x3c>
        ei_printf("Failed to allocate TFLite arena (error code %d)\n", init_status);
 8004c60:	7dfb      	ldrb	r3, [r7, #23]
 8004c62:	4619      	mov	r1, r3
 8004c64:	486a      	ldr	r0, [pc, #424]	; (8004e10 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1dc>)
 8004c66:	f000 fe21 	bl	80058ac <_Z9ei_printfPKcz>
        return EI_IMPULSE_TFLITE_ARENA_ALLOC_FAILED;
 8004c6a:	f06f 0305 	mvn.w	r3, #5
 8004c6e:	e0c8      	b.n	8004e02 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1ce>
    }

    static bool tflite_first_run = true;

    *input = impulse->model_input(0);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c76:	2000      	movs	r0, #0
 8004c78:	4798      	blx	r3
 8004c7a:	4602      	mov	r2, r0
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	601a      	str	r2, [r3, #0]
    *output = impulse->model_output(0);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c86:	2000      	movs	r0, #0
 8004c88:	4798      	blx	r3
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	601a      	str	r2, [r3, #0]

    if (impulse->object_detection_last_layer == EI_CLASSIFIER_LAST_LAYER_SSD) {
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f993 3048 	ldrsb.w	r3, [r3, #72]	; 0x48
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d115      	bne.n	8004cc6 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x92>
        *output_scores = impulse->model_output(impulse->tflite_output_score_tensor);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ca0:	68fa      	ldr	r2, [r7, #12]
 8004ca2:	f892 204a 	ldrb.w	r2, [r2, #74]	; 0x4a
 8004ca6:	4610      	mov	r0, r2
 8004ca8:	4798      	blx	r3
 8004caa:	4602      	mov	r2, r0
 8004cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cae:	601a      	str	r2, [r3, #0]
        *output_labels = impulse->model_output(impulse->tflite_output_labels_tensor);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cb6:	68fa      	ldr	r2, [r7, #12]
 8004cb8:	f892 2049 	ldrb.w	r2, [r2, #73]	; 0x49
 8004cbc:	4610      	mov	r0, r2
 8004cbe:	4798      	blx	r3
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	6a3b      	ldr	r3, [r7, #32]
 8004cc4:	601a      	str	r2, [r3, #0]
    }

    // Assert that our quantization parameters match the model
    if (tflite_first_run) {
 8004cc6:	4b53      	ldr	r3, [pc, #332]	; (8004e14 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e0>)
 8004cc8:	781b      	ldrb	r3, [r3, #0]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	f000 8098 	beq.w	8004e00 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1cc>
        assert((*input)->type == impulse->tflite_input_datatype);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	781a      	ldrb	r2, [r3, #0]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d005      	beq.n	8004cec <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0xb8>
 8004ce0:	4b4d      	ldr	r3, [pc, #308]	; (8004e18 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e4>)
 8004ce2:	4a4e      	ldr	r2, [pc, #312]	; (8004e1c <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e8>)
 8004ce4:	2159      	movs	r1, #89	; 0x59
 8004ce6:	484e      	ldr	r0, [pc, #312]	; (8004e20 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1ec>)
 8004ce8:	f02d f9c0 	bl	803206c <__assert_func>
        assert((*output)->type == impulse->tflite_output_datatype);
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	781a      	ldrb	r2, [r3, #0]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d005      	beq.n	8004d08 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0xd4>
 8004cfc:	4b49      	ldr	r3, [pc, #292]	; (8004e24 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1f0>)
 8004cfe:	4a47      	ldr	r2, [pc, #284]	; (8004e1c <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e8>)
 8004d00:	215a      	movs	r1, #90	; 0x5a
 8004d02:	4847      	ldr	r0, [pc, #284]	; (8004e20 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1ec>)
 8004d04:	f02d f9b2 	bl	803206c <__assert_func>
        if (impulse->object_detection_last_layer == EI_CLASSIFIER_LAST_LAYER_SSD) {
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f993 3048 	ldrsb.w	r3, [r3, #72]	; 0x48
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	d11b      	bne.n	8004d4a <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x116>
            assert((*output_scores)->type == impulse->tflite_output_datatype);
 8004d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	781a      	ldrb	r2, [r3, #0]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d005      	beq.n	8004d2e <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0xfa>
 8004d22:	4b41      	ldr	r3, [pc, #260]	; (8004e28 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1f4>)
 8004d24:	4a3d      	ldr	r2, [pc, #244]	; (8004e1c <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e8>)
 8004d26:	215c      	movs	r1, #92	; 0x5c
 8004d28:	483d      	ldr	r0, [pc, #244]	; (8004e20 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1ec>)
 8004d2a:	f02d f99f 	bl	803206c <__assert_func>
            assert((*output_labels)->type == impulse->tflite_output_datatype);
 8004d2e:	6a3b      	ldr	r3, [r7, #32]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	781a      	ldrb	r2, [r3, #0]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d005      	beq.n	8004d4a <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x116>
 8004d3e:	4b3b      	ldr	r3, [pc, #236]	; (8004e2c <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1f8>)
 8004d40:	4a36      	ldr	r2, [pc, #216]	; (8004e1c <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e8>)
 8004d42:	215d      	movs	r1, #93	; 0x5d
 8004d44:	4836      	ldr	r0, [pc, #216]	; (8004e20 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1ec>)
 8004d46:	f02d f991 	bl	803206c <__assert_func>
        }
        if (impulse->tflite_input_quantized) {
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d026      	beq.n	8004da2 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x16e>
            assert((*input)->params.scale == impulse->tflite_input_scale);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	ed93 7a03 	vldr	s14, [r3, #12]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8004d62:	eeb4 7a67 	vcmp.f32	s14, s15
 8004d66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d6a:	d005      	beq.n	8004d78 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x144>
 8004d6c:	4b30      	ldr	r3, [pc, #192]	; (8004e30 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1fc>)
 8004d6e:	4a2b      	ldr	r2, [pc, #172]	; (8004e1c <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e8>)
 8004d70:	2160      	movs	r1, #96	; 0x60
 8004d72:	482b      	ldr	r0, [pc, #172]	; (8004e20 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1ec>)
 8004d74:	f02d f97a 	bl	803206c <__assert_func>
            assert((*input)->params.zero_point == impulse->tflite_input_zeropoint);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	691b      	ldr	r3, [r3, #16]
 8004d7e:	ee07 3a90 	vmov	s15, r3
 8004d82:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8004d8c:	eeb4 7a67 	vcmp.f32	s14, s15
 8004d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d94:	d005      	beq.n	8004da2 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x16e>
 8004d96:	4b27      	ldr	r3, [pc, #156]	; (8004e34 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x200>)
 8004d98:	4a20      	ldr	r2, [pc, #128]	; (8004e1c <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e8>)
 8004d9a:	2161      	movs	r1, #97	; 0x61
 8004d9c:	4820      	ldr	r0, [pc, #128]	; (8004e20 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1ec>)
 8004d9e:	f02d f965 	bl	803206c <__assert_func>
        }
        if (impulse->tflite_output_quantized) {
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d026      	beq.n	8004dfa <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1c6>
            assert((*output)->params.scale == impulse->tflite_output_scale);
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	ed93 7a03 	vldr	s14, [r3, #12]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8004dba:	eeb4 7a67 	vcmp.f32	s14, s15
 8004dbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dc2:	d005      	beq.n	8004dd0 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x19c>
 8004dc4:	4b1c      	ldr	r3, [pc, #112]	; (8004e38 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x204>)
 8004dc6:	4a15      	ldr	r2, [pc, #84]	; (8004e1c <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e8>)
 8004dc8:	2164      	movs	r1, #100	; 0x64
 8004dca:	4815      	ldr	r0, [pc, #84]	; (8004e20 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1ec>)
 8004dcc:	f02d f94e 	bl	803206c <__assert_func>
            assert((*output)->params.zero_point == impulse->tflite_output_zeropoint);
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	691b      	ldr	r3, [r3, #16]
 8004dd6:	ee07 3a90 	vmov	s15, r3
 8004dda:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8004de4:	eeb4 7a67 	vcmp.f32	s14, s15
 8004de8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dec:	d005      	beq.n	8004dfa <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1c6>
 8004dee:	4b13      	ldr	r3, [pc, #76]	; (8004e3c <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x208>)
 8004df0:	4a0a      	ldr	r2, [pc, #40]	; (8004e1c <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e8>)
 8004df2:	2165      	movs	r1, #101	; 0x65
 8004df4:	480a      	ldr	r0, [pc, #40]	; (8004e20 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1ec>)
 8004df6:	f02d f939 	bl	803206c <__assert_func>
        }
        tflite_first_run = false;
 8004dfa:	4b06      	ldr	r3, [pc, #24]	; (8004e14 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e0>)
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	701a      	strb	r2, [r3, #0]
    }
    return EI_IMPULSE_OK;
 8004e00:	2300      	movs	r3, #0
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3718      	adds	r7, #24
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}
 8004e0a:	bf00      	nop
 8004e0c:	080014d1 	.word	0x080014d1
 8004e10:	0803393c 	.word	0x0803393c
 8004e14:	20000048 	.word	0x20000048
 8004e18:	08033970 	.word	0x08033970
 8004e1c:	080339a4 	.word	0x080339a4
 8004e20:	08033a40 	.word	0x08033a40
 8004e24:	08033acc 	.word	0x08033acc
 8004e28:	08033b00 	.word	0x08033b00
 8004e2c:	08033b3c 	.word	0x08033b3c
 8004e30:	08033b78 	.word	0x08033b78
 8004e34:	08033bb0 	.word	0x08033bb0
 8004e38:	08033bf0 	.word	0x08033bf0
 8004e3c:	08033c28 	.word	0x08033c28

08004e40 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb>:
    TfLiteTensor* output,
    TfLiteTensor* labels_tensor,
    TfLiteTensor* scores_tensor,
    uint8_t* tensor_arena,
    ei_impulse_result_t *result,
    bool debug) {
 8004e40:	b5b0      	push	{r4, r5, r7, lr}
 8004e42:	b08c      	sub	sp, #48	; 0x30
 8004e44:	af02      	add	r7, sp, #8
 8004e46:	60f8      	str	r0, [r7, #12]
 8004e48:	e9c7 2300 	strd	r2, r3, [r7]

    if(trained_model_invoke() != kTfLiteOk) {
 8004e4c:	f029 ff44 	bl	802ecd8 <_Z20trained_model_invokev>
 8004e50:	4603      	mov	r3, r0
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	bf14      	ite	ne
 8004e56:	2301      	movne	r3, #1
 8004e58:	2300      	moveq	r3, #0
 8004e5a:	b2db      	uxtb	r3, r3
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d002      	beq.n	8004e66 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x26>
        return EI_IMPULSE_TFLITE_ERROR;
 8004e60:	f06f 0302 	mvn.w	r3, #2
 8004e64:	e0ea      	b.n	800503c <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1fc>
    }

    uint64_t ctx_end_us = ei_read_timer_us();
 8004e66:	f022 fc17 	bl	8027698 <_Z16ei_read_timer_usv>
 8004e6a:	e9c7 0106 	strd	r0, r1, [r7, #24]

    result->timing.classification_us = ctx_end_us - ctx_start_us;
 8004e6e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004e72:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e76:	1a84      	subs	r4, r0, r2
 8004e78:	eb61 0503 	sbc.w	r5, r1, r3
 8004e7c:	4622      	mov	r2, r4
 8004e7e:	462b      	mov	r3, r5
 8004e80:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004e82:	e9c1 233c 	strd	r2, r3, [r1, #240]	; 0xf0
    result->timing.classification = (int)(result->timing.classification_us / 1000);
 8004e86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e88:	e9d3 013c 	ldrd	r0, r1, [r3, #240]	; 0xf0
 8004e8c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004e90:	f04f 0300 	mov.w	r3, #0
 8004e94:	f7fb ff02 	bl	8000c9c <__aeabi_ldivmod>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	460b      	mov	r3, r1
 8004e9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e9e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

    // Read the predicted y value from the model's output tensor
    if (debug) {
 8004ea2:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d006      	beq.n	8004eb8 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x78>
        ei_printf("Predictions (time: %d ms.):\n", result->timing.classification);
 8004eaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004eac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004eb0:	4619      	mov	r1, r3
 8004eb2:	4864      	ldr	r0, [pc, #400]	; (8005044 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x204>)
 8004eb4:	f000 fcfa 	bl	80058ac <_Z9ei_printfPKcz>
    }

    EI_IMPULSE_ERROR fill_res = EI_IMPULSE_OK;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if (impulse->object_detection) {
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d072      	beq.n	8004fae <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x16e>
        switch (impulse->object_detection_last_layer) {
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f993 3048 	ldrsb.w	r3, [r3, #72]	; 0x48
 8004ece:	3b01      	subs	r3, #1
 8004ed0:	2b04      	cmp	r3, #4
 8004ed2:	d862      	bhi.n	8004f9a <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x15a>
 8004ed4:	a201      	add	r2, pc, #4	; (adr r2, 8004edc <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x9c>)
 8004ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eda:	bf00      	nop
 8004edc:	08004f67 	.word	0x08004f67
 8004ee0:	08004ef1 	.word	0x08004ef1
 8004ee4:	08004f73 	.word	0x08004f73
 8004ee8:	08004f87 	.word	0x08004f87
 8004eec:	08004f73 	.word	0x08004f73
            case EI_CLASSIFIER_LAST_LAYER_FOMO: {
                bool int8_output = output->type == TfLiteType::kTfLiteInt8;
 8004ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ef2:	781b      	ldrb	r3, [r3, #0]
 8004ef4:	2b09      	cmp	r3, #9
 8004ef6:	bf0c      	ite	eq
 8004ef8:	2301      	moveq	r3, #1
 8004efa:	2300      	movne	r3, #0
 8004efc:	75bb      	strb	r3, [r7, #22]
                if (int8_output) {
 8004efe:	7dbb      	ldrb	r3, [r7, #22]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d01e      	beq.n	8004f42 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x102>
                    fill_res = fill_result_struct_i8_fomo(impulse, result, output->data.int8, output->params.zero_point, output->params.scale,
 8004f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f06:	685a      	ldr	r2, [r3, #4]
 8004f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f0a:	691b      	ldr	r3, [r3, #16]
 8004f0c:	ee07 3a90 	vmov	s15, r3
 8004f10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f16:	ed93 7a03 	vldr	s14, [r3, #12]
                        (int)output->dims->data[1], (int)output->dims->data[2]);
 8004f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	6899      	ldr	r1, [r3, #8]
 8004f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	68db      	ldr	r3, [r3, #12]
                    fill_res = fill_result_struct_i8_fomo(impulse, result, output->data.int8, output->params.zero_point, output->params.scale,
 8004f26:	9300      	str	r3, [sp, #0]
 8004f28:	460b      	mov	r3, r1
 8004f2a:	eef0 0a47 	vmov.f32	s1, s14
 8004f2e:	eeb0 0a67 	vmov.f32	s0, s15
 8004f32:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004f34:	68f8      	ldr	r0, [r7, #12]
 8004f36:	f7ff fdc1 	bl	8004abc <_ZL26fill_result_struct_i8_fomoPK10ei_impulseP19ei_impulse_result_tPaffii>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                }
                else {
                    fill_res = fill_result_struct_f32_fomo(impulse, result, output->data.f, (int)output->dims->data[1], (int)output->dims->data[2]);
                }
                break;
 8004f40:	e063      	b.n	800500a <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1ca>
                    fill_res = fill_result_struct_f32_fomo(impulse, result, output->data.f, (int)output->dims->data[1], (int)output->dims->data[2]);
 8004f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f44:	685a      	ldr	r2, [r3, #4]
 8004f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	6899      	ldr	r1, [r3, #8]
 8004f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	68db      	ldr	r3, [r3, #12]
 8004f52:	9300      	str	r3, [sp, #0]
 8004f54:	460b      	mov	r3, r1
 8004f56:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004f58:	68f8      	ldr	r0, [r7, #12]
 8004f5a:	f7ff fda0 	bl	8004a9e <_ZL27fill_result_struct_f32_fomoPK10ei_impulseP19ei_impulse_result_tPfii>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                break;
 8004f64:	e051      	b.n	800500a <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1ca>
            }
            case EI_CLASSIFIER_LAST_LAYER_SSD: {
                #if EI_CLASSIFIER_ENABLE_DETECTION_POSTPROCESS_OP
                    fill_res = fill_result_struct_f32_object_detection(impulse, result, tflite::post_process_boxes, tflite::post_process_scores, tflite::post_process_classes, debug);
                #else
                    ei_printf("ERR: Cannot run SSD model, EI_CLASSIFIER_ENABLE_DETECTION_POSTPROCESS_OP is disabled\n");
 8004f66:	4838      	ldr	r0, [pc, #224]	; (8005048 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x208>)
 8004f68:	f000 fca0 	bl	80058ac <_Z9ei_printfPKcz>
                    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
 8004f6c:	f06f 0309 	mvn.w	r3, #9
 8004f70:	e064      	b.n	800503c <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1fc>
                break;
            }
            case EI_CLASSIFIER_LAST_LAYER_YOLOV5:
            case EI_CLASSIFIER_LAST_LAYER_YOLOV5_V5_DRPAI: {
                ei_printf("ERR: YOLOv5 models are not supported using EON Compiler, use full TFLite (%d)\n",
                    impulse->object_detection_last_layer);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	f993 3048 	ldrsb.w	r3, [r3, #72]	; 0x48
                ei_printf("ERR: YOLOv5 models are not supported using EON Compiler, use full TFLite (%d)\n",
 8004f78:	4619      	mov	r1, r3
 8004f7a:	4834      	ldr	r0, [pc, #208]	; (800504c <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x20c>)
 8004f7c:	f000 fc96 	bl	80058ac <_Z9ei_printfPKcz>
                return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
 8004f80:	f06f 0309 	mvn.w	r3, #9
 8004f84:	e05a      	b.n	800503c <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1fc>
            }
            case EI_CLASSIFIER_LAST_LAYER_YOLOX: {
                ei_printf("ERR: YOLOX models are not supported using EON Compiler, use full TFLite (%d)\n",
                    impulse->object_detection_last_layer);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	f993 3048 	ldrsb.w	r3, [r3, #72]	; 0x48
                ei_printf("ERR: YOLOX models are not supported using EON Compiler, use full TFLite (%d)\n",
 8004f8c:	4619      	mov	r1, r3
 8004f8e:	4830      	ldr	r0, [pc, #192]	; (8005050 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x210>)
 8004f90:	f000 fc8c 	bl	80058ac <_Z9ei_printfPKcz>
                return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
 8004f94:	f06f 0309 	mvn.w	r3, #9
 8004f98:	e050      	b.n	800503c <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1fc>
            }
            default: {
                ei_printf("ERR: Unsupported object detection last layer (%d)\n",
                    impulse->object_detection_last_layer);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	f993 3048 	ldrsb.w	r3, [r3, #72]	; 0x48
                ei_printf("ERR: Unsupported object detection last layer (%d)\n",
 8004fa0:	4619      	mov	r1, r3
 8004fa2:	482c      	ldr	r0, [pc, #176]	; (8005054 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x214>)
 8004fa4:	f000 fc82 	bl	80058ac <_Z9ei_printfPKcz>
                return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
 8004fa8:	f06f 0309 	mvn.w	r3, #9
 8004fac:	e046      	b.n	800503c <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1fc>
            }
        }
    }
    else {
        bool int8_output = output->type == TfLiteType::kTfLiteInt8;
 8004fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fb0:	781b      	ldrb	r3, [r3, #0]
 8004fb2:	2b09      	cmp	r3, #9
 8004fb4:	bf0c      	ite	eq
 8004fb6:	2301      	moveq	r3, #1
 8004fb8:	2300      	movne	r3, #0
 8004fba:	75fb      	strb	r3, [r7, #23]
        if (int8_output) {
 8004fbc:	7dfb      	ldrb	r3, [r7, #23]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d018      	beq.n	8004ff4 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1b4>
            fill_res = fill_result_struct_i8(impulse, result, output->data.int8, output->params.zero_point, output->params.scale, debug);
 8004fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fc4:	685a      	ldr	r2, [r3, #4]
 8004fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fc8:	691b      	ldr	r3, [r3, #16]
 8004fca:	ee07 3a90 	vmov	s15, r3
 8004fce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fd4:	ed93 7a03 	vldr	s14, [r3, #12]
 8004fd8:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8004fdc:	eef0 0a47 	vmov.f32	s1, s14
 8004fe0:	eeb0 0a67 	vmov.f32	s0, s15
 8004fe4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004fe6:	68f8      	ldr	r0, [r7, #12]
 8004fe8:	f7ff fd7c 	bl	8004ae4 <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb>
 8004fec:	4603      	mov	r3, r0
 8004fee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004ff2:	e00a      	b.n	800500a <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1ca>
        }
        else {
            fill_res = fill_result_struct_f32(impulse, result, output->data.f, debug);
 8004ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ff6:	685a      	ldr	r2, [r3, #4]
 8004ff8:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8004ffc:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004ffe:	68f8      	ldr	r0, [r7, #12]
 8005000:	f7ff fdcc 	bl	8004b9c <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb>
 8005004:	4603      	mov	r3, r0
 8005006:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
    }

    trained_model_reset(ei_aligned_free);
 800500a:	4813      	ldr	r0, [pc, #76]	; (8005058 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x218>)
 800500c:	f029 fe9a 	bl	802ed44 <_Z19trained_model_resetPFvPvE>

    if (fill_res != EI_IMPULSE_OK) {
 8005010:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005014:	2b00      	cmp	r3, #0
 8005016:	d002      	beq.n	800501e <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1de>
        return fill_res;
 8005018:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800501c:	e00e      	b.n	800503c <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1fc>
    }

    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 800501e:	f022 fb33 	bl	8027688 <_Z29ei_run_impulse_check_canceledv>
 8005022:	4603      	mov	r3, r0
 8005024:	f113 0f02 	cmn.w	r3, #2
 8005028:	bf0c      	ite	eq
 800502a:	2301      	moveq	r3, #1
 800502c:	2300      	movne	r3, #0
 800502e:	b2db      	uxtb	r3, r3
 8005030:	2b00      	cmp	r3, #0
 8005032:	d002      	beq.n	800503a <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1fa>
        return EI_IMPULSE_CANCELED;
 8005034:	f06f 0301 	mvn.w	r3, #1
 8005038:	e000      	b.n	800503c <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1fc>
    }

    return EI_IMPULSE_OK;
 800503a:	2300      	movs	r3, #0
}
 800503c:	4618      	mov	r0, r3
 800503e:	3728      	adds	r7, #40	; 0x28
 8005040:	46bd      	mov	sp, r7
 8005042:	bdb0      	pop	{r4, r5, r7, pc}
 8005044:	08033c6c 	.word	0x08033c6c
 8005048:	08033c8c 	.word	0x08033c8c
 800504c:	08033ce4 	.word	0x08033ce4
 8005050:	08033d34 	.word	0x08033d34
 8005054:	08033d84 	.word	0x08033d84
 8005058:	08001555 	.word	0x08001555

0800505c <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb>:
EI_IMPULSE_ERROR run_nn_inference(
    const ei_impulse_t *impulse,
    ei::matrix_t *fmatrix,
    ei_impulse_result_t *result,
    bool debug = false)
{
 800505c:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8005060:	b09e      	sub	sp, #120	; 0x78
 8005062:	af06      	add	r7, sp, #24
 8005064:	6178      	str	r0, [r7, #20]
 8005066:	6139      	str	r1, [r7, #16]
 8005068:	60fa      	str	r2, [r7, #12]
 800506a:	72fb      	strb	r3, [r7, #11]
    TfLiteTensor* input;
    TfLiteTensor* output;
    TfLiteTensor* output_scores;
    TfLiteTensor* output_labels;

    uint64_t ctx_start_us = ei_read_timer_us();
 800506c:	f022 fb14 	bl	8027698 <_Z16ei_read_timer_usv>
 8005070:	4602      	mov	r2, r0
 8005072:	460b      	mov	r3, r1
 8005074:	e9c7 2308 	strd	r2, r3, [r7, #32]
    ei_unique_ptr_t p_tensor_arena(nullptr, ei_aligned_free);
 8005078:	4b7b      	ldr	r3, [pc, #492]	; (8005268 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x20c>)
 800507a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800507c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8005080:	f107 0318 	add.w	r3, r7, #24
 8005084:	2100      	movs	r1, #0
 8005086:	4618      	mov	r0, r3
 8005088:	f000 fdcb 	bl	8005c22 <_ZNSt10unique_ptrIvPFvPvEEC1IS2_vEES0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOS7_E4typeE>

    EI_IMPULSE_ERROR init_res = inference_tflite_setup(impulse,
 800508c:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8005090:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005094:	f107 0120 	add.w	r1, r7, #32
 8005098:	f107 0318 	add.w	r3, r7, #24
 800509c:	9302      	str	r3, [sp, #8]
 800509e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80050a2:	9301      	str	r3, [sp, #4]
 80050a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80050a8:	9300      	str	r3, [sp, #0]
 80050aa:	4603      	mov	r3, r0
 80050ac:	6978      	ldr	r0, [r7, #20]
 80050ae:	f7ff fdc1 	bl	8004c34 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE>
 80050b2:	4603      	mov	r3, r0
 80050b4:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
        &input, &output,
        &output_labels,
        &output_scores,
        p_tensor_arena);

    if (init_res != EI_IMPULSE_OK) {
 80050b8:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d002      	beq.n	80050c6 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x6a>
        return init_res;
 80050c0:	f997 4053 	ldrsb.w	r4, [r7, #83]	; 0x53
 80050c4:	e0c5      	b.n	8005252 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x1f6>
    }

    uint8_t* tensor_arena = static_cast<uint8_t*>(p_tensor_arena.get());
 80050c6:	f107 0318 	add.w	r3, r7, #24
 80050ca:	4618      	mov	r0, r3
 80050cc:	f000 ff2e 	bl	8005f2c <_ZNKSt10unique_ptrIvPFvPvEE3getEv>
 80050d0:	64f8      	str	r0, [r7, #76]	; 0x4c

    switch (input->type) {
 80050d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050d4:	781b      	ldrb	r3, [r3, #0]
 80050d6:	2b09      	cmp	r3, #9
 80050d8:	d022      	beq.n	8005120 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0xc4>
 80050da:	2b09      	cmp	r3, #9
 80050dc:	f300 8083 	bgt.w	80051e6 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x18a>
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d002      	beq.n	80050ea <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x8e>
 80050e4:	2b03      	cmp	r3, #3
 80050e6:	d051      	beq.n	800518c <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x130>
 80050e8:	e07d      	b.n	80051e6 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x18a>
        case kTfLiteFloat32: {
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 80050ea:	2300      	movs	r3, #0
 80050ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	693a      	ldr	r2, [r7, #16]
 80050f4:	6892      	ldr	r2, [r2, #8]
 80050f6:	fb02 f303 	mul.w	r3, r2, r3
 80050fa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80050fc:	429a      	cmp	r2, r3
 80050fe:	d27b      	bcs.n	80051f8 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x19c>
                input->data.f[ix] = fmatrix->buffer[ix];
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	441a      	add	r2, r3
 800510a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800510c:	6859      	ldr	r1, [r3, #4]
 800510e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005110:	009b      	lsls	r3, r3, #2
 8005112:	440b      	add	r3, r1
 8005114:	6812      	ldr	r2, [r2, #0]
 8005116:	601a      	str	r2, [r3, #0]
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 8005118:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800511a:	3301      	adds	r3, #1
 800511c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800511e:	e7e6      	b.n	80050ee <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x92>
            }
            break;
        }
        case kTfLiteInt8: {
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 8005120:	2300      	movs	r3, #0
 8005122:	65bb      	str	r3, [r7, #88]	; 0x58
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	693a      	ldr	r2, [r7, #16]
 800512a:	6892      	ldr	r2, [r2, #8]
 800512c:	fb02 f303 	mul.w	r3, r2, r3
 8005130:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005132:	429a      	cmp	r2, r3
 8005134:	d262      	bcs.n	80051fc <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x1a0>
                float pixel = (float)fmatrix->buffer[ix];
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800513c:	009b      	lsls	r3, r3, #2
 800513e:	4413      	add	r3, r2
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	64bb      	str	r3, [r7, #72]	; 0x48
                input->data.int8[ix] = static_cast<int8_t>(round(pixel / input->params.scale) + input->params.zero_point);
 8005144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005146:	edd3 7a03 	vldr	s15, [r3, #12]
 800514a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800514e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005152:	eeb0 0a66 	vmov.f32	s0, s13
 8005156:	f7fc fb60 	bl	800181a <_ZSt5roundf>
 800515a:	eeb0 7a40 	vmov.f32	s14, s0
 800515e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005160:	691b      	ldr	r3, [r3, #16]
 8005162:	ee07 3a90 	vmov	s15, r3
 8005166:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800516a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800516e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005170:	685a      	ldr	r2, [r3, #4]
 8005172:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005174:	4413      	add	r3, r2
 8005176:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800517a:	edc7 7a01 	vstr	s15, [r7, #4]
 800517e:	793a      	ldrb	r2, [r7, #4]
 8005180:	b252      	sxtb	r2, r2
 8005182:	701a      	strb	r2, [r3, #0]
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 8005184:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005186:	3301      	adds	r3, #1
 8005188:	65bb      	str	r3, [r7, #88]	; 0x58
 800518a:	e7cb      	b.n	8005124 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0xc8>
            }
            break;
        }
        case kTfLiteUInt8: {
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 800518c:	2300      	movs	r3, #0
 800518e:	657b      	str	r3, [r7, #84]	; 0x54
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	693a      	ldr	r2, [r7, #16]
 8005196:	6892      	ldr	r2, [r2, #8]
 8005198:	fb02 f303 	mul.w	r3, r2, r3
 800519c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800519e:	429a      	cmp	r2, r3
 80051a0:	d221      	bcs.n	80051e6 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x18a>
                float pixel = (float)fmatrix->buffer[ix];
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051a8:	009b      	lsls	r3, r3, #2
 80051aa:	4413      	add	r3, r2
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	647b      	str	r3, [r7, #68]	; 0x44
                input->data.uint8[ix] = static_cast<uint8_t>((pixel / impulse->tflite_input_scale) + impulse->tflite_input_zeropoint);
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80051b6:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 80051ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 80051c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80051c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051ca:	685a      	ldr	r2, [r3, #4]
 80051cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051ce:	4413      	add	r3, r2
 80051d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051d4:	edc7 7a01 	vstr	s15, [r7, #4]
 80051d8:	793a      	ldrb	r2, [r7, #4]
 80051da:	b2d2      	uxtb	r2, r2
 80051dc:	701a      	strb	r2, [r3, #0]
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 80051de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051e0:	3301      	adds	r3, #1
 80051e2:	657b      	str	r3, [r7, #84]	; 0x54
 80051e4:	e7d4      	b.n	8005190 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x134>
            }
        }
        default: {
            ei_printf("ERR: Cannot handle input type (%d)\n", input->type);
 80051e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051e8:	781b      	ldrb	r3, [r3, #0]
 80051ea:	4619      	mov	r1, r3
 80051ec:	481f      	ldr	r0, [pc, #124]	; (800526c <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x210>)
 80051ee:	f000 fb5d 	bl	80058ac <_Z9ei_printfPKcz>
            return EI_IMPULSE_INPUT_TENSOR_WAS_NULL;
 80051f2:	f06f 040c 	mvn.w	r4, #12
 80051f6:	e02c      	b.n	8005252 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x1f6>
            break;
 80051f8:	bf00      	nop
 80051fa:	e000      	b.n	80051fe <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x1a2>
            break;
 80051fc:	bf00      	nop
        }
    }

    EI_IMPULSE_ERROR run_res = inference_tflite_run(impulse, ctx_start_us,
 80051fe:	e9d7 bc08 	ldrd	fp, ip, [r7, #32]
 8005202:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005204:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005206:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 8005208:	7afb      	ldrb	r3, [r7, #11]
 800520a:	9305      	str	r3, [sp, #20]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	9304      	str	r3, [sp, #16]
 8005210:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005212:	9303      	str	r3, [sp, #12]
 8005214:	9602      	str	r6, [sp, #8]
 8005216:	9001      	str	r0, [sp, #4]
 8005218:	9100      	str	r1, [sp, #0]
 800521a:	465a      	mov	r2, fp
 800521c:	4663      	mov	r3, ip
 800521e:	6978      	ldr	r0, [r7, #20]
 8005220:	f7ff fe0e 	bl	8004e40 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb>
 8005224:	4603      	mov	r3, r0
 8005226:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
                                                    output, output_labels, output_scores,
                                                    tensor_arena, result, debug);

    result->timing.classification_us = ei_read_timer_us() - ctx_start_us;
 800522a:	f022 fa35 	bl	8027698 <_Z16ei_read_timer_usv>
 800522e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005232:	1a84      	subs	r4, r0, r2
 8005234:	eb61 0503 	sbc.w	r5, r1, r3
 8005238:	4622      	mov	r2, r4
 800523a:	462b      	mov	r3, r5
 800523c:	68f9      	ldr	r1, [r7, #12]
 800523e:	e9c1 233c 	strd	r2, r3, [r1, #240]	; 0xf0

    if (run_res != EI_IMPULSE_OK) {
 8005242:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
 8005246:	2b00      	cmp	r3, #0
 8005248:	d002      	beq.n	8005250 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x1f4>
        return run_res;
 800524a:	f997 4043 	ldrsb.w	r4, [r7, #67]	; 0x43
 800524e:	e000      	b.n	8005252 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x1f6>
    }

    return EI_IMPULSE_OK;
 8005250:	2400      	movs	r4, #0
    ei_unique_ptr_t p_tensor_arena(nullptr, ei_aligned_free);
 8005252:	f107 0318 	add.w	r3, r7, #24
 8005256:	4618      	mov	r0, r3
 8005258:	f000 fcf8 	bl	8005c4c <_ZNSt10unique_ptrIvPFvPvEED1Ev>
}
 800525c:	4623      	mov	r3, r4
 800525e:	4618      	mov	r0, r3
 8005260:	3760      	adds	r7, #96	; 0x60
 8005262:	46bd      	mov	sp, r7
 8005264:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8005268:	08001555 	.word	0x08001555
 800526c:	08033db8 	.word	0x08033db8

08005270 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb>:
 */
EI_IMPULSE_ERROR run_nn_inference_image_quantized(
    const ei_impulse_t *impulse,
    signal_t *signal,
    ei_impulse_result_t *result,
    bool debug = false) {
 8005270:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005274:	b0a1      	sub	sp, #132	; 0x84
 8005276:	af06      	add	r7, sp, #24
 8005278:	6178      	str	r0, [r7, #20]
 800527a:	6139      	str	r1, [r7, #16]
 800527c:	60fa      	str	r2, [r7, #12]
 800527e:	72fb      	strb	r3, [r7, #11]

    memset(result, 0, sizeof(ei_impulse_result_t));
 8005280:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005284:	2100      	movs	r1, #0
 8005286:	68f8      	ldr	r0, [r7, #12]
 8005288:	f02c ff8e 	bl	80321a8 <memset>
    TfLiteTensor* input;
    TfLiteTensor* output;
    TfLiteTensor* output_scores;
    TfLiteTensor* output_labels;

    ei_unique_ptr_t p_tensor_arena(nullptr, ei_aligned_free);
 800528c:	4b7b      	ldr	r3, [pc, #492]	; (800547c <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x20c>)
 800528e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005290:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8005294:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005298:	2100      	movs	r1, #0
 800529a:	4618      	mov	r0, r3
 800529c:	f000 fcc1 	bl	8005c22 <_ZNSt10unique_ptrIvPFvPvEEC1IS2_vEES0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOS7_E4typeE>

    EI_IMPULSE_ERROR init_res = inference_tflite_setup(impulse,
 80052a0:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80052a4:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80052a8:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80052ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80052b0:	9302      	str	r3, [sp, #8]
 80052b2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80052b6:	9301      	str	r3, [sp, #4]
 80052b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80052bc:	9300      	str	r3, [sp, #0]
 80052be:	4603      	mov	r3, r0
 80052c0:	6978      	ldr	r0, [r7, #20]
 80052c2:	f7ff fcb7 	bl	8004c34 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE>
 80052c6:	4603      	mov	r3, r0
 80052c8:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
        &ctx_start_us, &input, &output,
        &output_labels,
        &output_scores,
        p_tensor_arena);
    if (init_res != EI_IMPULSE_OK) {
 80052cc:	f997 3063 	ldrsb.w	r3, [r7, #99]	; 0x63
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d002      	beq.n	80052da <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x6a>
        return init_res;
 80052d4:	f997 4063 	ldrsb.w	r4, [r7, #99]	; 0x63
 80052d8:	e0c4      	b.n	8005464 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x1f4>
    }

    if (input->type != TfLiteType::kTfLiteInt8) {
 80052da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052dc:	781b      	ldrb	r3, [r3, #0]
 80052de:	2b09      	cmp	r3, #9
 80052e0:	d002      	beq.n	80052e8 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x78>
        return EI_IMPULSE_ONLY_SUPPORTED_FOR_IMAGES;
 80052e2:	f06f 0408 	mvn.w	r4, #8
 80052e6:	e0bd      	b.n	8005464 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x1f4>
    }

    uint64_t dsp_start_us = ei_read_timer_us();
 80052e8:	f022 f9d6 	bl	8027698 <_Z16ei_read_timer_usv>
 80052ec:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58

    // features matrix maps around the input tensor to not allocate any memory
    ei::matrix_i8_t features_matrix(1, impulse->nn_input_frame_size, input->data.int8);
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	691a      	ldr	r2, [r3, #16]
 80052f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	f107 0018 	add.w	r0, r7, #24
 80052fc:	2101      	movs	r1, #1
 80052fe:	f7fc f9d6 	bl	80016ae <_ZN2ei12ei_matrix_i8C1EmmPa>

    // run DSP process and quantize automatically
    int ret = extract_image_features_quantized(impulse, signal, &features_matrix, ei_dsp_blocks[0].config, impulse->frequency);
 8005302:	4b5f      	ldr	r3, [pc, #380]	; (8005480 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x210>)
 8005304:	6899      	ldr	r1, [r3, #8]
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800530c:	f107 0218 	add.w	r2, r7, #24
 8005310:	eeb0 0a67 	vmov.f32	s0, s15
 8005314:	460b      	mov	r3, r1
 8005316:	6939      	ldr	r1, [r7, #16]
 8005318:	6978      	ldr	r0, [r7, #20]
 800531a:	f7ff f8af 	bl	800447c <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf>
 800531e:	6578      	str	r0, [r7, #84]	; 0x54
    if (ret != EIDSP_OK) {
 8005320:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005322:	2b00      	cmp	r3, #0
 8005324:	d006      	beq.n	8005334 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0xc4>
        ei_printf("ERR: Failed to run DSP process (%d)\n", ret);
 8005326:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005328:	4856      	ldr	r0, [pc, #344]	; (8005484 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x214>)
 800532a:	f000 fabf 	bl	80058ac <_Z9ei_printfPKcz>
        return EI_IMPULSE_DSP_ERROR;
 800532e:	f06f 0404 	mvn.w	r4, #4
 8005332:	e092      	b.n	800545a <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x1ea>
    }

    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 8005334:	f022 f9a8 	bl	8027688 <_Z29ei_run_impulse_check_canceledv>
 8005338:	4603      	mov	r3, r0
 800533a:	f113 0f02 	cmn.w	r3, #2
 800533e:	bf0c      	ite	eq
 8005340:	2301      	moveq	r3, #1
 8005342:	2300      	movne	r3, #0
 8005344:	b2db      	uxtb	r3, r3
 8005346:	2b00      	cmp	r3, #0
 8005348:	d002      	beq.n	8005350 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0xe0>
        return EI_IMPULSE_CANCELED;
 800534a:	f06f 0401 	mvn.w	r4, #1
 800534e:	e084      	b.n	800545a <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x1ea>
    }

    result->timing.dsp_us = ei_read_timer_us() - dsp_start_us;
 8005350:	f022 f9a2 	bl	8027698 <_Z16ei_read_timer_usv>
 8005354:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005358:	ebb0 0802 	subs.w	r8, r0, r2
 800535c:	eb61 0903 	sbc.w	r9, r1, r3
 8005360:	4642      	mov	r2, r8
 8005362:	464b      	mov	r3, r9
 8005364:	68f9      	ldr	r1, [r7, #12]
 8005366:	e9c1 233a 	strd	r2, r3, [r1, #232]	; 0xe8
    result->timing.dsp = (int)(result->timing.dsp_us / 1000);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	e9d3 013a 	ldrd	r0, r1, [r3, #232]	; 0xe8
 8005370:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005374:	f04f 0300 	mov.w	r3, #0
 8005378:	f7fb fc90 	bl	8000c9c <__aeabi_ldivmod>
 800537c:	4602      	mov	r2, r0
 800537e:	460b      	mov	r3, r1
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

    if (debug) {
 8005386:	7afb      	ldrb	r3, [r7, #11]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d02d      	beq.n	80053e8 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x178>
        ei_printf("Features (%d ms.): ", result->timing.dsp);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8005392:	4619      	mov	r1, r3
 8005394:	483c      	ldr	r0, [pc, #240]	; (8005488 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x218>)
 8005396:	f000 fa89 	bl	80058ac <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
 800539a:	2300      	movs	r3, #0
 800539c:	667b      	str	r3, [r7, #100]	; 0x64
 800539e:	6a3b      	ldr	r3, [r7, #32]
 80053a0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80053a2:	429a      	cmp	r2, r3
 80053a4:	d21d      	bcs.n	80053e2 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x172>
            ei_printf_float((features_matrix.buffer[ix] - impulse->tflite_input_zeropoint) * impulse->tflite_input_scale);
 80053a6:	69ba      	ldr	r2, [r7, #24]
 80053a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80053aa:	4413      	add	r3, r2
 80053ac:	f993 3000 	ldrsb.w	r3, [r3]
 80053b0:	ee07 3a90 	vmov	s15, r3
 80053b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 80053be:	ee37 7a67 	vsub.f32	s14, s14, s15
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80053c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053cc:	eeb0 0a67 	vmov.f32	s0, s15
 80053d0:	f022 f976 	bl	80276c0 <_Z15ei_printf_floatf>
            ei_printf(" ");
 80053d4:	482d      	ldr	r0, [pc, #180]	; (800548c <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x21c>)
 80053d6:	f000 fa69 	bl	80058ac <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
 80053da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80053dc:	3301      	adds	r3, #1
 80053de:	667b      	str	r3, [r7, #100]	; 0x64
 80053e0:	e7dd      	b.n	800539e <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x12e>
        }
        ei_printf("\n");
 80053e2:	482b      	ldr	r0, [pc, #172]	; (8005490 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x220>)
 80053e4:	f000 fa62 	bl	80058ac <_Z9ei_printfPKcz>
    }

    ctx_start_us = ei_read_timer_us();
 80053e8:	f022 f956 	bl	8027698 <_Z16ei_read_timer_usv>
 80053ec:	4602      	mov	r2, r0
 80053ee:	460b      	mov	r3, r1
 80053f0:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

    EI_IMPULSE_ERROR run_res = inference_tflite_run(impulse,
 80053f4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80053f8:	6bbe      	ldr	r6, [r7, #56]	; 0x38
 80053fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053fc:	607b      	str	r3, [r7, #4]
 80053fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005400:	603a      	str	r2, [r7, #0]
        ctx_start_us,
        output,
        output_labels,
        output_scores,
        static_cast<uint8_t*>(p_tensor_arena.get()),
 8005402:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005406:	4618      	mov	r0, r3
 8005408:	f000 fd90 	bl	8005f2c <_ZNKSt10unique_ptrIvPFvPvEE3getEv>
 800540c:	4602      	mov	r2, r0
    EI_IMPULSE_ERROR run_res = inference_tflite_run(impulse,
 800540e:	7afb      	ldrb	r3, [r7, #11]
 8005410:	9305      	str	r3, [sp, #20]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	9304      	str	r3, [sp, #16]
 8005416:	9203      	str	r2, [sp, #12]
 8005418:	683a      	ldr	r2, [r7, #0]
 800541a:	9202      	str	r2, [sp, #8]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	9301      	str	r3, [sp, #4]
 8005420:	9600      	str	r6, [sp, #0]
 8005422:	4642      	mov	r2, r8
 8005424:	464b      	mov	r3, r9
 8005426:	6978      	ldr	r0, [r7, #20]
 8005428:	f7ff fd0a 	bl	8004e40 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb>
 800542c:	4603      	mov	r3, r0
 800542e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
        result, debug);

    if (run_res != EI_IMPULSE_OK) {
 8005432:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 8005436:	2b00      	cmp	r3, #0
 8005438:	d002      	beq.n	8005440 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x1d0>
        return run_res;
 800543a:	f997 4053 	ldrsb.w	r4, [r7, #83]	; 0x53
 800543e:	e00c      	b.n	800545a <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x1ea>
    }

    result->timing.classification_us = ei_read_timer_us() - ctx_start_us;
 8005440:	f022 f92a 	bl	8027698 <_Z16ei_read_timer_usv>
 8005444:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005448:	1a84      	subs	r4, r0, r2
 800544a:	eb61 0503 	sbc.w	r5, r1, r3
 800544e:	4622      	mov	r2, r4
 8005450:	462b      	mov	r3, r5
 8005452:	68f9      	ldr	r1, [r7, #12]
 8005454:	e9c1 233c 	strd	r2, r3, [r1, #240]	; 0xf0

    return EI_IMPULSE_OK;
 8005458:	2400      	movs	r4, #0
    ei::matrix_i8_t features_matrix(1, impulse->nn_input_frame_size, input->data.int8);
 800545a:	f107 0318 	add.w	r3, r7, #24
 800545e:	4618      	mov	r0, r3
 8005460:	f7fc f94f 	bl	8001702 <_ZN2ei12ei_matrix_i8D1Ev>
    ei_unique_ptr_t p_tensor_arena(nullptr, ei_aligned_free);
 8005464:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005468:	4618      	mov	r0, r3
 800546a:	f000 fbef 	bl	8005c4c <_ZNSt10unique_ptrIvPFvPvEED1Ev>
}
 800546e:	4623      	mov	r3, r4
 8005470:	4618      	mov	r0, r3
 8005472:	376c      	adds	r7, #108	; 0x6c
 8005474:	46bd      	mov	sp, r7
 8005476:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800547a:	bf00      	nop
 800547c:	08001555 	.word	0x08001555
 8005480:	20000034 	.word	0x20000034
 8005484:	08033ddc 	.word	0x08033ddc
 8005488:	08033e04 	.word	0x08033e04
 800548c:	08033e18 	.word	0x08033e18
 8005490:	08033938 	.word	0x08033938

08005494 <run_inference>:
extern "C" EI_IMPULSE_ERROR run_inference(
    const ei_impulse_t *impulse,
    ei::matrix_t *fmatrix,
    ei_impulse_result_t *result,
    bool debug = false)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b086      	sub	sp, #24
 8005498:	af00      	add	r7, sp, #0
 800549a:	60f8      	str	r0, [r7, #12]
 800549c:	60b9      	str	r1, [r7, #8]
 800549e:	607a      	str	r2, [r7, #4]
 80054a0:	70fb      	strb	r3, [r7, #3]
#if (EI_CLASSIFIER_INFERENCING_ENGINE != EI_CLASSIFIER_NONE && EI_CLASSIFIER_INFERENCING_ENGINE != EI_CLASSIFIER_DRPAI)
    EI_IMPULSE_ERROR nn_res = run_nn_inference(impulse, fmatrix, result, debug);
 80054a2:	78fb      	ldrb	r3, [r7, #3]
 80054a4:	687a      	ldr	r2, [r7, #4]
 80054a6:	68b9      	ldr	r1, [r7, #8]
 80054a8:	68f8      	ldr	r0, [r7, #12]
 80054aa:	f7ff fdd7 	bl	800505c <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb>
 80054ae:	4603      	mov	r3, r0
 80054b0:	75fb      	strb	r3, [r7, #23]
    if (nn_res != EI_IMPULSE_OK) {
 80054b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d002      	beq.n	80054c0 <run_inference+0x2c>
        return nn_res;
 80054ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80054be:	e00e      	b.n	80054de <run_inference+0x4a>
            return anomaly_res;
        }
    }
#endif

    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 80054c0:	f022 f8e2 	bl	8027688 <_Z29ei_run_impulse_check_canceledv>
 80054c4:	4603      	mov	r3, r0
 80054c6:	f113 0f02 	cmn.w	r3, #2
 80054ca:	bf0c      	ite	eq
 80054cc:	2301      	moveq	r3, #1
 80054ce:	2300      	movne	r3, #0
 80054d0:	b2db      	uxtb	r3, r3
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d002      	beq.n	80054dc <run_inference+0x48>
        return EI_IMPULSE_CANCELED;
 80054d6:	f06f 0301 	mvn.w	r3, #1
 80054da:	e000      	b.n	80054de <run_inference+0x4a>
    }

    return EI_IMPULSE_OK;
 80054dc:	2300      	movs	r3, #0
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3718      	adds	r7, #24
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}

080054e6 <_ZN14SignalWithAxesD1Ev>:
class SignalWithAxes {
 80054e6:	b580      	push	{r7, lr}
 80054e8:	b082      	sub	sp, #8
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	6078      	str	r0, [r7, #4]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	3310      	adds	r3, #16
 80054f2:	4618      	mov	r0, r3
 80054f4:	f7fe fd67 	bl	8003fc6 <_ZN2ei11ei_signal_tD1Ev>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	4618      	mov	r0, r3
 80054fc:	3708      	adds	r7, #8
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}
	...

08005504 <process_impulse>:
 */
extern "C" EI_IMPULSE_ERROR process_impulse(const ei_impulse_t *impulse,
                                            signal_t *signal,
                                            ei_impulse_result_t *result,
                                            bool debug = false)
{
 8005504:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005508:	b0a5      	sub	sp, #148	; 0x94
 800550a:	af02      	add	r7, sp, #8
 800550c:	60f8      	str	r0, [r7, #12]
 800550e:	60b9      	str	r1, [r7, #8]
 8005510:	607a      	str	r2, [r7, #4]
 8005512:	70fb      	strb	r3, [r7, #3]
 8005514:	2600      	movs	r6, #0

#if (EI_CLASSIFIER_TFLITE_INPUT_QUANTIZED == 1 && (EI_CLASSIFIER_INFERENCING_ENGINE == EI_CLASSIFIER_TFLITE || EI_CLASSIFIER_INFERENCING_ENGINE == EI_CLASSIFIER_TENSAIFLOW)) || EI_CLASSIFIER_INFERENCING_ENGINE == EI_CLASSIFIER_DRPAI
    // Shortcut for quantized image models
    if (can_run_classifier_image_quantized(impulse) == EI_IMPULSE_OK) {
 8005516:	68f8      	ldr	r0, [r7, #12]
 8005518:	f000 f928 	bl	800576c <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse>
 800551c:	4603      	mov	r3, r0
 800551e:	2b00      	cmp	r3, #0
 8005520:	bf0c      	ite	eq
 8005522:	2301      	moveq	r3, #1
 8005524:	2300      	movne	r3, #0
 8005526:	b2db      	uxtb	r3, r3
 8005528:	2b00      	cmp	r3, #0
 800552a:	d008      	beq.n	800553e <process_impulse+0x3a>
        return run_classifier_image_quantized(impulse, signal, result, debug);
 800552c:	78fb      	ldrb	r3, [r7, #3]
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	68b9      	ldr	r1, [r7, #8]
 8005532:	68f8      	ldr	r0, [r7, #12]
 8005534:	f000 f954 	bl	80057e0 <run_classifier_image_quantized>
 8005538:	4603      	mov	r3, r0
 800553a:	461e      	mov	r6, r3
 800553c:	e0ef      	b.n	800571e <process_impulse+0x21a>
    }
#endif

    memset(result, 0, sizeof(ei_impulse_result_t));
 800553e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005542:	2100      	movs	r1, #0
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f02c fe2f 	bl	80321a8 <memset>

    ei::matrix_t features_matrix(1, impulse->nn_input_frame_size);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	691a      	ldr	r2, [r3, #16]
 800554e:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 8005552:	2300      	movs	r3, #0
 8005554:	2101      	movs	r1, #1
 8005556:	f7fc f869 	bl	800162c <_ZN2ei9ei_matrixC1EmmPf>

    uint64_t dsp_start_us = ei_read_timer_us();
 800555a:	f022 f89d 	bl	8027698 <_Z16ei_read_timer_usv>
 800555e:	e9c7 011c 	strd	r0, r1, [r7, #112]	; 0x70

    size_t out_features_index = 0;
 8005562:	2300      	movs	r3, #0
 8005564:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

    for (size_t ix = 0; ix < impulse->dsp_blocks_size; ix++) {
 8005568:	2300      	movs	r3, #0
 800556a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005572:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005576:	429a      	cmp	r2, r3
 8005578:	d27c      	bcs.n	8005674 <process_impulse+0x170>
        ei_model_dsp_t block = impulse->dsp_blocks[ix];
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800557e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005582:	4613      	mov	r3, r2
 8005584:	009b      	lsls	r3, r3, #2
 8005586:	4413      	add	r3, r2
 8005588:	009b      	lsls	r3, r3, #2
 800558a:	440b      	add	r3, r1
 800558c:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8005590:	461d      	mov	r5, r3
 8005592:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005594:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005596:	682b      	ldr	r3, [r5, #0]
 8005598:	6023      	str	r3, [r4, #0]

        if (out_features_index + block.n_output_features > impulse->nn_input_frame_size) {
 800559a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800559c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80055a0:	441a      	add	r2, r3
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	691b      	ldr	r3, [r3, #16]
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d905      	bls.n	80055b6 <process_impulse+0xb2>
            ei_printf("ERR: Would write outside feature buffer\n");
 80055aa:	4860      	ldr	r0, [pc, #384]	; (800572c <process_impulse+0x228>)
 80055ac:	f000 f97e 	bl	80058ac <_Z9ei_printfPKcz>
            return EI_IMPULSE_DSP_ERROR;
 80055b0:	f06f 0604 	mvn.w	r6, #4
 80055b4:	e0ad      	b.n	8005712 <process_impulse+0x20e>
        }

        ei::matrix_t fm(1, block.n_output_features, features_matrix.buffer + out_features_index);
 80055b6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80055b8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80055ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80055be:	009b      	lsls	r3, r3, #2
 80055c0:	4413      	add	r3, r2
 80055c2:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80055c6:	460a      	mov	r2, r1
 80055c8:	2101      	movs	r1, #1
 80055ca:	f7fc f82f 	bl	800162c <_ZN2ei9ei_matrixC1EmmPf>
            ei_printf("ERR: EIDSP_SIGNAL_C_FN_POINTER can only be used when all axes are selected for DSP blocks\n");
            return EI_IMPULSE_DSP_ERROR;
        }
        int ret = block.extract_fn(signal, &fm, block.config, impulse->frequency);
#else
        SignalWithAxes swa(signal, block.axes, block.axes_size, impulse);
 80055ce:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80055d0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80055d2:	f107 0014 	add.w	r0, r7, #20
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	9300      	str	r3, [sp, #0]
 80055da:	460b      	mov	r3, r1
 80055dc:	68b9      	ldr	r1, [r7, #8]
 80055de:	f7ff f9a9 	bl	8004934 <_ZN14SignalWithAxesC1EPN2ei11ei_signal_tEPhjPK10ei_impulse>
        int ret = block.extract_fn(swa.get_signal(), &fm, block.config, impulse->frequency);
 80055e2:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 80055e4:	f107 0314 	add.w	r3, r7, #20
 80055e8:	4618      	mov	r0, r3
 80055ea:	f7ff f9d3 	bl	8004994 <_ZN14SignalWithAxes10get_signalEv>
 80055ee:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80055f6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80055fa:	eeb0 0a67 	vmov.f32	s0, s15
 80055fe:	4619      	mov	r1, r3
 8005600:	47a0      	blx	r4
 8005602:	66f8      	str	r0, [r7, #108]	; 0x6c
#endif

        if (ret != EIDSP_OK) {
 8005604:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005606:	2b00      	cmp	r3, #0
 8005608:	d007      	beq.n	800561a <process_impulse+0x116>
            ei_printf("ERR: Failed to run DSP process (%d)\n", ret);
 800560a:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800560c:	4848      	ldr	r0, [pc, #288]	; (8005730 <process_impulse+0x22c>)
 800560e:	f000 f94d 	bl	80058ac <_Z9ei_printfPKcz>
            return EI_IMPULSE_DSP_ERROR;
 8005612:	f06f 0604 	mvn.w	r6, #4
 8005616:	2400      	movs	r4, #0
 8005618:	e015      	b.n	8005646 <process_impulse+0x142>
        }

        if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 800561a:	f022 f835 	bl	8027688 <_Z29ei_run_impulse_check_canceledv>
 800561e:	4603      	mov	r3, r0
 8005620:	f113 0f02 	cmn.w	r3, #2
 8005624:	bf0c      	ite	eq
 8005626:	2301      	moveq	r3, #1
 8005628:	2300      	movne	r3, #0
 800562a:	b2db      	uxtb	r3, r3
 800562c:	2b00      	cmp	r3, #0
 800562e:	d003      	beq.n	8005638 <process_impulse+0x134>
            return EI_IMPULSE_CANCELED;
 8005630:	f06f 0601 	mvn.w	r6, #1
 8005634:	2400      	movs	r4, #0
 8005636:	e006      	b.n	8005646 <process_impulse+0x142>
        }

        out_features_index += block.n_output_features;
 8005638:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800563a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800563e:	4413      	add	r3, r2
 8005640:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005644:	2401      	movs	r4, #1
 8005646:	f107 0314 	add.w	r3, r7, #20
 800564a:	4618      	mov	r0, r3
 800564c:	f7ff ff4b 	bl	80054e6 <_ZN14SignalWithAxesD1Ev>
 8005650:	2c01      	cmp	r4, #1
 8005652:	d001      	beq.n	8005658 <process_impulse+0x154>
 8005654:	2400      	movs	r4, #0
 8005656:	e000      	b.n	800565a <process_impulse+0x156>
 8005658:	2401      	movs	r4, #1
 800565a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800565e:	4618      	mov	r0, r3
 8005660:	f7fc f80f 	bl	8001682 <_ZN2ei9ei_matrixD1Ev>
 8005664:	2c01      	cmp	r4, #1
 8005666:	d154      	bne.n	8005712 <process_impulse+0x20e>
    for (size_t ix = 0; ix < impulse->dsp_blocks_size; ix++) {
 8005668:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800566c:	3301      	adds	r3, #1
 800566e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005672:	e77c      	b.n	800556e <process_impulse+0x6a>
    }

    result->timing.dsp_us = ei_read_timer_us() - dsp_start_us;
 8005674:	f022 f810 	bl	8027698 <_Z16ei_read_timer_usv>
 8005678:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800567c:	ebb0 0802 	subs.w	r8, r0, r2
 8005680:	eb61 0903 	sbc.w	r9, r1, r3
 8005684:	4642      	mov	r2, r8
 8005686:	464b      	mov	r3, r9
 8005688:	6879      	ldr	r1, [r7, #4]
 800568a:	e9c1 233a 	strd	r2, r3, [r1, #232]	; 0xe8
    result->timing.dsp = (int)(result->timing.dsp_us / 1000);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	e9d3 013a 	ldrd	r0, r1, [r3, #232]	; 0xe8
 8005694:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005698:	f04f 0300 	mov.w	r3, #0
 800569c:	f7fb fafe 	bl	8000c9c <__aeabi_ldivmod>
 80056a0:	4602      	mov	r2, r0
 80056a2:	460b      	mov	r3, r1
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

    if (debug) {
 80056aa:	78fb      	ldrb	r3, [r7, #3]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d020      	beq.n	80056f2 <process_impulse+0x1ee>
        ei_printf("Features (%d ms.): ", result->timing.dsp);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80056b6:	4619      	mov	r1, r3
 80056b8:	481e      	ldr	r0, [pc, #120]	; (8005734 <process_impulse+0x230>)
 80056ba:	f000 f8f7 	bl	80058ac <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
 80056be:	2300      	movs	r3, #0
 80056c0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80056c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80056c4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80056c6:	429a      	cmp	r2, r3
 80056c8:	d210      	bcs.n	80056ec <process_impulse+0x1e8>
            ei_printf_float(features_matrix.buffer[ix]);
 80056ca:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80056cc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80056ce:	009b      	lsls	r3, r3, #2
 80056d0:	4413      	add	r3, r2
 80056d2:	edd3 7a00 	vldr	s15, [r3]
 80056d6:	eeb0 0a67 	vmov.f32	s0, s15
 80056da:	f021 fff1 	bl	80276c0 <_Z15ei_printf_floatf>
            ei_printf(" ");
 80056de:	4816      	ldr	r0, [pc, #88]	; (8005738 <process_impulse+0x234>)
 80056e0:	f000 f8e4 	bl	80058ac <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
 80056e4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80056e6:	3301      	adds	r3, #1
 80056e8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80056ea:	e7ea      	b.n	80056c2 <process_impulse+0x1be>
        }
        ei_printf("\n");
 80056ec:	4813      	ldr	r0, [pc, #76]	; (800573c <process_impulse+0x238>)
 80056ee:	f000 f8dd 	bl	80058ac <_Z9ei_printfPKcz>
    }

    if (debug) {
 80056f2:	78fb      	ldrb	r3, [r7, #3]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d002      	beq.n	80056fe <process_impulse+0x1fa>
        ei_printf("Running impulse...\n");
 80056f8:	4811      	ldr	r0, [pc, #68]	; (8005740 <process_impulse+0x23c>)
 80056fa:	f000 f8d7 	bl	80058ac <_Z9ei_printfPKcz>
    }

    return run_inference(impulse, &features_matrix, result, debug);
 80056fe:	78fb      	ldrb	r3, [r7, #3]
 8005700:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8005704:	687a      	ldr	r2, [r7, #4]
 8005706:	68f8      	ldr	r0, [r7, #12]
 8005708:	f7ff fec4 	bl	8005494 <run_inference>
 800570c:	4603      	mov	r3, r0
 800570e:	461e      	mov	r6, r3
 8005710:	e000      	b.n	8005714 <process_impulse+0x210>
            return EI_IMPULSE_DSP_ERROR;
 8005712:	bf00      	nop
    ei::matrix_t features_matrix(1, impulse->nn_input_frame_size);
 8005714:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005718:	4618      	mov	r0, r3
 800571a:	f7fb ffb2 	bl	8001682 <_ZN2ei9ei_matrixD1Ev>

}
 800571e:	4633      	mov	r3, r6
 8005720:	4618      	mov	r0, r3
 8005722:	378c      	adds	r7, #140	; 0x8c
 8005724:	46bd      	mov	sp, r7
 8005726:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800572a:	bf00      	nop
 800572c:	08033e1c 	.word	0x08033e1c
 8005730:	08033ddc 	.word	0x08033ddc
 8005734:	08033e04 	.word	0x08033e04
 8005738:	08033e18 	.word	0x08033e18
 800573c:	08033938 	.word	0x08033938
 8005740:	08033e48 	.word	0x08033e48

08005744 <ei_construct_impulse>:
#if EI_CLASSIFIER_STUDIO_VERSION < 3
/**
 * @brief      Construct impulse from macros - for run_classifer compatibility
 */
extern "C" const ei_impulse_t ei_construct_impulse()
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b082      	sub	sp, #8
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]

const ei_impulse_t impulse =
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	4a06      	ldr	r2, [pc, #24]	; (8005768 <ei_construct_impulse+0x24>)
 8005750:	4618      	mov	r0, r3
 8005752:	4611      	mov	r1, r2
 8005754:	23a4      	movs	r3, #164	; 0xa4
 8005756:	461a      	mov	r2, r3
 8005758:	f02c fcfe 	bl	8032158 <memcpy>
    .model_reset = NULL,
#endif
    .categories = ei_classifier_inferencing_categories
    };

    return impulse;
 800575c:	bf00      	nop
}
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	3708      	adds	r7, #8
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}
 8005766:	bf00      	nop
 8005768:	0803405c 	.word	0x0803405c

0800576c <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse>:
#endif

/**
 * Check if the current impulse could be used by 'run_classifier_image_quantized'
 */
__attribute__((unused)) static EI_IMPULSE_ERROR can_run_classifier_image_quantized(const ei_impulse_t *impulse) {
 800576c:	b480      	push	{r7}
 800576e:	b083      	sub	sp, #12
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]

    if (impulse->inferencing_engine != EI_CLASSIFIER_TFLITE
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005778:	2b02      	cmp	r3, #2
 800577a:	d00a      	beq.n	8005792 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x26>
        && impulse->inferencing_engine != EI_CLASSIFIER_TENSAIFLOW
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005780:	2b05      	cmp	r3, #5
 8005782:	d006      	beq.n	8005792 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x26>
        && impulse->inferencing_engine != EI_CLASSIFIER_DRPAI) // check later
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005788:	2b07      	cmp	r3, #7
 800578a:	d002      	beq.n	8005792 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x26>
    {
        return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
 800578c:	f06f 0309 	mvn.w	r3, #9
 8005790:	e01d      	b.n	80057ce <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x62>
    }

    if (impulse->has_anomaly == 1){
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005798:	2b01      	cmp	r3, #1
 800579a:	d102      	bne.n	80057a2 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x36>
        return EI_IMPULSE_ONLY_SUPPORTED_FOR_IMAGES;
 800579c:	f06f 0308 	mvn.w	r3, #8
 80057a0:	e015      	b.n	80057ce <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x62>
    }

        // Check if we have a quantized NN Input layer (input is always quantized for DRP-AI)
    if (impulse->tflite_input_quantized != 1) {
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d002      	beq.n	80057b2 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x46>
        return EI_IMPULSE_ONLY_SUPPORTED_FOR_IMAGES;
 80057ac:	f06f 0308 	mvn.w	r3, #8
 80057b0:	e00d      	b.n	80057ce <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x62>
    }

    // And if we have one DSP block which operates on images...
    if (impulse->dsp_blocks_size != 1 || impulse->dsp_blocks[0].extract_fn != extract_image_features) {
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d105      	bne.n	80057c6 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x5a>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	4a06      	ldr	r2, [pc, #24]	; (80057dc <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x70>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d002      	beq.n	80057cc <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x60>
        return EI_IMPULSE_ONLY_SUPPORTED_FOR_IMAGES;
 80057c6:	f06f 0308 	mvn.w	r3, #8
 80057ca:	e000      	b.n	80057ce <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x62>
    }

    return EI_IMPULSE_OK;
 80057cc:	2300      	movs	r3, #0
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	370c      	adds	r7, #12
 80057d2:	46bd      	mov	sp, r7
 80057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d8:	4770      	bx	lr
 80057da:	bf00      	nop
 80057dc:	080042a9 	.word	0x080042a9

080057e0 <run_classifier_image_quantized>:
extern "C" EI_IMPULSE_ERROR run_classifier_image_quantized(
    const ei_impulse_t *impulse,
    signal_t *signal,
    ei_impulse_result_t *result,
    bool debug = false)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b086      	sub	sp, #24
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	60f8      	str	r0, [r7, #12]
 80057e8:	60b9      	str	r1, [r7, #8]
 80057ea:	607a      	str	r2, [r7, #4]
 80057ec:	70fb      	strb	r3, [r7, #3]
    EI_IMPULSE_ERROR verify_res = can_run_classifier_image_quantized(impulse);
 80057ee:	68f8      	ldr	r0, [r7, #12]
 80057f0:	f7ff ffbc 	bl	800576c <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse>
 80057f4:	4603      	mov	r3, r0
 80057f6:	75fb      	strb	r3, [r7, #23]
    if (verify_res != EI_IMPULSE_OK) {
 80057f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d002      	beq.n	8005806 <run_classifier_image_quantized+0x26>
        return verify_res;
 8005800:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005804:	e00d      	b.n	8005822 <run_classifier_image_quantized+0x42>
    }

    memset(result, 0, sizeof(ei_impulse_result_t));
 8005806:	f44f 7280 	mov.w	r2, #256	; 0x100
 800580a:	2100      	movs	r1, #0
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f02c fccb 	bl	80321a8 <memset>

    return run_nn_inference_image_quantized(impulse, signal, result, debug);
 8005812:	78fb      	ldrb	r3, [r7, #3]
 8005814:	687a      	ldr	r2, [r7, #4]
 8005816:	68b9      	ldr	r1, [r7, #8]
 8005818:	68f8      	ldr	r0, [r7, #12]
 800581a:	f7ff fd29 	bl	8005270 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb>
 800581e:	4603      	mov	r3, r0
 8005820:	bf00      	nop

}
 8005822:	4618      	mov	r0, r3
 8005824:	3718      	adds	r7, #24
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}

0800582a <run_classifier>:
 */
extern "C" EI_IMPULSE_ERROR run_classifier(
    signal_t *signal,
    ei_impulse_result_t *result,
    bool debug = false)
{
 800582a:	b580      	push	{r7, lr}
 800582c:	b0ae      	sub	sp, #184	; 0xb8
 800582e:	af00      	add	r7, sp, #0
 8005830:	60f8      	str	r0, [r7, #12]
 8005832:	60b9      	str	r1, [r7, #8]
 8005834:	4613      	mov	r3, r2
 8005836:	71fb      	strb	r3, [r7, #7]
#if EI_CLASSIFIER_STUDIO_VERSION < 3
        const ei_impulse_t impulse = ei_construct_impulse();
 8005838:	f107 0314 	add.w	r3, r7, #20
 800583c:	4618      	mov	r0, r3
 800583e:	f7ff ff81 	bl	8005744 <ei_construct_impulse>
#else
       const ei_impulse_t impulse = ei_default_impulse;
#endif
    return process_impulse(&impulse, signal, result, debug);
 8005842:	79fb      	ldrb	r3, [r7, #7]
 8005844:	f107 0014 	add.w	r0, r7, #20
 8005848:	68ba      	ldr	r2, [r7, #8]
 800584a:	68f9      	ldr	r1, [r7, #12]
 800584c:	f7ff fe5a 	bl	8005504 <process_impulse>
 8005850:	4603      	mov	r3, r0
}
 8005852:	4618      	mov	r0, r3
 8005854:	37b8      	adds	r7, #184	; 0xb8
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}
	...

0800585c <_Z6vprintPKcSt9__va_list>:
/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
float features[] =
		{1279.2060, 1536.0835, 1536.4737, 1534.8988, 1538.5694, 1791.0352, 1534.9339, 1535.1841, 1538.4926, 1530.2236, 1282.9574, 1534.5426, 1279.1321, 1541.1327, 1534.7125, 1534.5404, 1542.0519, 1792.7286, 1526.8600, 1543.5307, 1802.2556, 2051.1182, 1772.7264, 1542.0222, 1794.7253, 1519.9242, 1553.3715, 1784.4459, 1251.8288, 1310.7237, 1798.5710, 1797.4764, 1770.7899, 1261.9833, 1284.2813, 1285.8882, 1545.2028, 1249.0045, 1314.5444, 1514.3916, 1298.2039, 1816.5235, 1485.7560, 1591.7667, 1469.5772, 1611.0728, 1749.4354, 1843.1364, 1716.5899, 2034.3441, 3194.9452, -18421.1549, 5435.8034, 12902.5358, -28890.0420, 31510.5646, 685.1447, -24592.9184, -8079.1743, -8532.6863, -2215.1476, -3005.6811, -4859.3972, -5118.8958, -681.9285, 3917.0156, 4151.8727, 9095.1016, 3488.9416, -4462.5021, 4757.4698, 12838.4739, 13113.8332, 7192.3407, -9651.6729, -11355.3410, -2742.0928, 5298.0306, 8280.3185, 6884.0653, 377.4861, -5088.0643, -13083.0518, -11757.6964, -8397.8751, 3639.4366, 11226.2833, 12826.7770, 8207.2456, 6359.7408, 4986.4968, 2393.9876, -1842.7366, -2366.1676, 4683.1040, 9304.2909, 7953.0607, 881.7485, -3996.5260, -10697.1703, -11282.1769, -8888.0920, 1005.5057, 7912.9753, 9540.9773, 3039.3982, -1646.1256, -2105.1670, 3874.7426, 8097.7130, 8317.8457, 6406.5270, 3505.6420, 11.0893, -2624.2422, -3930.8954, -5203.7185, -4772.1039, -3674.6126, -1113.3233, 37.7334, 3020.6556, 3847.9817, 2028.7180, 1704.9333, 70.1517, 221.2607, 4821.4180, 9544.0444, 10630.8714, 8173.4346, 3329.5582, -1341.5961, -3030.9453, -3349.2461, -3227.3483, -448.4391, 4102.6601, 3512.8567, 526.9972, -2492.5021, -2948.0222, 1710.0090, 6082.7790, 6070.9452, 3562.8569, -288.4478, -3300.5397, -2581.2935, -493.2247, 3113.5865, 8802.3037, 10661.7017, 6130.2127, -1513.9163, -7485.0021, -7489.4448, 1.2621, 6202.4398, 8291.9321, 4934.0973, -606.4532, -2290.9345, -214.3485, 2907.4788, 4014.3334, 1170.2059, -2332.5286, -2407.2917, 989.5994, 5275.7837, 6924.4863, 3710.2407, -919.0971, -1908.7107, -125.7186, 1915.2545, 3837.4877};
void vprint(const char *fmt, va_list argp)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b0b4      	sub	sp, #208	; 0xd0
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
 8005864:	6039      	str	r1, [r7, #0]
    char string[200];
    if(0 < vsprintf(string, fmt, argp)) // build string
 8005866:	f107 0308 	add.w	r3, r7, #8
 800586a:	683a      	ldr	r2, [r7, #0]
 800586c:	6879      	ldr	r1, [r7, #4]
 800586e:	4618      	mov	r0, r3
 8005870:	f02d f8f0 	bl	8032a54 <vsiprintf>
 8005874:	4603      	mov	r3, r0
 8005876:	2b00      	cmp	r3, #0
 8005878:	bfcc      	ite	gt
 800587a:	2301      	movgt	r3, #1
 800587c:	2300      	movle	r3, #0
 800587e:	b2db      	uxtb	r3, r3
 8005880:	2b00      	cmp	r3, #0
 8005882:	d00d      	beq.n	80058a0 <_Z6vprintPKcSt9__va_list+0x44>
    {
    	HAL_UART_Transmit(&huart2, (uint8_t*)string, strlen(string), 0xffffff);
 8005884:	f107 0308 	add.w	r3, r7, #8
 8005888:	4618      	mov	r0, r3
 800588a:	f7fa fcfb 	bl	8000284 <strlen>
 800588e:	4603      	mov	r3, r0
 8005890:	b29a      	uxth	r2, r3
 8005892:	f107 0108 	add.w	r1, r7, #8
 8005896:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800589a:	4803      	ldr	r0, [pc, #12]	; (80058a8 <_Z6vprintPKcSt9__va_list+0x4c>)
 800589c:	f00a fe48 	bl	8010530 <HAL_UART_Transmit>
    }
}
 80058a0:	bf00      	nop
 80058a2:	37d0      	adds	r7, #208	; 0xd0
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}
 80058a8:	200008c0 	.word	0x200008c0

080058ac <_Z9ei_printfPKcz>:

void ei_printf(const char *format, ...) {
 80058ac:	b40f      	push	{r0, r1, r2, r3}
 80058ae:	b580      	push	{r7, lr}
 80058b0:	b082      	sub	sp, #8
 80058b2:	af00      	add	r7, sp, #0
    va_list myargs;
    va_start(myargs, format);
 80058b4:	f107 0314 	add.w	r3, r7, #20
 80058b8:	607b      	str	r3, [r7, #4]
    vprint(format, myargs);
 80058ba:	6879      	ldr	r1, [r7, #4]
 80058bc:	6938      	ldr	r0, [r7, #16]
 80058be:	f7ff ffcd 	bl	800585c <_Z6vprintPKcSt9__va_list>
    va_end(myargs);
}
 80058c2:	bf00      	nop
 80058c4:	3708      	adds	r7, #8
 80058c6:	46bd      	mov	sp, r7
 80058c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80058cc:	b004      	add	sp, #16
 80058ce:	4770      	bx	lr

080058d0 <_Z16get_feature_datajjPf>:
int get_feature_data(size_t offset, size_t length, float *out_ptr) {
 80058d0:	b480      	push	{r7}
 80058d2:	b087      	sub	sp, #28
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	60f8      	str	r0, [r7, #12]
 80058d8:	60b9      	str	r1, [r7, #8]
 80058da:	607a      	str	r2, [r7, #4]
	 for (size_t var = 0; var < sizeof(features)/sizeof(features[0]); ++var) {
 80058dc:	2300      	movs	r3, #0
 80058de:	617b      	str	r3, [r7, #20]
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	2bb1      	cmp	r3, #177	; 0xb1
 80058e4:	d80f      	bhi.n	8005906 <_Z16get_feature_datajjPf+0x36>
		out_ptr[var] = (features+offset)[var];
 80058e6:	68fa      	ldr	r2, [r7, #12]
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	4413      	add	r3, r2
 80058ec:	009b      	lsls	r3, r3, #2
 80058ee:	4a09      	ldr	r2, [pc, #36]	; (8005914 <_Z16get_feature_datajjPf+0x44>)
 80058f0:	441a      	add	r2, r3
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	009b      	lsls	r3, r3, #2
 80058f6:	6879      	ldr	r1, [r7, #4]
 80058f8:	440b      	add	r3, r1
 80058fa:	6812      	ldr	r2, [r2, #0]
 80058fc:	601a      	str	r2, [r3, #0]
	 for (size_t var = 0; var < sizeof(features)/sizeof(features[0]); ++var) {
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	3301      	adds	r3, #1
 8005902:	617b      	str	r3, [r7, #20]
 8005904:	e7ec      	b.n	80058e0 <_Z16get_feature_datajjPf+0x10>
	}
	 return 0;
 8005906:	2300      	movs	r3, #0
}
 8005908:	4618      	mov	r0, r3
 800590a:	371c      	adds	r7, #28
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr
 8005914:	2000004c 	.word	0x2000004c

08005918 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b0ca      	sub	sp, #296	; 0x128
 800591c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  uint16_t maxym = 0;
 800591e:	2300      	movs	r3, #0
 8005920:	f8a7 311e 	strh.w	r3, [r7, #286]	; 0x11e
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005924:	f002 f8c2 	bl	8007aac <HAL_Init>

  /* USER CODE BEGIN Init */
	signal_t signal;
 8005928:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800592c:	4618      	mov	r0, r3
 800592e:	f7fe fb3d 	bl	8003fac <_ZN2ei11ei_signal_tC1Ev>
	signal.total_length = EI_CLASSIFIER_DSP_INPUT_FRAME_SIZE;
 8005932:	f242 2360 	movw	r3, #8800	; 0x2260
 8005936:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	signal.get_data = &get_feature_data;
 800593a:	4b4f      	ldr	r3, [pc, #316]	; (8005a78 <main+0x160>)
 800593c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005940:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8005944:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8005948:	4611      	mov	r1, r2
 800594a:	4618      	mov	r0, r3
 800594c:	f000 fa94 	bl	8005e78 <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSA_JjjS0_EEEE5valueERS2_E4typeEOS8_>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005950:	f000 f8a8 	bl	8005aa4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005954:	f7fb fcae 	bl	80012b4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8005958:	f7fb fd2a 	bl	80013b0 <MX_I2C1_Init>
  MX_SPI1_Init();
 800595c:	f001 fd90 	bl	8007480 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8005960:	f029 fa84 	bl	802ee6c <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8005964:	f7fb fb8a 	bl	800107c <MX_ADC1_Init>
  MX_TIM2_Init();
 8005968:	f001 ff3a 	bl	80077e0 <MX_TIM2_Init>
  MX_CRC_Init();
 800596c:	f7fb fc60 	bl	8001230 <MX_CRC_Init>
  MX_USART2_UART_Init();
 8005970:	f002 f800 	bl	8007974 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8005974:	2100      	movs	r1, #0
 8005976:	4841      	ldr	r0, [pc, #260]	; (8005a7c <main+0x164>)
 8005978:	f009 f820 	bl	800e9bc <HAL_TIM_PWM_Start>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 800597c:	2100      	movs	r1, #0
 800597e:	4840      	ldr	r0, [pc, #256]	; (8005a80 <main+0x168>)
 8005980:	f002 fc44 	bl	800820c <HAL_ADCEx_Calibration_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  	for (int var = 0; var < sizeof(features)/sizeof(features[0]); ++var) {
 8005984:	2300      	movs	r3, #0
 8005986:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800598a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800598e:	2bb1      	cmp	r3, #177	; 0xb1
 8005990:	d813      	bhi.n	80059ba <main+0xa2>
		ei_printf_float(features[var]);
 8005992:	4a3c      	ldr	r2, [pc, #240]	; (8005a84 <main+0x16c>)
 8005994:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005998:	009b      	lsls	r3, r3, #2
 800599a:	4413      	add	r3, r2
 800599c:	edd3 7a00 	vldr	s15, [r3]
 80059a0:	eeb0 0a67 	vmov.f32	s0, s15
 80059a4:	f021 fe8c 	bl	80276c0 <_Z15ei_printf_floatf>
		ei_printf(" ");
 80059a8:	4837      	ldr	r0, [pc, #220]	; (8005a88 <main+0x170>)
 80059aa:	f7ff ff7f 	bl	80058ac <_Z9ei_printfPKcz>
  	for (int var = 0; var < sizeof(features)/sizeof(features[0]); ++var) {
 80059ae:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80059b2:	3301      	adds	r3, #1
 80059b4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80059b8:	e7e7      	b.n	800598a <main+0x72>
	}
  	ei_printf("\n\n\n");
 80059ba:	4834      	ldr	r0, [pc, #208]	; (8005a8c <main+0x174>)
 80059bc:	f7ff ff76 	bl	80058ac <_Z9ei_printfPKcz>
	ei_impulse_result_t result = { 0 };
 80059c0:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80059c4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80059c8:	4618      	mov	r0, r3
 80059ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80059ce:	461a      	mov	r2, r3
 80059d0:	2100      	movs	r1, #0
 80059d2:	f02c fbe9 	bl	80321a8 <memset>
	EI_IMPULSE_ERROR res = run_classifier(&signal, &result, true);
 80059d6:	4639      	mov	r1, r7
 80059d8:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80059dc:	2201      	movs	r2, #1
 80059de:	4618      	mov	r0, r3
 80059e0:	f7ff ff23 	bl	800582a <run_classifier>
 80059e4:	4603      	mov	r3, r0
 80059e6:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
	ei_printf("run_classifier returned: %d\n", res);
 80059ea:	f997 311d 	ldrsb.w	r3, [r7, #285]	; 0x11d
 80059ee:	4619      	mov	r1, r3
 80059f0:	4827      	ldr	r0, [pc, #156]	; (8005a90 <main+0x178>)
 80059f2:	f7ff ff5b 	bl	80058ac <_Z9ei_printfPKcz>

	ei_printf("Predictions (DSP: %d ms., Classification: %d ms., Anomaly: %d ms.): \n",
 80059f6:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80059fa:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80059fe:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 8005a02:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8005a06:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005a0a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005a0e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8005a12:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005a16:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005a1a:	481e      	ldr	r0, [pc, #120]	; (8005a94 <main+0x17c>)
 8005a1c:	f7ff ff46 	bl	80058ac <_Z9ei_printfPKcz>
	  result.timing.dsp, result.timing.classification, result.timing.anomaly);

	// print the predictions
	ei_printf("[");
 8005a20:	481d      	ldr	r0, [pc, #116]	; (8005a98 <main+0x180>)
 8005a22:	f7ff ff43 	bl	80058ac <_Z9ei_printfPKcz>
	for (size_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
 8005a26:	2300      	movs	r3, #0
 8005a28:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005a2c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005a30:	2b02      	cmp	r3, #2
 8005a32:	d81c      	bhi.n	8005a6e <main+0x156>
	  ei_printf_float(result.classification[ix].value);
 8005a34:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8005a38:	f5a3 7294 	sub.w	r2, r3, #296	; 0x128
 8005a3c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005a40:	3301      	adds	r3, #1
 8005a42:	00db      	lsls	r3, r3, #3
 8005a44:	4413      	add	r3, r2
 8005a46:	3304      	adds	r3, #4
 8005a48:	edd3 7a00 	vldr	s15, [r3]
 8005a4c:	eeb0 0a67 	vmov.f32	s0, s15
 8005a50:	f021 fe36 	bl	80276c0 <_Z15ei_printf_floatf>
	#if EI_CLASSIFIER_HAS_ANOMALY == 1
	  ei_printf(", ");
	#else
	  if (ix != EI_CLASSIFIER_LABEL_COUNT - 1) {
 8005a54:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005a58:	2b02      	cmp	r3, #2
 8005a5a:	d002      	beq.n	8005a62 <main+0x14a>
		  ei_printf(", ");
 8005a5c:	480f      	ldr	r0, [pc, #60]	; (8005a9c <main+0x184>)
 8005a5e:	f7ff ff25 	bl	80058ac <_Z9ei_printfPKcz>
	for (size_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
 8005a62:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005a66:	3301      	adds	r3, #1
 8005a68:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005a6c:	e7de      	b.n	8005a2c <main+0x114>
	#endif
	}
	#if EI_CLASSIFIER_HAS_ANOMALY == 1
	ei_printf_float(result.anomaly);
	#endif
	ei_printf("]\n\n\n");
 8005a6e:	480c      	ldr	r0, [pc, #48]	; (8005aa0 <main+0x188>)
 8005a70:	f7ff ff1c 	bl	80058ac <_Z9ei_printfPKcz>




//		CDC_Transmit_FS(reinterpret_cast<uint8_t*>(&maxym), 2*200);
  }
 8005a74:	e786      	b.n	8005984 <main+0x6c>
 8005a76:	bf00      	nop
 8005a78:	080058d1 	.word	0x080058d1
 8005a7c:	20000874 	.word	0x20000874
 8005a80:	20000744 	.word	0x20000744
 8005a84:	2000004c 	.word	0x2000004c
 8005a88:	08033e18 	.word	0x08033e18
 8005a8c:	0803412c 	.word	0x0803412c
 8005a90:	08034130 	.word	0x08034130
 8005a94:	08034150 	.word	0x08034150
 8005a98:	08034198 	.word	0x08034198
 8005a9c:	0803419c 	.word	0x0803419c
 8005aa0:	080341a0 	.word	0x080341a0

08005aa4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b09e      	sub	sp, #120	; 0x78
 8005aa8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005aaa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005aae:	2228      	movs	r2, #40	; 0x28
 8005ab0:	2100      	movs	r1, #0
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f02c fb78 	bl	80321a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005ab8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005abc:	2200      	movs	r2, #0
 8005abe:	601a      	str	r2, [r3, #0]
 8005ac0:	605a      	str	r2, [r3, #4]
 8005ac2:	609a      	str	r2, [r3, #8]
 8005ac4:	60da      	str	r2, [r3, #12]
 8005ac6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005ac8:	463b      	mov	r3, r7
 8005aca:	223c      	movs	r2, #60	; 0x3c
 8005acc:	2100      	movs	r1, #0
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f02c fb6a 	bl	80321a8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8005ad4:	2303      	movs	r3, #3
 8005ad6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005ad8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005adc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005ae6:	2310      	movs	r3, #16
 8005ae8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005aea:	2302      	movs	r3, #2
 8005aec:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005aee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005af2:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8005af4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8005af8:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005afa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005afe:	4618      	mov	r0, r3
 8005b00:	f006 fbee 	bl	800c2e0 <HAL_RCC_OscConfig>
 8005b04:	4603      	mov	r3, r0
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	bf14      	ite	ne
 8005b0a:	2301      	movne	r3, #1
 8005b0c:	2300      	moveq	r3, #0
 8005b0e:	b2db      	uxtb	r3, r3
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d001      	beq.n	8005b18 <_Z18SystemClock_Configv+0x74>
  {
    Error_Handler();
 8005b14:	f000 f838 	bl	8005b88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005b18:	230f      	movs	r3, #15
 8005b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005b1c:	2302      	movs	r3, #2
 8005b1e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005b20:	2300      	movs	r3, #0
 8005b22:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005b24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b28:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8005b2e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005b32:	2102      	movs	r1, #2
 8005b34:	4618      	mov	r0, r3
 8005b36:	f007 fd87 	bl	800d648 <HAL_RCC_ClockConfig>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	bf14      	ite	ne
 8005b40:	2301      	movne	r3, #1
 8005b42:	2300      	moveq	r3, #0
 8005b44:	b2db      	uxtb	r3, r3
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d001      	beq.n	8005b4e <_Z18SystemClock_Configv+0xaa>
  {
    Error_Handler();
 8005b4a:	f000 f81d 	bl	8005b88 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1
 8005b4e:	4b0d      	ldr	r3, [pc, #52]	; (8005b84 <_Z18SystemClock_Configv+0xe0>)
 8005b50:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8005b52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005b56:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005b60:	463b      	mov	r3, r7
 8005b62:	4618      	mov	r0, r3
 8005b64:	f008 f84c 	bl	800dc00 <HAL_RCCEx_PeriphCLKConfig>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	bf14      	ite	ne
 8005b6e:	2301      	movne	r3, #1
 8005b70:	2300      	moveq	r3, #0
 8005b72:	b2db      	uxtb	r3, r3
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d001      	beq.n	8005b7c <_Z18SystemClock_Configv+0xd8>
  {
    Error_Handler();
 8005b78:	f000 f806 	bl	8005b88 <Error_Handler>
  }
}
 8005b7c:	bf00      	nop
 8005b7e:	3778      	adds	r7, #120	; 0x78
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}
 8005b84:	000200a0 	.word	0x000200a0

08005b88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005b8c:	b672      	cpsid	i
}
 8005b8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005b90:	e7fe      	b.n	8005b90 <Error_Handler+0x8>

08005b92 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8005b92:	b480      	push	{r7}
 8005b94:	b083      	sub	sp, #12
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	6078      	str	r0, [r7, #4]
 8005b9a:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8005b9c:	bf00      	nop
 8005b9e:	370c      	adds	r7, #12
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr

08005ba8 <_ZSt4moveIRmEONSt16remove_referenceIT_E4typeEOS2_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8005ba8:	b480      	push	{r7}
 8005baa:	b083      	sub	sp, #12
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	370c      	adds	r7, #12
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr

08005bbe <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 8005bbe:	b5b0      	push	{r4, r5, r7, lr}
 8005bc0:	b082      	sub	sp, #8
 8005bc2:	af00      	add	r7, sp, #0
 8005bc4:	ed87 0a01 	vstr	s0, [r7, #4]
 8005bc8:	6038      	str	r0, [r7, #0]
      return pow(__type(__x), __type(__y));
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f7fa fcc6 	bl	800055c <__aeabi_f2d>
 8005bd0:	4604      	mov	r4, r0
 8005bd2:	460d      	mov	r5, r1
 8005bd4:	6838      	ldr	r0, [r7, #0]
 8005bd6:	f7fa fcaf 	bl	8000538 <__aeabi_i2d>
 8005bda:	4602      	mov	r2, r0
 8005bdc:	460b      	mov	r3, r1
 8005bde:	ec43 2b11 	vmov	d1, r2, r3
 8005be2:	ec45 4b10 	vmov	d0, r4, r5
 8005be6:	f02a f93d 	bl	802fe64 <pow>
 8005bea:	eeb0 7a40 	vmov.f32	s14, s0
 8005bee:	eef0 7a60 	vmov.f32	s15, s1
    }
 8005bf2:	eeb0 0a47 	vmov.f32	s0, s14
 8005bf6:	eef0 0a67 	vmov.f32	s1, s15
 8005bfa:	3708      	adds	r7, #8
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bdb0      	pop	{r4, r5, r7, pc}

08005c00 <_ZNSt15__uniq_ptr_dataIvPFvPvELb1ELb1EECI1St15__uniq_ptr_implIvS2_EIS2_EES0_OT_>:
  template <typename _Tp, typename _Dp,
	    bool = is_move_constructible<_Dp>::value,
	    bool = is_move_assignable<_Dp>::value>
    struct __uniq_ptr_data : __uniq_ptr_impl<_Tp, _Dp>
    {
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b084      	sub	sp, #16
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	60f8      	str	r0, [r7, #12]
 8005c08:	60b9      	str	r1, [r7, #8]
 8005c0a:	607a      	str	r2, [r7, #4]
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	68b9      	ldr	r1, [r7, #8]
 8005c10:	687a      	ldr	r2, [r7, #4]
 8005c12:	4618      	mov	r0, r3
 8005c14:	f000 f9c3 	bl	8005f9e <_ZNSt15__uniq_ptr_implIvPFvPvEEC1IS2_EES0_OT_>
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3710      	adds	r7, #16
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}

08005c22 <_ZNSt10unique_ptrIvPFvPvEEC1IS2_vEES0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOS7_E4typeE>:
       *
       * The deleter will be initialized with @p std::move(__d)
       */
      template<typename _Del = deleter_type,
	       typename = _Require<is_move_constructible<_Del>>>
	unique_ptr(pointer __p,
 8005c22:	b590      	push	{r4, r7, lr}
 8005c24:	b085      	sub	sp, #20
 8005c26:	af00      	add	r7, sp, #0
 8005c28:	60f8      	str	r0, [r7, #12]
 8005c2a:	60b9      	str	r1, [r7, #8]
 8005c2c:	607a      	str	r2, [r7, #4]
		   __enable_if_t<!is_lvalue_reference<_Del>::value,
				 _Del&&> __d) noexcept
	: _M_t(__p, std::move(__d))
 8005c2e:	68fc      	ldr	r4, [r7, #12]
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f000 f9a9 	bl	8005f88 <_ZSt4moveIRPFvPvEEONSt16remove_referenceIT_E4typeEOS5_>
 8005c36:	4603      	mov	r3, r0
 8005c38:	461a      	mov	r2, r3
 8005c3a:	68b9      	ldr	r1, [r7, #8]
 8005c3c:	4620      	mov	r0, r4
 8005c3e:	f7ff ffdf 	bl	8005c00 <_ZNSt15__uniq_ptr_dataIvPFvPvELb1ELb1EECI1St15__uniq_ptr_implIvS2_EIS2_EES0_OT_>
	{ }
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	4618      	mov	r0, r3
 8005c46:	3714      	adds	r7, #20
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd90      	pop	{r4, r7, pc}

08005c4c <_ZNSt10unique_ptrIvPFvPvEED1Ev>:
	unique_ptr(auto_ptr<_Up>&& __u) noexcept;
#pragma GCC diagnostic pop
#endif

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
 8005c4c:	b590      	push	{r4, r7, lr}
 8005c4e:	b085      	sub	sp, #20
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	4618      	mov	r0, r3
 8005c58:	f000 f9b7 	bl	8005fca <_ZNSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>
 8005c5c:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d00b      	beq.n	8005c7e <_ZNSt10unique_ptrIvPFvPvEED1Ev+0x32>
	  get_deleter()(std::move(__ptr));
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f000 f9bc 	bl	8005fe4 <_ZNSt10unique_ptrIvPFvPvEE11get_deleterEv>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	681c      	ldr	r4, [r3, #0]
 8005c70:	68f8      	ldr	r0, [r7, #12]
 8005c72:	f000 f9c4 	bl	8005ffe <_ZSt4moveIRPvEONSt16remove_referenceIT_E4typeEOS3_>
 8005c76:	4603      	mov	r3, r0
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	47a0      	blx	r4
	__ptr = pointer();
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	2200      	movs	r2, #0
 8005c82:	601a      	str	r2, [r3, #0]
      }
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	4618      	mov	r0, r3
 8005c88:	3714      	adds	r7, #20
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd90      	pop	{r4, r7, pc}

08005c8e <_ZSt3maxIfERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8005c8e:	b480      	push	{r7}
 8005c90:	b083      	sub	sp, #12
 8005c92:	af00      	add	r7, sp, #0
 8005c94:	6078      	str	r0, [r7, #4]
 8005c96:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	ed93 7a00 	vldr	s14, [r3]
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	edd3 7a00 	vldr	s15, [r3]
 8005ca4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005ca8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cac:	d501      	bpl.n	8005cb2 <_ZSt3maxIfERKT_S2_S2_+0x24>
	return __b;
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	e000      	b.n	8005cb4 <_ZSt3maxIfERKT_S2_S2_+0x26>
      return __a;
 8005cb2:	687b      	ldr	r3, [r7, #4]
    }
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	370c      	adds	r7, #12
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr

08005cc0 <_ZNKSt8functionIFijjPfEEclEjjS0_>:
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 8005cc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cc4:	b084      	sub	sp, #16
 8005cc6:	af00      	add	r7, sp, #0
 8005cc8:	60f8      	str	r0, [r7, #12]
 8005cca:	60b9      	str	r1, [r7, #8]
 8005ccc:	607a      	str	r2, [r7, #4]
 8005cce:	603b      	str	r3, [r7, #0]
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f7fb fc99 	bl	800160a <_ZNKSt14_Function_base8_M_emptyEv>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d001      	beq.n	8005ce2 <_ZNKSt8functionIFijjPfEEclEjjS0_+0x22>
	__throw_bad_function_call();
 8005cde:	f7fb fd69 	bl	80017b4 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	68dc      	ldr	r4, [r3, #12]
 8005ce6:	68fd      	ldr	r5, [r7, #12]
 8005ce8:	f107 0308 	add.w	r3, r7, #8
 8005cec:	4618      	mov	r0, r3
 8005cee:	f000 f991 	bl	8006014 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8005cf2:	4606      	mov	r6, r0
 8005cf4:	1d3b      	adds	r3, r7, #4
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f000 f98c 	bl	8006014 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8005cfc:	4680      	mov	r8, r0
 8005cfe:	463b      	mov	r3, r7
 8005d00:	4618      	mov	r0, r3
 8005d02:	f000 f992 	bl	800602a <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8005d06:	4603      	mov	r3, r0
 8005d08:	4642      	mov	r2, r8
 8005d0a:	4631      	mov	r1, r6
 8005d0c:	4628      	mov	r0, r5
 8005d0e:	47a0      	blx	r4
 8005d10:	4603      	mov	r3, r0
    }
 8005d12:	4618      	mov	r0, r3
 8005d14:	3710      	adds	r7, #16
 8005d16:	46bd      	mov	sp, r7
 8005d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005d1c <_ZNKSt8functionIFijjPfEEcvbEv>:
      explicit operator bool() const noexcept
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b082      	sub	sp, #8
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	4618      	mov	r0, r3
 8005d28:	f7fb fc6f 	bl	800160a <_ZNKSt14_Function_base8_M_emptyEv>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	f083 0301 	eor.w	r3, r3, #1
 8005d32:	b2db      	uxtb	r3, r3
 8005d34:	4618      	mov	r0, r3
 8005d36:	3708      	adds	r7, #8
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}

08005d3c <_ZNSt6vectorImSaImEE5clearEv>:
       *  elements, and that if the elements themselves are pointers, the
       *  pointed-to memory is not touched in any way.  Managing the pointer is
       *  the user's responsibility.
       */
      void
      clear() _GLIBCXX_NOEXCEPT
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b082      	sub	sp, #8
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4619      	mov	r1, r3
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f000 f978 	bl	8006040 <_ZNSt6vectorImSaImEE15_M_erase_at_endEPm>
 8005d50:	bf00      	nop
 8005d52:	3708      	adds	r7, #8
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}

08005d58 <_ZNSt6vectorImSaImEE9push_backEOm>:
      push_back(value_type&& __x)
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b082      	sub	sp, #8
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
 8005d60:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 8005d62:	6838      	ldr	r0, [r7, #0]
 8005d64:	f7ff ff20 	bl	8005ba8 <_ZSt4moveIRmEONSt16remove_referenceIT_E4typeEOS2_>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	4619      	mov	r1, r3
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f000 f988 	bl	8006082 <_ZNSt6vectorImSaImEE12emplace_backIJmEEEvDpOT_>
 8005d72:	bf00      	nop
 8005d74:	3708      	adds	r7, #8
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}

08005d7a <_ZNSt12_Vector_baseImSaImEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8005d7a:	b580      	push	{r7, lr}
 8005d7c:	b082      	sub	sp, #8
 8005d7e:	af00      	add	r7, sp, #0
 8005d80:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f000 f9ab 	bl	80060de <_ZNSaImEC1Ev>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f000 f9b3 	bl	80060f6 <_ZNSt12_Vector_baseImSaImEE17_Vector_impl_dataC1Ev>
	{ }
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	4618      	mov	r0, r3
 8005d94:	3708      	adds	r7, #8
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}

08005d9a <_ZNSaImED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8005d9a:	b580      	push	{r7, lr}
 8005d9c:	b082      	sub	sp, #8
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	6078      	str	r0, [r7, #4]
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f000 f9bb 	bl	800611e <_ZN9__gnu_cxx13new_allocatorImED1Ev>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	4618      	mov	r0, r3
 8005dac:	3708      	adds	r7, #8
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}

08005db2 <_ZNSt12_Vector_baseImSaImEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8005db2:	b580      	push	{r7, lr}
 8005db4:	b082      	sub	sp, #8
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	689a      	ldr	r2, [r3, #8]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	1ad3      	subs	r3, r2, r3
 8005dc8:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8005dca:	461a      	mov	r2, r3
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f000 f9b1 	bl	8006134 <_ZNSt12_Vector_baseImSaImEE13_M_deallocateEPmj>
      }
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f7fd fef1 	bl	8003bbc <_ZNSt12_Vector_baseImSaImEE12_Vector_implD1Ev>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3708      	adds	r7, #8
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}

08005de4 <_ZNSt6vectorImSaImEED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8005de4:	b5b0      	push	{r4, r5, r7, lr}
 8005de6:	b082      	sub	sp, #8
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681c      	ldr	r4, [r3, #0]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	4618      	mov	r0, r3
 8005df8:	f000 f9af 	bl	800615a <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 8005dfc:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8005dfe:	461a      	mov	r2, r3
 8005e00:	4629      	mov	r1, r5
 8005e02:	4620      	mov	r0, r4
 8005e04:	f000 f9b4 	bl	8006170 <_ZSt8_DestroyIPmmEvT_S1_RSaIT0_E>
      }
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f7ff ffd1 	bl	8005db2 <_ZNSt12_Vector_baseImSaImEED1Ev>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	4618      	mov	r0, r3
 8005e14:	3708      	adds	r7, #8
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bdb0      	pop	{r4, r5, r7, pc}

08005e1a <_ZNKSt6vectorImSaImEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8005e1a:	b480      	push	{r7}
 8005e1c:	b083      	sub	sp, #12
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	685a      	ldr	r2, [r3, #4]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	1ad3      	subs	r3, r2, r3
 8005e2c:	109b      	asrs	r3, r3, #2
 8005e2e:	4618      	mov	r0, r3
 8005e30:	370c      	adds	r7, #12
 8005e32:	46bd      	mov	sp, r7
 8005e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e38:	4770      	bx	lr

08005e3a <_ZNSt6vectorImSaImEE2atEj>:
      at(size_type __n)
 8005e3a:	b580      	push	{r7, lr}
 8005e3c:	b082      	sub	sp, #8
 8005e3e:	af00      	add	r7, sp, #0
 8005e40:	6078      	str	r0, [r7, #4]
 8005e42:	6039      	str	r1, [r7, #0]
	_M_range_check(__n);
 8005e44:	6839      	ldr	r1, [r7, #0]
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f000 f9a0 	bl	800618c <_ZNKSt6vectorImSaImEE14_M_range_checkEj>
	return (*this)[__n];
 8005e4c:	6839      	ldr	r1, [r7, #0]
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f000 f9bc 	bl	80061cc <_ZNSt6vectorImSaImEEixEj>
 8005e54:	4603      	mov	r3, r0
      }
 8005e56:	4618      	mov	r0, r3
 8005e58:	3708      	adds	r7, #8
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}

08005e5e <_ZNSt8functionIFijjPfEEC1Ev>:
      function() noexcept
 8005e5e:	b580      	push	{r7, lr}
 8005e60:	b082      	sub	sp, #8
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	4618      	mov	r0, r3
 8005e6a:	f7fb fbad 	bl	80015c8 <_ZNSt14_Function_baseC1Ev>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	4618      	mov	r0, r3
 8005e72:	3708      	adds	r7, #8
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}

08005e78 <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSA_JjjS0_EEEE5valueERS2_E4typeEOS8_>:
	operator=(_Functor&& __f)
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b086      	sub	sp, #24
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	6039      	str	r1, [r7, #0]
	  function(std::forward<_Functor>(__f)).swap(*this);
 8005e82:	6838      	ldr	r0, [r7, #0]
 8005e84:	f000 f9b2 	bl	80061ec <_ZSt7forwardIPFijjPfEEOT_RNSt16remove_referenceIS3_E4typeE>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	681a      	ldr	r2, [r3, #0]
 8005e8c:	f107 0308 	add.w	r3, r7, #8
 8005e90:	4611      	mov	r1, r2
 8005e92:	4618      	mov	r0, r3
 8005e94:	f000 f9b6 	bl	8006204 <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_>
 8005e98:	f107 0308 	add.w	r3, r7, #8
 8005e9c:	6879      	ldr	r1, [r7, #4]
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f000 f851 	bl	8005f46 <_ZNSt8functionIFijjPfEE4swapERS2_>
 8005ea4:	f107 0308 	add.w	r3, r7, #8
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	f7fe f872 	bl	8003f92 <_ZNSt8functionIFijjPfEED1Ev>
	  return *this;
 8005eae:	687b      	ldr	r3, [r7, #4]
	}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3718      	adds	r7, #24
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}

08005eb8 <_ZNSt8functionIFijjPfEEaSERKS2_>:
      operator=(const function& __x)
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b086      	sub	sp, #24
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
 8005ec0:	6039      	str	r1, [r7, #0]
	function(__x).swap(*this);
 8005ec2:	f107 0308 	add.w	r3, r7, #8
 8005ec6:	6839      	ldr	r1, [r7, #0]
 8005ec8:	4618      	mov	r0, r3
 8005eca:	f000 f9c5 	bl	8006258 <_ZNSt8functionIFijjPfEEC1ERKS2_>
 8005ece:	f107 0308 	add.w	r3, r7, #8
 8005ed2:	6879      	ldr	r1, [r7, #4]
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	f000 f836 	bl	8005f46 <_ZNSt8functionIFijjPfEE4swapERS2_>
 8005eda:	f107 0308 	add.w	r3, r7, #8
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f7fe f857 	bl	8003f92 <_ZNSt8functionIFijjPfEED1Ev>
	return *this;
 8005ee4:	687b      	ldr	r3, [r7, #4]
      }
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3718      	adds	r7, #24
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}

08005eee <_ZNSt8functionIFijjPfEEaSIZN14SignalWithAxes10get_signalEvEUljjS0_E_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JjjS0_EEEE5valueERS2_E4typeEOS9_>:
	operator=(_Functor&& __f)
 8005eee:	b580      	push	{r7, lr}
 8005ef0:	b086      	sub	sp, #24
 8005ef2:	af00      	add	r7, sp, #0
 8005ef4:	6078      	str	r0, [r7, #4]
 8005ef6:	6039      	str	r1, [r7, #0]
	  function(std::forward<_Functor>(__f)).swap(*this);
 8005ef8:	6838      	ldr	r0, [r7, #0]
 8005efa:	f000 f9cf 	bl	800629c <_ZSt7forwardIZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS3_E4typeE>
 8005efe:	4602      	mov	r2, r0
 8005f00:	f107 0308 	add.w	r3, r7, #8
 8005f04:	6811      	ldr	r1, [r2, #0]
 8005f06:	4618      	mov	r0, r3
 8005f08:	f000 f9d4 	bl	80062b4 <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vvEET_>
 8005f0c:	f107 0308 	add.w	r3, r7, #8
 8005f10:	6879      	ldr	r1, [r7, #4]
 8005f12:	4618      	mov	r0, r3
 8005f14:	f000 f817 	bl	8005f46 <_ZNSt8functionIFijjPfEE4swapERS2_>
 8005f18:	f107 0308 	add.w	r3, r7, #8
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f7fe f838 	bl	8003f92 <_ZNSt8functionIFijjPfEED1Ev>
	  return *this;
 8005f22:	687b      	ldr	r3, [r7, #4]
	}
 8005f24:	4618      	mov	r0, r3
 8005f26:	3718      	adds	r7, #24
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bd80      	pop	{r7, pc}

08005f2c <_ZNKSt10unique_ptrIvPFvPvEE3getEv>:
	return get();
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b082      	sub	sp, #8
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	4618      	mov	r0, r3
 8005f38:	f000 f9e6 	bl	8006308 <_ZNKSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3708      	adds	r7, #8
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}

08005f46 <_ZNSt8functionIFijjPfEE4swapERS2_>:
      void swap(function& __x) noexcept
 8005f46:	b580      	push	{r7, lr}
 8005f48:	b082      	sub	sp, #8
 8005f4a:	af00      	add	r7, sp, #0
 8005f4c:	6078      	str	r0, [r7, #4]
 8005f4e:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	683a      	ldr	r2, [r7, #0]
 8005f54:	4611      	mov	r1, r2
 8005f56:	4618      	mov	r0, r3
 8005f58:	f000 f9ef 	bl	800633a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	f103 0208 	add.w	r2, r3, #8
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	3308      	adds	r3, #8
 8005f66:	4619      	mov	r1, r3
 8005f68:	4610      	mov	r0, r2
 8005f6a:	f000 fa18 	bl	800639e <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f103 020c 	add.w	r2, r3, #12
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	330c      	adds	r3, #12
 8005f78:	4619      	mov	r1, r3
 8005f7a:	4610      	mov	r0, r2
 8005f7c:	f000 fa39 	bl	80063f2 <_ZSt4swapIPFiRKSt9_Any_dataOjS3_OPfEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>
      }
 8005f80:	bf00      	nop
 8005f82:	3708      	adds	r7, #8
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}

08005f88 <_ZSt4moveIRPFvPvEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8005f88:	b480      	push	{r7}
 8005f8a:	b083      	sub	sp, #12
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	4618      	mov	r0, r3
 8005f94:	370c      	adds	r7, #12
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr

08005f9e <_ZNSt15__uniq_ptr_implIvPFvPvEEC1IS2_EES0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 8005f9e:	b590      	push	{r4, r7, lr}
 8005fa0:	b085      	sub	sp, #20
 8005fa2:	af00      	add	r7, sp, #0
 8005fa4:	60f8      	str	r0, [r7, #12]
 8005fa6:	60b9      	str	r1, [r7, #8]
 8005fa8:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 8005faa:	68fc      	ldr	r4, [r7, #12]
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f000 fa3f 	bl	8006430 <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 8005fb2:	4602      	mov	r2, r0
 8005fb4:	f107 0308 	add.w	r3, r7, #8
 8005fb8:	4619      	mov	r1, r3
 8005fba:	4620      	mov	r0, r4
 8005fbc:	f000 fa43 	bl	8006446 <_ZNSt5tupleIJPvPFvS0_EEEC1IRS0_S2_Lb1EEEOT_OT0_>
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	3714      	adds	r7, #20
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd90      	pop	{r4, r7, pc}

08005fca <_ZNSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8005fca:	b580      	push	{r7, lr}
 8005fcc:	b082      	sub	sp, #8
 8005fce:	af00      	add	r7, sp, #0
 8005fd0:	6078      	str	r0, [r7, #4]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	f000 fa4f 	bl	8006478 <_ZSt3getILj0EJPvPFvS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3708      	adds	r7, #8
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}

08005fe4 <_ZNSt10unique_ptrIvPFvPvEE11get_deleterEv>:

      /// Return a reference to the stored deleter.
      deleter_type&
      get_deleter() noexcept
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b082      	sub	sp, #8
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f000 fa4f 	bl	8006492 <_ZNSt15__uniq_ptr_implIvPFvPvEE10_M_deleterEv>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3708      	adds	r7, #8
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}

08005ffe <_ZSt4moveIRPvEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8005ffe:	b480      	push	{r7}
 8006000:	b083      	sub	sp, #12
 8006002:	af00      	add	r7, sp, #0
 8006004:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	4618      	mov	r0, r3
 800600a:	370c      	adds	r7, #12
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr

08006014 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8006014:	b480      	push	{r7}
 8006016:	b083      	sub	sp, #12
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	4618      	mov	r0, r3
 8006020:	370c      	adds	r7, #12
 8006022:	46bd      	mov	sp, r7
 8006024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006028:	4770      	bx	lr

0800602a <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800602a:	b480      	push	{r7}
 800602c:	b083      	sub	sp, #12
 800602e:	af00      	add	r7, sp, #0
 8006030:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	4618      	mov	r0, r3
 8006036:	370c      	adds	r7, #12
 8006038:	46bd      	mov	sp, r7
 800603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603e:	4770      	bx	lr

08006040 <_ZNSt6vectorImSaImEE15_M_erase_at_endEPm>:
      // Internal erase functions follow.

      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 8006040:	b590      	push	{r4, r7, lr}
 8006042:	b085      	sub	sp, #20
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
 8006048:	6039      	str	r1, [r7, #0]
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	685a      	ldr	r2, [r3, #4]
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	1ad3      	subs	r3, r2, r3
 8006052:	109b      	asrs	r3, r3, #2
 8006054:	60fb      	str	r3, [r7, #12]
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d00e      	beq.n	800607a <_ZNSt6vectorImSaImEE15_M_erase_at_endEPm+0x3a>
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	4618      	mov	r0, r3
 8006064:	f000 f879 	bl	800615a <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 8006068:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 800606a:	461a      	mov	r2, r3
 800606c:	4621      	mov	r1, r4
 800606e:	6838      	ldr	r0, [r7, #0]
 8006070:	f000 f87e 	bl	8006170 <_ZSt8_DestroyIPmmEvT_S1_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	683a      	ldr	r2, [r7, #0]
 8006078:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_SHRINK(__n);
	  }
      }
 800607a:	bf00      	nop
 800607c:	3714      	adds	r7, #20
 800607e:	46bd      	mov	sp, r7
 8006080:	bd90      	pop	{r4, r7, pc}

08006082 <_ZNSt6vectorImSaImEE12emplace_backIJmEEEvDpOT_>:
#if __cplusplus > 201402L
      typename vector<_Tp, _Alloc>::reference
#else
      void
#endif
      vector<_Tp, _Alloc>::
 8006082:	b5b0      	push	{r4, r5, r7, lr}
 8006084:	b082      	sub	sp, #8
 8006086:	af00      	add	r7, sp, #0
 8006088:	6078      	str	r0, [r7, #4]
 800608a:	6039      	str	r1, [r7, #0]
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	685a      	ldr	r2, [r3, #4]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	689b      	ldr	r3, [r3, #8]
 8006094:	429a      	cmp	r2, r3
 8006096:	d011      	beq.n	80060bc <_ZNSt6vectorImSaImEE12emplace_backIJmEEEvDpOT_+0x3a>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8006098:	687c      	ldr	r4, [r7, #4]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	685d      	ldr	r5, [r3, #4]
 800609e:	6838      	ldr	r0, [r7, #0]
 80060a0:	f000 fa04 	bl	80064ac <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 80060a4:	4603      	mov	r3, r0
 80060a6:	461a      	mov	r2, r3
 80060a8:	4629      	mov	r1, r5
 80060aa:	4620      	mov	r0, r4
 80060ac:	f000 fa09 	bl	80064c2 <_ZNSt16allocator_traitsISaImEE9constructImJmEEEvRS0_PT_DpOT0_>
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	1d1a      	adds	r2, r3, #4
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	605a      	str	r2, [r3, #4]
	else
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
#if __cplusplus > 201402L
	return back();
#endif
      }
 80060ba:	e00c      	b.n	80060d6 <_ZNSt6vectorImSaImEE12emplace_backIJmEEEvDpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f000 fa13 	bl	80064e8 <_ZNSt6vectorImSaImEE3endEv>
 80060c2:	4604      	mov	r4, r0
 80060c4:	6838      	ldr	r0, [r7, #0]
 80060c6:	f000 f9f1 	bl	80064ac <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 80060ca:	4603      	mov	r3, r0
 80060cc:	461a      	mov	r2, r3
 80060ce:	4621      	mov	r1, r4
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f000 fa31 	bl	8006538 <_ZNSt6vectorImSaImEE17_M_realloc_insertIJmEEEvN9__gnu_cxx17__normal_iteratorIPmS1_EEDpOT_>
      }
 80060d6:	bf00      	nop
 80060d8:	3708      	adds	r7, #8
 80060da:	46bd      	mov	sp, r7
 80060dc:	bdb0      	pop	{r4, r5, r7, pc}

080060de <_ZNSaImEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80060de:	b580      	push	{r7, lr}
 80060e0:	b082      	sub	sp, #8
 80060e2:	af00      	add	r7, sp, #0
 80060e4:	6078      	str	r0, [r7, #4]
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f000 fae2 	bl	80066b0 <_ZN9__gnu_cxx13new_allocatorImEC1Ev>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	4618      	mov	r0, r3
 80060f0:	3708      	adds	r7, #8
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}

080060f6 <_ZNSt12_Vector_baseImSaImEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 80060f6:	b480      	push	{r7}
 80060f8:	b083      	sub	sp, #12
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2200      	movs	r2, #0
 8006102:	601a      	str	r2, [r3, #0]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2200      	movs	r2, #0
 8006108:	605a      	str	r2, [r3, #4]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2200      	movs	r2, #0
 800610e:	609a      	str	r2, [r3, #8]
	{ }
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	4618      	mov	r0, r3
 8006114:	370c      	adds	r7, #12
 8006116:	46bd      	mov	sp, r7
 8006118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611c:	4770      	bx	lr

0800611e <_ZN9__gnu_cxx13new_allocatorImED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800611e:	b480      	push	{r7}
 8006120:	b083      	sub	sp, #12
 8006122:	af00      	add	r7, sp, #0
 8006124:	6078      	str	r0, [r7, #4]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	4618      	mov	r0, r3
 800612a:	370c      	adds	r7, #12
 800612c:	46bd      	mov	sp, r7
 800612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006132:	4770      	bx	lr

08006134 <_ZNSt12_Vector_baseImSaImEE13_M_deallocateEPmj>:
      _M_deallocate(pointer __p, size_t __n)
 8006134:	b580      	push	{r7, lr}
 8006136:	b084      	sub	sp, #16
 8006138:	af00      	add	r7, sp, #0
 800613a:	60f8      	str	r0, [r7, #12]
 800613c:	60b9      	str	r1, [r7, #8]
 800613e:	607a      	str	r2, [r7, #4]
	if (__p)
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d005      	beq.n	8006152 <_ZNSt12_Vector_baseImSaImEE13_M_deallocateEPmj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	687a      	ldr	r2, [r7, #4]
 800614a:	68b9      	ldr	r1, [r7, #8]
 800614c:	4618      	mov	r0, r3
 800614e:	f000 faba 	bl	80066c6 <_ZNSt16allocator_traitsISaImEE10deallocateERS0_Pmj>
      }
 8006152:	bf00      	nop
 8006154:	3710      	adds	r7, #16
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}

0800615a <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800615a:	b480      	push	{r7}
 800615c:	b083      	sub	sp, #12
 800615e:	af00      	add	r7, sp, #0
 8006160:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	4618      	mov	r0, r3
 8006166:	370c      	adds	r7, #12
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr

08006170 <_ZSt8_DestroyIPmmEvT_S1_RSaIT0_E>:
#endif
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8006170:	b580      	push	{r7, lr}
 8006172:	b084      	sub	sp, #16
 8006174:	af00      	add	r7, sp, #0
 8006176:	60f8      	str	r0, [r7, #12]
 8006178:	60b9      	str	r1, [r7, #8]
 800617a:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 800617c:	68b9      	ldr	r1, [r7, #8]
 800617e:	68f8      	ldr	r0, [r7, #12]
 8006180:	f000 fab0 	bl	80066e4 <_ZSt8_DestroyIPmEvT_S1_>
    }
 8006184:	bf00      	nop
 8006186:	3710      	adds	r7, #16
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}

0800618c <_ZNKSt6vectorImSaImEE14_M_range_checkEj>:
      _M_range_check(size_type __n) const
 800618c:	b580      	push	{r7, lr}
 800618e:	b082      	sub	sp, #8
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	6039      	str	r1, [r7, #0]
	if (__n >= this->size())
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f7ff fe3f 	bl	8005e1a <_ZNKSt6vectorImSaImEE4sizeEv>
 800619c:	4602      	mov	r2, r0
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	4293      	cmp	r3, r2
 80061a2:	bf2c      	ite	cs
 80061a4:	2301      	movcs	r3, #1
 80061a6:	2300      	movcc	r3, #0
 80061a8:	b2db      	uxtb	r3, r3
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d008      	beq.n	80061c0 <_ZNKSt6vectorImSaImEE14_M_range_checkEj+0x34>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f7ff fe33 	bl	8005e1a <_ZNKSt6vectorImSaImEE4sizeEv>
 80061b4:	4603      	mov	r3, r0
 80061b6:	461a      	mov	r2, r3
 80061b8:	6839      	ldr	r1, [r7, #0]
 80061ba:	4803      	ldr	r0, [pc, #12]	; (80061c8 <_ZNKSt6vectorImSaImEE14_M_range_checkEj+0x3c>)
 80061bc:	f029 fb1a 	bl	802f7f4 <_ZSt24__throw_out_of_range_fmtPKcz>
      }
 80061c0:	bf00      	nop
 80061c2:	3708      	adds	r7, #8
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bd80      	pop	{r7, pc}
 80061c8:	080341c4 	.word	0x080341c4

080061cc <_ZNSt6vectorImSaImEEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 80061cc:	b480      	push	{r7}
 80061ce:	b083      	sub	sp, #12
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
 80061d4:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681a      	ldr	r2, [r3, #0]
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	009b      	lsls	r3, r3, #2
 80061de:	4413      	add	r3, r2
      }
 80061e0:	4618      	mov	r0, r3
 80061e2:	370c      	adds	r7, #12
 80061e4:	46bd      	mov	sp, r7
 80061e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ea:	4770      	bx	lr

080061ec <_ZSt7forwardIPFijjPfEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80061ec:	b480      	push	{r7}
 80061ee:	b083      	sub	sp, #12
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	4618      	mov	r0, r3
 80061f8:	370c      	adds	r7, #12
 80061fa:	46bd      	mov	sp, r7
 80061fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006200:	4770      	bx	lr
	...

08006204 <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_>:
      function<_Res(_ArgTypes...)>::
 8006204:	b590      	push	{r4, r7, lr}
 8006206:	b083      	sub	sp, #12
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
 800620c:	6039      	str	r1, [r7, #0]
      : _Function_base()
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	4618      	mov	r0, r3
 8006212:	f7fb f9d9 	bl	80015c8 <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	4618      	mov	r0, r3
 800621a:	f000 fa70 	bl	80066fe <_ZNSt14_Function_base13_Base_managerIPFijjPfEE21_M_not_empty_functionIS2_EEbPT_>
 800621e:	4603      	mov	r3, r0
 8006220:	2b00      	cmp	r3, #0
 8006222:	d00f      	beq.n	8006244 <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 8006224:	687c      	ldr	r4, [r7, #4]
 8006226:	463b      	mov	r3, r7
 8006228:	4618      	mov	r0, r3
 800622a:	f000 fa78 	bl	800671e <_ZSt4moveIRPFijjPfEEONSt16remove_referenceIT_E4typeEOS5_>
 800622e:	4603      	mov	r3, r0
 8006230:	4619      	mov	r1, r3
 8006232:	4620      	mov	r0, r4
 8006234:	f000 fa7e 	bl	8006734 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorERSt9_Any_dataOS3_>
	    _M_invoker = &_My_handler::_M_invoke;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	4a05      	ldr	r2, [pc, #20]	; (8006250 <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_+0x4c>)
 800623c:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	4a04      	ldr	r2, [pc, #16]	; (8006254 <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_+0x50>)
 8006242:	609a      	str	r2, [r3, #8]
      }
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	4618      	mov	r0, r3
 8006248:	370c      	adds	r7, #12
 800624a:	46bd      	mov	sp, r7
 800624c:	bd90      	pop	{r4, r7, pc}
 800624e:	bf00      	nop
 8006250:	08006759 	.word	0x08006759
 8006254:	0800679b 	.word	0x0800679b

08006258 <_ZNSt8functionIFijjPfEEC1ERKS2_>:
    function<_Res(_ArgTypes...)>::
 8006258:	b580      	push	{r7, lr}
 800625a:	b082      	sub	sp, #8
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
 8006260:	6039      	str	r1, [r7, #0]
    : _Function_base()
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	4618      	mov	r0, r3
 8006266:	f7fb f9af 	bl	80015c8 <_ZNSt14_Function_baseC1Ev>
      if (static_cast<bool>(__x))
 800626a:	6838      	ldr	r0, [r7, #0]
 800626c:	f7ff fd56 	bl	8005d1c <_ZNKSt8functionIFijjPfEEcvbEv>
 8006270:	4603      	mov	r3, r0
 8006272:	2b00      	cmp	r3, #0
 8006274:	d00d      	beq.n	8006292 <_ZNSt8functionIFijjPfEEC1ERKS2_+0x3a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	689b      	ldr	r3, [r3, #8]
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	6839      	ldr	r1, [r7, #0]
 800627e:	2202      	movs	r2, #2
 8006280:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	68da      	ldr	r2, [r3, #12]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	60da      	str	r2, [r3, #12]
	  _M_manager = __x._M_manager;
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	689a      	ldr	r2, [r3, #8]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	609a      	str	r2, [r3, #8]
    }
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	4618      	mov	r0, r3
 8006296:	3708      	adds	r7, #8
 8006298:	46bd      	mov	sp, r7
 800629a:	bd80      	pop	{r7, pc}

0800629c <_ZSt7forwardIZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800629c:	b480      	push	{r7}
 800629e:	b083      	sub	sp, #12
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	4618      	mov	r0, r3
 80062a8:	370c      	adds	r7, #12
 80062aa:	46bd      	mov	sp, r7
 80062ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b0:	4770      	bx	lr
	...

080062b4 <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vvEET_>:
      function<_Res(_ArgTypes...)>::
 80062b4:	b590      	push	{r4, r7, lr}
 80062b6:	b083      	sub	sp, #12
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
 80062bc:	6039      	str	r1, [r7, #0]
      : _Function_base()
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	4618      	mov	r0, r3
 80062c2:	f7fb f981 	bl	80015c8 <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 80062c6:	463b      	mov	r3, r7
 80062c8:	4618      	mov	r0, r3
 80062ca:	f000 fa85 	bl	80067d8 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E21_M_not_empty_functionIS3_EEbRKT_>
 80062ce:	4603      	mov	r3, r0
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d00f      	beq.n	80062f4 <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 80062d4:	687c      	ldr	r4, [r7, #4]
 80062d6:	463b      	mov	r3, r7
 80062d8:	4618      	mov	r0, r3
 80062da:	f000 fa88 	bl	80067ee <_ZSt4moveIRZN14SignalWithAxes10get_signalEvEUljjPfE_EONSt16remove_referenceIT_E4typeEOS5_>
 80062de:	4603      	mov	r3, r0
 80062e0:	4619      	mov	r1, r3
 80062e2:	4620      	mov	r0, r4
 80062e4:	f000 fa8e 	bl	8006804 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorERSt9_Any_dataOS3_>
	    _M_invoker = &_My_handler::_M_invoke;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	4a05      	ldr	r2, [pc, #20]	; (8006300 <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vvEET_+0x4c>)
 80062ec:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	4a04      	ldr	r2, [pc, #16]	; (8006304 <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vvEET_+0x50>)
 80062f2:	609a      	str	r2, [r3, #8]
      }
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	4618      	mov	r0, r3
 80062f8:	370c      	adds	r7, #12
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd90      	pop	{r4, r7, pc}
 80062fe:	bf00      	nop
 8006300:	08006829 	.word	0x08006829
 8006304:	0800686b 	.word	0x0800686b

08006308 <_ZNKSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8006308:	b580      	push	{r7, lr}
 800630a:	b082      	sub	sp, #8
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	4618      	mov	r0, r3
 8006314:	f000 fac8 	bl	80068a8 <_ZSt3getILj0EJPvPFvS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS7_>
 8006318:	4603      	mov	r3, r0
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4618      	mov	r0, r3
 800631e:	3708      	adds	r7, #8
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}

08006324 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8006324:	b480      	push	{r7}
 8006326:	b083      	sub	sp, #12
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	4618      	mov	r0, r3
 8006330:	370c      	adds	r7, #12
 8006332:	46bd      	mov	sp, r7
 8006334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006338:	4770      	bx	lr

0800633a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 800633a:	b580      	push	{r7, lr}
 800633c:	b084      	sub	sp, #16
 800633e:	af00      	add	r7, sp, #0
 8006340:	6078      	str	r0, [r7, #4]
 8006342:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f7ff ffed 	bl	8006324 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 800634a:	4602      	mov	r2, r0
 800634c:	f107 0308 	add.w	r3, r7, #8
 8006350:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006354:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8006358:	6838      	ldr	r0, [r7, #0]
 800635a:	f7ff ffe3 	bl	8006324 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 800635e:	4602      	mov	r2, r0
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006366:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 800636a:	f107 0308 	add.w	r3, r7, #8
 800636e:	4618      	mov	r0, r3
 8006370:	f7ff ffd8 	bl	8006324 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8006374:	4602      	mov	r2, r0
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	e892 0003 	ldmia.w	r2, {r0, r1}
 800637c:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8006380:	bf00      	nop
 8006382:	3710      	adds	r7, #16
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}

08006388 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 8006388:	b480      	push	{r7}
 800638a:	b083      	sub	sp, #12
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	4618      	mov	r0, r3
 8006394:	370c      	adds	r7, #12
 8006396:	46bd      	mov	sp, r7
 8006398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639c:	4770      	bx	lr

0800639e <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 800639e:	b580      	push	{r7, lr}
 80063a0:	b084      	sub	sp, #16
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	6078      	str	r0, [r7, #4]
 80063a6:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f7ff ffed 	bl	8006388 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 80063ae:	4603      	mov	r3, r0
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 80063b4:	6838      	ldr	r0, [r7, #0]
 80063b6:	f7ff ffe7 	bl	8006388 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 80063ba:	4603      	mov	r3, r0
 80063bc:	681a      	ldr	r2, [r3, #0]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80063c2:	f107 030c 	add.w	r3, r7, #12
 80063c6:	4618      	mov	r0, r3
 80063c8:	f7ff ffde 	bl	8006388 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 80063cc:	4603      	mov	r3, r0
 80063ce:	681a      	ldr	r2, [r3, #0]
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	601a      	str	r2, [r3, #0]
    }
 80063d4:	bf00      	nop
 80063d6:	3710      	adds	r7, #16
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}

080063dc <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>:
    move(_Tp&& __t) noexcept
 80063dc:	b480      	push	{r7}
 80063de:	b083      	sub	sp, #12
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	4618      	mov	r0, r3
 80063e8:	370c      	adds	r7, #12
 80063ea:	46bd      	mov	sp, r7
 80063ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f0:	4770      	bx	lr

080063f2 <_ZSt4swapIPFiRKSt9_Any_dataOjS3_OPfEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>:
    swap(_Tp& __a, _Tp& __b)
 80063f2:	b580      	push	{r7, lr}
 80063f4:	b084      	sub	sp, #16
 80063f6:	af00      	add	r7, sp, #0
 80063f8:	6078      	str	r0, [r7, #4]
 80063fa:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f7ff ffed 	bl	80063dc <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>
 8006402:	4603      	mov	r3, r0
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8006408:	6838      	ldr	r0, [r7, #0]
 800640a:	f7ff ffe7 	bl	80063dc <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>
 800640e:	4603      	mov	r3, r0
 8006410:	681a      	ldr	r2, [r3, #0]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8006416:	f107 030c 	add.w	r3, r7, #12
 800641a:	4618      	mov	r0, r3
 800641c:	f7ff ffde 	bl	80063dc <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>
 8006420:	4603      	mov	r3, r0
 8006422:	681a      	ldr	r2, [r3, #0]
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	601a      	str	r2, [r3, #0]
    }
 8006428:	bf00      	nop
 800642a:	3710      	adds	r7, #16
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}

08006430 <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8006430:	b480      	push	{r7}
 8006432:	b083      	sub	sp, #12
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	4618      	mov	r0, r3
 800643c:	370c      	adds	r7, #12
 800643e:	46bd      	mov	sp, r7
 8006440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006444:	4770      	bx	lr

08006446 <_ZNSt5tupleIJPvPFvS0_EEEC1IRS0_S2_Lb1EEEOT_OT0_>:
	: _Inherited(__a1, __a2) { }

      template<typename _U1, typename _U2,
	       _ImplicitCtor<!__is_alloc_arg<_U1>(), _U1, _U2> = true>
	constexpr
	tuple(_U1&& __a1, _U2&& __a2)
 8006446:	b5b0      	push	{r4, r5, r7, lr}
 8006448:	b084      	sub	sp, #16
 800644a:	af00      	add	r7, sp, #0
 800644c:	60f8      	str	r0, [r7, #12]
 800644e:	60b9      	str	r1, [r7, #8]
 8006450:	607a      	str	r2, [r7, #4]
	noexcept(__nothrow_constructible<_U1, _U2>())
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 8006452:	68fc      	ldr	r4, [r7, #12]
 8006454:	68b8      	ldr	r0, [r7, #8]
 8006456:	f000 fa34 	bl	80068c2 <_ZSt7forwardIRPvEOT_RNSt16remove_referenceIS2_E4typeE>
 800645a:	4605      	mov	r5, r0
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f7ff ffe7 	bl	8006430 <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 8006462:	4603      	mov	r3, r0
 8006464:	461a      	mov	r2, r3
 8006466:	4629      	mov	r1, r5
 8006468:	4620      	mov	r0, r4
 800646a:	f000 fa35 	bl	80068d8 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEEC1IRS0_JS2_EvEEOT_DpOT0_>
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	4618      	mov	r0, r3
 8006472:	3710      	adds	r7, #16
 8006474:	46bd      	mov	sp, r7
 8006476:	bdb0      	pop	{r4, r5, r7, pc}

08006478 <_ZSt3getILj0EJPvPFvS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>:
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }

  /// Return a reference to the ith element of a tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 8006478:	b580      	push	{r7, lr}
 800647a:	b082      	sub	sp, #8
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	4618      	mov	r0, r3
 8006484:	f000 fa46 	bl	8006914 <_ZSt12__get_helperILj0EPvJPFvS0_EEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8006488:	4603      	mov	r3, r0
 800648a:	4618      	mov	r0, r3
 800648c:	3708      	adds	r7, #8
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}

08006492 <_ZNSt15__uniq_ptr_implIvPFvPvEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 8006492:	b580      	push	{r7, lr}
 8006494:	b082      	sub	sp, #8
 8006496:	af00      	add	r7, sp, #0
 8006498:	6078      	str	r0, [r7, #4]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	4618      	mov	r0, r3
 800649e:	f000 fa45 	bl	800692c <_ZSt3getILj1EJPvPFvS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>
 80064a2:	4603      	mov	r3, r0
 80064a4:	4618      	mov	r0, r3
 80064a6:	3708      	adds	r7, #8
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}

080064ac <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80064ac:	b480      	push	{r7}
 80064ae:	b083      	sub	sp, #12
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	4618      	mov	r0, r3
 80064b8:	370c      	adds	r7, #12
 80064ba:	46bd      	mov	sp, r7
 80064bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c0:	4770      	bx	lr

080064c2 <_ZNSt16allocator_traitsISaImEE9constructImJmEEEvRS0_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80064c2:	b580      	push	{r7, lr}
 80064c4:	b084      	sub	sp, #16
 80064c6:	af00      	add	r7, sp, #0
 80064c8:	60f8      	str	r0, [r7, #12]
 80064ca:	60b9      	str	r1, [r7, #8]
 80064cc:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f7ff ffec 	bl	80064ac <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 80064d4:	4603      	mov	r3, r0
 80064d6:	461a      	mov	r2, r3
 80064d8:	68b9      	ldr	r1, [r7, #8]
 80064da:	68f8      	ldr	r0, [r7, #12]
 80064dc:	f000 fa5b 	bl	8006996 <_ZN9__gnu_cxx13new_allocatorImE9constructImJmEEEvPT_DpOT0_>
	}
 80064e0:	bf00      	nop
 80064e2:	3710      	adds	r7, #16
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bd80      	pop	{r7, pc}

080064e8 <_ZNSt6vectorImSaImEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b084      	sub	sp, #16
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	1d1a      	adds	r2, r3, #4
 80064f4:	f107 030c 	add.w	r3, r7, #12
 80064f8:	4611      	mov	r1, r2
 80064fa:	4618      	mov	r0, r3
 80064fc:	f000 fa61 	bl	80069c2 <_ZN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEC1ERKS1_>
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	4618      	mov	r0, r3
 8006504:	3710      	adds	r7, #16
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}

0800650a <_ZNSt6vectorImSaImEE15_S_use_relocateEv>:
      _S_use_relocate()
 800650a:	b580      	push	{r7, lr}
 800650c:	b082      	sub	sp, #8
 800650e:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 8006510:	4618      	mov	r0, r3
 8006512:	f000 f805 	bl	8006520 <_ZNSt6vectorImSaImEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 8006516:	4603      	mov	r3, r0
      }
 8006518:	4618      	mov	r0, r3
 800651a:	3708      	adds	r7, #8
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}

08006520 <_ZNSt6vectorImSaImEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 8006520:	b480      	push	{r7}
 8006522:	b083      	sub	sp, #12
 8006524:	af00      	add	r7, sp, #0
 8006526:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 8006528:	2301      	movs	r3, #1
      }
 800652a:	4618      	mov	r0, r3
 800652c:	370c      	adds	r7, #12
 800652e:	46bd      	mov	sp, r7
 8006530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006534:	4770      	bx	lr
	...

08006538 <_ZNSt6vectorImSaImEE17_M_realloc_insertIJmEEEvN9__gnu_cxx17__normal_iteratorIPmS1_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 8006538:	b5b0      	push	{r4, r5, r7, lr}
 800653a:	b08c      	sub	sp, #48	; 0x30
 800653c:	af00      	add	r7, sp, #0
 800653e:	60f8      	str	r0, [r7, #12]
 8006540:	60b9      	str	r1, [r7, #8]
 8006542:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8006544:	4a59      	ldr	r2, [pc, #356]	; (80066ac <_ZNSt6vectorImSaImEE17_M_realloc_insertIJmEEEvN9__gnu_cxx17__normal_iteratorIPmS1_EEDpOT_+0x174>)
 8006546:	2101      	movs	r1, #1
 8006548:	68f8      	ldr	r0, [r7, #12]
 800654a:	f000 fa4a 	bl	80069e2 <_ZNKSt6vectorImSaImEE12_M_check_lenEjPKc>
 800654e:	62b8      	str	r0, [r7, #40]	; 0x28
      pointer __old_start = this->_M_impl._M_start;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 800655c:	68f8      	ldr	r0, [r7, #12]
 800655e:	f000 fa87 	bl	8006a70 <_ZNSt6vectorImSaImEE5beginEv>
 8006562:	4603      	mov	r3, r0
 8006564:	617b      	str	r3, [r7, #20]
 8006566:	f107 0214 	add.w	r2, r7, #20
 800656a:	f107 0308 	add.w	r3, r7, #8
 800656e:	4611      	mov	r1, r2
 8006570:	4618      	mov	r0, r3
 8006572:	f000 fa8d 	bl	8006a90 <_ZN9__gnu_cxxmiIPmSt6vectorImSaImEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 8006576:	4603      	mov	r3, r0
 8006578:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800657e:	4618      	mov	r0, r3
 8006580:	f000 fa9b 	bl	8006aba <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj>
 8006584:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 8006586:	69bb      	ldr	r3, [r7, #24]
 8006588:	62fb      	str	r3, [r7, #44]	; 0x2c
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 800658a:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 800658c:	69fb      	ldr	r3, [r7, #28]
 800658e:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8006590:	69ba      	ldr	r2, [r7, #24]
 8006592:	18d5      	adds	r5, r2, r3
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f7ff ff89 	bl	80064ac <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 800659a:	4603      	mov	r3, r0
 800659c:	461a      	mov	r2, r3
 800659e:	4629      	mov	r1, r5
 80065a0:	4620      	mov	r0, r4
 80065a2:	f7ff ff8e 	bl	80064c2 <_ZNSt16allocator_traitsISaImEE9constructImJmEEEvRS0_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 80065a6:	2300      	movs	r3, #0
 80065a8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 80065aa:	f7ff ffae 	bl	800650a <_ZNSt6vectorImSaImEE15_S_use_relocateEv>
 80065ae:	4603      	mov	r3, r0
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d027      	beq.n	8006604 <_ZNSt6vectorImSaImEE17_M_realloc_insertIJmEEEvN9__gnu_cxx17__normal_iteratorIPmS1_EEDpOT_+0xcc>
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80065b4:	f107 0308 	add.w	r3, r7, #8
 80065b8:	4618      	mov	r0, r3
 80065ba:	f000 faa6 	bl	8006b0a <_ZNK9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEE4baseEv>
 80065be:	4603      	mov	r3, r0
 80065c0:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	4618      	mov	r0, r3
 80065c6:	f7ff fdc8 	bl	800615a <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 80065ca:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80065cc:	69ba      	ldr	r2, [r7, #24]
 80065ce:	4621      	mov	r1, r4
 80065d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80065d2:	f000 fa86 	bl	8006ae2 <_ZNSt6vectorImSaImEE11_S_relocateEPmS2_S2_RS0_>
 80065d6:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 80065d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065da:	3304      	adds	r3, #4
 80065dc:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80065de:	f107 0308 	add.w	r3, r7, #8
 80065e2:	4618      	mov	r0, r3
 80065e4:	f000 fa91 	bl	8006b0a <_ZNK9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEE4baseEv>
 80065e8:	4603      	mov	r3, r0
 80065ea:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	4618      	mov	r0, r3
 80065f0:	f7ff fdb3 	bl	800615a <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 80065f4:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80065f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80065f8:	6a39      	ldr	r1, [r7, #32]
 80065fa:	4620      	mov	r0, r4
 80065fc:	f000 fa71 	bl	8006ae2 <_ZNSt6vectorImSaImEE11_S_relocateEPmS2_S2_RS0_>
 8006600:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006602:	e026      	b.n	8006652 <_ZNSt6vectorImSaImEE17_M_realloc_insertIJmEEEvN9__gnu_cxx17__normal_iteratorIPmS1_EEDpOT_+0x11a>
	  else
#endif
	    {
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
 8006604:	f107 0308 	add.w	r3, r7, #8
 8006608:	4618      	mov	r0, r3
 800660a:	f000 fa7e 	bl	8006b0a <_ZNK9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEE4baseEv>
 800660e:	4603      	mov	r3, r0
 8006610:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	4618      	mov	r0, r3
 8006616:	f7ff fda0 	bl	800615a <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 800661a:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 800661c:	69ba      	ldr	r2, [r7, #24]
 800661e:	4621      	mov	r1, r4
 8006620:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006622:	f000 fa7d 	bl	8006b20 <_ZSt34__uninitialized_move_if_noexcept_aIPmS0_SaImEET0_T_S3_S2_RT1_>
 8006626:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 8006628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800662a:	3304      	adds	r3, #4
 800662c:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__position.base(), __old_finish,
 800662e:	f107 0308 	add.w	r3, r7, #8
 8006632:	4618      	mov	r0, r3
 8006634:	f000 fa69 	bl	8006b0a <_ZNK9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEE4baseEv>
 8006638:	4603      	mov	r3, r0
 800663a:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	4618      	mov	r0, r3
 8006640:	f7ff fd8b 	bl	800615a <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 8006644:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 8006646:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006648:	6a39      	ldr	r1, [r7, #32]
 800664a:	4620      	mov	r0, r4
 800664c:	f000 fa68 	bl	8006b20 <_ZSt34__uninitialized_move_if_noexcept_aIPmS0_SaImEET0_T_S3_S2_RT1_>
 8006650:	62f8      	str	r0, [r7, #44]	; 0x2c
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 8006652:	f7ff ff5a 	bl	800650a <_ZNSt6vectorImSaImEE15_S_use_relocateEv>
 8006656:	4603      	mov	r3, r0
 8006658:	f083 0301 	eor.w	r3, r3, #1
 800665c:	b2db      	uxtb	r3, r3
 800665e:	2b00      	cmp	r3, #0
 8006660:	d009      	beq.n	8006676 <_ZNSt6vectorImSaImEE17_M_realloc_insertIJmEEEvN9__gnu_cxx17__normal_iteratorIPmS1_EEDpOT_+0x13e>
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	4618      	mov	r0, r3
 8006666:	f7ff fd78 	bl	800615a <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 800666a:	4603      	mov	r3, r0
 800666c:	461a      	mov	r2, r3
 800666e:	6a39      	ldr	r1, [r7, #32]
 8006670:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006672:	f7ff fd7d 	bl	8006170 <_ZSt8_DestroyIPmmEvT_S1_RSaIT0_E>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 8006676:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	689a      	ldr	r2, [r3, #8]
 800667c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800667e:	1ad3      	subs	r3, r2, r3
 8006680:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 8006682:	461a      	mov	r2, r3
 8006684:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006686:	f7ff fd55 	bl	8006134 <_ZNSt12_Vector_baseImSaImEE13_M_deallocateEPmj>
      this->_M_impl._M_start = __new_start;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	69ba      	ldr	r2, [r7, #24]
 800668e:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006694:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8006696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006698:	009b      	lsls	r3, r3, #2
 800669a:	69ba      	ldr	r2, [r7, #24]
 800669c:	441a      	add	r2, r3
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	609a      	str	r2, [r3, #8]
    }
 80066a2:	bf00      	nop
 80066a4:	3730      	adds	r7, #48	; 0x30
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bdb0      	pop	{r4, r5, r7, pc}
 80066aa:	bf00      	nop
 80066ac:	080341a8 	.word	0x080341a8

080066b0 <_ZN9__gnu_cxx13new_allocatorImEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80066b0:	b480      	push	{r7}
 80066b2:	b083      	sub	sp, #12
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	4618      	mov	r0, r3
 80066bc:	370c      	adds	r7, #12
 80066be:	46bd      	mov	sp, r7
 80066c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c4:	4770      	bx	lr

080066c6 <_ZNSt16allocator_traitsISaImEE10deallocateERS0_Pmj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80066c6:	b580      	push	{r7, lr}
 80066c8:	b084      	sub	sp, #16
 80066ca:	af00      	add	r7, sp, #0
 80066cc:	60f8      	str	r0, [r7, #12]
 80066ce:	60b9      	str	r1, [r7, #8]
 80066d0:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80066d2:	687a      	ldr	r2, [r7, #4]
 80066d4:	68b9      	ldr	r1, [r7, #8]
 80066d6:	68f8      	ldr	r0, [r7, #12]
 80066d8:	f000 fa3b 	bl	8006b52 <_ZN9__gnu_cxx13new_allocatorImE10deallocateEPmj>
 80066dc:	bf00      	nop
 80066de:	3710      	adds	r7, #16
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd80      	pop	{r7, pc}

080066e4 <_ZSt8_DestroyIPmEvT_S1_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b082      	sub	sp, #8
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
 80066ec:	6039      	str	r1, [r7, #0]
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 80066ee:	6839      	ldr	r1, [r7, #0]
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f000 fa3e 	bl	8006b72 <_ZNSt12_Destroy_auxILb1EE9__destroyIPmEEvT_S3_>
    }
 80066f6:	bf00      	nop
 80066f8:	3708      	adds	r7, #8
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}

080066fe <_ZNSt14_Function_base13_Base_managerIPFijjPfEE21_M_not_empty_functionIS2_EEbPT_>:
	  _M_not_empty_function(_Tp* __fp)
 80066fe:	b480      	push	{r7}
 8006700:	b083      	sub	sp, #12
 8006702:	af00      	add	r7, sp, #0
 8006704:	6078      	str	r0, [r7, #4]
	  { return __fp != nullptr; }
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2b00      	cmp	r3, #0
 800670a:	bf14      	ite	ne
 800670c:	2301      	movne	r3, #1
 800670e:	2300      	moveq	r3, #0
 8006710:	b2db      	uxtb	r3, r3
 8006712:	4618      	mov	r0, r3
 8006714:	370c      	adds	r7, #12
 8006716:	46bd      	mov	sp, r7
 8006718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671c:	4770      	bx	lr

0800671e <_ZSt4moveIRPFijjPfEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800671e:	b480      	push	{r7}
 8006720:	b083      	sub	sp, #12
 8006722:	af00      	add	r7, sp, #0
 8006724:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	4618      	mov	r0, r3
 800672a:	370c      	adds	r7, #12
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr

08006734 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorERSt9_Any_dataOS3_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 8006734:	b590      	push	{r4, r7, lr}
 8006736:	b083      	sub	sp, #12
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 800673e:	6838      	ldr	r0, [r7, #0]
 8006740:	f7ff ffed 	bl	800671e <_ZSt4moveIRPFijjPfEEONSt16remove_referenceIT_E4typeEOS5_>
 8006744:	4603      	mov	r3, r0
 8006746:	4622      	mov	r2, r4
 8006748:	4619      	mov	r1, r3
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f000 fa1c 	bl	8006b88 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE>
 8006750:	bf00      	nop
 8006752:	370c      	adds	r7, #12
 8006754:	46bd      	mov	sp, r7
 8006756:	bd90      	pop	{r4, r7, pc}

08006758 <_ZNSt17_Function_handlerIFijjPfEPS1_E9_M_invokeERKSt9_Any_dataOjS7_OS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8006758:	b5f0      	push	{r4, r5, r6, r7, lr}
 800675a:	b085      	sub	sp, #20
 800675c:	af00      	add	r7, sp, #0
 800675e:	60f8      	str	r0, [r7, #12]
 8006760:	60b9      	str	r1, [r7, #8]
 8006762:	607a      	str	r2, [r7, #4]
 8006764:	603b      	str	r3, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8006766:	68f8      	ldr	r0, [r7, #12]
 8006768:	f000 fa27 	bl	8006bba <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>
 800676c:	4604      	mov	r4, r0
 800676e:	68b8      	ldr	r0, [r7, #8]
 8006770:	f7ff fc50 	bl	8006014 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8006774:	4605      	mov	r5, r0
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f7ff fc4c 	bl	8006014 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800677c:	4606      	mov	r6, r0
 800677e:	6838      	ldr	r0, [r7, #0]
 8006780:	f7ff fc53 	bl	800602a <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8006784:	4603      	mov	r3, r0
 8006786:	4632      	mov	r2, r6
 8006788:	4629      	mov	r1, r5
 800678a:	4620      	mov	r0, r4
 800678c:	f000 fa26 	bl	8006bdc <_ZSt10__invoke_rIiRPFijjPfEJjjS0_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt7is_voidIT_EESt14is_convertibleINSt15__invoke_resultIT0_JDpT1_EE4typeES8_EEE5valueES8_E4typeEOSD_DpOSE_>
 8006790:	4603      	mov	r3, r0
      }
 8006792:	4618      	mov	r0, r3
 8006794:	3714      	adds	r7, #20
 8006796:	46bd      	mov	sp, r7
 8006798:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800679a <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 800679a:	b590      	push	{r4, r7, lr}
 800679c:	b085      	sub	sp, #20
 800679e:	af00      	add	r7, sp, #0
 80067a0:	60f8      	str	r0, [r7, #12]
 80067a2:	60b9      	str	r1, [r7, #8]
 80067a4:	4613      	mov	r3, r2
 80067a6:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 80067a8:	79fb      	ldrb	r3, [r7, #7]
 80067aa:	2b01      	cmp	r3, #1
 80067ac:	d109      	bne.n	80067c2 <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 80067ae:	68f8      	ldr	r0, [r7, #12]
 80067b0:	f000 fa39 	bl	8006c26 <_ZNSt9_Any_data9_M_accessIPPFijjPfEEERT_v>
 80067b4:	4604      	mov	r4, r0
 80067b6:	68b8      	ldr	r0, [r7, #8]
 80067b8:	f000 f9ff 	bl	8006bba <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>
 80067bc:	4603      	mov	r3, r0
 80067be:	6023      	str	r3, [r4, #0]
	    break;
 80067c0:	e005      	b.n	80067ce <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 80067c2:	79fb      	ldrb	r3, [r7, #7]
 80067c4:	461a      	mov	r2, r3
 80067c6:	68b9      	ldr	r1, [r7, #8]
 80067c8:	68f8      	ldr	r0, [r7, #12]
 80067ca:	f000 fa38 	bl	8006c3e <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>
	return false;
 80067ce:	2300      	movs	r3, #0
      }
 80067d0:	4618      	mov	r0, r3
 80067d2:	3714      	adds	r7, #20
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd90      	pop	{r4, r7, pc}

080067d8 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E21_M_not_empty_functionIS3_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 80067d8:	b480      	push	{r7}
 80067da:	b083      	sub	sp, #12
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
	  { return true; }
 80067e0:	2301      	movs	r3, #1
 80067e2:	4618      	mov	r0, r3
 80067e4:	370c      	adds	r7, #12
 80067e6:	46bd      	mov	sp, r7
 80067e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ec:	4770      	bx	lr

080067ee <_ZSt4moveIRZN14SignalWithAxes10get_signalEvEUljjPfE_EONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 80067ee:	b480      	push	{r7}
 80067f0:	b083      	sub	sp, #12
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	4618      	mov	r0, r3
 80067fa:	370c      	adds	r7, #12
 80067fc:	46bd      	mov	sp, r7
 80067fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006802:	4770      	bx	lr

08006804 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorERSt9_Any_dataOS3_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 8006804:	b590      	push	{r4, r7, lr}
 8006806:	b083      	sub	sp, #12
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
 800680c:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 800680e:	6838      	ldr	r0, [r7, #0]
 8006810:	f7ff ffed 	bl	80067ee <_ZSt4moveIRZN14SignalWithAxes10get_signalEvEUljjPfE_EONSt16remove_referenceIT_E4typeEOS5_>
 8006814:	4603      	mov	r3, r0
 8006816:	4622      	mov	r2, r4
 8006818:	4619      	mov	r1, r3
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f000 fa3a 	bl	8006c94 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE>
 8006820:	bf00      	nop
 8006822:	370c      	adds	r7, #12
 8006824:	46bd      	mov	sp, r7
 8006826:	bd90      	pop	{r4, r7, pc}

08006828 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8006828:	b5f0      	push	{r4, r5, r6, r7, lr}
 800682a:	b085      	sub	sp, #20
 800682c:	af00      	add	r7, sp, #0
 800682e:	60f8      	str	r0, [r7, #12]
 8006830:	60b9      	str	r1, [r7, #8]
 8006832:	607a      	str	r2, [r7, #4]
 8006834:	603b      	str	r3, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8006836:	68f8      	ldr	r0, [r7, #12]
 8006838:	f000 fa45 	bl	8006cc6 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>
 800683c:	4604      	mov	r4, r0
 800683e:	68b8      	ldr	r0, [r7, #8]
 8006840:	f7ff fbe8 	bl	8006014 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8006844:	4605      	mov	r5, r0
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f7ff fbe4 	bl	8006014 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800684c:	4606      	mov	r6, r0
 800684e:	6838      	ldr	r0, [r7, #0]
 8006850:	f7ff fbeb 	bl	800602a <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8006854:	4603      	mov	r3, r0
 8006856:	4632      	mov	r2, r6
 8006858:	4629      	mov	r1, r5
 800685a:	4620      	mov	r0, r4
 800685c:	f000 fa44 	bl	8006ce8 <_ZSt10__invoke_rIiRZN14SignalWithAxes10get_signalEvEUljjPfE_JjjS1_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt7is_voidIT_EESt14is_convertibleINSt15__invoke_resultIT0_JDpT1_EE4typeES8_EEE5valueES8_E4typeEOSD_DpOSE_>
 8006860:	4603      	mov	r3, r0
      }
 8006862:	4618      	mov	r0, r3
 8006864:	3714      	adds	r7, #20
 8006866:	46bd      	mov	sp, r7
 8006868:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800686a <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 800686a:	b590      	push	{r4, r7, lr}
 800686c:	b085      	sub	sp, #20
 800686e:	af00      	add	r7, sp, #0
 8006870:	60f8      	str	r0, [r7, #12]
 8006872:	60b9      	str	r1, [r7, #8]
 8006874:	4613      	mov	r3, r2
 8006876:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8006878:	79fb      	ldrb	r3, [r7, #7]
 800687a:	2b01      	cmp	r3, #1
 800687c:	d109      	bne.n	8006892 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 800687e:	68f8      	ldr	r0, [r7, #12]
 8006880:	f000 fa57 	bl	8006d32 <_ZNSt9_Any_data9_M_accessIPZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>
 8006884:	4604      	mov	r4, r0
 8006886:	68b8      	ldr	r0, [r7, #8]
 8006888:	f000 fa1d 	bl	8006cc6 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>
 800688c:	4603      	mov	r3, r0
 800688e:	6023      	str	r3, [r4, #0]
	    break;
 8006890:	e005      	b.n	800689e <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8006892:	79fb      	ldrb	r3, [r7, #7]
 8006894:	461a      	mov	r2, r3
 8006896:	68b9      	ldr	r1, [r7, #8]
 8006898:	68f8      	ldr	r0, [r7, #12]
 800689a:	f000 fa56 	bl	8006d4a <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>
	return false;
 800689e:	2300      	movs	r3, #0
      }
 80068a0:	4618      	mov	r0, r3
 80068a2:	3714      	adds	r7, #20
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd90      	pop	{r4, r7, pc}

080068a8 <_ZSt3getILj0EJPvPFvS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS7_>:

  /// Return a const reference to the ith element of a const tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b082      	sub	sp, #8
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	4618      	mov	r0, r3
 80068b4:	f000 fa74 	bl	8006da0 <_ZSt12__get_helperILj0EPvJPFvS0_EEERKT0_RKSt11_Tuple_implIXT_EJS3_DpT1_EE>
 80068b8:	4603      	mov	r3, r0
 80068ba:	4618      	mov	r0, r3
 80068bc:	3708      	adds	r7, #8
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}

080068c2 <_ZSt7forwardIRPvEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80068c2:	b480      	push	{r7}
 80068c4:	b083      	sub	sp, #12
 80068c6:	af00      	add	r7, sp, #0
 80068c8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	4618      	mov	r0, r3
 80068ce:	370c      	adds	r7, #12
 80068d0:	46bd      	mov	sp, r7
 80068d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d6:	4770      	bx	lr

080068d8 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEEC1IRS0_JS2_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 80068d8:	b590      	push	{r4, r7, lr}
 80068da:	b085      	sub	sp, #20
 80068dc:	af00      	add	r7, sp, #0
 80068de:	60f8      	str	r0, [r7, #12]
 80068e0:	60b9      	str	r1, [r7, #8]
 80068e2:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 80068e4:	68fc      	ldr	r4, [r7, #12]
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f7ff fda2 	bl	8006430 <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 80068ec:	4603      	mov	r3, r0
 80068ee:	4619      	mov	r1, r3
 80068f0:	4620      	mov	r0, r4
 80068f2:	f000 fa61 	bl	8006db8 <_ZNSt11_Tuple_implILj1EJPFvPvEEEC1IS2_EEOT_>
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	1d1c      	adds	r4, r3, #4
 80068fa:	68b8      	ldr	r0, [r7, #8]
 80068fc:	f7ff ffe1 	bl	80068c2 <_ZSt7forwardIRPvEOT_RNSt16remove_referenceIS2_E4typeE>
 8006900:	4603      	mov	r3, r0
 8006902:	4619      	mov	r1, r3
 8006904:	4620      	mov	r0, r4
 8006906:	f000 fa6a 	bl	8006dde <_ZNSt10_Head_baseILj0EPvLb0EEC1IRS0_EEOT_>
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	4618      	mov	r0, r3
 800690e:	3714      	adds	r7, #20
 8006910:	46bd      	mov	sp, r7
 8006912:	bd90      	pop	{r4, r7, pc}

08006914 <_ZSt12__get_helperILj0EPvJPFvS0_EEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8006914:	b580      	push	{r7, lr}
 8006916:	b082      	sub	sp, #8
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f000 fa6f 	bl	8006e00 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEE7_M_headERS3_>
 8006922:	4603      	mov	r3, r0
 8006924:	4618      	mov	r0, r3
 8006926:	3708      	adds	r7, #8
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}

0800692c <_ZSt3getILj1EJPvPFvS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>:
    get(tuple<_Elements...>& __t) noexcept
 800692c:	b580      	push	{r7, lr}
 800692e:	b082      	sub	sp, #8
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	4618      	mov	r0, r3
 8006938:	f000 fa70 	bl	8006e1c <_ZSt12__get_helperILj1EPFvPvEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800693c:	4603      	mov	r3, r0
 800693e:	4618      	mov	r0, r3
 8006940:	3708      	adds	r7, #8
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}

08006946 <_ZSt3maxIjERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8006946:	b480      	push	{r7}
 8006948:	b083      	sub	sp, #12
 800694a:	af00      	add	r7, sp, #0
 800694c:	6078      	str	r0, [r7, #4]
 800694e:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681a      	ldr	r2, [r3, #0]
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	429a      	cmp	r2, r3
 800695a:	d201      	bcs.n	8006960 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	e000      	b.n	8006962 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8006960:	687b      	ldr	r3, [r7, #4]
    }
 8006962:	4618      	mov	r0, r3
 8006964:	370c      	adds	r7, #12
 8006966:	46bd      	mov	sp, r7
 8006968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696c:	4770      	bx	lr

0800696e <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 800696e:	b480      	push	{r7}
 8006970:	b083      	sub	sp, #12
 8006972:	af00      	add	r7, sp, #0
 8006974:	6078      	str	r0, [r7, #4]
 8006976:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	429a      	cmp	r2, r3
 8006982:	d201      	bcs.n	8006988 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	e000      	b.n	800698a <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8006988:	687b      	ldr	r3, [r7, #4]
    }
 800698a:	4618      	mov	r0, r3
 800698c:	370c      	adds	r7, #12
 800698e:	46bd      	mov	sp, r7
 8006990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006994:	4770      	bx	lr

08006996 <_ZN9__gnu_cxx13new_allocatorImE9constructImJmEEEvPT_DpOT0_>:
      { return _M_max_size(); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 8006996:	b590      	push	{r4, r7, lr}
 8006998:	b085      	sub	sp, #20
 800699a:	af00      	add	r7, sp, #0
 800699c:	60f8      	str	r0, [r7, #12]
 800699e:	60b9      	str	r1, [r7, #8]
 80069a0:	607a      	str	r2, [r7, #4]
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f7ff fd82 	bl	80064ac <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 80069a8:	4603      	mov	r3, r0
 80069aa:	681c      	ldr	r4, [r3, #0]
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	4619      	mov	r1, r3
 80069b0:	2004      	movs	r0, #4
 80069b2:	f7fa fd81 	bl	80014b8 <_ZnwjPv>
 80069b6:	4603      	mov	r3, r0
 80069b8:	601c      	str	r4, [r3, #0]
 80069ba:	bf00      	nop
 80069bc:	3714      	adds	r7, #20
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd90      	pop	{r4, r7, pc}

080069c2 <_ZN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEC1ERKS1_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80069c2:	b480      	push	{r7}
 80069c4:	b083      	sub	sp, #12
 80069c6:	af00      	add	r7, sp, #0
 80069c8:	6078      	str	r0, [r7, #4]
 80069ca:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	681a      	ldr	r2, [r3, #0]
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	601a      	str	r2, [r3, #0]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	4618      	mov	r0, r3
 80069d8:	370c      	adds	r7, #12
 80069da:	46bd      	mov	sp, r7
 80069dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e0:	4770      	bx	lr

080069e2 <_ZNKSt6vectorImSaImEE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 80069e2:	b590      	push	{r4, r7, lr}
 80069e4:	b087      	sub	sp, #28
 80069e6:	af00      	add	r7, sp, #0
 80069e8:	60f8      	str	r0, [r7, #12]
 80069ea:	60b9      	str	r1, [r7, #8]
 80069ec:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 80069ee:	68f8      	ldr	r0, [r7, #12]
 80069f0:	f000 fa20 	bl	8006e34 <_ZNKSt6vectorImSaImEE8max_sizeEv>
 80069f4:	4604      	mov	r4, r0
 80069f6:	68f8      	ldr	r0, [r7, #12]
 80069f8:	f7ff fa0f 	bl	8005e1a <_ZNKSt6vectorImSaImEE4sizeEv>
 80069fc:	4603      	mov	r3, r0
 80069fe:	1ae2      	subs	r2, r4, r3
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	429a      	cmp	r2, r3
 8006a04:	bf34      	ite	cc
 8006a06:	2301      	movcc	r3, #1
 8006a08:	2300      	movcs	r3, #0
 8006a0a:	b2db      	uxtb	r3, r3
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d002      	beq.n	8006a16 <_ZNKSt6vectorImSaImEE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f028 feec 	bl	802f7ee <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8006a16:	68f8      	ldr	r0, [r7, #12]
 8006a18:	f7ff f9ff 	bl	8005e1a <_ZNKSt6vectorImSaImEE4sizeEv>
 8006a1c:	4604      	mov	r4, r0
 8006a1e:	68f8      	ldr	r0, [r7, #12]
 8006a20:	f7ff f9fb 	bl	8005e1a <_ZNKSt6vectorImSaImEE4sizeEv>
 8006a24:	4603      	mov	r3, r0
 8006a26:	613b      	str	r3, [r7, #16]
 8006a28:	f107 0208 	add.w	r2, r7, #8
 8006a2c:	f107 0310 	add.w	r3, r7, #16
 8006a30:	4611      	mov	r1, r2
 8006a32:	4618      	mov	r0, r3
 8006a34:	f7ff ff87 	bl	8006946 <_ZSt3maxIjERKT_S2_S2_>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4423      	add	r3, r4
 8006a3e:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8006a40:	68f8      	ldr	r0, [r7, #12]
 8006a42:	f7ff f9ea 	bl	8005e1a <_ZNKSt6vectorImSaImEE4sizeEv>
 8006a46:	4602      	mov	r2, r0
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d306      	bcc.n	8006a5c <_ZNKSt6vectorImSaImEE12_M_check_lenEjPKc+0x7a>
 8006a4e:	68f8      	ldr	r0, [r7, #12]
 8006a50:	f000 f9f0 	bl	8006e34 <_ZNKSt6vectorImSaImEE8max_sizeEv>
 8006a54:	4602      	mov	r2, r0
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d904      	bls.n	8006a66 <_ZNKSt6vectorImSaImEE12_M_check_lenEjPKc+0x84>
 8006a5c:	68f8      	ldr	r0, [r7, #12]
 8006a5e:	f000 f9e9 	bl	8006e34 <_ZNKSt6vectorImSaImEE8max_sizeEv>
 8006a62:	4603      	mov	r3, r0
 8006a64:	e000      	b.n	8006a68 <_ZNKSt6vectorImSaImEE12_M_check_lenEjPKc+0x86>
 8006a66:	697b      	ldr	r3, [r7, #20]
      }
 8006a68:	4618      	mov	r0, r3
 8006a6a:	371c      	adds	r7, #28
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd90      	pop	{r4, r7, pc}

08006a70 <_ZNSt6vectorImSaImEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b084      	sub	sp, #16
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8006a78:	687a      	ldr	r2, [r7, #4]
 8006a7a:	f107 030c 	add.w	r3, r7, #12
 8006a7e:	4611      	mov	r1, r2
 8006a80:	4618      	mov	r0, r3
 8006a82:	f7ff ff9e 	bl	80069c2 <_ZN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEC1ERKS1_>
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3710      	adds	r7, #16
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}

08006a90 <_ZN9__gnu_cxxmiIPmSt6vectorImSaImEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8006a90:	b590      	push	{r4, r7, lr}
 8006a92:	b083      	sub	sp, #12
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
 8006a98:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f000 f835 	bl	8006b0a <_ZNK9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEE4baseEv>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	681c      	ldr	r4, [r3, #0]
 8006aa4:	6838      	ldr	r0, [r7, #0]
 8006aa6:	f000 f830 	bl	8006b0a <_ZNK9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEE4baseEv>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	1ae3      	subs	r3, r4, r3
 8006ab0:	109b      	asrs	r3, r3, #2
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	370c      	adds	r7, #12
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd90      	pop	{r4, r7, pc}

08006aba <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8006aba:	b580      	push	{r7, lr}
 8006abc:	b082      	sub	sp, #8
 8006abe:	af00      	add	r7, sp, #0
 8006ac0:	6078      	str	r0, [r7, #4]
 8006ac2:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d006      	beq.n	8006ad8 <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj+0x1e>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6839      	ldr	r1, [r7, #0]
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f000 f9c1 	bl	8006e56 <_ZNSt16allocator_traitsISaImEE8allocateERS0_j>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	e000      	b.n	8006ada <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj+0x20>
 8006ad8:	2300      	movs	r3, #0
      }
 8006ada:	4618      	mov	r0, r3
 8006adc:	3708      	adds	r7, #8
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}

08006ae2 <_ZNSt6vectorImSaImEE11_S_relocateEPmS2_S2_RS0_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8006ae2:	b590      	push	{r4, r7, lr}
 8006ae4:	b087      	sub	sp, #28
 8006ae6:	af02      	add	r7, sp, #8
 8006ae8:	60f8      	str	r0, [r7, #12]
 8006aea:	60b9      	str	r1, [r7, #8]
 8006aec:	607a      	str	r2, [r7, #4]
 8006aee:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8006af0:	f88d 4000 	strb.w	r4, [sp]
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	687a      	ldr	r2, [r7, #4]
 8006af8:	68b9      	ldr	r1, [r7, #8]
 8006afa:	68f8      	ldr	r0, [r7, #12]
 8006afc:	f000 f9ba 	bl	8006e74 <_ZNSt6vectorImSaImEE14_S_do_relocateEPmS2_S2_RS0_St17integral_constantIbLb1EE>
 8006b00:	4603      	mov	r3, r0
      }
 8006b02:	4618      	mov	r0, r3
 8006b04:	3714      	adds	r7, #20
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd90      	pop	{r4, r7, pc}

08006b0a <_ZNK9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8006b0a:	b480      	push	{r7}
 8006b0c:	b083      	sub	sp, #12
 8006b0e:	af00      	add	r7, sp, #0
 8006b10:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	4618      	mov	r0, r3
 8006b16:	370c      	adds	r7, #12
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1e:	4770      	bx	lr

08006b20 <_ZSt34__uninitialized_move_if_noexcept_aIPmS0_SaImEET0_T_S3_S2_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8006b20:	b590      	push	{r4, r7, lr}
 8006b22:	b085      	sub	sp, #20
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	60f8      	str	r0, [r7, #12]
 8006b28:	60b9      	str	r1, [r7, #8]
 8006b2a:	607a      	str	r2, [r7, #4]
 8006b2c:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8006b2e:	68f8      	ldr	r0, [r7, #12]
 8006b30:	f000 f9b2 	bl	8006e98 <_ZSt32__make_move_if_noexcept_iteratorImSt13move_iteratorIPmEET0_PT_>
 8006b34:	4604      	mov	r4, r0
 8006b36:	68b8      	ldr	r0, [r7, #8]
 8006b38:	f000 f9ae 	bl	8006e98 <_ZSt32__make_move_if_noexcept_iteratorImSt13move_iteratorIPmEET0_PT_>
 8006b3c:	4601      	mov	r1, r0
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	687a      	ldr	r2, [r7, #4]
 8006b42:	4620      	mov	r0, r4
 8006b44:	f000 f9b7 	bl	8006eb6 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPmES1_mET0_T_S4_S3_RSaIT1_E>
 8006b48:	4603      	mov	r3, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
    }
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3714      	adds	r7, #20
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd90      	pop	{r4, r7, pc}

08006b52 <_ZN9__gnu_cxx13new_allocatorImE10deallocateEPmj>:
      deallocate(_Tp* __p, size_type __t)
 8006b52:	b580      	push	{r7, lr}
 8006b54:	b084      	sub	sp, #16
 8006b56:	af00      	add	r7, sp, #0
 8006b58:	60f8      	str	r0, [r7, #12]
 8006b5a:	60b9      	str	r1, [r7, #8]
 8006b5c:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	009b      	lsls	r3, r3, #2
 8006b62:	4619      	mov	r1, r3
 8006b64:	68b8      	ldr	r0, [r7, #8]
 8006b66:	f028 fe25 	bl	802f7b4 <_ZdlPvj>
      }
 8006b6a:	bf00      	nop
 8006b6c:	3710      	adds	r7, #16
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}

08006b72 <_ZNSt12_Destroy_auxILb1EE9__destroyIPmEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8006b72:	b480      	push	{r7}
 8006b74:	b083      	sub	sp, #12
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	6078      	str	r0, [r7, #4]
 8006b7a:	6039      	str	r1, [r7, #0]
 8006b7c:	bf00      	nop
 8006b7e:	370c      	adds	r7, #12
 8006b80:	46bd      	mov	sp, r7
 8006b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b86:	4770      	bx	lr

08006b88 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 8006b88:	b590      	push	{r4, r7, lr}
 8006b8a:	b085      	sub	sp, #20
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	60f8      	str	r0, [r7, #12]
 8006b90:	60b9      	str	r1, [r7, #8]
 8006b92:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 8006b94:	68b8      	ldr	r0, [r7, #8]
 8006b96:	f7ff fdc2 	bl	800671e <_ZSt4moveIRPFijjPfEEONSt16remove_referenceIT_E4typeEOS5_>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	681c      	ldr	r4, [r3, #0]
 8006b9e:	68f8      	ldr	r0, [r7, #12]
 8006ba0:	f7fa fcfc 	bl	800159c <_ZNSt9_Any_data9_M_accessEv>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	4619      	mov	r1, r3
 8006ba8:	2004      	movs	r0, #4
 8006baa:	f7fa fc85 	bl	80014b8 <_ZnwjPv>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	601c      	str	r4, [r3, #0]
 8006bb2:	bf00      	nop
 8006bb4:	3714      	adds	r7, #20
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd90      	pop	{r4, r7, pc}

08006bba <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 8006bba:	b580      	push	{r7, lr}
 8006bbc:	b084      	sub	sp, #16
 8006bbe:	af00      	add	r7, sp, #0
 8006bc0:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f000 f988 	bl	8006ed8 <_ZNKSt9_Any_data9_M_accessIPFijjPfEEERKT_v>
 8006bc8:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8006bca:	68f8      	ldr	r0, [r7, #12]
 8006bcc:	f000 f990 	bl	8006ef0 <_ZSt11__addressofIKPFijjPfEEPT_RS4_>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	bf00      	nop
	}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	3710      	adds	r7, #16
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}

08006bdc <_ZSt10__invoke_rIiRPFijjPfEJjjS0_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt7is_voidIT_EESt14is_convertibleINSt15__invoke_resultIT0_JDpT1_EE4typeES8_EEE5valueES8_E4typeEOSD_DpOSE_>:
    >;

  // INVOKE<R>: Invoke a callable object and convert the result to R.
  template<typename _Res, typename _Callable, typename... _Args>
    constexpr __can_invoke_as_nonvoid<_Res, _Callable, _Args...>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8006bdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006be0:	b086      	sub	sp, #24
 8006be2:	af02      	add	r7, sp, #8
 8006be4:	60f8      	str	r0, [r7, #12]
 8006be6:	60b9      	str	r1, [r7, #8]
 8006be8:	607a      	str	r2, [r7, #4]
 8006bea:	603b      	str	r3, [r7, #0]
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8006bec:	68f8      	ldr	r0, [r7, #12]
 8006bee:	f000 f98a 	bl	8006f06 <_ZSt7forwardIRPFijjPfEEOT_RNSt16remove_referenceIS4_E4typeE>
 8006bf2:	4604      	mov	r4, r0
 8006bf4:	68b8      	ldr	r0, [r7, #8]
 8006bf6:	f7ff fa0d 	bl	8006014 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8006bfa:	4605      	mov	r5, r0
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f7ff fa09 	bl	8006014 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8006c02:	4606      	mov	r6, r0
 8006c04:	6838      	ldr	r0, [r7, #0]
 8006c06:	f7ff fa10 	bl	800602a <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	9300      	str	r3, [sp, #0]
 8006c0e:	4633      	mov	r3, r6
 8006c10:	462a      	mov	r2, r5
 8006c12:	4621      	mov	r1, r4
 8006c14:	4640      	mov	r0, r8
 8006c16:	f000 f981 	bl	8006f1c <_ZSt13__invoke_implIiRPFijjPfEJjjS0_EET_St14__invoke_otherOT0_DpOT1_>
 8006c1a:	4603      	mov	r3, r0
					std::forward<_Args>(__args)...);
    }
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	3710      	adds	r7, #16
 8006c20:	46bd      	mov	sp, r7
 8006c22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006c26 <_ZNSt9_Any_data9_M_accessIPPFijjPfEEERT_v>:
      _M_access()
 8006c26:	b580      	push	{r7, lr}
 8006c28:	b082      	sub	sp, #8
 8006c2a:	af00      	add	r7, sp, #0
 8006c2c:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f7fa fcb4 	bl	800159c <_ZNSt9_Any_data9_M_accessEv>
 8006c34:	4603      	mov	r3, r0
 8006c36:	4618      	mov	r0, r3
 8006c38:	3708      	adds	r7, #8
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}

08006c3e <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8006c3e:	b5b0      	push	{r4, r5, r7, lr}
 8006c40:	b084      	sub	sp, #16
 8006c42:	af00      	add	r7, sp, #0
 8006c44:	60f8      	str	r0, [r7, #12]
 8006c46:	60b9      	str	r1, [r7, #8]
 8006c48:	4613      	mov	r3, r2
 8006c4a:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8006c4c:	79fb      	ldrb	r3, [r7, #7]
 8006c4e:	2b03      	cmp	r3, #3
 8006c50:	d016      	beq.n	8006c80 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x42>
 8006c52:	2b03      	cmp	r3, #3
 8006c54:	dc19      	bgt.n	8006c8a <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
 8006c56:	2b01      	cmp	r3, #1
 8006c58:	d002      	beq.n	8006c60 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x22>
 8006c5a:	2b02      	cmp	r3, #2
 8006c5c:	d00a      	beq.n	8006c74 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x36>
 8006c5e:	e014      	b.n	8006c8a <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8006c60:	68f8      	ldr	r0, [r7, #12]
 8006c62:	f7ff ffe0 	bl	8006c26 <_ZNSt9_Any_data9_M_accessIPPFijjPfEEERT_v>
 8006c66:	4604      	mov	r4, r0
 8006c68:	68b8      	ldr	r0, [r7, #8]
 8006c6a:	f7ff ffa6 	bl	8006bba <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>
 8006c6e:	4603      	mov	r3, r0
 8006c70:	6023      	str	r3, [r4, #0]
	      break;
 8006c72:	e00a      	b.n	8006c8a <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 8006c74:	462a      	mov	r2, r5
 8006c76:	68b9      	ldr	r1, [r7, #8]
 8006c78:	68f8      	ldr	r0, [r7, #12]
 8006c7a:	f000 f973 	bl	8006f64 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE>
	      break;
 8006c7e:	e004      	b.n	8006c8a <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 8006c80:	4621      	mov	r1, r4
 8006c82:	68f8      	ldr	r0, [r7, #12]
 8006c84:	f000 f987 	bl	8006f96 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8006c88:	bf00      	nop
	  return false;
 8006c8a:	2300      	movs	r3, #0
	}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3710      	adds	r7, #16
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bdb0      	pop	{r4, r5, r7, pc}

08006c94 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 8006c94:	b590      	push	{r4, r7, lr}
 8006c96:	b085      	sub	sp, #20
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	60f8      	str	r0, [r7, #12]
 8006c9c:	60b9      	str	r1, [r7, #8]
 8006c9e:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 8006ca0:	68b8      	ldr	r0, [r7, #8]
 8006ca2:	f7ff fda4 	bl	80067ee <_ZSt4moveIRZN14SignalWithAxes10get_signalEvEUljjPfE_EONSt16remove_referenceIT_E4typeEOS5_>
 8006ca6:	4604      	mov	r4, r0
 8006ca8:	68f8      	ldr	r0, [r7, #12]
 8006caa:	f7fa fc77 	bl	800159c <_ZNSt9_Any_data9_M_accessEv>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	4619      	mov	r1, r3
 8006cb2:	2004      	movs	r0, #4
 8006cb4:	f7fa fc00 	bl	80014b8 <_ZnwjPv>
 8006cb8:	4602      	mov	r2, r0
 8006cba:	6823      	ldr	r3, [r4, #0]
 8006cbc:	6013      	str	r3, [r2, #0]
 8006cbe:	bf00      	nop
 8006cc0:	3714      	adds	r7, #20
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd90      	pop	{r4, r7, pc}

08006cc6 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 8006cc6:	b580      	push	{r7, lr}
 8006cc8:	b084      	sub	sp, #16
 8006cca:	af00      	add	r7, sp, #0
 8006ccc:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f000 f96d 	bl	8006fae <_ZNKSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERKT_v>
 8006cd4:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8006cd6:	68f8      	ldr	r0, [r7, #12]
 8006cd8:	f000 f975 	bl	8006fc6 <_ZSt11__addressofIKZN14SignalWithAxes10get_signalEvEUljjPfE_EPT_RS4_>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	bf00      	nop
	}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	3710      	adds	r7, #16
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}

08006ce8 <_ZSt10__invoke_rIiRZN14SignalWithAxes10get_signalEvEUljjPfE_JjjS1_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt7is_voidIT_EESt14is_convertibleINSt15__invoke_resultIT0_JDpT1_EE4typeES8_EEE5valueES8_E4typeEOSD_DpOSE_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8006ce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cec:	b086      	sub	sp, #24
 8006cee:	af02      	add	r7, sp, #8
 8006cf0:	60f8      	str	r0, [r7, #12]
 8006cf2:	60b9      	str	r1, [r7, #8]
 8006cf4:	607a      	str	r2, [r7, #4]
 8006cf6:	603b      	str	r3, [r7, #0]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8006cf8:	68f8      	ldr	r0, [r7, #12]
 8006cfa:	f000 f96f 	bl	8006fdc <_ZSt7forwardIRZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS4_E4typeE>
 8006cfe:	4604      	mov	r4, r0
 8006d00:	68b8      	ldr	r0, [r7, #8]
 8006d02:	f7ff f987 	bl	8006014 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8006d06:	4605      	mov	r5, r0
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f7ff f983 	bl	8006014 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8006d0e:	4606      	mov	r6, r0
 8006d10:	6838      	ldr	r0, [r7, #0]
 8006d12:	f7ff f98a 	bl	800602a <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8006d16:	4603      	mov	r3, r0
 8006d18:	9300      	str	r3, [sp, #0]
 8006d1a:	4633      	mov	r3, r6
 8006d1c:	462a      	mov	r2, r5
 8006d1e:	4621      	mov	r1, r4
 8006d20:	4640      	mov	r0, r8
 8006d22:	f000 f966 	bl	8006ff2 <_ZSt13__invoke_implIiRZN14SignalWithAxes10get_signalEvEUljjPfE_JjjS1_EET_St14__invoke_otherOT0_DpOT1_>
 8006d26:	4603      	mov	r3, r0
    }
 8006d28:	4618      	mov	r0, r3
 8006d2a:	3710      	adds	r7, #16
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006d32 <_ZNSt9_Any_data9_M_accessIPZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>:
      _M_access()
 8006d32:	b580      	push	{r7, lr}
 8006d34:	b082      	sub	sp, #8
 8006d36:	af00      	add	r7, sp, #0
 8006d38:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f7fa fc2e 	bl	800159c <_ZNSt9_Any_data9_M_accessEv>
 8006d40:	4603      	mov	r3, r0
 8006d42:	4618      	mov	r0, r3
 8006d44:	3708      	adds	r7, #8
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}

08006d4a <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8006d4a:	b5b0      	push	{r4, r5, r7, lr}
 8006d4c:	b084      	sub	sp, #16
 8006d4e:	af00      	add	r7, sp, #0
 8006d50:	60f8      	str	r0, [r7, #12]
 8006d52:	60b9      	str	r1, [r7, #8]
 8006d54:	4613      	mov	r3, r2
 8006d56:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8006d58:	79fb      	ldrb	r3, [r7, #7]
 8006d5a:	2b03      	cmp	r3, #3
 8006d5c:	d016      	beq.n	8006d8c <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x42>
 8006d5e:	2b03      	cmp	r3, #3
 8006d60:	dc19      	bgt.n	8006d96 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
 8006d62:	2b01      	cmp	r3, #1
 8006d64:	d002      	beq.n	8006d6c <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x22>
 8006d66:	2b02      	cmp	r3, #2
 8006d68:	d00a      	beq.n	8006d80 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x36>
 8006d6a:	e014      	b.n	8006d96 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8006d6c:	68f8      	ldr	r0, [r7, #12]
 8006d6e:	f7ff ffe0 	bl	8006d32 <_ZNSt9_Any_data9_M_accessIPZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>
 8006d72:	4604      	mov	r4, r0
 8006d74:	68b8      	ldr	r0, [r7, #8]
 8006d76:	f7ff ffa6 	bl	8006cc6 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	6023      	str	r3, [r4, #0]
	      break;
 8006d7e:	e00a      	b.n	8006d96 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 8006d80:	462a      	mov	r2, r5
 8006d82:	68b9      	ldr	r1, [r7, #8]
 8006d84:	68f8      	ldr	r0, [r7, #12]
 8006d86:	f000 f958 	bl	800703a <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE>
	      break;
 8006d8a:	e004      	b.n	8006d96 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 8006d8c:	4621      	mov	r1, r4
 8006d8e:	68f8      	ldr	r0, [r7, #12]
 8006d90:	f000 f96c 	bl	800706c <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8006d94:	bf00      	nop
	  return false;
 8006d96:	2300      	movs	r3, #0
	}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	3710      	adds	r7, #16
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bdb0      	pop	{r4, r5, r7, pc}

08006da0 <_ZSt12__get_helperILj0EPvJPFvS0_EEERKT0_RKSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b082      	sub	sp, #8
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f000 f96b 	bl	8007084 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEE7_M_headERKS3_>
 8006dae:	4603      	mov	r3, r0
 8006db0:	4618      	mov	r0, r3
 8006db2:	3708      	adds	r7, #8
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}

08006db8 <_ZNSt11_Tuple_implILj1EJPFvPvEEEC1IS2_EEOT_>:
        constexpr _Tuple_impl(_UHead&& __head)
 8006db8:	b590      	push	{r4, r7, lr}
 8006dba:	b083      	sub	sp, #12
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
 8006dc0:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head)) { }
 8006dc2:	687c      	ldr	r4, [r7, #4]
 8006dc4:	6838      	ldr	r0, [r7, #0]
 8006dc6:	f7ff fb33 	bl	8006430 <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	4619      	mov	r1, r3
 8006dce:	4620      	mov	r0, r4
 8006dd0:	f000 f966 	bl	80070a0 <_ZNSt10_Head_baseILj1EPFvPvELb0EEC1IS2_EEOT_>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	370c      	adds	r7, #12
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd90      	pop	{r4, r7, pc}

08006dde <_ZNSt10_Head_baseILj0EPvLb0EEC1IRS0_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8006dde:	b580      	push	{r7, lr}
 8006de0:	b082      	sub	sp, #8
 8006de2:	af00      	add	r7, sp, #0
 8006de4:	6078      	str	r0, [r7, #4]
 8006de6:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8006de8:	6838      	ldr	r0, [r7, #0]
 8006dea:	f7ff fd6a 	bl	80068c2 <_ZSt7forwardIRPvEOT_RNSt16remove_referenceIS2_E4typeE>
 8006dee:	4603      	mov	r3, r0
 8006df0:	681a      	ldr	r2, [r3, #0]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	601a      	str	r2, [r3, #0]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3708      	adds	r7, #8
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}

08006e00 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b082      	sub	sp, #8
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	3304      	adds	r3, #4
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	f000 f958 	bl	80070c2 <_ZNSt10_Head_baseILj0EPvLb0EE7_M_headERS1_>
 8006e12:	4603      	mov	r3, r0
 8006e14:	4618      	mov	r0, r3
 8006e16:	3708      	adds	r7, #8
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}

08006e1c <_ZSt12__get_helperILj1EPFvPvEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b082      	sub	sp, #8
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f000 f957 	bl	80070d8 <_ZNSt11_Tuple_implILj1EJPFvPvEEE7_M_headERS3_>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	3708      	adds	r7, #8
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}

08006e34 <_ZNKSt6vectorImSaImEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b082      	sub	sp, #8
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	4618      	mov	r0, r3
 8006e40:	f000 f971 	bl	8007126 <_ZNKSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 8006e44:	4603      	mov	r3, r0
 8006e46:	4618      	mov	r0, r3
 8006e48:	f000 f953 	bl	80070f2 <_ZNSt6vectorImSaImEE11_S_max_sizeERKS0_>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	4618      	mov	r0, r3
 8006e50:	3708      	adds	r7, #8
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}

08006e56 <_ZNSt16allocator_traitsISaImEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 8006e56:	b580      	push	{r7, lr}
 8006e58:	b082      	sub	sp, #8
 8006e5a:	af00      	add	r7, sp, #0
 8006e5c:	6078      	str	r0, [r7, #4]
 8006e5e:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8006e60:	2200      	movs	r2, #0
 8006e62:	6839      	ldr	r1, [r7, #0]
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f000 f969 	bl	800713c <_ZN9__gnu_cxx13new_allocatorImE8allocateEjPKv>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	3708      	adds	r7, #8
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}

08006e74 <_ZNSt6vectorImSaImEE14_S_do_relocateEPmS2_S2_RS0_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b084      	sub	sp, #16
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	60f8      	str	r0, [r7, #12]
 8006e7c:	60b9      	str	r1, [r7, #8]
 8006e7e:	607a      	str	r2, [r7, #4]
 8006e80:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	687a      	ldr	r2, [r7, #4]
 8006e86:	68b9      	ldr	r1, [r7, #8]
 8006e88:	68f8      	ldr	r0, [r7, #12]
 8006e8a:	f000 f975 	bl	8007178 <_ZSt12__relocate_aIPmS0_SaImEET0_T_S3_S2_RT1_>
 8006e8e:	4603      	mov	r3, r0
      }
 8006e90:	4618      	mov	r0, r3
 8006e92:	3710      	adds	r7, #16
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}

08006e98 <_ZSt32__make_move_if_noexcept_iteratorImSt13move_iteratorIPmEET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b084      	sub	sp, #16
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8006ea0:	f107 030c 	add.w	r3, r7, #12
 8006ea4:	6879      	ldr	r1, [r7, #4]
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	f000 f983 	bl	80071b2 <_ZNSt13move_iteratorIPmEC1ES0_>
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	4618      	mov	r0, r3
 8006eb0:	3710      	adds	r7, #16
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}

08006eb6 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPmES1_mET0_T_S4_S3_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8006eb6:	b580      	push	{r7, lr}
 8006eb8:	b084      	sub	sp, #16
 8006eba:	af00      	add	r7, sp, #0
 8006ebc:	60f8      	str	r0, [r7, #12]
 8006ebe:	60b9      	str	r1, [r7, #8]
 8006ec0:	607a      	str	r2, [r7, #4]
 8006ec2:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8006ec4:	687a      	ldr	r2, [r7, #4]
 8006ec6:	68b9      	ldr	r1, [r7, #8]
 8006ec8:	68f8      	ldr	r0, [r7, #12]
 8006eca:	f000 f984 	bl	80071d6 <_ZSt18uninitialized_copyISt13move_iteratorIPmES1_ET0_T_S4_S3_>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	3710      	adds	r7, #16
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}

08006ed8 <_ZNKSt9_Any_data9_M_accessIPFijjPfEEERKT_v>:
      _M_access() const
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b082      	sub	sp, #8
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	f7fa fb66 	bl	80015b2 <_ZNKSt9_Any_data9_M_accessEv>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	4618      	mov	r0, r3
 8006eea:	3708      	adds	r7, #8
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}

08006ef0 <_ZSt11__addressofIKPFijjPfEEPT_RS4_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8006ef0:	b480      	push	{r7}
 8006ef2:	b083      	sub	sp, #12
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	4618      	mov	r0, r3
 8006efc:	370c      	adds	r7, #12
 8006efe:	46bd      	mov	sp, r7
 8006f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f04:	4770      	bx	lr

08006f06 <_ZSt7forwardIRPFijjPfEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8006f06:	b480      	push	{r7}
 8006f08:	b083      	sub	sp, #12
 8006f0a:	af00      	add	r7, sp, #0
 8006f0c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	4618      	mov	r0, r3
 8006f12:	370c      	adds	r7, #12
 8006f14:	46bd      	mov	sp, r7
 8006f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1a:	4770      	bx	lr

08006f1c <_ZSt13__invoke_implIiRPFijjPfEJjjS0_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8006f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f1e:	b085      	sub	sp, #20
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	7338      	strb	r0, [r7, #12]
 8006f24:	60b9      	str	r1, [r7, #8]
 8006f26:	607a      	str	r2, [r7, #4]
 8006f28:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8006f2a:	68b8      	ldr	r0, [r7, #8]
 8006f2c:	f7ff ffeb 	bl	8006f06 <_ZSt7forwardIRPFijjPfEEOT_RNSt16remove_referenceIS4_E4typeE>
 8006f30:	4603      	mov	r3, r0
 8006f32:	681c      	ldr	r4, [r3, #0]
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f7ff f86d 	bl	8006014 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	681d      	ldr	r5, [r3, #0]
 8006f3e:	6838      	ldr	r0, [r7, #0]
 8006f40:	f7ff f868 	bl	8006014 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8006f44:	4603      	mov	r3, r0
 8006f46:	681e      	ldr	r6, [r3, #0]
 8006f48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f4a:	f7ff f86e 	bl	800602a <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	461a      	mov	r2, r3
 8006f54:	4631      	mov	r1, r6
 8006f56:	4628      	mov	r0, r5
 8006f58:	47a0      	blx	r4
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	3714      	adds	r7, #20
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006f64 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 8006f64:	b590      	push	{r4, r7, lr}
 8006f66:	b085      	sub	sp, #20
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	60f8      	str	r0, [r7, #12]
 8006f6c:	60b9      	str	r1, [r7, #8]
 8006f6e:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 8006f70:	68b8      	ldr	r0, [r7, #8]
 8006f72:	f7ff ffb1 	bl	8006ed8 <_ZNKSt9_Any_data9_M_accessIPFijjPfEEERKT_v>
 8006f76:	4603      	mov	r3, r0
 8006f78:	681c      	ldr	r4, [r3, #0]
 8006f7a:	68f8      	ldr	r0, [r7, #12]
 8006f7c:	f7fa fb0e 	bl	800159c <_ZNSt9_Any_data9_M_accessEv>
 8006f80:	4603      	mov	r3, r0
 8006f82:	4619      	mov	r1, r3
 8006f84:	2004      	movs	r0, #4
 8006f86:	f7fa fa97 	bl	80014b8 <_ZnwjPv>
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	601c      	str	r4, [r3, #0]
	}
 8006f8e:	bf00      	nop
 8006f90:	3714      	adds	r7, #20
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd90      	pop	{r4, r7, pc}

08006f96 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8006f96:	b580      	push	{r7, lr}
 8006f98:	b082      	sub	sp, #8
 8006f9a:	af00      	add	r7, sp, #0
 8006f9c:	6078      	str	r0, [r7, #4]
 8006f9e:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f000 f92a 	bl	80071fa <_ZNSt9_Any_data9_M_accessIPFijjPfEEERT_v>
	}
 8006fa6:	bf00      	nop
 8006fa8:	3708      	adds	r7, #8
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}

08006fae <_ZNKSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERKT_v>:
      _M_access() const
 8006fae:	b580      	push	{r7, lr}
 8006fb0:	b082      	sub	sp, #8
 8006fb2:	af00      	add	r7, sp, #0
 8006fb4:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f7fa fafb 	bl	80015b2 <_ZNKSt9_Any_data9_M_accessEv>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3708      	adds	r7, #8
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}

08006fc6 <_ZSt11__addressofIKZN14SignalWithAxes10get_signalEvEUljjPfE_EPT_RS4_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8006fc6:	b480      	push	{r7}
 8006fc8:	b083      	sub	sp, #12
 8006fca:	af00      	add	r7, sp, #0
 8006fcc:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	370c      	adds	r7, #12
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fda:	4770      	bx	lr

08006fdc <_ZSt7forwardIRZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8006fdc:	b480      	push	{r7}
 8006fde:	b083      	sub	sp, #12
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	370c      	adds	r7, #12
 8006fea:	46bd      	mov	sp, r7
 8006fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff0:	4770      	bx	lr

08006ff2 <_ZSt13__invoke_implIiRZN14SignalWithAxes10get_signalEvEUljjPfE_JjjS1_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8006ff2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ff4:	b085      	sub	sp, #20
 8006ff6:	af00      	add	r7, sp, #0
 8006ff8:	7338      	strb	r0, [r7, #12]
 8006ffa:	60b9      	str	r1, [r7, #8]
 8006ffc:	607a      	str	r2, [r7, #4]
 8006ffe:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8007000:	68b8      	ldr	r0, [r7, #8]
 8007002:	f7ff ffeb 	bl	8006fdc <_ZSt7forwardIRZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS4_E4typeE>
 8007006:	4606      	mov	r6, r0
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f7ff f803 	bl	8006014 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800700e:	4603      	mov	r3, r0
 8007010:	681c      	ldr	r4, [r3, #0]
 8007012:	6838      	ldr	r0, [r7, #0]
 8007014:	f7fe fffe 	bl	8006014 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8007018:	4603      	mov	r3, r0
 800701a:	681d      	ldr	r5, [r3, #0]
 800701c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800701e:	f7ff f804 	bl	800602a <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8007022:	4603      	mov	r3, r0
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	462a      	mov	r2, r5
 8007028:	4621      	mov	r1, r4
 800702a:	4630      	mov	r0, r6
 800702c:	f7fd fc9f 	bl	800496e <_ZZN14SignalWithAxes10get_signalEvENKUljjPfE_clEjjS0_>
 8007030:	4603      	mov	r3, r0
 8007032:	4618      	mov	r0, r3
 8007034:	3714      	adds	r7, #20
 8007036:	46bd      	mov	sp, r7
 8007038:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800703a <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 800703a:	b590      	push	{r4, r7, lr}
 800703c:	b085      	sub	sp, #20
 800703e:	af00      	add	r7, sp, #0
 8007040:	60f8      	str	r0, [r7, #12]
 8007042:	60b9      	str	r1, [r7, #8]
 8007044:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 8007046:	68b8      	ldr	r0, [r7, #8]
 8007048:	f7ff ffb1 	bl	8006fae <_ZNKSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERKT_v>
 800704c:	4604      	mov	r4, r0
 800704e:	68f8      	ldr	r0, [r7, #12]
 8007050:	f7fa faa4 	bl	800159c <_ZNSt9_Any_data9_M_accessEv>
 8007054:	4603      	mov	r3, r0
 8007056:	4619      	mov	r1, r3
 8007058:	2004      	movs	r0, #4
 800705a:	f7fa fa2d 	bl	80014b8 <_ZnwjPv>
 800705e:	4602      	mov	r2, r0
 8007060:	6823      	ldr	r3, [r4, #0]
 8007062:	6013      	str	r3, [r2, #0]
	}
 8007064:	bf00      	nop
 8007066:	3714      	adds	r7, #20
 8007068:	46bd      	mov	sp, r7
 800706a:	bd90      	pop	{r4, r7, pc}

0800706c <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 800706c:	b580      	push	{r7, lr}
 800706e:	b082      	sub	sp, #8
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
 8007074:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f000 f8cb 	bl	8007212 <_ZNSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>
	}
 800707c:	bf00      	nop
 800707e:	3708      	adds	r7, #8
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}

08007084 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEE7_M_headERKS3_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8007084:	b580      	push	{r7, lr}
 8007086:	b082      	sub	sp, #8
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	3304      	adds	r3, #4
 8007090:	4618      	mov	r0, r3
 8007092:	f000 f8ca 	bl	800722a <_ZNSt10_Head_baseILj0EPvLb0EE7_M_headERKS1_>
 8007096:	4603      	mov	r3, r0
 8007098:	4618      	mov	r0, r3
 800709a:	3708      	adds	r7, #8
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}

080070a0 <_ZNSt10_Head_baseILj1EPFvPvELb0EEC1IS2_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b082      	sub	sp, #8
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
 80070a8:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80070aa:	6838      	ldr	r0, [r7, #0]
 80070ac:	f7ff f9c0 	bl	8006430 <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 80070b0:	4603      	mov	r3, r0
 80070b2:	681a      	ldr	r2, [r3, #0]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	601a      	str	r2, [r3, #0]
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	4618      	mov	r0, r3
 80070bc:	3708      	adds	r7, #8
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}

080070c2 <_ZNSt10_Head_baseILj0EPvLb0EE7_M_headERS1_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80070c2:	b480      	push	{r7}
 80070c4:	b083      	sub	sp, #12
 80070c6:	af00      	add	r7, sp, #0
 80070c8:	6078      	str	r0, [r7, #4]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	4618      	mov	r0, r3
 80070ce:	370c      	adds	r7, #12
 80070d0:	46bd      	mov	sp, r7
 80070d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d6:	4770      	bx	lr

080070d8 <_ZNSt11_Tuple_implILj1EJPFvPvEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80070d8:	b580      	push	{r7, lr}
 80070da:	b082      	sub	sp, #8
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	4618      	mov	r0, r3
 80070e4:	f000 f8ac 	bl	8007240 <_ZNSt10_Head_baseILj1EPFvPvELb0EE7_M_headERS3_>
 80070e8:	4603      	mov	r3, r0
 80070ea:	4618      	mov	r0, r3
 80070ec:	3708      	adds	r7, #8
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}

080070f2 <_ZNSt6vectorImSaImEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 80070f2:	b580      	push	{r7, lr}
 80070f4:	b084      	sub	sp, #16
 80070f6:	af00      	add	r7, sp, #0
 80070f8:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 80070fa:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 80070fe:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f000 f8a8 	bl	8007256 <_ZNSt16allocator_traitsISaImEE8max_sizeERKS0_>
 8007106:	4603      	mov	r3, r0
 8007108:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800710a:	f107 0208 	add.w	r2, r7, #8
 800710e:	f107 030c 	add.w	r3, r7, #12
 8007112:	4611      	mov	r1, r2
 8007114:	4618      	mov	r0, r3
 8007116:	f7ff fc2a 	bl	800696e <_ZSt3minIjERKT_S2_S2_>
 800711a:	4603      	mov	r3, r0
 800711c:	681b      	ldr	r3, [r3, #0]
      }
 800711e:	4618      	mov	r0, r3
 8007120:	3710      	adds	r7, #16
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}

08007126 <_ZNKSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8007126:	b480      	push	{r7}
 8007128:	b083      	sub	sp, #12
 800712a:	af00      	add	r7, sp, #0
 800712c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	4618      	mov	r0, r3
 8007132:	370c      	adds	r7, #12
 8007134:	46bd      	mov	sp, r7
 8007136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713a:	4770      	bx	lr

0800713c <_ZN9__gnu_cxx13new_allocatorImE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800713c:	b580      	push	{r7, lr}
 800713e:	b084      	sub	sp, #16
 8007140:	af00      	add	r7, sp, #0
 8007142:	60f8      	str	r0, [r7, #12]
 8007144:	60b9      	str	r1, [r7, #8]
 8007146:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8007148:	68f8      	ldr	r0, [r7, #12]
 800714a:	f000 f890 	bl	800726e <_ZNK9__gnu_cxx13new_allocatorImE11_M_max_sizeEv>
 800714e:	4602      	mov	r2, r0
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	4293      	cmp	r3, r2
 8007154:	bf8c      	ite	hi
 8007156:	2301      	movhi	r3, #1
 8007158:	2300      	movls	r3, #0
 800715a:	b2db      	uxtb	r3, r3
 800715c:	2b00      	cmp	r3, #0
 800715e:	d001      	beq.n	8007164 <_ZN9__gnu_cxx13new_allocatorImE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8007160:	f028 fb3f 	bl	802f7e2 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	009b      	lsls	r3, r3, #2
 8007168:	4618      	mov	r0, r3
 800716a:	f028 fb27 	bl	802f7bc <_Znwj>
 800716e:	4603      	mov	r3, r0
      }
 8007170:	4618      	mov	r0, r3
 8007172:	3710      	adds	r7, #16
 8007174:	46bd      	mov	sp, r7
 8007176:	bd80      	pop	{r7, pc}

08007178 <_ZSt12__relocate_aIPmS0_SaImEET0_T_S3_S2_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8007178:	b5b0      	push	{r4, r5, r7, lr}
 800717a:	b084      	sub	sp, #16
 800717c:	af00      	add	r7, sp, #0
 800717e:	60f8      	str	r0, [r7, #12]
 8007180:	60b9      	str	r1, [r7, #8]
 8007182:	607a      	str	r2, [r7, #4]
 8007184:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 8007186:	68f8      	ldr	r0, [r7, #12]
 8007188:	f000 f87d 	bl	8007286 <_ZSt12__niter_baseIPmET_S1_>
 800718c:	4604      	mov	r4, r0
 800718e:	68b8      	ldr	r0, [r7, #8]
 8007190:	f000 f879 	bl	8007286 <_ZSt12__niter_baseIPmET_S1_>
 8007194:	4605      	mov	r5, r0
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f000 f875 	bl	8007286 <_ZSt12__niter_baseIPmET_S1_>
 800719c:	4602      	mov	r2, r0
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	4629      	mov	r1, r5
 80071a2:	4620      	mov	r0, r4
 80071a4:	f000 f87a 	bl	800729c <_ZSt14__relocate_a_1ImmENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>
 80071a8:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 80071aa:	4618      	mov	r0, r3
 80071ac:	3710      	adds	r7, #16
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bdb0      	pop	{r4, r5, r7, pc}

080071b2 <_ZNSt13move_iteratorIPmEC1ES0_>:
      move_iterator(iterator_type __i)
 80071b2:	b580      	push	{r7, lr}
 80071b4:	b082      	sub	sp, #8
 80071b6:	af00      	add	r7, sp, #0
 80071b8:	6078      	str	r0, [r7, #4]
 80071ba:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 80071bc:	463b      	mov	r3, r7
 80071be:	4618      	mov	r0, r3
 80071c0:	f000 f88a 	bl	80072d8 <_ZSt4moveIRPmEONSt16remove_referenceIT_E4typeEOS3_>
 80071c4:	4603      	mov	r3, r0
 80071c6:	681a      	ldr	r2, [r3, #0]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	601a      	str	r2, [r3, #0]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	4618      	mov	r0, r3
 80071d0:	3708      	adds	r7, #8
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}

080071d6 <_ZSt18uninitialized_copyISt13move_iteratorIPmES1_ET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 80071d6:	b580      	push	{r7, lr}
 80071d8:	b086      	sub	sp, #24
 80071da:	af00      	add	r7, sp, #0
 80071dc:	60f8      	str	r0, [r7, #12]
 80071de:	60b9      	str	r1, [r7, #8]
 80071e0:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 80071e2:	2301      	movs	r3, #1
 80071e4:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 80071e6:	687a      	ldr	r2, [r7, #4]
 80071e8:	68b9      	ldr	r1, [r7, #8]
 80071ea:	68f8      	ldr	r0, [r7, #12]
 80071ec:	f000 f87f 	bl	80072ee <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPmES3_EET0_T_S6_S5_>
 80071f0:	4603      	mov	r3, r0
    }
 80071f2:	4618      	mov	r0, r3
 80071f4:	3718      	adds	r7, #24
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}

080071fa <_ZNSt9_Any_data9_M_accessIPFijjPfEEERT_v>:
      _M_access()
 80071fa:	b580      	push	{r7, lr}
 80071fc:	b082      	sub	sp, #8
 80071fe:	af00      	add	r7, sp, #0
 8007200:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f7fa f9ca 	bl	800159c <_ZNSt9_Any_data9_M_accessEv>
 8007208:	4603      	mov	r3, r0
 800720a:	4618      	mov	r0, r3
 800720c:	3708      	adds	r7, #8
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}

08007212 <_ZNSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>:
      _M_access()
 8007212:	b580      	push	{r7, lr}
 8007214:	b082      	sub	sp, #8
 8007216:	af00      	add	r7, sp, #0
 8007218:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f7fa f9be 	bl	800159c <_ZNSt9_Any_data9_M_accessEv>
 8007220:	4603      	mov	r3, r0
 8007222:	4618      	mov	r0, r3
 8007224:	3708      	adds	r7, #8
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}

0800722a <_ZNSt10_Head_baseILj0EPvLb0EE7_M_headERKS1_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 800722a:	b480      	push	{r7}
 800722c:	b083      	sub	sp, #12
 800722e:	af00      	add	r7, sp, #0
 8007230:	6078      	str	r0, [r7, #4]
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	4618      	mov	r0, r3
 8007236:	370c      	adds	r7, #12
 8007238:	46bd      	mov	sp, r7
 800723a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723e:	4770      	bx	lr

08007240 <_ZNSt10_Head_baseILj1EPFvPvELb0EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8007240:	b480      	push	{r7}
 8007242:	b083      	sub	sp, #12
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	4618      	mov	r0, r3
 800724c:	370c      	adds	r7, #12
 800724e:	46bd      	mov	sp, r7
 8007250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007254:	4770      	bx	lr

08007256 <_ZNSt16allocator_traitsISaImEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8007256:	b580      	push	{r7, lr}
 8007258:	b082      	sub	sp, #8
 800725a:	af00      	add	r7, sp, #0
 800725c:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f000 f855 	bl	800730e <_ZNK9__gnu_cxx13new_allocatorImE8max_sizeEv>
 8007264:	4603      	mov	r3, r0
      }
 8007266:	4618      	mov	r0, r3
 8007268:	3708      	adds	r7, #8
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}

0800726e <_ZNK9__gnu_cxx13new_allocatorImE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800726e:	b480      	push	{r7}
 8007270:	b083      	sub	sp, #12
 8007272:	af00      	add	r7, sp, #0
 8007274:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8007276:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 800727a:	4618      	mov	r0, r3
 800727c:	370c      	adds	r7, #12
 800727e:	46bd      	mov	sp, r7
 8007280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007284:	4770      	bx	lr

08007286 <_ZSt12__niter_baseIPmET_S1_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the __normal_iterator wrapper. See copy, fill, ...
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __niter_base(_Iterator __it)
 8007286:	b480      	push	{r7}
 8007288:	b083      	sub	sp, #12
 800728a:	af00      	add	r7, sp, #0
 800728c:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it; }
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	4618      	mov	r0, r3
 8007292:	370c      	adds	r7, #12
 8007294:	46bd      	mov	sp, r7
 8007296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729a:	4770      	bx	lr

0800729c <_ZSt14__relocate_a_1ImmENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 800729c:	b580      	push	{r7, lr}
 800729e:	b086      	sub	sp, #24
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	60f8      	str	r0, [r7, #12]
 80072a4:	60b9      	str	r1, [r7, #8]
 80072a6:	607a      	str	r2, [r7, #4]
 80072a8:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 80072aa:	68ba      	ldr	r2, [r7, #8]
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	1ad3      	subs	r3, r2, r3
 80072b0:	109b      	asrs	r3, r3, #2
 80072b2:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	dd06      	ble.n	80072c8 <_ZSt14__relocate_a_1ImmENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	009b      	lsls	r3, r3, #2
 80072be:	461a      	mov	r2, r3
 80072c0:	68f9      	ldr	r1, [r7, #12]
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f02a ff56 	bl	8032174 <memmove>
      return __result + __count;
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	009b      	lsls	r3, r3, #2
 80072cc:	687a      	ldr	r2, [r7, #4]
 80072ce:	4413      	add	r3, r2
    }
 80072d0:	4618      	mov	r0, r3
 80072d2:	3718      	adds	r7, #24
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd80      	pop	{r7, pc}

080072d8 <_ZSt4moveIRPmEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 80072d8:	b480      	push	{r7}
 80072da:	b083      	sub	sp, #12
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	4618      	mov	r0, r3
 80072e4:	370c      	adds	r7, #12
 80072e6:	46bd      	mov	sp, r7
 80072e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ec:	4770      	bx	lr

080072ee <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPmES3_EET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 80072ee:	b580      	push	{r7, lr}
 80072f0:	b084      	sub	sp, #16
 80072f2:	af00      	add	r7, sp, #0
 80072f4:	60f8      	str	r0, [r7, #12]
 80072f6:	60b9      	str	r1, [r7, #8]
 80072f8:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 80072fa:	687a      	ldr	r2, [r7, #4]
 80072fc:	68b9      	ldr	r1, [r7, #8]
 80072fe:	68f8      	ldr	r0, [r7, #12]
 8007300:	f000 f811 	bl	8007326 <_ZSt4copyISt13move_iteratorIPmES1_ET0_T_S4_S3_>
 8007304:	4603      	mov	r3, r0
 8007306:	4618      	mov	r0, r3
 8007308:	3710      	adds	r7, #16
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}

0800730e <_ZNK9__gnu_cxx13new_allocatorImE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800730e:	b580      	push	{r7, lr}
 8007310:	b082      	sub	sp, #8
 8007312:	af00      	add	r7, sp, #0
 8007314:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f7ff ffa9 	bl	800726e <_ZNK9__gnu_cxx13new_allocatorImE11_M_max_sizeEv>
 800731c:	4603      	mov	r3, r0
 800731e:	4618      	mov	r0, r3
 8007320:	3708      	adds	r7, #8
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}

08007326 <_ZSt4copyISt13move_iteratorIPmES1_ET0_T_S4_S3_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8007326:	b590      	push	{r4, r7, lr}
 8007328:	b085      	sub	sp, #20
 800732a:	af00      	add	r7, sp, #0
 800732c:	60f8      	str	r0, [r7, #12]
 800732e:	60b9      	str	r1, [r7, #8]
 8007330:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8007332:	68f8      	ldr	r0, [r7, #12]
 8007334:	f000 f80f 	bl	8007356 <_ZSt12__miter_baseIPmEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8007338:	4604      	mov	r4, r0
 800733a:	68b8      	ldr	r0, [r7, #8]
 800733c:	f000 f80b 	bl	8007356 <_ZSt12__miter_baseIPmEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8007340:	4603      	mov	r3, r0
 8007342:	687a      	ldr	r2, [r7, #4]
 8007344:	4619      	mov	r1, r3
 8007346:	4620      	mov	r0, r4
 8007348:	f000 f816 	bl	8007378 <_ZSt13__copy_move_aILb1EPmS0_ET1_T0_S2_S1_>
 800734c:	4603      	mov	r3, r0
    }
 800734e:	4618      	mov	r0, r3
 8007350:	3714      	adds	r7, #20
 8007352:	46bd      	mov	sp, r7
 8007354:	bd90      	pop	{r4, r7, pc}

08007356 <_ZSt12__miter_baseIPmEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
 8007356:	b580      	push	{r7, lr}
 8007358:	b082      	sub	sp, #8
 800735a:	af00      	add	r7, sp, #0
 800735c:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 800735e:	1d3b      	adds	r3, r7, #4
 8007360:	4618      	mov	r0, r3
 8007362:	f000 f82c 	bl	80073be <_ZNKSt13move_iteratorIPmE4baseEv>
 8007366:	4603      	mov	r3, r0
 8007368:	4618      	mov	r0, r3
 800736a:	f000 f834 	bl	80073d6 <_ZSt12__miter_baseIPmET_S1_>
 800736e:	4603      	mov	r3, r0
 8007370:	4618      	mov	r0, r3
 8007372:	3708      	adds	r7, #8
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}

08007378 <_ZSt13__copy_move_aILb1EPmS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8007378:	b5b0      	push	{r4, r5, r7, lr}
 800737a:	b084      	sub	sp, #16
 800737c:	af00      	add	r7, sp, #0
 800737e:	60f8      	str	r0, [r7, #12]
 8007380:	60b9      	str	r1, [r7, #8]
 8007382:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8007384:	68f8      	ldr	r0, [r7, #12]
 8007386:	f7ff ff7e 	bl	8007286 <_ZSt12__niter_baseIPmET_S1_>
 800738a:	4604      	mov	r4, r0
 800738c:	68b8      	ldr	r0, [r7, #8]
 800738e:	f7ff ff7a 	bl	8007286 <_ZSt12__niter_baseIPmET_S1_>
 8007392:	4605      	mov	r5, r0
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	4618      	mov	r0, r3
 8007398:	f7ff ff75 	bl	8007286 <_ZSt12__niter_baseIPmET_S1_>
 800739c:	4603      	mov	r3, r0
 800739e:	461a      	mov	r2, r3
 80073a0:	4629      	mov	r1, r5
 80073a2:	4620      	mov	r0, r4
 80073a4:	f000 f822 	bl	80073ec <_ZSt14__copy_move_a1ILb1EPmS0_ET1_T0_S2_S1_>
 80073a8:	4602      	mov	r2, r0
 80073aa:	1d3b      	adds	r3, r7, #4
 80073ac:	4611      	mov	r1, r2
 80073ae:	4618      	mov	r0, r3
 80073b0:	f000 f82c 	bl	800740c <_ZSt12__niter_wrapIPmET_RKS1_S1_>
 80073b4:	4603      	mov	r3, r0
    }
 80073b6:	4618      	mov	r0, r3
 80073b8:	3710      	adds	r7, #16
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bdb0      	pop	{r4, r5, r7, pc}

080073be <_ZNKSt13move_iteratorIPmE4baseEv>:
      base() const
 80073be:	b480      	push	{r7}
 80073c0:	b083      	sub	sp, #12
 80073c2:	af00      	add	r7, sp, #0
 80073c4:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4618      	mov	r0, r3
 80073cc:	370c      	adds	r7, #12
 80073ce:	46bd      	mov	sp, r7
 80073d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d4:	4770      	bx	lr

080073d6 <_ZSt12__miter_baseIPmET_S1_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 80073d6:	b480      	push	{r7}
 80073d8:	b083      	sub	sp, #12
 80073da:	af00      	add	r7, sp, #0
 80073dc:	6078      	str	r0, [r7, #4]
    { return __it; }
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	4618      	mov	r0, r3
 80073e2:	370c      	adds	r7, #12
 80073e4:	46bd      	mov	sp, r7
 80073e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ea:	4770      	bx	lr

080073ec <_ZSt14__copy_move_a1ILb1EPmS0_ET1_T0_S2_S1_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b084      	sub	sp, #16
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	60f8      	str	r0, [r7, #12]
 80073f4:	60b9      	str	r1, [r7, #8]
 80073f6:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 80073f8:	687a      	ldr	r2, [r7, #4]
 80073fa:	68b9      	ldr	r1, [r7, #8]
 80073fc:	68f8      	ldr	r0, [r7, #12]
 80073fe:	f000 f811 	bl	8007424 <_ZSt14__copy_move_a2ILb1EPmS0_ET1_T0_S2_S1_>
 8007402:	4603      	mov	r3, r0
 8007404:	4618      	mov	r0, r3
 8007406:	3710      	adds	r7, #16
 8007408:	46bd      	mov	sp, r7
 800740a:	bd80      	pop	{r7, pc}

0800740c <_ZSt12__niter_wrapIPmET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 800740c:	b480      	push	{r7}
 800740e:	b083      	sub	sp, #12
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
 8007414:	6039      	str	r1, [r7, #0]
    { return __res; }
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	4618      	mov	r0, r3
 800741a:	370c      	adds	r7, #12
 800741c:	46bd      	mov	sp, r7
 800741e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007422:	4770      	bx	lr

08007424 <_ZSt14__copy_move_a2ILb1EPmS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8007424:	b580      	push	{r7, lr}
 8007426:	b084      	sub	sp, #16
 8007428:	af00      	add	r7, sp, #0
 800742a:	60f8      	str	r0, [r7, #12]
 800742c:	60b9      	str	r1, [r7, #8]
 800742e:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8007430:	687a      	ldr	r2, [r7, #4]
 8007432:	68b9      	ldr	r1, [r7, #8]
 8007434:	68f8      	ldr	r0, [r7, #12]
 8007436:	f000 f805 	bl	8007444 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mImEEPT_PKS3_S6_S4_>
 800743a:	4603      	mov	r3, r0
    }
 800743c:	4618      	mov	r0, r3
 800743e:	3710      	adds	r7, #16
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}

08007444 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mImEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8007444:	b580      	push	{r7, lr}
 8007446:	b086      	sub	sp, #24
 8007448:	af00      	add	r7, sp, #0
 800744a:	60f8      	str	r0, [r7, #12]
 800744c:	60b9      	str	r1, [r7, #8]
 800744e:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8007450:	68ba      	ldr	r2, [r7, #8]
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	1ad3      	subs	r3, r2, r3
 8007456:	109b      	asrs	r3, r3, #2
 8007458:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800745a:	697b      	ldr	r3, [r7, #20]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d006      	beq.n	800746e <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mImEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	009b      	lsls	r3, r3, #2
 8007464:	461a      	mov	r2, r3
 8007466:	68f9      	ldr	r1, [r7, #12]
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f02a fe83 	bl	8032174 <memmove>
	  return __result + _Num;
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	009b      	lsls	r3, r3, #2
 8007472:	687a      	ldr	r2, [r7, #4]
 8007474:	4413      	add	r3, r2
	}
 8007476:	4618      	mov	r0, r3
 8007478:	3718      	adds	r7, #24
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}
	...

08007480 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8007484:	4b1b      	ldr	r3, [pc, #108]	; (80074f4 <MX_SPI1_Init+0x74>)
 8007486:	4a1c      	ldr	r2, [pc, #112]	; (80074f8 <MX_SPI1_Init+0x78>)
 8007488:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800748a:	4b1a      	ldr	r3, [pc, #104]	; (80074f4 <MX_SPI1_Init+0x74>)
 800748c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007490:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8007492:	4b18      	ldr	r3, [pc, #96]	; (80074f4 <MX_SPI1_Init+0x74>)
 8007494:	2200      	movs	r2, #0
 8007496:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8007498:	4b16      	ldr	r3, [pc, #88]	; (80074f4 <MX_SPI1_Init+0x74>)
 800749a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800749e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80074a0:	4b14      	ldr	r3, [pc, #80]	; (80074f4 <MX_SPI1_Init+0x74>)
 80074a2:	2200      	movs	r2, #0
 80074a4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80074a6:	4b13      	ldr	r3, [pc, #76]	; (80074f4 <MX_SPI1_Init+0x74>)
 80074a8:	2200      	movs	r2, #0
 80074aa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80074ac:	4b11      	ldr	r3, [pc, #68]	; (80074f4 <MX_SPI1_Init+0x74>)
 80074ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80074b2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80074b4:	4b0f      	ldr	r3, [pc, #60]	; (80074f4 <MX_SPI1_Init+0x74>)
 80074b6:	2208      	movs	r2, #8
 80074b8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80074ba:	4b0e      	ldr	r3, [pc, #56]	; (80074f4 <MX_SPI1_Init+0x74>)
 80074bc:	2200      	movs	r2, #0
 80074be:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80074c0:	4b0c      	ldr	r3, [pc, #48]	; (80074f4 <MX_SPI1_Init+0x74>)
 80074c2:	2200      	movs	r2, #0
 80074c4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80074c6:	4b0b      	ldr	r3, [pc, #44]	; (80074f4 <MX_SPI1_Init+0x74>)
 80074c8:	2200      	movs	r2, #0
 80074ca:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80074cc:	4b09      	ldr	r3, [pc, #36]	; (80074f4 <MX_SPI1_Init+0x74>)
 80074ce:	2207      	movs	r2, #7
 80074d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80074d2:	4b08      	ldr	r3, [pc, #32]	; (80074f4 <MX_SPI1_Init+0x74>)
 80074d4:	2200      	movs	r2, #0
 80074d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80074d8:	4b06      	ldr	r3, [pc, #24]	; (80074f4 <MX_SPI1_Init+0x74>)
 80074da:	2208      	movs	r2, #8
 80074dc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80074de:	4805      	ldr	r0, [pc, #20]	; (80074f4 <MX_SPI1_Init+0x74>)
 80074e0:	f006 feb4 	bl	800e24c <HAL_SPI_Init>
 80074e4:	4603      	mov	r3, r0
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d001      	beq.n	80074ee <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80074ea:	f7fe fb4d 	bl	8005b88 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80074ee:	bf00      	nop
 80074f0:	bd80      	pop	{r7, pc}
 80074f2:	bf00      	nop
 80074f4:	2000080c 	.word	0x2000080c
 80074f8:	40013000 	.word	0x40013000

080074fc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b08a      	sub	sp, #40	; 0x28
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007504:	f107 0314 	add.w	r3, r7, #20
 8007508:	2200      	movs	r2, #0
 800750a:	601a      	str	r2, [r3, #0]
 800750c:	605a      	str	r2, [r3, #4]
 800750e:	609a      	str	r2, [r3, #8]
 8007510:	60da      	str	r2, [r3, #12]
 8007512:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4a17      	ldr	r2, [pc, #92]	; (8007578 <HAL_SPI_MspInit+0x7c>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d128      	bne.n	8007570 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800751e:	4b17      	ldr	r3, [pc, #92]	; (800757c <HAL_SPI_MspInit+0x80>)
 8007520:	699b      	ldr	r3, [r3, #24]
 8007522:	4a16      	ldr	r2, [pc, #88]	; (800757c <HAL_SPI_MspInit+0x80>)
 8007524:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007528:	6193      	str	r3, [r2, #24]
 800752a:	4b14      	ldr	r3, [pc, #80]	; (800757c <HAL_SPI_MspInit+0x80>)
 800752c:	699b      	ldr	r3, [r3, #24]
 800752e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007532:	613b      	str	r3, [r7, #16]
 8007534:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007536:	4b11      	ldr	r3, [pc, #68]	; (800757c <HAL_SPI_MspInit+0x80>)
 8007538:	695b      	ldr	r3, [r3, #20]
 800753a:	4a10      	ldr	r2, [pc, #64]	; (800757c <HAL_SPI_MspInit+0x80>)
 800753c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007540:	6153      	str	r3, [r2, #20]
 8007542:	4b0e      	ldr	r3, [pc, #56]	; (800757c <HAL_SPI_MspInit+0x80>)
 8007544:	695b      	ldr	r3, [r3, #20]
 8007546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800754a:	60fb      	str	r3, [r7, #12]
 800754c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 800754e:	23e0      	movs	r3, #224	; 0xe0
 8007550:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007552:	2302      	movs	r3, #2
 8007554:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007556:	2300      	movs	r3, #0
 8007558:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800755a:	2303      	movs	r3, #3
 800755c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800755e:	2305      	movs	r3, #5
 8007560:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007562:	f107 0314 	add.w	r3, r7, #20
 8007566:	4619      	mov	r1, r3
 8007568:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800756c:	f002 fd64 	bl	800a038 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8007570:	bf00      	nop
 8007572:	3728      	adds	r7, #40	; 0x28
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}
 8007578:	40013000 	.word	0x40013000
 800757c:	40021000 	.word	0x40021000

08007580 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b082      	sub	sp, #8
 8007584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007586:	4b0f      	ldr	r3, [pc, #60]	; (80075c4 <HAL_MspInit+0x44>)
 8007588:	699b      	ldr	r3, [r3, #24]
 800758a:	4a0e      	ldr	r2, [pc, #56]	; (80075c4 <HAL_MspInit+0x44>)
 800758c:	f043 0301 	orr.w	r3, r3, #1
 8007590:	6193      	str	r3, [r2, #24]
 8007592:	4b0c      	ldr	r3, [pc, #48]	; (80075c4 <HAL_MspInit+0x44>)
 8007594:	699b      	ldr	r3, [r3, #24]
 8007596:	f003 0301 	and.w	r3, r3, #1
 800759a:	607b      	str	r3, [r7, #4]
 800759c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800759e:	4b09      	ldr	r3, [pc, #36]	; (80075c4 <HAL_MspInit+0x44>)
 80075a0:	69db      	ldr	r3, [r3, #28]
 80075a2:	4a08      	ldr	r2, [pc, #32]	; (80075c4 <HAL_MspInit+0x44>)
 80075a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075a8:	61d3      	str	r3, [r2, #28]
 80075aa:	4b06      	ldr	r3, [pc, #24]	; (80075c4 <HAL_MspInit+0x44>)
 80075ac:	69db      	ldr	r3, [r3, #28]
 80075ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075b2:	603b      	str	r3, [r7, #0]
 80075b4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80075b6:	2007      	movs	r0, #7
 80075b8:	f002 fb7e 	bl	8009cb8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80075bc:	bf00      	nop
 80075be:	3708      	adds	r7, #8
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}
 80075c4:	40021000 	.word	0x40021000

080075c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80075c8:	b480      	push	{r7}
 80075ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80075cc:	e7fe      	b.n	80075cc <NMI_Handler+0x4>

080075ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80075ce:	b480      	push	{r7}
 80075d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80075d2:	e7fe      	b.n	80075d2 <HardFault_Handler+0x4>

080075d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80075d4:	b480      	push	{r7}
 80075d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80075d8:	e7fe      	b.n	80075d8 <MemManage_Handler+0x4>

080075da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80075da:	b480      	push	{r7}
 80075dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80075de:	e7fe      	b.n	80075de <BusFault_Handler+0x4>

080075e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80075e0:	b480      	push	{r7}
 80075e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80075e4:	e7fe      	b.n	80075e4 <UsageFault_Handler+0x4>

080075e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80075e6:	b480      	push	{r7}
 80075e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80075ea:	bf00      	nop
 80075ec:	46bd      	mov	sp, r7
 80075ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f2:	4770      	bx	lr

080075f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80075f4:	b480      	push	{r7}
 80075f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80075f8:	bf00      	nop
 80075fa:	46bd      	mov	sp, r7
 80075fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007600:	4770      	bx	lr

08007602 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007602:	b480      	push	{r7}
 8007604:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007606:	bf00      	nop
 8007608:	46bd      	mov	sp, r7
 800760a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760e:	4770      	bx	lr

08007610 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007614:	f000 fa90 	bl	8007b38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007618:	bf00      	nop
 800761a:	bd80      	pop	{r7, pc}

0800761c <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8007620:	4802      	ldr	r0, [pc, #8]	; (800762c <USB_LP_CAN_RX0_IRQHandler+0x10>)
 8007622:	f003 fa75 	bl	800ab10 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 8007626:	bf00      	nop
 8007628:	bd80      	pop	{r7, pc}
 800762a:	bf00      	nop
 800762c:	20001fb4 	.word	0x20001fb4

08007630 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8007630:	b480      	push	{r7}
 8007632:	af00      	add	r7, sp, #0
	return 1;
 8007634:	2301      	movs	r3, #1
}
 8007636:	4618      	mov	r0, r3
 8007638:	46bd      	mov	sp, r7
 800763a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763e:	4770      	bx	lr

08007640 <_kill>:

int _kill(int pid, int sig)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b082      	sub	sp, #8
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
 8007648:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800764a:	f02a fd35 	bl	80320b8 <__errno>
 800764e:	4603      	mov	r3, r0
 8007650:	2216      	movs	r2, #22
 8007652:	601a      	str	r2, [r3, #0]
	return -1;
 8007654:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007658:	4618      	mov	r0, r3
 800765a:	3708      	adds	r7, #8
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}

08007660 <_exit>:

void _exit (int status)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b082      	sub	sp, #8
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8007668:	f04f 31ff 	mov.w	r1, #4294967295
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f7ff ffe7 	bl	8007640 <_kill>
	while (1) {}		/* Make sure we hang here */
 8007672:	e7fe      	b.n	8007672 <_exit+0x12>

08007674 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b086      	sub	sp, #24
 8007678:	af00      	add	r7, sp, #0
 800767a:	60f8      	str	r0, [r7, #12]
 800767c:	60b9      	str	r1, [r7, #8]
 800767e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007680:	2300      	movs	r3, #0
 8007682:	617b      	str	r3, [r7, #20]
 8007684:	e00a      	b.n	800769c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8007686:	f3af 8000 	nop.w
 800768a:	4601      	mov	r1, r0
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	1c5a      	adds	r2, r3, #1
 8007690:	60ba      	str	r2, [r7, #8]
 8007692:	b2ca      	uxtb	r2, r1
 8007694:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007696:	697b      	ldr	r3, [r7, #20]
 8007698:	3301      	adds	r3, #1
 800769a:	617b      	str	r3, [r7, #20]
 800769c:	697a      	ldr	r2, [r7, #20]
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	429a      	cmp	r2, r3
 80076a2:	dbf0      	blt.n	8007686 <_read+0x12>
	}

return len;
 80076a4:	687b      	ldr	r3, [r7, #4]
}
 80076a6:	4618      	mov	r0, r3
 80076a8:	3718      	adds	r7, #24
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}

080076ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80076ae:	b580      	push	{r7, lr}
 80076b0:	b086      	sub	sp, #24
 80076b2:	af00      	add	r7, sp, #0
 80076b4:	60f8      	str	r0, [r7, #12]
 80076b6:	60b9      	str	r1, [r7, #8]
 80076b8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80076ba:	2300      	movs	r3, #0
 80076bc:	617b      	str	r3, [r7, #20]
 80076be:	e009      	b.n	80076d4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	1c5a      	adds	r2, r3, #1
 80076c4:	60ba      	str	r2, [r7, #8]
 80076c6:	781b      	ldrb	r3, [r3, #0]
 80076c8:	4618      	mov	r0, r3
 80076ca:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	3301      	adds	r3, #1
 80076d2:	617b      	str	r3, [r7, #20]
 80076d4:	697a      	ldr	r2, [r7, #20]
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	429a      	cmp	r2, r3
 80076da:	dbf1      	blt.n	80076c0 <_write+0x12>
	}
	return len;
 80076dc:	687b      	ldr	r3, [r7, #4]
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3718      	adds	r7, #24
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}

080076e6 <_close>:

int _close(int file)
{
 80076e6:	b480      	push	{r7}
 80076e8:	b083      	sub	sp, #12
 80076ea:	af00      	add	r7, sp, #0
 80076ec:	6078      	str	r0, [r7, #4]
	return -1;
 80076ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80076f2:	4618      	mov	r0, r3
 80076f4:	370c      	adds	r7, #12
 80076f6:	46bd      	mov	sp, r7
 80076f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fc:	4770      	bx	lr

080076fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80076fe:	b480      	push	{r7}
 8007700:	b083      	sub	sp, #12
 8007702:	af00      	add	r7, sp, #0
 8007704:	6078      	str	r0, [r7, #4]
 8007706:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800770e:	605a      	str	r2, [r3, #4]
	return 0;
 8007710:	2300      	movs	r3, #0
}
 8007712:	4618      	mov	r0, r3
 8007714:	370c      	adds	r7, #12
 8007716:	46bd      	mov	sp, r7
 8007718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771c:	4770      	bx	lr

0800771e <_isatty>:

int _isatty(int file)
{
 800771e:	b480      	push	{r7}
 8007720:	b083      	sub	sp, #12
 8007722:	af00      	add	r7, sp, #0
 8007724:	6078      	str	r0, [r7, #4]
	return 1;
 8007726:	2301      	movs	r3, #1
}
 8007728:	4618      	mov	r0, r3
 800772a:	370c      	adds	r7, #12
 800772c:	46bd      	mov	sp, r7
 800772e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007732:	4770      	bx	lr

08007734 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007734:	b480      	push	{r7}
 8007736:	b085      	sub	sp, #20
 8007738:	af00      	add	r7, sp, #0
 800773a:	60f8      	str	r0, [r7, #12]
 800773c:	60b9      	str	r1, [r7, #8]
 800773e:	607a      	str	r2, [r7, #4]
	return 0;
 8007740:	2300      	movs	r3, #0
}
 8007742:	4618      	mov	r0, r3
 8007744:	3714      	adds	r7, #20
 8007746:	46bd      	mov	sp, r7
 8007748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774c:	4770      	bx	lr
	...

08007750 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b086      	sub	sp, #24
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007758:	4a14      	ldr	r2, [pc, #80]	; (80077ac <_sbrk+0x5c>)
 800775a:	4b15      	ldr	r3, [pc, #84]	; (80077b0 <_sbrk+0x60>)
 800775c:	1ad3      	subs	r3, r2, r3
 800775e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007760:	697b      	ldr	r3, [r7, #20]
 8007762:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007764:	4b13      	ldr	r3, [pc, #76]	; (80077b4 <_sbrk+0x64>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d102      	bne.n	8007772 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800776c:	4b11      	ldr	r3, [pc, #68]	; (80077b4 <_sbrk+0x64>)
 800776e:	4a12      	ldr	r2, [pc, #72]	; (80077b8 <_sbrk+0x68>)
 8007770:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007772:	4b10      	ldr	r3, [pc, #64]	; (80077b4 <_sbrk+0x64>)
 8007774:	681a      	ldr	r2, [r3, #0]
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	4413      	add	r3, r2
 800777a:	693a      	ldr	r2, [r7, #16]
 800777c:	429a      	cmp	r2, r3
 800777e:	d207      	bcs.n	8007790 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007780:	f02a fc9a 	bl	80320b8 <__errno>
 8007784:	4603      	mov	r3, r0
 8007786:	220c      	movs	r2, #12
 8007788:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800778a:	f04f 33ff 	mov.w	r3, #4294967295
 800778e:	e009      	b.n	80077a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007790:	4b08      	ldr	r3, [pc, #32]	; (80077b4 <_sbrk+0x64>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007796:	4b07      	ldr	r3, [pc, #28]	; (80077b4 <_sbrk+0x64>)
 8007798:	681a      	ldr	r2, [r3, #0]
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	4413      	add	r3, r2
 800779e:	4a05      	ldr	r2, [pc, #20]	; (80077b4 <_sbrk+0x64>)
 80077a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80077a2:	68fb      	ldr	r3, [r7, #12]
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	3718      	adds	r7, #24
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}
 80077ac:	2000a000 	.word	0x2000a000
 80077b0:	00000400 	.word	0x00000400
 80077b4:	20000870 	.word	0x20000870
 80077b8:	200024d8 	.word	0x200024d8

080077bc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80077bc:	b480      	push	{r7}
 80077be:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80077c0:	4b06      	ldr	r3, [pc, #24]	; (80077dc <SystemInit+0x20>)
 80077c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077c6:	4a05      	ldr	r2, [pc, #20]	; (80077dc <SystemInit+0x20>)
 80077c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80077cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80077d0:	bf00      	nop
 80077d2:	46bd      	mov	sp, r7
 80077d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d8:	4770      	bx	lr
 80077da:	bf00      	nop
 80077dc:	e000ed00 	.word	0xe000ed00

080077e0 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b08e      	sub	sp, #56	; 0x38
 80077e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80077e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80077ea:	2200      	movs	r2, #0
 80077ec:	601a      	str	r2, [r3, #0]
 80077ee:	605a      	str	r2, [r3, #4]
 80077f0:	609a      	str	r2, [r3, #8]
 80077f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80077f4:	f107 031c 	add.w	r3, r7, #28
 80077f8:	2200      	movs	r2, #0
 80077fa:	601a      	str	r2, [r3, #0]
 80077fc:	605a      	str	r2, [r3, #4]
 80077fe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007800:	463b      	mov	r3, r7
 8007802:	2200      	movs	r2, #0
 8007804:	601a      	str	r2, [r3, #0]
 8007806:	605a      	str	r2, [r3, #4]
 8007808:	609a      	str	r2, [r3, #8]
 800780a:	60da      	str	r2, [r3, #12]
 800780c:	611a      	str	r2, [r3, #16]
 800780e:	615a      	str	r2, [r3, #20]
 8007810:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8007812:	4b2d      	ldr	r3, [pc, #180]	; (80078c8 <MX_TIM2_Init+0xe8>)
 8007814:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007818:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800781a:	4b2b      	ldr	r3, [pc, #172]	; (80078c8 <MX_TIM2_Init+0xe8>)
 800781c:	2200      	movs	r2, #0
 800781e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007820:	4b29      	ldr	r3, [pc, #164]	; (80078c8 <MX_TIM2_Init+0xe8>)
 8007822:	2200      	movs	r2, #0
 8007824:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8007826:	4b28      	ldr	r3, [pc, #160]	; (80078c8 <MX_TIM2_Init+0xe8>)
 8007828:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800782c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800782e:	4b26      	ldr	r3, [pc, #152]	; (80078c8 <MX_TIM2_Init+0xe8>)
 8007830:	2200      	movs	r2, #0
 8007832:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8007834:	4b24      	ldr	r3, [pc, #144]	; (80078c8 <MX_TIM2_Init+0xe8>)
 8007836:	2280      	movs	r2, #128	; 0x80
 8007838:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800783a:	4823      	ldr	r0, [pc, #140]	; (80078c8 <MX_TIM2_Init+0xe8>)
 800783c:	f006 fefc 	bl	800e638 <HAL_TIM_Base_Init>
 8007840:	4603      	mov	r3, r0
 8007842:	2b00      	cmp	r3, #0
 8007844:	d001      	beq.n	800784a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8007846:	f7fe f99f 	bl	8005b88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800784a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800784e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8007850:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007854:	4619      	mov	r1, r3
 8007856:	481c      	ldr	r0, [pc, #112]	; (80078c8 <MX_TIM2_Init+0xe8>)
 8007858:	f007 fc76 	bl	800f148 <HAL_TIM_ConfigClockSource>
 800785c:	4603      	mov	r3, r0
 800785e:	2b00      	cmp	r3, #0
 8007860:	d001      	beq.n	8007866 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8007862:	f7fe f991 	bl	8005b88 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8007866:	4818      	ldr	r0, [pc, #96]	; (80078c8 <MX_TIM2_Init+0xe8>)
 8007868:	f006 ffc2 	bl	800e7f0 <HAL_TIM_PWM_Init>
 800786c:	4603      	mov	r3, r0
 800786e:	2b00      	cmp	r3, #0
 8007870:	d001      	beq.n	8007876 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8007872:	f7fe f989 	bl	8005b88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007876:	2300      	movs	r3, #0
 8007878:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800787a:	2300      	movs	r3, #0
 800787c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800787e:	f107 031c 	add.w	r3, r7, #28
 8007882:	4619      	mov	r1, r3
 8007884:	4810      	ldr	r0, [pc, #64]	; (80078c8 <MX_TIM2_Init+0xe8>)
 8007886:	f008 fc77 	bl	8010178 <HAL_TIMEx_MasterConfigSynchronization>
 800788a:	4603      	mov	r3, r0
 800788c:	2b00      	cmp	r3, #0
 800788e:	d001      	beq.n	8007894 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8007890:	f7fe f97a 	bl	8005b88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007894:	2360      	movs	r3, #96	; 0x60
 8007896:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8007898:	2300      	movs	r3, #0
 800789a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800789c:	2300      	movs	r3, #0
 800789e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80078a0:	2300      	movs	r3, #0
 80078a2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80078a4:	463b      	mov	r3, r7
 80078a6:	2200      	movs	r2, #0
 80078a8:	4619      	mov	r1, r3
 80078aa:	4807      	ldr	r0, [pc, #28]	; (80078c8 <MX_TIM2_Init+0xe8>)
 80078ac:	f007 fa16 	bl	800ecdc <HAL_TIM_PWM_ConfigChannel>
 80078b0:	4603      	mov	r3, r0
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d001      	beq.n	80078ba <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80078b6:	f7fe f967 	bl	8005b88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80078ba:	4803      	ldr	r0, [pc, #12]	; (80078c8 <MX_TIM2_Init+0xe8>)
 80078bc:	f000 f824 	bl	8007908 <HAL_TIM_MspPostInit>

}
 80078c0:	bf00      	nop
 80078c2:	3738      	adds	r7, #56	; 0x38
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bd80      	pop	{r7, pc}
 80078c8:	20000874 	.word	0x20000874

080078cc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b085      	sub	sp, #20
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078dc:	d10b      	bne.n	80078f6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80078de:	4b09      	ldr	r3, [pc, #36]	; (8007904 <HAL_TIM_Base_MspInit+0x38>)
 80078e0:	69db      	ldr	r3, [r3, #28]
 80078e2:	4a08      	ldr	r2, [pc, #32]	; (8007904 <HAL_TIM_Base_MspInit+0x38>)
 80078e4:	f043 0301 	orr.w	r3, r3, #1
 80078e8:	61d3      	str	r3, [r2, #28]
 80078ea:	4b06      	ldr	r3, [pc, #24]	; (8007904 <HAL_TIM_Base_MspInit+0x38>)
 80078ec:	69db      	ldr	r3, [r3, #28]
 80078ee:	f003 0301 	and.w	r3, r3, #1
 80078f2:	60fb      	str	r3, [r7, #12]
 80078f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80078f6:	bf00      	nop
 80078f8:	3714      	adds	r7, #20
 80078fa:	46bd      	mov	sp, r7
 80078fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007900:	4770      	bx	lr
 8007902:	bf00      	nop
 8007904:	40021000 	.word	0x40021000

08007908 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b088      	sub	sp, #32
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007910:	f107 030c 	add.w	r3, r7, #12
 8007914:	2200      	movs	r2, #0
 8007916:	601a      	str	r2, [r3, #0]
 8007918:	605a      	str	r2, [r3, #4]
 800791a:	609a      	str	r2, [r3, #8]
 800791c:	60da      	str	r2, [r3, #12]
 800791e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007928:	d11d      	bne.n	8007966 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800792a:	4b11      	ldr	r3, [pc, #68]	; (8007970 <HAL_TIM_MspPostInit+0x68>)
 800792c:	695b      	ldr	r3, [r3, #20]
 800792e:	4a10      	ldr	r2, [pc, #64]	; (8007970 <HAL_TIM_MspPostInit+0x68>)
 8007930:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007934:	6153      	str	r3, [r2, #20]
 8007936:	4b0e      	ldr	r3, [pc, #56]	; (8007970 <HAL_TIM_MspPostInit+0x68>)
 8007938:	695b      	ldr	r3, [r3, #20]
 800793a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800793e:	60bb      	str	r3, [r7, #8]
 8007940:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8007942:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007946:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007948:	2302      	movs	r3, #2
 800794a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800794c:	2300      	movs	r3, #0
 800794e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007950:	2300      	movs	r3, #0
 8007952:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8007954:	2301      	movs	r3, #1
 8007956:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007958:	f107 030c 	add.w	r3, r7, #12
 800795c:	4619      	mov	r1, r3
 800795e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007962:	f002 fb69 	bl	800a038 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8007966:	bf00      	nop
 8007968:	3720      	adds	r7, #32
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}
 800796e:	bf00      	nop
 8007970:	40021000 	.word	0x40021000

08007974 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8007978:	4b14      	ldr	r3, [pc, #80]	; (80079cc <MX_USART2_UART_Init+0x58>)
 800797a:	4a15      	ldr	r2, [pc, #84]	; (80079d0 <MX_USART2_UART_Init+0x5c>)
 800797c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800797e:	4b13      	ldr	r3, [pc, #76]	; (80079cc <MX_USART2_UART_Init+0x58>)
 8007980:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007984:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8007986:	4b11      	ldr	r3, [pc, #68]	; (80079cc <MX_USART2_UART_Init+0x58>)
 8007988:	2200      	movs	r2, #0
 800798a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800798c:	4b0f      	ldr	r3, [pc, #60]	; (80079cc <MX_USART2_UART_Init+0x58>)
 800798e:	2200      	movs	r2, #0
 8007990:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8007992:	4b0e      	ldr	r3, [pc, #56]	; (80079cc <MX_USART2_UART_Init+0x58>)
 8007994:	2200      	movs	r2, #0
 8007996:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8007998:	4b0c      	ldr	r3, [pc, #48]	; (80079cc <MX_USART2_UART_Init+0x58>)
 800799a:	220c      	movs	r2, #12
 800799c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800799e:	4b0b      	ldr	r3, [pc, #44]	; (80079cc <MX_USART2_UART_Init+0x58>)
 80079a0:	2200      	movs	r2, #0
 80079a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80079a4:	4b09      	ldr	r3, [pc, #36]	; (80079cc <MX_USART2_UART_Init+0x58>)
 80079a6:	2200      	movs	r2, #0
 80079a8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80079aa:	4b08      	ldr	r3, [pc, #32]	; (80079cc <MX_USART2_UART_Init+0x58>)
 80079ac:	2200      	movs	r2, #0
 80079ae:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80079b0:	4b06      	ldr	r3, [pc, #24]	; (80079cc <MX_USART2_UART_Init+0x58>)
 80079b2:	2200      	movs	r2, #0
 80079b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80079b6:	4805      	ldr	r0, [pc, #20]	; (80079cc <MX_USART2_UART_Init+0x58>)
 80079b8:	f008 fd28 	bl	801040c <HAL_UART_Init>
 80079bc:	4603      	mov	r3, r0
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d001      	beq.n	80079c6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80079c2:	f7fe f8e1 	bl	8005b88 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80079c6:	bf00      	nop
 80079c8:	bd80      	pop	{r7, pc}
 80079ca:	bf00      	nop
 80079cc:	200008c0 	.word	0x200008c0
 80079d0:	40004400 	.word	0x40004400

080079d4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b08a      	sub	sp, #40	; 0x28
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80079dc:	f107 0314 	add.w	r3, r7, #20
 80079e0:	2200      	movs	r2, #0
 80079e2:	601a      	str	r2, [r3, #0]
 80079e4:	605a      	str	r2, [r3, #4]
 80079e6:	609a      	str	r2, [r3, #8]
 80079e8:	60da      	str	r2, [r3, #12]
 80079ea:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4a17      	ldr	r2, [pc, #92]	; (8007a50 <HAL_UART_MspInit+0x7c>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d128      	bne.n	8007a48 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80079f6:	4b17      	ldr	r3, [pc, #92]	; (8007a54 <HAL_UART_MspInit+0x80>)
 80079f8:	69db      	ldr	r3, [r3, #28]
 80079fa:	4a16      	ldr	r2, [pc, #88]	; (8007a54 <HAL_UART_MspInit+0x80>)
 80079fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a00:	61d3      	str	r3, [r2, #28]
 8007a02:	4b14      	ldr	r3, [pc, #80]	; (8007a54 <HAL_UART_MspInit+0x80>)
 8007a04:	69db      	ldr	r3, [r3, #28]
 8007a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a0a:	613b      	str	r3, [r7, #16]
 8007a0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007a0e:	4b11      	ldr	r3, [pc, #68]	; (8007a54 <HAL_UART_MspInit+0x80>)
 8007a10:	695b      	ldr	r3, [r3, #20]
 8007a12:	4a10      	ldr	r2, [pc, #64]	; (8007a54 <HAL_UART_MspInit+0x80>)
 8007a14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a18:	6153      	str	r3, [r2, #20]
 8007a1a:	4b0e      	ldr	r3, [pc, #56]	; (8007a54 <HAL_UART_MspInit+0x80>)
 8007a1c:	695b      	ldr	r3, [r3, #20]
 8007a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a22:	60fb      	str	r3, [r7, #12]
 8007a24:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8007a26:	230c      	movs	r3, #12
 8007a28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a2a:	2302      	movs	r3, #2
 8007a2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007a32:	2303      	movs	r3, #3
 8007a34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8007a36:	2307      	movs	r3, #7
 8007a38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007a3a:	f107 0314 	add.w	r3, r7, #20
 8007a3e:	4619      	mov	r1, r3
 8007a40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007a44:	f002 faf8 	bl	800a038 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8007a48:	bf00      	nop
 8007a4a:	3728      	adds	r7, #40	; 0x28
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}
 8007a50:	40004400 	.word	0x40004400
 8007a54:	40021000 	.word	0x40021000

08007a58 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8007a58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007a90 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007a5c:	480d      	ldr	r0, [pc, #52]	; (8007a94 <LoopForever+0x6>)
  ldr r1, =_edata
 8007a5e:	490e      	ldr	r1, [pc, #56]	; (8007a98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8007a60:	4a0e      	ldr	r2, [pc, #56]	; (8007a9c <LoopForever+0xe>)
  movs r3, #0
 8007a62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007a64:	e002      	b.n	8007a6c <LoopCopyDataInit>

08007a66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007a66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007a68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007a6a:	3304      	adds	r3, #4

08007a6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007a6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007a6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007a70:	d3f9      	bcc.n	8007a66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007a72:	4a0b      	ldr	r2, [pc, #44]	; (8007aa0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8007a74:	4c0b      	ldr	r4, [pc, #44]	; (8007aa4 <LoopForever+0x16>)
  movs r3, #0
 8007a76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007a78:	e001      	b.n	8007a7e <LoopFillZerobss>

08007a7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007a7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007a7c:	3204      	adds	r2, #4

08007a7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007a7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007a80:	d3fb      	bcc.n	8007a7a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8007a82:	f7ff fe9b 	bl	80077bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007a86:	f02a fb2f 	bl	80320e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8007a8a:	f7fd ff45 	bl	8005918 <main>

08007a8e <LoopForever>:

LoopForever:
    b LoopForever
 8007a8e:	e7fe      	b.n	8007a8e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8007a90:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8007a94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007a98:	20000728 	.word	0x20000728
  ldr r2, =_sidata
 8007a9c:	08038268 	.word	0x08038268
  ldr r2, =_sbss
 8007aa0:	20000728 	.word	0x20000728
  ldr r4, =_ebss
 8007aa4:	200024d4 	.word	0x200024d4

08007aa8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8007aa8:	e7fe      	b.n	8007aa8 <ADC1_2_IRQHandler>
	...

08007aac <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007ab0:	4b08      	ldr	r3, [pc, #32]	; (8007ad4 <HAL_Init+0x28>)
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	4a07      	ldr	r2, [pc, #28]	; (8007ad4 <HAL_Init+0x28>)
 8007ab6:	f043 0310 	orr.w	r3, r3, #16
 8007aba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007abc:	2003      	movs	r0, #3
 8007abe:	f002 f8fb 	bl	8009cb8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007ac2:	2000      	movs	r0, #0
 8007ac4:	f000 f808 	bl	8007ad8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007ac8:	f7ff fd5a 	bl	8007580 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007acc:	2300      	movs	r3, #0
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	bd80      	pop	{r7, pc}
 8007ad2:	bf00      	nop
 8007ad4:	40022000 	.word	0x40022000

08007ad8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b082      	sub	sp, #8
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007ae0:	4b12      	ldr	r3, [pc, #72]	; (8007b2c <HAL_InitTick+0x54>)
 8007ae2:	681a      	ldr	r2, [r3, #0]
 8007ae4:	4b12      	ldr	r3, [pc, #72]	; (8007b30 <HAL_InitTick+0x58>)
 8007ae6:	781b      	ldrb	r3, [r3, #0]
 8007ae8:	4619      	mov	r1, r3
 8007aea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007aee:	fbb3 f3f1 	udiv	r3, r3, r1
 8007af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007af6:	4618      	mov	r0, r3
 8007af8:	f002 f942 	bl	8009d80 <HAL_SYSTICK_Config>
 8007afc:	4603      	mov	r3, r0
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d001      	beq.n	8007b06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007b02:	2301      	movs	r3, #1
 8007b04:	e00e      	b.n	8007b24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2b0f      	cmp	r3, #15
 8007b0a:	d80a      	bhi.n	8007b22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	6879      	ldr	r1, [r7, #4]
 8007b10:	f04f 30ff 	mov.w	r0, #4294967295
 8007b14:	f002 f8f0 	bl	8009cf8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007b18:	4a06      	ldr	r2, [pc, #24]	; (8007b34 <HAL_InitTick+0x5c>)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8007b1e:	2300      	movs	r3, #0
 8007b20:	e000      	b.n	8007b24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007b22:	2301      	movs	r3, #1
}
 8007b24:	4618      	mov	r0, r3
 8007b26:	3708      	adds	r7, #8
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bd80      	pop	{r7, pc}
 8007b2c:	20000314 	.word	0x20000314
 8007b30:	2000031c 	.word	0x2000031c
 8007b34:	20000318 	.word	0x20000318

08007b38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007b38:	b480      	push	{r7}
 8007b3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007b3c:	4b06      	ldr	r3, [pc, #24]	; (8007b58 <HAL_IncTick+0x20>)
 8007b3e:	781b      	ldrb	r3, [r3, #0]
 8007b40:	461a      	mov	r2, r3
 8007b42:	4b06      	ldr	r3, [pc, #24]	; (8007b5c <HAL_IncTick+0x24>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	4413      	add	r3, r2
 8007b48:	4a04      	ldr	r2, [pc, #16]	; (8007b5c <HAL_IncTick+0x24>)
 8007b4a:	6013      	str	r3, [r2, #0]
}
 8007b4c:	bf00      	nop
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b54:	4770      	bx	lr
 8007b56:	bf00      	nop
 8007b58:	2000031c 	.word	0x2000031c
 8007b5c:	20000944 	.word	0x20000944

08007b60 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007b60:	b480      	push	{r7}
 8007b62:	af00      	add	r7, sp, #0
  return uwTick;  
 8007b64:	4b03      	ldr	r3, [pc, #12]	; (8007b74 <HAL_GetTick+0x14>)
 8007b66:	681b      	ldr	r3, [r3, #0]
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b70:	4770      	bx	lr
 8007b72:	bf00      	nop
 8007b74:	20000944 	.word	0x20000944

08007b78 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b09a      	sub	sp, #104	; 0x68
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007b80:	2300      	movs	r3, #0
 8007b82:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8007b86:	2300      	movs	r3, #0
 8007b88:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d101      	bne.n	8007b98 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8007b94:	2301      	movs	r3, #1
 8007b96:	e32e      	b.n	80081f6 <HAL_ADC_Init+0x67e>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007ba0:	d012      	beq.n	8007bc8 <HAL_ADC_Init+0x50>
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	4a8b      	ldr	r2, [pc, #556]	; (8007dd4 <HAL_ADC_Init+0x25c>)
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d00d      	beq.n	8007bc8 <HAL_ADC_Init+0x50>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	4a89      	ldr	r2, [pc, #548]	; (8007dd8 <HAL_ADC_Init+0x260>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d008      	beq.n	8007bc8 <HAL_ADC_Init+0x50>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4a88      	ldr	r2, [pc, #544]	; (8007ddc <HAL_ADC_Init+0x264>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d003      	beq.n	8007bc8 <HAL_ADC_Init+0x50>
 8007bc0:	21f9      	movs	r1, #249	; 0xf9
 8007bc2:	4887      	ldr	r0, [pc, #540]	; (8007de0 <HAL_ADC_Init+0x268>)
 8007bc4:	f7fd ffe5 	bl	8005b92 <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	685b      	ldr	r3, [r3, #4]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d012      	beq.n	8007bf6 <HAL_ADC_Init+0x7e>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	685b      	ldr	r3, [r3, #4]
 8007bd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bd8:	d00d      	beq.n	8007bf6 <HAL_ADC_Init+0x7e>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007be2:	d008      	beq.n	8007bf6 <HAL_ADC_Init+0x7e>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	685b      	ldr	r3, [r3, #4]
 8007be8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007bec:	d003      	beq.n	8007bf6 <HAL_ADC_Init+0x7e>
 8007bee:	21fa      	movs	r1, #250	; 0xfa
 8007bf0:	487b      	ldr	r0, [pc, #492]	; (8007de0 <HAL_ADC_Init+0x268>)
 8007bf2:	f7fd ffce 	bl	8005b92 <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	689b      	ldr	r3, [r3, #8]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d00f      	beq.n	8007c1e <HAL_ADC_Init+0xa6>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	689b      	ldr	r3, [r3, #8]
 8007c02:	2b08      	cmp	r3, #8
 8007c04:	d00b      	beq.n	8007c1e <HAL_ADC_Init+0xa6>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	689b      	ldr	r3, [r3, #8]
 8007c0a:	2b10      	cmp	r3, #16
 8007c0c:	d007      	beq.n	8007c1e <HAL_ADC_Init+0xa6>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	689b      	ldr	r3, [r3, #8]
 8007c12:	2b18      	cmp	r3, #24
 8007c14:	d003      	beq.n	8007c1e <HAL_ADC_Init+0xa6>
 8007c16:	21fb      	movs	r1, #251	; 0xfb
 8007c18:	4871      	ldr	r0, [pc, #452]	; (8007de0 <HAL_ADC_Init+0x268>)
 8007c1a:	f7fd ffba 	bl	8005b92 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign)); 
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	68db      	ldr	r3, [r3, #12]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d007      	beq.n	8007c36 <HAL_ADC_Init+0xbe>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	68db      	ldr	r3, [r3, #12]
 8007c2a:	2b20      	cmp	r3, #32
 8007c2c:	d003      	beq.n	8007c36 <HAL_ADC_Init+0xbe>
 8007c2e:	21fc      	movs	r1, #252	; 0xfc
 8007c30:	486b      	ldr	r0, [pc, #428]	; (8007de0 <HAL_ADC_Init+0x268>)
 8007c32:	f7fd ffae 	bl	8005b92 <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	691b      	ldr	r3, [r3, #16]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d007      	beq.n	8007c4e <HAL_ADC_Init+0xd6>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	691b      	ldr	r3, [r3, #16]
 8007c42:	2b01      	cmp	r3, #1
 8007c44:	d003      	beq.n	8007c4e <HAL_ADC_Init+0xd6>
 8007c46:	21fd      	movs	r1, #253	; 0xfd
 8007c48:	4865      	ldr	r0, [pc, #404]	; (8007de0 <HAL_ADC_Init+0x268>)
 8007c4a:	f7fd ffa2 	bl	8005b92 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	7e5b      	ldrb	r3, [r3, #25]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d007      	beq.n	8007c66 <HAL_ADC_Init+0xee>
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	7e5b      	ldrb	r3, [r3, #25]
 8007c5a:	2b01      	cmp	r3, #1
 8007c5c:	d003      	beq.n	8007c66 <HAL_ADC_Init+0xee>
 8007c5e:	21fe      	movs	r1, #254	; 0xfe
 8007c60:	485f      	ldr	r0, [pc, #380]	; (8007de0 <HAL_ADC_Init+0x268>)
 8007c62:	f7fd ff96 	bl	8005b92 <assert_failed>
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d012      	beq.n	8007c94 <HAL_ADC_Init+0x11c>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c76:	d00d      	beq.n	8007c94 <HAL_ADC_Init+0x11c>
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c80:	d008      	beq.n	8007c94 <HAL_ADC_Init+0x11c>
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c86:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007c8a:	d003      	beq.n	8007c94 <HAL_ADC_Init+0x11c>
 8007c8c:	21ff      	movs	r1, #255	; 0xff
 8007c8e:	4854      	ldr	r0, [pc, #336]	; (8007de0 <HAL_ADC_Init+0x268>)
 8007c90:	f7fd ff7f 	bl	8005b92 <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d070      	beq.n	8007d7e <HAL_ADC_Init+0x206>
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ca0:	2b40      	cmp	r3, #64	; 0x40
 8007ca2:	d06c      	beq.n	8007d7e <HAL_ADC_Init+0x206>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ca8:	2bc0      	cmp	r3, #192	; 0xc0
 8007caa:	d068      	beq.n	8007d7e <HAL_ADC_Init+0x206>
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cb0:	f5b3 7f70 	cmp.w	r3, #960	; 0x3c0
 8007cb4:	d063      	beq.n	8007d7e <HAL_ADC_Init+0x206>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cba:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8007cbe:	d05e      	beq.n	8007d7e <HAL_ADC_Init+0x206>
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cc4:	f5b3 7f50 	cmp.w	r3, #832	; 0x340
 8007cc8:	d059      	beq.n	8007d7e <HAL_ADC_Init+0x206>
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cce:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8007cd2:	d054      	beq.n	8007d7e <HAL_ADC_Init+0x206>
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cd8:	f5b3 7f70 	cmp.w	r3, #960	; 0x3c0
 8007cdc:	d04f      	beq.n	8007d7e <HAL_ADC_Init+0x206>
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ce2:	2b40      	cmp	r3, #64	; 0x40
 8007ce4:	d04b      	beq.n	8007d7e <HAL_ADC_Init+0x206>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d047      	beq.n	8007d7e <HAL_ADC_Init+0x206>
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cf2:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8007cf6:	d042      	beq.n	8007d7e <HAL_ADC_Init+0x206>
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cfc:	f5b3 7f50 	cmp.w	r3, #832	; 0x340
 8007d00:	d03d      	beq.n	8007d7e <HAL_ADC_Init+0x206>
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d06:	2bc0      	cmp	r3, #192	; 0xc0
 8007d08:	d039      	beq.n	8007d7e <HAL_ADC_Init+0x206>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d0e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8007d12:	d034      	beq.n	8007d7e <HAL_ADC_Init+0x206>
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d18:	2b80      	cmp	r3, #128	; 0x80
 8007d1a:	d030      	beq.n	8007d7e <HAL_ADC_Init+0x206>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d20:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8007d24:	d02b      	beq.n	8007d7e <HAL_ADC_Init+0x206>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d2a:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8007d2e:	d026      	beq.n	8007d7e <HAL_ADC_Init+0x206>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d34:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8007d38:	d021      	beq.n	8007d7e <HAL_ADC_Init+0x206>
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d42:	d01c      	beq.n	8007d7e <HAL_ADC_Init+0x206>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d48:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d4c:	d017      	beq.n	8007d7e <HAL_ADC_Init+0x206>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d52:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8007d56:	d012      	beq.n	8007d7e <HAL_ADC_Init+0x206>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d60:	d00d      	beq.n	8007d7e <HAL_ADC_Init+0x206>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d66:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8007d6a:	d008      	beq.n	8007d7e <HAL_ADC_Init+0x206>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d70:	2b01      	cmp	r3, #1
 8007d72:	d004      	beq.n	8007d7e <HAL_ADC_Init+0x206>
 8007d74:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007d78:	4819      	ldr	r0, [pc, #100]	; (8007de0 <HAL_ADC_Init+0x268>)
 8007d7a:	f7fd ff0a 	bl	8005b92 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d009      	beq.n	8007d9c <HAL_ADC_Init+0x224>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007d8e:	2b01      	cmp	r3, #1
 8007d90:	d004      	beq.n	8007d9c <HAL_ADC_Init+0x224>
 8007d92:	f240 1101 	movw	r1, #257	; 0x101
 8007d96:	4812      	ldr	r0, [pc, #72]	; (8007de0 <HAL_ADC_Init+0x268>)
 8007d98:	f7fd fefb 	bl	8005b92 <assert_failed>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	695b      	ldr	r3, [r3, #20]
 8007da0:	2b04      	cmp	r3, #4
 8007da2:	d008      	beq.n	8007db6 <HAL_ADC_Init+0x23e>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	695b      	ldr	r3, [r3, #20]
 8007da8:	2b08      	cmp	r3, #8
 8007daa:	d004      	beq.n	8007db6 <HAL_ADC_Init+0x23e>
 8007dac:	f44f 7181 	mov.w	r1, #258	; 0x102
 8007db0:	480b      	ldr	r0, [pc, #44]	; (8007de0 <HAL_ADC_Init+0x268>)
 8007db2:	f7fd feee 	bl	8005b92 <assert_failed>
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dba:	2b01      	cmp	r3, #1
 8007dbc:	d012      	beq.n	8007de4 <HAL_ADC_Init+0x26c>
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d00e      	beq.n	8007de4 <HAL_ADC_Init+0x26c>
 8007dc6:	f240 1103 	movw	r1, #259	; 0x103
 8007dca:	4805      	ldr	r0, [pc, #20]	; (8007de0 <HAL_ADC_Init+0x268>)
 8007dcc:	f7fd fee1 	bl	8005b92 <assert_failed>
 8007dd0:	e008      	b.n	8007de4 <HAL_ADC_Init+0x26c>
 8007dd2:	bf00      	nop
 8007dd4:	50000100 	.word	0x50000100
 8007dd8:	50000400 	.word	0x50000400
 8007ddc:	50000500 	.word	0x50000500
 8007de0:	08034210 	.word	0x08034210
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	7e1b      	ldrb	r3, [r3, #24]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d008      	beq.n	8007dfe <HAL_ADC_Init+0x286>
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	7e1b      	ldrb	r3, [r3, #24]
 8007df0:	2b01      	cmp	r3, #1
 8007df2:	d004      	beq.n	8007dfe <HAL_ADC_Init+0x286>
 8007df4:	f44f 7182 	mov.w	r1, #260	; 0x104
 8007df8:	4891      	ldr	r0, [pc, #580]	; (8008040 <HAL_ADC_Init+0x4c8>)
 8007dfa:	f7fd feca 	bl	8005b92 <assert_failed>
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	691b      	ldr	r3, [r3, #16]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d02d      	beq.n	8007e62 <HAL_ADC_Init+0x2ea>
  {
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	69db      	ldr	r3, [r3, #28]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d003      	beq.n	8007e16 <HAL_ADC_Init+0x29e>
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	69db      	ldr	r3, [r3, #28]
 8007e12:	2b10      	cmp	r3, #16
 8007e14:	d904      	bls.n	8007e20 <HAL_ADC_Init+0x2a8>
 8007e16:	f44f 7184 	mov.w	r1, #264	; 0x108
 8007e1a:	4889      	ldr	r0, [pc, #548]	; (8008040 <HAL_ADC_Init+0x4c8>)
 8007e1c:	f7fd feb9 	bl	8005b92 <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d009      	beq.n	8007e3e <HAL_ADC_Init+0x2c6>
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007e30:	2b01      	cmp	r3, #1
 8007e32:	d004      	beq.n	8007e3e <HAL_ADC_Init+0x2c6>
 8007e34:	f240 1109 	movw	r1, #265	; 0x109
 8007e38:	4881      	ldr	r0, [pc, #516]	; (8008040 <HAL_ADC_Init+0x4c8>)
 8007e3a:	f7fd feaa 	bl	8005b92 <assert_failed>
    if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d00c      	beq.n	8007e62 <HAL_ADC_Init+0x2ea>
    {
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d003      	beq.n	8007e58 <HAL_ADC_Init+0x2e0>
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e54:	2b08      	cmp	r3, #8
 8007e56:	d904      	bls.n	8007e62 <HAL_ADC_Init+0x2ea>
 8007e58:	f44f 7186 	mov.w	r1, #268	; 0x10c
 8007e5c:	4878      	ldr	r0, [pc, #480]	; (8008040 <HAL_ADC_Init+0x4c8>)
 8007e5e:	f7fd fe98 	bl	8005b92 <assert_failed>
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e66:	f003 0310 	and.w	r3, r3, #16
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d176      	bne.n	8007f5c <HAL_ADC_Init+0x3e4>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d152      	bne.n	8007f1c <HAL_ADC_Init+0x3a4>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2200      	movs	r2, #0
 8007e80:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2200      	movs	r2, #0
 8007e86:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f7f9 f98f 	bl	80011b4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	689b      	ldr	r3, [r3, #8]
 8007e9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d13b      	bne.n	8007f1c <HAL_ADC_Init+0x3a4>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f001 fdd1 	bl	8009a4c <ADC_Disable>
 8007eaa:	4603      	mov	r3, r0
 8007eac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eb4:	f003 0310 	and.w	r3, r3, #16
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d12f      	bne.n	8007f1c <HAL_ADC_Init+0x3a4>
 8007ebc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d12b      	bne.n	8007f1c <HAL_ADC_Init+0x3a4>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ec8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007ecc:	f023 0302 	bic.w	r3, r3, #2
 8007ed0:	f043 0202 	orr.w	r2, r3, #2
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	689a      	ldr	r2, [r3, #8]
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007ee6:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	689a      	ldr	r2, [r3, #8]
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007ef6:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8007ef8:	4b52      	ldr	r3, [pc, #328]	; (8008044 <HAL_ADC_Init+0x4cc>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4a52      	ldr	r2, [pc, #328]	; (8008048 <HAL_ADC_Init+0x4d0>)
 8007efe:	fba2 2303 	umull	r2, r3, r2, r3
 8007f02:	0c9a      	lsrs	r2, r3, #18
 8007f04:	4613      	mov	r3, r2
 8007f06:	009b      	lsls	r3, r3, #2
 8007f08:	4413      	add	r3, r2
 8007f0a:	005b      	lsls	r3, r3, #1
 8007f0c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8007f0e:	e002      	b.n	8007f16 <HAL_ADC_Init+0x39e>
          {
            wait_loop_index--;
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	3b01      	subs	r3, #1
 8007f14:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d1f9      	bne.n	8007f10 <HAL_ADC_Init+0x398>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	689b      	ldr	r3, [r3, #8]
 8007f22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d007      	beq.n	8007f3a <HAL_ADC_Init+0x3c2>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	689b      	ldr	r3, [r3, #8]
 8007f30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8007f34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f38:	d110      	bne.n	8007f5c <HAL_ADC_Init+0x3e4>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f3e:	f023 0312 	bic.w	r3, r3, #18
 8007f42:	f043 0210 	orr.w	r2, r3, #16
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f4e:	f043 0201 	orr.w	r2, r3, #1
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8007f56:	2301      	movs	r3, #1
 8007f58:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f60:	f003 0310 	and.w	r3, r3, #16
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	f040 8139 	bne.w	80081dc <HAL_ADC_Init+0x664>
 8007f6a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	f040 8134 	bne.w	80081dc <HAL_ADC_Init+0x664>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	689b      	ldr	r3, [r3, #8]
 8007f7a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	f040 812c 	bne.w	80081dc <HAL_ADC_Init+0x664>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f88:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8007f8c:	f043 0202 	orr.w	r2, r3, #2
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007f9c:	d004      	beq.n	8007fa8 <HAL_ADC_Init+0x430>
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	4a2a      	ldr	r2, [pc, #168]	; (800804c <HAL_ADC_Init+0x4d4>)
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d101      	bne.n	8007fac <HAL_ADC_Init+0x434>
 8007fa8:	4b29      	ldr	r3, [pc, #164]	; (8008050 <HAL_ADC_Init+0x4d8>)
 8007faa:	e000      	b.n	8007fae <HAL_ADC_Init+0x436>
 8007fac:	4b29      	ldr	r3, [pc, #164]	; (8008054 <HAL_ADC_Init+0x4dc>)
 8007fae:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007fb8:	d102      	bne.n	8007fc0 <HAL_ADC_Init+0x448>
 8007fba:	4b24      	ldr	r3, [pc, #144]	; (800804c <HAL_ADC_Init+0x4d4>)
 8007fbc:	60fb      	str	r3, [r7, #12]
 8007fbe:	e01a      	b.n	8007ff6 <HAL_ADC_Init+0x47e>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	4a21      	ldr	r2, [pc, #132]	; (800804c <HAL_ADC_Init+0x4d4>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d103      	bne.n	8007fd2 <HAL_ADC_Init+0x45a>
 8007fca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8007fce:	60fb      	str	r3, [r7, #12]
 8007fd0:	e011      	b.n	8007ff6 <HAL_ADC_Init+0x47e>
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	4a20      	ldr	r2, [pc, #128]	; (8008058 <HAL_ADC_Init+0x4e0>)
 8007fd8:	4293      	cmp	r3, r2
 8007fda:	d102      	bne.n	8007fe2 <HAL_ADC_Init+0x46a>
 8007fdc:	4b1f      	ldr	r3, [pc, #124]	; (800805c <HAL_ADC_Init+0x4e4>)
 8007fde:	60fb      	str	r3, [r7, #12]
 8007fe0:	e009      	b.n	8007ff6 <HAL_ADC_Init+0x47e>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	4a1d      	ldr	r2, [pc, #116]	; (800805c <HAL_ADC_Init+0x4e4>)
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d102      	bne.n	8007ff2 <HAL_ADC_Init+0x47a>
 8007fec:	4b1a      	ldr	r3, [pc, #104]	; (8008058 <HAL_ADC_Init+0x4e0>)
 8007fee:	60fb      	str	r3, [r7, #12]
 8007ff0:	e001      	b.n	8007ff6 <HAL_ADC_Init+0x47e>
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	689b      	ldr	r3, [r3, #8]
 8007ffc:	f003 0303 	and.w	r3, r3, #3
 8008000:	2b01      	cmp	r3, #1
 8008002:	d108      	bne.n	8008016 <HAL_ADC_Init+0x49e>
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f003 0301 	and.w	r3, r3, #1
 800800e:	2b01      	cmp	r3, #1
 8008010:	d101      	bne.n	8008016 <HAL_ADC_Init+0x49e>
 8008012:	2301      	movs	r3, #1
 8008014:	e000      	b.n	8008018 <HAL_ADC_Init+0x4a0>
 8008016:	2300      	movs	r3, #0
 8008018:	2b00      	cmp	r3, #0
 800801a:	d12d      	bne.n	8008078 <HAL_ADC_Init+0x500>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800801c:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800801e:	2b00      	cmp	r3, #0
 8008020:	d021      	beq.n	8008066 <HAL_ADC_Init+0x4ee>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	689b      	ldr	r3, [r3, #8]
 8008026:	f003 0303 	and.w	r3, r3, #3
 800802a:	2b01      	cmp	r3, #1
 800802c:	d118      	bne.n	8008060 <HAL_ADC_Init+0x4e8>
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f003 0301 	and.w	r3, r3, #1
 8008036:	2b01      	cmp	r3, #1
 8008038:	d112      	bne.n	8008060 <HAL_ADC_Init+0x4e8>
 800803a:	2301      	movs	r3, #1
 800803c:	e011      	b.n	8008062 <HAL_ADC_Init+0x4ea>
 800803e:	bf00      	nop
 8008040:	08034210 	.word	0x08034210
 8008044:	20000314 	.word	0x20000314
 8008048:	431bde83 	.word	0x431bde83
 800804c:	50000100 	.word	0x50000100
 8008050:	50000300 	.word	0x50000300
 8008054:	50000700 	.word	0x50000700
 8008058:	50000400 	.word	0x50000400
 800805c:	50000500 	.word	0x50000500
 8008060:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8008062:	2b00      	cmp	r3, #0
 8008064:	d108      	bne.n	8008078 <HAL_ADC_Init+0x500>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8008066:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008068:	689b      	ldr	r3, [r3, #8]
 800806a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	685b      	ldr	r3, [r3, #4]
 8008072:	431a      	orrs	r2, r3
 8008074:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008076:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	7e5b      	ldrb	r3, [r3, #25]
 800807c:	035b      	lsls	r3, r3, #13
 800807e:	687a      	ldr	r2, [r7, #4]
 8008080:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008082:	2a01      	cmp	r2, #1
 8008084:	d002      	beq.n	800808c <HAL_ADC_Init+0x514>
 8008086:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800808a:	e000      	b.n	800808e <HAL_ADC_Init+0x516>
 800808c:	2200      	movs	r2, #0
 800808e:	431a      	orrs	r2, r3
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	68db      	ldr	r3, [r3, #12]
 8008094:	431a      	orrs	r2, r3
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	689b      	ldr	r3, [r3, #8]
 800809a:	4313      	orrs	r3, r2
 800809c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800809e:	4313      	orrs	r3, r2
 80080a0:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80080a8:	2b01      	cmp	r3, #1
 80080aa:	d11b      	bne.n	80080e4 <HAL_ADC_Init+0x56c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	7e5b      	ldrb	r3, [r3, #25]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d109      	bne.n	80080c8 <HAL_ADC_Init+0x550>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080b8:	3b01      	subs	r3, #1
 80080ba:	045a      	lsls	r2, r3, #17
 80080bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80080be:	4313      	orrs	r3, r2
 80080c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80080c4:	663b      	str	r3, [r7, #96]	; 0x60
 80080c6:	e00d      	b.n	80080e4 <HAL_ADC_Init+0x56c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080cc:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80080d0:	f043 0220 	orr.w	r2, r3, #32
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080dc:	f043 0201 	orr.w	r2, r3, #1
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080e8:	2b01      	cmp	r3, #1
 80080ea:	d02c      	beq.n	8008146 <HAL_ADC_Init+0x5ce>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	4a43      	ldr	r2, [pc, #268]	; (8008200 <HAL_ADC_Init+0x688>)
 80080f2:	4293      	cmp	r3, r2
 80080f4:	d004      	beq.n	8008100 <HAL_ADC_Init+0x588>
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	4a42      	ldr	r2, [pc, #264]	; (8008204 <HAL_ADC_Init+0x68c>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d11a      	bne.n	8008136 <HAL_ADC_Init+0x5be>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008104:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8008108:	d012      	beq.n	8008130 <HAL_ADC_Init+0x5b8>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800810e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008112:	d00a      	beq.n	800812a <HAL_ADC_Init+0x5b2>
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008118:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 800811c:	d002      	beq.n	8008124 <HAL_ADC_Init+0x5ac>
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008122:	e00a      	b.n	800813a <HAL_ADC_Init+0x5c2>
 8008124:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008128:	e007      	b.n	800813a <HAL_ADC_Init+0x5c2>
 800812a:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 800812e:	e004      	b.n	800813a <HAL_ADC_Init+0x5c2>
 8008130:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8008134:	e001      	b.n	800813a <HAL_ADC_Init+0x5c2>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800813a:	687a      	ldr	r2, [r7, #4]
 800813c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800813e:	4313      	orrs	r3, r2
 8008140:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008142:	4313      	orrs	r3, r2
 8008144:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	689b      	ldr	r3, [r3, #8]
 800814c:	f003 030c 	and.w	r3, r3, #12
 8008150:	2b00      	cmp	r3, #0
 8008152:	d114      	bne.n	800817e <HAL_ADC_Init+0x606>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	68db      	ldr	r3, [r3, #12]
 800815a:	687a      	ldr	r2, [r7, #4]
 800815c:	6812      	ldr	r2, [r2, #0]
 800815e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008162:	f023 0302 	bic.w	r3, r3, #2
 8008166:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	7e1b      	ldrb	r3, [r3, #24]
 800816c:	039a      	lsls	r2, r3, #14
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008174:	005b      	lsls	r3, r3, #1
 8008176:	4313      	orrs	r3, r2
 8008178:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800817a:	4313      	orrs	r3, r2
 800817c:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	68da      	ldr	r2, [r3, #12]
 8008184:	4b20      	ldr	r3, [pc, #128]	; (8008208 <HAL_ADC_Init+0x690>)
 8008186:	4013      	ands	r3, r2
 8008188:	687a      	ldr	r2, [r7, #4]
 800818a:	6812      	ldr	r2, [r2, #0]
 800818c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800818e:	430b      	orrs	r3, r1
 8008190:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	691b      	ldr	r3, [r3, #16]
 8008196:	2b01      	cmp	r3, #1
 8008198:	d10c      	bne.n	80081b4 <HAL_ADC_Init+0x63c>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081a0:	f023 010f 	bic.w	r1, r3, #15
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	69db      	ldr	r3, [r3, #28]
 80081a8:	1e5a      	subs	r2, r3, #1
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	430a      	orrs	r2, r1
 80081b0:	631a      	str	r2, [r3, #48]	; 0x30
 80081b2:	e007      	b.n	80081c4 <HAL_ADC_Init+0x64c>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f022 020f 	bic.w	r2, r2, #15
 80081c2:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2200      	movs	r2, #0
 80081c8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ce:	f023 0303 	bic.w	r3, r3, #3
 80081d2:	f043 0201 	orr.w	r2, r3, #1
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	641a      	str	r2, [r3, #64]	; 0x40
 80081da:	e00a      	b.n	80081f2 <HAL_ADC_Init+0x67a>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081e0:	f023 0312 	bic.w	r3, r3, #18
 80081e4:	f043 0210 	orr.w	r2, r3, #16
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80081ec:	2301      	movs	r3, #1
 80081ee:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80081f2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3768      	adds	r7, #104	; 0x68
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}
 80081fe:	bf00      	nop
 8008200:	50000400 	.word	0x50000400
 8008204:	50000500 	.word	0x50000500
 8008208:	fff0c007 	.word	0xfff0c007

0800820c <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b084      	sub	sp, #16
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
 8008214:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008216:	2300      	movs	r3, #0
 8008218:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart;
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008222:	d013      	beq.n	800824c <HAL_ADCEx_Calibration_Start+0x40>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4a43      	ldr	r2, [pc, #268]	; (8008338 <HAL_ADCEx_Calibration_Start+0x12c>)
 800822a:	4293      	cmp	r3, r2
 800822c:	d00e      	beq.n	800824c <HAL_ADCEx_Calibration_Start+0x40>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	4a42      	ldr	r2, [pc, #264]	; (800833c <HAL_ADCEx_Calibration_Start+0x130>)
 8008234:	4293      	cmp	r3, r2
 8008236:	d009      	beq.n	800824c <HAL_ADCEx_Calibration_Start+0x40>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	4a40      	ldr	r2, [pc, #256]	; (8008340 <HAL_ADCEx_Calibration_Start+0x134>)
 800823e:	4293      	cmp	r3, r2
 8008240:	d004      	beq.n	800824c <HAL_ADCEx_Calibration_Start+0x40>
 8008242:	f640 510e 	movw	r1, #3342	; 0xd0e
 8008246:	483f      	ldr	r0, [pc, #252]	; (8008344 <HAL_ADCEx_Calibration_Start+0x138>)
 8008248:	f7fd fca3 	bl	8005b92 <assert_failed>
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d007      	beq.n	8008262 <HAL_ADCEx_Calibration_Start+0x56>
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	2b01      	cmp	r3, #1
 8008256:	d004      	beq.n	8008262 <HAL_ADCEx_Calibration_Start+0x56>
 8008258:	f640 510f 	movw	r1, #3343	; 0xd0f
 800825c:	4839      	ldr	r0, [pc, #228]	; (8008344 <HAL_ADCEx_Calibration_Start+0x138>)
 800825e:	f7fd fc98 	bl	8005b92 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hadc);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008268:	2b01      	cmp	r3, #1
 800826a:	d101      	bne.n	8008270 <HAL_ADCEx_Calibration_Start+0x64>
 800826c:	2302      	movs	r3, #2
 800826e:	e05f      	b.n	8008330 <HAL_ADCEx_Calibration_Start+0x124>
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2201      	movs	r2, #1
 8008274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f001 fbe7 	bl	8009a4c <ADC_Disable>
 800827e:	4603      	mov	r3, r0
 8008280:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8008282:	7bfb      	ldrb	r3, [r7, #15]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d14e      	bne.n	8008326 <HAL_ADCEx_Calibration_Start+0x11a>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2201      	movs	r2, #1
 800828c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	689a      	ldr	r2, [r3, #8]
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 800829c:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	2b01      	cmp	r3, #1
 80082a2:	d107      	bne.n	80082b4 <HAL_ADCEx_Calibration_Start+0xa8>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	689a      	ldr	r2, [r3, #8]
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80082b2:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	689a      	ldr	r2, [r3, #8]
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80082c2:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 80082c4:	f7ff fc4c 	bl	8007b60 <HAL_GetTick>
 80082c8:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80082ca:	e01c      	b.n	8008306 <HAL_ADCEx_Calibration_Start+0xfa>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80082cc:	f7ff fc48 	bl	8007b60 <HAL_GetTick>
 80082d0:	4602      	mov	r2, r0
 80082d2:	68bb      	ldr	r3, [r7, #8]
 80082d4:	1ad3      	subs	r3, r2, r3
 80082d6:	2b0a      	cmp	r3, #10
 80082d8:	d915      	bls.n	8008306 <HAL_ADCEx_Calibration_Start+0xfa>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	689b      	ldr	r3, [r3, #8]
 80082e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80082e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80082e8:	d10d      	bne.n	8008306 <HAL_ADCEx_Calibration_Start+0xfa>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ee:	f023 0312 	bic.w	r3, r3, #18
 80082f2:	f043 0210 	orr.w	r2, r3, #16
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2200      	movs	r2, #0
 80082fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8008302:	2301      	movs	r3, #1
 8008304:	e014      	b.n	8008330 <HAL_ADCEx_Calibration_Start+0x124>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	689b      	ldr	r3, [r3, #8]
 800830c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008310:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008314:	d0da      	beq.n	80082cc <HAL_ADCEx_Calibration_Start+0xc0>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800831a:	f023 0303 	bic.w	r3, r3, #3
 800831e:	f043 0201 	orr.w	r2, r3, #1
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2200      	movs	r2, #0
 800832a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800832e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008330:	4618      	mov	r0, r3
 8008332:	3710      	adds	r7, #16
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}
 8008338:	50000100 	.word	0x50000100
 800833c:	50000400 	.word	0x50000400
 8008340:	50000500 	.word	0x50000500
 8008344:	08034210 	.word	0x08034210

08008348 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b09a      	sub	sp, #104	; 0x68
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
 8008350:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008352:	2300      	movs	r3, #0
 8008354:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8008358:	2300      	movs	r3, #0
 800835a:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008364:	d013      	beq.n	800838e <HAL_ADC_ConfigChannel+0x46>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	4a6b      	ldr	r2, [pc, #428]	; (8008518 <HAL_ADC_ConfigChannel+0x1d0>)
 800836c:	4293      	cmp	r3, r2
 800836e:	d00e      	beq.n	800838e <HAL_ADC_ConfigChannel+0x46>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	4a69      	ldr	r2, [pc, #420]	; (800851c <HAL_ADC_ConfigChannel+0x1d4>)
 8008376:	4293      	cmp	r3, r2
 8008378:	d009      	beq.n	800838e <HAL_ADC_ConfigChannel+0x46>
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	4a68      	ldr	r2, [pc, #416]	; (8008520 <HAL_ADC_ConfigChannel+0x1d8>)
 8008380:	4293      	cmp	r3, r2
 8008382:	d004      	beq.n	800838e <HAL_ADC_ConfigChannel+0x46>
 8008384:	f241 51b7 	movw	r1, #5559	; 0x15b7
 8008388:	4866      	ldr	r0, [pc, #408]	; (8008524 <HAL_ADC_ConfigChannel+0x1dc>)
 800838a:	f7fd fc02 	bl	8005b92 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	685b      	ldr	r3, [r3, #4]
 8008392:	2b01      	cmp	r3, #1
 8008394:	d040      	beq.n	8008418 <HAL_ADC_ConfigChannel+0xd0>
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	685b      	ldr	r3, [r3, #4]
 800839a:	2b02      	cmp	r3, #2
 800839c:	d03c      	beq.n	8008418 <HAL_ADC_ConfigChannel+0xd0>
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	685b      	ldr	r3, [r3, #4]
 80083a2:	2b03      	cmp	r3, #3
 80083a4:	d038      	beq.n	8008418 <HAL_ADC_ConfigChannel+0xd0>
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	685b      	ldr	r3, [r3, #4]
 80083aa:	2b04      	cmp	r3, #4
 80083ac:	d034      	beq.n	8008418 <HAL_ADC_ConfigChannel+0xd0>
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	685b      	ldr	r3, [r3, #4]
 80083b2:	2b05      	cmp	r3, #5
 80083b4:	d030      	beq.n	8008418 <HAL_ADC_ConfigChannel+0xd0>
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	685b      	ldr	r3, [r3, #4]
 80083ba:	2b06      	cmp	r3, #6
 80083bc:	d02c      	beq.n	8008418 <HAL_ADC_ConfigChannel+0xd0>
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	685b      	ldr	r3, [r3, #4]
 80083c2:	2b07      	cmp	r3, #7
 80083c4:	d028      	beq.n	8008418 <HAL_ADC_ConfigChannel+0xd0>
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	685b      	ldr	r3, [r3, #4]
 80083ca:	2b08      	cmp	r3, #8
 80083cc:	d024      	beq.n	8008418 <HAL_ADC_ConfigChannel+0xd0>
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	685b      	ldr	r3, [r3, #4]
 80083d2:	2b09      	cmp	r3, #9
 80083d4:	d020      	beq.n	8008418 <HAL_ADC_ConfigChannel+0xd0>
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	685b      	ldr	r3, [r3, #4]
 80083da:	2b0a      	cmp	r3, #10
 80083dc:	d01c      	beq.n	8008418 <HAL_ADC_ConfigChannel+0xd0>
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	685b      	ldr	r3, [r3, #4]
 80083e2:	2b0b      	cmp	r3, #11
 80083e4:	d018      	beq.n	8008418 <HAL_ADC_ConfigChannel+0xd0>
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	685b      	ldr	r3, [r3, #4]
 80083ea:	2b0c      	cmp	r3, #12
 80083ec:	d014      	beq.n	8008418 <HAL_ADC_ConfigChannel+0xd0>
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	685b      	ldr	r3, [r3, #4]
 80083f2:	2b0d      	cmp	r3, #13
 80083f4:	d010      	beq.n	8008418 <HAL_ADC_ConfigChannel+0xd0>
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	685b      	ldr	r3, [r3, #4]
 80083fa:	2b0e      	cmp	r3, #14
 80083fc:	d00c      	beq.n	8008418 <HAL_ADC_ConfigChannel+0xd0>
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	685b      	ldr	r3, [r3, #4]
 8008402:	2b0f      	cmp	r3, #15
 8008404:	d008      	beq.n	8008418 <HAL_ADC_ConfigChannel+0xd0>
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	685b      	ldr	r3, [r3, #4]
 800840a:	2b10      	cmp	r3, #16
 800840c:	d004      	beq.n	8008418 <HAL_ADC_ConfigChannel+0xd0>
 800840e:	f241 51b8 	movw	r1, #5560	; 0x15b8
 8008412:	4844      	ldr	r0, [pc, #272]	; (8008524 <HAL_ADC_ConfigChannel+0x1dc>)
 8008414:	f7fd fbbd 	bl	8005b92 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	689b      	ldr	r3, [r3, #8]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d020      	beq.n	8008462 <HAL_ADC_ConfigChannel+0x11a>
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	689b      	ldr	r3, [r3, #8]
 8008424:	2b01      	cmp	r3, #1
 8008426:	d01c      	beq.n	8008462 <HAL_ADC_ConfigChannel+0x11a>
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	689b      	ldr	r3, [r3, #8]
 800842c:	2b02      	cmp	r3, #2
 800842e:	d018      	beq.n	8008462 <HAL_ADC_ConfigChannel+0x11a>
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	689b      	ldr	r3, [r3, #8]
 8008434:	2b03      	cmp	r3, #3
 8008436:	d014      	beq.n	8008462 <HAL_ADC_ConfigChannel+0x11a>
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	689b      	ldr	r3, [r3, #8]
 800843c:	2b04      	cmp	r3, #4
 800843e:	d010      	beq.n	8008462 <HAL_ADC_ConfigChannel+0x11a>
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	689b      	ldr	r3, [r3, #8]
 8008444:	2b05      	cmp	r3, #5
 8008446:	d00c      	beq.n	8008462 <HAL_ADC_ConfigChannel+0x11a>
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	689b      	ldr	r3, [r3, #8]
 800844c:	2b06      	cmp	r3, #6
 800844e:	d008      	beq.n	8008462 <HAL_ADC_ConfigChannel+0x11a>
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	689b      	ldr	r3, [r3, #8]
 8008454:	2b07      	cmp	r3, #7
 8008456:	d004      	beq.n	8008462 <HAL_ADC_ConfigChannel+0x11a>
 8008458:	f241 51b9 	movw	r1, #5561	; 0x15b9
 800845c:	4831      	ldr	r0, [pc, #196]	; (8008524 <HAL_ADC_ConfigChannel+0x1dc>)
 800845e:	f7fd fb98 	bl	8005b92 <assert_failed>
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	68db      	ldr	r3, [r3, #12]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d008      	beq.n	800847c <HAL_ADC_ConfigChannel+0x134>
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	68db      	ldr	r3, [r3, #12]
 800846e:	2b01      	cmp	r3, #1
 8008470:	d004      	beq.n	800847c <HAL_ADC_ConfigChannel+0x134>
 8008472:	f241 51ba 	movw	r1, #5562	; 0x15ba
 8008476:	482b      	ldr	r0, [pc, #172]	; (8008524 <HAL_ADC_ConfigChannel+0x1dc>)
 8008478:	f7fd fb8b 	bl	8005b92 <assert_failed>
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	691b      	ldr	r3, [r3, #16]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d014      	beq.n	80084ae <HAL_ADC_ConfigChannel+0x166>
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	691b      	ldr	r3, [r3, #16]
 8008488:	2b01      	cmp	r3, #1
 800848a:	d010      	beq.n	80084ae <HAL_ADC_ConfigChannel+0x166>
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	691b      	ldr	r3, [r3, #16]
 8008490:	2b02      	cmp	r3, #2
 8008492:	d00c      	beq.n	80084ae <HAL_ADC_ConfigChannel+0x166>
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	691b      	ldr	r3, [r3, #16]
 8008498:	2b03      	cmp	r3, #3
 800849a:	d008      	beq.n	80084ae <HAL_ADC_ConfigChannel+0x166>
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	691b      	ldr	r3, [r3, #16]
 80084a0:	2b04      	cmp	r3, #4
 80084a2:	d004      	beq.n	80084ae <HAL_ADC_ConfigChannel+0x166>
 80084a4:	f241 51bb 	movw	r1, #5563	; 0x15bb
 80084a8:	481e      	ldr	r0, [pc, #120]	; (8008524 <HAL_ADC_ConfigChannel+0x1dc>)
 80084aa:	f7fd fb72 	bl	8005b92 <assert_failed>
  assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), sConfig->Offset));
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	68db      	ldr	r3, [r3, #12]
 80084b4:	f003 0318 	and.w	r3, r3, #24
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d104      	bne.n	80084c6 <HAL_ADC_ConfigChannel+0x17e>
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	695b      	ldr	r3, [r3, #20]
 80084c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084c4:	d330      	bcc.n	8008528 <HAL_ADC_ConfigChannel+0x1e0>
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	68db      	ldr	r3, [r3, #12]
 80084cc:	f003 0318 	and.w	r3, r3, #24
 80084d0:	2b08      	cmp	r3, #8
 80084d2:	d104      	bne.n	80084de <HAL_ADC_ConfigChannel+0x196>
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	695b      	ldr	r3, [r3, #20]
 80084d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084dc:	d324      	bcc.n	8008528 <HAL_ADC_ConfigChannel+0x1e0>
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	68db      	ldr	r3, [r3, #12]
 80084e4:	f003 0318 	and.w	r3, r3, #24
 80084e8:	2b10      	cmp	r3, #16
 80084ea:	d103      	bne.n	80084f4 <HAL_ADC_ConfigChannel+0x1ac>
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	695b      	ldr	r3, [r3, #20]
 80084f0:	2bff      	cmp	r3, #255	; 0xff
 80084f2:	d919      	bls.n	8008528 <HAL_ADC_ConfigChannel+0x1e0>
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	68db      	ldr	r3, [r3, #12]
 80084fa:	f003 0318 	and.w	r3, r3, #24
 80084fe:	2b18      	cmp	r3, #24
 8008500:	d103      	bne.n	800850a <HAL_ADC_ConfigChannel+0x1c2>
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	695b      	ldr	r3, [r3, #20]
 8008506:	2b3f      	cmp	r3, #63	; 0x3f
 8008508:	d90e      	bls.n	8008528 <HAL_ADC_ConfigChannel+0x1e0>
 800850a:	f241 51bc 	movw	r1, #5564	; 0x15bc
 800850e:	4805      	ldr	r0, [pc, #20]	; (8008524 <HAL_ADC_ConfigChannel+0x1dc>)
 8008510:	f7fd fb3f 	bl	8005b92 <assert_failed>
 8008514:	e008      	b.n	8008528 <HAL_ADC_ConfigChannel+0x1e0>
 8008516:	bf00      	nop
 8008518:	50000100 	.word	0x50000100
 800851c:	50000400 	.word	0x50000400
 8008520:	50000500 	.word	0x50000500
 8008524:	08034210 	.word	0x08034210
  
  
  /* Verification of channel number: Channels 1 to 14 are available in        */  
  /* differential mode. Channels 15U, 16U, 17U, 18 can be used only in           */
  /* single-ended mode.                                                       */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	68db      	ldr	r3, [r3, #12]
 800852c:	2b01      	cmp	r3, #1
 800852e:	d063      	beq.n	80085f8 <HAL_ADC_ConfigChannel+0x2b0>
  {
    assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	2b01      	cmp	r3, #1
 8008536:	f000 809c 	beq.w	8008672 <HAL_ADC_ConfigChannel+0x32a>
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	2b02      	cmp	r3, #2
 8008540:	f000 8097 	beq.w	8008672 <HAL_ADC_ConfigChannel+0x32a>
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	2b03      	cmp	r3, #3
 800854a:	f000 8092 	beq.w	8008672 <HAL_ADC_ConfigChannel+0x32a>
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	2b04      	cmp	r3, #4
 8008554:	f000 808d 	beq.w	8008672 <HAL_ADC_ConfigChannel+0x32a>
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	2b05      	cmp	r3, #5
 800855e:	f000 8088 	beq.w	8008672 <HAL_ADC_ConfigChannel+0x32a>
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	2b06      	cmp	r3, #6
 8008568:	f000 8083 	beq.w	8008672 <HAL_ADC_ConfigChannel+0x32a>
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	2b07      	cmp	r3, #7
 8008572:	d07e      	beq.n	8008672 <HAL_ADC_ConfigChannel+0x32a>
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	2b08      	cmp	r3, #8
 800857a:	d07a      	beq.n	8008672 <HAL_ADC_ConfigChannel+0x32a>
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	2b09      	cmp	r3, #9
 8008582:	d076      	beq.n	8008672 <HAL_ADC_ConfigChannel+0x32a>
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	2b0a      	cmp	r3, #10
 800858a:	d072      	beq.n	8008672 <HAL_ADC_ConfigChannel+0x32a>
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	2b0b      	cmp	r3, #11
 8008592:	d06e      	beq.n	8008672 <HAL_ADC_ConfigChannel+0x32a>
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	2b0c      	cmp	r3, #12
 800859a:	d06a      	beq.n	8008672 <HAL_ADC_ConfigChannel+0x32a>
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	2b0d      	cmp	r3, #13
 80085a2:	d066      	beq.n	8008672 <HAL_ADC_ConfigChannel+0x32a>
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	2b0e      	cmp	r3, #14
 80085aa:	d062      	beq.n	8008672 <HAL_ADC_ConfigChannel+0x32a>
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	2b0f      	cmp	r3, #15
 80085b2:	d05e      	beq.n	8008672 <HAL_ADC_ConfigChannel+0x32a>
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	2b10      	cmp	r3, #16
 80085ba:	d05a      	beq.n	8008672 <HAL_ADC_ConfigChannel+0x32a>
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	2b11      	cmp	r3, #17
 80085c2:	d056      	beq.n	8008672 <HAL_ADC_ConfigChannel+0x32a>
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	2b12      	cmp	r3, #18
 80085ca:	d052      	beq.n	8008672 <HAL_ADC_ConfigChannel+0x32a>
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	2b0f      	cmp	r3, #15
 80085d2:	d04e      	beq.n	8008672 <HAL_ADC_ConfigChannel+0x32a>
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	2b11      	cmp	r3, #17
 80085da:	d04a      	beq.n	8008672 <HAL_ADC_ConfigChannel+0x32a>
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	2b11      	cmp	r3, #17
 80085e2:	d046      	beq.n	8008672 <HAL_ADC_ConfigChannel+0x32a>
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	2b11      	cmp	r3, #17
 80085ea:	d042      	beq.n	8008672 <HAL_ADC_ConfigChannel+0x32a>
 80085ec:	f241 51c4 	movw	r1, #5572	; 0x15c4
 80085f0:	489b      	ldr	r0, [pc, #620]	; (8008860 <HAL_ADC_ConfigChannel+0x518>)
 80085f2:	f7fd face 	bl	8005b92 <assert_failed>
 80085f6:	e03c      	b.n	8008672 <HAL_ADC_ConfigChannel+0x32a>
  }
  else
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	2b01      	cmp	r3, #1
 80085fe:	d038      	beq.n	8008672 <HAL_ADC_ConfigChannel+0x32a>
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	2b02      	cmp	r3, #2
 8008606:	d034      	beq.n	8008672 <HAL_ADC_ConfigChannel+0x32a>
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	2b03      	cmp	r3, #3
 800860e:	d030      	beq.n	8008672 <HAL_ADC_ConfigChannel+0x32a>
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	2b04      	cmp	r3, #4
 8008616:	d02c      	beq.n	8008672 <HAL_ADC_ConfigChannel+0x32a>
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	2b05      	cmp	r3, #5
 800861e:	d028      	beq.n	8008672 <HAL_ADC_ConfigChannel+0x32a>
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	2b06      	cmp	r3, #6
 8008626:	d024      	beq.n	8008672 <HAL_ADC_ConfigChannel+0x32a>
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	2b07      	cmp	r3, #7
 800862e:	d020      	beq.n	8008672 <HAL_ADC_ConfigChannel+0x32a>
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	2b08      	cmp	r3, #8
 8008636:	d01c      	beq.n	8008672 <HAL_ADC_ConfigChannel+0x32a>
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	2b09      	cmp	r3, #9
 800863e:	d018      	beq.n	8008672 <HAL_ADC_ConfigChannel+0x32a>
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	2b0a      	cmp	r3, #10
 8008646:	d014      	beq.n	8008672 <HAL_ADC_ConfigChannel+0x32a>
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	2b0b      	cmp	r3, #11
 800864e:	d010      	beq.n	8008672 <HAL_ADC_ConfigChannel+0x32a>
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	2b0c      	cmp	r3, #12
 8008656:	d00c      	beq.n	8008672 <HAL_ADC_ConfigChannel+0x32a>
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	2b0d      	cmp	r3, #13
 800865e:	d008      	beq.n	8008672 <HAL_ADC_ConfigChannel+0x32a>
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	2b0e      	cmp	r3, #14
 8008666:	d004      	beq.n	8008672 <HAL_ADC_ConfigChannel+0x32a>
 8008668:	f241 51c8 	movw	r1, #5576	; 0x15c8
 800866c:	487c      	ldr	r0, [pc, #496]	; (8008860 <HAL_ADC_ConfigChannel+0x518>)
 800866e:	f7fd fa90 	bl	8005b92 <assert_failed>
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008678:	2b01      	cmp	r3, #1
 800867a:	d101      	bne.n	8008680 <HAL_ADC_ConfigChannel+0x338>
 800867c:	2302      	movs	r3, #2
 800867e:	e2cb      	b.n	8008c18 <HAL_ADC_ConfigChannel+0x8d0>
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2201      	movs	r2, #1
 8008684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	689b      	ldr	r3, [r3, #8]
 800868e:	f003 0304 	and.w	r3, r3, #4
 8008692:	2b00      	cmp	r3, #0
 8008694:	f040 82af 	bne.w	8008bf6 <HAL_ADC_ConfigChannel+0x8ae>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	685b      	ldr	r3, [r3, #4]
 800869c:	2b04      	cmp	r3, #4
 800869e:	d81c      	bhi.n	80086da <HAL_ADC_ConfigChannel+0x392>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	685a      	ldr	r2, [r3, #4]
 80086aa:	4613      	mov	r3, r2
 80086ac:	005b      	lsls	r3, r3, #1
 80086ae:	4413      	add	r3, r2
 80086b0:	005b      	lsls	r3, r3, #1
 80086b2:	461a      	mov	r2, r3
 80086b4:	231f      	movs	r3, #31
 80086b6:	4093      	lsls	r3, r2
 80086b8:	43db      	mvns	r3, r3
 80086ba:	4019      	ands	r1, r3
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	6818      	ldr	r0, [r3, #0]
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	685a      	ldr	r2, [r3, #4]
 80086c4:	4613      	mov	r3, r2
 80086c6:	005b      	lsls	r3, r3, #1
 80086c8:	4413      	add	r3, r2
 80086ca:	005b      	lsls	r3, r3, #1
 80086cc:	fa00 f203 	lsl.w	r2, r0, r3
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	430a      	orrs	r2, r1
 80086d6:	631a      	str	r2, [r3, #48]	; 0x30
 80086d8:	e063      	b.n	80087a2 <HAL_ADC_ConfigChannel+0x45a>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	685b      	ldr	r3, [r3, #4]
 80086de:	2b09      	cmp	r3, #9
 80086e0:	d81e      	bhi.n	8008720 <HAL_ADC_ConfigChannel+0x3d8>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	685a      	ldr	r2, [r3, #4]
 80086ec:	4613      	mov	r3, r2
 80086ee:	005b      	lsls	r3, r3, #1
 80086f0:	4413      	add	r3, r2
 80086f2:	005b      	lsls	r3, r3, #1
 80086f4:	3b1e      	subs	r3, #30
 80086f6:	221f      	movs	r2, #31
 80086f8:	fa02 f303 	lsl.w	r3, r2, r3
 80086fc:	43db      	mvns	r3, r3
 80086fe:	4019      	ands	r1, r3
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	6818      	ldr	r0, [r3, #0]
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	685a      	ldr	r2, [r3, #4]
 8008708:	4613      	mov	r3, r2
 800870a:	005b      	lsls	r3, r3, #1
 800870c:	4413      	add	r3, r2
 800870e:	005b      	lsls	r3, r3, #1
 8008710:	3b1e      	subs	r3, #30
 8008712:	fa00 f203 	lsl.w	r2, r0, r3
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	430a      	orrs	r2, r1
 800871c:	635a      	str	r2, [r3, #52]	; 0x34
 800871e:	e040      	b.n	80087a2 <HAL_ADC_ConfigChannel+0x45a>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	685b      	ldr	r3, [r3, #4]
 8008724:	2b0e      	cmp	r3, #14
 8008726:	d81e      	bhi.n	8008766 <HAL_ADC_ConfigChannel+0x41e>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	685a      	ldr	r2, [r3, #4]
 8008732:	4613      	mov	r3, r2
 8008734:	005b      	lsls	r3, r3, #1
 8008736:	4413      	add	r3, r2
 8008738:	005b      	lsls	r3, r3, #1
 800873a:	3b3c      	subs	r3, #60	; 0x3c
 800873c:	221f      	movs	r2, #31
 800873e:	fa02 f303 	lsl.w	r3, r2, r3
 8008742:	43db      	mvns	r3, r3
 8008744:	4019      	ands	r1, r3
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	6818      	ldr	r0, [r3, #0]
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	685a      	ldr	r2, [r3, #4]
 800874e:	4613      	mov	r3, r2
 8008750:	005b      	lsls	r3, r3, #1
 8008752:	4413      	add	r3, r2
 8008754:	005b      	lsls	r3, r3, #1
 8008756:	3b3c      	subs	r3, #60	; 0x3c
 8008758:	fa00 f203 	lsl.w	r2, r0, r3
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	430a      	orrs	r2, r1
 8008762:	639a      	str	r2, [r3, #56]	; 0x38
 8008764:	e01d      	b.n	80087a2 <HAL_ADC_ConfigChannel+0x45a>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	685a      	ldr	r2, [r3, #4]
 8008770:	4613      	mov	r3, r2
 8008772:	005b      	lsls	r3, r3, #1
 8008774:	4413      	add	r3, r2
 8008776:	005b      	lsls	r3, r3, #1
 8008778:	3b5a      	subs	r3, #90	; 0x5a
 800877a:	221f      	movs	r2, #31
 800877c:	fa02 f303 	lsl.w	r3, r2, r3
 8008780:	43db      	mvns	r3, r3
 8008782:	4019      	ands	r1, r3
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	6818      	ldr	r0, [r3, #0]
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	685a      	ldr	r2, [r3, #4]
 800878c:	4613      	mov	r3, r2
 800878e:	005b      	lsls	r3, r3, #1
 8008790:	4413      	add	r3, r2
 8008792:	005b      	lsls	r3, r3, #1
 8008794:	3b5a      	subs	r3, #90	; 0x5a
 8008796:	fa00 f203 	lsl.w	r2, r0, r3
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	430a      	orrs	r2, r1
 80087a0:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	689b      	ldr	r3, [r3, #8]
 80087a8:	f003 030c 	and.w	r3, r3, #12
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	f040 80e6 	bne.w	800897e <HAL_ADC_ConfigChannel+0x636>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	2b09      	cmp	r3, #9
 80087b8:	d91c      	bls.n	80087f4 <HAL_ADC_ConfigChannel+0x4ac>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	6999      	ldr	r1, [r3, #24]
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	681a      	ldr	r2, [r3, #0]
 80087c4:	4613      	mov	r3, r2
 80087c6:	005b      	lsls	r3, r3, #1
 80087c8:	4413      	add	r3, r2
 80087ca:	3b1e      	subs	r3, #30
 80087cc:	2207      	movs	r2, #7
 80087ce:	fa02 f303 	lsl.w	r3, r2, r3
 80087d2:	43db      	mvns	r3, r3
 80087d4:	4019      	ands	r1, r3
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	6898      	ldr	r0, [r3, #8]
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	681a      	ldr	r2, [r3, #0]
 80087de:	4613      	mov	r3, r2
 80087e0:	005b      	lsls	r3, r3, #1
 80087e2:	4413      	add	r3, r2
 80087e4:	3b1e      	subs	r3, #30
 80087e6:	fa00 f203 	lsl.w	r2, r0, r3
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	430a      	orrs	r2, r1
 80087f0:	619a      	str	r2, [r3, #24]
 80087f2:	e019      	b.n	8008828 <HAL_ADC_ConfigChannel+0x4e0>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	6959      	ldr	r1, [r3, #20]
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	681a      	ldr	r2, [r3, #0]
 80087fe:	4613      	mov	r3, r2
 8008800:	005b      	lsls	r3, r3, #1
 8008802:	4413      	add	r3, r2
 8008804:	2207      	movs	r2, #7
 8008806:	fa02 f303 	lsl.w	r3, r2, r3
 800880a:	43db      	mvns	r3, r3
 800880c:	4019      	ands	r1, r3
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	6898      	ldr	r0, [r3, #8]
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	681a      	ldr	r2, [r3, #0]
 8008816:	4613      	mov	r3, r2
 8008818:	005b      	lsls	r3, r3, #1
 800881a:	4413      	add	r3, r2
 800881c:	fa00 f203 	lsl.w	r2, r0, r3
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	430a      	orrs	r2, r1
 8008826:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	695a      	ldr	r2, [r3, #20]
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	68db      	ldr	r3, [r3, #12]
 8008832:	08db      	lsrs	r3, r3, #3
 8008834:	f003 0303 	and.w	r3, r3, #3
 8008838:	005b      	lsls	r3, r3, #1
 800883a:	fa02 f303 	lsl.w	r3, r2, r3
 800883e:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	691b      	ldr	r3, [r3, #16]
 8008844:	3b01      	subs	r3, #1
 8008846:	2b03      	cmp	r3, #3
 8008848:	d850      	bhi.n	80088ec <HAL_ADC_ConfigChannel+0x5a4>
 800884a:	a201      	add	r2, pc, #4	; (adr r2, 8008850 <HAL_ADC_ConfigChannel+0x508>)
 800884c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008850:	08008865 	.word	0x08008865
 8008854:	08008887 	.word	0x08008887
 8008858:	080088a9 	.word	0x080088a9
 800885c:	080088cb 	.word	0x080088cb
 8008860:	08034210 	.word	0x08034210
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800886a:	4b9a      	ldr	r3, [pc, #616]	; (8008ad4 <HAL_ADC_ConfigChannel+0x78c>)
 800886c:	4013      	ands	r3, r2
 800886e:	683a      	ldr	r2, [r7, #0]
 8008870:	6812      	ldr	r2, [r2, #0]
 8008872:	0691      	lsls	r1, r2, #26
 8008874:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008876:	430a      	orrs	r2, r1
 8008878:	431a      	orrs	r2, r3
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8008882:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8008884:	e07e      	b.n	8008984 <HAL_ADC_ConfigChannel+0x63c>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800888c:	4b91      	ldr	r3, [pc, #580]	; (8008ad4 <HAL_ADC_ConfigChannel+0x78c>)
 800888e:	4013      	ands	r3, r2
 8008890:	683a      	ldr	r2, [r7, #0]
 8008892:	6812      	ldr	r2, [r2, #0]
 8008894:	0691      	lsls	r1, r2, #26
 8008896:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008898:	430a      	orrs	r2, r1
 800889a:	431a      	orrs	r2, r3
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80088a4:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80088a6:	e06d      	b.n	8008984 <HAL_ADC_ConfigChannel+0x63c>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80088ae:	4b89      	ldr	r3, [pc, #548]	; (8008ad4 <HAL_ADC_ConfigChannel+0x78c>)
 80088b0:	4013      	ands	r3, r2
 80088b2:	683a      	ldr	r2, [r7, #0]
 80088b4:	6812      	ldr	r2, [r2, #0]
 80088b6:	0691      	lsls	r1, r2, #26
 80088b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80088ba:	430a      	orrs	r2, r1
 80088bc:	431a      	orrs	r2, r3
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80088c6:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80088c8:	e05c      	b.n	8008984 <HAL_ADC_ConfigChannel+0x63c>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80088d0:	4b80      	ldr	r3, [pc, #512]	; (8008ad4 <HAL_ADC_ConfigChannel+0x78c>)
 80088d2:	4013      	ands	r3, r2
 80088d4:	683a      	ldr	r2, [r7, #0]
 80088d6:	6812      	ldr	r2, [r2, #0]
 80088d8:	0691      	lsls	r1, r2, #26
 80088da:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80088dc:	430a      	orrs	r2, r1
 80088de:	431a      	orrs	r2, r3
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80088e8:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80088ea:	e04b      	b.n	8008984 <HAL_ADC_ConfigChannel+0x63c>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088f2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	069b      	lsls	r3, r3, #26
 80088fc:	429a      	cmp	r2, r3
 80088fe:	d107      	bne.n	8008910 <HAL_ADC_ConfigChannel+0x5c8>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800890e:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008916:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	069b      	lsls	r3, r3, #26
 8008920:	429a      	cmp	r2, r3
 8008922:	d107      	bne.n	8008934 <HAL_ADC_ConfigChannel+0x5ec>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8008932:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800893a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	069b      	lsls	r3, r3, #26
 8008944:	429a      	cmp	r2, r3
 8008946:	d107      	bne.n	8008958 <HAL_ADC_ConfigChannel+0x610>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8008956:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800895e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	069b      	lsls	r3, r3, #26
 8008968:	429a      	cmp	r2, r3
 800896a:	d10a      	bne.n	8008982 <HAL_ADC_ConfigChannel+0x63a>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800897a:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 800897c:	e001      	b.n	8008982 <HAL_ADC_ConfigChannel+0x63a>
    }

  }
 800897e:	bf00      	nop
 8008980:	e000      	b.n	8008984 <HAL_ADC_ConfigChannel+0x63c>
      break;
 8008982:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	689b      	ldr	r3, [r3, #8]
 800898a:	f003 0303 	and.w	r3, r3, #3
 800898e:	2b01      	cmp	r3, #1
 8008990:	d108      	bne.n	80089a4 <HAL_ADC_ConfigChannel+0x65c>
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f003 0301 	and.w	r3, r3, #1
 800899c:	2b01      	cmp	r3, #1
 800899e:	d101      	bne.n	80089a4 <HAL_ADC_ConfigChannel+0x65c>
 80089a0:	2301      	movs	r3, #1
 80089a2:	e000      	b.n	80089a6 <HAL_ADC_ConfigChannel+0x65e>
 80089a4:	2300      	movs	r3, #0
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	f040 8130 	bne.w	8008c0c <HAL_ADC_ConfigChannel+0x8c4>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	68db      	ldr	r3, [r3, #12]
 80089b0:	2b01      	cmp	r3, #1
 80089b2:	d00f      	beq.n	80089d4 <HAL_ADC_ConfigChannel+0x68c>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	2201      	movs	r2, #1
 80089c2:	fa02 f303 	lsl.w	r3, r2, r3
 80089c6:	43da      	mvns	r2, r3
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	400a      	ands	r2, r1
 80089ce:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80089d2:	e049      	b.n	8008a68 <HAL_ADC_ConfigChannel+0x720>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	2201      	movs	r2, #1
 80089e2:	409a      	lsls	r2, r3
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	430a      	orrs	r2, r1
 80089ea:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	2b09      	cmp	r3, #9
 80089f4:	d91c      	bls.n	8008a30 <HAL_ADC_ConfigChannel+0x6e8>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	6999      	ldr	r1, [r3, #24]
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	681a      	ldr	r2, [r3, #0]
 8008a00:	4613      	mov	r3, r2
 8008a02:	005b      	lsls	r3, r3, #1
 8008a04:	4413      	add	r3, r2
 8008a06:	3b1b      	subs	r3, #27
 8008a08:	2207      	movs	r2, #7
 8008a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8008a0e:	43db      	mvns	r3, r3
 8008a10:	4019      	ands	r1, r3
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	6898      	ldr	r0, [r3, #8]
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	681a      	ldr	r2, [r3, #0]
 8008a1a:	4613      	mov	r3, r2
 8008a1c:	005b      	lsls	r3, r3, #1
 8008a1e:	4413      	add	r3, r2
 8008a20:	3b1b      	subs	r3, #27
 8008a22:	fa00 f203 	lsl.w	r2, r0, r3
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	430a      	orrs	r2, r1
 8008a2c:	619a      	str	r2, [r3, #24]
 8008a2e:	e01b      	b.n	8008a68 <HAL_ADC_ConfigChannel+0x720>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	6959      	ldr	r1, [r3, #20]
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	1c5a      	adds	r2, r3, #1
 8008a3c:	4613      	mov	r3, r2
 8008a3e:	005b      	lsls	r3, r3, #1
 8008a40:	4413      	add	r3, r2
 8008a42:	2207      	movs	r2, #7
 8008a44:	fa02 f303 	lsl.w	r3, r2, r3
 8008a48:	43db      	mvns	r3, r3
 8008a4a:	4019      	ands	r1, r3
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	6898      	ldr	r0, [r3, #8]
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	1c5a      	adds	r2, r3, #1
 8008a56:	4613      	mov	r3, r2
 8008a58:	005b      	lsls	r3, r3, #1
 8008a5a:	4413      	add	r3, r2
 8008a5c:	fa00 f203 	lsl.w	r2, r0, r3
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	430a      	orrs	r2, r1
 8008a66:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008a70:	d004      	beq.n	8008a7c <HAL_ADC_ConfigChannel+0x734>
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	4a18      	ldr	r2, [pc, #96]	; (8008ad8 <HAL_ADC_ConfigChannel+0x790>)
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d101      	bne.n	8008a80 <HAL_ADC_ConfigChannel+0x738>
 8008a7c:	4b17      	ldr	r3, [pc, #92]	; (8008adc <HAL_ADC_ConfigChannel+0x794>)
 8008a7e:	e000      	b.n	8008a82 <HAL_ADC_ConfigChannel+0x73a>
 8008a80:	4b17      	ldr	r3, [pc, #92]	; (8008ae0 <HAL_ADC_ConfigChannel+0x798>)
 8008a82:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	2b10      	cmp	r3, #16
 8008a8a:	d105      	bne.n	8008a98 <HAL_ADC_ConfigChannel+0x750>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8008a8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008a8e:	689b      	ldr	r3, [r3, #8]
 8008a90:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d015      	beq.n	8008ac4 <HAL_ADC_ConfigChannel+0x77c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8008a9c:	2b11      	cmp	r3, #17
 8008a9e:	d105      	bne.n	8008aac <HAL_ADC_ConfigChannel+0x764>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8008aa0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008aa2:	689b      	ldr	r3, [r3, #8]
 8008aa4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d00b      	beq.n	8008ac4 <HAL_ADC_ConfigChannel+0x77c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8008ab0:	2b12      	cmp	r3, #18
 8008ab2:	f040 80ab 	bne.w	8008c0c <HAL_ADC_ConfigChannel+0x8c4>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8008ab6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008ab8:	689b      	ldr	r3, [r3, #8]
 8008aba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	f040 80a4 	bne.w	8008c0c <HAL_ADC_ConfigChannel+0x8c4>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008acc:	d10a      	bne.n	8008ae4 <HAL_ADC_ConfigChannel+0x79c>
 8008ace:	4b02      	ldr	r3, [pc, #8]	; (8008ad8 <HAL_ADC_ConfigChannel+0x790>)
 8008ad0:	60fb      	str	r3, [r7, #12]
 8008ad2:	e022      	b.n	8008b1a <HAL_ADC_ConfigChannel+0x7d2>
 8008ad4:	83fff000 	.word	0x83fff000
 8008ad8:	50000100 	.word	0x50000100
 8008adc:	50000300 	.word	0x50000300
 8008ae0:	50000700 	.word	0x50000700
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	4a4d      	ldr	r2, [pc, #308]	; (8008c20 <HAL_ADC_ConfigChannel+0x8d8>)
 8008aea:	4293      	cmp	r3, r2
 8008aec:	d103      	bne.n	8008af6 <HAL_ADC_ConfigChannel+0x7ae>
 8008aee:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8008af2:	60fb      	str	r3, [r7, #12]
 8008af4:	e011      	b.n	8008b1a <HAL_ADC_ConfigChannel+0x7d2>
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	4a4a      	ldr	r2, [pc, #296]	; (8008c24 <HAL_ADC_ConfigChannel+0x8dc>)
 8008afc:	4293      	cmp	r3, r2
 8008afe:	d102      	bne.n	8008b06 <HAL_ADC_ConfigChannel+0x7be>
 8008b00:	4b49      	ldr	r3, [pc, #292]	; (8008c28 <HAL_ADC_ConfigChannel+0x8e0>)
 8008b02:	60fb      	str	r3, [r7, #12]
 8008b04:	e009      	b.n	8008b1a <HAL_ADC_ConfigChannel+0x7d2>
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	4a47      	ldr	r2, [pc, #284]	; (8008c28 <HAL_ADC_ConfigChannel+0x8e0>)
 8008b0c:	4293      	cmp	r3, r2
 8008b0e:	d102      	bne.n	8008b16 <HAL_ADC_ConfigChannel+0x7ce>
 8008b10:	4b44      	ldr	r3, [pc, #272]	; (8008c24 <HAL_ADC_ConfigChannel+0x8dc>)
 8008b12:	60fb      	str	r3, [r7, #12]
 8008b14:	e001      	b.n	8008b1a <HAL_ADC_ConfigChannel+0x7d2>
 8008b16:	2300      	movs	r3, #0
 8008b18:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	689b      	ldr	r3, [r3, #8]
 8008b20:	f003 0303 	and.w	r3, r3, #3
 8008b24:	2b01      	cmp	r3, #1
 8008b26:	d108      	bne.n	8008b3a <HAL_ADC_ConfigChannel+0x7f2>
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	f003 0301 	and.w	r3, r3, #1
 8008b32:	2b01      	cmp	r3, #1
 8008b34:	d101      	bne.n	8008b3a <HAL_ADC_ConfigChannel+0x7f2>
 8008b36:	2301      	movs	r3, #1
 8008b38:	e000      	b.n	8008b3c <HAL_ADC_ConfigChannel+0x7f4>
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d150      	bne.n	8008be2 <HAL_ADC_ConfigChannel+0x89a>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8008b40:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d010      	beq.n	8008b68 <HAL_ADC_ConfigChannel+0x820>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	689b      	ldr	r3, [r3, #8]
 8008b4a:	f003 0303 	and.w	r3, r3, #3
 8008b4e:	2b01      	cmp	r3, #1
 8008b50:	d107      	bne.n	8008b62 <HAL_ADC_ConfigChannel+0x81a>
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	f003 0301 	and.w	r3, r3, #1
 8008b5a:	2b01      	cmp	r3, #1
 8008b5c:	d101      	bne.n	8008b62 <HAL_ADC_ConfigChannel+0x81a>
 8008b5e:	2301      	movs	r3, #1
 8008b60:	e000      	b.n	8008b64 <HAL_ADC_ConfigChannel+0x81c>
 8008b62:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d13c      	bne.n	8008be2 <HAL_ADC_ConfigChannel+0x89a>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	2b10      	cmp	r3, #16
 8008b6e:	d11d      	bne.n	8008bac <HAL_ADC_ConfigChannel+0x864>
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008b78:	d118      	bne.n	8008bac <HAL_ADC_ConfigChannel+0x864>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8008b7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b7c:	689b      	ldr	r3, [r3, #8]
 8008b7e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8008b82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b84:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8008b86:	4b29      	ldr	r3, [pc, #164]	; (8008c2c <HAL_ADC_ConfigChannel+0x8e4>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	4a29      	ldr	r2, [pc, #164]	; (8008c30 <HAL_ADC_ConfigChannel+0x8e8>)
 8008b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8008b90:	0c9a      	lsrs	r2, r3, #18
 8008b92:	4613      	mov	r3, r2
 8008b94:	009b      	lsls	r3, r3, #2
 8008b96:	4413      	add	r3, r2
 8008b98:	005b      	lsls	r3, r3, #1
 8008b9a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8008b9c:	e002      	b.n	8008ba4 <HAL_ADC_ConfigChannel+0x85c>
          {
            wait_loop_index--;
 8008b9e:	68bb      	ldr	r3, [r7, #8]
 8008ba0:	3b01      	subs	r3, #1
 8008ba2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8008ba4:	68bb      	ldr	r3, [r7, #8]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d1f9      	bne.n	8008b9e <HAL_ADC_ConfigChannel+0x856>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8008baa:	e02e      	b.n	8008c0a <HAL_ADC_ConfigChannel+0x8c2>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	2b11      	cmp	r3, #17
 8008bb2:	d10b      	bne.n	8008bcc <HAL_ADC_ConfigChannel+0x884>
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008bbc:	d106      	bne.n	8008bcc <HAL_ADC_ConfigChannel+0x884>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8008bbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008bc0:	689b      	ldr	r3, [r3, #8]
 8008bc2:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8008bc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008bc8:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8008bca:	e01e      	b.n	8008c0a <HAL_ADC_ConfigChannel+0x8c2>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	2b12      	cmp	r3, #18
 8008bd2:	d11a      	bne.n	8008c0a <HAL_ADC_ConfigChannel+0x8c2>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8008bd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008bd6:	689b      	ldr	r3, [r3, #8]
 8008bd8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8008bdc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008bde:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8008be0:	e013      	b.n	8008c0a <HAL_ADC_ConfigChannel+0x8c2>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008be6:	f043 0220 	orr.w	r2, r3, #32
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8008bee:	2301      	movs	r3, #1
 8008bf0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8008bf4:	e00a      	b.n	8008c0c <HAL_ADC_ConfigChannel+0x8c4>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bfa:	f043 0220 	orr.w	r2, r3, #32
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8008c02:	2301      	movs	r3, #1
 8008c04:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8008c08:	e000      	b.n	8008c0c <HAL_ADC_ConfigChannel+0x8c4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8008c0a:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2200      	movs	r2, #0
 8008c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8008c14:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8008c18:	4618      	mov	r0, r3
 8008c1a:	3768      	adds	r7, #104	; 0x68
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	bd80      	pop	{r7, pc}
 8008c20:	50000100 	.word	0x50000100
 8008c24:	50000400 	.word	0x50000400
 8008c28:	50000500 	.word	0x50000500
 8008c2c:	20000314 	.word	0x20000314
 8008c30:	431bde83 	.word	0x431bde83

08008c34 <HAL_ADCEx_InjectedConfigChannel>:
  * @param  sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b09c      	sub	sp, #112	; 0x70
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
 8008c3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8008c44:	2300      	movs	r3, #0
 8008c46:	60fb      	str	r3, [r7, #12]
  
  /* Injected context queue feature: temporary JSQR variables defined in      */
  /* static to be passed over calls of this function                          */
  uint32_t tmp_JSQR_ContextQueueBeingBuilt = 0U;
 8008c48:	2300      	movs	r3, #0
 8008c4a:	66bb      	str	r3, [r7, #104]	; 0x68
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008c54:	d013      	beq.n	8008c7e <HAL_ADCEx_InjectedConfigChannel+0x4a>
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	4a85      	ldr	r2, [pc, #532]	; (8008e70 <HAL_ADCEx_InjectedConfigChannel+0x23c>)
 8008c5c:	4293      	cmp	r3, r2
 8008c5e:	d00e      	beq.n	8008c7e <HAL_ADCEx_InjectedConfigChannel+0x4a>
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	4a83      	ldr	r2, [pc, #524]	; (8008e74 <HAL_ADCEx_InjectedConfigChannel+0x240>)
 8008c66:	4293      	cmp	r3, r2
 8008c68:	d009      	beq.n	8008c7e <HAL_ADCEx_InjectedConfigChannel+0x4a>
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	4a82      	ldr	r2, [pc, #520]	; (8008e78 <HAL_ADCEx_InjectedConfigChannel+0x244>)
 8008c70:	4293      	cmp	r3, r2
 8008c72:	d004      	beq.n	8008c7e <HAL_ADCEx_InjectedConfigChannel+0x4a>
 8008c74:	f241 718d 	movw	r1, #6029	; 0x178d
 8008c78:	4880      	ldr	r0, [pc, #512]	; (8008e7c <HAL_ADCEx_InjectedConfigChannel+0x248>)
 8008c7a:	f7fc ff8a 	bl	8005b92 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfigInjected->InjectedSamplingTime));
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	689b      	ldr	r3, [r3, #8]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d020      	beq.n	8008cc8 <HAL_ADCEx_InjectedConfigChannel+0x94>
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	689b      	ldr	r3, [r3, #8]
 8008c8a:	2b01      	cmp	r3, #1
 8008c8c:	d01c      	beq.n	8008cc8 <HAL_ADCEx_InjectedConfigChannel+0x94>
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	689b      	ldr	r3, [r3, #8]
 8008c92:	2b02      	cmp	r3, #2
 8008c94:	d018      	beq.n	8008cc8 <HAL_ADCEx_InjectedConfigChannel+0x94>
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	689b      	ldr	r3, [r3, #8]
 8008c9a:	2b03      	cmp	r3, #3
 8008c9c:	d014      	beq.n	8008cc8 <HAL_ADCEx_InjectedConfigChannel+0x94>
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	689b      	ldr	r3, [r3, #8]
 8008ca2:	2b04      	cmp	r3, #4
 8008ca4:	d010      	beq.n	8008cc8 <HAL_ADCEx_InjectedConfigChannel+0x94>
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	689b      	ldr	r3, [r3, #8]
 8008caa:	2b05      	cmp	r3, #5
 8008cac:	d00c      	beq.n	8008cc8 <HAL_ADCEx_InjectedConfigChannel+0x94>
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	689b      	ldr	r3, [r3, #8]
 8008cb2:	2b06      	cmp	r3, #6
 8008cb4:	d008      	beq.n	8008cc8 <HAL_ADCEx_InjectedConfigChannel+0x94>
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	689b      	ldr	r3, [r3, #8]
 8008cba:	2b07      	cmp	r3, #7
 8008cbc:	d004      	beq.n	8008cc8 <HAL_ADCEx_InjectedConfigChannel+0x94>
 8008cbe:	f241 718e 	movw	r1, #6030	; 0x178e
 8008cc2:	486e      	ldr	r0, [pc, #440]	; (8008e7c <HAL_ADCEx_InjectedConfigChannel+0x248>)
 8008cc4:	f7fc ff65 	bl	8005b92 <assert_failed>
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfigInjected->InjectedSingleDiff));
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	68db      	ldr	r3, [r3, #12]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d008      	beq.n	8008ce2 <HAL_ADCEx_InjectedConfigChannel+0xae>
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	68db      	ldr	r3, [r3, #12]
 8008cd4:	2b01      	cmp	r3, #1
 8008cd6:	d004      	beq.n	8008ce2 <HAL_ADCEx_InjectedConfigChannel+0xae>
 8008cd8:	f241 718f 	movw	r1, #6031	; 0x178f
 8008cdc:	4867      	ldr	r0, [pc, #412]	; (8008e7c <HAL_ADCEx_InjectedConfigChannel+0x248>)
 8008cde:	f7fc ff58 	bl	8005b92 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->AutoInjectedConv));
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	7f5b      	ldrb	r3, [r3, #29]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d008      	beq.n	8008cfc <HAL_ADCEx_InjectedConfigChannel+0xc8>
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	7f5b      	ldrb	r3, [r3, #29]
 8008cee:	2b01      	cmp	r3, #1
 8008cf0:	d004      	beq.n	8008cfc <HAL_ADCEx_InjectedConfigChannel+0xc8>
 8008cf2:	f241 7190 	movw	r1, #6032	; 0x1790
 8008cf6:	4861      	ldr	r0, [pc, #388]	; (8008e7c <HAL_ADCEx_InjectedConfigChannel+0x248>)
 8008cf8:	f7fc ff4b 	bl	8005b92 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->QueueInjectedContext));
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	7f9b      	ldrb	r3, [r3, #30]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d008      	beq.n	8008d16 <HAL_ADCEx_InjectedConfigChannel+0xe2>
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	7f9b      	ldrb	r3, [r3, #30]
 8008d08:	2b01      	cmp	r3, #1
 8008d0a:	d004      	beq.n	8008d16 <HAL_ADCEx_InjectedConfigChannel+0xe2>
 8008d0c:	f241 7191 	movw	r1, #6033	; 0x1791
 8008d10:	485a      	ldr	r0, [pc, #360]	; (8008e7c <HAL_ADCEx_InjectedConfigChannel+0x248>)
 8008d12:	f7fc ff3e 	bl	8005b92 <assert_failed>
  assert_param(IS_ADC_EXTTRIGINJEC_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d010      	beq.n	8008d40 <HAL_ADCEx_InjectedConfigChannel+0x10c>
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d22:	2b40      	cmp	r3, #64	; 0x40
 8008d24:	d00c      	beq.n	8008d40 <HAL_ADCEx_InjectedConfigChannel+0x10c>
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d2a:	2b80      	cmp	r3, #128	; 0x80
 8008d2c:	d008      	beq.n	8008d40 <HAL_ADCEx_InjectedConfigChannel+0x10c>
 8008d2e:	683b      	ldr	r3, [r7, #0]
 8008d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d32:	2bc0      	cmp	r3, #192	; 0xc0
 8008d34:	d004      	beq.n	8008d40 <HAL_ADCEx_InjectedConfigChannel+0x10c>
 8008d36:	f241 7192 	movw	r1, #6034	; 0x1792
 8008d3a:	4850      	ldr	r0, [pc, #320]	; (8008e7c <HAL_ADCEx_InjectedConfigChannel+0x248>)
 8008d3c:	f7fc ff29 	bl	8005b92 <assert_failed>
  assert_param(IS_ADC_EXTTRIGINJEC(sConfigInjected->ExternalTrigInjecConv));
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	6a1b      	ldr	r3, [r3, #32]
 8008d44:	2b0c      	cmp	r3, #12
 8008d46:	d055      	beq.n	8008df4 <HAL_ADCEx_InjectedConfigChannel+0x1c0>
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	6a1b      	ldr	r3, [r3, #32]
 8008d4c:	2b34      	cmp	r3, #52	; 0x34
 8008d4e:	d051      	beq.n	8008df4 <HAL_ADCEx_InjectedConfigChannel+0x1c0>
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	6a1b      	ldr	r3, [r3, #32]
 8008d54:	2b10      	cmp	r3, #16
 8008d56:	d04d      	beq.n	8008df4 <HAL_ADCEx_InjectedConfigChannel+0x1c0>
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	6a1b      	ldr	r3, [r3, #32]
 8008d5c:	2b38      	cmp	r3, #56	; 0x38
 8008d5e:	d049      	beq.n	8008df4 <HAL_ADCEx_InjectedConfigChannel+0x1c0>
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	6a1b      	ldr	r3, [r3, #32]
 8008d64:	2b18      	cmp	r3, #24
 8008d66:	d045      	beq.n	8008df4 <HAL_ADCEx_InjectedConfigChannel+0x1c0>
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	6a1b      	ldr	r3, [r3, #32]
 8008d6c:	4a44      	ldr	r2, [pc, #272]	; (8008e80 <HAL_ADCEx_InjectedConfigChannel+0x24c>)
 8008d6e:	4293      	cmp	r3, r2
 8008d70:	d040      	beq.n	8008df4 <HAL_ADCEx_InjectedConfigChannel+0x1c0>
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	6a1b      	ldr	r3, [r3, #32]
 8008d76:	2b18      	cmp	r3, #24
 8008d78:	d03c      	beq.n	8008df4 <HAL_ADCEx_InjectedConfigChannel+0x1c0>
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	6a1b      	ldr	r3, [r3, #32]
 8008d7e:	2b38      	cmp	r3, #56	; 0x38
 8008d80:	d038      	beq.n	8008df4 <HAL_ADCEx_InjectedConfigChannel+0x1c0>
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	6a1b      	ldr	r3, [r3, #32]
 8008d86:	2b0c      	cmp	r3, #12
 8008d88:	d034      	beq.n	8008df4 <HAL_ADCEx_InjectedConfigChannel+0x1c0>
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	6a1b      	ldr	r3, [r3, #32]
 8008d8e:	2b04      	cmp	r3, #4
 8008d90:	d030      	beq.n	8008df4 <HAL_ADCEx_InjectedConfigChannel+0x1c0>
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	6a1b      	ldr	r3, [r3, #32]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d02c      	beq.n	8008df4 <HAL_ADCEx_InjectedConfigChannel+0x1c0>
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	6a1b      	ldr	r3, [r3, #32]
 8008d9e:	2b20      	cmp	r3, #32
 8008da0:	d028      	beq.n	8008df4 <HAL_ADCEx_InjectedConfigChannel+0x1c0>
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	6a1b      	ldr	r3, [r3, #32]
 8008da6:	2b08      	cmp	r3, #8
 8008da8:	d024      	beq.n	8008df4 <HAL_ADCEx_InjectedConfigChannel+0x1c0>
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	6a1b      	ldr	r3, [r3, #32]
 8008dae:	2b2c      	cmp	r3, #44	; 0x2c
 8008db0:	d020      	beq.n	8008df4 <HAL_ADCEx_InjectedConfigChannel+0x1c0>
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	6a1b      	ldr	r3, [r3, #32]
 8008db6:	2b30      	cmp	r3, #48	; 0x30
 8008db8:	d01c      	beq.n	8008df4 <HAL_ADCEx_InjectedConfigChannel+0x1c0>
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	6a1b      	ldr	r3, [r3, #32]
 8008dbe:	2b14      	cmp	r3, #20
 8008dc0:	d018      	beq.n	8008df4 <HAL_ADCEx_InjectedConfigChannel+0x1c0>
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	6a1b      	ldr	r3, [r3, #32]
 8008dc6:	2b1c      	cmp	r3, #28
 8008dc8:	d014      	beq.n	8008df4 <HAL_ADCEx_InjectedConfigChannel+0x1c0>
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	6a1b      	ldr	r3, [r3, #32]
 8008dce:	2b24      	cmp	r3, #36	; 0x24
 8008dd0:	d010      	beq.n	8008df4 <HAL_ADCEx_InjectedConfigChannel+0x1c0>
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	6a1b      	ldr	r3, [r3, #32]
 8008dd6:	2b28      	cmp	r3, #40	; 0x28
 8008dd8:	d00c      	beq.n	8008df4 <HAL_ADCEx_InjectedConfigChannel+0x1c0>
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	6a1b      	ldr	r3, [r3, #32]
 8008dde:	2b3c      	cmp	r3, #60	; 0x3c
 8008de0:	d008      	beq.n	8008df4 <HAL_ADCEx_InjectedConfigChannel+0x1c0>
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	6a1b      	ldr	r3, [r3, #32]
 8008de6:	2b01      	cmp	r3, #1
 8008de8:	d004      	beq.n	8008df4 <HAL_ADCEx_InjectedConfigChannel+0x1c0>
 8008dea:	f241 7193 	movw	r1, #6035	; 0x1793
 8008dee:	4823      	ldr	r0, [pc, #140]	; (8008e7c <HAL_ADCEx_InjectedConfigChannel+0x248>)
 8008df0:	f7fc fecf 	bl	8005b92 <assert_failed>
  assert_param(IS_ADC_OFFSET_NUMBER(sConfigInjected->InjectedOffsetNumber));
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	691b      	ldr	r3, [r3, #16]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d014      	beq.n	8008e26 <HAL_ADCEx_InjectedConfigChannel+0x1f2>
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	691b      	ldr	r3, [r3, #16]
 8008e00:	2b01      	cmp	r3, #1
 8008e02:	d010      	beq.n	8008e26 <HAL_ADCEx_InjectedConfigChannel+0x1f2>
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	691b      	ldr	r3, [r3, #16]
 8008e08:	2b02      	cmp	r3, #2
 8008e0a:	d00c      	beq.n	8008e26 <HAL_ADCEx_InjectedConfigChannel+0x1f2>
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	691b      	ldr	r3, [r3, #16]
 8008e10:	2b03      	cmp	r3, #3
 8008e12:	d008      	beq.n	8008e26 <HAL_ADCEx_InjectedConfigChannel+0x1f2>
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	691b      	ldr	r3, [r3, #16]
 8008e18:	2b04      	cmp	r3, #4
 8008e1a:	d004      	beq.n	8008e26 <HAL_ADCEx_InjectedConfigChannel+0x1f2>
 8008e1c:	f241 7194 	movw	r1, #6036	; 0x1794
 8008e20:	4816      	ldr	r0, [pc, #88]	; (8008e7c <HAL_ADCEx_InjectedConfigChannel+0x248>)
 8008e22:	f7fc feb6 	bl	8005b92 <assert_failed>
  assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), sConfigInjected->InjectedOffset));
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	68db      	ldr	r3, [r3, #12]
 8008e2c:	f003 0318 	and.w	r3, r3, #24
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d104      	bne.n	8008e3e <HAL_ADCEx_InjectedConfigChannel+0x20a>
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	695b      	ldr	r3, [r3, #20]
 8008e38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e3c:	d332      	bcc.n	8008ea4 <HAL_ADCEx_InjectedConfigChannel+0x270>
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	68db      	ldr	r3, [r3, #12]
 8008e44:	f003 0318 	and.w	r3, r3, #24
 8008e48:	2b08      	cmp	r3, #8
 8008e4a:	d104      	bne.n	8008e56 <HAL_ADCEx_InjectedConfigChannel+0x222>
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	695b      	ldr	r3, [r3, #20]
 8008e50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e54:	d326      	bcc.n	8008ea4 <HAL_ADCEx_InjectedConfigChannel+0x270>
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	68db      	ldr	r3, [r3, #12]
 8008e5c:	f003 0318 	and.w	r3, r3, #24
 8008e60:	2b10      	cmp	r3, #16
 8008e62:	d10f      	bne.n	8008e84 <HAL_ADCEx_InjectedConfigChannel+0x250>
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	695b      	ldr	r3, [r3, #20]
 8008e68:	2bff      	cmp	r3, #255	; 0xff
 8008e6a:	d91b      	bls.n	8008ea4 <HAL_ADCEx_InjectedConfigChannel+0x270>
 8008e6c:	e00a      	b.n	8008e84 <HAL_ADCEx_InjectedConfigChannel+0x250>
 8008e6e:	bf00      	nop
 8008e70:	50000100 	.word	0x50000100
 8008e74:	50000400 	.word	0x50000400
 8008e78:	50000500 	.word	0x50000500
 8008e7c:	08034210 	.word	0x08034210
 8008e80:	00010008 	.word	0x00010008
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	68db      	ldr	r3, [r3, #12]
 8008e8a:	f003 0318 	and.w	r3, r3, #24
 8008e8e:	2b18      	cmp	r3, #24
 8008e90:	d103      	bne.n	8008e9a <HAL_ADCEx_InjectedConfigChannel+0x266>
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	695b      	ldr	r3, [r3, #20]
 8008e96:	2b3f      	cmp	r3, #63	; 0x3f
 8008e98:	d904      	bls.n	8008ea4 <HAL_ADCEx_InjectedConfigChannel+0x270>
 8008e9a:	f241 7195 	movw	r1, #6037	; 0x1795
 8008e9e:	4889      	ldr	r0, [pc, #548]	; (80090c4 <HAL_ADCEx_InjectedConfigChannel+0x490>)
 8008ea0:	f7fc fe77 	bl	8005b92 <assert_failed>
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	691b      	ldr	r3, [r3, #16]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d02e      	beq.n	8008f0a <HAL_ADCEx_InjectedConfigChannel+0x2d6>
  {
    assert_param(IS_ADC_INJECTED_RANK(sConfigInjected->InjectedRank));
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	685b      	ldr	r3, [r3, #4]
 8008eb0:	2b01      	cmp	r3, #1
 8008eb2:	d010      	beq.n	8008ed6 <HAL_ADCEx_InjectedConfigChannel+0x2a2>
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	685b      	ldr	r3, [r3, #4]
 8008eb8:	2b02      	cmp	r3, #2
 8008eba:	d00c      	beq.n	8008ed6 <HAL_ADCEx_InjectedConfigChannel+0x2a2>
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	685b      	ldr	r3, [r3, #4]
 8008ec0:	2b03      	cmp	r3, #3
 8008ec2:	d008      	beq.n	8008ed6 <HAL_ADCEx_InjectedConfigChannel+0x2a2>
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	685b      	ldr	r3, [r3, #4]
 8008ec8:	2b04      	cmp	r3, #4
 8008eca:	d004      	beq.n	8008ed6 <HAL_ADCEx_InjectedConfigChannel+0x2a2>
 8008ecc:	f241 7199 	movw	r1, #6041	; 0x1799
 8008ed0:	487c      	ldr	r0, [pc, #496]	; (80090c4 <HAL_ADCEx_InjectedConfigChannel+0x490>)
 8008ed2:	f7fc fe5e 	bl	8005b92 <assert_failed>
    assert_param(IS_ADC_INJECTED_NB_CONV(sConfigInjected->InjectedNbrOfConversion));
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	699b      	ldr	r3, [r3, #24]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d003      	beq.n	8008ee6 <HAL_ADCEx_InjectedConfigChannel+0x2b2>
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	699b      	ldr	r3, [r3, #24]
 8008ee2:	2b04      	cmp	r3, #4
 8008ee4:	d904      	bls.n	8008ef0 <HAL_ADCEx_InjectedConfigChannel+0x2bc>
 8008ee6:	f241 719a 	movw	r1, #6042	; 0x179a
 8008eea:	4876      	ldr	r0, [pc, #472]	; (80090c4 <HAL_ADCEx_InjectedConfigChannel+0x490>)
 8008eec:	f7fc fe51 	bl	8005b92 <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->InjectedDiscontinuousConvMode));
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	7f1b      	ldrb	r3, [r3, #28]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d008      	beq.n	8008f0a <HAL_ADCEx_InjectedConfigChannel+0x2d6>
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	7f1b      	ldrb	r3, [r3, #28]
 8008efc:	2b01      	cmp	r3, #1
 8008efe:	d004      	beq.n	8008f0a <HAL_ADCEx_InjectedConfigChannel+0x2d6>
 8008f00:	f241 719b 	movw	r1, #6043	; 0x179b
 8008f04:	486f      	ldr	r0, [pc, #444]	; (80090c4 <HAL_ADCEx_InjectedConfigChannel+0x490>)
 8008f06:	f7fc fe44 	bl	8005b92 <assert_failed>
  }
  
  /* Verification of channel number: Channels 1 to 14 are available in        */  
  /* differential mode. Channels 15U, 16U, 17U, 18 can be used only in           */
  /* single-ended mode.                                                       */
  if (sConfigInjected->InjectedSingleDiff != ADC_DIFFERENTIAL_ENDED)
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	68db      	ldr	r3, [r3, #12]
 8008f0e:	2b01      	cmp	r3, #1
 8008f10:	d063      	beq.n	8008fda <HAL_ADCEx_InjectedConfigChannel+0x3a6>
  {
    assert_param(IS_ADC_CHANNEL(sConfigInjected->InjectedChannel));
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	2b01      	cmp	r3, #1
 8008f18:	f000 809c 	beq.w	8009054 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	2b02      	cmp	r3, #2
 8008f22:	f000 8097 	beq.w	8009054 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	2b03      	cmp	r3, #3
 8008f2c:	f000 8092 	beq.w	8009054 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	2b04      	cmp	r3, #4
 8008f36:	f000 808d 	beq.w	8009054 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	2b05      	cmp	r3, #5
 8008f40:	f000 8088 	beq.w	8009054 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	2b06      	cmp	r3, #6
 8008f4a:	f000 8083 	beq.w	8009054 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	2b07      	cmp	r3, #7
 8008f54:	d07e      	beq.n	8009054 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8008f56:	683b      	ldr	r3, [r7, #0]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	2b08      	cmp	r3, #8
 8008f5c:	d07a      	beq.n	8009054 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	2b09      	cmp	r3, #9
 8008f64:	d076      	beq.n	8009054 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	2b0a      	cmp	r3, #10
 8008f6c:	d072      	beq.n	8009054 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8008f6e:	683b      	ldr	r3, [r7, #0]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	2b0b      	cmp	r3, #11
 8008f74:	d06e      	beq.n	8009054 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	2b0c      	cmp	r3, #12
 8008f7c:	d06a      	beq.n	8009054 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	2b0d      	cmp	r3, #13
 8008f84:	d066      	beq.n	8009054 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	2b0e      	cmp	r3, #14
 8008f8c:	d062      	beq.n	8009054 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	2b0f      	cmp	r3, #15
 8008f94:	d05e      	beq.n	8009054 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	2b10      	cmp	r3, #16
 8008f9c:	d05a      	beq.n	8009054 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	2b11      	cmp	r3, #17
 8008fa4:	d056      	beq.n	8009054 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	2b12      	cmp	r3, #18
 8008fac:	d052      	beq.n	8009054 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	2b0f      	cmp	r3, #15
 8008fb4:	d04e      	beq.n	8009054 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	2b11      	cmp	r3, #17
 8008fbc:	d04a      	beq.n	8009054 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	2b11      	cmp	r3, #17
 8008fc4:	d046      	beq.n	8009054 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	2b11      	cmp	r3, #17
 8008fcc:	d042      	beq.n	8009054 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8008fce:	f241 71a3 	movw	r1, #6051	; 0x17a3
 8008fd2:	483c      	ldr	r0, [pc, #240]	; (80090c4 <HAL_ADCEx_InjectedConfigChannel+0x490>)
 8008fd4:	f7fc fddd 	bl	8005b92 <assert_failed>
 8008fd8:	e03c      	b.n	8009054 <HAL_ADCEx_InjectedConfigChannel+0x420>
  }
  else
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfigInjected->InjectedChannel));
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	2b01      	cmp	r3, #1
 8008fe0:	d038      	beq.n	8009054 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	2b02      	cmp	r3, #2
 8008fe8:	d034      	beq.n	8009054 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	2b03      	cmp	r3, #3
 8008ff0:	d030      	beq.n	8009054 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	2b04      	cmp	r3, #4
 8008ff8:	d02c      	beq.n	8009054 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	2b05      	cmp	r3, #5
 8009000:	d028      	beq.n	8009054 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	2b06      	cmp	r3, #6
 8009008:	d024      	beq.n	8009054 <HAL_ADCEx_InjectedConfigChannel+0x420>
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	2b07      	cmp	r3, #7
 8009010:	d020      	beq.n	8009054 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	2b08      	cmp	r3, #8
 8009018:	d01c      	beq.n	8009054 <HAL_ADCEx_InjectedConfigChannel+0x420>
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	2b09      	cmp	r3, #9
 8009020:	d018      	beq.n	8009054 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	2b0a      	cmp	r3, #10
 8009028:	d014      	beq.n	8009054 <HAL_ADCEx_InjectedConfigChannel+0x420>
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	2b0b      	cmp	r3, #11
 8009030:	d010      	beq.n	8009054 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	2b0c      	cmp	r3, #12
 8009038:	d00c      	beq.n	8009054 <HAL_ADCEx_InjectedConfigChannel+0x420>
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	2b0d      	cmp	r3, #13
 8009040:	d008      	beq.n	8009054 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	2b0e      	cmp	r3, #14
 8009048:	d004      	beq.n	8009054 <HAL_ADCEx_InjectedConfigChannel+0x420>
 800904a:	f241 71a7 	movw	r1, #6055	; 0x17a7
 800904e:	481d      	ldr	r0, [pc, #116]	; (80090c4 <HAL_ADCEx_InjectedConfigChannel+0x490>)
 8009050:	f7fc fd9f 	bl	8005b92 <assert_failed>
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800905a:	2b01      	cmp	r3, #1
 800905c:	d101      	bne.n	8009062 <HAL_ADCEx_InjectedConfigChannel+0x42e>
 800905e:	2302      	movs	r3, #2
 8009060:	e36a      	b.n	8009738 <HAL_ADCEx_InjectedConfigChannel+0xb04>
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2201      	movs	r2, #1
 8009066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */
  
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	691b      	ldr	r3, [r3, #16]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d003      	beq.n	800907a <HAL_ADCEx_InjectedConfigChannel+0x446>
      (sConfigInjected->InjectedNbrOfConversion == 1U)  )
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	699b      	ldr	r3, [r3, #24]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8009076:	2b01      	cmp	r3, #1
 8009078:	d158      	bne.n	800912c <HAL_ADCEx_InjectedConfigChannel+0x4f8>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 used)        */
    
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	685b      	ldr	r3, [r3, #4]
 800907e:	2b01      	cmp	r3, #1
 8009080:	d14a      	bne.n	8009118 <HAL_ADCEx_InjectedConfigChannel+0x4e4>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	6a1b      	ldr	r3, [r3, #32]
 8009086:	2b01      	cmp	r3, #1
 8009088:	d032      	beq.n	80090f0 <HAL_ADCEx_InjectedConfigChannel+0x4bc>
      {
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) |
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	021a      	lsls	r2, r3, #8
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	490c      	ldr	r1, [pc, #48]	; (80090c8 <HAL_ADCEx_InjectedConfigChannel+0x494>)
 8009096:	428b      	cmp	r3, r1
 8009098:	d004      	beq.n	80090a4 <HAL_ADCEx_InjectedConfigChannel+0x470>
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	490b      	ldr	r1, [pc, #44]	; (80090cc <HAL_ADCEx_InjectedConfigChannel+0x498>)
 80090a0:	428b      	cmp	r3, r1
 80090a2:	d11b      	bne.n	80090dc <HAL_ADCEx_InjectedConfigChannel+0x4a8>
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	6a1b      	ldr	r3, [r3, #32]
 80090a8:	2b08      	cmp	r3, #8
 80090aa:	d015      	beq.n	80090d8 <HAL_ADCEx_InjectedConfigChannel+0x4a4>
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	6a1b      	ldr	r3, [r3, #32]
 80090b0:	2b14      	cmp	r3, #20
 80090b2:	d00f      	beq.n	80090d4 <HAL_ADCEx_InjectedConfigChannel+0x4a0>
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	6a1b      	ldr	r3, [r3, #32]
 80090b8:	2b1c      	cmp	r3, #28
 80090ba:	d009      	beq.n	80090d0 <HAL_ADCEx_InjectedConfigChannel+0x49c>
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	6a1b      	ldr	r3, [r3, #32]
 80090c0:	e00e      	b.n	80090e0 <HAL_ADCEx_InjectedConfigChannel+0x4ac>
 80090c2:	bf00      	nop
 80090c4:	08034210 	.word	0x08034210
 80090c8:	50000400 	.word	0x50000400
 80090cc:	50000500 	.word	0x50000500
 80090d0:	2310      	movs	r3, #16
 80090d2:	e005      	b.n	80090e0 <HAL_ADCEx_InjectedConfigChannel+0x4ac>
 80090d4:	231c      	movs	r3, #28
 80090d6:	e003      	b.n	80090e0 <HAL_ADCEx_InjectedConfigChannel+0x4ac>
 80090d8:	2334      	movs	r3, #52	; 0x34
 80090da:	e001      	b.n	80090e0 <HAL_ADCEx_InjectedConfigChannel+0x4ac>
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	6a1b      	ldr	r3, [r3, #32]
 80090e0:	431a      	orrs	r2, r3
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090e6:	4313      	orrs	r3, r2
 80090e8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80090ea:	4313      	orrs	r3, r2
 80090ec:	66bb      	str	r3, [r7, #104]	; 0x68
 80090ee:	e005      	b.n	80090fc <HAL_ADCEx_InjectedConfigChannel+0x4c8>
                                                 ADC_JSQR_JEXTSEL_SET(hadc, sConfigInjected->ExternalTrigInjecConv) |
                                                 sConfigInjected->ExternalTrigInjecConvEdge                          );
      }
      else
      {
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) );
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	021b      	lsls	r3, r3, #8
 80090f6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80090f8:	4313      	orrs	r3, r2
 80090fa:	66bb      	str	r3, [r7, #104]	; 0x68
      }
      
      /* Update ADC register JSQR */
      MODIFY_REG(hadc->Instance->JSQR           ,
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009102:	4b87      	ldr	r3, [pc, #540]	; (8009320 <HAL_ADCEx_InjectedConfigChannel+0x6ec>)
 8009104:	4013      	ands	r3, r2
 8009106:	687a      	ldr	r2, [r7, #4]
 8009108:	6812      	ldr	r2, [r2, #0]
 800910a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800910c:	430b      	orrs	r3, r1
 800910e:	64d3      	str	r3, [r2, #76]	; 0x4c
                 ADC_JSQR_JEXTSEL |
                 ADC_JSQR_JL                    ,
                 tmp_JSQR_ContextQueueBeingBuilt );
      
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009114:	649a      	str	r2, [r3, #72]	; 0x48
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8009116:	e07f      	b.n	8009218 <HAL_ADCEx_InjectedConfigChannel+0x5e4>
    /* If another injected rank than rank1 was intended to be set, and could  */
    /* not due to ScanConvMode disabled, error is reported.                   */
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800911c:	f043 0220 	orr.w	r2, r3, #32
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	641a      	str	r2, [r3, #64]	; 0x40
      
      tmp_hal_status = HAL_ERROR;
 8009124:	2301      	movs	r3, #1
 8009126:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 800912a:	e075      	b.n	8009218 <HAL_ADCEx_InjectedConfigChannel+0x5e4>
    /* Procedure to define injected context register JSQR over successive     */
    /* calls of this function, for each injected channel rank:                */
    
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger                      */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009130:	2b00      	cmp	r3, #0
 8009132:	d140      	bne.n	80091b6 <HAL_ADCEx_InjectedConfigChannel+0x582>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = sConfigInjected->InjectedNbrOfConversion;
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	699a      	ldr	r2, [r3, #24]
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Initialize value that will be set into register JSQR */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2200      	movs	r2, #0
 8009140:	649a      	str	r2, [r3, #72]	; 0x48
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	6a1b      	ldr	r3, [r3, #32]
 8009146:	2b01      	cmp	r3, #1
 8009148:	d02d      	beq.n	80091a6 <HAL_ADCEx_InjectedConfigChannel+0x572>
      {
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U)           |
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	699b      	ldr	r3, [r3, #24]
 8009152:	1e59      	subs	r1, r3, #1
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	4872      	ldr	r0, [pc, #456]	; (8009324 <HAL_ADCEx_InjectedConfigChannel+0x6f0>)
 800915a:	4283      	cmp	r3, r0
 800915c:	d004      	beq.n	8009168 <HAL_ADCEx_InjectedConfigChannel+0x534>
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	4871      	ldr	r0, [pc, #452]	; (8009328 <HAL_ADCEx_InjectedConfigChannel+0x6f4>)
 8009164:	4283      	cmp	r3, r0
 8009166:	d114      	bne.n	8009192 <HAL_ADCEx_InjectedConfigChannel+0x55e>
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	6a1b      	ldr	r3, [r3, #32]
 800916c:	2b08      	cmp	r3, #8
 800916e:	d00e      	beq.n	800918e <HAL_ADCEx_InjectedConfigChannel+0x55a>
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	6a1b      	ldr	r3, [r3, #32]
 8009174:	2b14      	cmp	r3, #20
 8009176:	d008      	beq.n	800918a <HAL_ADCEx_InjectedConfigChannel+0x556>
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	6a1b      	ldr	r3, [r3, #32]
 800917c:	2b1c      	cmp	r3, #28
 800917e:	d002      	beq.n	8009186 <HAL_ADCEx_InjectedConfigChannel+0x552>
 8009180:	683b      	ldr	r3, [r7, #0]
 8009182:	6a1b      	ldr	r3, [r3, #32]
 8009184:	e007      	b.n	8009196 <HAL_ADCEx_InjectedConfigChannel+0x562>
 8009186:	2310      	movs	r3, #16
 8009188:	e005      	b.n	8009196 <HAL_ADCEx_InjectedConfigChannel+0x562>
 800918a:	231c      	movs	r3, #28
 800918c:	e003      	b.n	8009196 <HAL_ADCEx_InjectedConfigChannel+0x562>
 800918e:	2334      	movs	r3, #52	; 0x34
 8009190:	e001      	b.n	8009196 <HAL_ADCEx_InjectedConfigChannel+0x562>
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	6a1b      	ldr	r3, [r3, #32]
 8009196:	4319      	orrs	r1, r3
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800919c:	430b      	orrs	r3, r1
 800919e:	431a      	orrs	r2, r3
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	649a      	str	r2, [r3, #72]	; 0x48
 80091a4:	e007      	b.n	80091b6 <HAL_ADCEx_InjectedConfigChannel+0x582>
                                                    ADC_JSQR_JEXTSEL_SET(hadc, sConfigInjected->ExternalTrigInjecConv) |
                                                    sConfigInjected->ExternalTrigInjecConvEdge                          );        
      }
      else
      {
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U) );        
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	699b      	ldr	r3, [r3, #24]
 80091ae:	3b01      	subs	r3, #1
 80091b0:	431a      	orrs	r2, r3
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	649a      	str	r2, [r3, #72]	; 0x48

      /* 2. Continue setting of context under definition with parameter       */
      /*    related to each channel: channel rank sequence                    */
      
      /* Set the JSQx bits for the selected rank */
      MODIFY_REG(hadc->InjectionConfig.ContextQueue                                          ,
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	685a      	ldr	r2, [r3, #4]
 80091be:	4613      	mov	r3, r2
 80091c0:	005b      	lsls	r3, r3, #1
 80091c2:	4413      	add	r3, r2
 80091c4:	005b      	lsls	r3, r3, #1
 80091c6:	3302      	adds	r3, #2
 80091c8:	221f      	movs	r2, #31
 80091ca:	fa02 f303 	lsl.w	r3, r2, r3
 80091ce:	43db      	mvns	r3, r3
 80091d0:	4019      	ands	r1, r3
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	6818      	ldr	r0, [r3, #0]
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	685a      	ldr	r2, [r3, #4]
 80091da:	4613      	mov	r3, r2
 80091dc:	005b      	lsls	r3, r3, #1
 80091de:	4413      	add	r3, r2
 80091e0:	005b      	lsls	r3, r3, #1
 80091e2:	3302      	adds	r3, #2
 80091e4:	fa00 f303 	lsl.w	r3, r0, r3
 80091e8:	ea41 0203 	orr.w	r2, r1, r3
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	649a      	str	r2, [r3, #72]	; 0x48
                 ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank)                   ,
                 ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank) );
      
      /* Decrease channel count after setting into temporary JSQR variable */
      hadc->InjectionConfig.ChannelCount --;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091f4:	1e5a      	subs	r2, r3, #1
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	64da      	str	r2, [r3, #76]	; 0x4c
      
      /* 3. End of context setting: If last channel set, then write context   */
      /*    into register JSQR and make it enter into queue                   */
      if (hadc->InjectionConfig.ChannelCount == 0U)
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d10a      	bne.n	8009218 <HAL_ADCEx_InjectedConfigChannel+0x5e4>
      {
        /* Update ADC register JSQR */
        MODIFY_REG(hadc->Instance->JSQR              ,
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009208:	4b45      	ldr	r3, [pc, #276]	; (8009320 <HAL_ADCEx_InjectedConfigChannel+0x6ec>)
 800920a:	4013      	ands	r3, r2
 800920c:	687a      	ldr	r2, [r7, #4]
 800920e:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8009210:	687a      	ldr	r2, [r7, #4]
 8009212:	6812      	ldr	r2, [r2, #0]
 8009214:	430b      	orrs	r3, r1
 8009216:	64d3      	str	r3, [r2, #76]	; 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	689b      	ldr	r3, [r3, #8]
 800921e:	f003 0308 	and.w	r3, r3, #8
 8009222:	2b00      	cmp	r3, #0
 8009224:	d12d      	bne.n	8009282 <HAL_ADCEx_InjectedConfigChannel+0x64e>
  {     
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	7f5b      	ldrb	r3, [r3, #29]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d110      	bne.n	8009250 <HAL_ADCEx_InjectedConfigChannel+0x61c>
    {
      MODIFY_REG(hadc->Instance->CFGR                                                            ,
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	68db      	ldr	r3, [r3, #12]
 8009234:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	7f9b      	ldrb	r3, [r3, #30]
 800923c:	055a      	lsls	r2, r3, #21
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	7f1b      	ldrb	r3, [r3, #28]
 8009242:	051b      	lsls	r3, r3, #20
 8009244:	431a      	orrs	r2, r3
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	430a      	orrs	r2, r1
 800924c:	60da      	str	r2, [r3, #12]
 800924e:	e018      	b.n	8009282 <HAL_ADCEx_InjectedConfigChannel+0x64e>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR                                                ,
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	68db      	ldr	r3, [r3, #12]
 8009256:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	7f9b      	ldrb	r3, [r3, #30]
 800925e:	055a      	lsls	r2, r3, #21
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	430a      	orrs	r2, r1
 8009266:	60da      	str	r2, [r3, #12]
                 ADC_CFGR_JDISCEN                                                    ,
                 ADC_CFGR_INJECT_CONTEXT_QUEUE((uint32_t)sConfigInjected->QueueInjectedContext) );
      
      /* If injected discontinuous mode was intended to be set and could not  */
      /* due to auto-injected enabled, error is reported.                     */
      if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	7f1b      	ldrb	r3, [r3, #28]
 800926c:	2b01      	cmp	r3, #1
 800926e:	d108      	bne.n	8009282 <HAL_ADCEx_InjectedConfigChannel+0x64e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009274:	f043 0220 	orr.w	r2, r3, #32
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 800927c:	2301      	movs	r3, #1
 800927e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	689b      	ldr	r3, [r3, #8]
 8009288:	f003 030c 	and.w	r3, r3, #12
 800928c:	2b00      	cmp	r3, #0
 800928e:	f040 8110 	bne.w	80094b2 <HAL_ADCEx_InjectedConfigChannel+0x87e>
  {    
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	6a1b      	ldr	r3, [r3, #32]
 8009296:	2b01      	cmp	r3, #1
 8009298:	d10c      	bne.n	80092b4 <HAL_ADCEx_InjectedConfigChannel+0x680>
    {
      MODIFY_REG(hadc->Instance->CFGR                                              ,
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	68db      	ldr	r3, [r3, #12]
 80092a0:	f023 7100 	bic.w	r1, r3, #33554432	; 0x2000000
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	7f5b      	ldrb	r3, [r3, #29]
 80092a8:	065a      	lsls	r2, r3, #25
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	430a      	orrs	r2, r1
 80092b0:	60da      	str	r2, [r3, #12]
 80092b2:	e014      	b.n	80092de <HAL_ADCEx_InjectedConfigChannel+0x6aa>
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      /* Disable Automatic injected conversion */
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	68da      	ldr	r2, [r3, #12]
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 80092c2:	60da      	str	r2, [r3, #12]
      
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	7f5b      	ldrb	r3, [r3, #29]
 80092c8:	2b01      	cmp	r3, #1
 80092ca:	d108      	bne.n	80092de <HAL_ADCEx_InjectedConfigChannel+0x6aa>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092d0:	f043 0220 	orr.w	r2, r3, #32
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80092d8:	2301      	movs	r3, #1
 80092da:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    }
      

    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	2b09      	cmp	r3, #9
 80092e4:	d922      	bls.n	800932c <HAL_ADCEx_InjectedConfigChannel+0x6f8>
    {
      MODIFY_REG(hadc->Instance->SMPR2                                                             ,
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	6999      	ldr	r1, [r3, #24]
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	681a      	ldr	r2, [r3, #0]
 80092f0:	4613      	mov	r3, r2
 80092f2:	005b      	lsls	r3, r3, #1
 80092f4:	4413      	add	r3, r2
 80092f6:	3b1e      	subs	r3, #30
 80092f8:	2207      	movs	r2, #7
 80092fa:	fa02 f303 	lsl.w	r3, r2, r3
 80092fe:	43db      	mvns	r3, r3
 8009300:	4019      	ands	r1, r3
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	6898      	ldr	r0, [r3, #8]
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	681a      	ldr	r2, [r3, #0]
 800930a:	4613      	mov	r3, r2
 800930c:	005b      	lsls	r3, r3, #1
 800930e:	4413      	add	r3, r2
 8009310:	3b1e      	subs	r3, #30
 8009312:	fa00 f203 	lsl.w	r2, r0, r3
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	430a      	orrs	r2, r1
 800931c:	619a      	str	r2, [r3, #24]
 800931e:	e01f      	b.n	8009360 <HAL_ADCEx_InjectedConfigChannel+0x72c>
 8009320:	82082000 	.word	0x82082000
 8009324:	50000400 	.word	0x50000400
 8009328:	50000500 	.word	0x50000500
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfigInjected->InjectedChannel)                      ,
                 ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                                                             ,
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	6959      	ldr	r1, [r3, #20]
 8009332:	683b      	ldr	r3, [r7, #0]
 8009334:	681a      	ldr	r2, [r3, #0]
 8009336:	4613      	mov	r3, r2
 8009338:	005b      	lsls	r3, r3, #1
 800933a:	4413      	add	r3, r2
 800933c:	2207      	movs	r2, #7
 800933e:	fa02 f303 	lsl.w	r3, r2, r3
 8009342:	43db      	mvns	r3, r3
 8009344:	4019      	ands	r1, r3
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	6898      	ldr	r0, [r3, #8]
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	681a      	ldr	r2, [r3, #0]
 800934e:	4613      	mov	r3, r2
 8009350:	005b      	lsls	r3, r3, #1
 8009352:	4413      	add	r3, r2
 8009354:	fa00 f203 	lsl.w	r2, r0, r3
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	430a      	orrs	r2, r1
 800935e:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */
    
    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	695a      	ldr	r2, [r3, #20]
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	68db      	ldr	r3, [r3, #12]
 800936a:	08db      	lsrs	r3, r3, #3
 800936c:	f003 0303 	and.w	r3, r3, #3
 8009370:	005b      	lsls	r3, r3, #1
 8009372:	fa02 f303 	lsl.w	r3, r2, r3
 8009376:	667b      	str	r3, [r7, #100]	; 0x64
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfigInjected->InjectedOffsetNumber)
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	691b      	ldr	r3, [r3, #16]
 800937c:	3b01      	subs	r3, #1
 800937e:	2b03      	cmp	r3, #3
 8009380:	d84e      	bhi.n	8009420 <HAL_ADCEx_InjectedConfigChannel+0x7ec>
 8009382:	a201      	add	r2, pc, #4	; (adr r2, 8009388 <HAL_ADCEx_InjectedConfigChannel+0x754>)
 8009384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009388:	08009399 	.word	0x08009399
 800938c:	080093bb 	.word	0x080093bb
 8009390:	080093dd 	.word	0x080093dd
 8009394:	080093ff 	.word	0x080093ff
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1                               ,
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800939e:	4b9a      	ldr	r3, [pc, #616]	; (8009608 <HAL_ADCEx_InjectedConfigChannel+0x9d4>)
 80093a0:	4013      	ands	r3, r2
 80093a2:	683a      	ldr	r2, [r7, #0]
 80093a4:	6812      	ldr	r2, [r2, #0]
 80093a6:	0691      	lsls	r1, r2, #26
 80093a8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80093aa:	430a      	orrs	r2, r1
 80093ac:	431a      	orrs	r2, r3
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80093b6:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                                   ,
                 ADC_OFR1_OFFSET1_EN                               |
                 ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel) |
                 tmpOffsetShifted                                    );
      break;
 80093b8:	e07e      	b.n	80094b8 <HAL_ADCEx_InjectedConfigChannel+0x884>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2                               ,
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80093c0:	4b91      	ldr	r3, [pc, #580]	; (8009608 <HAL_ADCEx_InjectedConfigChannel+0x9d4>)
 80093c2:	4013      	ands	r3, r2
 80093c4:	683a      	ldr	r2, [r7, #0]
 80093c6:	6812      	ldr	r2, [r2, #0]
 80093c8:	0691      	lsls	r1, r2, #26
 80093ca:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80093cc:	430a      	orrs	r2, r1
 80093ce:	431a      	orrs	r2, r3
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80093d8:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                                   ,
                 ADC_OFR2_OFFSET2_EN                               |
                 ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel) |
                 tmpOffsetShifted                                    );
      break;
 80093da:	e06d      	b.n	80094b8 <HAL_ADCEx_InjectedConfigChannel+0x884>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3                               ,
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80093e2:	4b89      	ldr	r3, [pc, #548]	; (8009608 <HAL_ADCEx_InjectedConfigChannel+0x9d4>)
 80093e4:	4013      	ands	r3, r2
 80093e6:	683a      	ldr	r2, [r7, #0]
 80093e8:	6812      	ldr	r2, [r2, #0]
 80093ea:	0691      	lsls	r1, r2, #26
 80093ec:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80093ee:	430a      	orrs	r2, r1
 80093f0:	431a      	orrs	r2, r3
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80093fa:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                                   ,
                 ADC_OFR3_OFFSET3_EN                               |
                 ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel) |
                 tmpOffsetShifted                                    );
      break;
 80093fc:	e05c      	b.n	80094b8 <HAL_ADCEx_InjectedConfigChannel+0x884>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4                               ,
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8009404:	4b80      	ldr	r3, [pc, #512]	; (8009608 <HAL_ADCEx_InjectedConfigChannel+0x9d4>)
 8009406:	4013      	ands	r3, r2
 8009408:	683a      	ldr	r2, [r7, #0]
 800940a:	6812      	ldr	r2, [r2, #0]
 800940c:	0691      	lsls	r1, r2, #26
 800940e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009410:	430a      	orrs	r2, r1
 8009412:	431a      	orrs	r2, r3
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800941c:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                                   ,
                 ADC_OFR4_OFFSET4_EN                               |
                 ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel) |
                 tmpOffsetShifted                                    );
      break;
 800941e:	e04b      	b.n	80094b8 <HAL_ADCEx_InjectedConfigChannel+0x884>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009426:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	069b      	lsls	r3, r3, #26
 8009430:	429a      	cmp	r2, r3
 8009432:	d107      	bne.n	8009444 <HAL_ADCEx_InjectedConfigChannel+0x810>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8009442:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800944a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800944e:	683b      	ldr	r3, [r7, #0]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	069b      	lsls	r3, r3, #26
 8009454:	429a      	cmp	r2, r3
 8009456:	d107      	bne.n	8009468 <HAL_ADCEx_InjectedConfigChannel+0x834>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8009466:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800946e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8009472:	683b      	ldr	r3, [r7, #0]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	069b      	lsls	r3, r3, #26
 8009478:	429a      	cmp	r2, r3
 800947a:	d107      	bne.n	800948c <HAL_ADCEx_InjectedConfigChannel+0x858>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800948a:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009492:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	069b      	lsls	r3, r3, #26
 800949c:	429a      	cmp	r2, r3
 800949e:	d10a      	bne.n	80094b6 <HAL_ADCEx_InjectedConfigChannel+0x882>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80094ae:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80094b0:	e001      	b.n	80094b6 <HAL_ADCEx_InjectedConfigChannel+0x882>
    }
    
  }
 80094b2:	bf00      	nop
 80094b4:	e000      	b.n	80094b8 <HAL_ADCEx_InjectedConfigChannel+0x884>
      break;
 80094b6:	bf00      	nop
  
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	689b      	ldr	r3, [r3, #8]
 80094be:	f003 0303 	and.w	r3, r3, #3
 80094c2:	2b01      	cmp	r3, #1
 80094c4:	d108      	bne.n	80094d8 <HAL_ADCEx_InjectedConfigChannel+0x8a4>
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	f003 0301 	and.w	r3, r3, #1
 80094d0:	2b01      	cmp	r3, #1
 80094d2:	d101      	bne.n	80094d8 <HAL_ADCEx_InjectedConfigChannel+0x8a4>
 80094d4:	2301      	movs	r3, #1
 80094d6:	e000      	b.n	80094da <HAL_ADCEx_InjectedConfigChannel+0x8a6>
 80094d8:	2300      	movs	r3, #0
 80094da:	2b00      	cmp	r3, #0
 80094dc:	f040 8126 	bne.w	800972c <HAL_ADCEx_InjectedConfigChannel+0xaf8>
  {
    /* Configuration of differential mode */
    if (sConfigInjected->InjectedSingleDiff != ADC_DIFFERENTIAL_ENDED)
 80094e0:	683b      	ldr	r3, [r7, #0]
 80094e2:	68db      	ldr	r3, [r3, #12]
 80094e4:	2b01      	cmp	r3, #1
 80094e6:	d00f      	beq.n	8009508 <HAL_ADCEx_InjectedConfigChannel+0x8d4>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	2201      	movs	r2, #1
 80094f6:	fa02 f303 	lsl.w	r3, r2, r3
 80094fa:	43da      	mvns	r2, r3
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	400a      	ands	r2, r1
 8009502:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8009506:	e049      	b.n	800959c <HAL_ADCEx_InjectedConfigChannel+0x968>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8009510:	683b      	ldr	r3, [r7, #0]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	2201      	movs	r2, #1
 8009516:	409a      	lsls	r2, r3
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	430a      	orrs	r2, r1
 800951e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 8009522:	683b      	ldr	r3, [r7, #0]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	2b09      	cmp	r3, #9
 8009528:	d91c      	bls.n	8009564 <HAL_ADCEx_InjectedConfigChannel+0x930>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	6999      	ldr	r1, [r3, #24]
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	681a      	ldr	r2, [r3, #0]
 8009534:	4613      	mov	r3, r2
 8009536:	005b      	lsls	r3, r3, #1
 8009538:	4413      	add	r3, r2
 800953a:	3b1b      	subs	r3, #27
 800953c:	2207      	movs	r2, #7
 800953e:	fa02 f303 	lsl.w	r3, r2, r3
 8009542:	43db      	mvns	r3, r3
 8009544:	4019      	ands	r1, r3
 8009546:	683b      	ldr	r3, [r7, #0]
 8009548:	6898      	ldr	r0, [r3, #8]
 800954a:	683b      	ldr	r3, [r7, #0]
 800954c:	681a      	ldr	r2, [r3, #0]
 800954e:	4613      	mov	r3, r2
 8009550:	005b      	lsls	r3, r3, #1
 8009552:	4413      	add	r3, r2
 8009554:	3b1b      	subs	r3, #27
 8009556:	fa00 f203 	lsl.w	r2, r0, r3
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	430a      	orrs	r2, r1
 8009560:	619a      	str	r2, [r3, #24]
 8009562:	e01b      	b.n	800959c <HAL_ADCEx_InjectedConfigChannel+0x968>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfigInjected->InjectedChannel +1U),
                   ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	6959      	ldr	r1, [r3, #20]
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	1c5a      	adds	r2, r3, #1
 8009570:	4613      	mov	r3, r2
 8009572:	005b      	lsls	r3, r3, #1
 8009574:	4413      	add	r3, r2
 8009576:	2207      	movs	r2, #7
 8009578:	fa02 f303 	lsl.w	r3, r2, r3
 800957c:	43db      	mvns	r3, r3
 800957e:	4019      	ands	r1, r3
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	6898      	ldr	r0, [r3, #8]
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	1c5a      	adds	r2, r3, #1
 800958a:	4613      	mov	r3, r2
 800958c:	005b      	lsls	r3, r3, #1
 800958e:	4413      	add	r3, r2
 8009590:	fa00 f203 	lsl.w	r2, r0, r3
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	430a      	orrs	r2, r1
 800959a:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80095a4:	d004      	beq.n	80095b0 <HAL_ADCEx_InjectedConfigChannel+0x97c>
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	4a18      	ldr	r2, [pc, #96]	; (800960c <HAL_ADCEx_InjectedConfigChannel+0x9d8>)
 80095ac:	4293      	cmp	r3, r2
 80095ae:	d101      	bne.n	80095b4 <HAL_ADCEx_InjectedConfigChannel+0x980>
 80095b0:	4b17      	ldr	r3, [pc, #92]	; (8009610 <HAL_ADCEx_InjectedConfigChannel+0x9dc>)
 80095b2:	e000      	b.n	80095b6 <HAL_ADCEx_InjectedConfigChannel+0x982>
 80095b4:	4b17      	ldr	r3, [pc, #92]	; (8009614 <HAL_ADCEx_InjectedConfigChannel+0x9e0>)
 80095b6:	663b      	str	r3, [r7, #96]	; 0x60
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	2b10      	cmp	r3, #16
 80095be:	d105      	bne.n	80095cc <HAL_ADCEx_InjectedConfigChannel+0x998>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80095c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80095c2:	689b      	ldr	r3, [r3, #8]
 80095c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d015      	beq.n	80095f8 <HAL_ADCEx_InjectedConfigChannel+0x9c4>
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)       &&
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80095d0:	2b11      	cmp	r3, #17
 80095d2:	d105      	bne.n	80095e0 <HAL_ADCEx_InjectedConfigChannel+0x9ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80095d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80095d6:	689b      	ldr	r3, [r3, #8]
 80095d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)       &&
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d00b      	beq.n	80095f8 <HAL_ADCEx_InjectedConfigChannel+0x9c4>
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)    &&
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80095e4:	2b12      	cmp	r3, #18
 80095e6:	f040 80a1 	bne.w	800972c <HAL_ADCEx_InjectedConfigChannel+0xaf8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80095ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80095ec:	689b      	ldr	r3, [r3, #8]
 80095ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)    &&
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	f040 809a 	bne.w	800972c <HAL_ADCEx_InjectedConfigChannel+0xaf8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009600:	d10a      	bne.n	8009618 <HAL_ADCEx_InjectedConfigChannel+0x9e4>
 8009602:	4b02      	ldr	r3, [pc, #8]	; (800960c <HAL_ADCEx_InjectedConfigChannel+0x9d8>)
 8009604:	613b      	str	r3, [r7, #16]
 8009606:	e022      	b.n	800964e <HAL_ADCEx_InjectedConfigChannel+0xa1a>
 8009608:	83fff000 	.word	0x83fff000
 800960c:	50000100 	.word	0x50000100
 8009610:	50000300 	.word	0x50000300
 8009614:	50000700 	.word	0x50000700
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	4a48      	ldr	r2, [pc, #288]	; (8009740 <HAL_ADCEx_InjectedConfigChannel+0xb0c>)
 800961e:	4293      	cmp	r3, r2
 8009620:	d103      	bne.n	800962a <HAL_ADCEx_InjectedConfigChannel+0x9f6>
 8009622:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8009626:	613b      	str	r3, [r7, #16]
 8009628:	e011      	b.n	800964e <HAL_ADCEx_InjectedConfigChannel+0xa1a>
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	4a45      	ldr	r2, [pc, #276]	; (8009744 <HAL_ADCEx_InjectedConfigChannel+0xb10>)
 8009630:	4293      	cmp	r3, r2
 8009632:	d102      	bne.n	800963a <HAL_ADCEx_InjectedConfigChannel+0xa06>
 8009634:	4b44      	ldr	r3, [pc, #272]	; (8009748 <HAL_ADCEx_InjectedConfigChannel+0xb14>)
 8009636:	613b      	str	r3, [r7, #16]
 8009638:	e009      	b.n	800964e <HAL_ADCEx_InjectedConfigChannel+0xa1a>
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	4a42      	ldr	r2, [pc, #264]	; (8009748 <HAL_ADCEx_InjectedConfigChannel+0xb14>)
 8009640:	4293      	cmp	r3, r2
 8009642:	d102      	bne.n	800964a <HAL_ADCEx_InjectedConfigChannel+0xa16>
 8009644:	4b3f      	ldr	r3, [pc, #252]	; (8009744 <HAL_ADCEx_InjectedConfigChannel+0xb10>)
 8009646:	613b      	str	r3, [r7, #16]
 8009648:	e001      	b.n	800964e <HAL_ADCEx_InjectedConfigChannel+0xa1a>
 800964a:	2300      	movs	r3, #0
 800964c:	613b      	str	r3, [r7, #16]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	689b      	ldr	r3, [r3, #8]
 8009654:	f003 0303 	and.w	r3, r3, #3
 8009658:	2b01      	cmp	r3, #1
 800965a:	d108      	bne.n	800966e <HAL_ADCEx_InjectedConfigChannel+0xa3a>
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	f003 0301 	and.w	r3, r3, #1
 8009666:	2b01      	cmp	r3, #1
 8009668:	d101      	bne.n	800966e <HAL_ADCEx_InjectedConfigChannel+0xa3a>
 800966a:	2301      	movs	r3, #1
 800966c:	e000      	b.n	8009670 <HAL_ADCEx_InjectedConfigChannel+0xa3c>
 800966e:	2300      	movs	r3, #0
 8009670:	2b00      	cmp	r3, #0
 8009672:	d150      	bne.n	8009716 <HAL_ADCEx_InjectedConfigChannel+0xae2>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8009674:	693b      	ldr	r3, [r7, #16]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8009676:	2b00      	cmp	r3, #0
 8009678:	d010      	beq.n	800969c <HAL_ADCEx_InjectedConfigChannel+0xa68>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800967a:	693b      	ldr	r3, [r7, #16]
 800967c:	689b      	ldr	r3, [r3, #8]
 800967e:	f003 0303 	and.w	r3, r3, #3
 8009682:	2b01      	cmp	r3, #1
 8009684:	d107      	bne.n	8009696 <HAL_ADCEx_InjectedConfigChannel+0xa62>
 8009686:	693b      	ldr	r3, [r7, #16]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	f003 0301 	and.w	r3, r3, #1
 800968e:	2b01      	cmp	r3, #1
 8009690:	d101      	bne.n	8009696 <HAL_ADCEx_InjectedConfigChannel+0xa62>
 8009692:	2301      	movs	r3, #1
 8009694:	e000      	b.n	8009698 <HAL_ADCEx_InjectedConfigChannel+0xa64>
 8009696:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8009698:	2b00      	cmp	r3, #0
 800969a:	d13c      	bne.n	8009716 <HAL_ADCEx_InjectedConfigChannel+0xae2>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	2b10      	cmp	r3, #16
 80096a2:	d11d      	bne.n	80096e0 <HAL_ADCEx_InjectedConfigChannel+0xaac>
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80096ac:	d118      	bne.n	80096e0 <HAL_ADCEx_InjectedConfigChannel+0xaac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80096ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80096b0:	689b      	ldr	r3, [r3, #8]
 80096b2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80096b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80096b8:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80096ba:	4b24      	ldr	r3, [pc, #144]	; (800974c <HAL_ADCEx_InjectedConfigChannel+0xb18>)
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	4a24      	ldr	r2, [pc, #144]	; (8009750 <HAL_ADCEx_InjectedConfigChannel+0xb1c>)
 80096c0:	fba2 2303 	umull	r2, r3, r2, r3
 80096c4:	0c9a      	lsrs	r2, r3, #18
 80096c6:	4613      	mov	r3, r2
 80096c8:	009b      	lsls	r3, r3, #2
 80096ca:	4413      	add	r3, r2
 80096cc:	005b      	lsls	r3, r3, #1
 80096ce:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 80096d0:	e002      	b.n	80096d8 <HAL_ADCEx_InjectedConfigChannel+0xaa4>
          {
            wait_loop_index--;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	3b01      	subs	r3, #1
 80096d6:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d1f9      	bne.n	80096d2 <HAL_ADCEx_InjectedConfigChannel+0xa9e>
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80096de:	e024      	b.n	800972a <HAL_ADCEx_InjectedConfigChannel+0xaf6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	2b11      	cmp	r3, #17
 80096e6:	d10b      	bne.n	8009700 <HAL_ADCEx_InjectedConfigChannel+0xacc>
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80096f0:	d106      	bne.n	8009700 <HAL_ADCEx_InjectedConfigChannel+0xacc>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80096f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80096f4:	689b      	ldr	r3, [r3, #8]
 80096f6:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80096fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80096fc:	609a      	str	r2, [r3, #8]
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80096fe:	e014      	b.n	800972a <HAL_ADCEx_InjectedConfigChannel+0xaf6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8009700:	683b      	ldr	r3, [r7, #0]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	2b12      	cmp	r3, #18
 8009706:	d110      	bne.n	800972a <HAL_ADCEx_InjectedConfigChannel+0xaf6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8009708:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800970a:	689b      	ldr	r3, [r3, #8]
 800970c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8009710:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009712:	609a      	str	r2, [r3, #8]
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8009714:	e009      	b.n	800972a <HAL_ADCEx_InjectedConfigChannel+0xaf6>
      /* and other ADC of the common group are enabled, internal              */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800971a:	f043 0220 	orr.w	r2, r3, #32
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8009722:	2301      	movs	r3, #1
 8009724:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8009728:	e000      	b.n	800972c <HAL_ADCEx_InjectedConfigChannel+0xaf8>
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800972a:	bf00      	nop
    }
    
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	2200      	movs	r2, #0
 8009730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8009734:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8009738:	4618      	mov	r0, r3
 800973a:	3770      	adds	r7, #112	; 0x70
 800973c:	46bd      	mov	sp, r7
 800973e:	bd80      	pop	{r7, pc}
 8009740:	50000100 	.word	0x50000100
 8009744:	50000400 	.word	0x50000400
 8009748:	50000500 	.word	0x50000500
 800974c:	20000314 	.word	0x20000314
 8009750:	431bde83 	.word	0x431bde83

08009754 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b098      	sub	sp, #96	; 0x60
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
 800975c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800975e:	2300      	movs	r3, #0
 8009760:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  
  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800976c:	d009      	beq.n	8009782 <HAL_ADCEx_MultiModeConfigChannel+0x2e>
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	4a8c      	ldr	r2, [pc, #560]	; (80099a4 <HAL_ADCEx_MultiModeConfigChannel+0x250>)
 8009774:	4293      	cmp	r3, r2
 8009776:	d004      	beq.n	8009782 <HAL_ADCEx_MultiModeConfigChannel+0x2e>
 8009778:	f641 3194 	movw	r1, #7060	; 0x1b94
 800977c:	488a      	ldr	r0, [pc, #552]	; (80099a8 <HAL_ADCEx_MultiModeConfigChannel+0x254>)
 800977e:	f7fc fa08 	bl	8005b92 <assert_failed>
  assert_param(IS_ADC_MODE(multimode->Mode));
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d020      	beq.n	80097cc <HAL_ADCEx_MultiModeConfigChannel+0x78>
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	2b01      	cmp	r3, #1
 8009790:	d01c      	beq.n	80097cc <HAL_ADCEx_MultiModeConfigChannel+0x78>
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	2b02      	cmp	r3, #2
 8009798:	d018      	beq.n	80097cc <HAL_ADCEx_MultiModeConfigChannel+0x78>
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	2b03      	cmp	r3, #3
 80097a0:	d014      	beq.n	80097cc <HAL_ADCEx_MultiModeConfigChannel+0x78>
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	2b05      	cmp	r3, #5
 80097a8:	d010      	beq.n	80097cc <HAL_ADCEx_MultiModeConfigChannel+0x78>
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	2b06      	cmp	r3, #6
 80097b0:	d00c      	beq.n	80097cc <HAL_ADCEx_MultiModeConfigChannel+0x78>
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	2b07      	cmp	r3, #7
 80097b8:	d008      	beq.n	80097cc <HAL_ADCEx_MultiModeConfigChannel+0x78>
 80097ba:	683b      	ldr	r3, [r7, #0]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	2b09      	cmp	r3, #9
 80097c0:	d004      	beq.n	80097cc <HAL_ADCEx_MultiModeConfigChannel+0x78>
 80097c2:	f641 3195 	movw	r1, #7061	; 0x1b95
 80097c6:	4878      	ldr	r0, [pc, #480]	; (80099a8 <HAL_ADCEx_MultiModeConfigChannel+0x254>)
 80097c8:	f7fc f9e3 	bl	8005b92 <assert_failed>
  if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d052      	beq.n	800987a <HAL_ADCEx_MultiModeConfigChannel+0x126>
  {
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
 80097d4:	683b      	ldr	r3, [r7, #0]
 80097d6:	685b      	ldr	r3, [r3, #4]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d00e      	beq.n	80097fa <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	685b      	ldr	r3, [r3, #4]
 80097e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80097e4:	d009      	beq.n	80097fa <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	685b      	ldr	r3, [r3, #4]
 80097ea:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80097ee:	d004      	beq.n	80097fa <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 80097f0:	f641 3198 	movw	r1, #7064	; 0x1b98
 80097f4:	486c      	ldr	r0, [pc, #432]	; (80099a8 <HAL_ADCEx_MultiModeConfigChannel+0x254>)
 80097f6:	f7fc f9cc 	bl	8005b92 <assert_failed>
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	689b      	ldr	r3, [r3, #8]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d03b      	beq.n	800987a <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8009802:	683b      	ldr	r3, [r7, #0]
 8009804:	689b      	ldr	r3, [r3, #8]
 8009806:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800980a:	d036      	beq.n	800987a <HAL_ADCEx_MultiModeConfigChannel+0x126>
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	689b      	ldr	r3, [r3, #8]
 8009810:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009814:	d031      	beq.n	800987a <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	689b      	ldr	r3, [r3, #8]
 800981a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800981e:	d02c      	beq.n	800987a <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	689b      	ldr	r3, [r3, #8]
 8009824:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009828:	d027      	beq.n	800987a <HAL_ADCEx_MultiModeConfigChannel+0x126>
 800982a:	683b      	ldr	r3, [r7, #0]
 800982c:	689b      	ldr	r3, [r3, #8]
 800982e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8009832:	d022      	beq.n	800987a <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	689b      	ldr	r3, [r3, #8]
 8009838:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800983c:	d01d      	beq.n	800987a <HAL_ADCEx_MultiModeConfigChannel+0x126>
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	689b      	ldr	r3, [r3, #8]
 8009842:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009846:	d018      	beq.n	800987a <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	689b      	ldr	r3, [r3, #8]
 800984c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009850:	d013      	beq.n	800987a <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8009852:	683b      	ldr	r3, [r7, #0]
 8009854:	689b      	ldr	r3, [r3, #8]
 8009856:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 800985a:	d00e      	beq.n	800987a <HAL_ADCEx_MultiModeConfigChannel+0x126>
 800985c:	683b      	ldr	r3, [r7, #0]
 800985e:	689b      	ldr	r3, [r3, #8]
 8009860:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8009864:	d009      	beq.n	800987a <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	689b      	ldr	r3, [r3, #8]
 800986a:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 800986e:	d004      	beq.n	800987a <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8009870:	f641 3199 	movw	r1, #7065	; 0x1b99
 8009874:	484c      	ldr	r0, [pc, #304]	; (80099a8 <HAL_ADCEx_MultiModeConfigChannel+0x254>)
 8009876:	f7fc f98c 	bl	8005b92 <assert_failed>
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009882:	d102      	bne.n	800988a <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8009884:	4b49      	ldr	r3, [pc, #292]	; (80099ac <HAL_ADCEx_MultiModeConfigChannel+0x258>)
 8009886:	60bb      	str	r3, [r7, #8]
 8009888:	e01a      	b.n	80098c0 <HAL_ADCEx_MultiModeConfigChannel+0x16c>
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	4a47      	ldr	r2, [pc, #284]	; (80099ac <HAL_ADCEx_MultiModeConfigChannel+0x258>)
 8009890:	4293      	cmp	r3, r2
 8009892:	d103      	bne.n	800989c <HAL_ADCEx_MultiModeConfigChannel+0x148>
 8009894:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8009898:	60bb      	str	r3, [r7, #8]
 800989a:	e011      	b.n	80098c0 <HAL_ADCEx_MultiModeConfigChannel+0x16c>
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	4a40      	ldr	r2, [pc, #256]	; (80099a4 <HAL_ADCEx_MultiModeConfigChannel+0x250>)
 80098a2:	4293      	cmp	r3, r2
 80098a4:	d102      	bne.n	80098ac <HAL_ADCEx_MultiModeConfigChannel+0x158>
 80098a6:	4b42      	ldr	r3, [pc, #264]	; (80099b0 <HAL_ADCEx_MultiModeConfigChannel+0x25c>)
 80098a8:	60bb      	str	r3, [r7, #8]
 80098aa:	e009      	b.n	80098c0 <HAL_ADCEx_MultiModeConfigChannel+0x16c>
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	4a3f      	ldr	r2, [pc, #252]	; (80099b0 <HAL_ADCEx_MultiModeConfigChannel+0x25c>)
 80098b2:	4293      	cmp	r3, r2
 80098b4:	d102      	bne.n	80098bc <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80098b6:	4b3b      	ldr	r3, [pc, #236]	; (80099a4 <HAL_ADCEx_MultiModeConfigChannel+0x250>)
 80098b8:	60bb      	str	r3, [r7, #8]
 80098ba:	e001      	b.n	80098c0 <HAL_ADCEx_MultiModeConfigChannel+0x16c>
 80098bc:	2300      	movs	r3, #0
 80098be:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80098c0:	68bb      	ldr	r3, [r7, #8]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d101      	bne.n	80098ca <HAL_ADCEx_MultiModeConfigChannel+0x176>
  {
    /* Return function status */
    return HAL_ERROR;
 80098c6:	2301      	movs	r3, #1
 80098c8:	e0bc      	b.n	8009a44 <HAL_ADCEx_MultiModeConfigChannel+0x2f0>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80098d0:	2b01      	cmp	r3, #1
 80098d2:	d101      	bne.n	80098d8 <HAL_ADCEx_MultiModeConfigChannel+0x184>
 80098d4:	2302      	movs	r3, #2
 80098d6:	e0b5      	b.n	8009a44 <HAL_ADCEx_MultiModeConfigChannel+0x2f0>
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	2201      	movs	r2, #1
 80098dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	689b      	ldr	r3, [r3, #8]
 80098e6:	f003 0304 	and.w	r3, r3, #4
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	f040 8099 	bne.w	8009a22 <HAL_ADCEx_MultiModeConfigChannel+0x2ce>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80098f0:	68bb      	ldr	r3, [r7, #8]
 80098f2:	689b      	ldr	r3, [r3, #8]
 80098f4:	f003 0304 	and.w	r3, r3, #4
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	f040 8092 	bne.w	8009a22 <HAL_ADCEx_MultiModeConfigChannel+0x2ce>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009906:	d004      	beq.n	8009912 <HAL_ADCEx_MultiModeConfigChannel+0x1be>
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	4a27      	ldr	r2, [pc, #156]	; (80099ac <HAL_ADCEx_MultiModeConfigChannel+0x258>)
 800990e:	4293      	cmp	r3, r2
 8009910:	d101      	bne.n	8009916 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8009912:	4b28      	ldr	r3, [pc, #160]	; (80099b4 <HAL_ADCEx_MultiModeConfigChannel+0x260>)
 8009914:	e000      	b.n	8009918 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
 8009916:	4b28      	ldr	r3, [pc, #160]	; (80099b8 <HAL_ADCEx_MultiModeConfigChannel+0x264>)
 8009918:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800991a:	683b      	ldr	r3, [r7, #0]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d04c      	beq.n	80099bc <HAL_ADCEx_MultiModeConfigChannel+0x268>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8009922:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009924:	689b      	ldr	r3, [r3, #8]
 8009926:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800992a:	683b      	ldr	r3, [r7, #0]
 800992c:	6859      	ldr	r1, [r3, #4]
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009934:	035b      	lsls	r3, r3, #13
 8009936:	430b      	orrs	r3, r1
 8009938:	431a      	orrs	r2, r3
 800993a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800993c:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	689b      	ldr	r3, [r3, #8]
 8009944:	f003 0303 	and.w	r3, r3, #3
 8009948:	2b01      	cmp	r3, #1
 800994a:	d108      	bne.n	800995e <HAL_ADCEx_MultiModeConfigChannel+0x20a>
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	f003 0301 	and.w	r3, r3, #1
 8009956:	2b01      	cmp	r3, #1
 8009958:	d101      	bne.n	800995e <HAL_ADCEx_MultiModeConfigChannel+0x20a>
 800995a:	2301      	movs	r3, #1
 800995c:	e000      	b.n	8009960 <HAL_ADCEx_MultiModeConfigChannel+0x20c>
 800995e:	2300      	movs	r3, #0
 8009960:	2b00      	cmp	r3, #0
 8009962:	d168      	bne.n	8009a36 <HAL_ADCEx_MultiModeConfigChannel+0x2e2>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8009964:	68bb      	ldr	r3, [r7, #8]
 8009966:	689b      	ldr	r3, [r3, #8]
 8009968:	f003 0303 	and.w	r3, r3, #3
 800996c:	2b01      	cmp	r3, #1
 800996e:	d107      	bne.n	8009980 <HAL_ADCEx_MultiModeConfigChannel+0x22c>
 8009970:	68bb      	ldr	r3, [r7, #8]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	f003 0301 	and.w	r3, r3, #1
 8009978:	2b01      	cmp	r3, #1
 800997a:	d101      	bne.n	8009980 <HAL_ADCEx_MultiModeConfigChannel+0x22c>
 800997c:	2301      	movs	r3, #1
 800997e:	e000      	b.n	8009982 <HAL_ADCEx_MultiModeConfigChannel+0x22e>
 8009980:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8009982:	2b00      	cmp	r3, #0
 8009984:	d157      	bne.n	8009a36 <HAL_ADCEx_MultiModeConfigChannel+0x2e2>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8009986:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009988:	689b      	ldr	r3, [r3, #8]
 800998a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800998e:	f023 030f 	bic.w	r3, r3, #15
 8009992:	683a      	ldr	r2, [r7, #0]
 8009994:	6811      	ldr	r1, [r2, #0]
 8009996:	683a      	ldr	r2, [r7, #0]
 8009998:	6892      	ldr	r2, [r2, #8]
 800999a:	430a      	orrs	r2, r1
 800999c:	431a      	orrs	r2, r3
 800999e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80099a0:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80099a2:	e048      	b.n	8009a36 <HAL_ADCEx_MultiModeConfigChannel+0x2e2>
 80099a4:	50000400 	.word	0x50000400
 80099a8:	08034210 	.word	0x08034210
 80099ac:	50000100 	.word	0x50000100
 80099b0:	50000500 	.word	0x50000500
 80099b4:	50000300 	.word	0x50000300
 80099b8:	50000700 	.word	0x50000700
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80099bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80099be:	689b      	ldr	r3, [r3, #8]
 80099c0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80099c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80099c6:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	689b      	ldr	r3, [r3, #8]
 80099ce:	f003 0303 	and.w	r3, r3, #3
 80099d2:	2b01      	cmp	r3, #1
 80099d4:	d108      	bne.n	80099e8 <HAL_ADCEx_MultiModeConfigChannel+0x294>
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	f003 0301 	and.w	r3, r3, #1
 80099e0:	2b01      	cmp	r3, #1
 80099e2:	d101      	bne.n	80099e8 <HAL_ADCEx_MultiModeConfigChannel+0x294>
 80099e4:	2301      	movs	r3, #1
 80099e6:	e000      	b.n	80099ea <HAL_ADCEx_MultiModeConfigChannel+0x296>
 80099e8:	2300      	movs	r3, #0
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d123      	bne.n	8009a36 <HAL_ADCEx_MultiModeConfigChannel+0x2e2>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80099ee:	68bb      	ldr	r3, [r7, #8]
 80099f0:	689b      	ldr	r3, [r3, #8]
 80099f2:	f003 0303 	and.w	r3, r3, #3
 80099f6:	2b01      	cmp	r3, #1
 80099f8:	d107      	bne.n	8009a0a <HAL_ADCEx_MultiModeConfigChannel+0x2b6>
 80099fa:	68bb      	ldr	r3, [r7, #8]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	f003 0301 	and.w	r3, r3, #1
 8009a02:	2b01      	cmp	r3, #1
 8009a04:	d101      	bne.n	8009a0a <HAL_ADCEx_MultiModeConfigChannel+0x2b6>
 8009a06:	2301      	movs	r3, #1
 8009a08:	e000      	b.n	8009a0c <HAL_ADCEx_MultiModeConfigChannel+0x2b8>
 8009a0a:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d112      	bne.n	8009a36 <HAL_ADCEx_MultiModeConfigChannel+0x2e2>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8009a10:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009a12:	689b      	ldr	r3, [r3, #8]
 8009a14:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8009a18:	f023 030f 	bic.w	r3, r3, #15
 8009a1c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009a1e:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8009a20:	e009      	b.n	8009a36 <HAL_ADCEx_MultiModeConfigChannel+0x2e2>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a26:	f043 0220 	orr.w	r2, r3, #32
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8009a2e:	2301      	movs	r3, #1
 8009a30:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009a34:	e000      	b.n	8009a38 <HAL_ADCEx_MultiModeConfigChannel+0x2e4>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8009a36:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8009a40:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8009a44:	4618      	mov	r0, r3
 8009a46:	3760      	adds	r7, #96	; 0x60
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	bd80      	pop	{r7, pc}

08009a4c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b084      	sub	sp, #16
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009a54:	2300      	movs	r3, #0
 8009a56:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	689b      	ldr	r3, [r3, #8]
 8009a5e:	f003 0303 	and.w	r3, r3, #3
 8009a62:	2b01      	cmp	r3, #1
 8009a64:	d108      	bne.n	8009a78 <ADC_Disable+0x2c>
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	f003 0301 	and.w	r3, r3, #1
 8009a70:	2b01      	cmp	r3, #1
 8009a72:	d101      	bne.n	8009a78 <ADC_Disable+0x2c>
 8009a74:	2301      	movs	r3, #1
 8009a76:	e000      	b.n	8009a7a <ADC_Disable+0x2e>
 8009a78:	2300      	movs	r3, #0
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d047      	beq.n	8009b0e <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	689b      	ldr	r3, [r3, #8]
 8009a84:	f003 030d 	and.w	r3, r3, #13
 8009a88:	2b01      	cmp	r3, #1
 8009a8a:	d10f      	bne.n	8009aac <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	689a      	ldr	r2, [r3, #8]
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	f042 0202 	orr.w	r2, r2, #2
 8009a9a:	609a      	str	r2, [r3, #8]
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	2203      	movs	r2, #3
 8009aa2:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8009aa4:	f7fe f85c 	bl	8007b60 <HAL_GetTick>
 8009aa8:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8009aaa:	e029      	b.n	8009b00 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ab0:	f043 0210 	orr.w	r2, r3, #16
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009abc:	f043 0201 	orr.w	r2, r3, #1
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8009ac4:	2301      	movs	r3, #1
 8009ac6:	e023      	b.n	8009b10 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8009ac8:	f7fe f84a 	bl	8007b60 <HAL_GetTick>
 8009acc:	4602      	mov	r2, r0
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	1ad3      	subs	r3, r2, r3
 8009ad2:	2b02      	cmp	r3, #2
 8009ad4:	d914      	bls.n	8009b00 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	689b      	ldr	r3, [r3, #8]
 8009adc:	f003 0301 	and.w	r3, r3, #1
 8009ae0:	2b01      	cmp	r3, #1
 8009ae2:	d10d      	bne.n	8009b00 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ae8:	f043 0210 	orr.w	r2, r3, #16
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009af4:	f043 0201 	orr.w	r2, r3, #1
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8009afc:	2301      	movs	r3, #1
 8009afe:	e007      	b.n	8009b10 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	689b      	ldr	r3, [r3, #8]
 8009b06:	f003 0301 	and.w	r3, r3, #1
 8009b0a:	2b01      	cmp	r3, #1
 8009b0c:	d0dc      	beq.n	8009ac8 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8009b0e:	2300      	movs	r3, #0
}
 8009b10:	4618      	mov	r0, r3
 8009b12:	3710      	adds	r7, #16
 8009b14:	46bd      	mov	sp, r7
 8009b16:	bd80      	pop	{r7, pc}

08009b18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009b18:	b480      	push	{r7}
 8009b1a:	b085      	sub	sp, #20
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	f003 0307 	and.w	r3, r3, #7
 8009b26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009b28:	4b0c      	ldr	r3, [pc, #48]	; (8009b5c <__NVIC_SetPriorityGrouping+0x44>)
 8009b2a:	68db      	ldr	r3, [r3, #12]
 8009b2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009b2e:	68ba      	ldr	r2, [r7, #8]
 8009b30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009b34:	4013      	ands	r3, r2
 8009b36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009b3c:	68bb      	ldr	r3, [r7, #8]
 8009b3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009b40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009b44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009b4a:	4a04      	ldr	r2, [pc, #16]	; (8009b5c <__NVIC_SetPriorityGrouping+0x44>)
 8009b4c:	68bb      	ldr	r3, [r7, #8]
 8009b4e:	60d3      	str	r3, [r2, #12]
}
 8009b50:	bf00      	nop
 8009b52:	3714      	adds	r7, #20
 8009b54:	46bd      	mov	sp, r7
 8009b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5a:	4770      	bx	lr
 8009b5c:	e000ed00 	.word	0xe000ed00

08009b60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009b60:	b480      	push	{r7}
 8009b62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009b64:	4b04      	ldr	r3, [pc, #16]	; (8009b78 <__NVIC_GetPriorityGrouping+0x18>)
 8009b66:	68db      	ldr	r3, [r3, #12]
 8009b68:	0a1b      	lsrs	r3, r3, #8
 8009b6a:	f003 0307 	and.w	r3, r3, #7
}
 8009b6e:	4618      	mov	r0, r3
 8009b70:	46bd      	mov	sp, r7
 8009b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b76:	4770      	bx	lr
 8009b78:	e000ed00 	.word	0xe000ed00

08009b7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009b7c:	b480      	push	{r7}
 8009b7e:	b083      	sub	sp, #12
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	4603      	mov	r3, r0
 8009b84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	db0b      	blt.n	8009ba6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009b8e:	79fb      	ldrb	r3, [r7, #7]
 8009b90:	f003 021f 	and.w	r2, r3, #31
 8009b94:	4907      	ldr	r1, [pc, #28]	; (8009bb4 <__NVIC_EnableIRQ+0x38>)
 8009b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009b9a:	095b      	lsrs	r3, r3, #5
 8009b9c:	2001      	movs	r0, #1
 8009b9e:	fa00 f202 	lsl.w	r2, r0, r2
 8009ba2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8009ba6:	bf00      	nop
 8009ba8:	370c      	adds	r7, #12
 8009baa:	46bd      	mov	sp, r7
 8009bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb0:	4770      	bx	lr
 8009bb2:	bf00      	nop
 8009bb4:	e000e100 	.word	0xe000e100

08009bb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009bb8:	b480      	push	{r7}
 8009bba:	b083      	sub	sp, #12
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	4603      	mov	r3, r0
 8009bc0:	6039      	str	r1, [r7, #0]
 8009bc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009bc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	db0a      	blt.n	8009be2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009bcc:	683b      	ldr	r3, [r7, #0]
 8009bce:	b2da      	uxtb	r2, r3
 8009bd0:	490c      	ldr	r1, [pc, #48]	; (8009c04 <__NVIC_SetPriority+0x4c>)
 8009bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009bd6:	0112      	lsls	r2, r2, #4
 8009bd8:	b2d2      	uxtb	r2, r2
 8009bda:	440b      	add	r3, r1
 8009bdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009be0:	e00a      	b.n	8009bf8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	b2da      	uxtb	r2, r3
 8009be6:	4908      	ldr	r1, [pc, #32]	; (8009c08 <__NVIC_SetPriority+0x50>)
 8009be8:	79fb      	ldrb	r3, [r7, #7]
 8009bea:	f003 030f 	and.w	r3, r3, #15
 8009bee:	3b04      	subs	r3, #4
 8009bf0:	0112      	lsls	r2, r2, #4
 8009bf2:	b2d2      	uxtb	r2, r2
 8009bf4:	440b      	add	r3, r1
 8009bf6:	761a      	strb	r2, [r3, #24]
}
 8009bf8:	bf00      	nop
 8009bfa:	370c      	adds	r7, #12
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c02:	4770      	bx	lr
 8009c04:	e000e100 	.word	0xe000e100
 8009c08:	e000ed00 	.word	0xe000ed00

08009c0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009c0c:	b480      	push	{r7}
 8009c0e:	b089      	sub	sp, #36	; 0x24
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	60f8      	str	r0, [r7, #12]
 8009c14:	60b9      	str	r1, [r7, #8]
 8009c16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	f003 0307 	and.w	r3, r3, #7
 8009c1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009c20:	69fb      	ldr	r3, [r7, #28]
 8009c22:	f1c3 0307 	rsb	r3, r3, #7
 8009c26:	2b04      	cmp	r3, #4
 8009c28:	bf28      	it	cs
 8009c2a:	2304      	movcs	r3, #4
 8009c2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009c2e:	69fb      	ldr	r3, [r7, #28]
 8009c30:	3304      	adds	r3, #4
 8009c32:	2b06      	cmp	r3, #6
 8009c34:	d902      	bls.n	8009c3c <NVIC_EncodePriority+0x30>
 8009c36:	69fb      	ldr	r3, [r7, #28]
 8009c38:	3b03      	subs	r3, #3
 8009c3a:	e000      	b.n	8009c3e <NVIC_EncodePriority+0x32>
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009c40:	f04f 32ff 	mov.w	r2, #4294967295
 8009c44:	69bb      	ldr	r3, [r7, #24]
 8009c46:	fa02 f303 	lsl.w	r3, r2, r3
 8009c4a:	43da      	mvns	r2, r3
 8009c4c:	68bb      	ldr	r3, [r7, #8]
 8009c4e:	401a      	ands	r2, r3
 8009c50:	697b      	ldr	r3, [r7, #20]
 8009c52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009c54:	f04f 31ff 	mov.w	r1, #4294967295
 8009c58:	697b      	ldr	r3, [r7, #20]
 8009c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8009c5e:	43d9      	mvns	r1, r3
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009c64:	4313      	orrs	r3, r2
         );
}
 8009c66:	4618      	mov	r0, r3
 8009c68:	3724      	adds	r7, #36	; 0x24
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c70:	4770      	bx	lr
	...

08009c74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b082      	sub	sp, #8
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	3b01      	subs	r3, #1
 8009c80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009c84:	d301      	bcc.n	8009c8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009c86:	2301      	movs	r3, #1
 8009c88:	e00f      	b.n	8009caa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009c8a:	4a0a      	ldr	r2, [pc, #40]	; (8009cb4 <SysTick_Config+0x40>)
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	3b01      	subs	r3, #1
 8009c90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009c92:	210f      	movs	r1, #15
 8009c94:	f04f 30ff 	mov.w	r0, #4294967295
 8009c98:	f7ff ff8e 	bl	8009bb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009c9c:	4b05      	ldr	r3, [pc, #20]	; (8009cb4 <SysTick_Config+0x40>)
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009ca2:	4b04      	ldr	r3, [pc, #16]	; (8009cb4 <SysTick_Config+0x40>)
 8009ca4:	2207      	movs	r2, #7
 8009ca6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009ca8:	2300      	movs	r3, #0
}
 8009caa:	4618      	mov	r0, r3
 8009cac:	3708      	adds	r7, #8
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	bd80      	pop	{r7, pc}
 8009cb2:	bf00      	nop
 8009cb4:	e000e010 	.word	0xe000e010

08009cb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b082      	sub	sp, #8
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	2b07      	cmp	r3, #7
 8009cc4:	d00f      	beq.n	8009ce6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	2b06      	cmp	r3, #6
 8009cca:	d00c      	beq.n	8009ce6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2b05      	cmp	r3, #5
 8009cd0:	d009      	beq.n	8009ce6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	2b04      	cmp	r3, #4
 8009cd6:	d006      	beq.n	8009ce6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2b03      	cmp	r3, #3
 8009cdc:	d003      	beq.n	8009ce6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8009cde:	21ac      	movs	r1, #172	; 0xac
 8009ce0:	4804      	ldr	r0, [pc, #16]	; (8009cf4 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8009ce2:	f7fb ff56 	bl	8005b92 <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009ce6:	6878      	ldr	r0, [r7, #4]
 8009ce8:	f7ff ff16 	bl	8009b18 <__NVIC_SetPriorityGrouping>
}
 8009cec:	bf00      	nop
 8009cee:	3708      	adds	r7, #8
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	bd80      	pop	{r7, pc}
 8009cf4:	0803424c 	.word	0x0803424c

08009cf8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b086      	sub	sp, #24
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	4603      	mov	r3, r0
 8009d00:	60b9      	str	r1, [r7, #8]
 8009d02:	607a      	str	r2, [r7, #4]
 8009d04:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009d06:	2300      	movs	r3, #0
 8009d08:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	2b0f      	cmp	r3, #15
 8009d0e:	d903      	bls.n	8009d18 <HAL_NVIC_SetPriority+0x20>
 8009d10:	21c4      	movs	r1, #196	; 0xc4
 8009d12:	480e      	ldr	r0, [pc, #56]	; (8009d4c <HAL_NVIC_SetPriority+0x54>)
 8009d14:	f7fb ff3d 	bl	8005b92 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8009d18:	68bb      	ldr	r3, [r7, #8]
 8009d1a:	2b0f      	cmp	r3, #15
 8009d1c:	d903      	bls.n	8009d26 <HAL_NVIC_SetPriority+0x2e>
 8009d1e:	21c5      	movs	r1, #197	; 0xc5
 8009d20:	480a      	ldr	r0, [pc, #40]	; (8009d4c <HAL_NVIC_SetPriority+0x54>)
 8009d22:	f7fb ff36 	bl	8005b92 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009d26:	f7ff ff1b 	bl	8009b60 <__NVIC_GetPriorityGrouping>
 8009d2a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009d2c:	687a      	ldr	r2, [r7, #4]
 8009d2e:	68b9      	ldr	r1, [r7, #8]
 8009d30:	6978      	ldr	r0, [r7, #20]
 8009d32:	f7ff ff6b 	bl	8009c0c <NVIC_EncodePriority>
 8009d36:	4602      	mov	r2, r0
 8009d38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009d3c:	4611      	mov	r1, r2
 8009d3e:	4618      	mov	r0, r3
 8009d40:	f7ff ff3a 	bl	8009bb8 <__NVIC_SetPriority>
}
 8009d44:	bf00      	nop
 8009d46:	3718      	adds	r7, #24
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	bd80      	pop	{r7, pc}
 8009d4c:	0803424c 	.word	0x0803424c

08009d50 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b082      	sub	sp, #8
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	4603      	mov	r3, r0
 8009d58:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8009d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	da03      	bge.n	8009d6a <HAL_NVIC_EnableIRQ+0x1a>
 8009d62:	21d8      	movs	r1, #216	; 0xd8
 8009d64:	4805      	ldr	r0, [pc, #20]	; (8009d7c <HAL_NVIC_EnableIRQ+0x2c>)
 8009d66:	f7fb ff14 	bl	8005b92 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d6e:	4618      	mov	r0, r3
 8009d70:	f7ff ff04 	bl	8009b7c <__NVIC_EnableIRQ>
}
 8009d74:	bf00      	nop
 8009d76:	3708      	adds	r7, #8
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	bd80      	pop	{r7, pc}
 8009d7c:	0803424c 	.word	0x0803424c

08009d80 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b082      	sub	sp, #8
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009d88:	6878      	ldr	r0, [r7, #4]
 8009d8a:	f7ff ff73 	bl	8009c74 <SysTick_Config>
 8009d8e:	4603      	mov	r3, r0
}
 8009d90:	4618      	mov	r0, r3
 8009d92:	3708      	adds	r7, #8
 8009d94:	46bd      	mov	sp, r7
 8009d96:	bd80      	pop	{r7, pc}

08009d98 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b082      	sub	sp, #8
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d101      	bne.n	8009daa <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8009da6:	2301      	movs	r3, #1
 8009da8:	e0a5      	b.n	8009ef6 <HAL_CRC_Init+0x15e>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	4a54      	ldr	r2, [pc, #336]	; (8009f00 <HAL_CRC_Init+0x168>)
 8009db0:	4293      	cmp	r3, r2
 8009db2:	d003      	beq.n	8009dbc <HAL_CRC_Init+0x24>
 8009db4:	2170      	movs	r1, #112	; 0x70
 8009db6:	4853      	ldr	r0, [pc, #332]	; (8009f04 <HAL_CRC_Init+0x16c>)
 8009db8:	f7fb feeb 	bl	8005b92 <assert_failed>

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	7f5b      	ldrb	r3, [r3, #29]
 8009dc0:	b2db      	uxtb	r3, r3
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d105      	bne.n	8009dd2 <HAL_CRC_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	2200      	movs	r2, #0
 8009dca:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8009dcc:	6878      	ldr	r0, [r7, #4]
 8009dce:	f7f7 fa51 	bl	8001274 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	2202      	movs	r2, #2
 8009dd6:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	791b      	ldrb	r3, [r3, #4]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d007      	beq.n	8009df0 <HAL_CRC_Init+0x58>
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	791b      	ldrb	r3, [r3, #4]
 8009de4:	2b01      	cmp	r3, #1
 8009de6:	d003      	beq.n	8009df0 <HAL_CRC_Init+0x58>
 8009de8:	217e      	movs	r1, #126	; 0x7e
 8009dea:	4846      	ldr	r0, [pc, #280]	; (8009f04 <HAL_CRC_Init+0x16c>)
 8009dec:	f7fb fed1 	bl	8005b92 <assert_failed>
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	791b      	ldrb	r3, [r3, #4]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d10c      	bne.n	8009e12 <HAL_CRC_Init+0x7a>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	4a42      	ldr	r2, [pc, #264]	; (8009f08 <HAL_CRC_Init+0x170>)
 8009dfe:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	689a      	ldr	r2, [r3, #8]
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	f022 0218 	bic.w	r2, r2, #24
 8009e0e:	609a      	str	r2, [r3, #8]
 8009e10:	e00c      	b.n	8009e2c <HAL_CRC_Init+0x94>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	6899      	ldr	r1, [r3, #8]
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	68db      	ldr	r3, [r3, #12]
 8009e1a:	461a      	mov	r2, r3
 8009e1c:	6878      	ldr	r0, [r7, #4]
 8009e1e:	f000 f875 	bl	8009f0c <HAL_CRCEx_Polynomial_Set>
 8009e22:	4603      	mov	r3, r0
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d001      	beq.n	8009e2c <HAL_CRC_Init+0x94>
    {
      return HAL_ERROR;
 8009e28:	2301      	movs	r3, #1
 8009e2a:	e064      	b.n	8009ef6 <HAL_CRC_Init+0x15e>
    }
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	795b      	ldrb	r3, [r3, #5]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d007      	beq.n	8009e44 <HAL_CRC_Init+0xac>
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	795b      	ldrb	r3, [r3, #5]
 8009e38:	2b01      	cmp	r3, #1
 8009e3a:	d003      	beq.n	8009e44 <HAL_CRC_Init+0xac>
 8009e3c:	2190      	movs	r1, #144	; 0x90
 8009e3e:	4831      	ldr	r0, [pc, #196]	; (8009f04 <HAL_CRC_Init+0x16c>)
 8009e40:	f7fb fea7 	bl	8005b92 <assert_failed>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	795b      	ldrb	r3, [r3, #5]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d105      	bne.n	8009e58 <HAL_CRC_Init+0xc0>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	f04f 32ff 	mov.w	r2, #4294967295
 8009e54:	611a      	str	r2, [r3, #16]
 8009e56:	e004      	b.n	8009e62 <HAL_CRC_Init+0xca>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	687a      	ldr	r2, [r7, #4]
 8009e5e:	6912      	ldr	r2, [r2, #16]
 8009e60:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	695b      	ldr	r3, [r3, #20]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d00f      	beq.n	8009e8a <HAL_CRC_Init+0xf2>
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	695b      	ldr	r3, [r3, #20]
 8009e6e:	2b20      	cmp	r3, #32
 8009e70:	d00b      	beq.n	8009e8a <HAL_CRC_Init+0xf2>
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	695b      	ldr	r3, [r3, #20]
 8009e76:	2b40      	cmp	r3, #64	; 0x40
 8009e78:	d007      	beq.n	8009e8a <HAL_CRC_Init+0xf2>
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	695b      	ldr	r3, [r3, #20]
 8009e7e:	2b60      	cmp	r3, #96	; 0x60
 8009e80:	d003      	beq.n	8009e8a <HAL_CRC_Init+0xf2>
 8009e82:	219c      	movs	r1, #156	; 0x9c
 8009e84:	481f      	ldr	r0, [pc, #124]	; (8009f04 <HAL_CRC_Init+0x16c>)
 8009e86:	f7fb fe84 	bl	8005b92 <assert_failed>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	689b      	ldr	r3, [r3, #8]
 8009e90:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	695a      	ldr	r2, [r3, #20]
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	430a      	orrs	r2, r1
 8009e9e:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	699b      	ldr	r3, [r3, #24]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d007      	beq.n	8009eb8 <HAL_CRC_Init+0x120>
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	699b      	ldr	r3, [r3, #24]
 8009eac:	2b80      	cmp	r3, #128	; 0x80
 8009eae:	d003      	beq.n	8009eb8 <HAL_CRC_Init+0x120>
 8009eb0:	21a0      	movs	r1, #160	; 0xa0
 8009eb2:	4814      	ldr	r0, [pc, #80]	; (8009f04 <HAL_CRC_Init+0x16c>)
 8009eb4:	f7fb fe6d 	bl	8005b92 <assert_failed>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	689b      	ldr	r3, [r3, #8]
 8009ebe:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	699a      	ldr	r2, [r3, #24]
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	430a      	orrs	r2, r1
 8009ecc:	609a      	str	r2, [r3, #8]

  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	6a1b      	ldr	r3, [r3, #32]
 8009ed2:	2b01      	cmp	r3, #1
 8009ed4:	d00b      	beq.n	8009eee <HAL_CRC_Init+0x156>
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	6a1b      	ldr	r3, [r3, #32]
 8009eda:	2b02      	cmp	r3, #2
 8009edc:	d007      	beq.n	8009eee <HAL_CRC_Init+0x156>
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	6a1b      	ldr	r3, [r3, #32]
 8009ee2:	2b03      	cmp	r3, #3
 8009ee4:	d003      	beq.n	8009eee <HAL_CRC_Init+0x156>
 8009ee6:	21a5      	movs	r1, #165	; 0xa5
 8009ee8:	4806      	ldr	r0, [pc, #24]	; (8009f04 <HAL_CRC_Init+0x16c>)
 8009eea:	f7fb fe52 	bl	8005b92 <assert_failed>

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	2201      	movs	r2, #1
 8009ef2:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8009ef4:	2300      	movs	r3, #0
}
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	3708      	adds	r7, #8
 8009efa:	46bd      	mov	sp, r7
 8009efc:	bd80      	pop	{r7, pc}
 8009efe:	bf00      	nop
 8009f00:	40023000 	.word	0x40023000
 8009f04:	08034288 	.word	0x08034288
 8009f08:	04c11db7 	.word	0x04c11db7

08009f0c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b086      	sub	sp, #24
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	60f8      	str	r0, [r7, #12]
 8009f14:	60b9      	str	r1, [r7, #8]
 8009f16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009f18:	2300      	movs	r3, #0
 8009f1a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8009f1c:	231f      	movs	r3, #31
 8009f1e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d00c      	beq.n	8009f40 <HAL_CRCEx_Polynomial_Set+0x34>
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	2b08      	cmp	r3, #8
 8009f2a:	d009      	beq.n	8009f40 <HAL_CRCEx_Polynomial_Set+0x34>
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2b10      	cmp	r3, #16
 8009f30:	d006      	beq.n	8009f40 <HAL_CRCEx_Polynomial_Set+0x34>
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	2b18      	cmp	r3, #24
 8009f36:	d003      	beq.n	8009f40 <HAL_CRCEx_Polynomial_Set+0x34>
 8009f38:	215f      	movs	r1, #95	; 0x5f
 8009f3a:	483e      	ldr	r0, [pc, #248]	; (800a034 <HAL_CRCEx_Polynomial_Set+0x128>)
 8009f3c:	f7fb fe29 	bl	8005b92 <assert_failed>
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8009f40:	bf00      	nop
 8009f42:	693b      	ldr	r3, [r7, #16]
 8009f44:	1e5a      	subs	r2, r3, #1
 8009f46:	613a      	str	r2, [r7, #16]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d009      	beq.n	8009f60 <HAL_CRCEx_Polynomial_Set+0x54>
 8009f4c:	693b      	ldr	r3, [r7, #16]
 8009f4e:	f003 031f 	and.w	r3, r3, #31
 8009f52:	68ba      	ldr	r2, [r7, #8]
 8009f54:	fa22 f303 	lsr.w	r3, r2, r3
 8009f58:	f003 0301 	and.w	r3, r3, #1
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d0f0      	beq.n	8009f42 <HAL_CRCEx_Polynomial_Set+0x36>
  {
  }

  switch (PolyLength)
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2b18      	cmp	r3, #24
 8009f64:	d846      	bhi.n	8009ff4 <HAL_CRCEx_Polynomial_Set+0xe8>
 8009f66:	a201      	add	r2, pc, #4	; (adr r2, 8009f6c <HAL_CRCEx_Polynomial_Set+0x60>)
 8009f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f6c:	08009ffb 	.word	0x08009ffb
 8009f70:	08009ff5 	.word	0x08009ff5
 8009f74:	08009ff5 	.word	0x08009ff5
 8009f78:	08009ff5 	.word	0x08009ff5
 8009f7c:	08009ff5 	.word	0x08009ff5
 8009f80:	08009ff5 	.word	0x08009ff5
 8009f84:	08009ff5 	.word	0x08009ff5
 8009f88:	08009ff5 	.word	0x08009ff5
 8009f8c:	08009fe9 	.word	0x08009fe9
 8009f90:	08009ff5 	.word	0x08009ff5
 8009f94:	08009ff5 	.word	0x08009ff5
 8009f98:	08009ff5 	.word	0x08009ff5
 8009f9c:	08009ff5 	.word	0x08009ff5
 8009fa0:	08009ff5 	.word	0x08009ff5
 8009fa4:	08009ff5 	.word	0x08009ff5
 8009fa8:	08009ff5 	.word	0x08009ff5
 8009fac:	08009fdd 	.word	0x08009fdd
 8009fb0:	08009ff5 	.word	0x08009ff5
 8009fb4:	08009ff5 	.word	0x08009ff5
 8009fb8:	08009ff5 	.word	0x08009ff5
 8009fbc:	08009ff5 	.word	0x08009ff5
 8009fc0:	08009ff5 	.word	0x08009ff5
 8009fc4:	08009ff5 	.word	0x08009ff5
 8009fc8:	08009ff5 	.word	0x08009ff5
 8009fcc:	08009fd1 	.word	0x08009fd1
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8009fd0:	693b      	ldr	r3, [r7, #16]
 8009fd2:	2b06      	cmp	r3, #6
 8009fd4:	d913      	bls.n	8009ffe <HAL_CRCEx_Polynomial_Set+0xf2>
      {
        status =   HAL_ERROR;
 8009fd6:	2301      	movs	r3, #1
 8009fd8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8009fda:	e010      	b.n	8009ffe <HAL_CRCEx_Polynomial_Set+0xf2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8009fdc:	693b      	ldr	r3, [r7, #16]
 8009fde:	2b07      	cmp	r3, #7
 8009fe0:	d90f      	bls.n	800a002 <HAL_CRCEx_Polynomial_Set+0xf6>
      {
        status =   HAL_ERROR;
 8009fe2:	2301      	movs	r3, #1
 8009fe4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8009fe6:	e00c      	b.n	800a002 <HAL_CRCEx_Polynomial_Set+0xf6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8009fe8:	693b      	ldr	r3, [r7, #16]
 8009fea:	2b0f      	cmp	r3, #15
 8009fec:	d90b      	bls.n	800a006 <HAL_CRCEx_Polynomial_Set+0xfa>
      {
        status =   HAL_ERROR;
 8009fee:	2301      	movs	r3, #1
 8009ff0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8009ff2:	e008      	b.n	800a006 <HAL_CRCEx_Polynomial_Set+0xfa>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8009ff4:	2301      	movs	r3, #1
 8009ff6:	75fb      	strb	r3, [r7, #23]
      break;
 8009ff8:	e006      	b.n	800a008 <HAL_CRCEx_Polynomial_Set+0xfc>
      break;
 8009ffa:	bf00      	nop
 8009ffc:	e004      	b.n	800a008 <HAL_CRCEx_Polynomial_Set+0xfc>
      break;
 8009ffe:	bf00      	nop
 800a000:	e002      	b.n	800a008 <HAL_CRCEx_Polynomial_Set+0xfc>
      break;
 800a002:	bf00      	nop
 800a004:	e000      	b.n	800a008 <HAL_CRCEx_Polynomial_Set+0xfc>
      break;
 800a006:	bf00      	nop
  }
  if (status == HAL_OK)
 800a008:	7dfb      	ldrb	r3, [r7, #23]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d10d      	bne.n	800a02a <HAL_CRCEx_Polynomial_Set+0x11e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	68ba      	ldr	r2, [r7, #8]
 800a014:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	689b      	ldr	r3, [r3, #8]
 800a01c:	f023 0118 	bic.w	r1, r3, #24
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	687a      	ldr	r2, [r7, #4]
 800a026:	430a      	orrs	r2, r1
 800a028:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800a02a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a02c:	4618      	mov	r0, r3
 800a02e:	3718      	adds	r7, #24
 800a030:	46bd      	mov	sp, r7
 800a032:	bd80      	pop	{r7, pc}
 800a034:	080342c0 	.word	0x080342c0

0800a038 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b086      	sub	sp, #24
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
 800a040:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800a042:	2300      	movs	r3, #0
 800a044:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800a04c:	d017      	beq.n	800a07e <HAL_GPIO_Init+0x46>
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	4a36      	ldr	r2, [pc, #216]	; (800a12c <HAL_GPIO_Init+0xf4>)
 800a052:	4293      	cmp	r3, r2
 800a054:	d013      	beq.n	800a07e <HAL_GPIO_Init+0x46>
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	4a35      	ldr	r2, [pc, #212]	; (800a130 <HAL_GPIO_Init+0xf8>)
 800a05a:	4293      	cmp	r3, r2
 800a05c:	d00f      	beq.n	800a07e <HAL_GPIO_Init+0x46>
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	4a34      	ldr	r2, [pc, #208]	; (800a134 <HAL_GPIO_Init+0xfc>)
 800a062:	4293      	cmp	r3, r2
 800a064:	d00b      	beq.n	800a07e <HAL_GPIO_Init+0x46>
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	4a33      	ldr	r2, [pc, #204]	; (800a138 <HAL_GPIO_Init+0x100>)
 800a06a:	4293      	cmp	r3, r2
 800a06c:	d007      	beq.n	800a07e <HAL_GPIO_Init+0x46>
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	4a32      	ldr	r2, [pc, #200]	; (800a13c <HAL_GPIO_Init+0x104>)
 800a072:	4293      	cmp	r3, r2
 800a074:	d003      	beq.n	800a07e <HAL_GPIO_Init+0x46>
 800a076:	21b2      	movs	r1, #178	; 0xb2
 800a078:	4831      	ldr	r0, [pc, #196]	; (800a140 <HAL_GPIO_Init+0x108>)
 800a07a:	f7fb fd8a 	bl	8005b92 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	b29b      	uxth	r3, r3
 800a084:	2b00      	cmp	r3, #0
 800a086:	d005      	beq.n	800a094 <HAL_GPIO_Init+0x5c>
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	0c1b      	lsrs	r3, r3, #16
 800a08e:	041b      	lsls	r3, r3, #16
 800a090:	2b00      	cmp	r3, #0
 800a092:	d003      	beq.n	800a09c <HAL_GPIO_Init+0x64>
 800a094:	21b3      	movs	r1, #179	; 0xb3
 800a096:	482a      	ldr	r0, [pc, #168]	; (800a140 <HAL_GPIO_Init+0x108>)
 800a098:	f7fb fd7b 	bl	8005b92 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	685b      	ldr	r3, [r3, #4]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	f000 8200 	beq.w	800a4a6 <HAL_GPIO_Init+0x46e>
 800a0a6:	683b      	ldr	r3, [r7, #0]
 800a0a8:	685b      	ldr	r3, [r3, #4]
 800a0aa:	2b01      	cmp	r3, #1
 800a0ac:	f000 81fb 	beq.w	800a4a6 <HAL_GPIO_Init+0x46e>
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	685b      	ldr	r3, [r3, #4]
 800a0b4:	2b11      	cmp	r3, #17
 800a0b6:	f000 81f6 	beq.w	800a4a6 <HAL_GPIO_Init+0x46e>
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	685b      	ldr	r3, [r3, #4]
 800a0be:	2b02      	cmp	r3, #2
 800a0c0:	f000 81f1 	beq.w	800a4a6 <HAL_GPIO_Init+0x46e>
 800a0c4:	683b      	ldr	r3, [r7, #0]
 800a0c6:	685b      	ldr	r3, [r3, #4]
 800a0c8:	2b12      	cmp	r3, #18
 800a0ca:	f000 81ec 	beq.w	800a4a6 <HAL_GPIO_Init+0x46e>
 800a0ce:	683b      	ldr	r3, [r7, #0]
 800a0d0:	685b      	ldr	r3, [r3, #4]
 800a0d2:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 800a0d6:	f000 81e6 	beq.w	800a4a6 <HAL_GPIO_Init+0x46e>
 800a0da:	683b      	ldr	r3, [r7, #0]
 800a0dc:	685b      	ldr	r3, [r3, #4]
 800a0de:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 800a0e2:	f000 81e0 	beq.w	800a4a6 <HAL_GPIO_Init+0x46e>
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	685b      	ldr	r3, [r3, #4]
 800a0ea:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 800a0ee:	f000 81da 	beq.w	800a4a6 <HAL_GPIO_Init+0x46e>
 800a0f2:	683b      	ldr	r3, [r7, #0]
 800a0f4:	685b      	ldr	r3, [r3, #4]
 800a0f6:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 800a0fa:	f000 81d4 	beq.w	800a4a6 <HAL_GPIO_Init+0x46e>
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	685b      	ldr	r3, [r3, #4]
 800a102:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 800a106:	f000 81ce 	beq.w	800a4a6 <HAL_GPIO_Init+0x46e>
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	685b      	ldr	r3, [r3, #4]
 800a10e:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 800a112:	f000 81c8 	beq.w	800a4a6 <HAL_GPIO_Init+0x46e>
 800a116:	683b      	ldr	r3, [r7, #0]
 800a118:	685b      	ldr	r3, [r3, #4]
 800a11a:	2b03      	cmp	r3, #3
 800a11c:	f000 81c3 	beq.w	800a4a6 <HAL_GPIO_Init+0x46e>
 800a120:	21b4      	movs	r1, #180	; 0xb4
 800a122:	4807      	ldr	r0, [pc, #28]	; (800a140 <HAL_GPIO_Init+0x108>)
 800a124:	f7fb fd35 	bl	8005b92 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a128:	e1bd      	b.n	800a4a6 <HAL_GPIO_Init+0x46e>
 800a12a:	bf00      	nop
 800a12c:	48000400 	.word	0x48000400
 800a130:	48000800 	.word	0x48000800
 800a134:	48000c00 	.word	0x48000c00
 800a138:	48001000 	.word	0x48001000
 800a13c:	48001400 	.word	0x48001400
 800a140:	080342fc 	.word	0x080342fc
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800a144:	683b      	ldr	r3, [r7, #0]
 800a146:	681a      	ldr	r2, [r3, #0]
 800a148:	2101      	movs	r1, #1
 800a14a:	697b      	ldr	r3, [r7, #20]
 800a14c:	fa01 f303 	lsl.w	r3, r1, r3
 800a150:	4013      	ands	r3, r2
 800a152:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	2b00      	cmp	r3, #0
 800a158:	f000 81a2 	beq.w	800a4a0 <HAL_GPIO_Init+0x468>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a15c:	683b      	ldr	r3, [r7, #0]
 800a15e:	685b      	ldr	r3, [r3, #4]
 800a160:	f003 0303 	and.w	r3, r3, #3
 800a164:	2b01      	cmp	r3, #1
 800a166:	d005      	beq.n	800a174 <HAL_GPIO_Init+0x13c>
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	685b      	ldr	r3, [r3, #4]
 800a16c:	f003 0303 	and.w	r3, r3, #3
 800a170:	2b02      	cmp	r3, #2
 800a172:	d140      	bne.n	800a1f6 <HAL_GPIO_Init+0x1be>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800a174:	683b      	ldr	r3, [r7, #0]
 800a176:	68db      	ldr	r3, [r3, #12]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d00b      	beq.n	800a194 <HAL_GPIO_Init+0x15c>
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	68db      	ldr	r3, [r3, #12]
 800a180:	2b01      	cmp	r3, #1
 800a182:	d007      	beq.n	800a194 <HAL_GPIO_Init+0x15c>
 800a184:	683b      	ldr	r3, [r7, #0]
 800a186:	68db      	ldr	r3, [r3, #12]
 800a188:	2b03      	cmp	r3, #3
 800a18a:	d003      	beq.n	800a194 <HAL_GPIO_Init+0x15c>
 800a18c:	21c3      	movs	r1, #195	; 0xc3
 800a18e:	488a      	ldr	r0, [pc, #552]	; (800a3b8 <HAL_GPIO_Init+0x380>)
 800a190:	f7fb fcff 	bl	8005b92 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	689b      	ldr	r3, [r3, #8]
 800a198:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800a19a:	697b      	ldr	r3, [r7, #20]
 800a19c:	005b      	lsls	r3, r3, #1
 800a19e:	2203      	movs	r2, #3
 800a1a0:	fa02 f303 	lsl.w	r3, r2, r3
 800a1a4:	43db      	mvns	r3, r3
 800a1a6:	693a      	ldr	r2, [r7, #16]
 800a1a8:	4013      	ands	r3, r2
 800a1aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800a1ac:	683b      	ldr	r3, [r7, #0]
 800a1ae:	68da      	ldr	r2, [r3, #12]
 800a1b0:	697b      	ldr	r3, [r7, #20]
 800a1b2:	005b      	lsls	r3, r3, #1
 800a1b4:	fa02 f303 	lsl.w	r3, r2, r3
 800a1b8:	693a      	ldr	r2, [r7, #16]
 800a1ba:	4313      	orrs	r3, r2
 800a1bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	693a      	ldr	r2, [r7, #16]
 800a1c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	685b      	ldr	r3, [r3, #4]
 800a1c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800a1ca:	2201      	movs	r2, #1
 800a1cc:	697b      	ldr	r3, [r7, #20]
 800a1ce:	fa02 f303 	lsl.w	r3, r2, r3
 800a1d2:	43db      	mvns	r3, r3
 800a1d4:	693a      	ldr	r2, [r7, #16]
 800a1d6:	4013      	ands	r3, r2
 800a1d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a1da:	683b      	ldr	r3, [r7, #0]
 800a1dc:	685b      	ldr	r3, [r3, #4]
 800a1de:	091b      	lsrs	r3, r3, #4
 800a1e0:	f003 0201 	and.w	r2, r3, #1
 800a1e4:	697b      	ldr	r3, [r7, #20]
 800a1e6:	fa02 f303 	lsl.w	r3, r2, r3
 800a1ea:	693a      	ldr	r2, [r7, #16]
 800a1ec:	4313      	orrs	r3, r2
 800a1ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	693a      	ldr	r2, [r7, #16]
 800a1f4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	685b      	ldr	r3, [r3, #4]
 800a1fa:	f003 0303 	and.w	r3, r3, #3
 800a1fe:	2b03      	cmp	r3, #3
 800a200:	d027      	beq.n	800a252 <HAL_GPIO_Init+0x21a>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800a202:	683b      	ldr	r3, [r7, #0]
 800a204:	689b      	ldr	r3, [r3, #8]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d00b      	beq.n	800a222 <HAL_GPIO_Init+0x1ea>
 800a20a:	683b      	ldr	r3, [r7, #0]
 800a20c:	689b      	ldr	r3, [r3, #8]
 800a20e:	2b01      	cmp	r3, #1
 800a210:	d007      	beq.n	800a222 <HAL_GPIO_Init+0x1ea>
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	689b      	ldr	r3, [r3, #8]
 800a216:	2b02      	cmp	r3, #2
 800a218:	d003      	beq.n	800a222 <HAL_GPIO_Init+0x1ea>
 800a21a:	21d4      	movs	r1, #212	; 0xd4
 800a21c:	4866      	ldr	r0, [pc, #408]	; (800a3b8 <HAL_GPIO_Init+0x380>)
 800a21e:	f7fb fcb8 	bl	8005b92 <assert_failed>

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	68db      	ldr	r3, [r3, #12]
 800a226:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800a228:	697b      	ldr	r3, [r7, #20]
 800a22a:	005b      	lsls	r3, r3, #1
 800a22c:	2203      	movs	r2, #3
 800a22e:	fa02 f303 	lsl.w	r3, r2, r3
 800a232:	43db      	mvns	r3, r3
 800a234:	693a      	ldr	r2, [r7, #16]
 800a236:	4013      	ands	r3, r2
 800a238:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	689a      	ldr	r2, [r3, #8]
 800a23e:	697b      	ldr	r3, [r7, #20]
 800a240:	005b      	lsls	r3, r3, #1
 800a242:	fa02 f303 	lsl.w	r3, r2, r3
 800a246:	693a      	ldr	r2, [r7, #16]
 800a248:	4313      	orrs	r3, r2
 800a24a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	693a      	ldr	r2, [r7, #16]
 800a250:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a252:	683b      	ldr	r3, [r7, #0]
 800a254:	685b      	ldr	r3, [r3, #4]
 800a256:	f003 0303 	and.w	r3, r3, #3
 800a25a:	2b02      	cmp	r3, #2
 800a25c:	d14f      	bne.n	800a2fe <HAL_GPIO_Init+0x2c6>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800a264:	d017      	beq.n	800a296 <HAL_GPIO_Init+0x25e>
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	4a54      	ldr	r2, [pc, #336]	; (800a3bc <HAL_GPIO_Init+0x384>)
 800a26a:	4293      	cmp	r3, r2
 800a26c:	d013      	beq.n	800a296 <HAL_GPIO_Init+0x25e>
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	4a53      	ldr	r2, [pc, #332]	; (800a3c0 <HAL_GPIO_Init+0x388>)
 800a272:	4293      	cmp	r3, r2
 800a274:	d00f      	beq.n	800a296 <HAL_GPIO_Init+0x25e>
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	4a52      	ldr	r2, [pc, #328]	; (800a3c4 <HAL_GPIO_Init+0x38c>)
 800a27a:	4293      	cmp	r3, r2
 800a27c:	d00b      	beq.n	800a296 <HAL_GPIO_Init+0x25e>
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	4a51      	ldr	r2, [pc, #324]	; (800a3c8 <HAL_GPIO_Init+0x390>)
 800a282:	4293      	cmp	r3, r2
 800a284:	d007      	beq.n	800a296 <HAL_GPIO_Init+0x25e>
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	4a50      	ldr	r2, [pc, #320]	; (800a3cc <HAL_GPIO_Init+0x394>)
 800a28a:	4293      	cmp	r3, r2
 800a28c:	d003      	beq.n	800a296 <HAL_GPIO_Init+0x25e>
 800a28e:	21e2      	movs	r1, #226	; 0xe2
 800a290:	4849      	ldr	r0, [pc, #292]	; (800a3b8 <HAL_GPIO_Init+0x380>)
 800a292:	f7fb fc7e 	bl	8005b92 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	691b      	ldr	r3, [r3, #16]
 800a29a:	2b0c      	cmp	r3, #12
 800a29c:	d90b      	bls.n	800a2b6 <HAL_GPIO_Init+0x27e>
 800a29e:	683b      	ldr	r3, [r7, #0]
 800a2a0:	691b      	ldr	r3, [r3, #16]
 800a2a2:	2b0e      	cmp	r3, #14
 800a2a4:	d007      	beq.n	800a2b6 <HAL_GPIO_Init+0x27e>
 800a2a6:	683b      	ldr	r3, [r7, #0]
 800a2a8:	691b      	ldr	r3, [r3, #16]
 800a2aa:	2b0f      	cmp	r3, #15
 800a2ac:	d003      	beq.n	800a2b6 <HAL_GPIO_Init+0x27e>
 800a2ae:	21e3      	movs	r1, #227	; 0xe3
 800a2b0:	4841      	ldr	r0, [pc, #260]	; (800a3b8 <HAL_GPIO_Init+0x380>)
 800a2b2:	f7fb fc6e 	bl	8005b92 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800a2b6:	697b      	ldr	r3, [r7, #20]
 800a2b8:	08da      	lsrs	r2, r3, #3
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	3208      	adds	r2, #8
 800a2be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800a2c4:	697b      	ldr	r3, [r7, #20]
 800a2c6:	f003 0307 	and.w	r3, r3, #7
 800a2ca:	009b      	lsls	r3, r3, #2
 800a2cc:	220f      	movs	r2, #15
 800a2ce:	fa02 f303 	lsl.w	r3, r2, r3
 800a2d2:	43db      	mvns	r3, r3
 800a2d4:	693a      	ldr	r2, [r7, #16]
 800a2d6:	4013      	ands	r3, r2
 800a2d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800a2da:	683b      	ldr	r3, [r7, #0]
 800a2dc:	691a      	ldr	r2, [r3, #16]
 800a2de:	697b      	ldr	r3, [r7, #20]
 800a2e0:	f003 0307 	and.w	r3, r3, #7
 800a2e4:	009b      	lsls	r3, r3, #2
 800a2e6:	fa02 f303 	lsl.w	r3, r2, r3
 800a2ea:	693a      	ldr	r2, [r7, #16]
 800a2ec:	4313      	orrs	r3, r2
 800a2ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800a2f0:	697b      	ldr	r3, [r7, #20]
 800a2f2:	08da      	lsrs	r2, r3, #3
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	3208      	adds	r2, #8
 800a2f8:	6939      	ldr	r1, [r7, #16]
 800a2fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800a304:	697b      	ldr	r3, [r7, #20]
 800a306:	005b      	lsls	r3, r3, #1
 800a308:	2203      	movs	r2, #3
 800a30a:	fa02 f303 	lsl.w	r3, r2, r3
 800a30e:	43db      	mvns	r3, r3
 800a310:	693a      	ldr	r2, [r7, #16]
 800a312:	4013      	ands	r3, r2
 800a314:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800a316:	683b      	ldr	r3, [r7, #0]
 800a318:	685b      	ldr	r3, [r3, #4]
 800a31a:	f003 0203 	and.w	r2, r3, #3
 800a31e:	697b      	ldr	r3, [r7, #20]
 800a320:	005b      	lsls	r3, r3, #1
 800a322:	fa02 f303 	lsl.w	r3, r2, r3
 800a326:	693a      	ldr	r2, [r7, #16]
 800a328:	4313      	orrs	r3, r2
 800a32a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	693a      	ldr	r2, [r7, #16]
 800a330:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800a332:	683b      	ldr	r3, [r7, #0]
 800a334:	685b      	ldr	r3, [r3, #4]
 800a336:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	f000 80b0 	beq.w	800a4a0 <HAL_GPIO_Init+0x468>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a340:	4b23      	ldr	r3, [pc, #140]	; (800a3d0 <HAL_GPIO_Init+0x398>)
 800a342:	699b      	ldr	r3, [r3, #24]
 800a344:	4a22      	ldr	r2, [pc, #136]	; (800a3d0 <HAL_GPIO_Init+0x398>)
 800a346:	f043 0301 	orr.w	r3, r3, #1
 800a34a:	6193      	str	r3, [r2, #24]
 800a34c:	4b20      	ldr	r3, [pc, #128]	; (800a3d0 <HAL_GPIO_Init+0x398>)
 800a34e:	699b      	ldr	r3, [r3, #24]
 800a350:	f003 0301 	and.w	r3, r3, #1
 800a354:	60bb      	str	r3, [r7, #8]
 800a356:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800a358:	4a1e      	ldr	r2, [pc, #120]	; (800a3d4 <HAL_GPIO_Init+0x39c>)
 800a35a:	697b      	ldr	r3, [r7, #20]
 800a35c:	089b      	lsrs	r3, r3, #2
 800a35e:	3302      	adds	r3, #2
 800a360:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a364:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800a366:	697b      	ldr	r3, [r7, #20]
 800a368:	f003 0303 	and.w	r3, r3, #3
 800a36c:	009b      	lsls	r3, r3, #2
 800a36e:	220f      	movs	r2, #15
 800a370:	fa02 f303 	lsl.w	r3, r2, r3
 800a374:	43db      	mvns	r3, r3
 800a376:	693a      	ldr	r2, [r7, #16]
 800a378:	4013      	ands	r3, r2
 800a37a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800a382:	d029      	beq.n	800a3d8 <HAL_GPIO_Init+0x3a0>
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	4a0d      	ldr	r2, [pc, #52]	; (800a3bc <HAL_GPIO_Init+0x384>)
 800a388:	4293      	cmp	r3, r2
 800a38a:	d013      	beq.n	800a3b4 <HAL_GPIO_Init+0x37c>
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	4a0c      	ldr	r2, [pc, #48]	; (800a3c0 <HAL_GPIO_Init+0x388>)
 800a390:	4293      	cmp	r3, r2
 800a392:	d00d      	beq.n	800a3b0 <HAL_GPIO_Init+0x378>
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	4a0b      	ldr	r2, [pc, #44]	; (800a3c4 <HAL_GPIO_Init+0x38c>)
 800a398:	4293      	cmp	r3, r2
 800a39a:	d007      	beq.n	800a3ac <HAL_GPIO_Init+0x374>
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	4a0a      	ldr	r2, [pc, #40]	; (800a3c8 <HAL_GPIO_Init+0x390>)
 800a3a0:	4293      	cmp	r3, r2
 800a3a2:	d101      	bne.n	800a3a8 <HAL_GPIO_Init+0x370>
 800a3a4:	2304      	movs	r3, #4
 800a3a6:	e018      	b.n	800a3da <HAL_GPIO_Init+0x3a2>
 800a3a8:	2305      	movs	r3, #5
 800a3aa:	e016      	b.n	800a3da <HAL_GPIO_Init+0x3a2>
 800a3ac:	2303      	movs	r3, #3
 800a3ae:	e014      	b.n	800a3da <HAL_GPIO_Init+0x3a2>
 800a3b0:	2302      	movs	r3, #2
 800a3b2:	e012      	b.n	800a3da <HAL_GPIO_Init+0x3a2>
 800a3b4:	2301      	movs	r3, #1
 800a3b6:	e010      	b.n	800a3da <HAL_GPIO_Init+0x3a2>
 800a3b8:	080342fc 	.word	0x080342fc
 800a3bc:	48000400 	.word	0x48000400
 800a3c0:	48000800 	.word	0x48000800
 800a3c4:	48000c00 	.word	0x48000c00
 800a3c8:	48001000 	.word	0x48001000
 800a3cc:	48001400 	.word	0x48001400
 800a3d0:	40021000 	.word	0x40021000
 800a3d4:	40010000 	.word	0x40010000
 800a3d8:	2300      	movs	r3, #0
 800a3da:	697a      	ldr	r2, [r7, #20]
 800a3dc:	f002 0203 	and.w	r2, r2, #3
 800a3e0:	0092      	lsls	r2, r2, #2
 800a3e2:	4093      	lsls	r3, r2
 800a3e4:	693a      	ldr	r2, [r7, #16]
 800a3e6:	4313      	orrs	r3, r2
 800a3e8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800a3ea:	4935      	ldr	r1, [pc, #212]	; (800a4c0 <HAL_GPIO_Init+0x488>)
 800a3ec:	697b      	ldr	r3, [r7, #20]
 800a3ee:	089b      	lsrs	r3, r3, #2
 800a3f0:	3302      	adds	r3, #2
 800a3f2:	693a      	ldr	r2, [r7, #16]
 800a3f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800a3f8:	4b32      	ldr	r3, [pc, #200]	; (800a4c4 <HAL_GPIO_Init+0x48c>)
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	43db      	mvns	r3, r3
 800a402:	693a      	ldr	r2, [r7, #16]
 800a404:	4013      	ands	r3, r2
 800a406:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	685b      	ldr	r3, [r3, #4]
 800a40c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a410:	2b00      	cmp	r3, #0
 800a412:	d003      	beq.n	800a41c <HAL_GPIO_Init+0x3e4>
        {
          temp |= iocurrent;
 800a414:	693a      	ldr	r2, [r7, #16]
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	4313      	orrs	r3, r2
 800a41a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800a41c:	4a29      	ldr	r2, [pc, #164]	; (800a4c4 <HAL_GPIO_Init+0x48c>)
 800a41e:	693b      	ldr	r3, [r7, #16]
 800a420:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800a422:	4b28      	ldr	r3, [pc, #160]	; (800a4c4 <HAL_GPIO_Init+0x48c>)
 800a424:	685b      	ldr	r3, [r3, #4]
 800a426:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	43db      	mvns	r3, r3
 800a42c:	693a      	ldr	r2, [r7, #16]
 800a42e:	4013      	ands	r3, r2
 800a430:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800a432:	683b      	ldr	r3, [r7, #0]
 800a434:	685b      	ldr	r3, [r3, #4]
 800a436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d003      	beq.n	800a446 <HAL_GPIO_Init+0x40e>
        {
          temp |= iocurrent;
 800a43e:	693a      	ldr	r2, [r7, #16]
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	4313      	orrs	r3, r2
 800a444:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800a446:	4a1f      	ldr	r2, [pc, #124]	; (800a4c4 <HAL_GPIO_Init+0x48c>)
 800a448:	693b      	ldr	r3, [r7, #16]
 800a44a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800a44c:	4b1d      	ldr	r3, [pc, #116]	; (800a4c4 <HAL_GPIO_Init+0x48c>)
 800a44e:	689b      	ldr	r3, [r3, #8]
 800a450:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	43db      	mvns	r3, r3
 800a456:	693a      	ldr	r2, [r7, #16]
 800a458:	4013      	ands	r3, r2
 800a45a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800a45c:	683b      	ldr	r3, [r7, #0]
 800a45e:	685b      	ldr	r3, [r3, #4]
 800a460:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a464:	2b00      	cmp	r3, #0
 800a466:	d003      	beq.n	800a470 <HAL_GPIO_Init+0x438>
        {
          temp |= iocurrent;
 800a468:	693a      	ldr	r2, [r7, #16]
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	4313      	orrs	r3, r2
 800a46e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800a470:	4a14      	ldr	r2, [pc, #80]	; (800a4c4 <HAL_GPIO_Init+0x48c>)
 800a472:	693b      	ldr	r3, [r7, #16]
 800a474:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800a476:	4b13      	ldr	r3, [pc, #76]	; (800a4c4 <HAL_GPIO_Init+0x48c>)
 800a478:	68db      	ldr	r3, [r3, #12]
 800a47a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	43db      	mvns	r3, r3
 800a480:	693a      	ldr	r2, [r7, #16]
 800a482:	4013      	ands	r3, r2
 800a484:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800a486:	683b      	ldr	r3, [r7, #0]
 800a488:	685b      	ldr	r3, [r3, #4]
 800a48a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d003      	beq.n	800a49a <HAL_GPIO_Init+0x462>
        {
          temp |= iocurrent;
 800a492:	693a      	ldr	r2, [r7, #16]
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	4313      	orrs	r3, r2
 800a498:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800a49a:	4a0a      	ldr	r2, [pc, #40]	; (800a4c4 <HAL_GPIO_Init+0x48c>)
 800a49c:	693b      	ldr	r3, [r7, #16]
 800a49e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800a4a0:	697b      	ldr	r3, [r7, #20]
 800a4a2:	3301      	adds	r3, #1
 800a4a4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a4a6:	683b      	ldr	r3, [r7, #0]
 800a4a8:	681a      	ldr	r2, [r3, #0]
 800a4aa:	697b      	ldr	r3, [r7, #20]
 800a4ac:	fa22 f303 	lsr.w	r3, r2, r3
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	f47f ae47 	bne.w	800a144 <HAL_GPIO_Init+0x10c>
  }
}
 800a4b6:	bf00      	nop
 800a4b8:	bf00      	nop
 800a4ba:	3718      	adds	r7, #24
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	bd80      	pop	{r7, pc}
 800a4c0:	40010000 	.word	0x40010000
 800a4c4:	40010400 	.word	0x40010400

0800a4c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b082      	sub	sp, #8
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
 800a4d0:	460b      	mov	r3, r1
 800a4d2:	807b      	strh	r3, [r7, #2]
 800a4d4:	4613      	mov	r3, r2
 800a4d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800a4d8:	887b      	ldrh	r3, [r7, #2]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d004      	beq.n	800a4e8 <HAL_GPIO_WritePin+0x20>
 800a4de:	887b      	ldrh	r3, [r7, #2]
 800a4e0:	0c1b      	lsrs	r3, r3, #16
 800a4e2:	041b      	lsls	r3, r3, #16
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d004      	beq.n	800a4f2 <HAL_GPIO_WritePin+0x2a>
 800a4e8:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 800a4ec:	480d      	ldr	r0, [pc, #52]	; (800a524 <HAL_GPIO_WritePin+0x5c>)
 800a4ee:	f7fb fb50 	bl	8005b92 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800a4f2:	787b      	ldrb	r3, [r7, #1]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d007      	beq.n	800a508 <HAL_GPIO_WritePin+0x40>
 800a4f8:	787b      	ldrb	r3, [r7, #1]
 800a4fa:	2b01      	cmp	r3, #1
 800a4fc:	d004      	beq.n	800a508 <HAL_GPIO_WritePin+0x40>
 800a4fe:	f240 11a5 	movw	r1, #421	; 0x1a5
 800a502:	4808      	ldr	r0, [pc, #32]	; (800a524 <HAL_GPIO_WritePin+0x5c>)
 800a504:	f7fb fb45 	bl	8005b92 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 800a508:	787b      	ldrb	r3, [r7, #1]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d003      	beq.n	800a516 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800a50e:	887a      	ldrh	r2, [r7, #2]
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800a514:	e002      	b.n	800a51c <HAL_GPIO_WritePin+0x54>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800a516:	887a      	ldrh	r2, [r7, #2]
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800a51c:	bf00      	nop
 800a51e:	3708      	adds	r7, #8
 800a520:	46bd      	mov	sp, r7
 800a522:	bd80      	pop	{r7, pc}
 800a524:	080342fc 	.word	0x080342fc

0800a528 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b082      	sub	sp, #8
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d101      	bne.n	800a53a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a536:	2301      	movs	r3, #1
 800a538:	e0ff      	b.n	800a73a <HAL_I2C_Init+0x212>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	4a81      	ldr	r2, [pc, #516]	; (800a744 <HAL_I2C_Init+0x21c>)
 800a540:	4293      	cmp	r3, r2
 800a542:	d009      	beq.n	800a558 <HAL_I2C_Init+0x30>
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	4a7f      	ldr	r2, [pc, #508]	; (800a748 <HAL_I2C_Init+0x220>)
 800a54a:	4293      	cmp	r3, r2
 800a54c:	d004      	beq.n	800a558 <HAL_I2C_Init+0x30>
 800a54e:	f240 2113 	movw	r1, #531	; 0x213
 800a552:	487e      	ldr	r0, [pc, #504]	; (800a74c <HAL_I2C_Init+0x224>)
 800a554:	f7fb fb1d 	bl	8005b92 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	689b      	ldr	r3, [r3, #8]
 800a55c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a560:	d304      	bcc.n	800a56c <HAL_I2C_Init+0x44>
 800a562:	f44f 7105 	mov.w	r1, #532	; 0x214
 800a566:	4879      	ldr	r0, [pc, #484]	; (800a74c <HAL_I2C_Init+0x224>)
 800a568:	f7fb fb13 	bl	8005b92 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	68db      	ldr	r3, [r3, #12]
 800a570:	2b01      	cmp	r3, #1
 800a572:	d008      	beq.n	800a586 <HAL_I2C_Init+0x5e>
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	68db      	ldr	r3, [r3, #12]
 800a578:	2b02      	cmp	r3, #2
 800a57a:	d004      	beq.n	800a586 <HAL_I2C_Init+0x5e>
 800a57c:	f240 2115 	movw	r1, #533	; 0x215
 800a580:	4872      	ldr	r0, [pc, #456]	; (800a74c <HAL_I2C_Init+0x224>)
 800a582:	f7fb fb06 	bl	8005b92 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	691b      	ldr	r3, [r3, #16]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d009      	beq.n	800a5a2 <HAL_I2C_Init+0x7a>
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	691b      	ldr	r3, [r3, #16]
 800a592:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a596:	d004      	beq.n	800a5a2 <HAL_I2C_Init+0x7a>
 800a598:	f240 2116 	movw	r1, #534	; 0x216
 800a59c:	486b      	ldr	r0, [pc, #428]	; (800a74c <HAL_I2C_Init+0x224>)
 800a59e:	f7fb faf8 	bl	8005b92 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	695b      	ldr	r3, [r3, #20]
 800a5a6:	2bff      	cmp	r3, #255	; 0xff
 800a5a8:	d904      	bls.n	800a5b4 <HAL_I2C_Init+0x8c>
 800a5aa:	f240 2117 	movw	r1, #535	; 0x217
 800a5ae:	4867      	ldr	r0, [pc, #412]	; (800a74c <HAL_I2C_Init+0x224>)
 800a5b0:	f7fb faef 	bl	8005b92 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	699b      	ldr	r3, [r3, #24]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d020      	beq.n	800a5fe <HAL_I2C_Init+0xd6>
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	699b      	ldr	r3, [r3, #24]
 800a5c0:	2b01      	cmp	r3, #1
 800a5c2:	d01c      	beq.n	800a5fe <HAL_I2C_Init+0xd6>
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	699b      	ldr	r3, [r3, #24]
 800a5c8:	2b02      	cmp	r3, #2
 800a5ca:	d018      	beq.n	800a5fe <HAL_I2C_Init+0xd6>
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	699b      	ldr	r3, [r3, #24]
 800a5d0:	2b03      	cmp	r3, #3
 800a5d2:	d014      	beq.n	800a5fe <HAL_I2C_Init+0xd6>
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	699b      	ldr	r3, [r3, #24]
 800a5d8:	2b04      	cmp	r3, #4
 800a5da:	d010      	beq.n	800a5fe <HAL_I2C_Init+0xd6>
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	699b      	ldr	r3, [r3, #24]
 800a5e0:	2b05      	cmp	r3, #5
 800a5e2:	d00c      	beq.n	800a5fe <HAL_I2C_Init+0xd6>
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	699b      	ldr	r3, [r3, #24]
 800a5e8:	2b06      	cmp	r3, #6
 800a5ea:	d008      	beq.n	800a5fe <HAL_I2C_Init+0xd6>
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	699b      	ldr	r3, [r3, #24]
 800a5f0:	2b07      	cmp	r3, #7
 800a5f2:	d004      	beq.n	800a5fe <HAL_I2C_Init+0xd6>
 800a5f4:	f44f 7106 	mov.w	r1, #536	; 0x218
 800a5f8:	4854      	ldr	r0, [pc, #336]	; (800a74c <HAL_I2C_Init+0x224>)
 800a5fa:	f7fb faca 	bl	8005b92 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	69db      	ldr	r3, [r3, #28]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d009      	beq.n	800a61a <HAL_I2C_Init+0xf2>
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	69db      	ldr	r3, [r3, #28]
 800a60a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a60e:	d004      	beq.n	800a61a <HAL_I2C_Init+0xf2>
 800a610:	f240 2119 	movw	r1, #537	; 0x219
 800a614:	484d      	ldr	r0, [pc, #308]	; (800a74c <HAL_I2C_Init+0x224>)
 800a616:	f7fb fabc 	bl	8005b92 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	6a1b      	ldr	r3, [r3, #32]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d009      	beq.n	800a636 <HAL_I2C_Init+0x10e>
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	6a1b      	ldr	r3, [r3, #32]
 800a626:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a62a:	d004      	beq.n	800a636 <HAL_I2C_Init+0x10e>
 800a62c:	f240 211a 	movw	r1, #538	; 0x21a
 800a630:	4846      	ldr	r0, [pc, #280]	; (800a74c <HAL_I2C_Init+0x224>)
 800a632:	f7fb faae 	bl	8005b92 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a63c:	b2db      	uxtb	r3, r3
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d106      	bne.n	800a650 <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	2200      	movs	r2, #0
 800a646:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800a64a:	6878      	ldr	r0, [r7, #4]
 800a64c:	f7f6 fef0 	bl	8001430 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	2224      	movs	r2, #36	; 0x24
 800a654:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	681a      	ldr	r2, [r3, #0]
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	f022 0201 	bic.w	r2, r2, #1
 800a666:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	685a      	ldr	r2, [r3, #4]
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a674:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	689a      	ldr	r2, [r3, #8]
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a684:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	68db      	ldr	r3, [r3, #12]
 800a68a:	2b01      	cmp	r3, #1
 800a68c:	d107      	bne.n	800a69e <HAL_I2C_Init+0x176>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	689a      	ldr	r2, [r3, #8]
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a69a:	609a      	str	r2, [r3, #8]
 800a69c:	e006      	b.n	800a6ac <HAL_I2C_Init+0x184>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	689a      	ldr	r2, [r3, #8]
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800a6aa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	68db      	ldr	r3, [r3, #12]
 800a6b0:	2b02      	cmp	r3, #2
 800a6b2:	d104      	bne.n	800a6be <HAL_I2C_Init+0x196>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a6bc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	685b      	ldr	r3, [r3, #4]
 800a6c4:	687a      	ldr	r2, [r7, #4]
 800a6c6:	6812      	ldr	r2, [r2, #0]
 800a6c8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a6cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a6d0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	68da      	ldr	r2, [r3, #12]
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a6e0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	691a      	ldr	r2, [r3, #16]
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	695b      	ldr	r3, [r3, #20]
 800a6ea:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	699b      	ldr	r3, [r3, #24]
 800a6f2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	430a      	orrs	r2, r1
 800a6fa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	69d9      	ldr	r1, [r3, #28]
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	6a1a      	ldr	r2, [r3, #32]
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	430a      	orrs	r2, r1
 800a70a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	681a      	ldr	r2, [r3, #0]
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	f042 0201 	orr.w	r2, r2, #1
 800a71a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	2200      	movs	r2, #0
 800a720:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	2220      	movs	r2, #32
 800a726:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	2200      	movs	r2, #0
 800a72e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2200      	movs	r2, #0
 800a734:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800a738:	2300      	movs	r3, #0
}
 800a73a:	4618      	mov	r0, r3
 800a73c:	3708      	adds	r7, #8
 800a73e:	46bd      	mov	sp, r7
 800a740:	bd80      	pop	{r7, pc}
 800a742:	bf00      	nop
 800a744:	40005400 	.word	0x40005400
 800a748:	40005800 	.word	0x40005800
 800a74c:	08034338 	.word	0x08034338

0800a750 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b082      	sub	sp, #8
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
 800a758:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	4a2d      	ldr	r2, [pc, #180]	; (800a814 <HAL_I2CEx_ConfigAnalogFilter+0xc4>)
 800a760:	4293      	cmp	r3, r2
 800a762:	d008      	beq.n	800a776 <HAL_I2CEx_ConfigAnalogFilter+0x26>
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	4a2b      	ldr	r2, [pc, #172]	; (800a818 <HAL_I2CEx_ConfigAnalogFilter+0xc8>)
 800a76a:	4293      	cmp	r3, r2
 800a76c:	d003      	beq.n	800a776 <HAL_I2CEx_ConfigAnalogFilter+0x26>
 800a76e:	2164      	movs	r1, #100	; 0x64
 800a770:	482a      	ldr	r0, [pc, #168]	; (800a81c <HAL_I2CEx_ConfigAnalogFilter+0xcc>)
 800a772:	f7fb fa0e 	bl	8005b92 <assert_failed>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 800a776:	683b      	ldr	r3, [r7, #0]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d007      	beq.n	800a78c <HAL_I2CEx_ConfigAnalogFilter+0x3c>
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a782:	d003      	beq.n	800a78c <HAL_I2CEx_ConfigAnalogFilter+0x3c>
 800a784:	2165      	movs	r1, #101	; 0x65
 800a786:	4825      	ldr	r0, [pc, #148]	; (800a81c <HAL_I2CEx_ConfigAnalogFilter+0xcc>)
 800a788:	f7fb fa03 	bl	8005b92 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a792:	b2db      	uxtb	r3, r3
 800a794:	2b20      	cmp	r3, #32
 800a796:	d138      	bne.n	800a80a <HAL_I2CEx_ConfigAnalogFilter+0xba>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a79e:	2b01      	cmp	r3, #1
 800a7a0:	d101      	bne.n	800a7a6 <HAL_I2CEx_ConfigAnalogFilter+0x56>
 800a7a2:	2302      	movs	r3, #2
 800a7a4:	e032      	b.n	800a80c <HAL_I2CEx_ConfigAnalogFilter+0xbc>
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	2201      	movs	r2, #1
 800a7aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	2224      	movs	r2, #36	; 0x24
 800a7b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	681a      	ldr	r2, [r3, #0]
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	f022 0201 	bic.w	r2, r2, #1
 800a7c4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	681a      	ldr	r2, [r3, #0]
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a7d4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	6819      	ldr	r1, [r3, #0]
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	683a      	ldr	r2, [r7, #0]
 800a7e2:	430a      	orrs	r2, r1
 800a7e4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	681a      	ldr	r2, [r3, #0]
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	f042 0201 	orr.w	r2, r2, #1
 800a7f4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	2220      	movs	r2, #32
 800a7fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	2200      	movs	r2, #0
 800a802:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a806:	2300      	movs	r3, #0
 800a808:	e000      	b.n	800a80c <HAL_I2CEx_ConfigAnalogFilter+0xbc>
  }
  else
  {
    return HAL_BUSY;
 800a80a:	2302      	movs	r3, #2
  }
}
 800a80c:	4618      	mov	r0, r3
 800a80e:	3708      	adds	r7, #8
 800a810:	46bd      	mov	sp, r7
 800a812:	bd80      	pop	{r7, pc}
 800a814:	40005400 	.word	0x40005400
 800a818:	40005800 	.word	0x40005800
 800a81c:	08034370 	.word	0x08034370

0800a820 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a820:	b580      	push	{r7, lr}
 800a822:	b084      	sub	sp, #16
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
 800a828:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	4a2c      	ldr	r2, [pc, #176]	; (800a8e0 <HAL_I2CEx_ConfigDigitalFilter+0xc0>)
 800a830:	4293      	cmp	r3, r2
 800a832:	d008      	beq.n	800a846 <HAL_I2CEx_ConfigDigitalFilter+0x26>
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	4a2a      	ldr	r2, [pc, #168]	; (800a8e4 <HAL_I2CEx_ConfigDigitalFilter+0xc4>)
 800a83a:	4293      	cmp	r3, r2
 800a83c:	d003      	beq.n	800a846 <HAL_I2CEx_ConfigDigitalFilter+0x26>
 800a83e:	2192      	movs	r1, #146	; 0x92
 800a840:	4829      	ldr	r0, [pc, #164]	; (800a8e8 <HAL_I2CEx_ConfigDigitalFilter+0xc8>)
 800a842:	f7fb f9a6 	bl	8005b92 <assert_failed>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 800a846:	683b      	ldr	r3, [r7, #0]
 800a848:	2b0f      	cmp	r3, #15
 800a84a:	d903      	bls.n	800a854 <HAL_I2CEx_ConfigDigitalFilter+0x34>
 800a84c:	2193      	movs	r1, #147	; 0x93
 800a84e:	4826      	ldr	r0, [pc, #152]	; (800a8e8 <HAL_I2CEx_ConfigDigitalFilter+0xc8>)
 800a850:	f7fb f99f 	bl	8005b92 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a85a:	b2db      	uxtb	r3, r3
 800a85c:	2b20      	cmp	r3, #32
 800a85e:	d139      	bne.n	800a8d4 <HAL_I2CEx_ConfigDigitalFilter+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a866:	2b01      	cmp	r3, #1
 800a868:	d101      	bne.n	800a86e <HAL_I2CEx_ConfigDigitalFilter+0x4e>
 800a86a:	2302      	movs	r3, #2
 800a86c:	e033      	b.n	800a8d6 <HAL_I2CEx_ConfigDigitalFilter+0xb6>
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	2201      	movs	r2, #1
 800a872:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	2224      	movs	r2, #36	; 0x24
 800a87a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	681a      	ldr	r2, [r3, #0]
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	f022 0201 	bic.w	r2, r2, #1
 800a88c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800a89c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a89e:	683b      	ldr	r3, [r7, #0]
 800a8a0:	021b      	lsls	r3, r3, #8
 800a8a2:	68fa      	ldr	r2, [r7, #12]
 800a8a4:	4313      	orrs	r3, r2
 800a8a6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	68fa      	ldr	r2, [r7, #12]
 800a8ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	681a      	ldr	r2, [r3, #0]
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	f042 0201 	orr.w	r2, r2, #1
 800a8be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	2220      	movs	r2, #32
 800a8c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	e000      	b.n	800a8d6 <HAL_I2CEx_ConfigDigitalFilter+0xb6>
  }
  else
  {
    return HAL_BUSY;
 800a8d4:	2302      	movs	r3, #2
  }
}
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	3710      	adds	r7, #16
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	bd80      	pop	{r7, pc}
 800a8de:	bf00      	nop
 800a8e0:	40005400 	.word	0x40005400
 800a8e4:	40005800 	.word	0x40005800
 800a8e8:	08034370 	.word	0x08034370

0800a8ec <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800a8ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a8ee:	b08b      	sub	sp, #44	; 0x2c
 800a8f0:	af06      	add	r7, sp, #24
 800a8f2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d101      	bne.n	800a8fe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800a8fa:	2301      	movs	r3, #1
 800a8fc:	e0d9      	b.n	800aab2 <HAL_PCD_Init+0x1c6>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	4a6e      	ldr	r2, [pc, #440]	; (800aabc <HAL_PCD_Init+0x1d0>)
 800a904:	4293      	cmp	r3, r2
 800a906:	d003      	beq.n	800a910 <HAL_PCD_Init+0x24>
 800a908:	2185      	movs	r1, #133	; 0x85
 800a90a:	486d      	ldr	r0, [pc, #436]	; (800aac0 <HAL_PCD_Init+0x1d4>)
 800a90c:	f7fb f941 	bl	8005b92 <assert_failed>

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800a916:	b2db      	uxtb	r3, r3
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d106      	bne.n	800a92a <HAL_PCD_Init+0x3e>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	2200      	movs	r2, #0
 800a920:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800a924:	6878      	ldr	r0, [r7, #4]
 800a926:	f024 fc6f 	bl	802f208 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	2203      	movs	r2, #3
 800a92e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	4618      	mov	r0, r3
 800a938:	f006 fb62 	bl	8011000 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a93c:	2300      	movs	r3, #0
 800a93e:	73fb      	strb	r3, [r7, #15]
 800a940:	e04c      	b.n	800a9dc <HAL_PCD_Init+0xf0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800a942:	7bfb      	ldrb	r3, [r7, #15]
 800a944:	6879      	ldr	r1, [r7, #4]
 800a946:	1c5a      	adds	r2, r3, #1
 800a948:	4613      	mov	r3, r2
 800a94a:	009b      	lsls	r3, r3, #2
 800a94c:	4413      	add	r3, r2
 800a94e:	00db      	lsls	r3, r3, #3
 800a950:	440b      	add	r3, r1
 800a952:	3301      	adds	r3, #1
 800a954:	2201      	movs	r2, #1
 800a956:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800a958:	7bfb      	ldrb	r3, [r7, #15]
 800a95a:	6879      	ldr	r1, [r7, #4]
 800a95c:	1c5a      	adds	r2, r3, #1
 800a95e:	4613      	mov	r3, r2
 800a960:	009b      	lsls	r3, r3, #2
 800a962:	4413      	add	r3, r2
 800a964:	00db      	lsls	r3, r3, #3
 800a966:	440b      	add	r3, r1
 800a968:	7bfa      	ldrb	r2, [r7, #15]
 800a96a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800a96c:	7bfa      	ldrb	r2, [r7, #15]
 800a96e:	7bfb      	ldrb	r3, [r7, #15]
 800a970:	b298      	uxth	r0, r3
 800a972:	6879      	ldr	r1, [r7, #4]
 800a974:	4613      	mov	r3, r2
 800a976:	009b      	lsls	r3, r3, #2
 800a978:	4413      	add	r3, r2
 800a97a:	00db      	lsls	r3, r3, #3
 800a97c:	440b      	add	r3, r1
 800a97e:	3336      	adds	r3, #54	; 0x36
 800a980:	4602      	mov	r2, r0
 800a982:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800a984:	7bfb      	ldrb	r3, [r7, #15]
 800a986:	6879      	ldr	r1, [r7, #4]
 800a988:	1c5a      	adds	r2, r3, #1
 800a98a:	4613      	mov	r3, r2
 800a98c:	009b      	lsls	r3, r3, #2
 800a98e:	4413      	add	r3, r2
 800a990:	00db      	lsls	r3, r3, #3
 800a992:	440b      	add	r3, r1
 800a994:	3303      	adds	r3, #3
 800a996:	2200      	movs	r2, #0
 800a998:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800a99a:	7bfa      	ldrb	r2, [r7, #15]
 800a99c:	6879      	ldr	r1, [r7, #4]
 800a99e:	4613      	mov	r3, r2
 800a9a0:	009b      	lsls	r3, r3, #2
 800a9a2:	4413      	add	r3, r2
 800a9a4:	00db      	lsls	r3, r3, #3
 800a9a6:	440b      	add	r3, r1
 800a9a8:	3338      	adds	r3, #56	; 0x38
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800a9ae:	7bfa      	ldrb	r2, [r7, #15]
 800a9b0:	6879      	ldr	r1, [r7, #4]
 800a9b2:	4613      	mov	r3, r2
 800a9b4:	009b      	lsls	r3, r3, #2
 800a9b6:	4413      	add	r3, r2
 800a9b8:	00db      	lsls	r3, r3, #3
 800a9ba:	440b      	add	r3, r1
 800a9bc:	333c      	adds	r3, #60	; 0x3c
 800a9be:	2200      	movs	r2, #0
 800a9c0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800a9c2:	7bfa      	ldrb	r2, [r7, #15]
 800a9c4:	6879      	ldr	r1, [r7, #4]
 800a9c6:	4613      	mov	r3, r2
 800a9c8:	009b      	lsls	r3, r3, #2
 800a9ca:	4413      	add	r3, r2
 800a9cc:	00db      	lsls	r3, r3, #3
 800a9ce:	440b      	add	r3, r1
 800a9d0:	3340      	adds	r3, #64	; 0x40
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a9d6:	7bfb      	ldrb	r3, [r7, #15]
 800a9d8:	3301      	adds	r3, #1
 800a9da:	73fb      	strb	r3, [r7, #15]
 800a9dc:	7bfa      	ldrb	r2, [r7, #15]
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	685b      	ldr	r3, [r3, #4]
 800a9e2:	429a      	cmp	r2, r3
 800a9e4:	d3ad      	bcc.n	800a942 <HAL_PCD_Init+0x56>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	73fb      	strb	r3, [r7, #15]
 800a9ea:	e044      	b.n	800aa76 <HAL_PCD_Init+0x18a>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800a9ec:	7bfa      	ldrb	r2, [r7, #15]
 800a9ee:	6879      	ldr	r1, [r7, #4]
 800a9f0:	4613      	mov	r3, r2
 800a9f2:	009b      	lsls	r3, r3, #2
 800a9f4:	4413      	add	r3, r2
 800a9f6:	00db      	lsls	r3, r3, #3
 800a9f8:	440b      	add	r3, r1
 800a9fa:	f203 1369 	addw	r3, r3, #361	; 0x169
 800a9fe:	2200      	movs	r2, #0
 800aa00:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800aa02:	7bfa      	ldrb	r2, [r7, #15]
 800aa04:	6879      	ldr	r1, [r7, #4]
 800aa06:	4613      	mov	r3, r2
 800aa08:	009b      	lsls	r3, r3, #2
 800aa0a:	4413      	add	r3, r2
 800aa0c:	00db      	lsls	r3, r3, #3
 800aa0e:	440b      	add	r3, r1
 800aa10:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800aa14:	7bfa      	ldrb	r2, [r7, #15]
 800aa16:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800aa18:	7bfa      	ldrb	r2, [r7, #15]
 800aa1a:	6879      	ldr	r1, [r7, #4]
 800aa1c:	4613      	mov	r3, r2
 800aa1e:	009b      	lsls	r3, r3, #2
 800aa20:	4413      	add	r3, r2
 800aa22:	00db      	lsls	r3, r3, #3
 800aa24:	440b      	add	r3, r1
 800aa26:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800aa2a:	2200      	movs	r2, #0
 800aa2c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800aa2e:	7bfa      	ldrb	r2, [r7, #15]
 800aa30:	6879      	ldr	r1, [r7, #4]
 800aa32:	4613      	mov	r3, r2
 800aa34:	009b      	lsls	r3, r3, #2
 800aa36:	4413      	add	r3, r2
 800aa38:	00db      	lsls	r3, r3, #3
 800aa3a:	440b      	add	r3, r1
 800aa3c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800aa40:	2200      	movs	r2, #0
 800aa42:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800aa44:	7bfa      	ldrb	r2, [r7, #15]
 800aa46:	6879      	ldr	r1, [r7, #4]
 800aa48:	4613      	mov	r3, r2
 800aa4a:	009b      	lsls	r3, r3, #2
 800aa4c:	4413      	add	r3, r2
 800aa4e:	00db      	lsls	r3, r3, #3
 800aa50:	440b      	add	r3, r1
 800aa52:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800aa56:	2200      	movs	r2, #0
 800aa58:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800aa5a:	7bfa      	ldrb	r2, [r7, #15]
 800aa5c:	6879      	ldr	r1, [r7, #4]
 800aa5e:	4613      	mov	r3, r2
 800aa60:	009b      	lsls	r3, r3, #2
 800aa62:	4413      	add	r3, r2
 800aa64:	00db      	lsls	r3, r3, #3
 800aa66:	440b      	add	r3, r1
 800aa68:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800aa6c:	2200      	movs	r2, #0
 800aa6e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800aa70:	7bfb      	ldrb	r3, [r7, #15]
 800aa72:	3301      	adds	r3, #1
 800aa74:	73fb      	strb	r3, [r7, #15]
 800aa76:	7bfa      	ldrb	r2, [r7, #15]
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	685b      	ldr	r3, [r3, #4]
 800aa7c:	429a      	cmp	r2, r3
 800aa7e:	d3b5      	bcc.n	800a9ec <HAL_PCD_Init+0x100>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	603b      	str	r3, [r7, #0]
 800aa86:	687e      	ldr	r6, [r7, #4]
 800aa88:	466d      	mov	r5, sp
 800aa8a:	f106 0410 	add.w	r4, r6, #16
 800aa8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800aa90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800aa92:	6823      	ldr	r3, [r4, #0]
 800aa94:	602b      	str	r3, [r5, #0]
 800aa96:	1d33      	adds	r3, r6, #4
 800aa98:	cb0e      	ldmia	r3, {r1, r2, r3}
 800aa9a:	6838      	ldr	r0, [r7, #0]
 800aa9c:	f006 facb 	bl	8011036 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	2201      	movs	r2, #1
 800aaac:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 800aab0:	2300      	movs	r3, #0
}
 800aab2:	4618      	mov	r0, r3
 800aab4:	3714      	adds	r7, #20
 800aab6:	46bd      	mov	sp, r7
 800aab8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aaba:	bf00      	nop
 800aabc:	40005c00 	.word	0x40005c00
 800aac0:	080343ac 	.word	0x080343ac

0800aac4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b082      	sub	sp, #8
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800aad2:	2b01      	cmp	r3, #1
 800aad4:	d101      	bne.n	800aada <HAL_PCD_Start+0x16>
 800aad6:	2302      	movs	r3, #2
 800aad8:	e016      	b.n	800ab08 <HAL_PCD_Start+0x44>
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	2201      	movs	r2, #1
 800aade:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	4618      	mov	r0, r3
 800aae8:	f006 fa73 	bl	8010fd2 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800aaec:	2101      	movs	r1, #1
 800aaee:	6878      	ldr	r0, [r7, #4]
 800aaf0:	f024 fe28 	bl	802f744 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	4618      	mov	r0, r3
 800aafa:	f008 fc87 	bl	801340c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	2200      	movs	r2, #0
 800ab02:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800ab06:	2300      	movs	r3, #0
}
 800ab08:	4618      	mov	r0, r3
 800ab0a:	3708      	adds	r7, #8
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	bd80      	pop	{r7, pc}

0800ab10 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b082      	sub	sp, #8
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	f008 fc80 	bl	8013422 <USB_ReadInterrupts>
 800ab22:	4603      	mov	r3, r0
 800ab24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ab28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ab2c:	d102      	bne.n	800ab34 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800ab2e:	6878      	ldr	r0, [r7, #4]
 800ab30:	f000 faf6 	bl	800b120 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	4618      	mov	r0, r3
 800ab3a:	f008 fc72 	bl	8013422 <USB_ReadInterrupts>
 800ab3e:	4603      	mov	r3, r0
 800ab40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ab44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ab48:	d112      	bne.n	800ab70 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800ab52:	b29a      	uxth	r2, r3
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ab5c:	b292      	uxth	r2, r2
 800ab5e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800ab62:	6878      	ldr	r0, [r7, #4]
 800ab64:	f024 fbf1 	bl	802f34a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800ab68:	2100      	movs	r1, #0
 800ab6a:	6878      	ldr	r0, [r7, #4]
 800ab6c:	f000 f8c7 	bl	800acfe <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	4618      	mov	r0, r3
 800ab76:	f008 fc54 	bl	8013422 <USB_ReadInterrupts>
 800ab7a:	4603      	mov	r3, r0
 800ab7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ab80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ab84:	d10b      	bne.n	800ab9e <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800ab8e:	b29a      	uxth	r2, r3
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ab98:	b292      	uxth	r2, r2
 800ab9a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	4618      	mov	r0, r3
 800aba4:	f008 fc3d 	bl	8013422 <USB_ReadInterrupts>
 800aba8:	4603      	mov	r3, r0
 800abaa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800abae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800abb2:	d10b      	bne.n	800abcc <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800abbc:	b29a      	uxth	r2, r3
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800abc6:	b292      	uxth	r2, r2
 800abc8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	4618      	mov	r0, r3
 800abd2:	f008 fc26 	bl	8013422 <USB_ReadInterrupts>
 800abd6:	4603      	mov	r3, r0
 800abd8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800abdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800abe0:	d126      	bne.n	800ac30 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800abea:	b29a      	uxth	r2, r3
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	f022 0204 	bic.w	r2, r2, #4
 800abf4:	b292      	uxth	r2, r2
 800abf6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800ac02:	b29a      	uxth	r2, r3
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	f022 0208 	bic.w	r2, r2, #8
 800ac0c:	b292      	uxth	r2, r2
 800ac0e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800ac12:	6878      	ldr	r0, [r7, #4]
 800ac14:	f024 fbd2 	bl	802f3bc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800ac20:	b29a      	uxth	r2, r3
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800ac2a:	b292      	uxth	r2, r2
 800ac2c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	4618      	mov	r0, r3
 800ac36:	f008 fbf4 	bl	8013422 <USB_ReadInterrupts>
 800ac3a:	4603      	mov	r3, r0
 800ac3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ac40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ac44:	d126      	bne.n	800ac94 <HAL_PCD_IRQHandler+0x184>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800ac4e:	b29a      	uxth	r2, r3
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	f042 0208 	orr.w	r2, r2, #8
 800ac58:	b292      	uxth	r2, r2
 800ac5a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800ac66:	b29a      	uxth	r2, r3
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ac70:	b292      	uxth	r2, r2
 800ac72:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800ac7e:	b29a      	uxth	r2, r3
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	f042 0204 	orr.w	r2, r2, #4
 800ac88:	b292      	uxth	r2, r2
 800ac8a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800ac8e:	6878      	ldr	r0, [r7, #4]
 800ac90:	f024 fb7a 	bl	802f388 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	4618      	mov	r0, r3
 800ac9a:	f008 fbc2 	bl	8013422 <USB_ReadInterrupts>
 800ac9e:	4603      	mov	r3, r0
 800aca0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800aca4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aca8:	d10e      	bne.n	800acc8 <HAL_PCD_IRQHandler+0x1b8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800acb2:	b29a      	uxth	r2, r3
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800acbc:	b292      	uxth	r2, r2
 800acbe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800acc2:	6878      	ldr	r0, [r7, #4]
 800acc4:	f024 fb33 	bl	802f32e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	4618      	mov	r0, r3
 800acce:	f008 fba8 	bl	8013422 <USB_ReadInterrupts>
 800acd2:	4603      	mov	r3, r0
 800acd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800acd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800acdc:	d10b      	bne.n	800acf6 <HAL_PCD_IRQHandler+0x1e6>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800ace6:	b29a      	uxth	r2, r3
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800acf0:	b292      	uxth	r2, r2
 800acf2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800acf6:	bf00      	nop
 800acf8:	3708      	adds	r7, #8
 800acfa:	46bd      	mov	sp, r7
 800acfc:	bd80      	pop	{r7, pc}

0800acfe <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800acfe:	b580      	push	{r7, lr}
 800ad00:	b082      	sub	sp, #8
 800ad02:	af00      	add	r7, sp, #0
 800ad04:	6078      	str	r0, [r7, #4]
 800ad06:	460b      	mov	r3, r1
 800ad08:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800ad10:	2b01      	cmp	r3, #1
 800ad12:	d101      	bne.n	800ad18 <HAL_PCD_SetAddress+0x1a>
 800ad14:	2302      	movs	r3, #2
 800ad16:	e013      	b.n	800ad40 <HAL_PCD_SetAddress+0x42>
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	2201      	movs	r2, #1
 800ad1c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	78fa      	ldrb	r2, [r7, #3]
 800ad24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	78fa      	ldrb	r2, [r7, #3]
 800ad2e:	4611      	mov	r1, r2
 800ad30:	4618      	mov	r0, r3
 800ad32:	f008 fb57 	bl	80133e4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	2200      	movs	r2, #0
 800ad3a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800ad3e:	2300      	movs	r3, #0
}
 800ad40:	4618      	mov	r0, r3
 800ad42:	3708      	adds	r7, #8
 800ad44:	46bd      	mov	sp, r7
 800ad46:	bd80      	pop	{r7, pc}

0800ad48 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	b084      	sub	sp, #16
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
 800ad50:	4608      	mov	r0, r1
 800ad52:	4611      	mov	r1, r2
 800ad54:	461a      	mov	r2, r3
 800ad56:	4603      	mov	r3, r0
 800ad58:	70fb      	strb	r3, [r7, #3]
 800ad5a:	460b      	mov	r3, r1
 800ad5c:	803b      	strh	r3, [r7, #0]
 800ad5e:	4613      	mov	r3, r2
 800ad60:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800ad62:	2300      	movs	r3, #0
 800ad64:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800ad66:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	da0e      	bge.n	800ad8c <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ad6e:	78fb      	ldrb	r3, [r7, #3]
 800ad70:	f003 0307 	and.w	r3, r3, #7
 800ad74:	1c5a      	adds	r2, r3, #1
 800ad76:	4613      	mov	r3, r2
 800ad78:	009b      	lsls	r3, r3, #2
 800ad7a:	4413      	add	r3, r2
 800ad7c:	00db      	lsls	r3, r3, #3
 800ad7e:	687a      	ldr	r2, [r7, #4]
 800ad80:	4413      	add	r3, r2
 800ad82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	2201      	movs	r2, #1
 800ad88:	705a      	strb	r2, [r3, #1]
 800ad8a:	e00e      	b.n	800adaa <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ad8c:	78fb      	ldrb	r3, [r7, #3]
 800ad8e:	f003 0207 	and.w	r2, r3, #7
 800ad92:	4613      	mov	r3, r2
 800ad94:	009b      	lsls	r3, r3, #2
 800ad96:	4413      	add	r3, r2
 800ad98:	00db      	lsls	r3, r3, #3
 800ad9a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800ad9e:	687a      	ldr	r2, [r7, #4]
 800ada0:	4413      	add	r3, r2
 800ada2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	2200      	movs	r2, #0
 800ada8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800adaa:	78fb      	ldrb	r3, [r7, #3]
 800adac:	f003 0307 	and.w	r3, r3, #7
 800adb0:	b2da      	uxtb	r2, r3
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800adb6:	883a      	ldrh	r2, [r7, #0]
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	78ba      	ldrb	r2, [r7, #2]
 800adc0:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	785b      	ldrb	r3, [r3, #1]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d004      	beq.n	800add4 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	781b      	ldrb	r3, [r3, #0]
 800adce:	b29a      	uxth	r2, r3
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800add4:	78bb      	ldrb	r3, [r7, #2]
 800add6:	2b02      	cmp	r3, #2
 800add8:	d102      	bne.n	800ade0 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	2200      	movs	r2, #0
 800adde:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800ade6:	2b01      	cmp	r3, #1
 800ade8:	d101      	bne.n	800adee <HAL_PCD_EP_Open+0xa6>
 800adea:	2302      	movs	r3, #2
 800adec:	e00e      	b.n	800ae0c <HAL_PCD_EP_Open+0xc4>
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	2201      	movs	r2, #1
 800adf2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	68f9      	ldr	r1, [r7, #12]
 800adfc:	4618      	mov	r0, r3
 800adfe:	f006 f93b 	bl	8011078 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	2200      	movs	r2, #0
 800ae06:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800ae0a:	7afb      	ldrb	r3, [r7, #11]
}
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	3710      	adds	r7, #16
 800ae10:	46bd      	mov	sp, r7
 800ae12:	bd80      	pop	{r7, pc}

0800ae14 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ae14:	b580      	push	{r7, lr}
 800ae16:	b084      	sub	sp, #16
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
 800ae1c:	460b      	mov	r3, r1
 800ae1e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800ae20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	da0e      	bge.n	800ae46 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ae28:	78fb      	ldrb	r3, [r7, #3]
 800ae2a:	f003 0307 	and.w	r3, r3, #7
 800ae2e:	1c5a      	adds	r2, r3, #1
 800ae30:	4613      	mov	r3, r2
 800ae32:	009b      	lsls	r3, r3, #2
 800ae34:	4413      	add	r3, r2
 800ae36:	00db      	lsls	r3, r3, #3
 800ae38:	687a      	ldr	r2, [r7, #4]
 800ae3a:	4413      	add	r3, r2
 800ae3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	2201      	movs	r2, #1
 800ae42:	705a      	strb	r2, [r3, #1]
 800ae44:	e00e      	b.n	800ae64 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ae46:	78fb      	ldrb	r3, [r7, #3]
 800ae48:	f003 0207 	and.w	r2, r3, #7
 800ae4c:	4613      	mov	r3, r2
 800ae4e:	009b      	lsls	r3, r3, #2
 800ae50:	4413      	add	r3, r2
 800ae52:	00db      	lsls	r3, r3, #3
 800ae54:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800ae58:	687a      	ldr	r2, [r7, #4]
 800ae5a:	4413      	add	r3, r2
 800ae5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	2200      	movs	r2, #0
 800ae62:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800ae64:	78fb      	ldrb	r3, [r7, #3]
 800ae66:	f003 0307 	and.w	r3, r3, #7
 800ae6a:	b2da      	uxtb	r2, r3
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800ae76:	2b01      	cmp	r3, #1
 800ae78:	d101      	bne.n	800ae7e <HAL_PCD_EP_Close+0x6a>
 800ae7a:	2302      	movs	r3, #2
 800ae7c:	e00e      	b.n	800ae9c <HAL_PCD_EP_Close+0x88>
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	2201      	movs	r2, #1
 800ae82:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	68f9      	ldr	r1, [r7, #12]
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	f006 fc87 	bl	80117a0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	2200      	movs	r2, #0
 800ae96:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800ae9a:	2300      	movs	r3, #0
}
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	3710      	adds	r7, #16
 800aea0:	46bd      	mov	sp, r7
 800aea2:	bd80      	pop	{r7, pc}

0800aea4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800aea4:	b580      	push	{r7, lr}
 800aea6:	b086      	sub	sp, #24
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	60f8      	str	r0, [r7, #12]
 800aeac:	607a      	str	r2, [r7, #4]
 800aeae:	603b      	str	r3, [r7, #0]
 800aeb0:	460b      	mov	r3, r1
 800aeb2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800aeb4:	7afb      	ldrb	r3, [r7, #11]
 800aeb6:	f003 0207 	and.w	r2, r3, #7
 800aeba:	4613      	mov	r3, r2
 800aebc:	009b      	lsls	r3, r3, #2
 800aebe:	4413      	add	r3, r2
 800aec0:	00db      	lsls	r3, r3, #3
 800aec2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800aec6:	68fa      	ldr	r2, [r7, #12]
 800aec8:	4413      	add	r3, r2
 800aeca:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800aecc:	697b      	ldr	r3, [r7, #20]
 800aece:	687a      	ldr	r2, [r7, #4]
 800aed0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800aed2:	697b      	ldr	r3, [r7, #20]
 800aed4:	683a      	ldr	r2, [r7, #0]
 800aed6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800aed8:	697b      	ldr	r3, [r7, #20]
 800aeda:	2200      	movs	r2, #0
 800aedc:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800aede:	697b      	ldr	r3, [r7, #20]
 800aee0:	2200      	movs	r2, #0
 800aee2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800aee4:	7afb      	ldrb	r3, [r7, #11]
 800aee6:	f003 0307 	and.w	r3, r3, #7
 800aeea:	b2da      	uxtb	r2, r3
 800aeec:	697b      	ldr	r3, [r7, #20]
 800aeee:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800aef0:	7afb      	ldrb	r3, [r7, #11]
 800aef2:	f003 0307 	and.w	r3, r3, #7
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d106      	bne.n	800af08 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	6979      	ldr	r1, [r7, #20]
 800af00:	4618      	mov	r0, r3
 800af02:	f006 fe3a 	bl	8011b7a <USB_EPStartXfer>
 800af06:	e005      	b.n	800af14 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	6979      	ldr	r1, [r7, #20]
 800af0e:	4618      	mov	r0, r3
 800af10:	f006 fe33 	bl	8011b7a <USB_EPStartXfer>
  }

  return HAL_OK;
 800af14:	2300      	movs	r3, #0
}
 800af16:	4618      	mov	r0, r3
 800af18:	3718      	adds	r7, #24
 800af1a:	46bd      	mov	sp, r7
 800af1c:	bd80      	pop	{r7, pc}

0800af1e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800af1e:	b480      	push	{r7}
 800af20:	b083      	sub	sp, #12
 800af22:	af00      	add	r7, sp, #0
 800af24:	6078      	str	r0, [r7, #4]
 800af26:	460b      	mov	r3, r1
 800af28:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800af2a:	78fb      	ldrb	r3, [r7, #3]
 800af2c:	f003 0207 	and.w	r2, r3, #7
 800af30:	6879      	ldr	r1, [r7, #4]
 800af32:	4613      	mov	r3, r2
 800af34:	009b      	lsls	r3, r3, #2
 800af36:	4413      	add	r3, r2
 800af38:	00db      	lsls	r3, r3, #3
 800af3a:	440b      	add	r3, r1
 800af3c:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800af40:	681b      	ldr	r3, [r3, #0]
}
 800af42:	4618      	mov	r0, r3
 800af44:	370c      	adds	r7, #12
 800af46:	46bd      	mov	sp, r7
 800af48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4c:	4770      	bx	lr

0800af4e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800af4e:	b580      	push	{r7, lr}
 800af50:	b086      	sub	sp, #24
 800af52:	af00      	add	r7, sp, #0
 800af54:	60f8      	str	r0, [r7, #12]
 800af56:	607a      	str	r2, [r7, #4]
 800af58:	603b      	str	r3, [r7, #0]
 800af5a:	460b      	mov	r3, r1
 800af5c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800af5e:	7afb      	ldrb	r3, [r7, #11]
 800af60:	f003 0307 	and.w	r3, r3, #7
 800af64:	1c5a      	adds	r2, r3, #1
 800af66:	4613      	mov	r3, r2
 800af68:	009b      	lsls	r3, r3, #2
 800af6a:	4413      	add	r3, r2
 800af6c:	00db      	lsls	r3, r3, #3
 800af6e:	68fa      	ldr	r2, [r7, #12]
 800af70:	4413      	add	r3, r2
 800af72:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800af74:	697b      	ldr	r3, [r7, #20]
 800af76:	687a      	ldr	r2, [r7, #4]
 800af78:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800af7a:	697b      	ldr	r3, [r7, #20]
 800af7c:	683a      	ldr	r2, [r7, #0]
 800af7e:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800af80:	697b      	ldr	r3, [r7, #20]
 800af82:	2201      	movs	r2, #1
 800af84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800af88:	697b      	ldr	r3, [r7, #20]
 800af8a:	683a      	ldr	r2, [r7, #0]
 800af8c:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800af8e:	697b      	ldr	r3, [r7, #20]
 800af90:	2200      	movs	r2, #0
 800af92:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800af94:	697b      	ldr	r3, [r7, #20]
 800af96:	2201      	movs	r2, #1
 800af98:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800af9a:	7afb      	ldrb	r3, [r7, #11]
 800af9c:	f003 0307 	and.w	r3, r3, #7
 800afa0:	b2da      	uxtb	r2, r3
 800afa2:	697b      	ldr	r3, [r7, #20]
 800afa4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800afa6:	7afb      	ldrb	r3, [r7, #11]
 800afa8:	f003 0307 	and.w	r3, r3, #7
 800afac:	2b00      	cmp	r3, #0
 800afae:	d106      	bne.n	800afbe <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	6979      	ldr	r1, [r7, #20]
 800afb6:	4618      	mov	r0, r3
 800afb8:	f006 fddf 	bl	8011b7a <USB_EPStartXfer>
 800afbc:	e005      	b.n	800afca <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	6979      	ldr	r1, [r7, #20]
 800afc4:	4618      	mov	r0, r3
 800afc6:	f006 fdd8 	bl	8011b7a <USB_EPStartXfer>
  }

  return HAL_OK;
 800afca:	2300      	movs	r3, #0
}
 800afcc:	4618      	mov	r0, r3
 800afce:	3718      	adds	r7, #24
 800afd0:	46bd      	mov	sp, r7
 800afd2:	bd80      	pop	{r7, pc}

0800afd4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	b084      	sub	sp, #16
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]
 800afdc:	460b      	mov	r3, r1
 800afde:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800afe0:	78fb      	ldrb	r3, [r7, #3]
 800afe2:	f003 0207 	and.w	r2, r3, #7
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	685b      	ldr	r3, [r3, #4]
 800afea:	429a      	cmp	r2, r3
 800afec:	d901      	bls.n	800aff2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800afee:	2301      	movs	r3, #1
 800aff0:	e03e      	b.n	800b070 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800aff2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	da0e      	bge.n	800b018 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800affa:	78fb      	ldrb	r3, [r7, #3]
 800affc:	f003 0307 	and.w	r3, r3, #7
 800b000:	1c5a      	adds	r2, r3, #1
 800b002:	4613      	mov	r3, r2
 800b004:	009b      	lsls	r3, r3, #2
 800b006:	4413      	add	r3, r2
 800b008:	00db      	lsls	r3, r3, #3
 800b00a:	687a      	ldr	r2, [r7, #4]
 800b00c:	4413      	add	r3, r2
 800b00e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	2201      	movs	r2, #1
 800b014:	705a      	strb	r2, [r3, #1]
 800b016:	e00c      	b.n	800b032 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800b018:	78fa      	ldrb	r2, [r7, #3]
 800b01a:	4613      	mov	r3, r2
 800b01c:	009b      	lsls	r3, r3, #2
 800b01e:	4413      	add	r3, r2
 800b020:	00db      	lsls	r3, r3, #3
 800b022:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800b026:	687a      	ldr	r2, [r7, #4]
 800b028:	4413      	add	r3, r2
 800b02a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	2200      	movs	r2, #0
 800b030:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	2201      	movs	r2, #1
 800b036:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b038:	78fb      	ldrb	r3, [r7, #3]
 800b03a:	f003 0307 	and.w	r3, r3, #7
 800b03e:	b2da      	uxtb	r2, r3
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b04a:	2b01      	cmp	r3, #1
 800b04c:	d101      	bne.n	800b052 <HAL_PCD_EP_SetStall+0x7e>
 800b04e:	2302      	movs	r3, #2
 800b050:	e00e      	b.n	800b070 <HAL_PCD_EP_SetStall+0x9c>
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	2201      	movs	r2, #1
 800b056:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	68f9      	ldr	r1, [r7, #12]
 800b060:	4618      	mov	r0, r3
 800b062:	f008 f8c0 	bl	80131e6 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	2200      	movs	r2, #0
 800b06a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800b06e:	2300      	movs	r3, #0
}
 800b070:	4618      	mov	r0, r3
 800b072:	3710      	adds	r7, #16
 800b074:	46bd      	mov	sp, r7
 800b076:	bd80      	pop	{r7, pc}

0800b078 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b084      	sub	sp, #16
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
 800b080:	460b      	mov	r3, r1
 800b082:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800b084:	78fb      	ldrb	r3, [r7, #3]
 800b086:	f003 020f 	and.w	r2, r3, #15
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	685b      	ldr	r3, [r3, #4]
 800b08e:	429a      	cmp	r2, r3
 800b090:	d901      	bls.n	800b096 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800b092:	2301      	movs	r3, #1
 800b094:	e040      	b.n	800b118 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800b096:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	da0e      	bge.n	800b0bc <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b09e:	78fb      	ldrb	r3, [r7, #3]
 800b0a0:	f003 0307 	and.w	r3, r3, #7
 800b0a4:	1c5a      	adds	r2, r3, #1
 800b0a6:	4613      	mov	r3, r2
 800b0a8:	009b      	lsls	r3, r3, #2
 800b0aa:	4413      	add	r3, r2
 800b0ac:	00db      	lsls	r3, r3, #3
 800b0ae:	687a      	ldr	r2, [r7, #4]
 800b0b0:	4413      	add	r3, r2
 800b0b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	2201      	movs	r2, #1
 800b0b8:	705a      	strb	r2, [r3, #1]
 800b0ba:	e00e      	b.n	800b0da <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b0bc:	78fb      	ldrb	r3, [r7, #3]
 800b0be:	f003 0207 	and.w	r2, r3, #7
 800b0c2:	4613      	mov	r3, r2
 800b0c4:	009b      	lsls	r3, r3, #2
 800b0c6:	4413      	add	r3, r2
 800b0c8:	00db      	lsls	r3, r3, #3
 800b0ca:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800b0ce:	687a      	ldr	r2, [r7, #4]
 800b0d0:	4413      	add	r3, r2
 800b0d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	2200      	movs	r2, #0
 800b0d8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	2200      	movs	r2, #0
 800b0de:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b0e0:	78fb      	ldrb	r3, [r7, #3]
 800b0e2:	f003 0307 	and.w	r3, r3, #7
 800b0e6:	b2da      	uxtb	r2, r3
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b0f2:	2b01      	cmp	r3, #1
 800b0f4:	d101      	bne.n	800b0fa <HAL_PCD_EP_ClrStall+0x82>
 800b0f6:	2302      	movs	r3, #2
 800b0f8:	e00e      	b.n	800b118 <HAL_PCD_EP_ClrStall+0xa0>
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	2201      	movs	r2, #1
 800b0fe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	68f9      	ldr	r1, [r7, #12]
 800b108:	4618      	mov	r0, r3
 800b10a:	f008 f8bd 	bl	8013288 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	2200      	movs	r2, #0
 800b112:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800b116:	2300      	movs	r3, #0
}
 800b118:	4618      	mov	r0, r3
 800b11a:	3710      	adds	r7, #16
 800b11c:	46bd      	mov	sp, r7
 800b11e:	bd80      	pop	{r7, pc}

0800b120 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800b120:	b580      	push	{r7, lr}
 800b122:	b096      	sub	sp, #88	; 0x58
 800b124:	af00      	add	r7, sp, #0
 800b126:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800b128:	e3a9      	b.n	800b87e <PCD_EP_ISR_Handler+0x75e>
  {
    wIstr = hpcd->Instance->ISTR;
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b132:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800b136:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800b13a:	b2db      	uxtb	r3, r3
 800b13c:	f003 030f 	and.w	r3, r3, #15
 800b140:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 800b144:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800b148:	2b00      	cmp	r3, #0
 800b14a:	f040 8164 	bne.w	800b416 <PCD_EP_ISR_Handler+0x2f6>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800b14e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800b152:	f003 0310 	and.w	r3, r3, #16
 800b156:	2b00      	cmp	r3, #0
 800b158:	d152      	bne.n	800b200 <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	881b      	ldrh	r3, [r3, #0]
 800b160:	b29b      	uxth	r3, r3
 800b162:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800b166:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b16a:	81fb      	strh	r3, [r7, #14]
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681a      	ldr	r2, [r3, #0]
 800b170:	89fb      	ldrh	r3, [r7, #14]
 800b172:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b176:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b17a:	b29b      	uxth	r3, r3
 800b17c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	3328      	adds	r3, #40	; 0x28
 800b182:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b18c:	b29b      	uxth	r3, r3
 800b18e:	461a      	mov	r2, r3
 800b190:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b192:	781b      	ldrb	r3, [r3, #0]
 800b194:	00db      	lsls	r3, r3, #3
 800b196:	4413      	add	r3, r2
 800b198:	3302      	adds	r3, #2
 800b19a:	005b      	lsls	r3, r3, #1
 800b19c:	687a      	ldr	r2, [r7, #4]
 800b19e:	6812      	ldr	r2, [r2, #0]
 800b1a0:	4413      	add	r3, r2
 800b1a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b1a6:	881b      	ldrh	r3, [r3, #0]
 800b1a8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800b1ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1ae:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800b1b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1b2:	695a      	ldr	r2, [r3, #20]
 800b1b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1b6:	69db      	ldr	r3, [r3, #28]
 800b1b8:	441a      	add	r2, r3
 800b1ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1bc:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800b1be:	2100      	movs	r1, #0
 800b1c0:	6878      	ldr	r0, [r7, #4]
 800b1c2:	f024 f89a 	bl	802f2fa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b1cc:	b2db      	uxtb	r3, r3
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	f000 8355 	beq.w	800b87e <PCD_EP_ISR_Handler+0x75e>
 800b1d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1d6:	699b      	ldr	r3, [r3, #24]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	f040 8350 	bne.w	800b87e <PCD_EP_ISR_Handler+0x75e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b1e4:	b2db      	uxtb	r3, r3
 800b1e6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b1ea:	b2da      	uxtb	r2, r3
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	b292      	uxth	r2, r2
 800b1f2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	2200      	movs	r2, #0
 800b1fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800b1fe:	e33e      	b.n	800b87e <PCD_EP_ISR_Handler+0x75e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800b206:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	881b      	ldrh	r3, [r3, #0]
 800b20e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800b212:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800b216:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d034      	beq.n	800b288 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b226:	b29b      	uxth	r3, r3
 800b228:	461a      	mov	r2, r3
 800b22a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b22c:	781b      	ldrb	r3, [r3, #0]
 800b22e:	00db      	lsls	r3, r3, #3
 800b230:	4413      	add	r3, r2
 800b232:	3306      	adds	r3, #6
 800b234:	005b      	lsls	r3, r3, #1
 800b236:	687a      	ldr	r2, [r7, #4]
 800b238:	6812      	ldr	r2, [r2, #0]
 800b23a:	4413      	add	r3, r2
 800b23c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b240:	881b      	ldrh	r3, [r3, #0]
 800b242:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800b246:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b248:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	6818      	ldr	r0, [r3, #0]
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800b254:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b256:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800b258:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b25a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800b25c:	b29b      	uxth	r3, r3
 800b25e:	f008 f936 	bl	80134ce <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	881b      	ldrh	r3, [r3, #0]
 800b268:	b29a      	uxth	r2, r3
 800b26a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800b26e:	4013      	ands	r3, r2
 800b270:	823b      	strh	r3, [r7, #16]
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	8a3a      	ldrh	r2, [r7, #16]
 800b278:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b27c:	b292      	uxth	r2, r2
 800b27e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800b280:	6878      	ldr	r0, [r7, #4]
 800b282:	f024 f80d 	bl	802f2a0 <HAL_PCD_SetupStageCallback>
 800b286:	e2fa      	b.n	800b87e <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800b288:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	f280 82f6 	bge.w	800b87e <PCD_EP_ISR_Handler+0x75e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	881b      	ldrh	r3, [r3, #0]
 800b298:	b29a      	uxth	r2, r3
 800b29a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800b29e:	4013      	ands	r3, r2
 800b2a0:	83fb      	strh	r3, [r7, #30]
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	8bfa      	ldrh	r2, [r7, #30]
 800b2a8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b2ac:	b292      	uxth	r2, r2
 800b2ae:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b2b8:	b29b      	uxth	r3, r3
 800b2ba:	461a      	mov	r2, r3
 800b2bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b2be:	781b      	ldrb	r3, [r3, #0]
 800b2c0:	00db      	lsls	r3, r3, #3
 800b2c2:	4413      	add	r3, r2
 800b2c4:	3306      	adds	r3, #6
 800b2c6:	005b      	lsls	r3, r3, #1
 800b2c8:	687a      	ldr	r2, [r7, #4]
 800b2ca:	6812      	ldr	r2, [r2, #0]
 800b2cc:	4413      	add	r3, r2
 800b2ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b2d2:	881b      	ldrh	r3, [r3, #0]
 800b2d4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800b2d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b2da:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800b2dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b2de:	69db      	ldr	r3, [r3, #28]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d019      	beq.n	800b318 <PCD_EP_ISR_Handler+0x1f8>
 800b2e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b2e6:	695b      	ldr	r3, [r3, #20]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d015      	beq.n	800b318 <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	6818      	ldr	r0, [r3, #0]
 800b2f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b2f2:	6959      	ldr	r1, [r3, #20]
 800b2f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b2f6:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800b2f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b2fa:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800b2fc:	b29b      	uxth	r3, r3
 800b2fe:	f008 f8e6 	bl	80134ce <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800b302:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b304:	695a      	ldr	r2, [r3, #20]
 800b306:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b308:	69db      	ldr	r3, [r3, #28]
 800b30a:	441a      	add	r2, r3
 800b30c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b30e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800b310:	2100      	movs	r1, #0
 800b312:	6878      	ldr	r0, [r7, #4]
 800b314:	f023 ffd6 	bl	802f2c4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	881b      	ldrh	r3, [r3, #0]
 800b31e:	b29b      	uxth	r3, r3
 800b320:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b324:	2b00      	cmp	r3, #0
 800b326:	f040 82aa 	bne.w	800b87e <PCD_EP_ISR_Handler+0x75e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	61bb      	str	r3, [r7, #24]
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b338:	b29b      	uxth	r3, r3
 800b33a:	461a      	mov	r2, r3
 800b33c:	69bb      	ldr	r3, [r7, #24]
 800b33e:	4413      	add	r3, r2
 800b340:	61bb      	str	r3, [r7, #24]
 800b342:	69bb      	ldr	r3, [r7, #24]
 800b344:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b348:	617b      	str	r3, [r7, #20]
 800b34a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b34c:	691b      	ldr	r3, [r3, #16]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d112      	bne.n	800b378 <PCD_EP_ISR_Handler+0x258>
 800b352:	697b      	ldr	r3, [r7, #20]
 800b354:	881b      	ldrh	r3, [r3, #0]
 800b356:	b29b      	uxth	r3, r3
 800b358:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b35c:	b29a      	uxth	r2, r3
 800b35e:	697b      	ldr	r3, [r7, #20]
 800b360:	801a      	strh	r2, [r3, #0]
 800b362:	697b      	ldr	r3, [r7, #20]
 800b364:	881b      	ldrh	r3, [r3, #0]
 800b366:	b29b      	uxth	r3, r3
 800b368:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b36c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b370:	b29a      	uxth	r2, r3
 800b372:	697b      	ldr	r3, [r7, #20]
 800b374:	801a      	strh	r2, [r3, #0]
 800b376:	e02f      	b.n	800b3d8 <PCD_EP_ISR_Handler+0x2b8>
 800b378:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b37a:	691b      	ldr	r3, [r3, #16]
 800b37c:	2b3e      	cmp	r3, #62	; 0x3e
 800b37e:	d813      	bhi.n	800b3a8 <PCD_EP_ISR_Handler+0x288>
 800b380:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b382:	691b      	ldr	r3, [r3, #16]
 800b384:	085b      	lsrs	r3, r3, #1
 800b386:	647b      	str	r3, [r7, #68]	; 0x44
 800b388:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b38a:	691b      	ldr	r3, [r3, #16]
 800b38c:	f003 0301 	and.w	r3, r3, #1
 800b390:	2b00      	cmp	r3, #0
 800b392:	d002      	beq.n	800b39a <PCD_EP_ISR_Handler+0x27a>
 800b394:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b396:	3301      	adds	r3, #1
 800b398:	647b      	str	r3, [r7, #68]	; 0x44
 800b39a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b39c:	b29b      	uxth	r3, r3
 800b39e:	029b      	lsls	r3, r3, #10
 800b3a0:	b29a      	uxth	r2, r3
 800b3a2:	697b      	ldr	r3, [r7, #20]
 800b3a4:	801a      	strh	r2, [r3, #0]
 800b3a6:	e017      	b.n	800b3d8 <PCD_EP_ISR_Handler+0x2b8>
 800b3a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b3aa:	691b      	ldr	r3, [r3, #16]
 800b3ac:	095b      	lsrs	r3, r3, #5
 800b3ae:	647b      	str	r3, [r7, #68]	; 0x44
 800b3b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b3b2:	691b      	ldr	r3, [r3, #16]
 800b3b4:	f003 031f 	and.w	r3, r3, #31
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d102      	bne.n	800b3c2 <PCD_EP_ISR_Handler+0x2a2>
 800b3bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b3be:	3b01      	subs	r3, #1
 800b3c0:	647b      	str	r3, [r7, #68]	; 0x44
 800b3c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b3c4:	b29b      	uxth	r3, r3
 800b3c6:	029b      	lsls	r3, r3, #10
 800b3c8:	b29b      	uxth	r3, r3
 800b3ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b3ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b3d2:	b29a      	uxth	r2, r3
 800b3d4:	697b      	ldr	r3, [r7, #20]
 800b3d6:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	881b      	ldrh	r3, [r3, #0]
 800b3de:	b29b      	uxth	r3, r3
 800b3e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b3e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b3e8:	827b      	strh	r3, [r7, #18]
 800b3ea:	8a7b      	ldrh	r3, [r7, #18]
 800b3ec:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b3f0:	827b      	strh	r3, [r7, #18]
 800b3f2:	8a7b      	ldrh	r3, [r7, #18]
 800b3f4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b3f8:	827b      	strh	r3, [r7, #18]
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	681a      	ldr	r2, [r3, #0]
 800b3fe:	8a7b      	ldrh	r3, [r7, #18]
 800b400:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b404:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b408:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b40c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b410:	b29b      	uxth	r3, r3
 800b412:	8013      	strh	r3, [r2, #0]
 800b414:	e233      	b.n	800b87e <PCD_EP_ISR_Handler+0x75e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	461a      	mov	r2, r3
 800b41c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800b420:	009b      	lsls	r3, r3, #2
 800b422:	4413      	add	r3, r2
 800b424:	881b      	ldrh	r3, [r3, #0]
 800b426:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800b42a:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800b42e:	2b00      	cmp	r3, #0
 800b430:	f280 80fc 	bge.w	800b62c <PCD_EP_ISR_Handler+0x50c>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	461a      	mov	r2, r3
 800b43a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800b43e:	009b      	lsls	r3, r3, #2
 800b440:	4413      	add	r3, r2
 800b442:	881b      	ldrh	r3, [r3, #0]
 800b444:	b29a      	uxth	r2, r3
 800b446:	f640 738f 	movw	r3, #3983	; 0xf8f
 800b44a:	4013      	ands	r3, r2
 800b44c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	461a      	mov	r2, r3
 800b456:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800b45a:	009b      	lsls	r3, r3, #2
 800b45c:	4413      	add	r3, r2
 800b45e:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800b462:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b466:	b292      	uxth	r2, r2
 800b468:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800b46a:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 800b46e:	4613      	mov	r3, r2
 800b470:	009b      	lsls	r3, r3, #2
 800b472:	4413      	add	r3, r2
 800b474:	00db      	lsls	r3, r3, #3
 800b476:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800b47a:	687a      	ldr	r2, [r7, #4]
 800b47c:	4413      	add	r3, r2
 800b47e:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800b480:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b482:	7b1b      	ldrb	r3, [r3, #12]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d125      	bne.n	800b4d4 <PCD_EP_ISR_Handler+0x3b4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b490:	b29b      	uxth	r3, r3
 800b492:	461a      	mov	r2, r3
 800b494:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b496:	781b      	ldrb	r3, [r3, #0]
 800b498:	00db      	lsls	r3, r3, #3
 800b49a:	4413      	add	r3, r2
 800b49c:	3306      	adds	r3, #6
 800b49e:	005b      	lsls	r3, r3, #1
 800b4a0:	687a      	ldr	r2, [r7, #4]
 800b4a2:	6812      	ldr	r2, [r2, #0]
 800b4a4:	4413      	add	r3, r2
 800b4a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b4aa:	881b      	ldrh	r3, [r3, #0]
 800b4ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b4b0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 800b4b4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	f000 8092 	beq.w	800b5e2 <PCD_EP_ISR_Handler+0x4c2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	6818      	ldr	r0, [r3, #0]
 800b4c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b4c4:	6959      	ldr	r1, [r3, #20]
 800b4c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b4c8:	88da      	ldrh	r2, [r3, #6]
 800b4ca:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800b4ce:	f007 fffe 	bl	80134ce <USB_ReadPMA>
 800b4d2:	e086      	b.n	800b5e2 <PCD_EP_ISR_Handler+0x4c2>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800b4d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b4d6:	78db      	ldrb	r3, [r3, #3]
 800b4d8:	2b02      	cmp	r3, #2
 800b4da:	d10a      	bne.n	800b4f2 <PCD_EP_ISR_Handler+0x3d2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800b4dc:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800b4e0:	461a      	mov	r2, r3
 800b4e2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800b4e4:	6878      	ldr	r0, [r7, #4]
 800b4e6:	f000 f9d8 	bl	800b89a <HAL_PCD_EP_DB_Receive>
 800b4ea:	4603      	mov	r3, r0
 800b4ec:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800b4f0:	e077      	b.n	800b5e2 <PCD_EP_ISR_Handler+0x4c2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	461a      	mov	r2, r3
 800b4f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b4fa:	781b      	ldrb	r3, [r3, #0]
 800b4fc:	009b      	lsls	r3, r3, #2
 800b4fe:	4413      	add	r3, r2
 800b500:	881b      	ldrh	r3, [r3, #0]
 800b502:	b29b      	uxth	r3, r3
 800b504:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b508:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b50c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	461a      	mov	r2, r3
 800b516:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b518:	781b      	ldrb	r3, [r3, #0]
 800b51a:	009b      	lsls	r3, r3, #2
 800b51c:	441a      	add	r2, r3
 800b51e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800b522:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b526:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b52a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b52e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b532:	b29b      	uxth	r3, r3
 800b534:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	461a      	mov	r2, r3
 800b53c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b53e:	781b      	ldrb	r3, [r3, #0]
 800b540:	009b      	lsls	r3, r3, #2
 800b542:	4413      	add	r3, r2
 800b544:	881b      	ldrh	r3, [r3, #0]
 800b546:	b29b      	uxth	r3, r3
 800b548:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d024      	beq.n	800b59a <PCD_EP_ISR_Handler+0x47a>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b558:	b29b      	uxth	r3, r3
 800b55a:	461a      	mov	r2, r3
 800b55c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b55e:	781b      	ldrb	r3, [r3, #0]
 800b560:	00db      	lsls	r3, r3, #3
 800b562:	4413      	add	r3, r2
 800b564:	3302      	adds	r3, #2
 800b566:	005b      	lsls	r3, r3, #1
 800b568:	687a      	ldr	r2, [r7, #4]
 800b56a:	6812      	ldr	r2, [r2, #0]
 800b56c:	4413      	add	r3, r2
 800b56e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b572:	881b      	ldrh	r3, [r3, #0]
 800b574:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b578:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 800b57c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800b580:	2b00      	cmp	r3, #0
 800b582:	d02e      	beq.n	800b5e2 <PCD_EP_ISR_Handler+0x4c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	6818      	ldr	r0, [r3, #0]
 800b588:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b58a:	6959      	ldr	r1, [r3, #20]
 800b58c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b58e:	891a      	ldrh	r2, [r3, #8]
 800b590:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800b594:	f007 ff9b 	bl	80134ce <USB_ReadPMA>
 800b598:	e023      	b.n	800b5e2 <PCD_EP_ISR_Handler+0x4c2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b5a2:	b29b      	uxth	r3, r3
 800b5a4:	461a      	mov	r2, r3
 800b5a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5a8:	781b      	ldrb	r3, [r3, #0]
 800b5aa:	00db      	lsls	r3, r3, #3
 800b5ac:	4413      	add	r3, r2
 800b5ae:	3306      	adds	r3, #6
 800b5b0:	005b      	lsls	r3, r3, #1
 800b5b2:	687a      	ldr	r2, [r7, #4]
 800b5b4:	6812      	ldr	r2, [r2, #0]
 800b5b6:	4413      	add	r3, r2
 800b5b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b5bc:	881b      	ldrh	r3, [r3, #0]
 800b5be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b5c2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 800b5c6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d009      	beq.n	800b5e2 <PCD_EP_ISR_Handler+0x4c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	6818      	ldr	r0, [r3, #0]
 800b5d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5d4:	6959      	ldr	r1, [r3, #20]
 800b5d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5d8:	895a      	ldrh	r2, [r3, #10]
 800b5da:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800b5de:	f007 ff76 	bl	80134ce <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800b5e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5e4:	69da      	ldr	r2, [r3, #28]
 800b5e6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800b5ea:	441a      	add	r2, r3
 800b5ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5ee:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800b5f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5f2:	695a      	ldr	r2, [r3, #20]
 800b5f4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800b5f8:	441a      	add	r2, r3
 800b5fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5fc:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800b5fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b600:	699b      	ldr	r3, [r3, #24]
 800b602:	2b00      	cmp	r3, #0
 800b604:	d005      	beq.n	800b612 <PCD_EP_ISR_Handler+0x4f2>
 800b606:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800b60a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b60c:	691b      	ldr	r3, [r3, #16]
 800b60e:	429a      	cmp	r2, r3
 800b610:	d206      	bcs.n	800b620 <PCD_EP_ISR_Handler+0x500>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800b612:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b614:	781b      	ldrb	r3, [r3, #0]
 800b616:	4619      	mov	r1, r3
 800b618:	6878      	ldr	r0, [r7, #4]
 800b61a:	f023 fe53 	bl	802f2c4 <HAL_PCD_DataOutStageCallback>
 800b61e:	e005      	b.n	800b62c <PCD_EP_ISR_Handler+0x50c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800b626:	4618      	mov	r0, r3
 800b628:	f006 faa7 	bl	8011b7a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800b62c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800b630:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b634:	2b00      	cmp	r3, #0
 800b636:	f000 8122 	beq.w	800b87e <PCD_EP_ISR_Handler+0x75e>
      {
        ep = &hpcd->IN_ep[epindex];
 800b63a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800b63e:	1c5a      	adds	r2, r3, #1
 800b640:	4613      	mov	r3, r2
 800b642:	009b      	lsls	r3, r3, #2
 800b644:	4413      	add	r3, r2
 800b646:	00db      	lsls	r3, r3, #3
 800b648:	687a      	ldr	r2, [r7, #4]
 800b64a:	4413      	add	r3, r2
 800b64c:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	461a      	mov	r2, r3
 800b654:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800b658:	009b      	lsls	r3, r3, #2
 800b65a:	4413      	add	r3, r2
 800b65c:	881b      	ldrh	r3, [r3, #0]
 800b65e:	b29b      	uxth	r3, r3
 800b660:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800b664:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b668:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	461a      	mov	r2, r3
 800b672:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800b676:	009b      	lsls	r3, r3, #2
 800b678:	441a      	add	r2, r3
 800b67a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b67e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b682:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b686:	b29b      	uxth	r3, r3
 800b688:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 800b68a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b68c:	78db      	ldrb	r3, [r3, #3]
 800b68e:	2b02      	cmp	r3, #2
 800b690:	f000 809d 	beq.w	800b7ce <PCD_EP_ISR_Handler+0x6ae>
        {
          ep->xfer_len = 0U;
 800b694:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b696:	2200      	movs	r2, #0
 800b698:	619a      	str	r2, [r3, #24]

          if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800b69a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800b69e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d046      	beq.n	800b734 <PCD_EP_ISR_Handler+0x614>
          {
            PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800b6a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6a8:	785b      	ldrb	r3, [r3, #1]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d126      	bne.n	800b6fc <PCD_EP_ISR_Handler+0x5dc>
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	627b      	str	r3, [r7, #36]	; 0x24
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b6bc:	b29b      	uxth	r3, r3
 800b6be:	461a      	mov	r2, r3
 800b6c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6c2:	4413      	add	r3, r2
 800b6c4:	627b      	str	r3, [r7, #36]	; 0x24
 800b6c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6c8:	781b      	ldrb	r3, [r3, #0]
 800b6ca:	011a      	lsls	r2, r3, #4
 800b6cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6ce:	4413      	add	r3, r2
 800b6d0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b6d4:	623b      	str	r3, [r7, #32]
 800b6d6:	6a3b      	ldr	r3, [r7, #32]
 800b6d8:	881b      	ldrh	r3, [r3, #0]
 800b6da:	b29b      	uxth	r3, r3
 800b6dc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b6e0:	b29a      	uxth	r2, r3
 800b6e2:	6a3b      	ldr	r3, [r7, #32]
 800b6e4:	801a      	strh	r2, [r3, #0]
 800b6e6:	6a3b      	ldr	r3, [r7, #32]
 800b6e8:	881b      	ldrh	r3, [r3, #0]
 800b6ea:	b29b      	uxth	r3, r3
 800b6ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b6f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b6f4:	b29a      	uxth	r2, r3
 800b6f6:	6a3b      	ldr	r3, [r7, #32]
 800b6f8:	801a      	strh	r2, [r3, #0]
 800b6fa:	e061      	b.n	800b7c0 <PCD_EP_ISR_Handler+0x6a0>
 800b6fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6fe:	785b      	ldrb	r3, [r3, #1]
 800b700:	2b01      	cmp	r3, #1
 800b702:	d15d      	bne.n	800b7c0 <PCD_EP_ISR_Handler+0x6a0>
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b712:	b29b      	uxth	r3, r3
 800b714:	461a      	mov	r2, r3
 800b716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b718:	4413      	add	r3, r2
 800b71a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b71c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b71e:	781b      	ldrb	r3, [r3, #0]
 800b720:	011a      	lsls	r2, r3, #4
 800b722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b724:	4413      	add	r3, r2
 800b726:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b72a:	62bb      	str	r3, [r7, #40]	; 0x28
 800b72c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b72e:	2200      	movs	r2, #0
 800b730:	801a      	strh	r2, [r3, #0]
 800b732:	e045      	b.n	800b7c0 <PCD_EP_ISR_Handler+0x6a0>
          }
          else
          {
            PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b73a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b73c:	785b      	ldrb	r3, [r3, #1]
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d126      	bne.n	800b790 <PCD_EP_ISR_Handler+0x670>
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	637b      	str	r3, [r7, #52]	; 0x34
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b750:	b29b      	uxth	r3, r3
 800b752:	461a      	mov	r2, r3
 800b754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b756:	4413      	add	r3, r2
 800b758:	637b      	str	r3, [r7, #52]	; 0x34
 800b75a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b75c:	781b      	ldrb	r3, [r3, #0]
 800b75e:	011a      	lsls	r2, r3, #4
 800b760:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b762:	4413      	add	r3, r2
 800b764:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b768:	633b      	str	r3, [r7, #48]	; 0x30
 800b76a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b76c:	881b      	ldrh	r3, [r3, #0]
 800b76e:	b29b      	uxth	r3, r3
 800b770:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b774:	b29a      	uxth	r2, r3
 800b776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b778:	801a      	strh	r2, [r3, #0]
 800b77a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b77c:	881b      	ldrh	r3, [r3, #0]
 800b77e:	b29b      	uxth	r3, r3
 800b780:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b784:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b788:	b29a      	uxth	r2, r3
 800b78a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b78c:	801a      	strh	r2, [r3, #0]
 800b78e:	e017      	b.n	800b7c0 <PCD_EP_ISR_Handler+0x6a0>
 800b790:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b792:	785b      	ldrb	r3, [r3, #1]
 800b794:	2b01      	cmp	r3, #1
 800b796:	d113      	bne.n	800b7c0 <PCD_EP_ISR_Handler+0x6a0>
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b7a0:	b29b      	uxth	r3, r3
 800b7a2:	461a      	mov	r2, r3
 800b7a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7a6:	4413      	add	r3, r2
 800b7a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b7aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b7ac:	781b      	ldrb	r3, [r3, #0]
 800b7ae:	011a      	lsls	r2, r3, #4
 800b7b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7b2:	4413      	add	r3, r2
 800b7b4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b7b8:	63bb      	str	r3, [r7, #56]	; 0x38
 800b7ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7bc:	2200      	movs	r2, #0
 800b7be:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800b7c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b7c2:	781b      	ldrb	r3, [r3, #0]
 800b7c4:	4619      	mov	r1, r3
 800b7c6:	6878      	ldr	r0, [r7, #4]
 800b7c8:	f023 fd97 	bl	802f2fa <HAL_PCD_DataInStageCallback>
 800b7cc:	e057      	b.n	800b87e <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        /* Manage Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U))
 800b7ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b7d0:	78db      	ldrb	r3, [r3, #3]
 800b7d2:	2b02      	cmp	r3, #2
 800b7d4:	d14c      	bne.n	800b870 <PCD_EP_ISR_Handler+0x750>
 800b7d6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800b7da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d146      	bne.n	800b870 <PCD_EP_ISR_Handler+0x750>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b7ea:	b29b      	uxth	r3, r3
 800b7ec:	461a      	mov	r2, r3
 800b7ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b7f0:	781b      	ldrb	r3, [r3, #0]
 800b7f2:	00db      	lsls	r3, r3, #3
 800b7f4:	4413      	add	r3, r2
 800b7f6:	3302      	adds	r3, #2
 800b7f8:	005b      	lsls	r3, r3, #1
 800b7fa:	687a      	ldr	r2, [r7, #4]
 800b7fc:	6812      	ldr	r2, [r2, #0]
 800b7fe:	4413      	add	r3, r2
 800b800:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b804:	881b      	ldrh	r3, [r3, #0]
 800b806:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b80a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

          if (ep->xfer_len > TxByteNbre)
 800b80e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b810:	699a      	ldr	r2, [r3, #24]
 800b812:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b816:	429a      	cmp	r2, r3
 800b818:	d907      	bls.n	800b82a <PCD_EP_ISR_Handler+0x70a>
          {
            ep->xfer_len -= TxByteNbre;
 800b81a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b81c:	699a      	ldr	r2, [r3, #24]
 800b81e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b822:	1ad2      	subs	r2, r2, r3
 800b824:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b826:	619a      	str	r2, [r3, #24]
 800b828:	e002      	b.n	800b830 <PCD_EP_ISR_Handler+0x710>
          }
          else
          {
            ep->xfer_len = 0U;
 800b82a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b82c:	2200      	movs	r2, #0
 800b82e:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800b830:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b832:	699b      	ldr	r3, [r3, #24]
 800b834:	2b00      	cmp	r3, #0
 800b836:	d106      	bne.n	800b846 <PCD_EP_ISR_Handler+0x726>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800b838:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b83a:	781b      	ldrb	r3, [r3, #0]
 800b83c:	4619      	mov	r1, r3
 800b83e:	6878      	ldr	r0, [r7, #4]
 800b840:	f023 fd5b 	bl	802f2fa <HAL_PCD_DataInStageCallback>
 800b844:	e01b      	b.n	800b87e <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 800b846:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b848:	695a      	ldr	r2, [r3, #20]
 800b84a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b84e:	441a      	add	r2, r3
 800b850:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b852:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800b854:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b856:	69da      	ldr	r2, [r3, #28]
 800b858:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b85c:	441a      	add	r2, r3
 800b85e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b860:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800b868:	4618      	mov	r0, r3
 800b86a:	f006 f986 	bl	8011b7a <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 800b86e:	e006      	b.n	800b87e <PCD_EP_ISR_Handler+0x75e>
          }
        }
        /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800b870:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800b874:	461a      	mov	r2, r3
 800b876:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800b878:	6878      	ldr	r0, [r7, #4]
 800b87a:	f000 f91b 	bl	800bab4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b886:	b29b      	uxth	r3, r3
 800b888:	b21b      	sxth	r3, r3
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	f6ff ac4d 	blt.w	800b12a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800b890:	2300      	movs	r3, #0
}
 800b892:	4618      	mov	r0, r3
 800b894:	3758      	adds	r7, #88	; 0x58
 800b896:	46bd      	mov	sp, r7
 800b898:	bd80      	pop	{r7, pc}

0800b89a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800b89a:	b580      	push	{r7, lr}
 800b89c:	b088      	sub	sp, #32
 800b89e:	af00      	add	r7, sp, #0
 800b8a0:	60f8      	str	r0, [r7, #12]
 800b8a2:	60b9      	str	r1, [r7, #8]
 800b8a4:	4613      	mov	r3, r2
 800b8a6:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800b8a8:	88fb      	ldrh	r3, [r7, #6]
 800b8aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d07e      	beq.n	800b9b0 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b8ba:	b29b      	uxth	r3, r3
 800b8bc:	461a      	mov	r2, r3
 800b8be:	68bb      	ldr	r3, [r7, #8]
 800b8c0:	781b      	ldrb	r3, [r3, #0]
 800b8c2:	00db      	lsls	r3, r3, #3
 800b8c4:	4413      	add	r3, r2
 800b8c6:	3302      	adds	r3, #2
 800b8c8:	005b      	lsls	r3, r3, #1
 800b8ca:	68fa      	ldr	r2, [r7, #12]
 800b8cc:	6812      	ldr	r2, [r2, #0]
 800b8ce:	4413      	add	r3, r2
 800b8d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b8d4:	881b      	ldrh	r3, [r3, #0]
 800b8d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b8da:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800b8dc:	68bb      	ldr	r3, [r7, #8]
 800b8de:	699a      	ldr	r2, [r3, #24]
 800b8e0:	8b7b      	ldrh	r3, [r7, #26]
 800b8e2:	429a      	cmp	r2, r3
 800b8e4:	d306      	bcc.n	800b8f4 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800b8e6:	68bb      	ldr	r3, [r7, #8]
 800b8e8:	699a      	ldr	r2, [r3, #24]
 800b8ea:	8b7b      	ldrh	r3, [r7, #26]
 800b8ec:	1ad2      	subs	r2, r2, r3
 800b8ee:	68bb      	ldr	r3, [r7, #8]
 800b8f0:	619a      	str	r2, [r3, #24]
 800b8f2:	e002      	b.n	800b8fa <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800b8f4:	68bb      	ldr	r3, [r7, #8]
 800b8f6:	2200      	movs	r2, #0
 800b8f8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800b8fa:	68bb      	ldr	r3, [r7, #8]
 800b8fc:	699b      	ldr	r3, [r3, #24]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d123      	bne.n	800b94a <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	461a      	mov	r2, r3
 800b908:	68bb      	ldr	r3, [r7, #8]
 800b90a:	781b      	ldrb	r3, [r3, #0]
 800b90c:	009b      	lsls	r3, r3, #2
 800b90e:	4413      	add	r3, r2
 800b910:	881b      	ldrh	r3, [r3, #0]
 800b912:	b29b      	uxth	r3, r3
 800b914:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b918:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b91c:	833b      	strh	r3, [r7, #24]
 800b91e:	8b3b      	ldrh	r3, [r7, #24]
 800b920:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b924:	833b      	strh	r3, [r7, #24]
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	461a      	mov	r2, r3
 800b92c:	68bb      	ldr	r3, [r7, #8]
 800b92e:	781b      	ldrb	r3, [r3, #0]
 800b930:	009b      	lsls	r3, r3, #2
 800b932:	441a      	add	r2, r3
 800b934:	8b3b      	ldrh	r3, [r7, #24]
 800b936:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b93a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b93e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b942:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b946:	b29b      	uxth	r3, r3
 800b948:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800b94a:	88fb      	ldrh	r3, [r7, #6]
 800b94c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b950:	2b00      	cmp	r3, #0
 800b952:	d01f      	beq.n	800b994 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	461a      	mov	r2, r3
 800b95a:	68bb      	ldr	r3, [r7, #8]
 800b95c:	781b      	ldrb	r3, [r3, #0]
 800b95e:	009b      	lsls	r3, r3, #2
 800b960:	4413      	add	r3, r2
 800b962:	881b      	ldrh	r3, [r3, #0]
 800b964:	b29b      	uxth	r3, r3
 800b966:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b96a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b96e:	82fb      	strh	r3, [r7, #22]
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	461a      	mov	r2, r3
 800b976:	68bb      	ldr	r3, [r7, #8]
 800b978:	781b      	ldrb	r3, [r3, #0]
 800b97a:	009b      	lsls	r3, r3, #2
 800b97c:	441a      	add	r2, r3
 800b97e:	8afb      	ldrh	r3, [r7, #22]
 800b980:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b984:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b988:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b98c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b990:	b29b      	uxth	r3, r3
 800b992:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800b994:	8b7b      	ldrh	r3, [r7, #26]
 800b996:	2b00      	cmp	r3, #0
 800b998:	f000 8087 	beq.w	800baaa <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	6818      	ldr	r0, [r3, #0]
 800b9a0:	68bb      	ldr	r3, [r7, #8]
 800b9a2:	6959      	ldr	r1, [r3, #20]
 800b9a4:	68bb      	ldr	r3, [r7, #8]
 800b9a6:	891a      	ldrh	r2, [r3, #8]
 800b9a8:	8b7b      	ldrh	r3, [r7, #26]
 800b9aa:	f007 fd90 	bl	80134ce <USB_ReadPMA>
 800b9ae:	e07c      	b.n	800baaa <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b9b8:	b29b      	uxth	r3, r3
 800b9ba:	461a      	mov	r2, r3
 800b9bc:	68bb      	ldr	r3, [r7, #8]
 800b9be:	781b      	ldrb	r3, [r3, #0]
 800b9c0:	00db      	lsls	r3, r3, #3
 800b9c2:	4413      	add	r3, r2
 800b9c4:	3306      	adds	r3, #6
 800b9c6:	005b      	lsls	r3, r3, #1
 800b9c8:	68fa      	ldr	r2, [r7, #12]
 800b9ca:	6812      	ldr	r2, [r2, #0]
 800b9cc:	4413      	add	r3, r2
 800b9ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b9d2:	881b      	ldrh	r3, [r3, #0]
 800b9d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b9d8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800b9da:	68bb      	ldr	r3, [r7, #8]
 800b9dc:	699a      	ldr	r2, [r3, #24]
 800b9de:	8b7b      	ldrh	r3, [r7, #26]
 800b9e0:	429a      	cmp	r2, r3
 800b9e2:	d306      	bcc.n	800b9f2 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800b9e4:	68bb      	ldr	r3, [r7, #8]
 800b9e6:	699a      	ldr	r2, [r3, #24]
 800b9e8:	8b7b      	ldrh	r3, [r7, #26]
 800b9ea:	1ad2      	subs	r2, r2, r3
 800b9ec:	68bb      	ldr	r3, [r7, #8]
 800b9ee:	619a      	str	r2, [r3, #24]
 800b9f0:	e002      	b.n	800b9f8 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800b9f2:	68bb      	ldr	r3, [r7, #8]
 800b9f4:	2200      	movs	r2, #0
 800b9f6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800b9f8:	68bb      	ldr	r3, [r7, #8]
 800b9fa:	699b      	ldr	r3, [r3, #24]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d123      	bne.n	800ba48 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	461a      	mov	r2, r3
 800ba06:	68bb      	ldr	r3, [r7, #8]
 800ba08:	781b      	ldrb	r3, [r3, #0]
 800ba0a:	009b      	lsls	r3, r3, #2
 800ba0c:	4413      	add	r3, r2
 800ba0e:	881b      	ldrh	r3, [r3, #0]
 800ba10:	b29b      	uxth	r3, r3
 800ba12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ba16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba1a:	83fb      	strh	r3, [r7, #30]
 800ba1c:	8bfb      	ldrh	r3, [r7, #30]
 800ba1e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800ba22:	83fb      	strh	r3, [r7, #30]
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	461a      	mov	r2, r3
 800ba2a:	68bb      	ldr	r3, [r7, #8]
 800ba2c:	781b      	ldrb	r3, [r3, #0]
 800ba2e:	009b      	lsls	r3, r3, #2
 800ba30:	441a      	add	r2, r3
 800ba32:	8bfb      	ldrh	r3, [r7, #30]
 800ba34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ba38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ba3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ba40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba44:	b29b      	uxth	r3, r3
 800ba46:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800ba48:	88fb      	ldrh	r3, [r7, #6]
 800ba4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d11f      	bne.n	800ba92 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	461a      	mov	r2, r3
 800ba58:	68bb      	ldr	r3, [r7, #8]
 800ba5a:	781b      	ldrb	r3, [r3, #0]
 800ba5c:	009b      	lsls	r3, r3, #2
 800ba5e:	4413      	add	r3, r2
 800ba60:	881b      	ldrh	r3, [r3, #0]
 800ba62:	b29b      	uxth	r3, r3
 800ba64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ba68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba6c:	83bb      	strh	r3, [r7, #28]
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	461a      	mov	r2, r3
 800ba74:	68bb      	ldr	r3, [r7, #8]
 800ba76:	781b      	ldrb	r3, [r3, #0]
 800ba78:	009b      	lsls	r3, r3, #2
 800ba7a:	441a      	add	r2, r3
 800ba7c:	8bbb      	ldrh	r3, [r7, #28]
 800ba7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ba82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ba86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ba8a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ba8e:	b29b      	uxth	r3, r3
 800ba90:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800ba92:	8b7b      	ldrh	r3, [r7, #26]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d008      	beq.n	800baaa <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	6818      	ldr	r0, [r3, #0]
 800ba9c:	68bb      	ldr	r3, [r7, #8]
 800ba9e:	6959      	ldr	r1, [r3, #20]
 800baa0:	68bb      	ldr	r3, [r7, #8]
 800baa2:	895a      	ldrh	r2, [r3, #10]
 800baa4:	8b7b      	ldrh	r3, [r7, #26]
 800baa6:	f007 fd12 	bl	80134ce <USB_ReadPMA>
    }
  }

  return count;
 800baaa:	8b7b      	ldrh	r3, [r7, #26]
}
 800baac:	4618      	mov	r0, r3
 800baae:	3720      	adds	r7, #32
 800bab0:	46bd      	mov	sp, r7
 800bab2:	bd80      	pop	{r7, pc}

0800bab4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800bab4:	b580      	push	{r7, lr}
 800bab6:	b0a2      	sub	sp, #136	; 0x88
 800bab8:	af00      	add	r7, sp, #0
 800baba:	60f8      	str	r0, [r7, #12]
 800babc:	60b9      	str	r1, [r7, #8]
 800babe:	4613      	mov	r3, r2
 800bac0:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800bac2:	88fb      	ldrh	r3, [r7, #6]
 800bac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bac8:	2b00      	cmp	r3, #0
 800baca:	f000 81c7 	beq.w	800be5c <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bad6:	b29b      	uxth	r3, r3
 800bad8:	461a      	mov	r2, r3
 800bada:	68bb      	ldr	r3, [r7, #8]
 800badc:	781b      	ldrb	r3, [r3, #0]
 800bade:	00db      	lsls	r3, r3, #3
 800bae0:	4413      	add	r3, r2
 800bae2:	3302      	adds	r3, #2
 800bae4:	005b      	lsls	r3, r3, #1
 800bae6:	68fa      	ldr	r2, [r7, #12]
 800bae8:	6812      	ldr	r2, [r2, #0]
 800baea:	4413      	add	r3, r2
 800baec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800baf0:	881b      	ldrh	r3, [r3, #0]
 800baf2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800baf6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 800bafa:	68bb      	ldr	r3, [r7, #8]
 800bafc:	699a      	ldr	r2, [r3, #24]
 800bafe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800bb02:	429a      	cmp	r2, r3
 800bb04:	d907      	bls.n	800bb16 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 800bb06:	68bb      	ldr	r3, [r7, #8]
 800bb08:	699a      	ldr	r2, [r3, #24]
 800bb0a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800bb0e:	1ad2      	subs	r2, r2, r3
 800bb10:	68bb      	ldr	r3, [r7, #8]
 800bb12:	619a      	str	r2, [r3, #24]
 800bb14:	e002      	b.n	800bb1c <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800bb16:	68bb      	ldr	r3, [r7, #8]
 800bb18:	2200      	movs	r2, #0
 800bb1a:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800bb1c:	68bb      	ldr	r3, [r7, #8]
 800bb1e:	699b      	ldr	r3, [r3, #24]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	f040 80b9 	bne.w	800bc98 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800bb26:	68bb      	ldr	r3, [r7, #8]
 800bb28:	785b      	ldrb	r3, [r3, #1]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d126      	bne.n	800bb7c <HAL_PCD_EP_DB_Transmit+0xc8>
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	62bb      	str	r3, [r7, #40]	; 0x28
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bb3c:	b29b      	uxth	r3, r3
 800bb3e:	461a      	mov	r2, r3
 800bb40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb42:	4413      	add	r3, r2
 800bb44:	62bb      	str	r3, [r7, #40]	; 0x28
 800bb46:	68bb      	ldr	r3, [r7, #8]
 800bb48:	781b      	ldrb	r3, [r3, #0]
 800bb4a:	011a      	lsls	r2, r3, #4
 800bb4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb4e:	4413      	add	r3, r2
 800bb50:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800bb54:	627b      	str	r3, [r7, #36]	; 0x24
 800bb56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb58:	881b      	ldrh	r3, [r3, #0]
 800bb5a:	b29b      	uxth	r3, r3
 800bb5c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bb60:	b29a      	uxth	r2, r3
 800bb62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb64:	801a      	strh	r2, [r3, #0]
 800bb66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb68:	881b      	ldrh	r3, [r3, #0]
 800bb6a:	b29b      	uxth	r3, r3
 800bb6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bb70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bb74:	b29a      	uxth	r2, r3
 800bb76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb78:	801a      	strh	r2, [r3, #0]
 800bb7a:	e01a      	b.n	800bbb2 <HAL_PCD_EP_DB_Transmit+0xfe>
 800bb7c:	68bb      	ldr	r3, [r7, #8]
 800bb7e:	785b      	ldrb	r3, [r3, #1]
 800bb80:	2b01      	cmp	r3, #1
 800bb82:	d116      	bne.n	800bbb2 <HAL_PCD_EP_DB_Transmit+0xfe>
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	633b      	str	r3, [r7, #48]	; 0x30
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bb92:	b29b      	uxth	r3, r3
 800bb94:	461a      	mov	r2, r3
 800bb96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb98:	4413      	add	r3, r2
 800bb9a:	633b      	str	r3, [r7, #48]	; 0x30
 800bb9c:	68bb      	ldr	r3, [r7, #8]
 800bb9e:	781b      	ldrb	r3, [r3, #0]
 800bba0:	011a      	lsls	r2, r3, #4
 800bba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bba4:	4413      	add	r3, r2
 800bba6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800bbaa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bbac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbae:	2200      	movs	r2, #0
 800bbb0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	623b      	str	r3, [r7, #32]
 800bbb8:	68bb      	ldr	r3, [r7, #8]
 800bbba:	785b      	ldrb	r3, [r3, #1]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d126      	bne.n	800bc0e <HAL_PCD_EP_DB_Transmit+0x15a>
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	61bb      	str	r3, [r7, #24]
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bbce:	b29b      	uxth	r3, r3
 800bbd0:	461a      	mov	r2, r3
 800bbd2:	69bb      	ldr	r3, [r7, #24]
 800bbd4:	4413      	add	r3, r2
 800bbd6:	61bb      	str	r3, [r7, #24]
 800bbd8:	68bb      	ldr	r3, [r7, #8]
 800bbda:	781b      	ldrb	r3, [r3, #0]
 800bbdc:	011a      	lsls	r2, r3, #4
 800bbde:	69bb      	ldr	r3, [r7, #24]
 800bbe0:	4413      	add	r3, r2
 800bbe2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800bbe6:	617b      	str	r3, [r7, #20]
 800bbe8:	697b      	ldr	r3, [r7, #20]
 800bbea:	881b      	ldrh	r3, [r3, #0]
 800bbec:	b29b      	uxth	r3, r3
 800bbee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bbf2:	b29a      	uxth	r2, r3
 800bbf4:	697b      	ldr	r3, [r7, #20]
 800bbf6:	801a      	strh	r2, [r3, #0]
 800bbf8:	697b      	ldr	r3, [r7, #20]
 800bbfa:	881b      	ldrh	r3, [r3, #0]
 800bbfc:	b29b      	uxth	r3, r3
 800bbfe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bc02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bc06:	b29a      	uxth	r2, r3
 800bc08:	697b      	ldr	r3, [r7, #20]
 800bc0a:	801a      	strh	r2, [r3, #0]
 800bc0c:	e017      	b.n	800bc3e <HAL_PCD_EP_DB_Transmit+0x18a>
 800bc0e:	68bb      	ldr	r3, [r7, #8]
 800bc10:	785b      	ldrb	r3, [r3, #1]
 800bc12:	2b01      	cmp	r3, #1
 800bc14:	d113      	bne.n	800bc3e <HAL_PCD_EP_DB_Transmit+0x18a>
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bc1e:	b29b      	uxth	r3, r3
 800bc20:	461a      	mov	r2, r3
 800bc22:	6a3b      	ldr	r3, [r7, #32]
 800bc24:	4413      	add	r3, r2
 800bc26:	623b      	str	r3, [r7, #32]
 800bc28:	68bb      	ldr	r3, [r7, #8]
 800bc2a:	781b      	ldrb	r3, [r3, #0]
 800bc2c:	011a      	lsls	r2, r3, #4
 800bc2e:	6a3b      	ldr	r3, [r7, #32]
 800bc30:	4413      	add	r3, r2
 800bc32:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800bc36:	61fb      	str	r3, [r7, #28]
 800bc38:	69fb      	ldr	r3, [r7, #28]
 800bc3a:	2200      	movs	r2, #0
 800bc3c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800bc3e:	68bb      	ldr	r3, [r7, #8]
 800bc40:	781b      	ldrb	r3, [r3, #0]
 800bc42:	4619      	mov	r1, r3
 800bc44:	68f8      	ldr	r0, [r7, #12]
 800bc46:	f023 fb58 	bl	802f2fa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800bc4a:	88fb      	ldrh	r3, [r7, #6]
 800bc4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	f000 82d4 	beq.w	800c1fe <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	461a      	mov	r2, r3
 800bc5c:	68bb      	ldr	r3, [r7, #8]
 800bc5e:	781b      	ldrb	r3, [r3, #0]
 800bc60:	009b      	lsls	r3, r3, #2
 800bc62:	4413      	add	r3, r2
 800bc64:	881b      	ldrh	r3, [r3, #0]
 800bc66:	b29b      	uxth	r3, r3
 800bc68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bc6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc70:	827b      	strh	r3, [r7, #18]
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	461a      	mov	r2, r3
 800bc78:	68bb      	ldr	r3, [r7, #8]
 800bc7a:	781b      	ldrb	r3, [r3, #0]
 800bc7c:	009b      	lsls	r3, r3, #2
 800bc7e:	441a      	add	r2, r3
 800bc80:	8a7b      	ldrh	r3, [r7, #18]
 800bc82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bc86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bc8a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800bc8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc92:	b29b      	uxth	r3, r3
 800bc94:	8013      	strh	r3, [r2, #0]
 800bc96:	e2b2      	b.n	800c1fe <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800bc98:	88fb      	ldrh	r3, [r7, #6]
 800bc9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d021      	beq.n	800bce6 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	461a      	mov	r2, r3
 800bca8:	68bb      	ldr	r3, [r7, #8]
 800bcaa:	781b      	ldrb	r3, [r3, #0]
 800bcac:	009b      	lsls	r3, r3, #2
 800bcae:	4413      	add	r3, r2
 800bcb0:	881b      	ldrh	r3, [r3, #0]
 800bcb2:	b29b      	uxth	r3, r3
 800bcb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bcb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bcbc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	461a      	mov	r2, r3
 800bcc6:	68bb      	ldr	r3, [r7, #8]
 800bcc8:	781b      	ldrb	r3, [r3, #0]
 800bcca:	009b      	lsls	r3, r3, #2
 800bccc:	441a      	add	r2, r3
 800bcce:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800bcd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bcd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bcda:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800bcde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bce2:	b29b      	uxth	r3, r3
 800bce4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800bce6:	68bb      	ldr	r3, [r7, #8]
 800bce8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800bcec:	2b01      	cmp	r3, #1
 800bcee:	f040 8286 	bne.w	800c1fe <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 800bcf2:	68bb      	ldr	r3, [r7, #8]
 800bcf4:	695a      	ldr	r2, [r3, #20]
 800bcf6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800bcfa:	441a      	add	r2, r3
 800bcfc:	68bb      	ldr	r3, [r7, #8]
 800bcfe:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800bd00:	68bb      	ldr	r3, [r7, #8]
 800bd02:	69da      	ldr	r2, [r3, #28]
 800bd04:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800bd08:	441a      	add	r2, r3
 800bd0a:	68bb      	ldr	r3, [r7, #8]
 800bd0c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800bd0e:	68bb      	ldr	r3, [r7, #8]
 800bd10:	6a1a      	ldr	r2, [r3, #32]
 800bd12:	68bb      	ldr	r3, [r7, #8]
 800bd14:	691b      	ldr	r3, [r3, #16]
 800bd16:	429a      	cmp	r2, r3
 800bd18:	d309      	bcc.n	800bd2e <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800bd1a:	68bb      	ldr	r3, [r7, #8]
 800bd1c:	691b      	ldr	r3, [r3, #16]
 800bd1e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800bd20:	68bb      	ldr	r3, [r7, #8]
 800bd22:	6a1a      	ldr	r2, [r3, #32]
 800bd24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd26:	1ad2      	subs	r2, r2, r3
 800bd28:	68bb      	ldr	r3, [r7, #8]
 800bd2a:	621a      	str	r2, [r3, #32]
 800bd2c:	e015      	b.n	800bd5a <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 800bd2e:	68bb      	ldr	r3, [r7, #8]
 800bd30:	6a1b      	ldr	r3, [r3, #32]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d107      	bne.n	800bd46 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 800bd36:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800bd3a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800bd3c:	68bb      	ldr	r3, [r7, #8]
 800bd3e:	2200      	movs	r2, #0
 800bd40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800bd44:	e009      	b.n	800bd5a <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800bd46:	68bb      	ldr	r3, [r7, #8]
 800bd48:	2200      	movs	r2, #0
 800bd4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800bd4e:	68bb      	ldr	r3, [r7, #8]
 800bd50:	6a1b      	ldr	r3, [r3, #32]
 800bd52:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800bd54:	68bb      	ldr	r3, [r7, #8]
 800bd56:	2200      	movs	r2, #0
 800bd58:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800bd5a:	68bb      	ldr	r3, [r7, #8]
 800bd5c:	785b      	ldrb	r3, [r3, #1]
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d155      	bne.n	800be0e <HAL_PCD_EP_DB_Transmit+0x35a>
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	63bb      	str	r3, [r7, #56]	; 0x38
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bd70:	b29b      	uxth	r3, r3
 800bd72:	461a      	mov	r2, r3
 800bd74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd76:	4413      	add	r3, r2
 800bd78:	63bb      	str	r3, [r7, #56]	; 0x38
 800bd7a:	68bb      	ldr	r3, [r7, #8]
 800bd7c:	781b      	ldrb	r3, [r3, #0]
 800bd7e:	011a      	lsls	r2, r3, #4
 800bd80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd82:	4413      	add	r3, r2
 800bd84:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800bd88:	637b      	str	r3, [r7, #52]	; 0x34
 800bd8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d112      	bne.n	800bdb6 <HAL_PCD_EP_DB_Transmit+0x302>
 800bd90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd92:	881b      	ldrh	r3, [r3, #0]
 800bd94:	b29b      	uxth	r3, r3
 800bd96:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bd9a:	b29a      	uxth	r2, r3
 800bd9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd9e:	801a      	strh	r2, [r3, #0]
 800bda0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bda2:	881b      	ldrh	r3, [r3, #0]
 800bda4:	b29b      	uxth	r3, r3
 800bda6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bdaa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bdae:	b29a      	uxth	r2, r3
 800bdb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdb2:	801a      	strh	r2, [r3, #0]
 800bdb4:	e047      	b.n	800be46 <HAL_PCD_EP_DB_Transmit+0x392>
 800bdb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bdb8:	2b3e      	cmp	r3, #62	; 0x3e
 800bdba:	d811      	bhi.n	800bde0 <HAL_PCD_EP_DB_Transmit+0x32c>
 800bdbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bdbe:	085b      	lsrs	r3, r3, #1
 800bdc0:	64bb      	str	r3, [r7, #72]	; 0x48
 800bdc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bdc4:	f003 0301 	and.w	r3, r3, #1
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d002      	beq.n	800bdd2 <HAL_PCD_EP_DB_Transmit+0x31e>
 800bdcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bdce:	3301      	adds	r3, #1
 800bdd0:	64bb      	str	r3, [r7, #72]	; 0x48
 800bdd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bdd4:	b29b      	uxth	r3, r3
 800bdd6:	029b      	lsls	r3, r3, #10
 800bdd8:	b29a      	uxth	r2, r3
 800bdda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bddc:	801a      	strh	r2, [r3, #0]
 800bdde:	e032      	b.n	800be46 <HAL_PCD_EP_DB_Transmit+0x392>
 800bde0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bde2:	095b      	lsrs	r3, r3, #5
 800bde4:	64bb      	str	r3, [r7, #72]	; 0x48
 800bde6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bde8:	f003 031f 	and.w	r3, r3, #31
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d102      	bne.n	800bdf6 <HAL_PCD_EP_DB_Transmit+0x342>
 800bdf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bdf2:	3b01      	subs	r3, #1
 800bdf4:	64bb      	str	r3, [r7, #72]	; 0x48
 800bdf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bdf8:	b29b      	uxth	r3, r3
 800bdfa:	029b      	lsls	r3, r3, #10
 800bdfc:	b29b      	uxth	r3, r3
 800bdfe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800be02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800be06:	b29a      	uxth	r2, r3
 800be08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be0a:	801a      	strh	r2, [r3, #0]
 800be0c:	e01b      	b.n	800be46 <HAL_PCD_EP_DB_Transmit+0x392>
 800be0e:	68bb      	ldr	r3, [r7, #8]
 800be10:	785b      	ldrb	r3, [r3, #1]
 800be12:	2b01      	cmp	r3, #1
 800be14:	d117      	bne.n	800be46 <HAL_PCD_EP_DB_Transmit+0x392>
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	643b      	str	r3, [r7, #64]	; 0x40
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800be24:	b29b      	uxth	r3, r3
 800be26:	461a      	mov	r2, r3
 800be28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be2a:	4413      	add	r3, r2
 800be2c:	643b      	str	r3, [r7, #64]	; 0x40
 800be2e:	68bb      	ldr	r3, [r7, #8]
 800be30:	781b      	ldrb	r3, [r3, #0]
 800be32:	011a      	lsls	r2, r3, #4
 800be34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be36:	4413      	add	r3, r2
 800be38:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800be3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800be3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be40:	b29a      	uxth	r2, r3
 800be42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be44:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	6818      	ldr	r0, [r3, #0]
 800be4a:	68bb      	ldr	r3, [r7, #8]
 800be4c:	6959      	ldr	r1, [r3, #20]
 800be4e:	68bb      	ldr	r3, [r7, #8]
 800be50:	891a      	ldrh	r2, [r3, #8]
 800be52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be54:	b29b      	uxth	r3, r3
 800be56:	f007 faf4 	bl	8013442 <USB_WritePMA>
 800be5a:	e1d0      	b.n	800c1fe <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800be64:	b29b      	uxth	r3, r3
 800be66:	461a      	mov	r2, r3
 800be68:	68bb      	ldr	r3, [r7, #8]
 800be6a:	781b      	ldrb	r3, [r3, #0]
 800be6c:	00db      	lsls	r3, r3, #3
 800be6e:	4413      	add	r3, r2
 800be70:	3306      	adds	r3, #6
 800be72:	005b      	lsls	r3, r3, #1
 800be74:	68fa      	ldr	r2, [r7, #12]
 800be76:	6812      	ldr	r2, [r2, #0]
 800be78:	4413      	add	r3, r2
 800be7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800be7e:	881b      	ldrh	r3, [r3, #0]
 800be80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800be84:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 800be88:	68bb      	ldr	r3, [r7, #8]
 800be8a:	699a      	ldr	r2, [r3, #24]
 800be8c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800be90:	429a      	cmp	r2, r3
 800be92:	d307      	bcc.n	800bea4 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 800be94:	68bb      	ldr	r3, [r7, #8]
 800be96:	699a      	ldr	r2, [r3, #24]
 800be98:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800be9c:	1ad2      	subs	r2, r2, r3
 800be9e:	68bb      	ldr	r3, [r7, #8]
 800bea0:	619a      	str	r2, [r3, #24]
 800bea2:	e002      	b.n	800beaa <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 800bea4:	68bb      	ldr	r3, [r7, #8]
 800bea6:	2200      	movs	r2, #0
 800bea8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800beaa:	68bb      	ldr	r3, [r7, #8]
 800beac:	699b      	ldr	r3, [r3, #24]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	f040 80c4 	bne.w	800c03c <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800beb4:	68bb      	ldr	r3, [r7, #8]
 800beb6:	785b      	ldrb	r3, [r3, #1]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d126      	bne.n	800bf0a <HAL_PCD_EP_DB_Transmit+0x456>
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800beca:	b29b      	uxth	r3, r3
 800becc:	461a      	mov	r2, r3
 800bece:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bed0:	4413      	add	r3, r2
 800bed2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bed4:	68bb      	ldr	r3, [r7, #8]
 800bed6:	781b      	ldrb	r3, [r3, #0]
 800bed8:	011a      	lsls	r2, r3, #4
 800beda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bedc:	4413      	add	r3, r2
 800bede:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800bee2:	66bb      	str	r3, [r7, #104]	; 0x68
 800bee4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bee6:	881b      	ldrh	r3, [r3, #0]
 800bee8:	b29b      	uxth	r3, r3
 800beea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800beee:	b29a      	uxth	r2, r3
 800bef0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bef2:	801a      	strh	r2, [r3, #0]
 800bef4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bef6:	881b      	ldrh	r3, [r3, #0]
 800bef8:	b29b      	uxth	r3, r3
 800befa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800befe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bf02:	b29a      	uxth	r2, r3
 800bf04:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bf06:	801a      	strh	r2, [r3, #0]
 800bf08:	e01a      	b.n	800bf40 <HAL_PCD_EP_DB_Transmit+0x48c>
 800bf0a:	68bb      	ldr	r3, [r7, #8]
 800bf0c:	785b      	ldrb	r3, [r3, #1]
 800bf0e:	2b01      	cmp	r3, #1
 800bf10:	d116      	bne.n	800bf40 <HAL_PCD_EP_DB_Transmit+0x48c>
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	677b      	str	r3, [r7, #116]	; 0x74
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bf20:	b29b      	uxth	r3, r3
 800bf22:	461a      	mov	r2, r3
 800bf24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bf26:	4413      	add	r3, r2
 800bf28:	677b      	str	r3, [r7, #116]	; 0x74
 800bf2a:	68bb      	ldr	r3, [r7, #8]
 800bf2c:	781b      	ldrb	r3, [r3, #0]
 800bf2e:	011a      	lsls	r2, r3, #4
 800bf30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bf32:	4413      	add	r3, r2
 800bf34:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800bf38:	673b      	str	r3, [r7, #112]	; 0x70
 800bf3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bf3c:	2200      	movs	r2, #0
 800bf3e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	67bb      	str	r3, [r7, #120]	; 0x78
 800bf46:	68bb      	ldr	r3, [r7, #8]
 800bf48:	785b      	ldrb	r3, [r3, #1]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d12f      	bne.n	800bfae <HAL_PCD_EP_DB_Transmit+0x4fa>
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bf5e:	b29b      	uxth	r3, r3
 800bf60:	461a      	mov	r2, r3
 800bf62:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bf66:	4413      	add	r3, r2
 800bf68:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bf6c:	68bb      	ldr	r3, [r7, #8]
 800bf6e:	781b      	ldrb	r3, [r3, #0]
 800bf70:	011a      	lsls	r2, r3, #4
 800bf72:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bf76:	4413      	add	r3, r2
 800bf78:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800bf7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bf80:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bf84:	881b      	ldrh	r3, [r3, #0]
 800bf86:	b29b      	uxth	r3, r3
 800bf88:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bf8c:	b29a      	uxth	r2, r3
 800bf8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bf92:	801a      	strh	r2, [r3, #0]
 800bf94:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bf98:	881b      	ldrh	r3, [r3, #0]
 800bf9a:	b29b      	uxth	r3, r3
 800bf9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bfa0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bfa4:	b29a      	uxth	r2, r3
 800bfa6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bfaa:	801a      	strh	r2, [r3, #0]
 800bfac:	e017      	b.n	800bfde <HAL_PCD_EP_DB_Transmit+0x52a>
 800bfae:	68bb      	ldr	r3, [r7, #8]
 800bfb0:	785b      	ldrb	r3, [r3, #1]
 800bfb2:	2b01      	cmp	r3, #1
 800bfb4:	d113      	bne.n	800bfde <HAL_PCD_EP_DB_Transmit+0x52a>
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bfbe:	b29b      	uxth	r3, r3
 800bfc0:	461a      	mov	r2, r3
 800bfc2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bfc4:	4413      	add	r3, r2
 800bfc6:	67bb      	str	r3, [r7, #120]	; 0x78
 800bfc8:	68bb      	ldr	r3, [r7, #8]
 800bfca:	781b      	ldrb	r3, [r3, #0]
 800bfcc:	011a      	lsls	r2, r3, #4
 800bfce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bfd0:	4413      	add	r3, r2
 800bfd2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800bfd6:	67fb      	str	r3, [r7, #124]	; 0x7c
 800bfd8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bfda:	2200      	movs	r2, #0
 800bfdc:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800bfde:	68bb      	ldr	r3, [r7, #8]
 800bfe0:	781b      	ldrb	r3, [r3, #0]
 800bfe2:	4619      	mov	r1, r3
 800bfe4:	68f8      	ldr	r0, [r7, #12]
 800bfe6:	f023 f988 	bl	802f2fa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800bfea:	88fb      	ldrh	r3, [r7, #6]
 800bfec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	f040 8104 	bne.w	800c1fe <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	461a      	mov	r2, r3
 800bffc:	68bb      	ldr	r3, [r7, #8]
 800bffe:	781b      	ldrb	r3, [r3, #0]
 800c000:	009b      	lsls	r3, r3, #2
 800c002:	4413      	add	r3, r2
 800c004:	881b      	ldrh	r3, [r3, #0]
 800c006:	b29b      	uxth	r3, r3
 800c008:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c00c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c010:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	461a      	mov	r2, r3
 800c01a:	68bb      	ldr	r3, [r7, #8]
 800c01c:	781b      	ldrb	r3, [r3, #0]
 800c01e:	009b      	lsls	r3, r3, #2
 800c020:	441a      	add	r2, r3
 800c022:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800c026:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c02a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c02e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c032:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c036:	b29b      	uxth	r3, r3
 800c038:	8013      	strh	r3, [r2, #0]
 800c03a:	e0e0      	b.n	800c1fe <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800c03c:	88fb      	ldrh	r3, [r7, #6]
 800c03e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c042:	2b00      	cmp	r3, #0
 800c044:	d121      	bne.n	800c08a <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	461a      	mov	r2, r3
 800c04c:	68bb      	ldr	r3, [r7, #8]
 800c04e:	781b      	ldrb	r3, [r3, #0]
 800c050:	009b      	lsls	r3, r3, #2
 800c052:	4413      	add	r3, r2
 800c054:	881b      	ldrh	r3, [r3, #0]
 800c056:	b29b      	uxth	r3, r3
 800c058:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c05c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c060:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	461a      	mov	r2, r3
 800c06a:	68bb      	ldr	r3, [r7, #8]
 800c06c:	781b      	ldrb	r3, [r3, #0]
 800c06e:	009b      	lsls	r3, r3, #2
 800c070:	441a      	add	r2, r3
 800c072:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800c076:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c07a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c07e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c082:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c086:	b29b      	uxth	r3, r3
 800c088:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800c08a:	68bb      	ldr	r3, [r7, #8]
 800c08c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c090:	2b01      	cmp	r3, #1
 800c092:	f040 80b4 	bne.w	800c1fe <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 800c096:	68bb      	ldr	r3, [r7, #8]
 800c098:	695a      	ldr	r2, [r3, #20]
 800c09a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c09e:	441a      	add	r2, r3
 800c0a0:	68bb      	ldr	r3, [r7, #8]
 800c0a2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800c0a4:	68bb      	ldr	r3, [r7, #8]
 800c0a6:	69da      	ldr	r2, [r3, #28]
 800c0a8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c0ac:	441a      	add	r2, r3
 800c0ae:	68bb      	ldr	r3, [r7, #8]
 800c0b0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800c0b2:	68bb      	ldr	r3, [r7, #8]
 800c0b4:	6a1a      	ldr	r2, [r3, #32]
 800c0b6:	68bb      	ldr	r3, [r7, #8]
 800c0b8:	691b      	ldr	r3, [r3, #16]
 800c0ba:	429a      	cmp	r2, r3
 800c0bc:	d309      	bcc.n	800c0d2 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 800c0be:	68bb      	ldr	r3, [r7, #8]
 800c0c0:	691b      	ldr	r3, [r3, #16]
 800c0c2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800c0c4:	68bb      	ldr	r3, [r7, #8]
 800c0c6:	6a1a      	ldr	r2, [r3, #32]
 800c0c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c0ca:	1ad2      	subs	r2, r2, r3
 800c0cc:	68bb      	ldr	r3, [r7, #8]
 800c0ce:	621a      	str	r2, [r3, #32]
 800c0d0:	e015      	b.n	800c0fe <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 800c0d2:	68bb      	ldr	r3, [r7, #8]
 800c0d4:	6a1b      	ldr	r3, [r3, #32]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d107      	bne.n	800c0ea <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 800c0da:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c0de:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800c0e0:	68bb      	ldr	r3, [r7, #8]
 800c0e2:	2200      	movs	r2, #0
 800c0e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800c0e8:	e009      	b.n	800c0fe <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 800c0ea:	68bb      	ldr	r3, [r7, #8]
 800c0ec:	6a1b      	ldr	r3, [r3, #32]
 800c0ee:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800c0f0:	68bb      	ldr	r3, [r7, #8]
 800c0f2:	2200      	movs	r2, #0
 800c0f4:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800c0f6:	68bb      	ldr	r3, [r7, #8]
 800c0f8:	2200      	movs	r2, #0
 800c0fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	667b      	str	r3, [r7, #100]	; 0x64
 800c104:	68bb      	ldr	r3, [r7, #8]
 800c106:	785b      	ldrb	r3, [r3, #1]
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d155      	bne.n	800c1b8 <HAL_PCD_EP_DB_Transmit+0x704>
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c11a:	b29b      	uxth	r3, r3
 800c11c:	461a      	mov	r2, r3
 800c11e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c120:	4413      	add	r3, r2
 800c122:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c124:	68bb      	ldr	r3, [r7, #8]
 800c126:	781b      	ldrb	r3, [r3, #0]
 800c128:	011a      	lsls	r2, r3, #4
 800c12a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c12c:	4413      	add	r3, r2
 800c12e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800c132:	65bb      	str	r3, [r7, #88]	; 0x58
 800c134:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c136:	2b00      	cmp	r3, #0
 800c138:	d112      	bne.n	800c160 <HAL_PCD_EP_DB_Transmit+0x6ac>
 800c13a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c13c:	881b      	ldrh	r3, [r3, #0]
 800c13e:	b29b      	uxth	r3, r3
 800c140:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c144:	b29a      	uxth	r2, r3
 800c146:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c148:	801a      	strh	r2, [r3, #0]
 800c14a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c14c:	881b      	ldrh	r3, [r3, #0]
 800c14e:	b29b      	uxth	r3, r3
 800c150:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c154:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c158:	b29a      	uxth	r2, r3
 800c15a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c15c:	801a      	strh	r2, [r3, #0]
 800c15e:	e044      	b.n	800c1ea <HAL_PCD_EP_DB_Transmit+0x736>
 800c160:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c162:	2b3e      	cmp	r3, #62	; 0x3e
 800c164:	d811      	bhi.n	800c18a <HAL_PCD_EP_DB_Transmit+0x6d6>
 800c166:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c168:	085b      	lsrs	r3, r3, #1
 800c16a:	657b      	str	r3, [r7, #84]	; 0x54
 800c16c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c16e:	f003 0301 	and.w	r3, r3, #1
 800c172:	2b00      	cmp	r3, #0
 800c174:	d002      	beq.n	800c17c <HAL_PCD_EP_DB_Transmit+0x6c8>
 800c176:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c178:	3301      	adds	r3, #1
 800c17a:	657b      	str	r3, [r7, #84]	; 0x54
 800c17c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c17e:	b29b      	uxth	r3, r3
 800c180:	029b      	lsls	r3, r3, #10
 800c182:	b29a      	uxth	r2, r3
 800c184:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c186:	801a      	strh	r2, [r3, #0]
 800c188:	e02f      	b.n	800c1ea <HAL_PCD_EP_DB_Transmit+0x736>
 800c18a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c18c:	095b      	lsrs	r3, r3, #5
 800c18e:	657b      	str	r3, [r7, #84]	; 0x54
 800c190:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c192:	f003 031f 	and.w	r3, r3, #31
 800c196:	2b00      	cmp	r3, #0
 800c198:	d102      	bne.n	800c1a0 <HAL_PCD_EP_DB_Transmit+0x6ec>
 800c19a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c19c:	3b01      	subs	r3, #1
 800c19e:	657b      	str	r3, [r7, #84]	; 0x54
 800c1a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c1a2:	b29b      	uxth	r3, r3
 800c1a4:	029b      	lsls	r3, r3, #10
 800c1a6:	b29b      	uxth	r3, r3
 800c1a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c1ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c1b0:	b29a      	uxth	r2, r3
 800c1b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c1b4:	801a      	strh	r2, [r3, #0]
 800c1b6:	e018      	b.n	800c1ea <HAL_PCD_EP_DB_Transmit+0x736>
 800c1b8:	68bb      	ldr	r3, [r7, #8]
 800c1ba:	785b      	ldrb	r3, [r3, #1]
 800c1bc:	2b01      	cmp	r3, #1
 800c1be:	d114      	bne.n	800c1ea <HAL_PCD_EP_DB_Transmit+0x736>
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c1c8:	b29b      	uxth	r3, r3
 800c1ca:	461a      	mov	r2, r3
 800c1cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c1ce:	4413      	add	r3, r2
 800c1d0:	667b      	str	r3, [r7, #100]	; 0x64
 800c1d2:	68bb      	ldr	r3, [r7, #8]
 800c1d4:	781b      	ldrb	r3, [r3, #0]
 800c1d6:	011a      	lsls	r2, r3, #4
 800c1d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c1da:	4413      	add	r3, r2
 800c1dc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800c1e0:	663b      	str	r3, [r7, #96]	; 0x60
 800c1e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c1e4:	b29a      	uxth	r2, r3
 800c1e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c1e8:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	6818      	ldr	r0, [r3, #0]
 800c1ee:	68bb      	ldr	r3, [r7, #8]
 800c1f0:	6959      	ldr	r1, [r3, #20]
 800c1f2:	68bb      	ldr	r3, [r7, #8]
 800c1f4:	895a      	ldrh	r2, [r3, #10]
 800c1f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c1f8:	b29b      	uxth	r3, r3
 800c1fa:	f007 f922 	bl	8013442 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	461a      	mov	r2, r3
 800c204:	68bb      	ldr	r3, [r7, #8]
 800c206:	781b      	ldrb	r3, [r3, #0]
 800c208:	009b      	lsls	r3, r3, #2
 800c20a:	4413      	add	r3, r2
 800c20c:	881b      	ldrh	r3, [r3, #0]
 800c20e:	b29b      	uxth	r3, r3
 800c210:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c214:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c218:	823b      	strh	r3, [r7, #16]
 800c21a:	8a3b      	ldrh	r3, [r7, #16]
 800c21c:	f083 0310 	eor.w	r3, r3, #16
 800c220:	823b      	strh	r3, [r7, #16]
 800c222:	8a3b      	ldrh	r3, [r7, #16]
 800c224:	f083 0320 	eor.w	r3, r3, #32
 800c228:	823b      	strh	r3, [r7, #16]
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	461a      	mov	r2, r3
 800c230:	68bb      	ldr	r3, [r7, #8]
 800c232:	781b      	ldrb	r3, [r3, #0]
 800c234:	009b      	lsls	r3, r3, #2
 800c236:	441a      	add	r2, r3
 800c238:	8a3b      	ldrh	r3, [r7, #16]
 800c23a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c23e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c242:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c246:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c24a:	b29b      	uxth	r3, r3
 800c24c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800c24e:	2300      	movs	r3, #0
}
 800c250:	4618      	mov	r0, r3
 800c252:	3788      	adds	r7, #136	; 0x88
 800c254:	46bd      	mov	sp, r7
 800c256:	bd80      	pop	{r7, pc}

0800c258 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800c258:	b480      	push	{r7}
 800c25a:	b087      	sub	sp, #28
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	60f8      	str	r0, [r7, #12]
 800c260:	607b      	str	r3, [r7, #4]
 800c262:	460b      	mov	r3, r1
 800c264:	817b      	strh	r3, [r7, #10]
 800c266:	4613      	mov	r3, r2
 800c268:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800c26a:	897b      	ldrh	r3, [r7, #10]
 800c26c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c270:	b29b      	uxth	r3, r3
 800c272:	2b00      	cmp	r3, #0
 800c274:	d00b      	beq.n	800c28e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c276:	897b      	ldrh	r3, [r7, #10]
 800c278:	f003 0307 	and.w	r3, r3, #7
 800c27c:	1c5a      	adds	r2, r3, #1
 800c27e:	4613      	mov	r3, r2
 800c280:	009b      	lsls	r3, r3, #2
 800c282:	4413      	add	r3, r2
 800c284:	00db      	lsls	r3, r3, #3
 800c286:	68fa      	ldr	r2, [r7, #12]
 800c288:	4413      	add	r3, r2
 800c28a:	617b      	str	r3, [r7, #20]
 800c28c:	e009      	b.n	800c2a2 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800c28e:	897a      	ldrh	r2, [r7, #10]
 800c290:	4613      	mov	r3, r2
 800c292:	009b      	lsls	r3, r3, #2
 800c294:	4413      	add	r3, r2
 800c296:	00db      	lsls	r3, r3, #3
 800c298:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800c29c:	68fa      	ldr	r2, [r7, #12]
 800c29e:	4413      	add	r3, r2
 800c2a0:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800c2a2:	893b      	ldrh	r3, [r7, #8]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d107      	bne.n	800c2b8 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800c2a8:	697b      	ldr	r3, [r7, #20]
 800c2aa:	2200      	movs	r2, #0
 800c2ac:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	b29a      	uxth	r2, r3
 800c2b2:	697b      	ldr	r3, [r7, #20]
 800c2b4:	80da      	strh	r2, [r3, #6]
 800c2b6:	e00b      	b.n	800c2d0 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800c2b8:	697b      	ldr	r3, [r7, #20]
 800c2ba:	2201      	movs	r2, #1
 800c2bc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	b29a      	uxth	r2, r3
 800c2c2:	697b      	ldr	r3, [r7, #20]
 800c2c4:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	0c1b      	lsrs	r3, r3, #16
 800c2ca:	b29a      	uxth	r2, r3
 800c2cc:	697b      	ldr	r3, [r7, #20]
 800c2ce:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800c2d0:	2300      	movs	r3, #0
}
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	371c      	adds	r7, #28
 800c2d6:	46bd      	mov	sp, r7
 800c2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2dc:	4770      	bx	lr
	...

0800c2e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c2e0:	b580      	push	{r7, lr}
 800c2e2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800c2e6:	af00      	add	r7, sp, #0
 800c2e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800c2ec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800c2f0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800c2f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800c2f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d102      	bne.n	800c306 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800c300:	2301      	movs	r3, #1
 800c302:	f001 b99a 	b.w	800d63a <HAL_RCC_OscConfig+0x135a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800c306:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800c30a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	2b00      	cmp	r3, #0
 800c314:	d02c      	beq.n	800c370 <HAL_RCC_OscConfig+0x90>
 800c316:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800c31a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	f003 0301 	and.w	r3, r3, #1
 800c326:	2b00      	cmp	r3, #0
 800c328:	d122      	bne.n	800c370 <HAL_RCC_OscConfig+0x90>
 800c32a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800c32e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	f003 0302 	and.w	r3, r3, #2
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d118      	bne.n	800c370 <HAL_RCC_OscConfig+0x90>
 800c33e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800c342:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	f003 0308 	and.w	r3, r3, #8
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d10e      	bne.n	800c370 <HAL_RCC_OscConfig+0x90>
 800c352:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800c356:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	f003 0304 	and.w	r3, r3, #4
 800c362:	2b00      	cmp	r3, #0
 800c364:	d104      	bne.n	800c370 <HAL_RCC_OscConfig+0x90>
 800c366:	f240 114b 	movw	r1, #331	; 0x14b
 800c36a:	48ba      	ldr	r0, [pc, #744]	; (800c654 <HAL_RCC_OscConfig+0x374>)
 800c36c:	f7f9 fc11 	bl	8005b92 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c370:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800c374:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	f003 0301 	and.w	r3, r3, #1
 800c380:	2b00      	cmp	r3, #0
 800c382:	f000 819d 	beq.w	800c6c0 <HAL_RCC_OscConfig+0x3e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800c386:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800c38a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	685b      	ldr	r3, [r3, #4]
 800c392:	2b00      	cmp	r3, #0
 800c394:	d016      	beq.n	800c3c4 <HAL_RCC_OscConfig+0xe4>
 800c396:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800c39a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	685b      	ldr	r3, [r3, #4]
 800c3a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c3a6:	d00d      	beq.n	800c3c4 <HAL_RCC_OscConfig+0xe4>
 800c3a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800c3ac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	685b      	ldr	r3, [r3, #4]
 800c3b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c3b8:	d004      	beq.n	800c3c4 <HAL_RCC_OscConfig+0xe4>
 800c3ba:	f240 1151 	movw	r1, #337	; 0x151
 800c3be:	48a5      	ldr	r0, [pc, #660]	; (800c654 <HAL_RCC_OscConfig+0x374>)
 800c3c0:	f7f9 fbe7 	bl	8005b92 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800c3c4:	4ba4      	ldr	r3, [pc, #656]	; (800c658 <HAL_RCC_OscConfig+0x378>)
 800c3c6:	685b      	ldr	r3, [r3, #4]
 800c3c8:	f003 030c 	and.w	r3, r3, #12
 800c3cc:	2b04      	cmp	r3, #4
 800c3ce:	d00c      	beq.n	800c3ea <HAL_RCC_OscConfig+0x10a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800c3d0:	4ba1      	ldr	r3, [pc, #644]	; (800c658 <HAL_RCC_OscConfig+0x378>)
 800c3d2:	685b      	ldr	r3, [r3, #4]
 800c3d4:	f003 030c 	and.w	r3, r3, #12
 800c3d8:	2b08      	cmp	r3, #8
 800c3da:	d15c      	bne.n	800c496 <HAL_RCC_OscConfig+0x1b6>
 800c3dc:	4b9e      	ldr	r3, [pc, #632]	; (800c658 <HAL_RCC_OscConfig+0x378>)
 800c3de:	685b      	ldr	r3, [r3, #4]
 800c3e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c3e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c3e8:	d155      	bne.n	800c496 <HAL_RCC_OscConfig+0x1b6>
 800c3ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c3ee:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c3f2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800c3f6:	fa93 f3a3 	rbit	r3, r3
 800c3fa:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800c3fe:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c402:	fab3 f383 	clz	r3, r3
 800c406:	b2db      	uxtb	r3, r3
 800c408:	095b      	lsrs	r3, r3, #5
 800c40a:	b2db      	uxtb	r3, r3
 800c40c:	f043 0301 	orr.w	r3, r3, #1
 800c410:	b2db      	uxtb	r3, r3
 800c412:	2b01      	cmp	r3, #1
 800c414:	d102      	bne.n	800c41c <HAL_RCC_OscConfig+0x13c>
 800c416:	4b90      	ldr	r3, [pc, #576]	; (800c658 <HAL_RCC_OscConfig+0x378>)
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	e015      	b.n	800c448 <HAL_RCC_OscConfig+0x168>
 800c41c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c420:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c424:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800c428:	fa93 f3a3 	rbit	r3, r3
 800c42c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800c430:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c434:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800c438:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800c43c:	fa93 f3a3 	rbit	r3, r3
 800c440:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800c444:	4b84      	ldr	r3, [pc, #528]	; (800c658 <HAL_RCC_OscConfig+0x378>)
 800c446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c448:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800c44c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800c450:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800c454:	fa92 f2a2 	rbit	r2, r2
 800c458:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800c45c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800c460:	fab2 f282 	clz	r2, r2
 800c464:	b2d2      	uxtb	r2, r2
 800c466:	f042 0220 	orr.w	r2, r2, #32
 800c46a:	b2d2      	uxtb	r2, r2
 800c46c:	f002 021f 	and.w	r2, r2, #31
 800c470:	2101      	movs	r1, #1
 800c472:	fa01 f202 	lsl.w	r2, r1, r2
 800c476:	4013      	ands	r3, r2
 800c478:	2b00      	cmp	r3, #0
 800c47a:	f000 8120 	beq.w	800c6be <HAL_RCC_OscConfig+0x3de>
 800c47e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800c482:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	685b      	ldr	r3, [r3, #4]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	f040 8117 	bne.w	800c6be <HAL_RCC_OscConfig+0x3de>
      {
        return HAL_ERROR;
 800c490:	2301      	movs	r3, #1
 800c492:	f001 b8d2 	b.w	800d63a <HAL_RCC_OscConfig+0x135a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c496:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800c49a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	685b      	ldr	r3, [r3, #4]
 800c4a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c4a6:	d106      	bne.n	800c4b6 <HAL_RCC_OscConfig+0x1d6>
 800c4a8:	4b6b      	ldr	r3, [pc, #428]	; (800c658 <HAL_RCC_OscConfig+0x378>)
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	4a6a      	ldr	r2, [pc, #424]	; (800c658 <HAL_RCC_OscConfig+0x378>)
 800c4ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c4b2:	6013      	str	r3, [r2, #0]
 800c4b4:	e036      	b.n	800c524 <HAL_RCC_OscConfig+0x244>
 800c4b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800c4ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	685b      	ldr	r3, [r3, #4]
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d10c      	bne.n	800c4e0 <HAL_RCC_OscConfig+0x200>
 800c4c6:	4b64      	ldr	r3, [pc, #400]	; (800c658 <HAL_RCC_OscConfig+0x378>)
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	4a63      	ldr	r2, [pc, #396]	; (800c658 <HAL_RCC_OscConfig+0x378>)
 800c4cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c4d0:	6013      	str	r3, [r2, #0]
 800c4d2:	4b61      	ldr	r3, [pc, #388]	; (800c658 <HAL_RCC_OscConfig+0x378>)
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	4a60      	ldr	r2, [pc, #384]	; (800c658 <HAL_RCC_OscConfig+0x378>)
 800c4d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c4dc:	6013      	str	r3, [r2, #0]
 800c4de:	e021      	b.n	800c524 <HAL_RCC_OscConfig+0x244>
 800c4e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800c4e4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	685b      	ldr	r3, [r3, #4]
 800c4ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c4f0:	d10c      	bne.n	800c50c <HAL_RCC_OscConfig+0x22c>
 800c4f2:	4b59      	ldr	r3, [pc, #356]	; (800c658 <HAL_RCC_OscConfig+0x378>)
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	4a58      	ldr	r2, [pc, #352]	; (800c658 <HAL_RCC_OscConfig+0x378>)
 800c4f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c4fc:	6013      	str	r3, [r2, #0]
 800c4fe:	4b56      	ldr	r3, [pc, #344]	; (800c658 <HAL_RCC_OscConfig+0x378>)
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	4a55      	ldr	r2, [pc, #340]	; (800c658 <HAL_RCC_OscConfig+0x378>)
 800c504:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c508:	6013      	str	r3, [r2, #0]
 800c50a:	e00b      	b.n	800c524 <HAL_RCC_OscConfig+0x244>
 800c50c:	4b52      	ldr	r3, [pc, #328]	; (800c658 <HAL_RCC_OscConfig+0x378>)
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	4a51      	ldr	r2, [pc, #324]	; (800c658 <HAL_RCC_OscConfig+0x378>)
 800c512:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c516:	6013      	str	r3, [r2, #0]
 800c518:	4b4f      	ldr	r3, [pc, #316]	; (800c658 <HAL_RCC_OscConfig+0x378>)
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	4a4e      	ldr	r2, [pc, #312]	; (800c658 <HAL_RCC_OscConfig+0x378>)
 800c51e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c522:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800c524:	4b4c      	ldr	r3, [pc, #304]	; (800c658 <HAL_RCC_OscConfig+0x378>)
 800c526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c528:	f023 020f 	bic.w	r2, r3, #15
 800c52c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800c530:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	689b      	ldr	r3, [r3, #8]
 800c538:	4947      	ldr	r1, [pc, #284]	; (800c658 <HAL_RCC_OscConfig+0x378>)
 800c53a:	4313      	orrs	r3, r2
 800c53c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c53e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800c542:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	685b      	ldr	r3, [r3, #4]
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d059      	beq.n	800c602 <HAL_RCC_OscConfig+0x322>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c54e:	f7fb fb07 	bl	8007b60 <HAL_GetTick>
 800c552:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c556:	e00a      	b.n	800c56e <HAL_RCC_OscConfig+0x28e>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c558:	f7fb fb02 	bl	8007b60 <HAL_GetTick>
 800c55c:	4602      	mov	r2, r0
 800c55e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800c562:	1ad3      	subs	r3, r2, r3
 800c564:	2b64      	cmp	r3, #100	; 0x64
 800c566:	d902      	bls.n	800c56e <HAL_RCC_OscConfig+0x28e>
          {
            return HAL_TIMEOUT;
 800c568:	2303      	movs	r3, #3
 800c56a:	f001 b866 	b.w	800d63a <HAL_RCC_OscConfig+0x135a>
 800c56e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c572:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c576:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800c57a:	fa93 f3a3 	rbit	r3, r3
 800c57e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800c582:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c586:	fab3 f383 	clz	r3, r3
 800c58a:	b2db      	uxtb	r3, r3
 800c58c:	095b      	lsrs	r3, r3, #5
 800c58e:	b2db      	uxtb	r3, r3
 800c590:	f043 0301 	orr.w	r3, r3, #1
 800c594:	b2db      	uxtb	r3, r3
 800c596:	2b01      	cmp	r3, #1
 800c598:	d102      	bne.n	800c5a0 <HAL_RCC_OscConfig+0x2c0>
 800c59a:	4b2f      	ldr	r3, [pc, #188]	; (800c658 <HAL_RCC_OscConfig+0x378>)
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	e015      	b.n	800c5cc <HAL_RCC_OscConfig+0x2ec>
 800c5a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c5a4:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c5a8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800c5ac:	fa93 f3a3 	rbit	r3, r3
 800c5b0:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800c5b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c5b8:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800c5bc:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800c5c0:	fa93 f3a3 	rbit	r3, r3
 800c5c4:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800c5c8:	4b23      	ldr	r3, [pc, #140]	; (800c658 <HAL_RCC_OscConfig+0x378>)
 800c5ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5cc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800c5d0:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800c5d4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800c5d8:	fa92 f2a2 	rbit	r2, r2
 800c5dc:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800c5e0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800c5e4:	fab2 f282 	clz	r2, r2
 800c5e8:	b2d2      	uxtb	r2, r2
 800c5ea:	f042 0220 	orr.w	r2, r2, #32
 800c5ee:	b2d2      	uxtb	r2, r2
 800c5f0:	f002 021f 	and.w	r2, r2, #31
 800c5f4:	2101      	movs	r1, #1
 800c5f6:	fa01 f202 	lsl.w	r2, r1, r2
 800c5fa:	4013      	ands	r3, r2
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d0ab      	beq.n	800c558 <HAL_RCC_OscConfig+0x278>
 800c600:	e05e      	b.n	800c6c0 <HAL_RCC_OscConfig+0x3e0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c602:	f7fb faad 	bl	8007b60 <HAL_GetTick>
 800c606:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c60a:	e00a      	b.n	800c622 <HAL_RCC_OscConfig+0x342>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c60c:	f7fb faa8 	bl	8007b60 <HAL_GetTick>
 800c610:	4602      	mov	r2, r0
 800c612:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800c616:	1ad3      	subs	r3, r2, r3
 800c618:	2b64      	cmp	r3, #100	; 0x64
 800c61a:	d902      	bls.n	800c622 <HAL_RCC_OscConfig+0x342>
          {
            return HAL_TIMEOUT;
 800c61c:	2303      	movs	r3, #3
 800c61e:	f001 b80c 	b.w	800d63a <HAL_RCC_OscConfig+0x135a>
 800c622:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c626:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c62a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800c62e:	fa93 f3a3 	rbit	r3, r3
 800c632:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800c636:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c63a:	fab3 f383 	clz	r3, r3
 800c63e:	b2db      	uxtb	r3, r3
 800c640:	095b      	lsrs	r3, r3, #5
 800c642:	b2db      	uxtb	r3, r3
 800c644:	f043 0301 	orr.w	r3, r3, #1
 800c648:	b2db      	uxtb	r3, r3
 800c64a:	2b01      	cmp	r3, #1
 800c64c:	d106      	bne.n	800c65c <HAL_RCC_OscConfig+0x37c>
 800c64e:	4b02      	ldr	r3, [pc, #8]	; (800c658 <HAL_RCC_OscConfig+0x378>)
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	e019      	b.n	800c688 <HAL_RCC_OscConfig+0x3a8>
 800c654:	080343e4 	.word	0x080343e4
 800c658:	40021000 	.word	0x40021000
 800c65c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c660:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c664:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800c668:	fa93 f3a3 	rbit	r3, r3
 800c66c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800c670:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c674:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800c678:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800c67c:	fa93 f3a3 	rbit	r3, r3
 800c680:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800c684:	4bc0      	ldr	r3, [pc, #768]	; (800c988 <HAL_RCC_OscConfig+0x6a8>)
 800c686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c688:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800c68c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800c690:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800c694:	fa92 f2a2 	rbit	r2, r2
 800c698:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800c69c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800c6a0:	fab2 f282 	clz	r2, r2
 800c6a4:	b2d2      	uxtb	r2, r2
 800c6a6:	f042 0220 	orr.w	r2, r2, #32
 800c6aa:	b2d2      	uxtb	r2, r2
 800c6ac:	f002 021f 	and.w	r2, r2, #31
 800c6b0:	2101      	movs	r1, #1
 800c6b2:	fa01 f202 	lsl.w	r2, r1, r2
 800c6b6:	4013      	ands	r3, r2
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d1a7      	bne.n	800c60c <HAL_RCC_OscConfig+0x32c>
 800c6bc:	e000      	b.n	800c6c0 <HAL_RCC_OscConfig+0x3e0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c6be:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c6c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800c6c4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	f003 0302 	and.w	r3, r3, #2
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	f000 81a2 	beq.w	800ca1a <HAL_RCC_OscConfig+0x73a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800c6d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800c6da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	691b      	ldr	r3, [r3, #16]
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d00c      	beq.n	800c700 <HAL_RCC_OscConfig+0x420>
 800c6e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800c6ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	691b      	ldr	r3, [r3, #16]
 800c6f2:	2b01      	cmp	r3, #1
 800c6f4:	d004      	beq.n	800c700 <HAL_RCC_OscConfig+0x420>
 800c6f6:	f240 1189 	movw	r1, #393	; 0x189
 800c6fa:	48a4      	ldr	r0, [pc, #656]	; (800c98c <HAL_RCC_OscConfig+0x6ac>)
 800c6fc:	f7f9 fa49 	bl	8005b92 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800c700:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800c704:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	695b      	ldr	r3, [r3, #20]
 800c70c:	2b1f      	cmp	r3, #31
 800c70e:	d904      	bls.n	800c71a <HAL_RCC_OscConfig+0x43a>
 800c710:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 800c714:	489d      	ldr	r0, [pc, #628]	; (800c98c <HAL_RCC_OscConfig+0x6ac>)
 800c716:	f7f9 fa3c 	bl	8005b92 <assert_failed>
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800c71a:	4b9b      	ldr	r3, [pc, #620]	; (800c988 <HAL_RCC_OscConfig+0x6a8>)
 800c71c:	685b      	ldr	r3, [r3, #4]
 800c71e:	f003 030c 	and.w	r3, r3, #12
 800c722:	2b00      	cmp	r3, #0
 800c724:	d00b      	beq.n	800c73e <HAL_RCC_OscConfig+0x45e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800c726:	4b98      	ldr	r3, [pc, #608]	; (800c988 <HAL_RCC_OscConfig+0x6a8>)
 800c728:	685b      	ldr	r3, [r3, #4]
 800c72a:	f003 030c 	and.w	r3, r3, #12
 800c72e:	2b08      	cmp	r3, #8
 800c730:	d172      	bne.n	800c818 <HAL_RCC_OscConfig+0x538>
 800c732:	4b95      	ldr	r3, [pc, #596]	; (800c988 <HAL_RCC_OscConfig+0x6a8>)
 800c734:	685b      	ldr	r3, [r3, #4]
 800c736:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d16c      	bne.n	800c818 <HAL_RCC_OscConfig+0x538>
 800c73e:	2302      	movs	r3, #2
 800c740:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c744:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800c748:	fa93 f3a3 	rbit	r3, r3
 800c74c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800c750:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c754:	fab3 f383 	clz	r3, r3
 800c758:	b2db      	uxtb	r3, r3
 800c75a:	095b      	lsrs	r3, r3, #5
 800c75c:	b2db      	uxtb	r3, r3
 800c75e:	f043 0301 	orr.w	r3, r3, #1
 800c762:	b2db      	uxtb	r3, r3
 800c764:	2b01      	cmp	r3, #1
 800c766:	d102      	bne.n	800c76e <HAL_RCC_OscConfig+0x48e>
 800c768:	4b87      	ldr	r3, [pc, #540]	; (800c988 <HAL_RCC_OscConfig+0x6a8>)
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	e013      	b.n	800c796 <HAL_RCC_OscConfig+0x4b6>
 800c76e:	2302      	movs	r3, #2
 800c770:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c774:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800c778:	fa93 f3a3 	rbit	r3, r3
 800c77c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800c780:	2302      	movs	r3, #2
 800c782:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800c786:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800c78a:	fa93 f3a3 	rbit	r3, r3
 800c78e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800c792:	4b7d      	ldr	r3, [pc, #500]	; (800c988 <HAL_RCC_OscConfig+0x6a8>)
 800c794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c796:	2202      	movs	r2, #2
 800c798:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800c79c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800c7a0:	fa92 f2a2 	rbit	r2, r2
 800c7a4:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800c7a8:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800c7ac:	fab2 f282 	clz	r2, r2
 800c7b0:	b2d2      	uxtb	r2, r2
 800c7b2:	f042 0220 	orr.w	r2, r2, #32
 800c7b6:	b2d2      	uxtb	r2, r2
 800c7b8:	f002 021f 	and.w	r2, r2, #31
 800c7bc:	2101      	movs	r1, #1
 800c7be:	fa01 f202 	lsl.w	r2, r1, r2
 800c7c2:	4013      	ands	r3, r2
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d00a      	beq.n	800c7de <HAL_RCC_OscConfig+0x4fe>
 800c7c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800c7cc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	691b      	ldr	r3, [r3, #16]
 800c7d4:	2b01      	cmp	r3, #1
 800c7d6:	d002      	beq.n	800c7de <HAL_RCC_OscConfig+0x4fe>
      {
        return HAL_ERROR;
 800c7d8:	2301      	movs	r3, #1
 800c7da:	f000 bf2e 	b.w	800d63a <HAL_RCC_OscConfig+0x135a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c7de:	4b6a      	ldr	r3, [pc, #424]	; (800c988 <HAL_RCC_OscConfig+0x6a8>)
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c7e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800c7ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	695b      	ldr	r3, [r3, #20]
 800c7f2:	21f8      	movs	r1, #248	; 0xf8
 800c7f4:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c7f8:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800c7fc:	fa91 f1a1 	rbit	r1, r1
 800c800:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800c804:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800c808:	fab1 f181 	clz	r1, r1
 800c80c:	b2c9      	uxtb	r1, r1
 800c80e:	408b      	lsls	r3, r1
 800c810:	495d      	ldr	r1, [pc, #372]	; (800c988 <HAL_RCC_OscConfig+0x6a8>)
 800c812:	4313      	orrs	r3, r2
 800c814:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c816:	e100      	b.n	800ca1a <HAL_RCC_OscConfig+0x73a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800c818:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800c81c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	691b      	ldr	r3, [r3, #16]
 800c824:	2b00      	cmp	r3, #0
 800c826:	f000 8088 	beq.w	800c93a <HAL_RCC_OscConfig+0x65a>
 800c82a:	2301      	movs	r3, #1
 800c82c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c830:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800c834:	fa93 f3a3 	rbit	r3, r3
 800c838:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800c83c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c840:	fab3 f383 	clz	r3, r3
 800c844:	b2db      	uxtb	r3, r3
 800c846:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800c84a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800c84e:	009b      	lsls	r3, r3, #2
 800c850:	461a      	mov	r2, r3
 800c852:	2301      	movs	r3, #1
 800c854:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c856:	f7fb f983 	bl	8007b60 <HAL_GetTick>
 800c85a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c85e:	e00a      	b.n	800c876 <HAL_RCC_OscConfig+0x596>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c860:	f7fb f97e 	bl	8007b60 <HAL_GetTick>
 800c864:	4602      	mov	r2, r0
 800c866:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800c86a:	1ad3      	subs	r3, r2, r3
 800c86c:	2b02      	cmp	r3, #2
 800c86e:	d902      	bls.n	800c876 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800c870:	2303      	movs	r3, #3
 800c872:	f000 bee2 	b.w	800d63a <HAL_RCC_OscConfig+0x135a>
 800c876:	2302      	movs	r3, #2
 800c878:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c87c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800c880:	fa93 f3a3 	rbit	r3, r3
 800c884:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800c888:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c88c:	fab3 f383 	clz	r3, r3
 800c890:	b2db      	uxtb	r3, r3
 800c892:	095b      	lsrs	r3, r3, #5
 800c894:	b2db      	uxtb	r3, r3
 800c896:	f043 0301 	orr.w	r3, r3, #1
 800c89a:	b2db      	uxtb	r3, r3
 800c89c:	2b01      	cmp	r3, #1
 800c89e:	d102      	bne.n	800c8a6 <HAL_RCC_OscConfig+0x5c6>
 800c8a0:	4b39      	ldr	r3, [pc, #228]	; (800c988 <HAL_RCC_OscConfig+0x6a8>)
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	e013      	b.n	800c8ce <HAL_RCC_OscConfig+0x5ee>
 800c8a6:	2302      	movs	r3, #2
 800c8a8:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c8ac:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800c8b0:	fa93 f3a3 	rbit	r3, r3
 800c8b4:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800c8b8:	2302      	movs	r3, #2
 800c8ba:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800c8be:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800c8c2:	fa93 f3a3 	rbit	r3, r3
 800c8c6:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800c8ca:	4b2f      	ldr	r3, [pc, #188]	; (800c988 <HAL_RCC_OscConfig+0x6a8>)
 800c8cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8ce:	2202      	movs	r2, #2
 800c8d0:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800c8d4:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800c8d8:	fa92 f2a2 	rbit	r2, r2
 800c8dc:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800c8e0:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800c8e4:	fab2 f282 	clz	r2, r2
 800c8e8:	b2d2      	uxtb	r2, r2
 800c8ea:	f042 0220 	orr.w	r2, r2, #32
 800c8ee:	b2d2      	uxtb	r2, r2
 800c8f0:	f002 021f 	and.w	r2, r2, #31
 800c8f4:	2101      	movs	r1, #1
 800c8f6:	fa01 f202 	lsl.w	r2, r1, r2
 800c8fa:	4013      	ands	r3, r2
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d0af      	beq.n	800c860 <HAL_RCC_OscConfig+0x580>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c900:	4b21      	ldr	r3, [pc, #132]	; (800c988 <HAL_RCC_OscConfig+0x6a8>)
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c908:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800c90c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	695b      	ldr	r3, [r3, #20]
 800c914:	21f8      	movs	r1, #248	; 0xf8
 800c916:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c91a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800c91e:	fa91 f1a1 	rbit	r1, r1
 800c922:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800c926:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800c92a:	fab1 f181 	clz	r1, r1
 800c92e:	b2c9      	uxtb	r1, r1
 800c930:	408b      	lsls	r3, r1
 800c932:	4915      	ldr	r1, [pc, #84]	; (800c988 <HAL_RCC_OscConfig+0x6a8>)
 800c934:	4313      	orrs	r3, r2
 800c936:	600b      	str	r3, [r1, #0]
 800c938:	e06f      	b.n	800ca1a <HAL_RCC_OscConfig+0x73a>
 800c93a:	2301      	movs	r3, #1
 800c93c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c940:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800c944:	fa93 f3a3 	rbit	r3, r3
 800c948:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800c94c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c950:	fab3 f383 	clz	r3, r3
 800c954:	b2db      	uxtb	r3, r3
 800c956:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800c95a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800c95e:	009b      	lsls	r3, r3, #2
 800c960:	461a      	mov	r2, r3
 800c962:	2300      	movs	r3, #0
 800c964:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c966:	f7fb f8fb 	bl	8007b60 <HAL_GetTick>
 800c96a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c96e:	e00f      	b.n	800c990 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c970:	f7fb f8f6 	bl	8007b60 <HAL_GetTick>
 800c974:	4602      	mov	r2, r0
 800c976:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800c97a:	1ad3      	subs	r3, r2, r3
 800c97c:	2b02      	cmp	r3, #2
 800c97e:	d907      	bls.n	800c990 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 800c980:	2303      	movs	r3, #3
 800c982:	f000 be5a 	b.w	800d63a <HAL_RCC_OscConfig+0x135a>
 800c986:	bf00      	nop
 800c988:	40021000 	.word	0x40021000
 800c98c:	080343e4 	.word	0x080343e4
 800c990:	2302      	movs	r3, #2
 800c992:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c996:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c99a:	fa93 f3a3 	rbit	r3, r3
 800c99e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800c9a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c9a6:	fab3 f383 	clz	r3, r3
 800c9aa:	b2db      	uxtb	r3, r3
 800c9ac:	095b      	lsrs	r3, r3, #5
 800c9ae:	b2db      	uxtb	r3, r3
 800c9b0:	f043 0301 	orr.w	r3, r3, #1
 800c9b4:	b2db      	uxtb	r3, r3
 800c9b6:	2b01      	cmp	r3, #1
 800c9b8:	d102      	bne.n	800c9c0 <HAL_RCC_OscConfig+0x6e0>
 800c9ba:	4b81      	ldr	r3, [pc, #516]	; (800cbc0 <HAL_RCC_OscConfig+0x8e0>)
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	e013      	b.n	800c9e8 <HAL_RCC_OscConfig+0x708>
 800c9c0:	2302      	movs	r3, #2
 800c9c2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c9c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c9ca:	fa93 f3a3 	rbit	r3, r3
 800c9ce:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800c9d2:	2302      	movs	r3, #2
 800c9d4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800c9d8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800c9dc:	fa93 f3a3 	rbit	r3, r3
 800c9e0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800c9e4:	4b76      	ldr	r3, [pc, #472]	; (800cbc0 <HAL_RCC_OscConfig+0x8e0>)
 800c9e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9e8:	2202      	movs	r2, #2
 800c9ea:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800c9ee:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800c9f2:	fa92 f2a2 	rbit	r2, r2
 800c9f6:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800c9fa:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800c9fe:	fab2 f282 	clz	r2, r2
 800ca02:	b2d2      	uxtb	r2, r2
 800ca04:	f042 0220 	orr.w	r2, r2, #32
 800ca08:	b2d2      	uxtb	r2, r2
 800ca0a:	f002 021f 	and.w	r2, r2, #31
 800ca0e:	2101      	movs	r1, #1
 800ca10:	fa01 f202 	lsl.w	r2, r1, r2
 800ca14:	4013      	ands	r3, r2
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d1aa      	bne.n	800c970 <HAL_RCC_OscConfig+0x690>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ca1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800ca1e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	f003 0308 	and.w	r3, r3, #8
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	f000 812b 	beq.w	800cc86 <HAL_RCC_OscConfig+0x9a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800ca30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800ca34:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	699b      	ldr	r3, [r3, #24]
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d00c      	beq.n	800ca5a <HAL_RCC_OscConfig+0x77a>
 800ca40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800ca44:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	699b      	ldr	r3, [r3, #24]
 800ca4c:	2b01      	cmp	r3, #1
 800ca4e:	d004      	beq.n	800ca5a <HAL_RCC_OscConfig+0x77a>
 800ca50:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
 800ca54:	485b      	ldr	r0, [pc, #364]	; (800cbc4 <HAL_RCC_OscConfig+0x8e4>)
 800ca56:	f7f9 f89c 	bl	8005b92 <assert_failed>
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800ca5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800ca5e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	699b      	ldr	r3, [r3, #24]
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d079      	beq.n	800cb5e <HAL_RCC_OscConfig+0x87e>
 800ca6a:	2301      	movs	r3, #1
 800ca6c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ca70:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800ca74:	fa93 f3a3 	rbit	r3, r3
 800ca78:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800ca7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ca80:	fab3 f383 	clz	r3, r3
 800ca84:	b2db      	uxtb	r3, r3
 800ca86:	461a      	mov	r2, r3
 800ca88:	4b4f      	ldr	r3, [pc, #316]	; (800cbc8 <HAL_RCC_OscConfig+0x8e8>)
 800ca8a:	4413      	add	r3, r2
 800ca8c:	009b      	lsls	r3, r3, #2
 800ca8e:	461a      	mov	r2, r3
 800ca90:	2301      	movs	r3, #1
 800ca92:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ca94:	f7fb f864 	bl	8007b60 <HAL_GetTick>
 800ca98:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ca9c:	e00a      	b.n	800cab4 <HAL_RCC_OscConfig+0x7d4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ca9e:	f7fb f85f 	bl	8007b60 <HAL_GetTick>
 800caa2:	4602      	mov	r2, r0
 800caa4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800caa8:	1ad3      	subs	r3, r2, r3
 800caaa:	2b02      	cmp	r3, #2
 800caac:	d902      	bls.n	800cab4 <HAL_RCC_OscConfig+0x7d4>
        {
          return HAL_TIMEOUT;
 800caae:	2303      	movs	r3, #3
 800cab0:	f000 bdc3 	b.w	800d63a <HAL_RCC_OscConfig+0x135a>
 800cab4:	2302      	movs	r3, #2
 800cab6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800caba:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800cabe:	fa93 f3a3 	rbit	r3, r3
 800cac2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800cac6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800caca:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800cace:	2202      	movs	r2, #2
 800cad0:	601a      	str	r2, [r3, #0]
 800cad2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cad6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	fa93 f2a3 	rbit	r2, r3
 800cae0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cae4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cae8:	601a      	str	r2, [r3, #0]
 800caea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800caee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800caf2:	2202      	movs	r2, #2
 800caf4:	601a      	str	r2, [r3, #0]
 800caf6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cafa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	fa93 f2a3 	rbit	r2, r3
 800cb04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cb08:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800cb0c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800cb0e:	4b2c      	ldr	r3, [pc, #176]	; (800cbc0 <HAL_RCC_OscConfig+0x8e0>)
 800cb10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cb12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cb16:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800cb1a:	2102      	movs	r1, #2
 800cb1c:	6019      	str	r1, [r3, #0]
 800cb1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cb22:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	fa93 f1a3 	rbit	r1, r3
 800cb2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cb30:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800cb34:	6019      	str	r1, [r3, #0]
  return result;
 800cb36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cb3a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	fab3 f383 	clz	r3, r3
 800cb44:	b2db      	uxtb	r3, r3
 800cb46:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800cb4a:	b2db      	uxtb	r3, r3
 800cb4c:	f003 031f 	and.w	r3, r3, #31
 800cb50:	2101      	movs	r1, #1
 800cb52:	fa01 f303 	lsl.w	r3, r1, r3
 800cb56:	4013      	ands	r3, r2
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d0a0      	beq.n	800ca9e <HAL_RCC_OscConfig+0x7be>
 800cb5c:	e093      	b.n	800cc86 <HAL_RCC_OscConfig+0x9a6>
 800cb5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cb62:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800cb66:	2201      	movs	r2, #1
 800cb68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cb6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cb6e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	fa93 f2a3 	rbit	r2, r3
 800cb78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cb7c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800cb80:	601a      	str	r2, [r3, #0]
  return result;
 800cb82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cb86:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800cb8a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800cb8c:	fab3 f383 	clz	r3, r3
 800cb90:	b2db      	uxtb	r3, r3
 800cb92:	461a      	mov	r2, r3
 800cb94:	4b0c      	ldr	r3, [pc, #48]	; (800cbc8 <HAL_RCC_OscConfig+0x8e8>)
 800cb96:	4413      	add	r3, r2
 800cb98:	009b      	lsls	r3, r3, #2
 800cb9a:	461a      	mov	r2, r3
 800cb9c:	2300      	movs	r3, #0
 800cb9e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800cba0:	f7fa ffde 	bl	8007b60 <HAL_GetTick>
 800cba4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800cba8:	e010      	b.n	800cbcc <HAL_RCC_OscConfig+0x8ec>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800cbaa:	f7fa ffd9 	bl	8007b60 <HAL_GetTick>
 800cbae:	4602      	mov	r2, r0
 800cbb0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800cbb4:	1ad3      	subs	r3, r2, r3
 800cbb6:	2b02      	cmp	r3, #2
 800cbb8:	d908      	bls.n	800cbcc <HAL_RCC_OscConfig+0x8ec>
        {
          return HAL_TIMEOUT;
 800cbba:	2303      	movs	r3, #3
 800cbbc:	f000 bd3d 	b.w	800d63a <HAL_RCC_OscConfig+0x135a>
 800cbc0:	40021000 	.word	0x40021000
 800cbc4:	080343e4 	.word	0x080343e4
 800cbc8:	10908120 	.word	0x10908120
 800cbcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cbd0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800cbd4:	2202      	movs	r2, #2
 800cbd6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cbd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cbdc:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	fa93 f2a3 	rbit	r2, r3
 800cbe6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cbea:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800cbee:	601a      	str	r2, [r3, #0]
 800cbf0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cbf4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800cbf8:	2202      	movs	r2, #2
 800cbfa:	601a      	str	r2, [r3, #0]
 800cbfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cc00:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	fa93 f2a3 	rbit	r2, r3
 800cc0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cc0e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800cc12:	601a      	str	r2, [r3, #0]
 800cc14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cc18:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800cc1c:	2202      	movs	r2, #2
 800cc1e:	601a      	str	r2, [r3, #0]
 800cc20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cc24:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	fa93 f2a3 	rbit	r2, r3
 800cc2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cc32:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800cc36:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800cc38:	4bb8      	ldr	r3, [pc, #736]	; (800cf1c <HAL_RCC_OscConfig+0xc3c>)
 800cc3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cc3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cc40:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800cc44:	2102      	movs	r1, #2
 800cc46:	6019      	str	r1, [r3, #0]
 800cc48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cc4c:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	fa93 f1a3 	rbit	r1, r3
 800cc56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cc5a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800cc5e:	6019      	str	r1, [r3, #0]
  return result;
 800cc60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cc64:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	fab3 f383 	clz	r3, r3
 800cc6e:	b2db      	uxtb	r3, r3
 800cc70:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800cc74:	b2db      	uxtb	r3, r3
 800cc76:	f003 031f 	and.w	r3, r3, #31
 800cc7a:	2101      	movs	r1, #1
 800cc7c:	fa01 f303 	lsl.w	r3, r1, r3
 800cc80:	4013      	ands	r3, r2
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d191      	bne.n	800cbaa <HAL_RCC_OscConfig+0x8ca>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800cc86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cc8a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	f003 0304 	and.w	r3, r3, #4
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	f000 81c0 	beq.w	800d01c <HAL_RCC_OscConfig+0xd3c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800cc9c:	2300      	movs	r3, #0
 800cc9e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800cca2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cca6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	68db      	ldr	r3, [r3, #12]
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d014      	beq.n	800ccdc <HAL_RCC_OscConfig+0x9fc>
 800ccb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800ccb6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	68db      	ldr	r3, [r3, #12]
 800ccbe:	2b01      	cmp	r3, #1
 800ccc0:	d00c      	beq.n	800ccdc <HAL_RCC_OscConfig+0x9fc>
 800ccc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800ccc6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	68db      	ldr	r3, [r3, #12]
 800ccce:	2b05      	cmp	r3, #5
 800ccd0:	d004      	beq.n	800ccdc <HAL_RCC_OscConfig+0x9fc>
 800ccd2:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 800ccd6:	4892      	ldr	r0, [pc, #584]	; (800cf20 <HAL_RCC_OscConfig+0xc40>)
 800ccd8:	f7f8 ff5b 	bl	8005b92 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ccdc:	4b8f      	ldr	r3, [pc, #572]	; (800cf1c <HAL_RCC_OscConfig+0xc3c>)
 800ccde:	69db      	ldr	r3, [r3, #28]
 800cce0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d116      	bne.n	800cd16 <HAL_RCC_OscConfig+0xa36>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800cce8:	4b8c      	ldr	r3, [pc, #560]	; (800cf1c <HAL_RCC_OscConfig+0xc3c>)
 800ccea:	69db      	ldr	r3, [r3, #28]
 800ccec:	4a8b      	ldr	r2, [pc, #556]	; (800cf1c <HAL_RCC_OscConfig+0xc3c>)
 800ccee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ccf2:	61d3      	str	r3, [r2, #28]
 800ccf4:	4b89      	ldr	r3, [pc, #548]	; (800cf1c <HAL_RCC_OscConfig+0xc3c>)
 800ccf6:	69db      	ldr	r3, [r3, #28]
 800ccf8:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800ccfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cd00:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800cd04:	601a      	str	r2, [r3, #0]
 800cd06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cd0a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800cd0e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800cd10:	2301      	movs	r3, #1
 800cd12:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cd16:	4b83      	ldr	r3, [pc, #524]	; (800cf24 <HAL_RCC_OscConfig+0xc44>)
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d11b      	bne.n	800cd5a <HAL_RCC_OscConfig+0xa7a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800cd22:	4b80      	ldr	r3, [pc, #512]	; (800cf24 <HAL_RCC_OscConfig+0xc44>)
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	4a7f      	ldr	r2, [pc, #508]	; (800cf24 <HAL_RCC_OscConfig+0xc44>)
 800cd28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cd2c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800cd2e:	f7fa ff17 	bl	8007b60 <HAL_GetTick>
 800cd32:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cd36:	e00a      	b.n	800cd4e <HAL_RCC_OscConfig+0xa6e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cd38:	f7fa ff12 	bl	8007b60 <HAL_GetTick>
 800cd3c:	4602      	mov	r2, r0
 800cd3e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800cd42:	1ad3      	subs	r3, r2, r3
 800cd44:	2b64      	cmp	r3, #100	; 0x64
 800cd46:	d902      	bls.n	800cd4e <HAL_RCC_OscConfig+0xa6e>
        {
          return HAL_TIMEOUT;
 800cd48:	2303      	movs	r3, #3
 800cd4a:	f000 bc76 	b.w	800d63a <HAL_RCC_OscConfig+0x135a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cd4e:	4b75      	ldr	r3, [pc, #468]	; (800cf24 <HAL_RCC_OscConfig+0xc44>)
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d0ee      	beq.n	800cd38 <HAL_RCC_OscConfig+0xa58>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800cd5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cd5e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	68db      	ldr	r3, [r3, #12]
 800cd66:	2b01      	cmp	r3, #1
 800cd68:	d106      	bne.n	800cd78 <HAL_RCC_OscConfig+0xa98>
 800cd6a:	4b6c      	ldr	r3, [pc, #432]	; (800cf1c <HAL_RCC_OscConfig+0xc3c>)
 800cd6c:	6a1b      	ldr	r3, [r3, #32]
 800cd6e:	4a6b      	ldr	r2, [pc, #428]	; (800cf1c <HAL_RCC_OscConfig+0xc3c>)
 800cd70:	f043 0301 	orr.w	r3, r3, #1
 800cd74:	6213      	str	r3, [r2, #32]
 800cd76:	e035      	b.n	800cde4 <HAL_RCC_OscConfig+0xb04>
 800cd78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cd7c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	68db      	ldr	r3, [r3, #12]
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d10c      	bne.n	800cda2 <HAL_RCC_OscConfig+0xac2>
 800cd88:	4b64      	ldr	r3, [pc, #400]	; (800cf1c <HAL_RCC_OscConfig+0xc3c>)
 800cd8a:	6a1b      	ldr	r3, [r3, #32]
 800cd8c:	4a63      	ldr	r2, [pc, #396]	; (800cf1c <HAL_RCC_OscConfig+0xc3c>)
 800cd8e:	f023 0301 	bic.w	r3, r3, #1
 800cd92:	6213      	str	r3, [r2, #32]
 800cd94:	4b61      	ldr	r3, [pc, #388]	; (800cf1c <HAL_RCC_OscConfig+0xc3c>)
 800cd96:	6a1b      	ldr	r3, [r3, #32]
 800cd98:	4a60      	ldr	r2, [pc, #384]	; (800cf1c <HAL_RCC_OscConfig+0xc3c>)
 800cd9a:	f023 0304 	bic.w	r3, r3, #4
 800cd9e:	6213      	str	r3, [r2, #32]
 800cda0:	e020      	b.n	800cde4 <HAL_RCC_OscConfig+0xb04>
 800cda2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cda6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	68db      	ldr	r3, [r3, #12]
 800cdae:	2b05      	cmp	r3, #5
 800cdb0:	d10c      	bne.n	800cdcc <HAL_RCC_OscConfig+0xaec>
 800cdb2:	4b5a      	ldr	r3, [pc, #360]	; (800cf1c <HAL_RCC_OscConfig+0xc3c>)
 800cdb4:	6a1b      	ldr	r3, [r3, #32]
 800cdb6:	4a59      	ldr	r2, [pc, #356]	; (800cf1c <HAL_RCC_OscConfig+0xc3c>)
 800cdb8:	f043 0304 	orr.w	r3, r3, #4
 800cdbc:	6213      	str	r3, [r2, #32]
 800cdbe:	4b57      	ldr	r3, [pc, #348]	; (800cf1c <HAL_RCC_OscConfig+0xc3c>)
 800cdc0:	6a1b      	ldr	r3, [r3, #32]
 800cdc2:	4a56      	ldr	r2, [pc, #344]	; (800cf1c <HAL_RCC_OscConfig+0xc3c>)
 800cdc4:	f043 0301 	orr.w	r3, r3, #1
 800cdc8:	6213      	str	r3, [r2, #32]
 800cdca:	e00b      	b.n	800cde4 <HAL_RCC_OscConfig+0xb04>
 800cdcc:	4b53      	ldr	r3, [pc, #332]	; (800cf1c <HAL_RCC_OscConfig+0xc3c>)
 800cdce:	6a1b      	ldr	r3, [r3, #32]
 800cdd0:	4a52      	ldr	r2, [pc, #328]	; (800cf1c <HAL_RCC_OscConfig+0xc3c>)
 800cdd2:	f023 0301 	bic.w	r3, r3, #1
 800cdd6:	6213      	str	r3, [r2, #32]
 800cdd8:	4b50      	ldr	r3, [pc, #320]	; (800cf1c <HAL_RCC_OscConfig+0xc3c>)
 800cdda:	6a1b      	ldr	r3, [r3, #32]
 800cddc:	4a4f      	ldr	r2, [pc, #316]	; (800cf1c <HAL_RCC_OscConfig+0xc3c>)
 800cdde:	f023 0304 	bic.w	r3, r3, #4
 800cde2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800cde4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cde8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	68db      	ldr	r3, [r3, #12]
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	f000 8082 	beq.w	800cefa <HAL_RCC_OscConfig+0xc1a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800cdf6:	f7fa feb3 	bl	8007b60 <HAL_GetTick>
 800cdfa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cdfe:	e00c      	b.n	800ce1a <HAL_RCC_OscConfig+0xb3a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ce00:	f7fa feae 	bl	8007b60 <HAL_GetTick>
 800ce04:	4602      	mov	r2, r0
 800ce06:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800ce0a:	1ad3      	subs	r3, r2, r3
 800ce0c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ce10:	4293      	cmp	r3, r2
 800ce12:	d902      	bls.n	800ce1a <HAL_RCC_OscConfig+0xb3a>
        {
          return HAL_TIMEOUT;
 800ce14:	2303      	movs	r3, #3
 800ce16:	f000 bc10 	b.w	800d63a <HAL_RCC_OscConfig+0x135a>
 800ce1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800ce1e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800ce22:	2202      	movs	r2, #2
 800ce24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ce26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800ce2a:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	fa93 f2a3 	rbit	r2, r3
 800ce34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800ce38:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800ce3c:	601a      	str	r2, [r3, #0]
 800ce3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800ce42:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800ce46:	2202      	movs	r2, #2
 800ce48:	601a      	str	r2, [r3, #0]
 800ce4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800ce4e:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	fa93 f2a3 	rbit	r2, r3
 800ce58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800ce5c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800ce60:	601a      	str	r2, [r3, #0]
  return result;
 800ce62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800ce66:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800ce6a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ce6c:	fab3 f383 	clz	r3, r3
 800ce70:	b2db      	uxtb	r3, r3
 800ce72:	095b      	lsrs	r3, r3, #5
 800ce74:	b2db      	uxtb	r3, r3
 800ce76:	f043 0302 	orr.w	r3, r3, #2
 800ce7a:	b2db      	uxtb	r3, r3
 800ce7c:	2b02      	cmp	r3, #2
 800ce7e:	d102      	bne.n	800ce86 <HAL_RCC_OscConfig+0xba6>
 800ce80:	4b26      	ldr	r3, [pc, #152]	; (800cf1c <HAL_RCC_OscConfig+0xc3c>)
 800ce82:	6a1b      	ldr	r3, [r3, #32]
 800ce84:	e013      	b.n	800ceae <HAL_RCC_OscConfig+0xbce>
 800ce86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800ce8a:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800ce8e:	2202      	movs	r2, #2
 800ce90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ce92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800ce96:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	fa93 f2a3 	rbit	r2, r3
 800cea0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cea4:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800cea8:	601a      	str	r2, [r3, #0]
 800ceaa:	4b1c      	ldr	r3, [pc, #112]	; (800cf1c <HAL_RCC_OscConfig+0xc3c>)
 800ceac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ceae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800ceb2:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800ceb6:	2102      	movs	r1, #2
 800ceb8:	6011      	str	r1, [r2, #0]
 800ceba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800cebe:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800cec2:	6812      	ldr	r2, [r2, #0]
 800cec4:	fa92 f1a2 	rbit	r1, r2
 800cec8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800cecc:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800ced0:	6011      	str	r1, [r2, #0]
  return result;
 800ced2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800ced6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800ceda:	6812      	ldr	r2, [r2, #0]
 800cedc:	fab2 f282 	clz	r2, r2
 800cee0:	b2d2      	uxtb	r2, r2
 800cee2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cee6:	b2d2      	uxtb	r2, r2
 800cee8:	f002 021f 	and.w	r2, r2, #31
 800ceec:	2101      	movs	r1, #1
 800ceee:	fa01 f202 	lsl.w	r2, r1, r2
 800cef2:	4013      	ands	r3, r2
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d083      	beq.n	800ce00 <HAL_RCC_OscConfig+0xb20>
 800cef8:	e086      	b.n	800d008 <HAL_RCC_OscConfig+0xd28>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800cefa:	f7fa fe31 	bl	8007b60 <HAL_GetTick>
 800cefe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800cf02:	e011      	b.n	800cf28 <HAL_RCC_OscConfig+0xc48>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800cf04:	f7fa fe2c 	bl	8007b60 <HAL_GetTick>
 800cf08:	4602      	mov	r2, r0
 800cf0a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800cf0e:	1ad3      	subs	r3, r2, r3
 800cf10:	f241 3288 	movw	r2, #5000	; 0x1388
 800cf14:	4293      	cmp	r3, r2
 800cf16:	d907      	bls.n	800cf28 <HAL_RCC_OscConfig+0xc48>
        {
          return HAL_TIMEOUT;
 800cf18:	2303      	movs	r3, #3
 800cf1a:	e38e      	b.n	800d63a <HAL_RCC_OscConfig+0x135a>
 800cf1c:	40021000 	.word	0x40021000
 800cf20:	080343e4 	.word	0x080343e4
 800cf24:	40007000 	.word	0x40007000
 800cf28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cf2c:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800cf30:	2202      	movs	r2, #2
 800cf32:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cf34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cf38:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	fa93 f2a3 	rbit	r2, r3
 800cf42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cf46:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800cf4a:	601a      	str	r2, [r3, #0]
 800cf4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cf50:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800cf54:	2202      	movs	r2, #2
 800cf56:	601a      	str	r2, [r3, #0]
 800cf58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cf5c:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	fa93 f2a3 	rbit	r2, r3
 800cf66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cf6a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800cf6e:	601a      	str	r2, [r3, #0]
  return result;
 800cf70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cf74:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800cf78:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800cf7a:	fab3 f383 	clz	r3, r3
 800cf7e:	b2db      	uxtb	r3, r3
 800cf80:	095b      	lsrs	r3, r3, #5
 800cf82:	b2db      	uxtb	r3, r3
 800cf84:	f043 0302 	orr.w	r3, r3, #2
 800cf88:	b2db      	uxtb	r3, r3
 800cf8a:	2b02      	cmp	r3, #2
 800cf8c:	d102      	bne.n	800cf94 <HAL_RCC_OscConfig+0xcb4>
 800cf8e:	4bbb      	ldr	r3, [pc, #748]	; (800d27c <HAL_RCC_OscConfig+0xf9c>)
 800cf90:	6a1b      	ldr	r3, [r3, #32]
 800cf92:	e013      	b.n	800cfbc <HAL_RCC_OscConfig+0xcdc>
 800cf94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cf98:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800cf9c:	2202      	movs	r2, #2
 800cf9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cfa0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cfa4:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	fa93 f2a3 	rbit	r2, r3
 800cfae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800cfb2:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800cfb6:	601a      	str	r2, [r3, #0]
 800cfb8:	4bb0      	ldr	r3, [pc, #704]	; (800d27c <HAL_RCC_OscConfig+0xf9c>)
 800cfba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfbc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800cfc0:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800cfc4:	2102      	movs	r1, #2
 800cfc6:	6011      	str	r1, [r2, #0]
 800cfc8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800cfcc:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800cfd0:	6812      	ldr	r2, [r2, #0]
 800cfd2:	fa92 f1a2 	rbit	r1, r2
 800cfd6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800cfda:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800cfde:	6011      	str	r1, [r2, #0]
  return result;
 800cfe0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800cfe4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800cfe8:	6812      	ldr	r2, [r2, #0]
 800cfea:	fab2 f282 	clz	r2, r2
 800cfee:	b2d2      	uxtb	r2, r2
 800cff0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cff4:	b2d2      	uxtb	r2, r2
 800cff6:	f002 021f 	and.w	r2, r2, #31
 800cffa:	2101      	movs	r1, #1
 800cffc:	fa01 f202 	lsl.w	r2, r1, r2
 800d000:	4013      	ands	r3, r2
 800d002:	2b00      	cmp	r3, #0
 800d004:	f47f af7e 	bne.w	800cf04 <HAL_RCC_OscConfig+0xc24>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800d008:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800d00c:	2b01      	cmp	r3, #1
 800d00e:	d105      	bne.n	800d01c <HAL_RCC_OscConfig+0xd3c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d010:	4b9a      	ldr	r3, [pc, #616]	; (800d27c <HAL_RCC_OscConfig+0xf9c>)
 800d012:	69db      	ldr	r3, [r3, #28]
 800d014:	4a99      	ldr	r2, [pc, #612]	; (800d27c <HAL_RCC_OscConfig+0xf9c>)
 800d016:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d01a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800d01c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d020:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	69db      	ldr	r3, [r3, #28]
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d014      	beq.n	800d056 <HAL_RCC_OscConfig+0xd76>
 800d02c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d030:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	69db      	ldr	r3, [r3, #28]
 800d038:	2b01      	cmp	r3, #1
 800d03a:	d00c      	beq.n	800d056 <HAL_RCC_OscConfig+0xd76>
 800d03c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d040:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	69db      	ldr	r3, [r3, #28]
 800d048:	2b02      	cmp	r3, #2
 800d04a:	d004      	beq.n	800d056 <HAL_RCC_OscConfig+0xd76>
 800d04c:	f240 213a 	movw	r1, #570	; 0x23a
 800d050:	488b      	ldr	r0, [pc, #556]	; (800d280 <HAL_RCC_OscConfig+0xfa0>)
 800d052:	f7f8 fd9e 	bl	8005b92 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d056:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d05a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	69db      	ldr	r3, [r3, #28]
 800d062:	2b00      	cmp	r3, #0
 800d064:	f000 82e8 	beq.w	800d638 <HAL_RCC_OscConfig+0x1358>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800d068:	4b84      	ldr	r3, [pc, #528]	; (800d27c <HAL_RCC_OscConfig+0xf9c>)
 800d06a:	685b      	ldr	r3, [r3, #4]
 800d06c:	f003 030c 	and.w	r3, r3, #12
 800d070:	2b08      	cmp	r3, #8
 800d072:	f000 82b6 	beq.w	800d5e2 <HAL_RCC_OscConfig+0x1302>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d076:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d07a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	69db      	ldr	r3, [r3, #28]
 800d082:	2b02      	cmp	r3, #2
 800d084:	f040 8207 	bne.w	800d496 <HAL_RCC_OscConfig+0x11b6>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800d088:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d08c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	6a1b      	ldr	r3, [r3, #32]
 800d094:	2b00      	cmp	r3, #0
 800d096:	d00d      	beq.n	800d0b4 <HAL_RCC_OscConfig+0xdd4>
 800d098:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d09c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	6a1b      	ldr	r3, [r3, #32]
 800d0a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d0a8:	d004      	beq.n	800d0b4 <HAL_RCC_OscConfig+0xdd4>
 800d0aa:	f240 2143 	movw	r1, #579	; 0x243
 800d0ae:	4874      	ldr	r0, [pc, #464]	; (800d280 <HAL_RCC_OscConfig+0xfa0>)
 800d0b0:	f7f8 fd6f 	bl	8005b92 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 800d0b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d0b8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	f000 8083 	beq.w	800d1cc <HAL_RCC_OscConfig+0xeec>
 800d0c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d0ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0d2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800d0d6:	d079      	beq.n	800d1cc <HAL_RCC_OscConfig+0xeec>
 800d0d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d0dc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0e4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800d0e8:	d070      	beq.n	800d1cc <HAL_RCC_OscConfig+0xeec>
 800d0ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d0ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0f6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800d0fa:	d067      	beq.n	800d1cc <HAL_RCC_OscConfig+0xeec>
 800d0fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d100:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d108:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d10c:	d05e      	beq.n	800d1cc <HAL_RCC_OscConfig+0xeec>
 800d10e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d112:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d11a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800d11e:	d055      	beq.n	800d1cc <HAL_RCC_OscConfig+0xeec>
 800d120:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d124:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d12c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800d130:	d04c      	beq.n	800d1cc <HAL_RCC_OscConfig+0xeec>
 800d132:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d136:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d13e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800d142:	d043      	beq.n	800d1cc <HAL_RCC_OscConfig+0xeec>
 800d144:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d148:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d150:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d154:	d03a      	beq.n	800d1cc <HAL_RCC_OscConfig+0xeec>
 800d156:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d15a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d162:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800d166:	d031      	beq.n	800d1cc <HAL_RCC_OscConfig+0xeec>
 800d168:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d16c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d174:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800d178:	d028      	beq.n	800d1cc <HAL_RCC_OscConfig+0xeec>
 800d17a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d17e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d186:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800d18a:	d01f      	beq.n	800d1cc <HAL_RCC_OscConfig+0xeec>
 800d18c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d190:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d198:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800d19c:	d016      	beq.n	800d1cc <HAL_RCC_OscConfig+0xeec>
 800d19e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d1a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1aa:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 800d1ae:	d00d      	beq.n	800d1cc <HAL_RCC_OscConfig+0xeec>
 800d1b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d1b4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1bc:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 800d1c0:	d004      	beq.n	800d1cc <HAL_RCC_OscConfig+0xeec>
 800d1c2:	f44f 7111 	mov.w	r1, #580	; 0x244
 800d1c6:	482e      	ldr	r0, [pc, #184]	; (800d280 <HAL_RCC_OscConfig+0xfa0>)
 800d1c8:	f7f8 fce3 	bl	8005b92 <assert_failed>
 800d1cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d1d0:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800d1d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d1d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d1da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d1de:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	fa93 f2a3 	rbit	r2, r3
 800d1e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d1ec:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800d1f0:	601a      	str	r2, [r3, #0]
  return result;
 800d1f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d1f6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800d1fa:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d1fc:	fab3 f383 	clz	r3, r3
 800d200:	b2db      	uxtb	r3, r3
 800d202:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800d206:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800d20a:	009b      	lsls	r3, r3, #2
 800d20c:	461a      	mov	r2, r3
 800d20e:	2300      	movs	r3, #0
 800d210:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d212:	f7fa fca5 	bl	8007b60 <HAL_GetTick>
 800d216:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800d21a:	e009      	b.n	800d230 <HAL_RCC_OscConfig+0xf50>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d21c:	f7fa fca0 	bl	8007b60 <HAL_GetTick>
 800d220:	4602      	mov	r2, r0
 800d222:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800d226:	1ad3      	subs	r3, r2, r3
 800d228:	2b02      	cmp	r3, #2
 800d22a:	d901      	bls.n	800d230 <HAL_RCC_OscConfig+0xf50>
          {
            return HAL_TIMEOUT;
 800d22c:	2303      	movs	r3, #3
 800d22e:	e204      	b.n	800d63a <HAL_RCC_OscConfig+0x135a>
 800d230:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d234:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800d238:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800d23c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d23e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d242:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	fa93 f2a3 	rbit	r2, r3
 800d24c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d250:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800d254:	601a      	str	r2, [r3, #0]
  return result;
 800d256:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d25a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800d25e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800d260:	fab3 f383 	clz	r3, r3
 800d264:	b2db      	uxtb	r3, r3
 800d266:	095b      	lsrs	r3, r3, #5
 800d268:	b2db      	uxtb	r3, r3
 800d26a:	f043 0301 	orr.w	r3, r3, #1
 800d26e:	b2db      	uxtb	r3, r3
 800d270:	2b01      	cmp	r3, #1
 800d272:	d107      	bne.n	800d284 <HAL_RCC_OscConfig+0xfa4>
 800d274:	4b01      	ldr	r3, [pc, #4]	; (800d27c <HAL_RCC_OscConfig+0xf9c>)
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	e02c      	b.n	800d2d4 <HAL_RCC_OscConfig+0xff4>
 800d27a:	bf00      	nop
 800d27c:	40021000 	.word	0x40021000
 800d280:	080343e4 	.word	0x080343e4
 800d284:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d288:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800d28c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800d290:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d292:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d296:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	fa93 f2a3 	rbit	r2, r3
 800d2a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d2a4:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800d2a8:	601a      	str	r2, [r3, #0]
 800d2aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d2ae:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800d2b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800d2b6:	601a      	str	r2, [r3, #0]
 800d2b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d2bc:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	fa93 f2a3 	rbit	r2, r3
 800d2c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d2ca:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800d2ce:	601a      	str	r2, [r3, #0]
 800d2d0:	4bc9      	ldr	r3, [pc, #804]	; (800d5f8 <HAL_RCC_OscConfig+0x1318>)
 800d2d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2d4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d2d8:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800d2dc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800d2e0:	6011      	str	r1, [r2, #0]
 800d2e2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d2e6:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800d2ea:	6812      	ldr	r2, [r2, #0]
 800d2ec:	fa92 f1a2 	rbit	r1, r2
 800d2f0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d2f4:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800d2f8:	6011      	str	r1, [r2, #0]
  return result;
 800d2fa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d2fe:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800d302:	6812      	ldr	r2, [r2, #0]
 800d304:	fab2 f282 	clz	r2, r2
 800d308:	b2d2      	uxtb	r2, r2
 800d30a:	f042 0220 	orr.w	r2, r2, #32
 800d30e:	b2d2      	uxtb	r2, r2
 800d310:	f002 021f 	and.w	r2, r2, #31
 800d314:	2101      	movs	r1, #1
 800d316:	fa01 f202 	lsl.w	r2, r1, r2
 800d31a:	4013      	ands	r3, r2
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	f47f af7d 	bne.w	800d21c <HAL_RCC_OscConfig+0xf3c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d322:	4bb5      	ldr	r3, [pc, #724]	; (800d5f8 <HAL_RCC_OscConfig+0x1318>)
 800d324:	685b      	ldr	r3, [r3, #4]
 800d326:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800d32a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d32e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800d336:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d33a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	6a1b      	ldr	r3, [r3, #32]
 800d342:	430b      	orrs	r3, r1
 800d344:	49ac      	ldr	r1, [pc, #688]	; (800d5f8 <HAL_RCC_OscConfig+0x1318>)
 800d346:	4313      	orrs	r3, r2
 800d348:	604b      	str	r3, [r1, #4]
 800d34a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d34e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800d352:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d356:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d358:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d35c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	fa93 f2a3 	rbit	r2, r3
 800d366:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d36a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800d36e:	601a      	str	r2, [r3, #0]
  return result;
 800d370:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d374:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800d378:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800d37a:	fab3 f383 	clz	r3, r3
 800d37e:	b2db      	uxtb	r3, r3
 800d380:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800d384:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800d388:	009b      	lsls	r3, r3, #2
 800d38a:	461a      	mov	r2, r3
 800d38c:	2301      	movs	r3, #1
 800d38e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d390:	f7fa fbe6 	bl	8007b60 <HAL_GetTick>
 800d394:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800d398:	e009      	b.n	800d3ae <HAL_RCC_OscConfig+0x10ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d39a:	f7fa fbe1 	bl	8007b60 <HAL_GetTick>
 800d39e:	4602      	mov	r2, r0
 800d3a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800d3a4:	1ad3      	subs	r3, r2, r3
 800d3a6:	2b02      	cmp	r3, #2
 800d3a8:	d901      	bls.n	800d3ae <HAL_RCC_OscConfig+0x10ce>
          {
            return HAL_TIMEOUT;
 800d3aa:	2303      	movs	r3, #3
 800d3ac:	e145      	b.n	800d63a <HAL_RCC_OscConfig+0x135a>
 800d3ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d3b2:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800d3b6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800d3ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d3bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d3c0:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	fa93 f2a3 	rbit	r2, r3
 800d3ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d3ce:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800d3d2:	601a      	str	r2, [r3, #0]
  return result;
 800d3d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d3d8:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800d3dc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800d3de:	fab3 f383 	clz	r3, r3
 800d3e2:	b2db      	uxtb	r3, r3
 800d3e4:	095b      	lsrs	r3, r3, #5
 800d3e6:	b2db      	uxtb	r3, r3
 800d3e8:	f043 0301 	orr.w	r3, r3, #1
 800d3ec:	b2db      	uxtb	r3, r3
 800d3ee:	2b01      	cmp	r3, #1
 800d3f0:	d102      	bne.n	800d3f8 <HAL_RCC_OscConfig+0x1118>
 800d3f2:	4b81      	ldr	r3, [pc, #516]	; (800d5f8 <HAL_RCC_OscConfig+0x1318>)
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	e027      	b.n	800d448 <HAL_RCC_OscConfig+0x1168>
 800d3f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d3fc:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800d400:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800d404:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d406:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d40a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	fa93 f2a3 	rbit	r2, r3
 800d414:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d418:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800d41c:	601a      	str	r2, [r3, #0]
 800d41e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d422:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800d426:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800d42a:	601a      	str	r2, [r3, #0]
 800d42c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d430:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	fa93 f2a3 	rbit	r2, r3
 800d43a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d43e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800d442:	601a      	str	r2, [r3, #0]
 800d444:	4b6c      	ldr	r3, [pc, #432]	; (800d5f8 <HAL_RCC_OscConfig+0x1318>)
 800d446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d448:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d44c:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800d450:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800d454:	6011      	str	r1, [r2, #0]
 800d456:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d45a:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800d45e:	6812      	ldr	r2, [r2, #0]
 800d460:	fa92 f1a2 	rbit	r1, r2
 800d464:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d468:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800d46c:	6011      	str	r1, [r2, #0]
  return result;
 800d46e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d472:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800d476:	6812      	ldr	r2, [r2, #0]
 800d478:	fab2 f282 	clz	r2, r2
 800d47c:	b2d2      	uxtb	r2, r2
 800d47e:	f042 0220 	orr.w	r2, r2, #32
 800d482:	b2d2      	uxtb	r2, r2
 800d484:	f002 021f 	and.w	r2, r2, #31
 800d488:	2101      	movs	r1, #1
 800d48a:	fa01 f202 	lsl.w	r2, r1, r2
 800d48e:	4013      	ands	r3, r2
 800d490:	2b00      	cmp	r3, #0
 800d492:	d082      	beq.n	800d39a <HAL_RCC_OscConfig+0x10ba>
 800d494:	e0d0      	b.n	800d638 <HAL_RCC_OscConfig+0x1358>
 800d496:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d49a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800d49e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d4a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d4a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d4a8:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	fa93 f2a3 	rbit	r2, r3
 800d4b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d4b6:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800d4ba:	601a      	str	r2, [r3, #0]
  return result;
 800d4bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d4c0:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800d4c4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d4c6:	fab3 f383 	clz	r3, r3
 800d4ca:	b2db      	uxtb	r3, r3
 800d4cc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800d4d0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800d4d4:	009b      	lsls	r3, r3, #2
 800d4d6:	461a      	mov	r2, r3
 800d4d8:	2300      	movs	r3, #0
 800d4da:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d4dc:	f7fa fb40 	bl	8007b60 <HAL_GetTick>
 800d4e0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800d4e4:	e009      	b.n	800d4fa <HAL_RCC_OscConfig+0x121a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d4e6:	f7fa fb3b 	bl	8007b60 <HAL_GetTick>
 800d4ea:	4602      	mov	r2, r0
 800d4ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800d4f0:	1ad3      	subs	r3, r2, r3
 800d4f2:	2b02      	cmp	r3, #2
 800d4f4:	d901      	bls.n	800d4fa <HAL_RCC_OscConfig+0x121a>
          {
            return HAL_TIMEOUT;
 800d4f6:	2303      	movs	r3, #3
 800d4f8:	e09f      	b.n	800d63a <HAL_RCC_OscConfig+0x135a>
 800d4fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d4fe:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800d502:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800d506:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d508:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d50c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	fa93 f2a3 	rbit	r2, r3
 800d516:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d51a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800d51e:	601a      	str	r2, [r3, #0]
  return result;
 800d520:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d524:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800d528:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800d52a:	fab3 f383 	clz	r3, r3
 800d52e:	b2db      	uxtb	r3, r3
 800d530:	095b      	lsrs	r3, r3, #5
 800d532:	b2db      	uxtb	r3, r3
 800d534:	f043 0301 	orr.w	r3, r3, #1
 800d538:	b2db      	uxtb	r3, r3
 800d53a:	2b01      	cmp	r3, #1
 800d53c:	d102      	bne.n	800d544 <HAL_RCC_OscConfig+0x1264>
 800d53e:	4b2e      	ldr	r3, [pc, #184]	; (800d5f8 <HAL_RCC_OscConfig+0x1318>)
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	e027      	b.n	800d594 <HAL_RCC_OscConfig+0x12b4>
 800d544:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d548:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800d54c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800d550:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d552:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d556:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	fa93 f2a3 	rbit	r2, r3
 800d560:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d564:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800d568:	601a      	str	r2, [r3, #0]
 800d56a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d56e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800d572:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800d576:	601a      	str	r2, [r3, #0]
 800d578:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d57c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	fa93 f2a3 	rbit	r2, r3
 800d586:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d58a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800d58e:	601a      	str	r2, [r3, #0]
 800d590:	4b19      	ldr	r3, [pc, #100]	; (800d5f8 <HAL_RCC_OscConfig+0x1318>)
 800d592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d594:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d598:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800d59c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800d5a0:	6011      	str	r1, [r2, #0]
 800d5a2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d5a6:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800d5aa:	6812      	ldr	r2, [r2, #0]
 800d5ac:	fa92 f1a2 	rbit	r1, r2
 800d5b0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d5b4:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800d5b8:	6011      	str	r1, [r2, #0]
  return result;
 800d5ba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800d5be:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800d5c2:	6812      	ldr	r2, [r2, #0]
 800d5c4:	fab2 f282 	clz	r2, r2
 800d5c8:	b2d2      	uxtb	r2, r2
 800d5ca:	f042 0220 	orr.w	r2, r2, #32
 800d5ce:	b2d2      	uxtb	r2, r2
 800d5d0:	f002 021f 	and.w	r2, r2, #31
 800d5d4:	2101      	movs	r1, #1
 800d5d6:	fa01 f202 	lsl.w	r2, r1, r2
 800d5da:	4013      	ands	r3, r2
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d182      	bne.n	800d4e6 <HAL_RCC_OscConfig+0x1206>
 800d5e0:	e02a      	b.n	800d638 <HAL_RCC_OscConfig+0x1358>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800d5e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d5e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	69db      	ldr	r3, [r3, #28]
 800d5ee:	2b01      	cmp	r3, #1
 800d5f0:	d104      	bne.n	800d5fc <HAL_RCC_OscConfig+0x131c>
      {
        return HAL_ERROR;
 800d5f2:	2301      	movs	r3, #1
 800d5f4:	e021      	b.n	800d63a <HAL_RCC_OscConfig+0x135a>
 800d5f6:	bf00      	nop
 800d5f8:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800d5fc:	4b11      	ldr	r3, [pc, #68]	; (800d644 <HAL_RCC_OscConfig+0x1364>)
 800d5fe:	685b      	ldr	r3, [r3, #4]
 800d600:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800d604:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800d608:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800d60c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d610:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	6a1b      	ldr	r3, [r3, #32]
 800d618:	429a      	cmp	r2, r3
 800d61a:	d10b      	bne.n	800d634 <HAL_RCC_OscConfig+0x1354>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800d61c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800d620:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800d624:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800d628:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800d630:	429a      	cmp	r2, r3
 800d632:	d001      	beq.n	800d638 <HAL_RCC_OscConfig+0x1358>
#endif
        {
          return HAL_ERROR;
 800d634:	2301      	movs	r3, #1
 800d636:	e000      	b.n	800d63a <HAL_RCC_OscConfig+0x135a>
        }
      }
    }
  }

  return HAL_OK;
 800d638:	2300      	movs	r3, #0
}
 800d63a:	4618      	mov	r0, r3
 800d63c:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800d640:	46bd      	mov	sp, r7
 800d642:	bd80      	pop	{r7, pc}
 800d644:	40021000 	.word	0x40021000

0800d648 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d648:	b580      	push	{r7, lr}
 800d64a:	b09e      	sub	sp, #120	; 0x78
 800d64c:	af00      	add	r7, sp, #0
 800d64e:	6078      	str	r0, [r7, #4]
 800d650:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800d652:	2300      	movs	r3, #0
 800d654:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d101      	bne.n	800d660 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800d65c:	2301      	movs	r3, #1
 800d65e:	e205      	b.n	800da6c <HAL_RCC_ClockConfig+0x424>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	f003 0301 	and.w	r3, r3, #1
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d116      	bne.n	800d69a <HAL_RCC_ClockConfig+0x52>
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	f003 0302 	and.w	r3, r3, #2
 800d674:	2b00      	cmp	r3, #0
 800d676:	d110      	bne.n	800d69a <HAL_RCC_ClockConfig+0x52>
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	f003 0304 	and.w	r3, r3, #4
 800d680:	2b00      	cmp	r3, #0
 800d682:	d10a      	bne.n	800d69a <HAL_RCC_ClockConfig+0x52>
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	f003 0308 	and.w	r3, r3, #8
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d104      	bne.n	800d69a <HAL_RCC_ClockConfig+0x52>
 800d690:	f240 21c3 	movw	r1, #707	; 0x2c3
 800d694:	489a      	ldr	r0, [pc, #616]	; (800d900 <HAL_RCC_ClockConfig+0x2b8>)
 800d696:	f7f8 fa7c 	bl	8005b92 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800d69a:	683b      	ldr	r3, [r7, #0]
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d00a      	beq.n	800d6b6 <HAL_RCC_ClockConfig+0x6e>
 800d6a0:	683b      	ldr	r3, [r7, #0]
 800d6a2:	2b01      	cmp	r3, #1
 800d6a4:	d007      	beq.n	800d6b6 <HAL_RCC_ClockConfig+0x6e>
 800d6a6:	683b      	ldr	r3, [r7, #0]
 800d6a8:	2b02      	cmp	r3, #2
 800d6aa:	d004      	beq.n	800d6b6 <HAL_RCC_ClockConfig+0x6e>
 800d6ac:	f44f 7131 	mov.w	r1, #708	; 0x2c4
 800d6b0:	4893      	ldr	r0, [pc, #588]	; (800d900 <HAL_RCC_ClockConfig+0x2b8>)
 800d6b2:	f7f8 fa6e 	bl	8005b92 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800d6b6:	4b93      	ldr	r3, [pc, #588]	; (800d904 <HAL_RCC_ClockConfig+0x2bc>)
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	f003 0307 	and.w	r3, r3, #7
 800d6be:	683a      	ldr	r2, [r7, #0]
 800d6c0:	429a      	cmp	r2, r3
 800d6c2:	d910      	bls.n	800d6e6 <HAL_RCC_ClockConfig+0x9e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d6c4:	4b8f      	ldr	r3, [pc, #572]	; (800d904 <HAL_RCC_ClockConfig+0x2bc>)
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	f023 0207 	bic.w	r2, r3, #7
 800d6cc:	498d      	ldr	r1, [pc, #564]	; (800d904 <HAL_RCC_ClockConfig+0x2bc>)
 800d6ce:	683b      	ldr	r3, [r7, #0]
 800d6d0:	4313      	orrs	r3, r2
 800d6d2:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d6d4:	4b8b      	ldr	r3, [pc, #556]	; (800d904 <HAL_RCC_ClockConfig+0x2bc>)
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	f003 0307 	and.w	r3, r3, #7
 800d6dc:	683a      	ldr	r2, [r7, #0]
 800d6de:	429a      	cmp	r2, r3
 800d6e0:	d001      	beq.n	800d6e6 <HAL_RCC_ClockConfig+0x9e>
    {
      return HAL_ERROR;
 800d6e2:	2301      	movs	r3, #1
 800d6e4:	e1c2      	b.n	800da6c <HAL_RCC_ClockConfig+0x424>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	f003 0302 	and.w	r3, r3, #2
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d031      	beq.n	800d756 <HAL_RCC_ClockConfig+0x10e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	689b      	ldr	r3, [r3, #8]
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d024      	beq.n	800d744 <HAL_RCC_ClockConfig+0xfc>
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	689b      	ldr	r3, [r3, #8]
 800d6fe:	2b80      	cmp	r3, #128	; 0x80
 800d700:	d020      	beq.n	800d744 <HAL_RCC_ClockConfig+0xfc>
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	689b      	ldr	r3, [r3, #8]
 800d706:	2b90      	cmp	r3, #144	; 0x90
 800d708:	d01c      	beq.n	800d744 <HAL_RCC_ClockConfig+0xfc>
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	689b      	ldr	r3, [r3, #8]
 800d70e:	2ba0      	cmp	r3, #160	; 0xa0
 800d710:	d018      	beq.n	800d744 <HAL_RCC_ClockConfig+0xfc>
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	689b      	ldr	r3, [r3, #8]
 800d716:	2bb0      	cmp	r3, #176	; 0xb0
 800d718:	d014      	beq.n	800d744 <HAL_RCC_ClockConfig+0xfc>
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	689b      	ldr	r3, [r3, #8]
 800d71e:	2bc0      	cmp	r3, #192	; 0xc0
 800d720:	d010      	beq.n	800d744 <HAL_RCC_ClockConfig+0xfc>
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	689b      	ldr	r3, [r3, #8]
 800d726:	2bd0      	cmp	r3, #208	; 0xd0
 800d728:	d00c      	beq.n	800d744 <HAL_RCC_ClockConfig+0xfc>
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	689b      	ldr	r3, [r3, #8]
 800d72e:	2be0      	cmp	r3, #224	; 0xe0
 800d730:	d008      	beq.n	800d744 <HAL_RCC_ClockConfig+0xfc>
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	689b      	ldr	r3, [r3, #8]
 800d736:	2bf0      	cmp	r3, #240	; 0xf0
 800d738:	d004      	beq.n	800d744 <HAL_RCC_ClockConfig+0xfc>
 800d73a:	f240 21db 	movw	r1, #731	; 0x2db
 800d73e:	4870      	ldr	r0, [pc, #448]	; (800d900 <HAL_RCC_ClockConfig+0x2b8>)
 800d740:	f7f8 fa27 	bl	8005b92 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d744:	4b70      	ldr	r3, [pc, #448]	; (800d908 <HAL_RCC_ClockConfig+0x2c0>)
 800d746:	685b      	ldr	r3, [r3, #4]
 800d748:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	689b      	ldr	r3, [r3, #8]
 800d750:	496d      	ldr	r1, [pc, #436]	; (800d908 <HAL_RCC_ClockConfig+0x2c0>)
 800d752:	4313      	orrs	r3, r2
 800d754:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	f003 0301 	and.w	r3, r3, #1
 800d75e:	2b00      	cmp	r3, #0
 800d760:	f000 80f5 	beq.w	800d94e <HAL_RCC_ClockConfig+0x306>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	685b      	ldr	r3, [r3, #4]
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d00c      	beq.n	800d786 <HAL_RCC_ClockConfig+0x13e>
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	685b      	ldr	r3, [r3, #4]
 800d770:	2b01      	cmp	r3, #1
 800d772:	d008      	beq.n	800d786 <HAL_RCC_ClockConfig+0x13e>
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	685b      	ldr	r3, [r3, #4]
 800d778:	2b02      	cmp	r3, #2
 800d77a:	d004      	beq.n	800d786 <HAL_RCC_ClockConfig+0x13e>
 800d77c:	f240 21e2 	movw	r1, #738	; 0x2e2
 800d780:	485f      	ldr	r0, [pc, #380]	; (800d900 <HAL_RCC_ClockConfig+0x2b8>)
 800d782:	f7f8 fa06 	bl	8005b92 <assert_failed>
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	685b      	ldr	r3, [r3, #4]
 800d78a:	2b01      	cmp	r3, #1
 800d78c:	d13d      	bne.n	800d80a <HAL_RCC_ClockConfig+0x1c2>
 800d78e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d792:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d794:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d796:	fa93 f3a3 	rbit	r3, r3
 800d79a:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800d79c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d79e:	fab3 f383 	clz	r3, r3
 800d7a2:	b2db      	uxtb	r3, r3
 800d7a4:	095b      	lsrs	r3, r3, #5
 800d7a6:	b2db      	uxtb	r3, r3
 800d7a8:	f043 0301 	orr.w	r3, r3, #1
 800d7ac:	b2db      	uxtb	r3, r3
 800d7ae:	2b01      	cmp	r3, #1
 800d7b0:	d102      	bne.n	800d7b8 <HAL_RCC_ClockConfig+0x170>
 800d7b2:	4b55      	ldr	r3, [pc, #340]	; (800d908 <HAL_RCC_ClockConfig+0x2c0>)
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	e00f      	b.n	800d7d8 <HAL_RCC_ClockConfig+0x190>
 800d7b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d7bc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d7be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d7c0:	fa93 f3a3 	rbit	r3, r3
 800d7c4:	667b      	str	r3, [r7, #100]	; 0x64
 800d7c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d7ca:	663b      	str	r3, [r7, #96]	; 0x60
 800d7cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d7ce:	fa93 f3a3 	rbit	r3, r3
 800d7d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d7d4:	4b4c      	ldr	r3, [pc, #304]	; (800d908 <HAL_RCC_ClockConfig+0x2c0>)
 800d7d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7d8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800d7dc:	65ba      	str	r2, [r7, #88]	; 0x58
 800d7de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d7e0:	fa92 f2a2 	rbit	r2, r2
 800d7e4:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800d7e6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d7e8:	fab2 f282 	clz	r2, r2
 800d7ec:	b2d2      	uxtb	r2, r2
 800d7ee:	f042 0220 	orr.w	r2, r2, #32
 800d7f2:	b2d2      	uxtb	r2, r2
 800d7f4:	f002 021f 	and.w	r2, r2, #31
 800d7f8:	2101      	movs	r1, #1
 800d7fa:	fa01 f202 	lsl.w	r2, r1, r2
 800d7fe:	4013      	ands	r3, r2
 800d800:	2b00      	cmp	r3, #0
 800d802:	f040 8083 	bne.w	800d90c <HAL_RCC_ClockConfig+0x2c4>
      {
        return HAL_ERROR;
 800d806:	2301      	movs	r3, #1
 800d808:	e130      	b.n	800da6c <HAL_RCC_ClockConfig+0x424>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	685b      	ldr	r3, [r3, #4]
 800d80e:	2b02      	cmp	r3, #2
 800d810:	d13c      	bne.n	800d88c <HAL_RCC_ClockConfig+0x244>
 800d812:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d816:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d818:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d81a:	fa93 f3a3 	rbit	r3, r3
 800d81e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800d820:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d822:	fab3 f383 	clz	r3, r3
 800d826:	b2db      	uxtb	r3, r3
 800d828:	095b      	lsrs	r3, r3, #5
 800d82a:	b2db      	uxtb	r3, r3
 800d82c:	f043 0301 	orr.w	r3, r3, #1
 800d830:	b2db      	uxtb	r3, r3
 800d832:	2b01      	cmp	r3, #1
 800d834:	d102      	bne.n	800d83c <HAL_RCC_ClockConfig+0x1f4>
 800d836:	4b34      	ldr	r3, [pc, #208]	; (800d908 <HAL_RCC_ClockConfig+0x2c0>)
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	e00f      	b.n	800d85c <HAL_RCC_ClockConfig+0x214>
 800d83c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d840:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d842:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d844:	fa93 f3a3 	rbit	r3, r3
 800d848:	647b      	str	r3, [r7, #68]	; 0x44
 800d84a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d84e:	643b      	str	r3, [r7, #64]	; 0x40
 800d850:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d852:	fa93 f3a3 	rbit	r3, r3
 800d856:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d858:	4b2b      	ldr	r3, [pc, #172]	; (800d908 <HAL_RCC_ClockConfig+0x2c0>)
 800d85a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d85c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800d860:	63ba      	str	r2, [r7, #56]	; 0x38
 800d862:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d864:	fa92 f2a2 	rbit	r2, r2
 800d868:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800d86a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d86c:	fab2 f282 	clz	r2, r2
 800d870:	b2d2      	uxtb	r2, r2
 800d872:	f042 0220 	orr.w	r2, r2, #32
 800d876:	b2d2      	uxtb	r2, r2
 800d878:	f002 021f 	and.w	r2, r2, #31
 800d87c:	2101      	movs	r1, #1
 800d87e:	fa01 f202 	lsl.w	r2, r1, r2
 800d882:	4013      	ands	r3, r2
 800d884:	2b00      	cmp	r3, #0
 800d886:	d141      	bne.n	800d90c <HAL_RCC_ClockConfig+0x2c4>
      {
        return HAL_ERROR;
 800d888:	2301      	movs	r3, #1
 800d88a:	e0ef      	b.n	800da6c <HAL_RCC_ClockConfig+0x424>
 800d88c:	2302      	movs	r3, #2
 800d88e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d892:	fa93 f3a3 	rbit	r3, r3
 800d896:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800d898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d89a:	fab3 f383 	clz	r3, r3
 800d89e:	b2db      	uxtb	r3, r3
 800d8a0:	095b      	lsrs	r3, r3, #5
 800d8a2:	b2db      	uxtb	r3, r3
 800d8a4:	f043 0301 	orr.w	r3, r3, #1
 800d8a8:	b2db      	uxtb	r3, r3
 800d8aa:	2b01      	cmp	r3, #1
 800d8ac:	d102      	bne.n	800d8b4 <HAL_RCC_ClockConfig+0x26c>
 800d8ae:	4b16      	ldr	r3, [pc, #88]	; (800d908 <HAL_RCC_ClockConfig+0x2c0>)
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	e00d      	b.n	800d8d0 <HAL_RCC_ClockConfig+0x288>
 800d8b4:	2302      	movs	r3, #2
 800d8b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d8b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8ba:	fa93 f3a3 	rbit	r3, r3
 800d8be:	627b      	str	r3, [r7, #36]	; 0x24
 800d8c0:	2302      	movs	r3, #2
 800d8c2:	623b      	str	r3, [r7, #32]
 800d8c4:	6a3b      	ldr	r3, [r7, #32]
 800d8c6:	fa93 f3a3 	rbit	r3, r3
 800d8ca:	61fb      	str	r3, [r7, #28]
 800d8cc:	4b0e      	ldr	r3, [pc, #56]	; (800d908 <HAL_RCC_ClockConfig+0x2c0>)
 800d8ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8d0:	2202      	movs	r2, #2
 800d8d2:	61ba      	str	r2, [r7, #24]
 800d8d4:	69ba      	ldr	r2, [r7, #24]
 800d8d6:	fa92 f2a2 	rbit	r2, r2
 800d8da:	617a      	str	r2, [r7, #20]
  return result;
 800d8dc:	697a      	ldr	r2, [r7, #20]
 800d8de:	fab2 f282 	clz	r2, r2
 800d8e2:	b2d2      	uxtb	r2, r2
 800d8e4:	f042 0220 	orr.w	r2, r2, #32
 800d8e8:	b2d2      	uxtb	r2, r2
 800d8ea:	f002 021f 	and.w	r2, r2, #31
 800d8ee:	2101      	movs	r1, #1
 800d8f0:	fa01 f202 	lsl.w	r2, r1, r2
 800d8f4:	4013      	ands	r3, r2
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d108      	bne.n	800d90c <HAL_RCC_ClockConfig+0x2c4>
      {
        return HAL_ERROR;
 800d8fa:	2301      	movs	r3, #1
 800d8fc:	e0b6      	b.n	800da6c <HAL_RCC_ClockConfig+0x424>
 800d8fe:	bf00      	nop
 800d900:	080343e4 	.word	0x080343e4
 800d904:	40022000 	.word	0x40022000
 800d908:	40021000 	.word	0x40021000
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800d90c:	4b59      	ldr	r3, [pc, #356]	; (800da74 <HAL_RCC_ClockConfig+0x42c>)
 800d90e:	685b      	ldr	r3, [r3, #4]
 800d910:	f023 0203 	bic.w	r2, r3, #3
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	685b      	ldr	r3, [r3, #4]
 800d918:	4956      	ldr	r1, [pc, #344]	; (800da74 <HAL_RCC_ClockConfig+0x42c>)
 800d91a:	4313      	orrs	r3, r2
 800d91c:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800d91e:	f7fa f91f 	bl	8007b60 <HAL_GetTick>
 800d922:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d924:	e00a      	b.n	800d93c <HAL_RCC_ClockConfig+0x2f4>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d926:	f7fa f91b 	bl	8007b60 <HAL_GetTick>
 800d92a:	4602      	mov	r2, r0
 800d92c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d92e:	1ad3      	subs	r3, r2, r3
 800d930:	f241 3288 	movw	r2, #5000	; 0x1388
 800d934:	4293      	cmp	r3, r2
 800d936:	d901      	bls.n	800d93c <HAL_RCC_ClockConfig+0x2f4>
      {
        return HAL_TIMEOUT;
 800d938:	2303      	movs	r3, #3
 800d93a:	e097      	b.n	800da6c <HAL_RCC_ClockConfig+0x424>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d93c:	4b4d      	ldr	r3, [pc, #308]	; (800da74 <HAL_RCC_ClockConfig+0x42c>)
 800d93e:	685b      	ldr	r3, [r3, #4]
 800d940:	f003 020c 	and.w	r2, r3, #12
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	685b      	ldr	r3, [r3, #4]
 800d948:	009b      	lsls	r3, r3, #2
 800d94a:	429a      	cmp	r2, r3
 800d94c:	d1eb      	bne.n	800d926 <HAL_RCC_ClockConfig+0x2de>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800d94e:	4b4a      	ldr	r3, [pc, #296]	; (800da78 <HAL_RCC_ClockConfig+0x430>)
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	f003 0307 	and.w	r3, r3, #7
 800d956:	683a      	ldr	r2, [r7, #0]
 800d958:	429a      	cmp	r2, r3
 800d95a:	d210      	bcs.n	800d97e <HAL_RCC_ClockConfig+0x336>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d95c:	4b46      	ldr	r3, [pc, #280]	; (800da78 <HAL_RCC_ClockConfig+0x430>)
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	f023 0207 	bic.w	r2, r3, #7
 800d964:	4944      	ldr	r1, [pc, #272]	; (800da78 <HAL_RCC_ClockConfig+0x430>)
 800d966:	683b      	ldr	r3, [r7, #0]
 800d968:	4313      	orrs	r3, r2
 800d96a:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d96c:	4b42      	ldr	r3, [pc, #264]	; (800da78 <HAL_RCC_ClockConfig+0x430>)
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	f003 0307 	and.w	r3, r3, #7
 800d974:	683a      	ldr	r2, [r7, #0]
 800d976:	429a      	cmp	r2, r3
 800d978:	d001      	beq.n	800d97e <HAL_RCC_ClockConfig+0x336>
    {
      return HAL_ERROR;
 800d97a:	2301      	movs	r3, #1
 800d97c:	e076      	b.n	800da6c <HAL_RCC_ClockConfig+0x424>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	f003 0304 	and.w	r3, r3, #4
 800d986:	2b00      	cmp	r3, #0
 800d988:	d025      	beq.n	800d9d6 <HAL_RCC_ClockConfig+0x38e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	68db      	ldr	r3, [r3, #12]
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d018      	beq.n	800d9c4 <HAL_RCC_ClockConfig+0x37c>
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	68db      	ldr	r3, [r3, #12]
 800d996:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d99a:	d013      	beq.n	800d9c4 <HAL_RCC_ClockConfig+0x37c>
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	68db      	ldr	r3, [r3, #12]
 800d9a0:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800d9a4:	d00e      	beq.n	800d9c4 <HAL_RCC_ClockConfig+0x37c>
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	68db      	ldr	r3, [r3, #12]
 800d9aa:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800d9ae:	d009      	beq.n	800d9c4 <HAL_RCC_ClockConfig+0x37c>
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	68db      	ldr	r3, [r3, #12]
 800d9b4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d9b8:	d004      	beq.n	800d9c4 <HAL_RCC_ClockConfig+0x37c>
 800d9ba:	f240 311e 	movw	r1, #798	; 0x31e
 800d9be:	482f      	ldr	r0, [pc, #188]	; (800da7c <HAL_RCC_ClockConfig+0x434>)
 800d9c0:	f7f8 f8e7 	bl	8005b92 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800d9c4:	4b2b      	ldr	r3, [pc, #172]	; (800da74 <HAL_RCC_ClockConfig+0x42c>)
 800d9c6:	685b      	ldr	r3, [r3, #4]
 800d9c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	68db      	ldr	r3, [r3, #12]
 800d9d0:	4928      	ldr	r1, [pc, #160]	; (800da74 <HAL_RCC_ClockConfig+0x42c>)
 800d9d2:	4313      	orrs	r3, r2
 800d9d4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	f003 0308 	and.w	r3, r3, #8
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d026      	beq.n	800da30 <HAL_RCC_ClockConfig+0x3e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	691b      	ldr	r3, [r3, #16]
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d018      	beq.n	800da1c <HAL_RCC_ClockConfig+0x3d4>
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	691b      	ldr	r3, [r3, #16]
 800d9ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d9f2:	d013      	beq.n	800da1c <HAL_RCC_ClockConfig+0x3d4>
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	691b      	ldr	r3, [r3, #16]
 800d9f8:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800d9fc:	d00e      	beq.n	800da1c <HAL_RCC_ClockConfig+0x3d4>
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	691b      	ldr	r3, [r3, #16]
 800da02:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800da06:	d009      	beq.n	800da1c <HAL_RCC_ClockConfig+0x3d4>
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	691b      	ldr	r3, [r3, #16]
 800da0c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800da10:	d004      	beq.n	800da1c <HAL_RCC_ClockConfig+0x3d4>
 800da12:	f240 3125 	movw	r1, #805	; 0x325
 800da16:	4819      	ldr	r0, [pc, #100]	; (800da7c <HAL_RCC_ClockConfig+0x434>)
 800da18:	f7f8 f8bb 	bl	8005b92 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800da1c:	4b15      	ldr	r3, [pc, #84]	; (800da74 <HAL_RCC_ClockConfig+0x42c>)
 800da1e:	685b      	ldr	r3, [r3, #4]
 800da20:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	691b      	ldr	r3, [r3, #16]
 800da28:	00db      	lsls	r3, r3, #3
 800da2a:	4912      	ldr	r1, [pc, #72]	; (800da74 <HAL_RCC_ClockConfig+0x42c>)
 800da2c:	4313      	orrs	r3, r2
 800da2e:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800da30:	f000 f82c 	bl	800da8c <HAL_RCC_GetSysClockFreq>
 800da34:	4601      	mov	r1, r0
 800da36:	4b0f      	ldr	r3, [pc, #60]	; (800da74 <HAL_RCC_ClockConfig+0x42c>)
 800da38:	685b      	ldr	r3, [r3, #4]
 800da3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800da3e:	22f0      	movs	r2, #240	; 0xf0
 800da40:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800da42:	693a      	ldr	r2, [r7, #16]
 800da44:	fa92 f2a2 	rbit	r2, r2
 800da48:	60fa      	str	r2, [r7, #12]
  return result;
 800da4a:	68fa      	ldr	r2, [r7, #12]
 800da4c:	fab2 f282 	clz	r2, r2
 800da50:	b2d2      	uxtb	r2, r2
 800da52:	40d3      	lsrs	r3, r2
 800da54:	4a0a      	ldr	r2, [pc, #40]	; (800da80 <HAL_RCC_ClockConfig+0x438>)
 800da56:	5cd3      	ldrb	r3, [r2, r3]
 800da58:	fa21 f303 	lsr.w	r3, r1, r3
 800da5c:	4a09      	ldr	r2, [pc, #36]	; (800da84 <HAL_RCC_ClockConfig+0x43c>)
 800da5e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800da60:	4b09      	ldr	r3, [pc, #36]	; (800da88 <HAL_RCC_ClockConfig+0x440>)
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	4618      	mov	r0, r3
 800da66:	f7fa f837 	bl	8007ad8 <HAL_InitTick>
  
  return HAL_OK;
 800da6a:	2300      	movs	r3, #0
}
 800da6c:	4618      	mov	r0, r3
 800da6e:	3778      	adds	r7, #120	; 0x78
 800da70:	46bd      	mov	sp, r7
 800da72:	bd80      	pop	{r7, pc}
 800da74:	40021000 	.word	0x40021000
 800da78:	40022000 	.word	0x40022000
 800da7c:	080343e4 	.word	0x080343e4
 800da80:	08036298 	.word	0x08036298
 800da84:	20000314 	.word	0x20000314
 800da88:	20000318 	.word	0x20000318

0800da8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800da8c:	b480      	push	{r7}
 800da8e:	b08b      	sub	sp, #44	; 0x2c
 800da90:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800da92:	2300      	movs	r3, #0
 800da94:	61fb      	str	r3, [r7, #28]
 800da96:	2300      	movs	r3, #0
 800da98:	61bb      	str	r3, [r7, #24]
 800da9a:	2300      	movs	r3, #0
 800da9c:	627b      	str	r3, [r7, #36]	; 0x24
 800da9e:	2300      	movs	r3, #0
 800daa0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800daa2:	2300      	movs	r3, #0
 800daa4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800daa6:	4b29      	ldr	r3, [pc, #164]	; (800db4c <HAL_RCC_GetSysClockFreq+0xc0>)
 800daa8:	685b      	ldr	r3, [r3, #4]
 800daaa:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800daac:	69fb      	ldr	r3, [r7, #28]
 800daae:	f003 030c 	and.w	r3, r3, #12
 800dab2:	2b04      	cmp	r3, #4
 800dab4:	d002      	beq.n	800dabc <HAL_RCC_GetSysClockFreq+0x30>
 800dab6:	2b08      	cmp	r3, #8
 800dab8:	d003      	beq.n	800dac2 <HAL_RCC_GetSysClockFreq+0x36>
 800daba:	e03c      	b.n	800db36 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800dabc:	4b24      	ldr	r3, [pc, #144]	; (800db50 <HAL_RCC_GetSysClockFreq+0xc4>)
 800dabe:	623b      	str	r3, [r7, #32]
      break;
 800dac0:	e03c      	b.n	800db3c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800dac2:	69fb      	ldr	r3, [r7, #28]
 800dac4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800dac8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800dacc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800dace:	68ba      	ldr	r2, [r7, #8]
 800dad0:	fa92 f2a2 	rbit	r2, r2
 800dad4:	607a      	str	r2, [r7, #4]
  return result;
 800dad6:	687a      	ldr	r2, [r7, #4]
 800dad8:	fab2 f282 	clz	r2, r2
 800dadc:	b2d2      	uxtb	r2, r2
 800dade:	40d3      	lsrs	r3, r2
 800dae0:	4a1c      	ldr	r2, [pc, #112]	; (800db54 <HAL_RCC_GetSysClockFreq+0xc8>)
 800dae2:	5cd3      	ldrb	r3, [r2, r3]
 800dae4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800dae6:	4b19      	ldr	r3, [pc, #100]	; (800db4c <HAL_RCC_GetSysClockFreq+0xc0>)
 800dae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800daea:	f003 030f 	and.w	r3, r3, #15
 800daee:	220f      	movs	r2, #15
 800daf0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800daf2:	693a      	ldr	r2, [r7, #16]
 800daf4:	fa92 f2a2 	rbit	r2, r2
 800daf8:	60fa      	str	r2, [r7, #12]
  return result;
 800dafa:	68fa      	ldr	r2, [r7, #12]
 800dafc:	fab2 f282 	clz	r2, r2
 800db00:	b2d2      	uxtb	r2, r2
 800db02:	40d3      	lsrs	r3, r2
 800db04:	4a14      	ldr	r2, [pc, #80]	; (800db58 <HAL_RCC_GetSysClockFreq+0xcc>)
 800db06:	5cd3      	ldrb	r3, [r2, r3]
 800db08:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800db0a:	69fb      	ldr	r3, [r7, #28]
 800db0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800db10:	2b00      	cmp	r3, #0
 800db12:	d008      	beq.n	800db26 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800db14:	4a0e      	ldr	r2, [pc, #56]	; (800db50 <HAL_RCC_GetSysClockFreq+0xc4>)
 800db16:	69bb      	ldr	r3, [r7, #24]
 800db18:	fbb2 f2f3 	udiv	r2, r2, r3
 800db1c:	697b      	ldr	r3, [r7, #20]
 800db1e:	fb02 f303 	mul.w	r3, r2, r3
 800db22:	627b      	str	r3, [r7, #36]	; 0x24
 800db24:	e004      	b.n	800db30 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800db26:	697b      	ldr	r3, [r7, #20]
 800db28:	4a0c      	ldr	r2, [pc, #48]	; (800db5c <HAL_RCC_GetSysClockFreq+0xd0>)
 800db2a:	fb02 f303 	mul.w	r3, r2, r3
 800db2e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800db30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db32:	623b      	str	r3, [r7, #32]
      break;
 800db34:	e002      	b.n	800db3c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800db36:	4b06      	ldr	r3, [pc, #24]	; (800db50 <HAL_RCC_GetSysClockFreq+0xc4>)
 800db38:	623b      	str	r3, [r7, #32]
      break;
 800db3a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800db3c:	6a3b      	ldr	r3, [r7, #32]
}
 800db3e:	4618      	mov	r0, r3
 800db40:	372c      	adds	r7, #44	; 0x2c
 800db42:	46bd      	mov	sp, r7
 800db44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db48:	4770      	bx	lr
 800db4a:	bf00      	nop
 800db4c:	40021000 	.word	0x40021000
 800db50:	007a1200 	.word	0x007a1200
 800db54:	080362b0 	.word	0x080362b0
 800db58:	080362c0 	.word	0x080362c0
 800db5c:	003d0900 	.word	0x003d0900

0800db60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800db60:	b480      	push	{r7}
 800db62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800db64:	4b03      	ldr	r3, [pc, #12]	; (800db74 <HAL_RCC_GetHCLKFreq+0x14>)
 800db66:	681b      	ldr	r3, [r3, #0]
}
 800db68:	4618      	mov	r0, r3
 800db6a:	46bd      	mov	sp, r7
 800db6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db70:	4770      	bx	lr
 800db72:	bf00      	nop
 800db74:	20000314 	.word	0x20000314

0800db78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800db78:	b580      	push	{r7, lr}
 800db7a:	b082      	sub	sp, #8
 800db7c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800db7e:	f7ff ffef 	bl	800db60 <HAL_RCC_GetHCLKFreq>
 800db82:	4601      	mov	r1, r0
 800db84:	4b0b      	ldr	r3, [pc, #44]	; (800dbb4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800db86:	685b      	ldr	r3, [r3, #4]
 800db88:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800db8c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800db90:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800db92:	687a      	ldr	r2, [r7, #4]
 800db94:	fa92 f2a2 	rbit	r2, r2
 800db98:	603a      	str	r2, [r7, #0]
  return result;
 800db9a:	683a      	ldr	r2, [r7, #0]
 800db9c:	fab2 f282 	clz	r2, r2
 800dba0:	b2d2      	uxtb	r2, r2
 800dba2:	40d3      	lsrs	r3, r2
 800dba4:	4a04      	ldr	r2, [pc, #16]	; (800dbb8 <HAL_RCC_GetPCLK1Freq+0x40>)
 800dba6:	5cd3      	ldrb	r3, [r2, r3]
 800dba8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800dbac:	4618      	mov	r0, r3
 800dbae:	3708      	adds	r7, #8
 800dbb0:	46bd      	mov	sp, r7
 800dbb2:	bd80      	pop	{r7, pc}
 800dbb4:	40021000 	.word	0x40021000
 800dbb8:	080362a8 	.word	0x080362a8

0800dbbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800dbbc:	b580      	push	{r7, lr}
 800dbbe:	b082      	sub	sp, #8
 800dbc0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800dbc2:	f7ff ffcd 	bl	800db60 <HAL_RCC_GetHCLKFreq>
 800dbc6:	4601      	mov	r1, r0
 800dbc8:	4b0b      	ldr	r3, [pc, #44]	; (800dbf8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800dbca:	685b      	ldr	r3, [r3, #4]
 800dbcc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800dbd0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800dbd4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800dbd6:	687a      	ldr	r2, [r7, #4]
 800dbd8:	fa92 f2a2 	rbit	r2, r2
 800dbdc:	603a      	str	r2, [r7, #0]
  return result;
 800dbde:	683a      	ldr	r2, [r7, #0]
 800dbe0:	fab2 f282 	clz	r2, r2
 800dbe4:	b2d2      	uxtb	r2, r2
 800dbe6:	40d3      	lsrs	r3, r2
 800dbe8:	4a04      	ldr	r2, [pc, #16]	; (800dbfc <HAL_RCC_GetPCLK2Freq+0x40>)
 800dbea:	5cd3      	ldrb	r3, [r2, r3]
 800dbec:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800dbf0:	4618      	mov	r0, r3
 800dbf2:	3708      	adds	r7, #8
 800dbf4:	46bd      	mov	sp, r7
 800dbf6:	bd80      	pop	{r7, pc}
 800dbf8:	40021000 	.word	0x40021000
 800dbfc:	080362a8 	.word	0x080362a8

0800dc00 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800dc00:	b580      	push	{r7, lr}
 800dc02:	b092      	sub	sp, #72	; 0x48
 800dc04:	af00      	add	r7, sp, #0
 800dc06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800dc08:	2300      	movs	r3, #0
 800dc0a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800dc0c:	2300      	movs	r3, #0
 800dc0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800dc10:	2300      	movs	r3, #0
 800dc12:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	f5b3 3f4d 	cmp.w	r3, #209920	; 0x33400
 800dc1e:	d303      	bcc.n	800dc28 <HAL_RCCEx_PeriphCLKConfig+0x28>
 800dc20:	2172      	movs	r1, #114	; 0x72
 800dc22:	485f      	ldr	r0, [pc, #380]	; (800dda0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 800dc24:	f7f7 ffb5 	bl	8005b92 <assert_failed>
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	f000 80ed 	beq.w	800de10 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	685b      	ldr	r3, [r3, #4]
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d012      	beq.n	800dc64 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	685b      	ldr	r3, [r3, #4]
 800dc42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dc46:	d00d      	beq.n	800dc64 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	685b      	ldr	r3, [r3, #4]
 800dc4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dc50:	d008      	beq.n	800dc64 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	685b      	ldr	r3, [r3, #4]
 800dc56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800dc5a:	d003      	beq.n	800dc64 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800dc5c:	2178      	movs	r1, #120	; 0x78
 800dc5e:	4850      	ldr	r0, [pc, #320]	; (800dda0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 800dc60:	f7f7 ff97 	bl	8005b92 <assert_failed>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800dc64:	4b4f      	ldr	r3, [pc, #316]	; (800dda4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800dc66:	69db      	ldr	r3, [r3, #28]
 800dc68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d10e      	bne.n	800dc8e <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800dc70:	4b4c      	ldr	r3, [pc, #304]	; (800dda4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800dc72:	69db      	ldr	r3, [r3, #28]
 800dc74:	4a4b      	ldr	r2, [pc, #300]	; (800dda4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800dc76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dc7a:	61d3      	str	r3, [r2, #28]
 800dc7c:	4b49      	ldr	r3, [pc, #292]	; (800dda4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800dc7e:	69db      	ldr	r3, [r3, #28]
 800dc80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dc84:	60bb      	str	r3, [r7, #8]
 800dc86:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800dc88:	2301      	movs	r3, #1
 800dc8a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800dc8e:	4b46      	ldr	r3, [pc, #280]	; (800dda8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d118      	bne.n	800dccc <HAL_RCCEx_PeriphCLKConfig+0xcc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800dc9a:	4b43      	ldr	r3, [pc, #268]	; (800dda8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	4a42      	ldr	r2, [pc, #264]	; (800dda8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800dca0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dca4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800dca6:	f7f9 ff5b 	bl	8007b60 <HAL_GetTick>
 800dcaa:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800dcac:	e008      	b.n	800dcc0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800dcae:	f7f9 ff57 	bl	8007b60 <HAL_GetTick>
 800dcb2:	4602      	mov	r2, r0
 800dcb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dcb6:	1ad3      	subs	r3, r2, r3
 800dcb8:	2b64      	cmp	r3, #100	; 0x64
 800dcba:	d901      	bls.n	800dcc0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
        {
          return HAL_TIMEOUT;
 800dcbc:	2303      	movs	r3, #3
 800dcbe:	e2bc      	b.n	800e23a <HAL_RCCEx_PeriphCLKConfig+0x63a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800dcc0:	4b39      	ldr	r3, [pc, #228]	; (800dda8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d0f0      	beq.n	800dcae <HAL_RCCEx_PeriphCLKConfig+0xae>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800dccc:	4b35      	ldr	r3, [pc, #212]	; (800dda4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800dcce:	6a1b      	ldr	r3, [r3, #32]
 800dcd0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800dcd4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800dcd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	f000 8086 	beq.w	800ddea <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	685b      	ldr	r3, [r3, #4]
 800dce2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800dce6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800dce8:	429a      	cmp	r2, r3
 800dcea:	d07e      	beq.n	800ddea <HAL_RCCEx_PeriphCLKConfig+0x1ea>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800dcec:	4b2d      	ldr	r3, [pc, #180]	; (800dda4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800dcee:	6a1b      	ldr	r3, [r3, #32]
 800dcf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dcf4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dcf6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800dcfa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800dcfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcfe:	fa93 f3a3 	rbit	r3, r3
 800dd02:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800dd04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800dd06:	fab3 f383 	clz	r3, r3
 800dd0a:	b2db      	uxtb	r3, r3
 800dd0c:	461a      	mov	r2, r3
 800dd0e:	4b27      	ldr	r3, [pc, #156]	; (800ddac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800dd10:	4413      	add	r3, r2
 800dd12:	009b      	lsls	r3, r3, #2
 800dd14:	461a      	mov	r2, r3
 800dd16:	2301      	movs	r3, #1
 800dd18:	6013      	str	r3, [r2, #0]
 800dd1a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800dd1e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800dd20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd22:	fa93 f3a3 	rbit	r3, r3
 800dd26:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800dd28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800dd2a:	fab3 f383 	clz	r3, r3
 800dd2e:	b2db      	uxtb	r3, r3
 800dd30:	461a      	mov	r2, r3
 800dd32:	4b1e      	ldr	r3, [pc, #120]	; (800ddac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800dd34:	4413      	add	r3, r2
 800dd36:	009b      	lsls	r3, r3, #2
 800dd38:	461a      	mov	r2, r3
 800dd3a:	2300      	movs	r3, #0
 800dd3c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800dd3e:	4a19      	ldr	r2, [pc, #100]	; (800dda4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800dd40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd42:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800dd44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd46:	f003 0301 	and.w	r3, r3, #1
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d04d      	beq.n	800ddea <HAL_RCCEx_PeriphCLKConfig+0x1ea>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800dd4e:	f7f9 ff07 	bl	8007b60 <HAL_GetTick>
 800dd52:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800dd54:	e00a      	b.n	800dd6c <HAL_RCCEx_PeriphCLKConfig+0x16c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800dd56:	f7f9 ff03 	bl	8007b60 <HAL_GetTick>
 800dd5a:	4602      	mov	r2, r0
 800dd5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dd5e:	1ad3      	subs	r3, r2, r3
 800dd60:	f241 3288 	movw	r2, #5000	; 0x1388
 800dd64:	4293      	cmp	r3, r2
 800dd66:	d901      	bls.n	800dd6c <HAL_RCCEx_PeriphCLKConfig+0x16c>
          {
            return HAL_TIMEOUT;
 800dd68:	2303      	movs	r3, #3
 800dd6a:	e266      	b.n	800e23a <HAL_RCCEx_PeriphCLKConfig+0x63a>
 800dd6c:	2302      	movs	r3, #2
 800dd6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800dd70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd72:	fa93 f3a3 	rbit	r3, r3
 800dd76:	627b      	str	r3, [r7, #36]	; 0x24
 800dd78:	2302      	movs	r3, #2
 800dd7a:	623b      	str	r3, [r7, #32]
 800dd7c:	6a3b      	ldr	r3, [r7, #32]
 800dd7e:	fa93 f3a3 	rbit	r3, r3
 800dd82:	61fb      	str	r3, [r7, #28]
  return result;
 800dd84:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800dd86:	fab3 f383 	clz	r3, r3
 800dd8a:	b2db      	uxtb	r3, r3
 800dd8c:	095b      	lsrs	r3, r3, #5
 800dd8e:	b2db      	uxtb	r3, r3
 800dd90:	f043 0302 	orr.w	r3, r3, #2
 800dd94:	b2db      	uxtb	r3, r3
 800dd96:	2b02      	cmp	r3, #2
 800dd98:	d10a      	bne.n	800ddb0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
 800dd9a:	4b02      	ldr	r3, [pc, #8]	; (800dda4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800dd9c:	6a1b      	ldr	r3, [r3, #32]
 800dd9e:	e00f      	b.n	800ddc0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800dda0:	0803441c 	.word	0x0803441c
 800dda4:	40021000 	.word	0x40021000
 800dda8:	40007000 	.word	0x40007000
 800ddac:	10908100 	.word	0x10908100
 800ddb0:	2302      	movs	r3, #2
 800ddb2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ddb4:	69bb      	ldr	r3, [r7, #24]
 800ddb6:	fa93 f3a3 	rbit	r3, r3
 800ddba:	617b      	str	r3, [r7, #20]
 800ddbc:	4b89      	ldr	r3, [pc, #548]	; (800dfe4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800ddbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddc0:	2202      	movs	r2, #2
 800ddc2:	613a      	str	r2, [r7, #16]
 800ddc4:	693a      	ldr	r2, [r7, #16]
 800ddc6:	fa92 f2a2 	rbit	r2, r2
 800ddca:	60fa      	str	r2, [r7, #12]
  return result;
 800ddcc:	68fa      	ldr	r2, [r7, #12]
 800ddce:	fab2 f282 	clz	r2, r2
 800ddd2:	b2d2      	uxtb	r2, r2
 800ddd4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ddd8:	b2d2      	uxtb	r2, r2
 800ddda:	f002 021f 	and.w	r2, r2, #31
 800ddde:	2101      	movs	r1, #1
 800dde0:	fa01 f202 	lsl.w	r2, r1, r2
 800dde4:	4013      	ands	r3, r2
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d0b5      	beq.n	800dd56 <HAL_RCCEx_PeriphCLKConfig+0x156>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800ddea:	4b7e      	ldr	r3, [pc, #504]	; (800dfe4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800ddec:	6a1b      	ldr	r3, [r3, #32]
 800ddee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	685b      	ldr	r3, [r3, #4]
 800ddf6:	497b      	ldr	r1, [pc, #492]	; (800dfe4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800ddf8:	4313      	orrs	r3, r2
 800ddfa:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800ddfc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800de00:	2b01      	cmp	r3, #1
 800de02:	d105      	bne.n	800de10 <HAL_RCCEx_PeriphCLKConfig+0x210>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800de04:	4b77      	ldr	r3, [pc, #476]	; (800dfe4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800de06:	69db      	ldr	r3, [r3, #28]
 800de08:	4a76      	ldr	r2, [pc, #472]	; (800dfe4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800de0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800de0e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	f003 0301 	and.w	r3, r3, #1
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d01c      	beq.n	800de56 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	689b      	ldr	r3, [r3, #8]
 800de20:	2b00      	cmp	r3, #0
 800de22:	d00f      	beq.n	800de44 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	689b      	ldr	r3, [r3, #8]
 800de28:	2b01      	cmp	r3, #1
 800de2a:	d00b      	beq.n	800de44 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	689b      	ldr	r3, [r3, #8]
 800de30:	2b02      	cmp	r3, #2
 800de32:	d007      	beq.n	800de44 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	689b      	ldr	r3, [r3, #8]
 800de38:	2b03      	cmp	r3, #3
 800de3a:	d003      	beq.n	800de44 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800de3c:	21be      	movs	r1, #190	; 0xbe
 800de3e:	486a      	ldr	r0, [pc, #424]	; (800dfe8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800de40:	f7f7 fea7 	bl	8005b92 <assert_failed>
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800de44:	4b67      	ldr	r3, [pc, #412]	; (800dfe4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800de46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de48:	f023 0203 	bic.w	r2, r3, #3
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	689b      	ldr	r3, [r3, #8]
 800de50:	4964      	ldr	r1, [pc, #400]	; (800dfe4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800de52:	4313      	orrs	r3, r2
 800de54:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	f003 0302 	and.w	r3, r3, #2
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d01f      	beq.n	800dea2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	68db      	ldr	r3, [r3, #12]
 800de66:	2b00      	cmp	r3, #0
 800de68:	d012      	beq.n	800de90 <HAL_RCCEx_PeriphCLKConfig+0x290>
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	68db      	ldr	r3, [r3, #12]
 800de6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800de72:	d00d      	beq.n	800de90 <HAL_RCCEx_PeriphCLKConfig+0x290>
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	68db      	ldr	r3, [r3, #12]
 800de78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800de7c:	d008      	beq.n	800de90 <HAL_RCCEx_PeriphCLKConfig+0x290>
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	68db      	ldr	r3, [r3, #12]
 800de82:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800de86:	d003      	beq.n	800de90 <HAL_RCCEx_PeriphCLKConfig+0x290>
 800de88:	21c9      	movs	r1, #201	; 0xc9
 800de8a:	4857      	ldr	r0, [pc, #348]	; (800dfe8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800de8c:	f7f7 fe81 	bl	8005b92 <assert_failed>
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800de90:	4b54      	ldr	r3, [pc, #336]	; (800dfe4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800de92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de94:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	68db      	ldr	r3, [r3, #12]
 800de9c:	4951      	ldr	r1, [pc, #324]	; (800dfe4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800de9e:	4313      	orrs	r3, r2
 800dea0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	f003 0304 	and.w	r3, r3, #4
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d01f      	beq.n	800deee <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	691b      	ldr	r3, [r3, #16]
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d012      	beq.n	800dedc <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	691b      	ldr	r3, [r3, #16]
 800deba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800debe:	d00d      	beq.n	800dedc <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	691b      	ldr	r3, [r3, #16]
 800dec4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800dec8:	d008      	beq.n	800dedc <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	691b      	ldr	r3, [r3, #16]
 800dece:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800ded2:	d003      	beq.n	800dedc <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 800ded4:	21d5      	movs	r1, #213	; 0xd5
 800ded6:	4844      	ldr	r0, [pc, #272]	; (800dfe8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800ded8:	f7f7 fe5b 	bl	8005b92 <assert_failed>
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800dedc:	4b41      	ldr	r3, [pc, #260]	; (800dfe4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800dede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dee0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	691b      	ldr	r3, [r3, #16]
 800dee8:	493e      	ldr	r1, [pc, #248]	; (800dfe4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800deea:	4313      	orrs	r3, r2
 800deec:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	f003 0320 	and.w	r3, r3, #32
 800def6:	2b00      	cmp	r3, #0
 800def8:	d014      	beq.n	800df24 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	69db      	ldr	r3, [r3, #28]
 800defe:	2b00      	cmp	r3, #0
 800df00:	d007      	beq.n	800df12 <HAL_RCCEx_PeriphCLKConfig+0x312>
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	69db      	ldr	r3, [r3, #28]
 800df06:	2b10      	cmp	r3, #16
 800df08:	d003      	beq.n	800df12 <HAL_RCCEx_PeriphCLKConfig+0x312>
 800df0a:	21e0      	movs	r1, #224	; 0xe0
 800df0c:	4836      	ldr	r0, [pc, #216]	; (800dfe8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800df0e:	f7f7 fe40 	bl	8005b92 <assert_failed>
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800df12:	4b34      	ldr	r3, [pc, #208]	; (800dfe4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800df14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df16:	f023 0210 	bic.w	r2, r3, #16
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	69db      	ldr	r3, [r3, #28]
 800df1e:	4931      	ldr	r1, [pc, #196]	; (800dfe4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800df20:	4313      	orrs	r3, r2
 800df22:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d015      	beq.n	800df5c <HAL_RCCEx_PeriphCLKConfig+0x35c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800df38:	d007      	beq.n	800df4a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d003      	beq.n	800df4a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800df42:	21ee      	movs	r1, #238	; 0xee
 800df44:	4828      	ldr	r0, [pc, #160]	; (800dfe8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800df46:	f7f7 fe24 	bl	8005b92 <assert_failed>
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800df4a:	4b26      	ldr	r3, [pc, #152]	; (800dfe4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800df4c:	685b      	ldr	r3, [r3, #4]
 800df4e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df56:	4923      	ldr	r1, [pc, #140]	; (800dfe4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800df58:	4313      	orrs	r3, r2
 800df5a:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df64:	2b00      	cmp	r3, #0
 800df66:	d015      	beq.n	800df94 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	6a1b      	ldr	r3, [r3, #32]
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d008      	beq.n	800df82 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	6a1b      	ldr	r3, [r3, #32]
 800df74:	2b20      	cmp	r3, #32
 800df76:	d004      	beq.n	800df82 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800df78:	f44f 7181 	mov.w	r1, #258	; 0x102
 800df7c:	481a      	ldr	r0, [pc, #104]	; (800dfe8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800df7e:	f7f7 fe08 	bl	8005b92 <assert_failed>
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800df82:	4b18      	ldr	r3, [pc, #96]	; (800dfe4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800df84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df86:	f023 0220 	bic.w	r2, r3, #32
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	6a1b      	ldr	r3, [r3, #32]
 800df8e:	4915      	ldr	r1, [pc, #84]	; (800dfe4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800df90:	4313      	orrs	r3, r2
 800df92:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	f003 0308 	and.w	r3, r3, #8
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d025      	beq.n	800dfec <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	695b      	ldr	r3, [r3, #20]
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d013      	beq.n	800dfd0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	695b      	ldr	r3, [r3, #20]
 800dfac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dfb0:	d00e      	beq.n	800dfd0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	695b      	ldr	r3, [r3, #20]
 800dfb6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800dfba:	d009      	beq.n	800dfd0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	695b      	ldr	r3, [r3, #20]
 800dfc0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800dfc4:	d004      	beq.n	800dfd0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800dfc6:	f240 1123 	movw	r1, #291	; 0x123
 800dfca:	4807      	ldr	r0, [pc, #28]	; (800dfe8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800dfcc:	f7f7 fde1 	bl	8005b92 <assert_failed>
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800dfd0:	4b04      	ldr	r3, [pc, #16]	; (800dfe4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800dfd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dfd4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	695b      	ldr	r3, [r3, #20]
 800dfdc:	4901      	ldr	r1, [pc, #4]	; (800dfe4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800dfde:	4313      	orrs	r3, r2
 800dfe0:	630b      	str	r3, [r1, #48]	; 0x30
 800dfe2:	e003      	b.n	800dfec <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800dfe4:	40021000 	.word	0x40021000
 800dfe8:	0803441c 	.word	0x0803441c
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	f003 0310 	and.w	r3, r3, #16
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d020      	beq.n	800e03a <HAL_RCCEx_PeriphCLKConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	699b      	ldr	r3, [r3, #24]
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d013      	beq.n	800e028 <HAL_RCCEx_PeriphCLKConfig+0x428>
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	699b      	ldr	r3, [r3, #24]
 800e004:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e008:	d00e      	beq.n	800e028 <HAL_RCCEx_PeriphCLKConfig+0x428>
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	699b      	ldr	r3, [r3, #24]
 800e00e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e012:	d009      	beq.n	800e028 <HAL_RCCEx_PeriphCLKConfig+0x428>
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	699b      	ldr	r3, [r3, #24]
 800e018:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800e01c:	d004      	beq.n	800e028 <HAL_RCCEx_PeriphCLKConfig+0x428>
 800e01e:	f240 112d 	movw	r1, #301	; 0x12d
 800e022:	4888      	ldr	r0, [pc, #544]	; (800e244 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800e024:	f7f7 fdb5 	bl	8005b92 <assert_failed>
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800e028:	4b87      	ldr	r3, [pc, #540]	; (800e248 <HAL_RCCEx_PeriphCLKConfig+0x648>)
 800e02a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e02c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	699b      	ldr	r3, [r3, #24]
 800e034:	4984      	ldr	r1, [pc, #528]	; (800e248 <HAL_RCCEx_PeriphCLKConfig+0x648>)
 800e036:	4313      	orrs	r3, r2
 800e038:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e042:	2b00      	cmp	r3, #0
 800e044:	d016      	beq.n	800e074 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d009      	beq.n	800e062 <HAL_RCCEx_PeriphCLKConfig+0x462>
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e052:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e056:	d004      	beq.n	800e062 <HAL_RCCEx_PeriphCLKConfig+0x462>
 800e058:	f240 113d 	movw	r1, #317	; 0x13d
 800e05c:	4879      	ldr	r0, [pc, #484]	; (800e244 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800e05e:	f7f7 fd98 	bl	8005b92 <assert_failed>
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800e062:	4b79      	ldr	r3, [pc, #484]	; (800e248 <HAL_RCCEx_PeriphCLKConfig+0x648>)
 800e064:	685b      	ldr	r3, [r3, #4]
 800e066:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e06e:	4976      	ldr	r1, [pc, #472]	; (800e248 <HAL_RCCEx_PeriphCLKConfig+0x648>)
 800e070:	4313      	orrs	r3, r2
 800e072:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d04d      	beq.n	800e11c <HAL_RCCEx_PeriphCLKConfig+0x51c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e084:	2b00      	cmp	r3, #0
 800e086:	d040      	beq.n	800e10a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e08c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e090:	d03b      	beq.n	800e10a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e096:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 800e09a:	d036      	beq.n	800e10a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0a0:	f5b3 7f90 	cmp.w	r3, #288	; 0x120
 800e0a4:	d031      	beq.n	800e10a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0aa:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 800e0ae:	d02c      	beq.n	800e10a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0b4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800e0b8:	d027      	beq.n	800e10a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0be:	f5b3 7fa8 	cmp.w	r3, #336	; 0x150
 800e0c2:	d022      	beq.n	800e10a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0c8:	f5b3 7fb0 	cmp.w	r3, #352	; 0x160
 800e0cc:	d01d      	beq.n	800e10a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0d2:	f5b3 7fb8 	cmp.w	r3, #368	; 0x170
 800e0d6:	d018      	beq.n	800e10a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0dc:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 800e0e0:	d013      	beq.n	800e10a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0e6:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800e0ea:	d00e      	beq.n	800e10a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0f0:	f5b3 7fd0 	cmp.w	r3, #416	; 0x1a0
 800e0f4:	d009      	beq.n	800e10a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0fa:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 800e0fe:	d004      	beq.n	800e10a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800e100:	f240 115d 	movw	r1, #349	; 0x15d
 800e104:	484f      	ldr	r0, [pc, #316]	; (800e244 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800e106:	f7f7 fd44 	bl	8005b92 <assert_failed>
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800e10a:	4b4f      	ldr	r3, [pc, #316]	; (800e248 <HAL_RCCEx_PeriphCLKConfig+0x648>)
 800e10c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e10e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e116:	494c      	ldr	r1, [pc, #304]	; (800e248 <HAL_RCCEx_PeriphCLKConfig+0x648>)
 800e118:	4313      	orrs	r3, r2
 800e11a:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e124:	2b00      	cmp	r3, #0
 800e126:	d04d      	beq.n	800e1c4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d040      	beq.n	800e1b2 <HAL_RCCEx_PeriphCLKConfig+0x5b2>
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e134:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e138:	d03b      	beq.n	800e1b2 <HAL_RCCEx_PeriphCLKConfig+0x5b2>
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e13e:	f5b3 5f08 	cmp.w	r3, #8704	; 0x2200
 800e142:	d036      	beq.n	800e1b2 <HAL_RCCEx_PeriphCLKConfig+0x5b2>
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e148:	f5b3 5f10 	cmp.w	r3, #9216	; 0x2400
 800e14c:	d031      	beq.n	800e1b2 <HAL_RCCEx_PeriphCLKConfig+0x5b2>
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e152:	f5b3 5f18 	cmp.w	r3, #9728	; 0x2600
 800e156:	d02c      	beq.n	800e1b2 <HAL_RCCEx_PeriphCLKConfig+0x5b2>
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e15c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800e160:	d027      	beq.n	800e1b2 <HAL_RCCEx_PeriphCLKConfig+0x5b2>
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e166:	f5b3 5f28 	cmp.w	r3, #10752	; 0x2a00
 800e16a:	d022      	beq.n	800e1b2 <HAL_RCCEx_PeriphCLKConfig+0x5b2>
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e170:	f5b3 5f30 	cmp.w	r3, #11264	; 0x2c00
 800e174:	d01d      	beq.n	800e1b2 <HAL_RCCEx_PeriphCLKConfig+0x5b2>
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e17a:	f5b3 5f38 	cmp.w	r3, #11776	; 0x2e00
 800e17e:	d018      	beq.n	800e1b2 <HAL_RCCEx_PeriphCLKConfig+0x5b2>
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e184:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800e188:	d013      	beq.n	800e1b2 <HAL_RCCEx_PeriphCLKConfig+0x5b2>
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e18e:	f5b3 5f48 	cmp.w	r3, #12800	; 0x3200
 800e192:	d00e      	beq.n	800e1b2 <HAL_RCCEx_PeriphCLKConfig+0x5b2>
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e198:	f5b3 5f50 	cmp.w	r3, #13312	; 0x3400
 800e19c:	d009      	beq.n	800e1b2 <HAL_RCCEx_PeriphCLKConfig+0x5b2>
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e1a2:	f5b3 5f58 	cmp.w	r3, #13824	; 0x3600
 800e1a6:	d004      	beq.n	800e1b2 <HAL_RCCEx_PeriphCLKConfig+0x5b2>
 800e1a8:	f44f 71b7 	mov.w	r1, #366	; 0x16e
 800e1ac:	4825      	ldr	r0, [pc, #148]	; (800e244 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800e1ae:	f7f7 fcf0 	bl	8005b92 <assert_failed>
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800e1b2:	4b25      	ldr	r3, [pc, #148]	; (800e248 <HAL_RCCEx_PeriphCLKConfig+0x648>)
 800e1b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1b6:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e1be:	4922      	ldr	r1, [pc, #136]	; (800e248 <HAL_RCCEx_PeriphCLKConfig+0x648>)
 800e1c0:	4313      	orrs	r3, r2
 800e1c2:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d016      	beq.n	800e1fe <HAL_RCCEx_PeriphCLKConfig+0x5fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d009      	beq.n	800e1ec <HAL_RCCEx_PeriphCLKConfig+0x5ec>
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e1e0:	d004      	beq.n	800e1ec <HAL_RCCEx_PeriphCLKConfig+0x5ec>
 800e1e2:	f44f 71c7 	mov.w	r1, #398	; 0x18e
 800e1e6:	4817      	ldr	r0, [pc, #92]	; (800e244 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800e1e8:	f7f7 fcd3 	bl	8005b92 <assert_failed>
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800e1ec:	4b16      	ldr	r3, [pc, #88]	; (800e248 <HAL_RCCEx_PeriphCLKConfig+0x648>)
 800e1ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1f0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1f8:	4913      	ldr	r1, [pc, #76]	; (800e248 <HAL_RCCEx_PeriphCLKConfig+0x648>)
 800e1fa:	4313      	orrs	r3, r2
 800e1fc:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e206:	2b00      	cmp	r3, #0
 800e208:	d016      	beq.n	800e238 <HAL_RCCEx_PeriphCLKConfig+0x638>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d009      	beq.n	800e226 <HAL_RCCEx_PeriphCLKConfig+0x626>
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e216:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e21a:	d004      	beq.n	800e226 <HAL_RCCEx_PeriphCLKConfig+0x626>
 800e21c:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 800e220:	4808      	ldr	r0, [pc, #32]	; (800e244 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800e222:	f7f7 fcb6 	bl	8005b92 <assert_failed>
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800e226:	4b08      	ldr	r3, [pc, #32]	; (800e248 <HAL_RCCEx_PeriphCLKConfig+0x648>)
 800e228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e22a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e232:	4905      	ldr	r1, [pc, #20]	; (800e248 <HAL_RCCEx_PeriphCLKConfig+0x648>)
 800e234:	4313      	orrs	r3, r2
 800e236:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800e238:	2300      	movs	r3, #0
}
 800e23a:	4618      	mov	r0, r3
 800e23c:	3748      	adds	r7, #72	; 0x48
 800e23e:	46bd      	mov	sp, r7
 800e240:	bd80      	pop	{r7, pc}
 800e242:	bf00      	nop
 800e244:	0803441c 	.word	0x0803441c
 800e248:	40021000 	.word	0x40021000

0800e24c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e24c:	b580      	push	{r7, lr}
 800e24e:	b084      	sub	sp, #16
 800e250:	af00      	add	r7, sp, #0
 800e252:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	2b00      	cmp	r3, #0
 800e258:	d101      	bne.n	800e25e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e25a:	2301      	movs	r3, #1
 800e25c:	e1e5      	b.n	800e62a <HAL_SPI_Init+0x3de>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	4a7b      	ldr	r2, [pc, #492]	; (800e450 <HAL_SPI_Init+0x204>)
 800e264:	4293      	cmp	r3, r2
 800e266:	d00e      	beq.n	800e286 <HAL_SPI_Init+0x3a>
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	4a79      	ldr	r2, [pc, #484]	; (800e454 <HAL_SPI_Init+0x208>)
 800e26e:	4293      	cmp	r3, r2
 800e270:	d009      	beq.n	800e286 <HAL_SPI_Init+0x3a>
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	4a78      	ldr	r2, [pc, #480]	; (800e458 <HAL_SPI_Init+0x20c>)
 800e278:	4293      	cmp	r3, r2
 800e27a:	d004      	beq.n	800e286 <HAL_SPI_Init+0x3a>
 800e27c:	f240 1147 	movw	r1, #327	; 0x147
 800e280:	4876      	ldr	r0, [pc, #472]	; (800e45c <HAL_SPI_Init+0x210>)
 800e282:	f7f7 fc86 	bl	8005b92 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	685b      	ldr	r3, [r3, #4]
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d009      	beq.n	800e2a2 <HAL_SPI_Init+0x56>
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	685b      	ldr	r3, [r3, #4]
 800e292:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e296:	d004      	beq.n	800e2a2 <HAL_SPI_Init+0x56>
 800e298:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800e29c:	486f      	ldr	r0, [pc, #444]	; (800e45c <HAL_SPI_Init+0x210>)
 800e29e:	f7f7 fc78 	bl	8005b92 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	689b      	ldr	r3, [r3, #8]
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d00e      	beq.n	800e2c8 <HAL_SPI_Init+0x7c>
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	689b      	ldr	r3, [r3, #8]
 800e2ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e2b2:	d009      	beq.n	800e2c8 <HAL_SPI_Init+0x7c>
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	689b      	ldr	r3, [r3, #8]
 800e2b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e2bc:	d004      	beq.n	800e2c8 <HAL_SPI_Init+0x7c>
 800e2be:	f240 1149 	movw	r1, #329	; 0x149
 800e2c2:	4866      	ldr	r0, [pc, #408]	; (800e45c <HAL_SPI_Init+0x210>)
 800e2c4:	f7f7 fc65 	bl	8005b92 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	68db      	ldr	r3, [r3, #12]
 800e2cc:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800e2d0:	d040      	beq.n	800e354 <HAL_SPI_Init+0x108>
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	68db      	ldr	r3, [r3, #12]
 800e2d6:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 800e2da:	d03b      	beq.n	800e354 <HAL_SPI_Init+0x108>
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	68db      	ldr	r3, [r3, #12]
 800e2e0:	f5b3 6f50 	cmp.w	r3, #3328	; 0xd00
 800e2e4:	d036      	beq.n	800e354 <HAL_SPI_Init+0x108>
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	68db      	ldr	r3, [r3, #12]
 800e2ea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e2ee:	d031      	beq.n	800e354 <HAL_SPI_Init+0x108>
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	68db      	ldr	r3, [r3, #12]
 800e2f4:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 800e2f8:	d02c      	beq.n	800e354 <HAL_SPI_Init+0x108>
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	68db      	ldr	r3, [r3, #12]
 800e2fe:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800e302:	d027      	beq.n	800e354 <HAL_SPI_Init+0x108>
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	68db      	ldr	r3, [r3, #12]
 800e308:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 800e30c:	d022      	beq.n	800e354 <HAL_SPI_Init+0x108>
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	68db      	ldr	r3, [r3, #12]
 800e312:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e316:	d01d      	beq.n	800e354 <HAL_SPI_Init+0x108>
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	68db      	ldr	r3, [r3, #12]
 800e31c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e320:	d018      	beq.n	800e354 <HAL_SPI_Init+0x108>
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	68db      	ldr	r3, [r3, #12]
 800e326:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800e32a:	d013      	beq.n	800e354 <HAL_SPI_Init+0x108>
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	68db      	ldr	r3, [r3, #12]
 800e330:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800e334:	d00e      	beq.n	800e354 <HAL_SPI_Init+0x108>
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	68db      	ldr	r3, [r3, #12]
 800e33a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e33e:	d009      	beq.n	800e354 <HAL_SPI_Init+0x108>
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	68db      	ldr	r3, [r3, #12]
 800e344:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e348:	d004      	beq.n	800e354 <HAL_SPI_Init+0x108>
 800e34a:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 800e34e:	4843      	ldr	r0, [pc, #268]	; (800e45c <HAL_SPI_Init+0x210>)
 800e350:	f7f7 fc1f 	bl	8005b92 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	699b      	ldr	r3, [r3, #24]
 800e358:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e35c:	d00d      	beq.n	800e37a <HAL_SPI_Init+0x12e>
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	699b      	ldr	r3, [r3, #24]
 800e362:	2b00      	cmp	r3, #0
 800e364:	d009      	beq.n	800e37a <HAL_SPI_Init+0x12e>
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	699b      	ldr	r3, [r3, #24]
 800e36a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800e36e:	d004      	beq.n	800e37a <HAL_SPI_Init+0x12e>
 800e370:	f240 114b 	movw	r1, #331	; 0x14b
 800e374:	4839      	ldr	r0, [pc, #228]	; (800e45c <HAL_SPI_Init+0x210>)
 800e376:	f7f7 fc0c 	bl	8005b92 <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e37e:	2b08      	cmp	r3, #8
 800e380:	d008      	beq.n	800e394 <HAL_SPI_Init+0x148>
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e386:	2b00      	cmp	r3, #0
 800e388:	d004      	beq.n	800e394 <HAL_SPI_Init+0x148>
 800e38a:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 800e38e:	4833      	ldr	r0, [pc, #204]	; (800e45c <HAL_SPI_Init+0x210>)
 800e390:	f7f7 fbff 	bl	8005b92 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	69db      	ldr	r3, [r3, #28]
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d020      	beq.n	800e3de <HAL_SPI_Init+0x192>
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	69db      	ldr	r3, [r3, #28]
 800e3a0:	2b08      	cmp	r3, #8
 800e3a2:	d01c      	beq.n	800e3de <HAL_SPI_Init+0x192>
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	69db      	ldr	r3, [r3, #28]
 800e3a8:	2b10      	cmp	r3, #16
 800e3aa:	d018      	beq.n	800e3de <HAL_SPI_Init+0x192>
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	69db      	ldr	r3, [r3, #28]
 800e3b0:	2b18      	cmp	r3, #24
 800e3b2:	d014      	beq.n	800e3de <HAL_SPI_Init+0x192>
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	69db      	ldr	r3, [r3, #28]
 800e3b8:	2b20      	cmp	r3, #32
 800e3ba:	d010      	beq.n	800e3de <HAL_SPI_Init+0x192>
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	69db      	ldr	r3, [r3, #28]
 800e3c0:	2b28      	cmp	r3, #40	; 0x28
 800e3c2:	d00c      	beq.n	800e3de <HAL_SPI_Init+0x192>
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	69db      	ldr	r3, [r3, #28]
 800e3c8:	2b30      	cmp	r3, #48	; 0x30
 800e3ca:	d008      	beq.n	800e3de <HAL_SPI_Init+0x192>
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	69db      	ldr	r3, [r3, #28]
 800e3d0:	2b38      	cmp	r3, #56	; 0x38
 800e3d2:	d004      	beq.n	800e3de <HAL_SPI_Init+0x192>
 800e3d4:	f240 114d 	movw	r1, #333	; 0x14d
 800e3d8:	4820      	ldr	r0, [pc, #128]	; (800e45c <HAL_SPI_Init+0x210>)
 800e3da:	f7f7 fbda 	bl	8005b92 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	6a1b      	ldr	r3, [r3, #32]
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d008      	beq.n	800e3f8 <HAL_SPI_Init+0x1ac>
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	6a1b      	ldr	r3, [r3, #32]
 800e3ea:	2b80      	cmp	r3, #128	; 0x80
 800e3ec:	d004      	beq.n	800e3f8 <HAL_SPI_Init+0x1ac>
 800e3ee:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 800e3f2:	481a      	ldr	r0, [pc, #104]	; (800e45c <HAL_SPI_Init+0x210>)
 800e3f4:	f7f7 fbcd 	bl	8005b92 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d008      	beq.n	800e412 <HAL_SPI_Init+0x1c6>
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e404:	2b10      	cmp	r3, #16
 800e406:	d004      	beq.n	800e412 <HAL_SPI_Init+0x1c6>
 800e408:	f240 114f 	movw	r1, #335	; 0x14f
 800e40c:	4813      	ldr	r0, [pc, #76]	; (800e45c <HAL_SPI_Init+0x210>)
 800e40e:	f7f7 fbc0 	bl	8005b92 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e416:	2b00      	cmp	r3, #0
 800e418:	d151      	bne.n	800e4be <HAL_SPI_Init+0x272>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	691b      	ldr	r3, [r3, #16]
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d008      	beq.n	800e434 <HAL_SPI_Init+0x1e8>
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	691b      	ldr	r3, [r3, #16]
 800e426:	2b02      	cmp	r3, #2
 800e428:	d004      	beq.n	800e434 <HAL_SPI_Init+0x1e8>
 800e42a:	f44f 71a9 	mov.w	r1, #338	; 0x152
 800e42e:	480b      	ldr	r0, [pc, #44]	; (800e45c <HAL_SPI_Init+0x210>)
 800e430:	f7f7 fbaf 	bl	8005b92 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	695b      	ldr	r3, [r3, #20]
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d011      	beq.n	800e460 <HAL_SPI_Init+0x214>
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	695b      	ldr	r3, [r3, #20]
 800e440:	2b01      	cmp	r3, #1
 800e442:	d00d      	beq.n	800e460 <HAL_SPI_Init+0x214>
 800e444:	f240 1153 	movw	r1, #339	; 0x153
 800e448:	4804      	ldr	r0, [pc, #16]	; (800e45c <HAL_SPI_Init+0x210>)
 800e44a:	f7f7 fba2 	bl	8005b92 <assert_failed>
 800e44e:	e007      	b.n	800e460 <HAL_SPI_Init+0x214>
 800e450:	40013000 	.word	0x40013000
 800e454:	40003800 	.word	0x40003800
 800e458:	40003c00 	.word	0x40003c00
 800e45c:	08034478 	.word	0x08034478

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	685b      	ldr	r3, [r3, #4]
 800e464:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e468:	d125      	bne.n	800e4b6 <HAL_SPI_Init+0x26a>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	69db      	ldr	r3, [r3, #28]
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d050      	beq.n	800e514 <HAL_SPI_Init+0x2c8>
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	69db      	ldr	r3, [r3, #28]
 800e476:	2b08      	cmp	r3, #8
 800e478:	d04c      	beq.n	800e514 <HAL_SPI_Init+0x2c8>
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	69db      	ldr	r3, [r3, #28]
 800e47e:	2b10      	cmp	r3, #16
 800e480:	d048      	beq.n	800e514 <HAL_SPI_Init+0x2c8>
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	69db      	ldr	r3, [r3, #28]
 800e486:	2b18      	cmp	r3, #24
 800e488:	d044      	beq.n	800e514 <HAL_SPI_Init+0x2c8>
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	69db      	ldr	r3, [r3, #28]
 800e48e:	2b20      	cmp	r3, #32
 800e490:	d040      	beq.n	800e514 <HAL_SPI_Init+0x2c8>
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	69db      	ldr	r3, [r3, #28]
 800e496:	2b28      	cmp	r3, #40	; 0x28
 800e498:	d03c      	beq.n	800e514 <HAL_SPI_Init+0x2c8>
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	69db      	ldr	r3, [r3, #28]
 800e49e:	2b30      	cmp	r3, #48	; 0x30
 800e4a0:	d038      	beq.n	800e514 <HAL_SPI_Init+0x2c8>
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	69db      	ldr	r3, [r3, #28]
 800e4a6:	2b38      	cmp	r3, #56	; 0x38
 800e4a8:	d034      	beq.n	800e514 <HAL_SPI_Init+0x2c8>
 800e4aa:	f240 1157 	movw	r1, #343	; 0x157
 800e4ae:	4861      	ldr	r0, [pc, #388]	; (800e634 <HAL_SPI_Init+0x3e8>)
 800e4b0:	f7f7 fb6f 	bl	8005b92 <assert_failed>
 800e4b4:	e02e      	b.n	800e514 <HAL_SPI_Init+0x2c8>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	2200      	movs	r2, #0
 800e4ba:	61da      	str	r2, [r3, #28]
 800e4bc:	e02a      	b.n	800e514 <HAL_SPI_Init+0x2c8>
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	69db      	ldr	r3, [r3, #28]
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d020      	beq.n	800e508 <HAL_SPI_Init+0x2bc>
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	69db      	ldr	r3, [r3, #28]
 800e4ca:	2b08      	cmp	r3, #8
 800e4cc:	d01c      	beq.n	800e508 <HAL_SPI_Init+0x2bc>
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	69db      	ldr	r3, [r3, #28]
 800e4d2:	2b10      	cmp	r3, #16
 800e4d4:	d018      	beq.n	800e508 <HAL_SPI_Init+0x2bc>
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	69db      	ldr	r3, [r3, #28]
 800e4da:	2b18      	cmp	r3, #24
 800e4dc:	d014      	beq.n	800e508 <HAL_SPI_Init+0x2bc>
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	69db      	ldr	r3, [r3, #28]
 800e4e2:	2b20      	cmp	r3, #32
 800e4e4:	d010      	beq.n	800e508 <HAL_SPI_Init+0x2bc>
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	69db      	ldr	r3, [r3, #28]
 800e4ea:	2b28      	cmp	r3, #40	; 0x28
 800e4ec:	d00c      	beq.n	800e508 <HAL_SPI_Init+0x2bc>
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	69db      	ldr	r3, [r3, #28]
 800e4f2:	2b30      	cmp	r3, #48	; 0x30
 800e4f4:	d008      	beq.n	800e508 <HAL_SPI_Init+0x2bc>
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	69db      	ldr	r3, [r3, #28]
 800e4fa:	2b38      	cmp	r3, #56	; 0x38
 800e4fc:	d004      	beq.n	800e508 <HAL_SPI_Init+0x2bc>
 800e4fe:	f240 1161 	movw	r1, #353	; 0x161
 800e502:	484c      	ldr	r0, [pc, #304]	; (800e634 <HAL_SPI_Init+0x3e8>)
 800e504:	f7f7 fb45 	bl	8005b92 <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	2200      	movs	r2, #0
 800e50c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	2200      	movs	r2, #0
 800e512:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	2200      	movs	r2, #0
 800e518:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e520:	b2db      	uxtb	r3, r3
 800e522:	2b00      	cmp	r3, #0
 800e524:	d106      	bne.n	800e534 <HAL_SPI_Init+0x2e8>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	2200      	movs	r2, #0
 800e52a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e52e:	6878      	ldr	r0, [r7, #4]
 800e530:	f7f8 ffe4 	bl	80074fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	2202      	movs	r2, #2
 800e538:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	681a      	ldr	r2, [r3, #0]
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e54a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	68db      	ldr	r3, [r3, #12]
 800e550:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e554:	d902      	bls.n	800e55c <HAL_SPI_Init+0x310>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800e556:	2300      	movs	r3, #0
 800e558:	60fb      	str	r3, [r7, #12]
 800e55a:	e002      	b.n	800e562 <HAL_SPI_Init+0x316>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800e55c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e560:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	68db      	ldr	r3, [r3, #12]
 800e566:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800e56a:	d007      	beq.n	800e57c <HAL_SPI_Init+0x330>
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	68db      	ldr	r3, [r3, #12]
 800e570:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e574:	d002      	beq.n	800e57c <HAL_SPI_Init+0x330>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	2200      	movs	r2, #0
 800e57a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	685b      	ldr	r3, [r3, #4]
 800e580:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	689b      	ldr	r3, [r3, #8]
 800e588:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800e58c:	431a      	orrs	r2, r3
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	691b      	ldr	r3, [r3, #16]
 800e592:	f003 0302 	and.w	r3, r3, #2
 800e596:	431a      	orrs	r2, r3
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	695b      	ldr	r3, [r3, #20]
 800e59c:	f003 0301 	and.w	r3, r3, #1
 800e5a0:	431a      	orrs	r2, r3
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	699b      	ldr	r3, [r3, #24]
 800e5a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e5aa:	431a      	orrs	r2, r3
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	69db      	ldr	r3, [r3, #28]
 800e5b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e5b4:	431a      	orrs	r2, r3
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	6a1b      	ldr	r3, [r3, #32]
 800e5ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e5be:	ea42 0103 	orr.w	r1, r2, r3
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e5c6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	430a      	orrs	r2, r1
 800e5d0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	699b      	ldr	r3, [r3, #24]
 800e5d6:	0c1b      	lsrs	r3, r3, #16
 800e5d8:	f003 0204 	and.w	r2, r3, #4
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5e0:	f003 0310 	and.w	r3, r3, #16
 800e5e4:	431a      	orrs	r2, r3
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5ea:	f003 0308 	and.w	r3, r3, #8
 800e5ee:	431a      	orrs	r2, r3
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	68db      	ldr	r3, [r3, #12]
 800e5f4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800e5f8:	ea42 0103 	orr.w	r1, r2, r3
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	430a      	orrs	r2, r1
 800e608:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	69da      	ldr	r2, [r3, #28]
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e618:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	2200      	movs	r2, #0
 800e61e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	2201      	movs	r2, #1
 800e624:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800e628:	2300      	movs	r3, #0
}
 800e62a:	4618      	mov	r0, r3
 800e62c:	3710      	adds	r7, #16
 800e62e:	46bd      	mov	sp, r7
 800e630:	bd80      	pop	{r7, pc}
 800e632:	bf00      	nop
 800e634:	08034478 	.word	0x08034478

0800e638 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e638:	b580      	push	{r7, lr}
 800e63a:	b082      	sub	sp, #8
 800e63c:	af00      	add	r7, sp, #0
 800e63e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	2b00      	cmp	r3, #0
 800e644:	d101      	bne.n	800e64a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e646:	2301      	movs	r3, #1
 800e648:	e0b9      	b.n	800e7be <HAL_TIM_Base_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	4a5e      	ldr	r2, [pc, #376]	; (800e7c8 <HAL_TIM_Base_Init+0x190>)
 800e650:	4293      	cmp	r3, r2
 800e652:	d031      	beq.n	800e6b8 <HAL_TIM_Base_Init+0x80>
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e65c:	d02c      	beq.n	800e6b8 <HAL_TIM_Base_Init+0x80>
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	4a5a      	ldr	r2, [pc, #360]	; (800e7cc <HAL_TIM_Base_Init+0x194>)
 800e664:	4293      	cmp	r3, r2
 800e666:	d027      	beq.n	800e6b8 <HAL_TIM_Base_Init+0x80>
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	4a58      	ldr	r2, [pc, #352]	; (800e7d0 <HAL_TIM_Base_Init+0x198>)
 800e66e:	4293      	cmp	r3, r2
 800e670:	d022      	beq.n	800e6b8 <HAL_TIM_Base_Init+0x80>
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	4a57      	ldr	r2, [pc, #348]	; (800e7d4 <HAL_TIM_Base_Init+0x19c>)
 800e678:	4293      	cmp	r3, r2
 800e67a:	d01d      	beq.n	800e6b8 <HAL_TIM_Base_Init+0x80>
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	4a55      	ldr	r2, [pc, #340]	; (800e7d8 <HAL_TIM_Base_Init+0x1a0>)
 800e682:	4293      	cmp	r3, r2
 800e684:	d018      	beq.n	800e6b8 <HAL_TIM_Base_Init+0x80>
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	4a54      	ldr	r2, [pc, #336]	; (800e7dc <HAL_TIM_Base_Init+0x1a4>)
 800e68c:	4293      	cmp	r3, r2
 800e68e:	d013      	beq.n	800e6b8 <HAL_TIM_Base_Init+0x80>
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	4a52      	ldr	r2, [pc, #328]	; (800e7e0 <HAL_TIM_Base_Init+0x1a8>)
 800e696:	4293      	cmp	r3, r2
 800e698:	d00e      	beq.n	800e6b8 <HAL_TIM_Base_Init+0x80>
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	4a51      	ldr	r2, [pc, #324]	; (800e7e4 <HAL_TIM_Base_Init+0x1ac>)
 800e6a0:	4293      	cmp	r3, r2
 800e6a2:	d009      	beq.n	800e6b8 <HAL_TIM_Base_Init+0x80>
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	4a4f      	ldr	r2, [pc, #316]	; (800e7e8 <HAL_TIM_Base_Init+0x1b0>)
 800e6aa:	4293      	cmp	r3, r2
 800e6ac:	d004      	beq.n	800e6b8 <HAL_TIM_Base_Init+0x80>
 800e6ae:	f44f 718d 	mov.w	r1, #282	; 0x11a
 800e6b2:	484e      	ldr	r0, [pc, #312]	; (800e7ec <HAL_TIM_Base_Init+0x1b4>)
 800e6b4:	f7f7 fa6d 	bl	8005b92 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	689b      	ldr	r3, [r3, #8]
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d014      	beq.n	800e6ea <HAL_TIM_Base_Init+0xb2>
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	689b      	ldr	r3, [r3, #8]
 800e6c4:	2b10      	cmp	r3, #16
 800e6c6:	d010      	beq.n	800e6ea <HAL_TIM_Base_Init+0xb2>
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	689b      	ldr	r3, [r3, #8]
 800e6cc:	2b20      	cmp	r3, #32
 800e6ce:	d00c      	beq.n	800e6ea <HAL_TIM_Base_Init+0xb2>
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	689b      	ldr	r3, [r3, #8]
 800e6d4:	2b40      	cmp	r3, #64	; 0x40
 800e6d6:	d008      	beq.n	800e6ea <HAL_TIM_Base_Init+0xb2>
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	689b      	ldr	r3, [r3, #8]
 800e6dc:	2b60      	cmp	r3, #96	; 0x60
 800e6de:	d004      	beq.n	800e6ea <HAL_TIM_Base_Init+0xb2>
 800e6e0:	f240 111b 	movw	r1, #283	; 0x11b
 800e6e4:	4841      	ldr	r0, [pc, #260]	; (800e7ec <HAL_TIM_Base_Init+0x1b4>)
 800e6e6:	f7f7 fa54 	bl	8005b92 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	691b      	ldr	r3, [r3, #16]
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d00e      	beq.n	800e710 <HAL_TIM_Base_Init+0xd8>
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	691b      	ldr	r3, [r3, #16]
 800e6f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e6fa:	d009      	beq.n	800e710 <HAL_TIM_Base_Init+0xd8>
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	691b      	ldr	r3, [r3, #16]
 800e700:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e704:	d004      	beq.n	800e710 <HAL_TIM_Base_Init+0xd8>
 800e706:	f44f 718e 	mov.w	r1, #284	; 0x11c
 800e70a:	4838      	ldr	r0, [pc, #224]	; (800e7ec <HAL_TIM_Base_Init+0x1b4>)
 800e70c:	f7f7 fa41 	bl	8005b92 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	699b      	ldr	r3, [r3, #24]
 800e714:	2b00      	cmp	r3, #0
 800e716:	d008      	beq.n	800e72a <HAL_TIM_Base_Init+0xf2>
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	699b      	ldr	r3, [r3, #24]
 800e71c:	2b80      	cmp	r3, #128	; 0x80
 800e71e:	d004      	beq.n	800e72a <HAL_TIM_Base_Init+0xf2>
 800e720:	f240 111d 	movw	r1, #285	; 0x11d
 800e724:	4831      	ldr	r0, [pc, #196]	; (800e7ec <HAL_TIM_Base_Init+0x1b4>)
 800e726:	f7f7 fa34 	bl	8005b92 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e730:	b2db      	uxtb	r3, r3
 800e732:	2b00      	cmp	r3, #0
 800e734:	d106      	bne.n	800e744 <HAL_TIM_Base_Init+0x10c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	2200      	movs	r2, #0
 800e73a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e73e:	6878      	ldr	r0, [r7, #4]
 800e740:	f7f9 f8c4 	bl	80078cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	2202      	movs	r2, #2
 800e748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	681a      	ldr	r2, [r3, #0]
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	3304      	adds	r3, #4
 800e754:	4619      	mov	r1, r3
 800e756:	4610      	mov	r0, r2
 800e758:	f001 f812 	bl	800f780 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	2201      	movs	r2, #1
 800e760:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	2201      	movs	r2, #1
 800e768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	2201      	movs	r2, #1
 800e770:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	2201      	movs	r2, #1
 800e778:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	2201      	movs	r2, #1
 800e780:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	2201      	movs	r2, #1
 800e788:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	2201      	movs	r2, #1
 800e790:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	2201      	movs	r2, #1
 800e798:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	2201      	movs	r2, #1
 800e7a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	2201      	movs	r2, #1
 800e7a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	2201      	movs	r2, #1
 800e7b0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	2201      	movs	r2, #1
 800e7b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e7bc:	2300      	movs	r3, #0
}
 800e7be:	4618      	mov	r0, r3
 800e7c0:	3708      	adds	r7, #8
 800e7c2:	46bd      	mov	sp, r7
 800e7c4:	bd80      	pop	{r7, pc}
 800e7c6:	bf00      	nop
 800e7c8:	40012c00 	.word	0x40012c00
 800e7cc:	40000400 	.word	0x40000400
 800e7d0:	40000800 	.word	0x40000800
 800e7d4:	40001000 	.word	0x40001000
 800e7d8:	40001400 	.word	0x40001400
 800e7dc:	40013400 	.word	0x40013400
 800e7e0:	40014000 	.word	0x40014000
 800e7e4:	40014400 	.word	0x40014400
 800e7e8:	40014800 	.word	0x40014800
 800e7ec:	080344b0 	.word	0x080344b0

0800e7f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e7f0:	b580      	push	{r7, lr}
 800e7f2:	b082      	sub	sp, #8
 800e7f4:	af00      	add	r7, sp, #0
 800e7f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d101      	bne.n	800e802 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e7fe:	2301      	movs	r3, #1
 800e800:	e0b9      	b.n	800e976 <HAL_TIM_PWM_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	4a5e      	ldr	r2, [pc, #376]	; (800e980 <HAL_TIM_PWM_Init+0x190>)
 800e808:	4293      	cmp	r3, r2
 800e80a:	d031      	beq.n	800e870 <HAL_TIM_PWM_Init+0x80>
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e814:	d02c      	beq.n	800e870 <HAL_TIM_PWM_Init+0x80>
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	4a5a      	ldr	r2, [pc, #360]	; (800e984 <HAL_TIM_PWM_Init+0x194>)
 800e81c:	4293      	cmp	r3, r2
 800e81e:	d027      	beq.n	800e870 <HAL_TIM_PWM_Init+0x80>
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	4a58      	ldr	r2, [pc, #352]	; (800e988 <HAL_TIM_PWM_Init+0x198>)
 800e826:	4293      	cmp	r3, r2
 800e828:	d022      	beq.n	800e870 <HAL_TIM_PWM_Init+0x80>
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	4a57      	ldr	r2, [pc, #348]	; (800e98c <HAL_TIM_PWM_Init+0x19c>)
 800e830:	4293      	cmp	r3, r2
 800e832:	d01d      	beq.n	800e870 <HAL_TIM_PWM_Init+0x80>
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	4a55      	ldr	r2, [pc, #340]	; (800e990 <HAL_TIM_PWM_Init+0x1a0>)
 800e83a:	4293      	cmp	r3, r2
 800e83c:	d018      	beq.n	800e870 <HAL_TIM_PWM_Init+0x80>
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	4a54      	ldr	r2, [pc, #336]	; (800e994 <HAL_TIM_PWM_Init+0x1a4>)
 800e844:	4293      	cmp	r3, r2
 800e846:	d013      	beq.n	800e870 <HAL_TIM_PWM_Init+0x80>
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	4a52      	ldr	r2, [pc, #328]	; (800e998 <HAL_TIM_PWM_Init+0x1a8>)
 800e84e:	4293      	cmp	r3, r2
 800e850:	d00e      	beq.n	800e870 <HAL_TIM_PWM_Init+0x80>
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	4a51      	ldr	r2, [pc, #324]	; (800e99c <HAL_TIM_PWM_Init+0x1ac>)
 800e858:	4293      	cmp	r3, r2
 800e85a:	d009      	beq.n	800e870 <HAL_TIM_PWM_Init+0x80>
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	4a4f      	ldr	r2, [pc, #316]	; (800e9a0 <HAL_TIM_PWM_Init+0x1b0>)
 800e862:	4293      	cmp	r3, r2
 800e864:	d004      	beq.n	800e870 <HAL_TIM_PWM_Init+0x80>
 800e866:	f240 5136 	movw	r1, #1334	; 0x536
 800e86a:	484e      	ldr	r0, [pc, #312]	; (800e9a4 <HAL_TIM_PWM_Init+0x1b4>)
 800e86c:	f7f7 f991 	bl	8005b92 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	689b      	ldr	r3, [r3, #8]
 800e874:	2b00      	cmp	r3, #0
 800e876:	d014      	beq.n	800e8a2 <HAL_TIM_PWM_Init+0xb2>
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	689b      	ldr	r3, [r3, #8]
 800e87c:	2b10      	cmp	r3, #16
 800e87e:	d010      	beq.n	800e8a2 <HAL_TIM_PWM_Init+0xb2>
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	689b      	ldr	r3, [r3, #8]
 800e884:	2b20      	cmp	r3, #32
 800e886:	d00c      	beq.n	800e8a2 <HAL_TIM_PWM_Init+0xb2>
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	689b      	ldr	r3, [r3, #8]
 800e88c:	2b40      	cmp	r3, #64	; 0x40
 800e88e:	d008      	beq.n	800e8a2 <HAL_TIM_PWM_Init+0xb2>
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	689b      	ldr	r3, [r3, #8]
 800e894:	2b60      	cmp	r3, #96	; 0x60
 800e896:	d004      	beq.n	800e8a2 <HAL_TIM_PWM_Init+0xb2>
 800e898:	f240 5137 	movw	r1, #1335	; 0x537
 800e89c:	4841      	ldr	r0, [pc, #260]	; (800e9a4 <HAL_TIM_PWM_Init+0x1b4>)
 800e89e:	f7f7 f978 	bl	8005b92 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	691b      	ldr	r3, [r3, #16]
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d00e      	beq.n	800e8c8 <HAL_TIM_PWM_Init+0xd8>
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	691b      	ldr	r3, [r3, #16]
 800e8ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e8b2:	d009      	beq.n	800e8c8 <HAL_TIM_PWM_Init+0xd8>
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	691b      	ldr	r3, [r3, #16]
 800e8b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e8bc:	d004      	beq.n	800e8c8 <HAL_TIM_PWM_Init+0xd8>
 800e8be:	f44f 61a7 	mov.w	r1, #1336	; 0x538
 800e8c2:	4838      	ldr	r0, [pc, #224]	; (800e9a4 <HAL_TIM_PWM_Init+0x1b4>)
 800e8c4:	f7f7 f965 	bl	8005b92 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	699b      	ldr	r3, [r3, #24]
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d008      	beq.n	800e8e2 <HAL_TIM_PWM_Init+0xf2>
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	699b      	ldr	r3, [r3, #24]
 800e8d4:	2b80      	cmp	r3, #128	; 0x80
 800e8d6:	d004      	beq.n	800e8e2 <HAL_TIM_PWM_Init+0xf2>
 800e8d8:	f240 5139 	movw	r1, #1337	; 0x539
 800e8dc:	4831      	ldr	r0, [pc, #196]	; (800e9a4 <HAL_TIM_PWM_Init+0x1b4>)
 800e8de:	f7f7 f958 	bl	8005b92 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e8e8:	b2db      	uxtb	r3, r3
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d106      	bne.n	800e8fc <HAL_TIM_PWM_Init+0x10c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	2200      	movs	r2, #0
 800e8f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e8f6:	6878      	ldr	r0, [r7, #4]
 800e8f8:	f000 f856 	bl	800e9a8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	2202      	movs	r2, #2
 800e900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	681a      	ldr	r2, [r3, #0]
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	3304      	adds	r3, #4
 800e90c:	4619      	mov	r1, r3
 800e90e:	4610      	mov	r0, r2
 800e910:	f000 ff36 	bl	800f780 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	2201      	movs	r2, #1
 800e918:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	2201      	movs	r2, #1
 800e920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	2201      	movs	r2, #1
 800e928:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	2201      	movs	r2, #1
 800e930:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	2201      	movs	r2, #1
 800e938:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	2201      	movs	r2, #1
 800e940:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	2201      	movs	r2, #1
 800e948:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	2201      	movs	r2, #1
 800e950:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	2201      	movs	r2, #1
 800e958:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	2201      	movs	r2, #1
 800e960:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	2201      	movs	r2, #1
 800e968:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	2201      	movs	r2, #1
 800e970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e974:	2300      	movs	r3, #0
}
 800e976:	4618      	mov	r0, r3
 800e978:	3708      	adds	r7, #8
 800e97a:	46bd      	mov	sp, r7
 800e97c:	bd80      	pop	{r7, pc}
 800e97e:	bf00      	nop
 800e980:	40012c00 	.word	0x40012c00
 800e984:	40000400 	.word	0x40000400
 800e988:	40000800 	.word	0x40000800
 800e98c:	40001000 	.word	0x40001000
 800e990:	40001400 	.word	0x40001400
 800e994:	40013400 	.word	0x40013400
 800e998:	40014000 	.word	0x40014000
 800e99c:	40014400 	.word	0x40014400
 800e9a0:	40014800 	.word	0x40014800
 800e9a4:	080344b0 	.word	0x080344b0

0800e9a8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800e9a8:	b480      	push	{r7}
 800e9aa:	b083      	sub	sp, #12
 800e9ac:	af00      	add	r7, sp, #0
 800e9ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800e9b0:	bf00      	nop
 800e9b2:	370c      	adds	r7, #12
 800e9b4:	46bd      	mov	sp, r7
 800e9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ba:	4770      	bx	lr

0800e9bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e9bc:	b580      	push	{r7, lr}
 800e9be:	b084      	sub	sp, #16
 800e9c0:	af00      	add	r7, sp, #0
 800e9c2:	6078      	str	r0, [r7, #4]
 800e9c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	4a7a      	ldr	r2, [pc, #488]	; (800ebb4 <HAL_TIM_PWM_Start+0x1f8>)
 800e9cc:	4293      	cmp	r3, r2
 800e9ce:	d111      	bne.n	800e9f4 <HAL_TIM_PWM_Start+0x38>
 800e9d0:	683b      	ldr	r3, [r7, #0]
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d078      	beq.n	800eac8 <HAL_TIM_PWM_Start+0x10c>
 800e9d6:	683b      	ldr	r3, [r7, #0]
 800e9d8:	2b04      	cmp	r3, #4
 800e9da:	d075      	beq.n	800eac8 <HAL_TIM_PWM_Start+0x10c>
 800e9dc:	683b      	ldr	r3, [r7, #0]
 800e9de:	2b08      	cmp	r3, #8
 800e9e0:	d072      	beq.n	800eac8 <HAL_TIM_PWM_Start+0x10c>
 800e9e2:	683b      	ldr	r3, [r7, #0]
 800e9e4:	2b0c      	cmp	r3, #12
 800e9e6:	d06f      	beq.n	800eac8 <HAL_TIM_PWM_Start+0x10c>
 800e9e8:	683b      	ldr	r3, [r7, #0]
 800e9ea:	2b10      	cmp	r3, #16
 800e9ec:	d06c      	beq.n	800eac8 <HAL_TIM_PWM_Start+0x10c>
 800e9ee:	683b      	ldr	r3, [r7, #0]
 800e9f0:	2b14      	cmp	r3, #20
 800e9f2:	d069      	beq.n	800eac8 <HAL_TIM_PWM_Start+0x10c>
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e9fc:	d10b      	bne.n	800ea16 <HAL_TIM_PWM_Start+0x5a>
 800e9fe:	683b      	ldr	r3, [r7, #0]
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d061      	beq.n	800eac8 <HAL_TIM_PWM_Start+0x10c>
 800ea04:	683b      	ldr	r3, [r7, #0]
 800ea06:	2b04      	cmp	r3, #4
 800ea08:	d05e      	beq.n	800eac8 <HAL_TIM_PWM_Start+0x10c>
 800ea0a:	683b      	ldr	r3, [r7, #0]
 800ea0c:	2b08      	cmp	r3, #8
 800ea0e:	d05b      	beq.n	800eac8 <HAL_TIM_PWM_Start+0x10c>
 800ea10:	683b      	ldr	r3, [r7, #0]
 800ea12:	2b0c      	cmp	r3, #12
 800ea14:	d058      	beq.n	800eac8 <HAL_TIM_PWM_Start+0x10c>
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	4a67      	ldr	r2, [pc, #412]	; (800ebb8 <HAL_TIM_PWM_Start+0x1fc>)
 800ea1c:	4293      	cmp	r3, r2
 800ea1e:	d10b      	bne.n	800ea38 <HAL_TIM_PWM_Start+0x7c>
 800ea20:	683b      	ldr	r3, [r7, #0]
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d050      	beq.n	800eac8 <HAL_TIM_PWM_Start+0x10c>
 800ea26:	683b      	ldr	r3, [r7, #0]
 800ea28:	2b04      	cmp	r3, #4
 800ea2a:	d04d      	beq.n	800eac8 <HAL_TIM_PWM_Start+0x10c>
 800ea2c:	683b      	ldr	r3, [r7, #0]
 800ea2e:	2b08      	cmp	r3, #8
 800ea30:	d04a      	beq.n	800eac8 <HAL_TIM_PWM_Start+0x10c>
 800ea32:	683b      	ldr	r3, [r7, #0]
 800ea34:	2b0c      	cmp	r3, #12
 800ea36:	d047      	beq.n	800eac8 <HAL_TIM_PWM_Start+0x10c>
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	4a5f      	ldr	r2, [pc, #380]	; (800ebbc <HAL_TIM_PWM_Start+0x200>)
 800ea3e:	4293      	cmp	r3, r2
 800ea40:	d10b      	bne.n	800ea5a <HAL_TIM_PWM_Start+0x9e>
 800ea42:	683b      	ldr	r3, [r7, #0]
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d03f      	beq.n	800eac8 <HAL_TIM_PWM_Start+0x10c>
 800ea48:	683b      	ldr	r3, [r7, #0]
 800ea4a:	2b04      	cmp	r3, #4
 800ea4c:	d03c      	beq.n	800eac8 <HAL_TIM_PWM_Start+0x10c>
 800ea4e:	683b      	ldr	r3, [r7, #0]
 800ea50:	2b08      	cmp	r3, #8
 800ea52:	d039      	beq.n	800eac8 <HAL_TIM_PWM_Start+0x10c>
 800ea54:	683b      	ldr	r3, [r7, #0]
 800ea56:	2b0c      	cmp	r3, #12
 800ea58:	d036      	beq.n	800eac8 <HAL_TIM_PWM_Start+0x10c>
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	4a58      	ldr	r2, [pc, #352]	; (800ebc0 <HAL_TIM_PWM_Start+0x204>)
 800ea60:	4293      	cmp	r3, r2
 800ea62:	d111      	bne.n	800ea88 <HAL_TIM_PWM_Start+0xcc>
 800ea64:	683b      	ldr	r3, [r7, #0]
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d02e      	beq.n	800eac8 <HAL_TIM_PWM_Start+0x10c>
 800ea6a:	683b      	ldr	r3, [r7, #0]
 800ea6c:	2b04      	cmp	r3, #4
 800ea6e:	d02b      	beq.n	800eac8 <HAL_TIM_PWM_Start+0x10c>
 800ea70:	683b      	ldr	r3, [r7, #0]
 800ea72:	2b08      	cmp	r3, #8
 800ea74:	d028      	beq.n	800eac8 <HAL_TIM_PWM_Start+0x10c>
 800ea76:	683b      	ldr	r3, [r7, #0]
 800ea78:	2b0c      	cmp	r3, #12
 800ea7a:	d025      	beq.n	800eac8 <HAL_TIM_PWM_Start+0x10c>
 800ea7c:	683b      	ldr	r3, [r7, #0]
 800ea7e:	2b10      	cmp	r3, #16
 800ea80:	d022      	beq.n	800eac8 <HAL_TIM_PWM_Start+0x10c>
 800ea82:	683b      	ldr	r3, [r7, #0]
 800ea84:	2b14      	cmp	r3, #20
 800ea86:	d01f      	beq.n	800eac8 <HAL_TIM_PWM_Start+0x10c>
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	4a4d      	ldr	r2, [pc, #308]	; (800ebc4 <HAL_TIM_PWM_Start+0x208>)
 800ea8e:	4293      	cmp	r3, r2
 800ea90:	d105      	bne.n	800ea9e <HAL_TIM_PWM_Start+0xe2>
 800ea92:	683b      	ldr	r3, [r7, #0]
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d017      	beq.n	800eac8 <HAL_TIM_PWM_Start+0x10c>
 800ea98:	683b      	ldr	r3, [r7, #0]
 800ea9a:	2b04      	cmp	r3, #4
 800ea9c:	d014      	beq.n	800eac8 <HAL_TIM_PWM_Start+0x10c>
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	4a49      	ldr	r2, [pc, #292]	; (800ebc8 <HAL_TIM_PWM_Start+0x20c>)
 800eaa4:	4293      	cmp	r3, r2
 800eaa6:	d102      	bne.n	800eaae <HAL_TIM_PWM_Start+0xf2>
 800eaa8:	683b      	ldr	r3, [r7, #0]
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d00c      	beq.n	800eac8 <HAL_TIM_PWM_Start+0x10c>
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	4a46      	ldr	r2, [pc, #280]	; (800ebcc <HAL_TIM_PWM_Start+0x210>)
 800eab4:	4293      	cmp	r3, r2
 800eab6:	d102      	bne.n	800eabe <HAL_TIM_PWM_Start+0x102>
 800eab8:	683b      	ldr	r3, [r7, #0]
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d004      	beq.n	800eac8 <HAL_TIM_PWM_Start+0x10c>
 800eabe:	f240 51bf 	movw	r1, #1471	; 0x5bf
 800eac2:	4843      	ldr	r0, [pc, #268]	; (800ebd0 <HAL_TIM_PWM_Start+0x214>)
 800eac4:	f7f7 f865 	bl	8005b92 <assert_failed>

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800eac8:	683b      	ldr	r3, [r7, #0]
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d109      	bne.n	800eae2 <HAL_TIM_PWM_Start+0x126>
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ead4:	b2db      	uxtb	r3, r3
 800ead6:	2b01      	cmp	r3, #1
 800ead8:	bf14      	ite	ne
 800eada:	2301      	movne	r3, #1
 800eadc:	2300      	moveq	r3, #0
 800eade:	b2db      	uxtb	r3, r3
 800eae0:	e03c      	b.n	800eb5c <HAL_TIM_PWM_Start+0x1a0>
 800eae2:	683b      	ldr	r3, [r7, #0]
 800eae4:	2b04      	cmp	r3, #4
 800eae6:	d109      	bne.n	800eafc <HAL_TIM_PWM_Start+0x140>
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800eaee:	b2db      	uxtb	r3, r3
 800eaf0:	2b01      	cmp	r3, #1
 800eaf2:	bf14      	ite	ne
 800eaf4:	2301      	movne	r3, #1
 800eaf6:	2300      	moveq	r3, #0
 800eaf8:	b2db      	uxtb	r3, r3
 800eafa:	e02f      	b.n	800eb5c <HAL_TIM_PWM_Start+0x1a0>
 800eafc:	683b      	ldr	r3, [r7, #0]
 800eafe:	2b08      	cmp	r3, #8
 800eb00:	d109      	bne.n	800eb16 <HAL_TIM_PWM_Start+0x15a>
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800eb08:	b2db      	uxtb	r3, r3
 800eb0a:	2b01      	cmp	r3, #1
 800eb0c:	bf14      	ite	ne
 800eb0e:	2301      	movne	r3, #1
 800eb10:	2300      	moveq	r3, #0
 800eb12:	b2db      	uxtb	r3, r3
 800eb14:	e022      	b.n	800eb5c <HAL_TIM_PWM_Start+0x1a0>
 800eb16:	683b      	ldr	r3, [r7, #0]
 800eb18:	2b0c      	cmp	r3, #12
 800eb1a:	d109      	bne.n	800eb30 <HAL_TIM_PWM_Start+0x174>
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800eb22:	b2db      	uxtb	r3, r3
 800eb24:	2b01      	cmp	r3, #1
 800eb26:	bf14      	ite	ne
 800eb28:	2301      	movne	r3, #1
 800eb2a:	2300      	moveq	r3, #0
 800eb2c:	b2db      	uxtb	r3, r3
 800eb2e:	e015      	b.n	800eb5c <HAL_TIM_PWM_Start+0x1a0>
 800eb30:	683b      	ldr	r3, [r7, #0]
 800eb32:	2b10      	cmp	r3, #16
 800eb34:	d109      	bne.n	800eb4a <HAL_TIM_PWM_Start+0x18e>
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800eb3c:	b2db      	uxtb	r3, r3
 800eb3e:	2b01      	cmp	r3, #1
 800eb40:	bf14      	ite	ne
 800eb42:	2301      	movne	r3, #1
 800eb44:	2300      	moveq	r3, #0
 800eb46:	b2db      	uxtb	r3, r3
 800eb48:	e008      	b.n	800eb5c <HAL_TIM_PWM_Start+0x1a0>
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800eb50:	b2db      	uxtb	r3, r3
 800eb52:	2b01      	cmp	r3, #1
 800eb54:	bf14      	ite	ne
 800eb56:	2301      	movne	r3, #1
 800eb58:	2300      	moveq	r3, #0
 800eb5a:	b2db      	uxtb	r3, r3
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d001      	beq.n	800eb64 <HAL_TIM_PWM_Start+0x1a8>
  {
    return HAL_ERROR;
 800eb60:	2301      	movs	r3, #1
 800eb62:	e0a7      	b.n	800ecb4 <HAL_TIM_PWM_Start+0x2f8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800eb64:	683b      	ldr	r3, [r7, #0]
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d104      	bne.n	800eb74 <HAL_TIM_PWM_Start+0x1b8>
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	2202      	movs	r2, #2
 800eb6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800eb72:	e033      	b.n	800ebdc <HAL_TIM_PWM_Start+0x220>
 800eb74:	683b      	ldr	r3, [r7, #0]
 800eb76:	2b04      	cmp	r3, #4
 800eb78:	d104      	bne.n	800eb84 <HAL_TIM_PWM_Start+0x1c8>
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	2202      	movs	r2, #2
 800eb7e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800eb82:	e02b      	b.n	800ebdc <HAL_TIM_PWM_Start+0x220>
 800eb84:	683b      	ldr	r3, [r7, #0]
 800eb86:	2b08      	cmp	r3, #8
 800eb88:	d104      	bne.n	800eb94 <HAL_TIM_PWM_Start+0x1d8>
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	2202      	movs	r2, #2
 800eb8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800eb92:	e023      	b.n	800ebdc <HAL_TIM_PWM_Start+0x220>
 800eb94:	683b      	ldr	r3, [r7, #0]
 800eb96:	2b0c      	cmp	r3, #12
 800eb98:	d104      	bne.n	800eba4 <HAL_TIM_PWM_Start+0x1e8>
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	2202      	movs	r2, #2
 800eb9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800eba2:	e01b      	b.n	800ebdc <HAL_TIM_PWM_Start+0x220>
 800eba4:	683b      	ldr	r3, [r7, #0]
 800eba6:	2b10      	cmp	r3, #16
 800eba8:	d114      	bne.n	800ebd4 <HAL_TIM_PWM_Start+0x218>
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	2202      	movs	r2, #2
 800ebae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ebb2:	e013      	b.n	800ebdc <HAL_TIM_PWM_Start+0x220>
 800ebb4:	40012c00 	.word	0x40012c00
 800ebb8:	40000400 	.word	0x40000400
 800ebbc:	40000800 	.word	0x40000800
 800ebc0:	40013400 	.word	0x40013400
 800ebc4:	40014000 	.word	0x40014000
 800ebc8:	40014400 	.word	0x40014400
 800ebcc:	40014800 	.word	0x40014800
 800ebd0:	080344b0 	.word	0x080344b0
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	2202      	movs	r2, #2
 800ebd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	2201      	movs	r2, #1
 800ebe2:	6839      	ldr	r1, [r7, #0]
 800ebe4:	4618      	mov	r0, r3
 800ebe6:	f001 fa55 	bl	8010094 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	4a33      	ldr	r2, [pc, #204]	; (800ecbc <HAL_TIM_PWM_Start+0x300>)
 800ebf0:	4293      	cmp	r3, r2
 800ebf2:	d013      	beq.n	800ec1c <HAL_TIM_PWM_Start+0x260>
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	4a31      	ldr	r2, [pc, #196]	; (800ecc0 <HAL_TIM_PWM_Start+0x304>)
 800ebfa:	4293      	cmp	r3, r2
 800ebfc:	d00e      	beq.n	800ec1c <HAL_TIM_PWM_Start+0x260>
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	4a30      	ldr	r2, [pc, #192]	; (800ecc4 <HAL_TIM_PWM_Start+0x308>)
 800ec04:	4293      	cmp	r3, r2
 800ec06:	d009      	beq.n	800ec1c <HAL_TIM_PWM_Start+0x260>
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	4a2e      	ldr	r2, [pc, #184]	; (800ecc8 <HAL_TIM_PWM_Start+0x30c>)
 800ec0e:	4293      	cmp	r3, r2
 800ec10:	d004      	beq.n	800ec1c <HAL_TIM_PWM_Start+0x260>
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	4a2d      	ldr	r2, [pc, #180]	; (800eccc <HAL_TIM_PWM_Start+0x310>)
 800ec18:	4293      	cmp	r3, r2
 800ec1a:	d101      	bne.n	800ec20 <HAL_TIM_PWM_Start+0x264>
 800ec1c:	2301      	movs	r3, #1
 800ec1e:	e000      	b.n	800ec22 <HAL_TIM_PWM_Start+0x266>
 800ec20:	2300      	movs	r3, #0
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d007      	beq.n	800ec36 <HAL_TIM_PWM_Start+0x27a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ec34:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	4a20      	ldr	r2, [pc, #128]	; (800ecbc <HAL_TIM_PWM_Start+0x300>)
 800ec3c:	4293      	cmp	r3, r2
 800ec3e:	d018      	beq.n	800ec72 <HAL_TIM_PWM_Start+0x2b6>
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ec48:	d013      	beq.n	800ec72 <HAL_TIM_PWM_Start+0x2b6>
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	4a20      	ldr	r2, [pc, #128]	; (800ecd0 <HAL_TIM_PWM_Start+0x314>)
 800ec50:	4293      	cmp	r3, r2
 800ec52:	d00e      	beq.n	800ec72 <HAL_TIM_PWM_Start+0x2b6>
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	4a1e      	ldr	r2, [pc, #120]	; (800ecd4 <HAL_TIM_PWM_Start+0x318>)
 800ec5a:	4293      	cmp	r3, r2
 800ec5c:	d009      	beq.n	800ec72 <HAL_TIM_PWM_Start+0x2b6>
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	4a17      	ldr	r2, [pc, #92]	; (800ecc0 <HAL_TIM_PWM_Start+0x304>)
 800ec64:	4293      	cmp	r3, r2
 800ec66:	d004      	beq.n	800ec72 <HAL_TIM_PWM_Start+0x2b6>
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	4a15      	ldr	r2, [pc, #84]	; (800ecc4 <HAL_TIM_PWM_Start+0x308>)
 800ec6e:	4293      	cmp	r3, r2
 800ec70:	d115      	bne.n	800ec9e <HAL_TIM_PWM_Start+0x2e2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	689a      	ldr	r2, [r3, #8]
 800ec78:	4b17      	ldr	r3, [pc, #92]	; (800ecd8 <HAL_TIM_PWM_Start+0x31c>)
 800ec7a:	4013      	ands	r3, r2
 800ec7c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ec7e:	68fb      	ldr	r3, [r7, #12]
 800ec80:	2b06      	cmp	r3, #6
 800ec82:	d015      	beq.n	800ecb0 <HAL_TIM_PWM_Start+0x2f4>
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ec8a:	d011      	beq.n	800ecb0 <HAL_TIM_PWM_Start+0x2f4>
    {
      __HAL_TIM_ENABLE(htim);
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	681a      	ldr	r2, [r3, #0]
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	f042 0201 	orr.w	r2, r2, #1
 800ec9a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ec9c:	e008      	b.n	800ecb0 <HAL_TIM_PWM_Start+0x2f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	681a      	ldr	r2, [r3, #0]
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	f042 0201 	orr.w	r2, r2, #1
 800ecac:	601a      	str	r2, [r3, #0]
 800ecae:	e000      	b.n	800ecb2 <HAL_TIM_PWM_Start+0x2f6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ecb0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ecb2:	2300      	movs	r3, #0
}
 800ecb4:	4618      	mov	r0, r3
 800ecb6:	3710      	adds	r7, #16
 800ecb8:	46bd      	mov	sp, r7
 800ecba:	bd80      	pop	{r7, pc}
 800ecbc:	40012c00 	.word	0x40012c00
 800ecc0:	40013400 	.word	0x40013400
 800ecc4:	40014000 	.word	0x40014000
 800ecc8:	40014400 	.word	0x40014400
 800eccc:	40014800 	.word	0x40014800
 800ecd0:	40000400 	.word	0x40000400
 800ecd4:	40000800 	.word	0x40000800
 800ecd8:	00010007 	.word	0x00010007

0800ecdc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ecdc:	b580      	push	{r7, lr}
 800ecde:	b086      	sub	sp, #24
 800ece0:	af00      	add	r7, sp, #0
 800ece2:	60f8      	str	r0, [r7, #12]
 800ece4:	60b9      	str	r1, [r7, #8]
 800ece6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ece8:	2300      	movs	r3, #0
 800ecea:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d016      	beq.n	800ed20 <HAL_TIM_PWM_ConfigChannel+0x44>
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	2b04      	cmp	r3, #4
 800ecf6:	d013      	beq.n	800ed20 <HAL_TIM_PWM_ConfigChannel+0x44>
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	2b08      	cmp	r3, #8
 800ecfc:	d010      	beq.n	800ed20 <HAL_TIM_PWM_ConfigChannel+0x44>
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	2b0c      	cmp	r3, #12
 800ed02:	d00d      	beq.n	800ed20 <HAL_TIM_PWM_ConfigChannel+0x44>
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	2b10      	cmp	r3, #16
 800ed08:	d00a      	beq.n	800ed20 <HAL_TIM_PWM_ConfigChannel+0x44>
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	2b14      	cmp	r3, #20
 800ed0e:	d007      	beq.n	800ed20 <HAL_TIM_PWM_ConfigChannel+0x44>
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	2b3c      	cmp	r3, #60	; 0x3c
 800ed14:	d004      	beq.n	800ed20 <HAL_TIM_PWM_ConfigChannel+0x44>
 800ed16:	f241 01b7 	movw	r1, #4279	; 0x10b7
 800ed1a:	4886      	ldr	r0, [pc, #536]	; (800ef34 <HAL_TIM_PWM_ConfigChannel+0x258>)
 800ed1c:	f7f6 ff39 	bl	8005b92 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 800ed20:	68bb      	ldr	r3, [r7, #8]
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	2b60      	cmp	r3, #96	; 0x60
 800ed26:	d01c      	beq.n	800ed62 <HAL_TIM_PWM_ConfigChannel+0x86>
 800ed28:	68bb      	ldr	r3, [r7, #8]
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	2b70      	cmp	r3, #112	; 0x70
 800ed2e:	d018      	beq.n	800ed62 <HAL_TIM_PWM_ConfigChannel+0x86>
 800ed30:	68bb      	ldr	r3, [r7, #8]
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	4a80      	ldr	r2, [pc, #512]	; (800ef38 <HAL_TIM_PWM_ConfigChannel+0x25c>)
 800ed36:	4293      	cmp	r3, r2
 800ed38:	d013      	beq.n	800ed62 <HAL_TIM_PWM_ConfigChannel+0x86>
 800ed3a:	68bb      	ldr	r3, [r7, #8]
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	4a7f      	ldr	r2, [pc, #508]	; (800ef3c <HAL_TIM_PWM_ConfigChannel+0x260>)
 800ed40:	4293      	cmp	r3, r2
 800ed42:	d00e      	beq.n	800ed62 <HAL_TIM_PWM_ConfigChannel+0x86>
 800ed44:	68bb      	ldr	r3, [r7, #8]
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	4a7d      	ldr	r2, [pc, #500]	; (800ef40 <HAL_TIM_PWM_ConfigChannel+0x264>)
 800ed4a:	4293      	cmp	r3, r2
 800ed4c:	d009      	beq.n	800ed62 <HAL_TIM_PWM_ConfigChannel+0x86>
 800ed4e:	68bb      	ldr	r3, [r7, #8]
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	4a7c      	ldr	r2, [pc, #496]	; (800ef44 <HAL_TIM_PWM_ConfigChannel+0x268>)
 800ed54:	4293      	cmp	r3, r2
 800ed56:	d004      	beq.n	800ed62 <HAL_TIM_PWM_ConfigChannel+0x86>
 800ed58:	f241 01b8 	movw	r1, #4280	; 0x10b8
 800ed5c:	4875      	ldr	r0, [pc, #468]	; (800ef34 <HAL_TIM_PWM_ConfigChannel+0x258>)
 800ed5e:	f7f6 ff18 	bl	8005b92 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800ed62:	68bb      	ldr	r3, [r7, #8]
 800ed64:	689b      	ldr	r3, [r3, #8]
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d008      	beq.n	800ed7c <HAL_TIM_PWM_ConfigChannel+0xa0>
 800ed6a:	68bb      	ldr	r3, [r7, #8]
 800ed6c:	689b      	ldr	r3, [r3, #8]
 800ed6e:	2b02      	cmp	r3, #2
 800ed70:	d004      	beq.n	800ed7c <HAL_TIM_PWM_ConfigChannel+0xa0>
 800ed72:	f241 01b9 	movw	r1, #4281	; 0x10b9
 800ed76:	486f      	ldr	r0, [pc, #444]	; (800ef34 <HAL_TIM_PWM_ConfigChannel+0x258>)
 800ed78:	f7f6 ff0b 	bl	8005b92 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 800ed7c:	68bb      	ldr	r3, [r7, #8]
 800ed7e:	691b      	ldr	r3, [r3, #16]
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d008      	beq.n	800ed96 <HAL_TIM_PWM_ConfigChannel+0xba>
 800ed84:	68bb      	ldr	r3, [r7, #8]
 800ed86:	691b      	ldr	r3, [r3, #16]
 800ed88:	2b04      	cmp	r3, #4
 800ed8a:	d004      	beq.n	800ed96 <HAL_TIM_PWM_ConfigChannel+0xba>
 800ed8c:	f241 01ba 	movw	r1, #4282	; 0x10ba
 800ed90:	4868      	ldr	r0, [pc, #416]	; (800ef34 <HAL_TIM_PWM_ConfigChannel+0x258>)
 800ed92:	f7f6 fefe 	bl	8005b92 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 800ed96:	68fb      	ldr	r3, [r7, #12]
 800ed98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ed9c:	2b01      	cmp	r3, #1
 800ed9e:	d101      	bne.n	800eda4 <HAL_TIM_PWM_ConfigChannel+0xc8>
 800eda0:	2302      	movs	r3, #2
 800eda2:	e1c3      	b.n	800f12c <HAL_TIM_PWM_ConfigChannel+0x450>
 800eda4:	68fb      	ldr	r3, [r7, #12]
 800eda6:	2201      	movs	r2, #1
 800eda8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	2b14      	cmp	r3, #20
 800edb0:	f200 81b4 	bhi.w	800f11c <HAL_TIM_PWM_ConfigChannel+0x440>
 800edb4:	a201      	add	r2, pc, #4	; (adr r2, 800edbc <HAL_TIM_PWM_ConfigChannel+0xe0>)
 800edb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800edba:	bf00      	nop
 800edbc:	0800ee11 	.word	0x0800ee11
 800edc0:	0800f11d 	.word	0x0800f11d
 800edc4:	0800f11d 	.word	0x0800f11d
 800edc8:	0800f11d 	.word	0x0800f11d
 800edcc:	0800eeab 	.word	0x0800eeab
 800edd0:	0800f11d 	.word	0x0800f11d
 800edd4:	0800f11d 	.word	0x0800f11d
 800edd8:	0800f11d 	.word	0x0800f11d
 800eddc:	0800ef65 	.word	0x0800ef65
 800ede0:	0800f11d 	.word	0x0800f11d
 800ede4:	0800f11d 	.word	0x0800f11d
 800ede8:	0800f11d 	.word	0x0800f11d
 800edec:	0800efe1 	.word	0x0800efe1
 800edf0:	0800f11d 	.word	0x0800f11d
 800edf4:	0800f11d 	.word	0x0800f11d
 800edf8:	0800f11d 	.word	0x0800f11d
 800edfc:	0800f05f 	.word	0x0800f05f
 800ee00:	0800f11d 	.word	0x0800f11d
 800ee04:	0800f11d 	.word	0x0800f11d
 800ee08:	0800f11d 	.word	0x0800f11d
 800ee0c:	0800f0bd 	.word	0x0800f0bd
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	681b      	ldr	r3, [r3, #0]
 800ee14:	4a4c      	ldr	r2, [pc, #304]	; (800ef48 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 800ee16:	4293      	cmp	r3, r2
 800ee18:	d027      	beq.n	800ee6a <HAL_TIM_PWM_ConfigChannel+0x18e>
 800ee1a:	68fb      	ldr	r3, [r7, #12]
 800ee1c:	681b      	ldr	r3, [r3, #0]
 800ee1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ee22:	d022      	beq.n	800ee6a <HAL_TIM_PWM_ConfigChannel+0x18e>
 800ee24:	68fb      	ldr	r3, [r7, #12]
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	4a48      	ldr	r2, [pc, #288]	; (800ef4c <HAL_TIM_PWM_ConfigChannel+0x270>)
 800ee2a:	4293      	cmp	r3, r2
 800ee2c:	d01d      	beq.n	800ee6a <HAL_TIM_PWM_ConfigChannel+0x18e>
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	4a47      	ldr	r2, [pc, #284]	; (800ef50 <HAL_TIM_PWM_ConfigChannel+0x274>)
 800ee34:	4293      	cmp	r3, r2
 800ee36:	d018      	beq.n	800ee6a <HAL_TIM_PWM_ConfigChannel+0x18e>
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	4a45      	ldr	r2, [pc, #276]	; (800ef54 <HAL_TIM_PWM_ConfigChannel+0x278>)
 800ee3e:	4293      	cmp	r3, r2
 800ee40:	d013      	beq.n	800ee6a <HAL_TIM_PWM_ConfigChannel+0x18e>
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	681b      	ldr	r3, [r3, #0]
 800ee46:	4a44      	ldr	r2, [pc, #272]	; (800ef58 <HAL_TIM_PWM_ConfigChannel+0x27c>)
 800ee48:	4293      	cmp	r3, r2
 800ee4a:	d00e      	beq.n	800ee6a <HAL_TIM_PWM_ConfigChannel+0x18e>
 800ee4c:	68fb      	ldr	r3, [r7, #12]
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	4a42      	ldr	r2, [pc, #264]	; (800ef5c <HAL_TIM_PWM_ConfigChannel+0x280>)
 800ee52:	4293      	cmp	r3, r2
 800ee54:	d009      	beq.n	800ee6a <HAL_TIM_PWM_ConfigChannel+0x18e>
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	681b      	ldr	r3, [r3, #0]
 800ee5a:	4a41      	ldr	r2, [pc, #260]	; (800ef60 <HAL_TIM_PWM_ConfigChannel+0x284>)
 800ee5c:	4293      	cmp	r3, r2
 800ee5e:	d004      	beq.n	800ee6a <HAL_TIM_PWM_ConfigChannel+0x18e>
 800ee60:	f241 01c4 	movw	r1, #4292	; 0x10c4
 800ee64:	4833      	ldr	r0, [pc, #204]	; (800ef34 <HAL_TIM_PWM_ConfigChannel+0x258>)
 800ee66:	f7f6 fe94 	bl	8005b92 <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	68b9      	ldr	r1, [r7, #8]
 800ee70:	4618      	mov	r0, r3
 800ee72:	f000 fd15 	bl	800f8a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	699a      	ldr	r2, [r3, #24]
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	f042 0208 	orr.w	r2, r2, #8
 800ee84:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ee86:	68fb      	ldr	r3, [r7, #12]
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	699a      	ldr	r2, [r3, #24]
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	f022 0204 	bic.w	r2, r2, #4
 800ee94:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ee96:	68fb      	ldr	r3, [r7, #12]
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	6999      	ldr	r1, [r3, #24]
 800ee9c:	68bb      	ldr	r3, [r7, #8]
 800ee9e:	691a      	ldr	r2, [r3, #16]
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	430a      	orrs	r2, r1
 800eea6:	619a      	str	r2, [r3, #24]
      break;
 800eea8:	e13b      	b.n	800f122 <HAL_TIM_PWM_ConfigChannel+0x446>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	4a26      	ldr	r2, [pc, #152]	; (800ef48 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 800eeb0:	4293      	cmp	r3, r2
 800eeb2:	d01d      	beq.n	800eef0 <HAL_TIM_PWM_ConfigChannel+0x214>
 800eeb4:	68fb      	ldr	r3, [r7, #12]
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eebc:	d018      	beq.n	800eef0 <HAL_TIM_PWM_ConfigChannel+0x214>
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	4a22      	ldr	r2, [pc, #136]	; (800ef4c <HAL_TIM_PWM_ConfigChannel+0x270>)
 800eec4:	4293      	cmp	r3, r2
 800eec6:	d013      	beq.n	800eef0 <HAL_TIM_PWM_ConfigChannel+0x214>
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	4a20      	ldr	r2, [pc, #128]	; (800ef50 <HAL_TIM_PWM_ConfigChannel+0x274>)
 800eece:	4293      	cmp	r3, r2
 800eed0:	d00e      	beq.n	800eef0 <HAL_TIM_PWM_ConfigChannel+0x214>
 800eed2:	68fb      	ldr	r3, [r7, #12]
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	4a1f      	ldr	r2, [pc, #124]	; (800ef54 <HAL_TIM_PWM_ConfigChannel+0x278>)
 800eed8:	4293      	cmp	r3, r2
 800eeda:	d009      	beq.n	800eef0 <HAL_TIM_PWM_ConfigChannel+0x214>
 800eedc:	68fb      	ldr	r3, [r7, #12]
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	4a1d      	ldr	r2, [pc, #116]	; (800ef58 <HAL_TIM_PWM_ConfigChannel+0x27c>)
 800eee2:	4293      	cmp	r3, r2
 800eee4:	d004      	beq.n	800eef0 <HAL_TIM_PWM_ConfigChannel+0x214>
 800eee6:	f241 01d5 	movw	r1, #4309	; 0x10d5
 800eeea:	4812      	ldr	r0, [pc, #72]	; (800ef34 <HAL_TIM_PWM_ConfigChannel+0x258>)
 800eeec:	f7f6 fe51 	bl	8005b92 <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	68b9      	ldr	r1, [r7, #8]
 800eef6:	4618      	mov	r0, r3
 800eef8:	f000 fd8c 	bl	800fa14 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	699a      	ldr	r2, [r3, #24]
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ef0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	699a      	ldr	r2, [r3, #24]
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ef1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ef1c:	68fb      	ldr	r3, [r7, #12]
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	6999      	ldr	r1, [r3, #24]
 800ef22:	68bb      	ldr	r3, [r7, #8]
 800ef24:	691b      	ldr	r3, [r3, #16]
 800ef26:	021a      	lsls	r2, r3, #8
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	430a      	orrs	r2, r1
 800ef2e:	619a      	str	r2, [r3, #24]
      break;
 800ef30:	e0f7      	b.n	800f122 <HAL_TIM_PWM_ConfigChannel+0x446>
 800ef32:	bf00      	nop
 800ef34:	080344b0 	.word	0x080344b0
 800ef38:	00010040 	.word	0x00010040
 800ef3c:	00010050 	.word	0x00010050
 800ef40:	00010060 	.word	0x00010060
 800ef44:	00010070 	.word	0x00010070
 800ef48:	40012c00 	.word	0x40012c00
 800ef4c:	40000400 	.word	0x40000400
 800ef50:	40000800 	.word	0x40000800
 800ef54:	40013400 	.word	0x40013400
 800ef58:	40014000 	.word	0x40014000
 800ef5c:	40014400 	.word	0x40014400
 800ef60:	40014800 	.word	0x40014800
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800ef64:	68fb      	ldr	r3, [r7, #12]
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	4a72      	ldr	r2, [pc, #456]	; (800f134 <HAL_TIM_PWM_ConfigChannel+0x458>)
 800ef6a:	4293      	cmp	r3, r2
 800ef6c:	d018      	beq.n	800efa0 <HAL_TIM_PWM_ConfigChannel+0x2c4>
 800ef6e:	68fb      	ldr	r3, [r7, #12]
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ef76:	d013      	beq.n	800efa0 <HAL_TIM_PWM_ConfigChannel+0x2c4>
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	4a6e      	ldr	r2, [pc, #440]	; (800f138 <HAL_TIM_PWM_ConfigChannel+0x45c>)
 800ef7e:	4293      	cmp	r3, r2
 800ef80:	d00e      	beq.n	800efa0 <HAL_TIM_PWM_ConfigChannel+0x2c4>
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	4a6d      	ldr	r2, [pc, #436]	; (800f13c <HAL_TIM_PWM_ConfigChannel+0x460>)
 800ef88:	4293      	cmp	r3, r2
 800ef8a:	d009      	beq.n	800efa0 <HAL_TIM_PWM_ConfigChannel+0x2c4>
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	4a6b      	ldr	r2, [pc, #428]	; (800f140 <HAL_TIM_PWM_ConfigChannel+0x464>)
 800ef92:	4293      	cmp	r3, r2
 800ef94:	d004      	beq.n	800efa0 <HAL_TIM_PWM_ConfigChannel+0x2c4>
 800ef96:	f241 01e6 	movw	r1, #4326	; 0x10e6
 800ef9a:	486a      	ldr	r0, [pc, #424]	; (800f144 <HAL_TIM_PWM_ConfigChannel+0x468>)
 800ef9c:	f7f6 fdf9 	bl	8005b92 <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800efa0:	68fb      	ldr	r3, [r7, #12]
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	68b9      	ldr	r1, [r7, #8]
 800efa6:	4618      	mov	r0, r3
 800efa8:	f000 fde6 	bl	800fb78 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	69da      	ldr	r2, [r3, #28]
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	f042 0208 	orr.w	r2, r2, #8
 800efba:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	69da      	ldr	r2, [r3, #28]
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	681b      	ldr	r3, [r3, #0]
 800efc6:	f022 0204 	bic.w	r2, r2, #4
 800efca:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	69d9      	ldr	r1, [r3, #28]
 800efd2:	68bb      	ldr	r3, [r7, #8]
 800efd4:	691a      	ldr	r2, [r3, #16]
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	430a      	orrs	r2, r1
 800efdc:	61da      	str	r2, [r3, #28]
      break;
 800efde:	e0a0      	b.n	800f122 <HAL_TIM_PWM_ConfigChannel+0x446>
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800efe0:	68fb      	ldr	r3, [r7, #12]
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	4a53      	ldr	r2, [pc, #332]	; (800f134 <HAL_TIM_PWM_ConfigChannel+0x458>)
 800efe6:	4293      	cmp	r3, r2
 800efe8:	d018      	beq.n	800f01c <HAL_TIM_PWM_ConfigChannel+0x340>
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eff2:	d013      	beq.n	800f01c <HAL_TIM_PWM_ConfigChannel+0x340>
 800eff4:	68fb      	ldr	r3, [r7, #12]
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	4a4f      	ldr	r2, [pc, #316]	; (800f138 <HAL_TIM_PWM_ConfigChannel+0x45c>)
 800effa:	4293      	cmp	r3, r2
 800effc:	d00e      	beq.n	800f01c <HAL_TIM_PWM_ConfigChannel+0x340>
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	681b      	ldr	r3, [r3, #0]
 800f002:	4a4e      	ldr	r2, [pc, #312]	; (800f13c <HAL_TIM_PWM_ConfigChannel+0x460>)
 800f004:	4293      	cmp	r3, r2
 800f006:	d009      	beq.n	800f01c <HAL_TIM_PWM_ConfigChannel+0x340>
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	4a4c      	ldr	r2, [pc, #304]	; (800f140 <HAL_TIM_PWM_ConfigChannel+0x464>)
 800f00e:	4293      	cmp	r3, r2
 800f010:	d004      	beq.n	800f01c <HAL_TIM_PWM_ConfigChannel+0x340>
 800f012:	f241 01f7 	movw	r1, #4343	; 0x10f7
 800f016:	484b      	ldr	r0, [pc, #300]	; (800f144 <HAL_TIM_PWM_ConfigChannel+0x468>)
 800f018:	f7f6 fdbb 	bl	8005b92 <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	68b9      	ldr	r1, [r7, #8]
 800f022:	4618      	mov	r0, r3
 800f024:	f000 fe5a 	bl	800fcdc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	69da      	ldr	r2, [r3, #28]
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f036:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	69da      	ldr	r2, [r3, #28]
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	681b      	ldr	r3, [r3, #0]
 800f042:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f046:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	69d9      	ldr	r1, [r3, #28]
 800f04e:	68bb      	ldr	r3, [r7, #8]
 800f050:	691b      	ldr	r3, [r3, #16]
 800f052:	021a      	lsls	r2, r3, #8
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	430a      	orrs	r2, r1
 800f05a:	61da      	str	r2, [r3, #28]
      break;
 800f05c:	e061      	b.n	800f122 <HAL_TIM_PWM_ConfigChannel+0x446>

#if defined(TIM_CCER_CC5E)
    case TIM_CHANNEL_5:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	4a34      	ldr	r2, [pc, #208]	; (800f134 <HAL_TIM_PWM_ConfigChannel+0x458>)
 800f064:	4293      	cmp	r3, r2
 800f066:	d009      	beq.n	800f07c <HAL_TIM_PWM_ConfigChannel+0x3a0>
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	4a34      	ldr	r2, [pc, #208]	; (800f140 <HAL_TIM_PWM_ConfigChannel+0x464>)
 800f06e:	4293      	cmp	r3, r2
 800f070:	d004      	beq.n	800f07c <HAL_TIM_PWM_ConfigChannel+0x3a0>
 800f072:	f241 1109 	movw	r1, #4361	; 0x1109
 800f076:	4833      	ldr	r0, [pc, #204]	; (800f144 <HAL_TIM_PWM_ConfigChannel+0x468>)
 800f078:	f7f6 fd8b 	bl	8005b92 <assert_failed>

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	681b      	ldr	r3, [r3, #0]
 800f080:	68b9      	ldr	r1, [r7, #8]
 800f082:	4618      	mov	r0, r3
 800f084:	f000 fea2 	bl	800fdcc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	681b      	ldr	r3, [r3, #0]
 800f092:	f042 0208 	orr.w	r2, r2, #8
 800f096:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	681b      	ldr	r3, [r3, #0]
 800f0a2:	f022 0204 	bic.w	r2, r2, #4
 800f0a6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800f0a8:	68fb      	ldr	r3, [r7, #12]
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f0ae:	68bb      	ldr	r3, [r7, #8]
 800f0b0:	691a      	ldr	r2, [r3, #16]
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	430a      	orrs	r2, r1
 800f0b8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f0ba:	e032      	b.n	800f122 <HAL_TIM_PWM_ConfigChannel+0x446>

#if defined(TIM_CCER_CC6E)
    case TIM_CHANNEL_6:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 800f0bc:	68fb      	ldr	r3, [r7, #12]
 800f0be:	681b      	ldr	r3, [r3, #0]
 800f0c0:	4a1c      	ldr	r2, [pc, #112]	; (800f134 <HAL_TIM_PWM_ConfigChannel+0x458>)
 800f0c2:	4293      	cmp	r3, r2
 800f0c4:	d009      	beq.n	800f0da <HAL_TIM_PWM_ConfigChannel+0x3fe>
 800f0c6:	68fb      	ldr	r3, [r7, #12]
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	4a1d      	ldr	r2, [pc, #116]	; (800f140 <HAL_TIM_PWM_ConfigChannel+0x464>)
 800f0cc:	4293      	cmp	r3, r2
 800f0ce:	d004      	beq.n	800f0da <HAL_TIM_PWM_ConfigChannel+0x3fe>
 800f0d0:	f241 111c 	movw	r1, #4380	; 0x111c
 800f0d4:	481b      	ldr	r0, [pc, #108]	; (800f144 <HAL_TIM_PWM_ConfigChannel+0x468>)
 800f0d6:	f7f6 fd5c 	bl	8005b92 <assert_failed>

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800f0da:	68fb      	ldr	r3, [r7, #12]
 800f0dc:	681b      	ldr	r3, [r3, #0]
 800f0de:	68b9      	ldr	r1, [r7, #8]
 800f0e0:	4618      	mov	r0, r3
 800f0e2:	f000 fed7 	bl	800fe94 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	681b      	ldr	r3, [r3, #0]
 800f0ea:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f0ec:	68fb      	ldr	r3, [r7, #12]
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f0f4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f0fc:	68fb      	ldr	r3, [r7, #12]
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f104:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f10c:	68bb      	ldr	r3, [r7, #8]
 800f10e:	691b      	ldr	r3, [r3, #16]
 800f110:	021a      	lsls	r2, r3, #8
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	430a      	orrs	r2, r1
 800f118:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f11a:	e002      	b.n	800f122 <HAL_TIM_PWM_ConfigChannel+0x446>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800f11c:	2301      	movs	r3, #1
 800f11e:	75fb      	strb	r3, [r7, #23]
      break;
 800f120:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	2200      	movs	r2, #0
 800f126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f12a:	7dfb      	ldrb	r3, [r7, #23]
}
 800f12c:	4618      	mov	r0, r3
 800f12e:	3718      	adds	r7, #24
 800f130:	46bd      	mov	sp, r7
 800f132:	bd80      	pop	{r7, pc}
 800f134:	40012c00 	.word	0x40012c00
 800f138:	40000400 	.word	0x40000400
 800f13c:	40000800 	.word	0x40000800
 800f140:	40013400 	.word	0x40013400
 800f144:	080344b0 	.word	0x080344b0

0800f148 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f148:	b580      	push	{r7, lr}
 800f14a:	b084      	sub	sp, #16
 800f14c:	af00      	add	r7, sp, #0
 800f14e:	6078      	str	r0, [r7, #4]
 800f150:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f152:	2300      	movs	r3, #0
 800f154:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f15c:	2b01      	cmp	r3, #1
 800f15e:	d101      	bne.n	800f164 <HAL_TIM_ConfigClockSource+0x1c>
 800f160:	2302      	movs	r3, #2
 800f162:	e2fc      	b.n	800f75e <HAL_TIM_ConfigClockSource+0x616>
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	2201      	movs	r2, #1
 800f168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	2202      	movs	r2, #2
 800f170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800f174:	683b      	ldr	r3, [r7, #0]
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f17c:	d029      	beq.n	800f1d2 <HAL_TIM_ConfigClockSource+0x8a>
 800f17e:	683b      	ldr	r3, [r7, #0]
 800f180:	681b      	ldr	r3, [r3, #0]
 800f182:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f186:	d024      	beq.n	800f1d2 <HAL_TIM_ConfigClockSource+0x8a>
 800f188:	683b      	ldr	r3, [r7, #0]
 800f18a:	681b      	ldr	r3, [r3, #0]
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d020      	beq.n	800f1d2 <HAL_TIM_ConfigClockSource+0x8a>
 800f190:	683b      	ldr	r3, [r7, #0]
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	2b10      	cmp	r3, #16
 800f196:	d01c      	beq.n	800f1d2 <HAL_TIM_ConfigClockSource+0x8a>
 800f198:	683b      	ldr	r3, [r7, #0]
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	2b20      	cmp	r3, #32
 800f19e:	d018      	beq.n	800f1d2 <HAL_TIM_ConfigClockSource+0x8a>
 800f1a0:	683b      	ldr	r3, [r7, #0]
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	2b30      	cmp	r3, #48	; 0x30
 800f1a6:	d014      	beq.n	800f1d2 <HAL_TIM_ConfigClockSource+0x8a>
 800f1a8:	683b      	ldr	r3, [r7, #0]
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	2b40      	cmp	r3, #64	; 0x40
 800f1ae:	d010      	beq.n	800f1d2 <HAL_TIM_ConfigClockSource+0x8a>
 800f1b0:	683b      	ldr	r3, [r7, #0]
 800f1b2:	681b      	ldr	r3, [r3, #0]
 800f1b4:	2b50      	cmp	r3, #80	; 0x50
 800f1b6:	d00c      	beq.n	800f1d2 <HAL_TIM_ConfigClockSource+0x8a>
 800f1b8:	683b      	ldr	r3, [r7, #0]
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	2b60      	cmp	r3, #96	; 0x60
 800f1be:	d008      	beq.n	800f1d2 <HAL_TIM_ConfigClockSource+0x8a>
 800f1c0:	683b      	ldr	r3, [r7, #0]
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	2b70      	cmp	r3, #112	; 0x70
 800f1c6:	d004      	beq.n	800f1d2 <HAL_TIM_ConfigClockSource+0x8a>
 800f1c8:	f241 516a 	movw	r1, #5482	; 0x156a
 800f1cc:	4880      	ldr	r0, [pc, #512]	; (800f3d0 <HAL_TIM_ConfigClockSource+0x288>)
 800f1ce:	f7f6 fce0 	bl	8005b92 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	689b      	ldr	r3, [r3, #8]
 800f1d8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f1da:	68bb      	ldr	r3, [r7, #8]
 800f1dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f1e0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800f1e4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f1e6:	68bb      	ldr	r3, [r7, #8]
 800f1e8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f1ec:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	68ba      	ldr	r2, [r7, #8]
 800f1f4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f1f6:	683b      	ldr	r3, [r7, #0]
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f1fe:	f000 80fb 	beq.w	800f3f8 <HAL_TIM_ConfigClockSource+0x2b0>
 800f202:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f206:	f200 829d 	bhi.w	800f744 <HAL_TIM_ConfigClockSource+0x5fc>
 800f20a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f20e:	d02d      	beq.n	800f26c <HAL_TIM_ConfigClockSource+0x124>
 800f210:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f214:	f200 8296 	bhi.w	800f744 <HAL_TIM_ConfigClockSource+0x5fc>
 800f218:	2b70      	cmp	r3, #112	; 0x70
 800f21a:	d069      	beq.n	800f2f0 <HAL_TIM_ConfigClockSource+0x1a8>
 800f21c:	2b70      	cmp	r3, #112	; 0x70
 800f21e:	f200 8291 	bhi.w	800f744 <HAL_TIM_ConfigClockSource+0x5fc>
 800f222:	2b60      	cmp	r3, #96	; 0x60
 800f224:	f000 81aa 	beq.w	800f57c <HAL_TIM_ConfigClockSource+0x434>
 800f228:	2b60      	cmp	r3, #96	; 0x60
 800f22a:	f200 828b 	bhi.w	800f744 <HAL_TIM_ConfigClockSource+0x5fc>
 800f22e:	2b50      	cmp	r3, #80	; 0x50
 800f230:	f000 814e 	beq.w	800f4d0 <HAL_TIM_ConfigClockSource+0x388>
 800f234:	2b50      	cmp	r3, #80	; 0x50
 800f236:	f200 8285 	bhi.w	800f744 <HAL_TIM_ConfigClockSource+0x5fc>
 800f23a:	2b40      	cmp	r3, #64	; 0x40
 800f23c:	f000 8200 	beq.w	800f640 <HAL_TIM_ConfigClockSource+0x4f8>
 800f240:	2b40      	cmp	r3, #64	; 0x40
 800f242:	f200 827f 	bhi.w	800f744 <HAL_TIM_ConfigClockSource+0x5fc>
 800f246:	2b30      	cmp	r3, #48	; 0x30
 800f248:	f000 8250 	beq.w	800f6ec <HAL_TIM_ConfigClockSource+0x5a4>
 800f24c:	2b30      	cmp	r3, #48	; 0x30
 800f24e:	f200 8279 	bhi.w	800f744 <HAL_TIM_ConfigClockSource+0x5fc>
 800f252:	2b20      	cmp	r3, #32
 800f254:	f000 824a 	beq.w	800f6ec <HAL_TIM_ConfigClockSource+0x5a4>
 800f258:	2b20      	cmp	r3, #32
 800f25a:	f200 8273 	bhi.w	800f744 <HAL_TIM_ConfigClockSource+0x5fc>
 800f25e:	2b00      	cmp	r3, #0
 800f260:	f000 8244 	beq.w	800f6ec <HAL_TIM_ConfigClockSource+0x5a4>
 800f264:	2b10      	cmp	r3, #16
 800f266:	f000 8241 	beq.w	800f6ec <HAL_TIM_ConfigClockSource+0x5a4>
 800f26a:	e26b      	b.n	800f744 <HAL_TIM_ConfigClockSource+0x5fc>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	4a58      	ldr	r2, [pc, #352]	; (800f3d4 <HAL_TIM_ConfigClockSource+0x28c>)
 800f272:	4293      	cmp	r3, r2
 800f274:	f000 8269 	beq.w	800f74a <HAL_TIM_ConfigClockSource+0x602>
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f280:	f000 8263 	beq.w	800f74a <HAL_TIM_ConfigClockSource+0x602>
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	4a53      	ldr	r2, [pc, #332]	; (800f3d8 <HAL_TIM_ConfigClockSource+0x290>)
 800f28a:	4293      	cmp	r3, r2
 800f28c:	f000 825d 	beq.w	800f74a <HAL_TIM_ConfigClockSource+0x602>
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	681b      	ldr	r3, [r3, #0]
 800f294:	4a51      	ldr	r2, [pc, #324]	; (800f3dc <HAL_TIM_ConfigClockSource+0x294>)
 800f296:	4293      	cmp	r3, r2
 800f298:	f000 8257 	beq.w	800f74a <HAL_TIM_ConfigClockSource+0x602>
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	4a4f      	ldr	r2, [pc, #316]	; (800f3e0 <HAL_TIM_ConfigClockSource+0x298>)
 800f2a2:	4293      	cmp	r3, r2
 800f2a4:	f000 8251 	beq.w	800f74a <HAL_TIM_ConfigClockSource+0x602>
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	4a4d      	ldr	r2, [pc, #308]	; (800f3e4 <HAL_TIM_ConfigClockSource+0x29c>)
 800f2ae:	4293      	cmp	r3, r2
 800f2b0:	f000 824b 	beq.w	800f74a <HAL_TIM_ConfigClockSource+0x602>
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	681b      	ldr	r3, [r3, #0]
 800f2b8:	4a4b      	ldr	r2, [pc, #300]	; (800f3e8 <HAL_TIM_ConfigClockSource+0x2a0>)
 800f2ba:	4293      	cmp	r3, r2
 800f2bc:	f000 8245 	beq.w	800f74a <HAL_TIM_ConfigClockSource+0x602>
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	4a49      	ldr	r2, [pc, #292]	; (800f3ec <HAL_TIM_ConfigClockSource+0x2a4>)
 800f2c6:	4293      	cmp	r3, r2
 800f2c8:	f000 823f 	beq.w	800f74a <HAL_TIM_ConfigClockSource+0x602>
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	681b      	ldr	r3, [r3, #0]
 800f2d0:	4a47      	ldr	r2, [pc, #284]	; (800f3f0 <HAL_TIM_ConfigClockSource+0x2a8>)
 800f2d2:	4293      	cmp	r3, r2
 800f2d4:	f000 8239 	beq.w	800f74a <HAL_TIM_ConfigClockSource+0x602>
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	681b      	ldr	r3, [r3, #0]
 800f2dc:	4a45      	ldr	r2, [pc, #276]	; (800f3f4 <HAL_TIM_ConfigClockSource+0x2ac>)
 800f2de:	4293      	cmp	r3, r2
 800f2e0:	f000 8233 	beq.w	800f74a <HAL_TIM_ConfigClockSource+0x602>
 800f2e4:	f241 5176 	movw	r1, #5494	; 0x1576
 800f2e8:	4839      	ldr	r0, [pc, #228]	; (800f3d0 <HAL_TIM_ConfigClockSource+0x288>)
 800f2ea:	f7f6 fc52 	bl	8005b92 <assert_failed>
      break;
 800f2ee:	e22c      	b.n	800f74a <HAL_TIM_ConfigClockSource+0x602>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	4a37      	ldr	r2, [pc, #220]	; (800f3d4 <HAL_TIM_ConfigClockSource+0x28c>)
 800f2f6:	4293      	cmp	r3, r2
 800f2f8:	d018      	beq.n	800f32c <HAL_TIM_ConfigClockSource+0x1e4>
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	681b      	ldr	r3, [r3, #0]
 800f2fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f302:	d013      	beq.n	800f32c <HAL_TIM_ConfigClockSource+0x1e4>
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	4a33      	ldr	r2, [pc, #204]	; (800f3d8 <HAL_TIM_ConfigClockSource+0x290>)
 800f30a:	4293      	cmp	r3, r2
 800f30c:	d00e      	beq.n	800f32c <HAL_TIM_ConfigClockSource+0x1e4>
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	4a32      	ldr	r2, [pc, #200]	; (800f3dc <HAL_TIM_ConfigClockSource+0x294>)
 800f314:	4293      	cmp	r3, r2
 800f316:	d009      	beq.n	800f32c <HAL_TIM_ConfigClockSource+0x1e4>
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	4a32      	ldr	r2, [pc, #200]	; (800f3e8 <HAL_TIM_ConfigClockSource+0x2a0>)
 800f31e:	4293      	cmp	r3, r2
 800f320:	d004      	beq.n	800f32c <HAL_TIM_ConfigClockSource+0x1e4>
 800f322:	f241 517d 	movw	r1, #5501	; 0x157d
 800f326:	482a      	ldr	r0, [pc, #168]	; (800f3d0 <HAL_TIM_ConfigClockSource+0x288>)
 800f328:	f7f6 fc33 	bl	8005b92 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800f32c:	683b      	ldr	r3, [r7, #0]
 800f32e:	689b      	ldr	r3, [r3, #8]
 800f330:	2b00      	cmp	r3, #0
 800f332:	d013      	beq.n	800f35c <HAL_TIM_ConfigClockSource+0x214>
 800f334:	683b      	ldr	r3, [r7, #0]
 800f336:	689b      	ldr	r3, [r3, #8]
 800f338:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f33c:	d00e      	beq.n	800f35c <HAL_TIM_ConfigClockSource+0x214>
 800f33e:	683b      	ldr	r3, [r7, #0]
 800f340:	689b      	ldr	r3, [r3, #8]
 800f342:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f346:	d009      	beq.n	800f35c <HAL_TIM_ConfigClockSource+0x214>
 800f348:	683b      	ldr	r3, [r7, #0]
 800f34a:	689b      	ldr	r3, [r3, #8]
 800f34c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800f350:	d004      	beq.n	800f35c <HAL_TIM_ConfigClockSource+0x214>
 800f352:	f44f 51ac 	mov.w	r1, #5504	; 0x1580
 800f356:	481e      	ldr	r0, [pc, #120]	; (800f3d0 <HAL_TIM_ConfigClockSource+0x288>)
 800f358:	f7f6 fc1b 	bl	8005b92 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800f35c:	683b      	ldr	r3, [r7, #0]
 800f35e:	685b      	ldr	r3, [r3, #4]
 800f360:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f364:	d014      	beq.n	800f390 <HAL_TIM_ConfigClockSource+0x248>
 800f366:	683b      	ldr	r3, [r7, #0]
 800f368:	685b      	ldr	r3, [r3, #4]
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d010      	beq.n	800f390 <HAL_TIM_ConfigClockSource+0x248>
 800f36e:	683b      	ldr	r3, [r7, #0]
 800f370:	685b      	ldr	r3, [r3, #4]
 800f372:	2b00      	cmp	r3, #0
 800f374:	d00c      	beq.n	800f390 <HAL_TIM_ConfigClockSource+0x248>
 800f376:	683b      	ldr	r3, [r7, #0]
 800f378:	685b      	ldr	r3, [r3, #4]
 800f37a:	2b02      	cmp	r3, #2
 800f37c:	d008      	beq.n	800f390 <HAL_TIM_ConfigClockSource+0x248>
 800f37e:	683b      	ldr	r3, [r7, #0]
 800f380:	685b      	ldr	r3, [r3, #4]
 800f382:	2b0a      	cmp	r3, #10
 800f384:	d004      	beq.n	800f390 <HAL_TIM_ConfigClockSource+0x248>
 800f386:	f241 5181 	movw	r1, #5505	; 0x1581
 800f38a:	4811      	ldr	r0, [pc, #68]	; (800f3d0 <HAL_TIM_ConfigClockSource+0x288>)
 800f38c:	f7f6 fc01 	bl	8005b92 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800f390:	683b      	ldr	r3, [r7, #0]
 800f392:	68db      	ldr	r3, [r3, #12]
 800f394:	2b0f      	cmp	r3, #15
 800f396:	d904      	bls.n	800f3a2 <HAL_TIM_ConfigClockSource+0x25a>
 800f398:	f241 5182 	movw	r1, #5506	; 0x1582
 800f39c:	480c      	ldr	r0, [pc, #48]	; (800f3d0 <HAL_TIM_ConfigClockSource+0x288>)
 800f39e:	f7f6 fbf8 	bl	8005b92 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	6818      	ldr	r0, [r3, #0]
 800f3a6:	683b      	ldr	r3, [r7, #0]
 800f3a8:	6899      	ldr	r1, [r3, #8]
 800f3aa:	683b      	ldr	r3, [r7, #0]
 800f3ac:	685a      	ldr	r2, [r3, #4]
 800f3ae:	683b      	ldr	r3, [r7, #0]
 800f3b0:	68db      	ldr	r3, [r3, #12]
 800f3b2:	f000 fe4f 	bl	8010054 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	689b      	ldr	r3, [r3, #8]
 800f3bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f3be:	68bb      	ldr	r3, [r7, #8]
 800f3c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800f3c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	681b      	ldr	r3, [r3, #0]
 800f3ca:	68ba      	ldr	r2, [r7, #8]
 800f3cc:	609a      	str	r2, [r3, #8]
      break;
 800f3ce:	e1bd      	b.n	800f74c <HAL_TIM_ConfigClockSource+0x604>
 800f3d0:	080344b0 	.word	0x080344b0
 800f3d4:	40012c00 	.word	0x40012c00
 800f3d8:	40000400 	.word	0x40000400
 800f3dc:	40000800 	.word	0x40000800
 800f3e0:	40001000 	.word	0x40001000
 800f3e4:	40001400 	.word	0x40001400
 800f3e8:	40013400 	.word	0x40013400
 800f3ec:	40014000 	.word	0x40014000
 800f3f0:	40014400 	.word	0x40014400
 800f3f4:	40014800 	.word	0x40014800
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	4a8a      	ldr	r2, [pc, #552]	; (800f628 <HAL_TIM_ConfigClockSource+0x4e0>)
 800f3fe:	4293      	cmp	r3, r2
 800f400:	d018      	beq.n	800f434 <HAL_TIM_ConfigClockSource+0x2ec>
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f40a:	d013      	beq.n	800f434 <HAL_TIM_ConfigClockSource+0x2ec>
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	681b      	ldr	r3, [r3, #0]
 800f410:	4a86      	ldr	r2, [pc, #536]	; (800f62c <HAL_TIM_ConfigClockSource+0x4e4>)
 800f412:	4293      	cmp	r3, r2
 800f414:	d00e      	beq.n	800f434 <HAL_TIM_ConfigClockSource+0x2ec>
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	4a85      	ldr	r2, [pc, #532]	; (800f630 <HAL_TIM_ConfigClockSource+0x4e8>)
 800f41c:	4293      	cmp	r3, r2
 800f41e:	d009      	beq.n	800f434 <HAL_TIM_ConfigClockSource+0x2ec>
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	681b      	ldr	r3, [r3, #0]
 800f424:	4a83      	ldr	r2, [pc, #524]	; (800f634 <HAL_TIM_ConfigClockSource+0x4ec>)
 800f426:	4293      	cmp	r3, r2
 800f428:	d004      	beq.n	800f434 <HAL_TIM_ConfigClockSource+0x2ec>
 800f42a:	f241 5195 	movw	r1, #5525	; 0x1595
 800f42e:	4882      	ldr	r0, [pc, #520]	; (800f638 <HAL_TIM_ConfigClockSource+0x4f0>)
 800f430:	f7f6 fbaf 	bl	8005b92 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800f434:	683b      	ldr	r3, [r7, #0]
 800f436:	689b      	ldr	r3, [r3, #8]
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d013      	beq.n	800f464 <HAL_TIM_ConfigClockSource+0x31c>
 800f43c:	683b      	ldr	r3, [r7, #0]
 800f43e:	689b      	ldr	r3, [r3, #8]
 800f440:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f444:	d00e      	beq.n	800f464 <HAL_TIM_ConfigClockSource+0x31c>
 800f446:	683b      	ldr	r3, [r7, #0]
 800f448:	689b      	ldr	r3, [r3, #8]
 800f44a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f44e:	d009      	beq.n	800f464 <HAL_TIM_ConfigClockSource+0x31c>
 800f450:	683b      	ldr	r3, [r7, #0]
 800f452:	689b      	ldr	r3, [r3, #8]
 800f454:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800f458:	d004      	beq.n	800f464 <HAL_TIM_ConfigClockSource+0x31c>
 800f45a:	f241 5198 	movw	r1, #5528	; 0x1598
 800f45e:	4876      	ldr	r0, [pc, #472]	; (800f638 <HAL_TIM_ConfigClockSource+0x4f0>)
 800f460:	f7f6 fb97 	bl	8005b92 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800f464:	683b      	ldr	r3, [r7, #0]
 800f466:	685b      	ldr	r3, [r3, #4]
 800f468:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f46c:	d014      	beq.n	800f498 <HAL_TIM_ConfigClockSource+0x350>
 800f46e:	683b      	ldr	r3, [r7, #0]
 800f470:	685b      	ldr	r3, [r3, #4]
 800f472:	2b00      	cmp	r3, #0
 800f474:	d010      	beq.n	800f498 <HAL_TIM_ConfigClockSource+0x350>
 800f476:	683b      	ldr	r3, [r7, #0]
 800f478:	685b      	ldr	r3, [r3, #4]
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d00c      	beq.n	800f498 <HAL_TIM_ConfigClockSource+0x350>
 800f47e:	683b      	ldr	r3, [r7, #0]
 800f480:	685b      	ldr	r3, [r3, #4]
 800f482:	2b02      	cmp	r3, #2
 800f484:	d008      	beq.n	800f498 <HAL_TIM_ConfigClockSource+0x350>
 800f486:	683b      	ldr	r3, [r7, #0]
 800f488:	685b      	ldr	r3, [r3, #4]
 800f48a:	2b0a      	cmp	r3, #10
 800f48c:	d004      	beq.n	800f498 <HAL_TIM_ConfigClockSource+0x350>
 800f48e:	f241 5199 	movw	r1, #5529	; 0x1599
 800f492:	4869      	ldr	r0, [pc, #420]	; (800f638 <HAL_TIM_ConfigClockSource+0x4f0>)
 800f494:	f7f6 fb7d 	bl	8005b92 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800f498:	683b      	ldr	r3, [r7, #0]
 800f49a:	68db      	ldr	r3, [r3, #12]
 800f49c:	2b0f      	cmp	r3, #15
 800f49e:	d904      	bls.n	800f4aa <HAL_TIM_ConfigClockSource+0x362>
 800f4a0:	f241 519a 	movw	r1, #5530	; 0x159a
 800f4a4:	4864      	ldr	r0, [pc, #400]	; (800f638 <HAL_TIM_ConfigClockSource+0x4f0>)
 800f4a6:	f7f6 fb74 	bl	8005b92 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	6818      	ldr	r0, [r3, #0]
 800f4ae:	683b      	ldr	r3, [r7, #0]
 800f4b0:	6899      	ldr	r1, [r3, #8]
 800f4b2:	683b      	ldr	r3, [r7, #0]
 800f4b4:	685a      	ldr	r2, [r3, #4]
 800f4b6:	683b      	ldr	r3, [r7, #0]
 800f4b8:	68db      	ldr	r3, [r3, #12]
 800f4ba:	f000 fdcb 	bl	8010054 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	681b      	ldr	r3, [r3, #0]
 800f4c2:	689a      	ldr	r2, [r3, #8]
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800f4cc:	609a      	str	r2, [r3, #8]
      break;
 800f4ce:	e13d      	b.n	800f74c <HAL_TIM_ConfigClockSource+0x604>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	681b      	ldr	r3, [r3, #0]
 800f4d4:	4a54      	ldr	r2, [pc, #336]	; (800f628 <HAL_TIM_ConfigClockSource+0x4e0>)
 800f4d6:	4293      	cmp	r3, r2
 800f4d8:	d01d      	beq.n	800f516 <HAL_TIM_ConfigClockSource+0x3ce>
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f4e2:	d018      	beq.n	800f516 <HAL_TIM_ConfigClockSource+0x3ce>
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	681b      	ldr	r3, [r3, #0]
 800f4e8:	4a50      	ldr	r2, [pc, #320]	; (800f62c <HAL_TIM_ConfigClockSource+0x4e4>)
 800f4ea:	4293      	cmp	r3, r2
 800f4ec:	d013      	beq.n	800f516 <HAL_TIM_ConfigClockSource+0x3ce>
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	4a4f      	ldr	r2, [pc, #316]	; (800f630 <HAL_TIM_ConfigClockSource+0x4e8>)
 800f4f4:	4293      	cmp	r3, r2
 800f4f6:	d00e      	beq.n	800f516 <HAL_TIM_ConfigClockSource+0x3ce>
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	4a4d      	ldr	r2, [pc, #308]	; (800f634 <HAL_TIM_ConfigClockSource+0x4ec>)
 800f4fe:	4293      	cmp	r3, r2
 800f500:	d009      	beq.n	800f516 <HAL_TIM_ConfigClockSource+0x3ce>
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	4a4d      	ldr	r2, [pc, #308]	; (800f63c <HAL_TIM_ConfigClockSource+0x4f4>)
 800f508:	4293      	cmp	r3, r2
 800f50a:	d004      	beq.n	800f516 <HAL_TIM_ConfigClockSource+0x3ce>
 800f50c:	f241 51a9 	movw	r1, #5545	; 0x15a9
 800f510:	4849      	ldr	r0, [pc, #292]	; (800f638 <HAL_TIM_ConfigClockSource+0x4f0>)
 800f512:	f7f6 fb3e 	bl	8005b92 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800f516:	683b      	ldr	r3, [r7, #0]
 800f518:	685b      	ldr	r3, [r3, #4]
 800f51a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f51e:	d014      	beq.n	800f54a <HAL_TIM_ConfigClockSource+0x402>
 800f520:	683b      	ldr	r3, [r7, #0]
 800f522:	685b      	ldr	r3, [r3, #4]
 800f524:	2b00      	cmp	r3, #0
 800f526:	d010      	beq.n	800f54a <HAL_TIM_ConfigClockSource+0x402>
 800f528:	683b      	ldr	r3, [r7, #0]
 800f52a:	685b      	ldr	r3, [r3, #4]
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d00c      	beq.n	800f54a <HAL_TIM_ConfigClockSource+0x402>
 800f530:	683b      	ldr	r3, [r7, #0]
 800f532:	685b      	ldr	r3, [r3, #4]
 800f534:	2b02      	cmp	r3, #2
 800f536:	d008      	beq.n	800f54a <HAL_TIM_ConfigClockSource+0x402>
 800f538:	683b      	ldr	r3, [r7, #0]
 800f53a:	685b      	ldr	r3, [r3, #4]
 800f53c:	2b0a      	cmp	r3, #10
 800f53e:	d004      	beq.n	800f54a <HAL_TIM_ConfigClockSource+0x402>
 800f540:	f241 51ac 	movw	r1, #5548	; 0x15ac
 800f544:	483c      	ldr	r0, [pc, #240]	; (800f638 <HAL_TIM_ConfigClockSource+0x4f0>)
 800f546:	f7f6 fb24 	bl	8005b92 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800f54a:	683b      	ldr	r3, [r7, #0]
 800f54c:	68db      	ldr	r3, [r3, #12]
 800f54e:	2b0f      	cmp	r3, #15
 800f550:	d904      	bls.n	800f55c <HAL_TIM_ConfigClockSource+0x414>
 800f552:	f241 51ad 	movw	r1, #5549	; 0x15ad
 800f556:	4838      	ldr	r0, [pc, #224]	; (800f638 <HAL_TIM_ConfigClockSource+0x4f0>)
 800f558:	f7f6 fb1b 	bl	8005b92 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	6818      	ldr	r0, [r3, #0]
 800f560:	683b      	ldr	r3, [r7, #0]
 800f562:	6859      	ldr	r1, [r3, #4]
 800f564:	683b      	ldr	r3, [r7, #0]
 800f566:	68db      	ldr	r3, [r3, #12]
 800f568:	461a      	mov	r2, r3
 800f56a:	f000 fcf9 	bl	800ff60 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	681b      	ldr	r3, [r3, #0]
 800f572:	2150      	movs	r1, #80	; 0x50
 800f574:	4618      	mov	r0, r3
 800f576:	f000 fd52 	bl	801001e <TIM_ITRx_SetConfig>
      break;
 800f57a:	e0e7      	b.n	800f74c <HAL_TIM_ConfigClockSource+0x604>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	4a29      	ldr	r2, [pc, #164]	; (800f628 <HAL_TIM_ConfigClockSource+0x4e0>)
 800f582:	4293      	cmp	r3, r2
 800f584:	d01d      	beq.n	800f5c2 <HAL_TIM_ConfigClockSource+0x47a>
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f58e:	d018      	beq.n	800f5c2 <HAL_TIM_ConfigClockSource+0x47a>
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	681b      	ldr	r3, [r3, #0]
 800f594:	4a25      	ldr	r2, [pc, #148]	; (800f62c <HAL_TIM_ConfigClockSource+0x4e4>)
 800f596:	4293      	cmp	r3, r2
 800f598:	d013      	beq.n	800f5c2 <HAL_TIM_ConfigClockSource+0x47a>
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	681b      	ldr	r3, [r3, #0]
 800f59e:	4a24      	ldr	r2, [pc, #144]	; (800f630 <HAL_TIM_ConfigClockSource+0x4e8>)
 800f5a0:	4293      	cmp	r3, r2
 800f5a2:	d00e      	beq.n	800f5c2 <HAL_TIM_ConfigClockSource+0x47a>
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	681b      	ldr	r3, [r3, #0]
 800f5a8:	4a22      	ldr	r2, [pc, #136]	; (800f634 <HAL_TIM_ConfigClockSource+0x4ec>)
 800f5aa:	4293      	cmp	r3, r2
 800f5ac:	d009      	beq.n	800f5c2 <HAL_TIM_ConfigClockSource+0x47a>
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	681b      	ldr	r3, [r3, #0]
 800f5b2:	4a22      	ldr	r2, [pc, #136]	; (800f63c <HAL_TIM_ConfigClockSource+0x4f4>)
 800f5b4:	4293      	cmp	r3, r2
 800f5b6:	d004      	beq.n	800f5c2 <HAL_TIM_ConfigClockSource+0x47a>
 800f5b8:	f241 51b9 	movw	r1, #5561	; 0x15b9
 800f5bc:	481e      	ldr	r0, [pc, #120]	; (800f638 <HAL_TIM_ConfigClockSource+0x4f0>)
 800f5be:	f7f6 fae8 	bl	8005b92 <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800f5c2:	683b      	ldr	r3, [r7, #0]
 800f5c4:	685b      	ldr	r3, [r3, #4]
 800f5c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f5ca:	d014      	beq.n	800f5f6 <HAL_TIM_ConfigClockSource+0x4ae>
 800f5cc:	683b      	ldr	r3, [r7, #0]
 800f5ce:	685b      	ldr	r3, [r3, #4]
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d010      	beq.n	800f5f6 <HAL_TIM_ConfigClockSource+0x4ae>
 800f5d4:	683b      	ldr	r3, [r7, #0]
 800f5d6:	685b      	ldr	r3, [r3, #4]
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	d00c      	beq.n	800f5f6 <HAL_TIM_ConfigClockSource+0x4ae>
 800f5dc:	683b      	ldr	r3, [r7, #0]
 800f5de:	685b      	ldr	r3, [r3, #4]
 800f5e0:	2b02      	cmp	r3, #2
 800f5e2:	d008      	beq.n	800f5f6 <HAL_TIM_ConfigClockSource+0x4ae>
 800f5e4:	683b      	ldr	r3, [r7, #0]
 800f5e6:	685b      	ldr	r3, [r3, #4]
 800f5e8:	2b0a      	cmp	r3, #10
 800f5ea:	d004      	beq.n	800f5f6 <HAL_TIM_ConfigClockSource+0x4ae>
 800f5ec:	f241 51bc 	movw	r1, #5564	; 0x15bc
 800f5f0:	4811      	ldr	r0, [pc, #68]	; (800f638 <HAL_TIM_ConfigClockSource+0x4f0>)
 800f5f2:	f7f6 face 	bl	8005b92 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800f5f6:	683b      	ldr	r3, [r7, #0]
 800f5f8:	68db      	ldr	r3, [r3, #12]
 800f5fa:	2b0f      	cmp	r3, #15
 800f5fc:	d904      	bls.n	800f608 <HAL_TIM_ConfigClockSource+0x4c0>
 800f5fe:	f241 51bd 	movw	r1, #5565	; 0x15bd
 800f602:	480d      	ldr	r0, [pc, #52]	; (800f638 <HAL_TIM_ConfigClockSource+0x4f0>)
 800f604:	f7f6 fac5 	bl	8005b92 <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	6818      	ldr	r0, [r3, #0]
 800f60c:	683b      	ldr	r3, [r7, #0]
 800f60e:	6859      	ldr	r1, [r3, #4]
 800f610:	683b      	ldr	r3, [r7, #0]
 800f612:	68db      	ldr	r3, [r3, #12]
 800f614:	461a      	mov	r2, r3
 800f616:	f000 fcd2 	bl	800ffbe <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	681b      	ldr	r3, [r3, #0]
 800f61e:	2160      	movs	r1, #96	; 0x60
 800f620:	4618      	mov	r0, r3
 800f622:	f000 fcfc 	bl	801001e <TIM_ITRx_SetConfig>
      break;
 800f626:	e091      	b.n	800f74c <HAL_TIM_ConfigClockSource+0x604>
 800f628:	40012c00 	.word	0x40012c00
 800f62c:	40000400 	.word	0x40000400
 800f630:	40000800 	.word	0x40000800
 800f634:	40013400 	.word	0x40013400
 800f638:	080344b0 	.word	0x080344b0
 800f63c:	40014000 	.word	0x40014000
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	4a48      	ldr	r2, [pc, #288]	; (800f768 <HAL_TIM_ConfigClockSource+0x620>)
 800f646:	4293      	cmp	r3, r2
 800f648:	d01d      	beq.n	800f686 <HAL_TIM_ConfigClockSource+0x53e>
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	681b      	ldr	r3, [r3, #0]
 800f64e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f652:	d018      	beq.n	800f686 <HAL_TIM_ConfigClockSource+0x53e>
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	4a44      	ldr	r2, [pc, #272]	; (800f76c <HAL_TIM_ConfigClockSource+0x624>)
 800f65a:	4293      	cmp	r3, r2
 800f65c:	d013      	beq.n	800f686 <HAL_TIM_ConfigClockSource+0x53e>
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	681b      	ldr	r3, [r3, #0]
 800f662:	4a43      	ldr	r2, [pc, #268]	; (800f770 <HAL_TIM_ConfigClockSource+0x628>)
 800f664:	4293      	cmp	r3, r2
 800f666:	d00e      	beq.n	800f686 <HAL_TIM_ConfigClockSource+0x53e>
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	681b      	ldr	r3, [r3, #0]
 800f66c:	4a41      	ldr	r2, [pc, #260]	; (800f774 <HAL_TIM_ConfigClockSource+0x62c>)
 800f66e:	4293      	cmp	r3, r2
 800f670:	d009      	beq.n	800f686 <HAL_TIM_ConfigClockSource+0x53e>
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	681b      	ldr	r3, [r3, #0]
 800f676:	4a40      	ldr	r2, [pc, #256]	; (800f778 <HAL_TIM_ConfigClockSource+0x630>)
 800f678:	4293      	cmp	r3, r2
 800f67a:	d004      	beq.n	800f686 <HAL_TIM_ConfigClockSource+0x53e>
 800f67c:	f241 51c9 	movw	r1, #5577	; 0x15c9
 800f680:	483e      	ldr	r0, [pc, #248]	; (800f77c <HAL_TIM_ConfigClockSource+0x634>)
 800f682:	f7f6 fa86 	bl	8005b92 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800f686:	683b      	ldr	r3, [r7, #0]
 800f688:	685b      	ldr	r3, [r3, #4]
 800f68a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f68e:	d014      	beq.n	800f6ba <HAL_TIM_ConfigClockSource+0x572>
 800f690:	683b      	ldr	r3, [r7, #0]
 800f692:	685b      	ldr	r3, [r3, #4]
 800f694:	2b00      	cmp	r3, #0
 800f696:	d010      	beq.n	800f6ba <HAL_TIM_ConfigClockSource+0x572>
 800f698:	683b      	ldr	r3, [r7, #0]
 800f69a:	685b      	ldr	r3, [r3, #4]
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d00c      	beq.n	800f6ba <HAL_TIM_ConfigClockSource+0x572>
 800f6a0:	683b      	ldr	r3, [r7, #0]
 800f6a2:	685b      	ldr	r3, [r3, #4]
 800f6a4:	2b02      	cmp	r3, #2
 800f6a6:	d008      	beq.n	800f6ba <HAL_TIM_ConfigClockSource+0x572>
 800f6a8:	683b      	ldr	r3, [r7, #0]
 800f6aa:	685b      	ldr	r3, [r3, #4]
 800f6ac:	2b0a      	cmp	r3, #10
 800f6ae:	d004      	beq.n	800f6ba <HAL_TIM_ConfigClockSource+0x572>
 800f6b0:	f241 51cc 	movw	r1, #5580	; 0x15cc
 800f6b4:	4831      	ldr	r0, [pc, #196]	; (800f77c <HAL_TIM_ConfigClockSource+0x634>)
 800f6b6:	f7f6 fa6c 	bl	8005b92 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800f6ba:	683b      	ldr	r3, [r7, #0]
 800f6bc:	68db      	ldr	r3, [r3, #12]
 800f6be:	2b0f      	cmp	r3, #15
 800f6c0:	d904      	bls.n	800f6cc <HAL_TIM_ConfigClockSource+0x584>
 800f6c2:	f241 51cd 	movw	r1, #5581	; 0x15cd
 800f6c6:	482d      	ldr	r0, [pc, #180]	; (800f77c <HAL_TIM_ConfigClockSource+0x634>)
 800f6c8:	f7f6 fa63 	bl	8005b92 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	6818      	ldr	r0, [r3, #0]
 800f6d0:	683b      	ldr	r3, [r7, #0]
 800f6d2:	6859      	ldr	r1, [r3, #4]
 800f6d4:	683b      	ldr	r3, [r7, #0]
 800f6d6:	68db      	ldr	r3, [r3, #12]
 800f6d8:	461a      	mov	r2, r3
 800f6da:	f000 fc41 	bl	800ff60 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	681b      	ldr	r3, [r3, #0]
 800f6e2:	2140      	movs	r1, #64	; 0x40
 800f6e4:	4618      	mov	r0, r3
 800f6e6:	f000 fc9a 	bl	801001e <TIM_ITRx_SetConfig>
      break;
 800f6ea:	e02f      	b.n	800f74c <HAL_TIM_ConfigClockSource+0x604>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	4a1d      	ldr	r2, [pc, #116]	; (800f768 <HAL_TIM_ConfigClockSource+0x620>)
 800f6f2:	4293      	cmp	r3, r2
 800f6f4:	d01d      	beq.n	800f732 <HAL_TIM_ConfigClockSource+0x5ea>
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f6fe:	d018      	beq.n	800f732 <HAL_TIM_ConfigClockSource+0x5ea>
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	4a19      	ldr	r2, [pc, #100]	; (800f76c <HAL_TIM_ConfigClockSource+0x624>)
 800f706:	4293      	cmp	r3, r2
 800f708:	d013      	beq.n	800f732 <HAL_TIM_ConfigClockSource+0x5ea>
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	681b      	ldr	r3, [r3, #0]
 800f70e:	4a18      	ldr	r2, [pc, #96]	; (800f770 <HAL_TIM_ConfigClockSource+0x628>)
 800f710:	4293      	cmp	r3, r2
 800f712:	d00e      	beq.n	800f732 <HAL_TIM_ConfigClockSource+0x5ea>
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	681b      	ldr	r3, [r3, #0]
 800f718:	4a16      	ldr	r2, [pc, #88]	; (800f774 <HAL_TIM_ConfigClockSource+0x62c>)
 800f71a:	4293      	cmp	r3, r2
 800f71c:	d009      	beq.n	800f732 <HAL_TIM_ConfigClockSource+0x5ea>
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	681b      	ldr	r3, [r3, #0]
 800f722:	4a15      	ldr	r2, [pc, #84]	; (800f778 <HAL_TIM_ConfigClockSource+0x630>)
 800f724:	4293      	cmp	r3, r2
 800f726:	d004      	beq.n	800f732 <HAL_TIM_ConfigClockSource+0x5ea>
 800f728:	f241 51dc 	movw	r1, #5596	; 0x15dc
 800f72c:	4813      	ldr	r0, [pc, #76]	; (800f77c <HAL_TIM_ConfigClockSource+0x634>)
 800f72e:	f7f6 fa30 	bl	8005b92 <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	681a      	ldr	r2, [r3, #0]
 800f736:	683b      	ldr	r3, [r7, #0]
 800f738:	681b      	ldr	r3, [r3, #0]
 800f73a:	4619      	mov	r1, r3
 800f73c:	4610      	mov	r0, r2
 800f73e:	f000 fc6e 	bl	801001e <TIM_ITRx_SetConfig>
      break;
 800f742:	e003      	b.n	800f74c <HAL_TIM_ConfigClockSource+0x604>
    }

    default:
      status = HAL_ERROR;
 800f744:	2301      	movs	r3, #1
 800f746:	73fb      	strb	r3, [r7, #15]
      break;
 800f748:	e000      	b.n	800f74c <HAL_TIM_ConfigClockSource+0x604>
      break;
 800f74a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	2201      	movs	r2, #1
 800f750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	2200      	movs	r2, #0
 800f758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f75c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f75e:	4618      	mov	r0, r3
 800f760:	3710      	adds	r7, #16
 800f762:	46bd      	mov	sp, r7
 800f764:	bd80      	pop	{r7, pc}
 800f766:	bf00      	nop
 800f768:	40012c00 	.word	0x40012c00
 800f76c:	40000400 	.word	0x40000400
 800f770:	40000800 	.word	0x40000800
 800f774:	40013400 	.word	0x40013400
 800f778:	40014000 	.word	0x40014000
 800f77c:	080344b0 	.word	0x080344b0

0800f780 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800f780:	b480      	push	{r7}
 800f782:	b085      	sub	sp, #20
 800f784:	af00      	add	r7, sp, #0
 800f786:	6078      	str	r0, [r7, #4]
 800f788:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	681b      	ldr	r3, [r3, #0]
 800f78e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	4a3c      	ldr	r2, [pc, #240]	; (800f884 <TIM_Base_SetConfig+0x104>)
 800f794:	4293      	cmp	r3, r2
 800f796:	d00f      	beq.n	800f7b8 <TIM_Base_SetConfig+0x38>
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f79e:	d00b      	beq.n	800f7b8 <TIM_Base_SetConfig+0x38>
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	4a39      	ldr	r2, [pc, #228]	; (800f888 <TIM_Base_SetConfig+0x108>)
 800f7a4:	4293      	cmp	r3, r2
 800f7a6:	d007      	beq.n	800f7b8 <TIM_Base_SetConfig+0x38>
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	4a38      	ldr	r2, [pc, #224]	; (800f88c <TIM_Base_SetConfig+0x10c>)
 800f7ac:	4293      	cmp	r3, r2
 800f7ae:	d003      	beq.n	800f7b8 <TIM_Base_SetConfig+0x38>
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	4a37      	ldr	r2, [pc, #220]	; (800f890 <TIM_Base_SetConfig+0x110>)
 800f7b4:	4293      	cmp	r3, r2
 800f7b6:	d108      	bne.n	800f7ca <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f7b8:	68fb      	ldr	r3, [r7, #12]
 800f7ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f7be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f7c0:	683b      	ldr	r3, [r7, #0]
 800f7c2:	685b      	ldr	r3, [r3, #4]
 800f7c4:	68fa      	ldr	r2, [r7, #12]
 800f7c6:	4313      	orrs	r3, r2
 800f7c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	4a2d      	ldr	r2, [pc, #180]	; (800f884 <TIM_Base_SetConfig+0x104>)
 800f7ce:	4293      	cmp	r3, r2
 800f7d0:	d01b      	beq.n	800f80a <TIM_Base_SetConfig+0x8a>
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f7d8:	d017      	beq.n	800f80a <TIM_Base_SetConfig+0x8a>
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	4a2a      	ldr	r2, [pc, #168]	; (800f888 <TIM_Base_SetConfig+0x108>)
 800f7de:	4293      	cmp	r3, r2
 800f7e0:	d013      	beq.n	800f80a <TIM_Base_SetConfig+0x8a>
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	4a29      	ldr	r2, [pc, #164]	; (800f88c <TIM_Base_SetConfig+0x10c>)
 800f7e6:	4293      	cmp	r3, r2
 800f7e8:	d00f      	beq.n	800f80a <TIM_Base_SetConfig+0x8a>
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	4a28      	ldr	r2, [pc, #160]	; (800f890 <TIM_Base_SetConfig+0x110>)
 800f7ee:	4293      	cmp	r3, r2
 800f7f0:	d00b      	beq.n	800f80a <TIM_Base_SetConfig+0x8a>
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	4a27      	ldr	r2, [pc, #156]	; (800f894 <TIM_Base_SetConfig+0x114>)
 800f7f6:	4293      	cmp	r3, r2
 800f7f8:	d007      	beq.n	800f80a <TIM_Base_SetConfig+0x8a>
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	4a26      	ldr	r2, [pc, #152]	; (800f898 <TIM_Base_SetConfig+0x118>)
 800f7fe:	4293      	cmp	r3, r2
 800f800:	d003      	beq.n	800f80a <TIM_Base_SetConfig+0x8a>
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	4a25      	ldr	r2, [pc, #148]	; (800f89c <TIM_Base_SetConfig+0x11c>)
 800f806:	4293      	cmp	r3, r2
 800f808:	d108      	bne.n	800f81c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f810:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f812:	683b      	ldr	r3, [r7, #0]
 800f814:	68db      	ldr	r3, [r3, #12]
 800f816:	68fa      	ldr	r2, [r7, #12]
 800f818:	4313      	orrs	r3, r2
 800f81a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f81c:	68fb      	ldr	r3, [r7, #12]
 800f81e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f822:	683b      	ldr	r3, [r7, #0]
 800f824:	695b      	ldr	r3, [r3, #20]
 800f826:	4313      	orrs	r3, r2
 800f828:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	68fa      	ldr	r2, [r7, #12]
 800f82e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f830:	683b      	ldr	r3, [r7, #0]
 800f832:	689a      	ldr	r2, [r3, #8]
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f838:	683b      	ldr	r3, [r7, #0]
 800f83a:	681a      	ldr	r2, [r3, #0]
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	4a10      	ldr	r2, [pc, #64]	; (800f884 <TIM_Base_SetConfig+0x104>)
 800f844:	4293      	cmp	r3, r2
 800f846:	d00f      	beq.n	800f868 <TIM_Base_SetConfig+0xe8>
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	4a11      	ldr	r2, [pc, #68]	; (800f890 <TIM_Base_SetConfig+0x110>)
 800f84c:	4293      	cmp	r3, r2
 800f84e:	d00b      	beq.n	800f868 <TIM_Base_SetConfig+0xe8>
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	4a10      	ldr	r2, [pc, #64]	; (800f894 <TIM_Base_SetConfig+0x114>)
 800f854:	4293      	cmp	r3, r2
 800f856:	d007      	beq.n	800f868 <TIM_Base_SetConfig+0xe8>
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	4a0f      	ldr	r2, [pc, #60]	; (800f898 <TIM_Base_SetConfig+0x118>)
 800f85c:	4293      	cmp	r3, r2
 800f85e:	d003      	beq.n	800f868 <TIM_Base_SetConfig+0xe8>
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	4a0e      	ldr	r2, [pc, #56]	; (800f89c <TIM_Base_SetConfig+0x11c>)
 800f864:	4293      	cmp	r3, r2
 800f866:	d103      	bne.n	800f870 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f868:	683b      	ldr	r3, [r7, #0]
 800f86a:	691a      	ldr	r2, [r3, #16]
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	2201      	movs	r2, #1
 800f874:	615a      	str	r2, [r3, #20]
}
 800f876:	bf00      	nop
 800f878:	3714      	adds	r7, #20
 800f87a:	46bd      	mov	sp, r7
 800f87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f880:	4770      	bx	lr
 800f882:	bf00      	nop
 800f884:	40012c00 	.word	0x40012c00
 800f888:	40000400 	.word	0x40000400
 800f88c:	40000800 	.word	0x40000800
 800f890:	40013400 	.word	0x40013400
 800f894:	40014000 	.word	0x40014000
 800f898:	40014400 	.word	0x40014400
 800f89c:	40014800 	.word	0x40014800

0800f8a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f8a0:	b580      	push	{r7, lr}
 800f8a2:	b086      	sub	sp, #24
 800f8a4:	af00      	add	r7, sp, #0
 800f8a6:	6078      	str	r0, [r7, #4]
 800f8a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	6a1b      	ldr	r3, [r3, #32]
 800f8ae:	f023 0201 	bic.w	r2, r3, #1
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	6a1b      	ldr	r3, [r3, #32]
 800f8ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	685b      	ldr	r3, [r3, #4]
 800f8c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	699b      	ldr	r3, [r3, #24]
 800f8c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f8c8:	68fb      	ldr	r3, [r7, #12]
 800f8ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f8ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f8d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f8d4:	68fb      	ldr	r3, [r7, #12]
 800f8d6:	f023 0303 	bic.w	r3, r3, #3
 800f8da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f8dc:	683b      	ldr	r3, [r7, #0]
 800f8de:	681b      	ldr	r3, [r3, #0]
 800f8e0:	68fa      	ldr	r2, [r7, #12]
 800f8e2:	4313      	orrs	r3, r2
 800f8e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f8e6:	697b      	ldr	r3, [r7, #20]
 800f8e8:	f023 0302 	bic.w	r3, r3, #2
 800f8ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f8ee:	683b      	ldr	r3, [r7, #0]
 800f8f0:	689b      	ldr	r3, [r3, #8]
 800f8f2:	697a      	ldr	r2, [r7, #20]
 800f8f4:	4313      	orrs	r3, r2
 800f8f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	4a40      	ldr	r2, [pc, #256]	; (800f9fc <TIM_OC1_SetConfig+0x15c>)
 800f8fc:	4293      	cmp	r3, r2
 800f8fe:	d00f      	beq.n	800f920 <TIM_OC1_SetConfig+0x80>
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	4a3f      	ldr	r2, [pc, #252]	; (800fa00 <TIM_OC1_SetConfig+0x160>)
 800f904:	4293      	cmp	r3, r2
 800f906:	d00b      	beq.n	800f920 <TIM_OC1_SetConfig+0x80>
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	4a3e      	ldr	r2, [pc, #248]	; (800fa04 <TIM_OC1_SetConfig+0x164>)
 800f90c:	4293      	cmp	r3, r2
 800f90e:	d007      	beq.n	800f920 <TIM_OC1_SetConfig+0x80>
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	4a3d      	ldr	r2, [pc, #244]	; (800fa08 <TIM_OC1_SetConfig+0x168>)
 800f914:	4293      	cmp	r3, r2
 800f916:	d003      	beq.n	800f920 <TIM_OC1_SetConfig+0x80>
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	4a3c      	ldr	r2, [pc, #240]	; (800fa0c <TIM_OC1_SetConfig+0x16c>)
 800f91c:	4293      	cmp	r3, r2
 800f91e:	d119      	bne.n	800f954 <TIM_OC1_SetConfig+0xb4>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800f920:	683b      	ldr	r3, [r7, #0]
 800f922:	68db      	ldr	r3, [r3, #12]
 800f924:	2b00      	cmp	r3, #0
 800f926:	d008      	beq.n	800f93a <TIM_OC1_SetConfig+0x9a>
 800f928:	683b      	ldr	r3, [r7, #0]
 800f92a:	68db      	ldr	r3, [r3, #12]
 800f92c:	2b08      	cmp	r3, #8
 800f92e:	d004      	beq.n	800f93a <TIM_OC1_SetConfig+0x9a>
 800f930:	f641 318d 	movw	r1, #7053	; 0x1b8d
 800f934:	4836      	ldr	r0, [pc, #216]	; (800fa10 <TIM_OC1_SetConfig+0x170>)
 800f936:	f7f6 f92c 	bl	8005b92 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f93a:	697b      	ldr	r3, [r7, #20]
 800f93c:	f023 0308 	bic.w	r3, r3, #8
 800f940:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f942:	683b      	ldr	r3, [r7, #0]
 800f944:	68db      	ldr	r3, [r3, #12]
 800f946:	697a      	ldr	r2, [r7, #20]
 800f948:	4313      	orrs	r3, r2
 800f94a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f94c:	697b      	ldr	r3, [r7, #20]
 800f94e:	f023 0304 	bic.w	r3, r3, #4
 800f952:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	4a29      	ldr	r2, [pc, #164]	; (800f9fc <TIM_OC1_SetConfig+0x15c>)
 800f958:	4293      	cmp	r3, r2
 800f95a:	d00f      	beq.n	800f97c <TIM_OC1_SetConfig+0xdc>
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	4a28      	ldr	r2, [pc, #160]	; (800fa00 <TIM_OC1_SetConfig+0x160>)
 800f960:	4293      	cmp	r3, r2
 800f962:	d00b      	beq.n	800f97c <TIM_OC1_SetConfig+0xdc>
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	4a27      	ldr	r2, [pc, #156]	; (800fa04 <TIM_OC1_SetConfig+0x164>)
 800f968:	4293      	cmp	r3, r2
 800f96a:	d007      	beq.n	800f97c <TIM_OC1_SetConfig+0xdc>
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	4a26      	ldr	r2, [pc, #152]	; (800fa08 <TIM_OC1_SetConfig+0x168>)
 800f970:	4293      	cmp	r3, r2
 800f972:	d003      	beq.n	800f97c <TIM_OC1_SetConfig+0xdc>
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	4a25      	ldr	r2, [pc, #148]	; (800fa0c <TIM_OC1_SetConfig+0x16c>)
 800f978:	4293      	cmp	r3, r2
 800f97a:	d12d      	bne.n	800f9d8 <TIM_OC1_SetConfig+0x138>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800f97c:	683b      	ldr	r3, [r7, #0]
 800f97e:	699b      	ldr	r3, [r3, #24]
 800f980:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f984:	d008      	beq.n	800f998 <TIM_OC1_SetConfig+0xf8>
 800f986:	683b      	ldr	r3, [r7, #0]
 800f988:	699b      	ldr	r3, [r3, #24]
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	d004      	beq.n	800f998 <TIM_OC1_SetConfig+0xf8>
 800f98e:	f641 319a 	movw	r1, #7066	; 0x1b9a
 800f992:	481f      	ldr	r0, [pc, #124]	; (800fa10 <TIM_OC1_SetConfig+0x170>)
 800f994:	f7f6 f8fd 	bl	8005b92 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800f998:	683b      	ldr	r3, [r7, #0]
 800f99a:	695b      	ldr	r3, [r3, #20]
 800f99c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f9a0:	d008      	beq.n	800f9b4 <TIM_OC1_SetConfig+0x114>
 800f9a2:	683b      	ldr	r3, [r7, #0]
 800f9a4:	695b      	ldr	r3, [r3, #20]
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d004      	beq.n	800f9b4 <TIM_OC1_SetConfig+0x114>
 800f9aa:	f641 319b 	movw	r1, #7067	; 0x1b9b
 800f9ae:	4818      	ldr	r0, [pc, #96]	; (800fa10 <TIM_OC1_SetConfig+0x170>)
 800f9b0:	f7f6 f8ef 	bl	8005b92 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f9b4:	693b      	ldr	r3, [r7, #16]
 800f9b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f9ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f9bc:	693b      	ldr	r3, [r7, #16]
 800f9be:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f9c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f9c4:	683b      	ldr	r3, [r7, #0]
 800f9c6:	695b      	ldr	r3, [r3, #20]
 800f9c8:	693a      	ldr	r2, [r7, #16]
 800f9ca:	4313      	orrs	r3, r2
 800f9cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f9ce:	683b      	ldr	r3, [r7, #0]
 800f9d0:	699b      	ldr	r3, [r3, #24]
 800f9d2:	693a      	ldr	r2, [r7, #16]
 800f9d4:	4313      	orrs	r3, r2
 800f9d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	693a      	ldr	r2, [r7, #16]
 800f9dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	68fa      	ldr	r2, [r7, #12]
 800f9e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f9e4:	683b      	ldr	r3, [r7, #0]
 800f9e6:	685a      	ldr	r2, [r3, #4]
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	697a      	ldr	r2, [r7, #20]
 800f9f0:	621a      	str	r2, [r3, #32]
}
 800f9f2:	bf00      	nop
 800f9f4:	3718      	adds	r7, #24
 800f9f6:	46bd      	mov	sp, r7
 800f9f8:	bd80      	pop	{r7, pc}
 800f9fa:	bf00      	nop
 800f9fc:	40012c00 	.word	0x40012c00
 800fa00:	40013400 	.word	0x40013400
 800fa04:	40014000 	.word	0x40014000
 800fa08:	40014400 	.word	0x40014400
 800fa0c:	40014800 	.word	0x40014800
 800fa10:	080344b0 	.word	0x080344b0

0800fa14 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800fa14:	b580      	push	{r7, lr}
 800fa16:	b086      	sub	sp, #24
 800fa18:	af00      	add	r7, sp, #0
 800fa1a:	6078      	str	r0, [r7, #4]
 800fa1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	6a1b      	ldr	r3, [r3, #32]
 800fa22:	f023 0210 	bic.w	r2, r3, #16
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	6a1b      	ldr	r3, [r3, #32]
 800fa2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	685b      	ldr	r3, [r3, #4]
 800fa34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	699b      	ldr	r3, [r3, #24]
 800fa3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800fa3c:	68fb      	ldr	r3, [r7, #12]
 800fa3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800fa42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fa46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800fa48:	68fb      	ldr	r3, [r7, #12]
 800fa4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fa4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fa50:	683b      	ldr	r3, [r7, #0]
 800fa52:	681b      	ldr	r3, [r3, #0]
 800fa54:	021b      	lsls	r3, r3, #8
 800fa56:	68fa      	ldr	r2, [r7, #12]
 800fa58:	4313      	orrs	r3, r2
 800fa5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800fa5c:	697b      	ldr	r3, [r7, #20]
 800fa5e:	f023 0320 	bic.w	r3, r3, #32
 800fa62:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800fa64:	683b      	ldr	r3, [r7, #0]
 800fa66:	689b      	ldr	r3, [r3, #8]
 800fa68:	011b      	lsls	r3, r3, #4
 800fa6a:	697a      	ldr	r2, [r7, #20]
 800fa6c:	4313      	orrs	r3, r2
 800fa6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	4a3b      	ldr	r2, [pc, #236]	; (800fb60 <TIM_OC2_SetConfig+0x14c>)
 800fa74:	4293      	cmp	r3, r2
 800fa76:	d003      	beq.n	800fa80 <TIM_OC2_SetConfig+0x6c>
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	4a3a      	ldr	r2, [pc, #232]	; (800fb64 <TIM_OC2_SetConfig+0x150>)
 800fa7c:	4293      	cmp	r3, r2
 800fa7e:	d11a      	bne.n	800fab6 <TIM_OC2_SetConfig+0xa2>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800fa80:	683b      	ldr	r3, [r7, #0]
 800fa82:	68db      	ldr	r3, [r3, #12]
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d008      	beq.n	800fa9a <TIM_OC2_SetConfig+0x86>
 800fa88:	683b      	ldr	r3, [r7, #0]
 800fa8a:	68db      	ldr	r3, [r3, #12]
 800fa8c:	2b08      	cmp	r3, #8
 800fa8e:	d004      	beq.n	800fa9a <TIM_OC2_SetConfig+0x86>
 800fa90:	f641 31d8 	movw	r1, #7128	; 0x1bd8
 800fa94:	4834      	ldr	r0, [pc, #208]	; (800fb68 <TIM_OC2_SetConfig+0x154>)
 800fa96:	f7f6 f87c 	bl	8005b92 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800fa9a:	697b      	ldr	r3, [r7, #20]
 800fa9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800faa0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800faa2:	683b      	ldr	r3, [r7, #0]
 800faa4:	68db      	ldr	r3, [r3, #12]
 800faa6:	011b      	lsls	r3, r3, #4
 800faa8:	697a      	ldr	r2, [r7, #20]
 800faaa:	4313      	orrs	r3, r2
 800faac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800faae:	697b      	ldr	r3, [r7, #20]
 800fab0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fab4:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	4a29      	ldr	r2, [pc, #164]	; (800fb60 <TIM_OC2_SetConfig+0x14c>)
 800faba:	4293      	cmp	r3, r2
 800fabc:	d00f      	beq.n	800fade <TIM_OC2_SetConfig+0xca>
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	4a28      	ldr	r2, [pc, #160]	; (800fb64 <TIM_OC2_SetConfig+0x150>)
 800fac2:	4293      	cmp	r3, r2
 800fac4:	d00b      	beq.n	800fade <TIM_OC2_SetConfig+0xca>
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	4a28      	ldr	r2, [pc, #160]	; (800fb6c <TIM_OC2_SetConfig+0x158>)
 800faca:	4293      	cmp	r3, r2
 800facc:	d007      	beq.n	800fade <TIM_OC2_SetConfig+0xca>
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	4a27      	ldr	r2, [pc, #156]	; (800fb70 <TIM_OC2_SetConfig+0x15c>)
 800fad2:	4293      	cmp	r3, r2
 800fad4:	d003      	beq.n	800fade <TIM_OC2_SetConfig+0xca>
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	4a26      	ldr	r2, [pc, #152]	; (800fb74 <TIM_OC2_SetConfig+0x160>)
 800fada:	4293      	cmp	r3, r2
 800fadc:	d12f      	bne.n	800fb3e <TIM_OC2_SetConfig+0x12a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800fade:	683b      	ldr	r3, [r7, #0]
 800fae0:	699b      	ldr	r3, [r3, #24]
 800fae2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fae6:	d008      	beq.n	800fafa <TIM_OC2_SetConfig+0xe6>
 800fae8:	683b      	ldr	r3, [r7, #0]
 800faea:	699b      	ldr	r3, [r3, #24]
 800faec:	2b00      	cmp	r3, #0
 800faee:	d004      	beq.n	800fafa <TIM_OC2_SetConfig+0xe6>
 800faf0:	f641 31e6 	movw	r1, #7142	; 0x1be6
 800faf4:	481c      	ldr	r0, [pc, #112]	; (800fb68 <TIM_OC2_SetConfig+0x154>)
 800faf6:	f7f6 f84c 	bl	8005b92 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800fafa:	683b      	ldr	r3, [r7, #0]
 800fafc:	695b      	ldr	r3, [r3, #20]
 800fafe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fb02:	d008      	beq.n	800fb16 <TIM_OC2_SetConfig+0x102>
 800fb04:	683b      	ldr	r3, [r7, #0]
 800fb06:	695b      	ldr	r3, [r3, #20]
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	d004      	beq.n	800fb16 <TIM_OC2_SetConfig+0x102>
 800fb0c:	f641 31e7 	movw	r1, #7143	; 0x1be7
 800fb10:	4815      	ldr	r0, [pc, #84]	; (800fb68 <TIM_OC2_SetConfig+0x154>)
 800fb12:	f7f6 f83e 	bl	8005b92 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800fb16:	693b      	ldr	r3, [r7, #16]
 800fb18:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800fb1c:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800fb1e:	693b      	ldr	r3, [r7, #16]
 800fb20:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fb24:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800fb26:	683b      	ldr	r3, [r7, #0]
 800fb28:	695b      	ldr	r3, [r3, #20]
 800fb2a:	009b      	lsls	r3, r3, #2
 800fb2c:	693a      	ldr	r2, [r7, #16]
 800fb2e:	4313      	orrs	r3, r2
 800fb30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800fb32:	683b      	ldr	r3, [r7, #0]
 800fb34:	699b      	ldr	r3, [r3, #24]
 800fb36:	009b      	lsls	r3, r3, #2
 800fb38:	693a      	ldr	r2, [r7, #16]
 800fb3a:	4313      	orrs	r3, r2
 800fb3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	693a      	ldr	r2, [r7, #16]
 800fb42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	68fa      	ldr	r2, [r7, #12]
 800fb48:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800fb4a:	683b      	ldr	r3, [r7, #0]
 800fb4c:	685a      	ldr	r2, [r3, #4]
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	697a      	ldr	r2, [r7, #20]
 800fb56:	621a      	str	r2, [r3, #32]
}
 800fb58:	bf00      	nop
 800fb5a:	3718      	adds	r7, #24
 800fb5c:	46bd      	mov	sp, r7
 800fb5e:	bd80      	pop	{r7, pc}
 800fb60:	40012c00 	.word	0x40012c00
 800fb64:	40013400 	.word	0x40013400
 800fb68:	080344b0 	.word	0x080344b0
 800fb6c:	40014000 	.word	0x40014000
 800fb70:	40014400 	.word	0x40014400
 800fb74:	40014800 	.word	0x40014800

0800fb78 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800fb78:	b580      	push	{r7, lr}
 800fb7a:	b086      	sub	sp, #24
 800fb7c:	af00      	add	r7, sp, #0
 800fb7e:	6078      	str	r0, [r7, #4]
 800fb80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	6a1b      	ldr	r3, [r3, #32]
 800fb86:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	6a1b      	ldr	r3, [r3, #32]
 800fb92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	685b      	ldr	r3, [r3, #4]
 800fb98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	69db      	ldr	r3, [r3, #28]
 800fb9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800fba0:	68fb      	ldr	r3, [r7, #12]
 800fba2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800fba6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fbaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800fbac:	68fb      	ldr	r3, [r7, #12]
 800fbae:	f023 0303 	bic.w	r3, r3, #3
 800fbb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fbb4:	683b      	ldr	r3, [r7, #0]
 800fbb6:	681b      	ldr	r3, [r3, #0]
 800fbb8:	68fa      	ldr	r2, [r7, #12]
 800fbba:	4313      	orrs	r3, r2
 800fbbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800fbbe:	697b      	ldr	r3, [r7, #20]
 800fbc0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800fbc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800fbc6:	683b      	ldr	r3, [r7, #0]
 800fbc8:	689b      	ldr	r3, [r3, #8]
 800fbca:	021b      	lsls	r3, r3, #8
 800fbcc:	697a      	ldr	r2, [r7, #20]
 800fbce:	4313      	orrs	r3, r2
 800fbd0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	4a3b      	ldr	r2, [pc, #236]	; (800fcc4 <TIM_OC3_SetConfig+0x14c>)
 800fbd6:	4293      	cmp	r3, r2
 800fbd8:	d003      	beq.n	800fbe2 <TIM_OC3_SetConfig+0x6a>
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	4a3a      	ldr	r2, [pc, #232]	; (800fcc8 <TIM_OC3_SetConfig+0x150>)
 800fbde:	4293      	cmp	r3, r2
 800fbe0:	d11a      	bne.n	800fc18 <TIM_OC3_SetConfig+0xa0>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800fbe2:	683b      	ldr	r3, [r7, #0]
 800fbe4:	68db      	ldr	r3, [r3, #12]
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d008      	beq.n	800fbfc <TIM_OC3_SetConfig+0x84>
 800fbea:	683b      	ldr	r3, [r7, #0]
 800fbec:	68db      	ldr	r3, [r3, #12]
 800fbee:	2b08      	cmp	r3, #8
 800fbf0:	d004      	beq.n	800fbfc <TIM_OC3_SetConfig+0x84>
 800fbf2:	f641 4125 	movw	r1, #7205	; 0x1c25
 800fbf6:	4835      	ldr	r0, [pc, #212]	; (800fccc <TIM_OC3_SetConfig+0x154>)
 800fbf8:	f7f5 ffcb 	bl	8005b92 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800fbfc:	697b      	ldr	r3, [r7, #20]
 800fbfe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fc02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800fc04:	683b      	ldr	r3, [r7, #0]
 800fc06:	68db      	ldr	r3, [r3, #12]
 800fc08:	021b      	lsls	r3, r3, #8
 800fc0a:	697a      	ldr	r2, [r7, #20]
 800fc0c:	4313      	orrs	r3, r2
 800fc0e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800fc10:	697b      	ldr	r3, [r7, #20]
 800fc12:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800fc16:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	4a2a      	ldr	r2, [pc, #168]	; (800fcc4 <TIM_OC3_SetConfig+0x14c>)
 800fc1c:	4293      	cmp	r3, r2
 800fc1e:	d00f      	beq.n	800fc40 <TIM_OC3_SetConfig+0xc8>
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	4a29      	ldr	r2, [pc, #164]	; (800fcc8 <TIM_OC3_SetConfig+0x150>)
 800fc24:	4293      	cmp	r3, r2
 800fc26:	d00b      	beq.n	800fc40 <TIM_OC3_SetConfig+0xc8>
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	4a29      	ldr	r2, [pc, #164]	; (800fcd0 <TIM_OC3_SetConfig+0x158>)
 800fc2c:	4293      	cmp	r3, r2
 800fc2e:	d007      	beq.n	800fc40 <TIM_OC3_SetConfig+0xc8>
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	4a28      	ldr	r2, [pc, #160]	; (800fcd4 <TIM_OC3_SetConfig+0x15c>)
 800fc34:	4293      	cmp	r3, r2
 800fc36:	d003      	beq.n	800fc40 <TIM_OC3_SetConfig+0xc8>
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	4a27      	ldr	r2, [pc, #156]	; (800fcd8 <TIM_OC3_SetConfig+0x160>)
 800fc3c:	4293      	cmp	r3, r2
 800fc3e:	d12f      	bne.n	800fca0 <TIM_OC3_SetConfig+0x128>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800fc40:	683b      	ldr	r3, [r7, #0]
 800fc42:	699b      	ldr	r3, [r3, #24]
 800fc44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fc48:	d008      	beq.n	800fc5c <TIM_OC3_SetConfig+0xe4>
 800fc4a:	683b      	ldr	r3, [r7, #0]
 800fc4c:	699b      	ldr	r3, [r3, #24]
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d004      	beq.n	800fc5c <TIM_OC3_SetConfig+0xe4>
 800fc52:	f641 4133 	movw	r1, #7219	; 0x1c33
 800fc56:	481d      	ldr	r0, [pc, #116]	; (800fccc <TIM_OC3_SetConfig+0x154>)
 800fc58:	f7f5 ff9b 	bl	8005b92 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800fc5c:	683b      	ldr	r3, [r7, #0]
 800fc5e:	695b      	ldr	r3, [r3, #20]
 800fc60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fc64:	d008      	beq.n	800fc78 <TIM_OC3_SetConfig+0x100>
 800fc66:	683b      	ldr	r3, [r7, #0]
 800fc68:	695b      	ldr	r3, [r3, #20]
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	d004      	beq.n	800fc78 <TIM_OC3_SetConfig+0x100>
 800fc6e:	f641 4134 	movw	r1, #7220	; 0x1c34
 800fc72:	4816      	ldr	r0, [pc, #88]	; (800fccc <TIM_OC3_SetConfig+0x154>)
 800fc74:	f7f5 ff8d 	bl	8005b92 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800fc78:	693b      	ldr	r3, [r7, #16]
 800fc7a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fc7e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800fc80:	693b      	ldr	r3, [r7, #16]
 800fc82:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fc86:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800fc88:	683b      	ldr	r3, [r7, #0]
 800fc8a:	695b      	ldr	r3, [r3, #20]
 800fc8c:	011b      	lsls	r3, r3, #4
 800fc8e:	693a      	ldr	r2, [r7, #16]
 800fc90:	4313      	orrs	r3, r2
 800fc92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800fc94:	683b      	ldr	r3, [r7, #0]
 800fc96:	699b      	ldr	r3, [r3, #24]
 800fc98:	011b      	lsls	r3, r3, #4
 800fc9a:	693a      	ldr	r2, [r7, #16]
 800fc9c:	4313      	orrs	r3, r2
 800fc9e:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	693a      	ldr	r2, [r7, #16]
 800fca4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	68fa      	ldr	r2, [r7, #12]
 800fcaa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800fcac:	683b      	ldr	r3, [r7, #0]
 800fcae:	685a      	ldr	r2, [r3, #4]
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	697a      	ldr	r2, [r7, #20]
 800fcb8:	621a      	str	r2, [r3, #32]
}
 800fcba:	bf00      	nop
 800fcbc:	3718      	adds	r7, #24
 800fcbe:	46bd      	mov	sp, r7
 800fcc0:	bd80      	pop	{r7, pc}
 800fcc2:	bf00      	nop
 800fcc4:	40012c00 	.word	0x40012c00
 800fcc8:	40013400 	.word	0x40013400
 800fccc:	080344b0 	.word	0x080344b0
 800fcd0:	40014000 	.word	0x40014000
 800fcd4:	40014400 	.word	0x40014400
 800fcd8:	40014800 	.word	0x40014800

0800fcdc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800fcdc:	b580      	push	{r7, lr}
 800fcde:	b086      	sub	sp, #24
 800fce0:	af00      	add	r7, sp, #0
 800fce2:	6078      	str	r0, [r7, #4]
 800fce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	6a1b      	ldr	r3, [r3, #32]
 800fcea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	6a1b      	ldr	r3, [r3, #32]
 800fcf6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	685b      	ldr	r3, [r3, #4]
 800fcfc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	69db      	ldr	r3, [r3, #28]
 800fd02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800fd04:	68fb      	ldr	r3, [r7, #12]
 800fd06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800fd0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fd0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800fd10:	68fb      	ldr	r3, [r7, #12]
 800fd12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fd16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fd18:	683b      	ldr	r3, [r7, #0]
 800fd1a:	681b      	ldr	r3, [r3, #0]
 800fd1c:	021b      	lsls	r3, r3, #8
 800fd1e:	68fa      	ldr	r2, [r7, #12]
 800fd20:	4313      	orrs	r3, r2
 800fd22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800fd24:	693b      	ldr	r3, [r7, #16]
 800fd26:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fd2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800fd2c:	683b      	ldr	r3, [r7, #0]
 800fd2e:	689b      	ldr	r3, [r3, #8]
 800fd30:	031b      	lsls	r3, r3, #12
 800fd32:	693a      	ldr	r2, [r7, #16]
 800fd34:	4313      	orrs	r3, r2
 800fd36:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	4a1e      	ldr	r2, [pc, #120]	; (800fdb4 <TIM_OC4_SetConfig+0xd8>)
 800fd3c:	4293      	cmp	r3, r2
 800fd3e:	d00f      	beq.n	800fd60 <TIM_OC4_SetConfig+0x84>
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	4a1d      	ldr	r2, [pc, #116]	; (800fdb8 <TIM_OC4_SetConfig+0xdc>)
 800fd44:	4293      	cmp	r3, r2
 800fd46:	d00b      	beq.n	800fd60 <TIM_OC4_SetConfig+0x84>
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	4a1c      	ldr	r2, [pc, #112]	; (800fdbc <TIM_OC4_SetConfig+0xe0>)
 800fd4c:	4293      	cmp	r3, r2
 800fd4e:	d007      	beq.n	800fd60 <TIM_OC4_SetConfig+0x84>
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	4a1b      	ldr	r2, [pc, #108]	; (800fdc0 <TIM_OC4_SetConfig+0xe4>)
 800fd54:	4293      	cmp	r3, r2
 800fd56:	d003      	beq.n	800fd60 <TIM_OC4_SetConfig+0x84>
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	4a1a      	ldr	r2, [pc, #104]	; (800fdc4 <TIM_OC4_SetConfig+0xe8>)
 800fd5c:	4293      	cmp	r3, r2
 800fd5e:	d117      	bne.n	800fd90 <TIM_OC4_SetConfig+0xb4>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800fd60:	683b      	ldr	r3, [r7, #0]
 800fd62:	695b      	ldr	r3, [r3, #20]
 800fd64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fd68:	d008      	beq.n	800fd7c <TIM_OC4_SetConfig+0xa0>
 800fd6a:	683b      	ldr	r3, [r7, #0]
 800fd6c:	695b      	ldr	r3, [r3, #20]
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	d004      	beq.n	800fd7c <TIM_OC4_SetConfig+0xa0>
 800fd72:	f641 4174 	movw	r1, #7284	; 0x1c74
 800fd76:	4814      	ldr	r0, [pc, #80]	; (800fdc8 <TIM_OC4_SetConfig+0xec>)
 800fd78:	f7f5 ff0b 	bl	8005b92 <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800fd7c:	697b      	ldr	r3, [r7, #20]
 800fd7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800fd82:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800fd84:	683b      	ldr	r3, [r7, #0]
 800fd86:	695b      	ldr	r3, [r3, #20]
 800fd88:	019b      	lsls	r3, r3, #6
 800fd8a:	697a      	ldr	r2, [r7, #20]
 800fd8c:	4313      	orrs	r3, r2
 800fd8e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	697a      	ldr	r2, [r7, #20]
 800fd94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	68fa      	ldr	r2, [r7, #12]
 800fd9a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800fd9c:	683b      	ldr	r3, [r7, #0]
 800fd9e:	685a      	ldr	r2, [r3, #4]
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	693a      	ldr	r2, [r7, #16]
 800fda8:	621a      	str	r2, [r3, #32]
}
 800fdaa:	bf00      	nop
 800fdac:	3718      	adds	r7, #24
 800fdae:	46bd      	mov	sp, r7
 800fdb0:	bd80      	pop	{r7, pc}
 800fdb2:	bf00      	nop
 800fdb4:	40012c00 	.word	0x40012c00
 800fdb8:	40013400 	.word	0x40013400
 800fdbc:	40014000 	.word	0x40014000
 800fdc0:	40014400 	.word	0x40014400
 800fdc4:	40014800 	.word	0x40014800
 800fdc8:	080344b0 	.word	0x080344b0

0800fdcc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800fdcc:	b480      	push	{r7}
 800fdce:	b087      	sub	sp, #28
 800fdd0:	af00      	add	r7, sp, #0
 800fdd2:	6078      	str	r0, [r7, #4]
 800fdd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	6a1b      	ldr	r3, [r3, #32]
 800fdda:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	6a1b      	ldr	r3, [r3, #32]
 800fde6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	685b      	ldr	r3, [r3, #4]
 800fdec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fdf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800fdf4:	68fb      	ldr	r3, [r7, #12]
 800fdf6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800fdfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fdfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fe00:	683b      	ldr	r3, [r7, #0]
 800fe02:	681b      	ldr	r3, [r3, #0]
 800fe04:	68fa      	ldr	r2, [r7, #12]
 800fe06:	4313      	orrs	r3, r2
 800fe08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800fe0a:	693b      	ldr	r3, [r7, #16]
 800fe0c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800fe10:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800fe12:	683b      	ldr	r3, [r7, #0]
 800fe14:	689b      	ldr	r3, [r3, #8]
 800fe16:	041b      	lsls	r3, r3, #16
 800fe18:	693a      	ldr	r2, [r7, #16]
 800fe1a:	4313      	orrs	r3, r2
 800fe1c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	4a17      	ldr	r2, [pc, #92]	; (800fe80 <TIM_OC5_SetConfig+0xb4>)
 800fe22:	4293      	cmp	r3, r2
 800fe24:	d00f      	beq.n	800fe46 <TIM_OC5_SetConfig+0x7a>
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	4a16      	ldr	r2, [pc, #88]	; (800fe84 <TIM_OC5_SetConfig+0xb8>)
 800fe2a:	4293      	cmp	r3, r2
 800fe2c:	d00b      	beq.n	800fe46 <TIM_OC5_SetConfig+0x7a>
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	4a15      	ldr	r2, [pc, #84]	; (800fe88 <TIM_OC5_SetConfig+0xbc>)
 800fe32:	4293      	cmp	r3, r2
 800fe34:	d007      	beq.n	800fe46 <TIM_OC5_SetConfig+0x7a>
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	4a14      	ldr	r2, [pc, #80]	; (800fe8c <TIM_OC5_SetConfig+0xc0>)
 800fe3a:	4293      	cmp	r3, r2
 800fe3c:	d003      	beq.n	800fe46 <TIM_OC5_SetConfig+0x7a>
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	4a13      	ldr	r2, [pc, #76]	; (800fe90 <TIM_OC5_SetConfig+0xc4>)
 800fe42:	4293      	cmp	r3, r2
 800fe44:	d109      	bne.n	800fe5a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800fe46:	697b      	ldr	r3, [r7, #20]
 800fe48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800fe4c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800fe4e:	683b      	ldr	r3, [r7, #0]
 800fe50:	695b      	ldr	r3, [r3, #20]
 800fe52:	021b      	lsls	r3, r3, #8
 800fe54:	697a      	ldr	r2, [r7, #20]
 800fe56:	4313      	orrs	r3, r2
 800fe58:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	697a      	ldr	r2, [r7, #20]
 800fe5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	68fa      	ldr	r2, [r7, #12]
 800fe64:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800fe66:	683b      	ldr	r3, [r7, #0]
 800fe68:	685a      	ldr	r2, [r3, #4]
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	693a      	ldr	r2, [r7, #16]
 800fe72:	621a      	str	r2, [r3, #32]
}
 800fe74:	bf00      	nop
 800fe76:	371c      	adds	r7, #28
 800fe78:	46bd      	mov	sp, r7
 800fe7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe7e:	4770      	bx	lr
 800fe80:	40012c00 	.word	0x40012c00
 800fe84:	40013400 	.word	0x40013400
 800fe88:	40014000 	.word	0x40014000
 800fe8c:	40014400 	.word	0x40014400
 800fe90:	40014800 	.word	0x40014800

0800fe94 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800fe94:	b480      	push	{r7}
 800fe96:	b087      	sub	sp, #28
 800fe98:	af00      	add	r7, sp, #0
 800fe9a:	6078      	str	r0, [r7, #4]
 800fe9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	6a1b      	ldr	r3, [r3, #32]
 800fea2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	6a1b      	ldr	r3, [r3, #32]
 800feae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	685b      	ldr	r3, [r3, #4]
 800feb4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800feba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800febc:	68fb      	ldr	r3, [r7, #12]
 800febe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800fec2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fec6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fec8:	683b      	ldr	r3, [r7, #0]
 800feca:	681b      	ldr	r3, [r3, #0]
 800fecc:	021b      	lsls	r3, r3, #8
 800fece:	68fa      	ldr	r2, [r7, #12]
 800fed0:	4313      	orrs	r3, r2
 800fed2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800fed4:	693b      	ldr	r3, [r7, #16]
 800fed6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800feda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800fedc:	683b      	ldr	r3, [r7, #0]
 800fede:	689b      	ldr	r3, [r3, #8]
 800fee0:	051b      	lsls	r3, r3, #20
 800fee2:	693a      	ldr	r2, [r7, #16]
 800fee4:	4313      	orrs	r3, r2
 800fee6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	4a18      	ldr	r2, [pc, #96]	; (800ff4c <TIM_OC6_SetConfig+0xb8>)
 800feec:	4293      	cmp	r3, r2
 800feee:	d00f      	beq.n	800ff10 <TIM_OC6_SetConfig+0x7c>
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	4a17      	ldr	r2, [pc, #92]	; (800ff50 <TIM_OC6_SetConfig+0xbc>)
 800fef4:	4293      	cmp	r3, r2
 800fef6:	d00b      	beq.n	800ff10 <TIM_OC6_SetConfig+0x7c>
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	4a16      	ldr	r2, [pc, #88]	; (800ff54 <TIM_OC6_SetConfig+0xc0>)
 800fefc:	4293      	cmp	r3, r2
 800fefe:	d007      	beq.n	800ff10 <TIM_OC6_SetConfig+0x7c>
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	4a15      	ldr	r2, [pc, #84]	; (800ff58 <TIM_OC6_SetConfig+0xc4>)
 800ff04:	4293      	cmp	r3, r2
 800ff06:	d003      	beq.n	800ff10 <TIM_OC6_SetConfig+0x7c>
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	4a14      	ldr	r2, [pc, #80]	; (800ff5c <TIM_OC6_SetConfig+0xc8>)
 800ff0c:	4293      	cmp	r3, r2
 800ff0e:	d109      	bne.n	800ff24 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ff10:	697b      	ldr	r3, [r7, #20]
 800ff12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ff16:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ff18:	683b      	ldr	r3, [r7, #0]
 800ff1a:	695b      	ldr	r3, [r3, #20]
 800ff1c:	029b      	lsls	r3, r3, #10
 800ff1e:	697a      	ldr	r2, [r7, #20]
 800ff20:	4313      	orrs	r3, r2
 800ff22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	697a      	ldr	r2, [r7, #20]
 800ff28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	68fa      	ldr	r2, [r7, #12]
 800ff2e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ff30:	683b      	ldr	r3, [r7, #0]
 800ff32:	685a      	ldr	r2, [r3, #4]
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	693a      	ldr	r2, [r7, #16]
 800ff3c:	621a      	str	r2, [r3, #32]
}
 800ff3e:	bf00      	nop
 800ff40:	371c      	adds	r7, #28
 800ff42:	46bd      	mov	sp, r7
 800ff44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff48:	4770      	bx	lr
 800ff4a:	bf00      	nop
 800ff4c:	40012c00 	.word	0x40012c00
 800ff50:	40013400 	.word	0x40013400
 800ff54:	40014000 	.word	0x40014000
 800ff58:	40014400 	.word	0x40014400
 800ff5c:	40014800 	.word	0x40014800

0800ff60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ff60:	b480      	push	{r7}
 800ff62:	b087      	sub	sp, #28
 800ff64:	af00      	add	r7, sp, #0
 800ff66:	60f8      	str	r0, [r7, #12]
 800ff68:	60b9      	str	r1, [r7, #8]
 800ff6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ff6c:	68fb      	ldr	r3, [r7, #12]
 800ff6e:	6a1b      	ldr	r3, [r3, #32]
 800ff70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ff72:	68fb      	ldr	r3, [r7, #12]
 800ff74:	6a1b      	ldr	r3, [r3, #32]
 800ff76:	f023 0201 	bic.w	r2, r3, #1
 800ff7a:	68fb      	ldr	r3, [r7, #12]
 800ff7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ff7e:	68fb      	ldr	r3, [r7, #12]
 800ff80:	699b      	ldr	r3, [r3, #24]
 800ff82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ff84:	693b      	ldr	r3, [r7, #16]
 800ff86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ff8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	011b      	lsls	r3, r3, #4
 800ff90:	693a      	ldr	r2, [r7, #16]
 800ff92:	4313      	orrs	r3, r2
 800ff94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ff96:	697b      	ldr	r3, [r7, #20]
 800ff98:	f023 030a 	bic.w	r3, r3, #10
 800ff9c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ff9e:	697a      	ldr	r2, [r7, #20]
 800ffa0:	68bb      	ldr	r3, [r7, #8]
 800ffa2:	4313      	orrs	r3, r2
 800ffa4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ffa6:	68fb      	ldr	r3, [r7, #12]
 800ffa8:	693a      	ldr	r2, [r7, #16]
 800ffaa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ffac:	68fb      	ldr	r3, [r7, #12]
 800ffae:	697a      	ldr	r2, [r7, #20]
 800ffb0:	621a      	str	r2, [r3, #32]
}
 800ffb2:	bf00      	nop
 800ffb4:	371c      	adds	r7, #28
 800ffb6:	46bd      	mov	sp, r7
 800ffb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffbc:	4770      	bx	lr

0800ffbe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ffbe:	b480      	push	{r7}
 800ffc0:	b087      	sub	sp, #28
 800ffc2:	af00      	add	r7, sp, #0
 800ffc4:	60f8      	str	r0, [r7, #12]
 800ffc6:	60b9      	str	r1, [r7, #8]
 800ffc8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ffca:	68fb      	ldr	r3, [r7, #12]
 800ffcc:	6a1b      	ldr	r3, [r3, #32]
 800ffce:	f023 0210 	bic.w	r2, r3, #16
 800ffd2:	68fb      	ldr	r3, [r7, #12]
 800ffd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ffd6:	68fb      	ldr	r3, [r7, #12]
 800ffd8:	699b      	ldr	r3, [r3, #24]
 800ffda:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ffdc:	68fb      	ldr	r3, [r7, #12]
 800ffde:	6a1b      	ldr	r3, [r3, #32]
 800ffe0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ffe2:	697b      	ldr	r3, [r7, #20]
 800ffe4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ffe8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	031b      	lsls	r3, r3, #12
 800ffee:	697a      	ldr	r2, [r7, #20]
 800fff0:	4313      	orrs	r3, r2
 800fff2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800fff4:	693b      	ldr	r3, [r7, #16]
 800fff6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800fffa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800fffc:	68bb      	ldr	r3, [r7, #8]
 800fffe:	011b      	lsls	r3, r3, #4
 8010000:	693a      	ldr	r2, [r7, #16]
 8010002:	4313      	orrs	r3, r2
 8010004:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8010006:	68fb      	ldr	r3, [r7, #12]
 8010008:	697a      	ldr	r2, [r7, #20]
 801000a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801000c:	68fb      	ldr	r3, [r7, #12]
 801000e:	693a      	ldr	r2, [r7, #16]
 8010010:	621a      	str	r2, [r3, #32]
}
 8010012:	bf00      	nop
 8010014:	371c      	adds	r7, #28
 8010016:	46bd      	mov	sp, r7
 8010018:	f85d 7b04 	ldr.w	r7, [sp], #4
 801001c:	4770      	bx	lr

0801001e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801001e:	b480      	push	{r7}
 8010020:	b085      	sub	sp, #20
 8010022:	af00      	add	r7, sp, #0
 8010024:	6078      	str	r0, [r7, #4]
 8010026:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	689b      	ldr	r3, [r3, #8]
 801002c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801002e:	68fb      	ldr	r3, [r7, #12]
 8010030:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010034:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8010036:	683a      	ldr	r2, [r7, #0]
 8010038:	68fb      	ldr	r3, [r7, #12]
 801003a:	4313      	orrs	r3, r2
 801003c:	f043 0307 	orr.w	r3, r3, #7
 8010040:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	68fa      	ldr	r2, [r7, #12]
 8010046:	609a      	str	r2, [r3, #8]
}
 8010048:	bf00      	nop
 801004a:	3714      	adds	r7, #20
 801004c:	46bd      	mov	sp, r7
 801004e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010052:	4770      	bx	lr

08010054 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8010054:	b480      	push	{r7}
 8010056:	b087      	sub	sp, #28
 8010058:	af00      	add	r7, sp, #0
 801005a:	60f8      	str	r0, [r7, #12]
 801005c:	60b9      	str	r1, [r7, #8]
 801005e:	607a      	str	r2, [r7, #4]
 8010060:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8010062:	68fb      	ldr	r3, [r7, #12]
 8010064:	689b      	ldr	r3, [r3, #8]
 8010066:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010068:	697b      	ldr	r3, [r7, #20]
 801006a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801006e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010070:	683b      	ldr	r3, [r7, #0]
 8010072:	021a      	lsls	r2, r3, #8
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	431a      	orrs	r2, r3
 8010078:	68bb      	ldr	r3, [r7, #8]
 801007a:	4313      	orrs	r3, r2
 801007c:	697a      	ldr	r2, [r7, #20]
 801007e:	4313      	orrs	r3, r2
 8010080:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010082:	68fb      	ldr	r3, [r7, #12]
 8010084:	697a      	ldr	r2, [r7, #20]
 8010086:	609a      	str	r2, [r3, #8]
}
 8010088:	bf00      	nop
 801008a:	371c      	adds	r7, #28
 801008c:	46bd      	mov	sp, r7
 801008e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010092:	4770      	bx	lr

08010094 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8010094:	b580      	push	{r7, lr}
 8010096:	b086      	sub	sp, #24
 8010098:	af00      	add	r7, sp, #0
 801009a:	60f8      	str	r0, [r7, #12]
 801009c:	60b9      	str	r1, [r7, #8]
 801009e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 80100a0:	68fb      	ldr	r3, [r7, #12]
 80100a2:	4a2d      	ldr	r2, [pc, #180]	; (8010158 <TIM_CCxChannelCmd+0xc4>)
 80100a4:	4293      	cmp	r3, r2
 80100a6:	d020      	beq.n	80100ea <TIM_CCxChannelCmd+0x56>
 80100a8:	68fb      	ldr	r3, [r7, #12]
 80100aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80100ae:	d01c      	beq.n	80100ea <TIM_CCxChannelCmd+0x56>
 80100b0:	68fb      	ldr	r3, [r7, #12]
 80100b2:	4a2a      	ldr	r2, [pc, #168]	; (801015c <TIM_CCxChannelCmd+0xc8>)
 80100b4:	4293      	cmp	r3, r2
 80100b6:	d018      	beq.n	80100ea <TIM_CCxChannelCmd+0x56>
 80100b8:	68fb      	ldr	r3, [r7, #12]
 80100ba:	4a29      	ldr	r2, [pc, #164]	; (8010160 <TIM_CCxChannelCmd+0xcc>)
 80100bc:	4293      	cmp	r3, r2
 80100be:	d014      	beq.n	80100ea <TIM_CCxChannelCmd+0x56>
 80100c0:	68fb      	ldr	r3, [r7, #12]
 80100c2:	4a28      	ldr	r2, [pc, #160]	; (8010164 <TIM_CCxChannelCmd+0xd0>)
 80100c4:	4293      	cmp	r3, r2
 80100c6:	d010      	beq.n	80100ea <TIM_CCxChannelCmd+0x56>
 80100c8:	68fb      	ldr	r3, [r7, #12]
 80100ca:	4a27      	ldr	r2, [pc, #156]	; (8010168 <TIM_CCxChannelCmd+0xd4>)
 80100cc:	4293      	cmp	r3, r2
 80100ce:	d00c      	beq.n	80100ea <TIM_CCxChannelCmd+0x56>
 80100d0:	68fb      	ldr	r3, [r7, #12]
 80100d2:	4a26      	ldr	r2, [pc, #152]	; (801016c <TIM_CCxChannelCmd+0xd8>)
 80100d4:	4293      	cmp	r3, r2
 80100d6:	d008      	beq.n	80100ea <TIM_CCxChannelCmd+0x56>
 80100d8:	68fb      	ldr	r3, [r7, #12]
 80100da:	4a25      	ldr	r2, [pc, #148]	; (8010170 <TIM_CCxChannelCmd+0xdc>)
 80100dc:	4293      	cmp	r3, r2
 80100de:	d004      	beq.n	80100ea <TIM_CCxChannelCmd+0x56>
 80100e0:	f641 61d1 	movw	r1, #7889	; 0x1ed1
 80100e4:	4823      	ldr	r0, [pc, #140]	; (8010174 <TIM_CCxChannelCmd+0xe0>)
 80100e6:	f7f5 fd54 	bl	8005b92 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 80100ea:	68bb      	ldr	r3, [r7, #8]
 80100ec:	2b00      	cmp	r3, #0
 80100ee:	d016      	beq.n	801011e <TIM_CCxChannelCmd+0x8a>
 80100f0:	68bb      	ldr	r3, [r7, #8]
 80100f2:	2b04      	cmp	r3, #4
 80100f4:	d013      	beq.n	801011e <TIM_CCxChannelCmd+0x8a>
 80100f6:	68bb      	ldr	r3, [r7, #8]
 80100f8:	2b08      	cmp	r3, #8
 80100fa:	d010      	beq.n	801011e <TIM_CCxChannelCmd+0x8a>
 80100fc:	68bb      	ldr	r3, [r7, #8]
 80100fe:	2b0c      	cmp	r3, #12
 8010100:	d00d      	beq.n	801011e <TIM_CCxChannelCmd+0x8a>
 8010102:	68bb      	ldr	r3, [r7, #8]
 8010104:	2b10      	cmp	r3, #16
 8010106:	d00a      	beq.n	801011e <TIM_CCxChannelCmd+0x8a>
 8010108:	68bb      	ldr	r3, [r7, #8]
 801010a:	2b14      	cmp	r3, #20
 801010c:	d007      	beq.n	801011e <TIM_CCxChannelCmd+0x8a>
 801010e:	68bb      	ldr	r3, [r7, #8]
 8010110:	2b3c      	cmp	r3, #60	; 0x3c
 8010112:	d004      	beq.n	801011e <TIM_CCxChannelCmd+0x8a>
 8010114:	f641 61d2 	movw	r1, #7890	; 0x1ed2
 8010118:	4816      	ldr	r0, [pc, #88]	; (8010174 <TIM_CCxChannelCmd+0xe0>)
 801011a:	f7f5 fd3a 	bl	8005b92 <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801011e:	68bb      	ldr	r3, [r7, #8]
 8010120:	f003 031f 	and.w	r3, r3, #31
 8010124:	2201      	movs	r2, #1
 8010126:	fa02 f303 	lsl.w	r3, r2, r3
 801012a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801012c:	68fb      	ldr	r3, [r7, #12]
 801012e:	6a1a      	ldr	r2, [r3, #32]
 8010130:	697b      	ldr	r3, [r7, #20]
 8010132:	43db      	mvns	r3, r3
 8010134:	401a      	ands	r2, r3
 8010136:	68fb      	ldr	r3, [r7, #12]
 8010138:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801013a:	68fb      	ldr	r3, [r7, #12]
 801013c:	6a1a      	ldr	r2, [r3, #32]
 801013e:	68bb      	ldr	r3, [r7, #8]
 8010140:	f003 031f 	and.w	r3, r3, #31
 8010144:	6879      	ldr	r1, [r7, #4]
 8010146:	fa01 f303 	lsl.w	r3, r1, r3
 801014a:	431a      	orrs	r2, r3
 801014c:	68fb      	ldr	r3, [r7, #12]
 801014e:	621a      	str	r2, [r3, #32]
}
 8010150:	bf00      	nop
 8010152:	3718      	adds	r7, #24
 8010154:	46bd      	mov	sp, r7
 8010156:	bd80      	pop	{r7, pc}
 8010158:	40012c00 	.word	0x40012c00
 801015c:	40000400 	.word	0x40000400
 8010160:	40000800 	.word	0x40000800
 8010164:	40013400 	.word	0x40013400
 8010168:	40014000 	.word	0x40014000
 801016c:	40014400 	.word	0x40014400
 8010170:	40014800 	.word	0x40014800
 8010174:	080344b0 	.word	0x080344b0

08010178 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8010178:	b580      	push	{r7, lr}
 801017a:	b084      	sub	sp, #16
 801017c:	af00      	add	r7, sp, #0
 801017e:	6078      	str	r0, [r7, #4]
 8010180:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	681b      	ldr	r3, [r3, #0]
 8010186:	4a32      	ldr	r2, [pc, #200]	; (8010250 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8010188:	4293      	cmp	r3, r2
 801018a:	d027      	beq.n	80101dc <HAL_TIMEx_MasterConfigSynchronization+0x64>
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	681b      	ldr	r3, [r3, #0]
 8010190:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010194:	d022      	beq.n	80101dc <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	681b      	ldr	r3, [r3, #0]
 801019a:	4a2e      	ldr	r2, [pc, #184]	; (8010254 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 801019c:	4293      	cmp	r3, r2
 801019e:	d01d      	beq.n	80101dc <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	681b      	ldr	r3, [r3, #0]
 80101a4:	4a2c      	ldr	r2, [pc, #176]	; (8010258 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80101a6:	4293      	cmp	r3, r2
 80101a8:	d018      	beq.n	80101dc <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	681b      	ldr	r3, [r3, #0]
 80101ae:	4a2b      	ldr	r2, [pc, #172]	; (801025c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80101b0:	4293      	cmp	r3, r2
 80101b2:	d013      	beq.n	80101dc <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	681b      	ldr	r3, [r3, #0]
 80101b8:	4a29      	ldr	r2, [pc, #164]	; (8010260 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80101ba:	4293      	cmp	r3, r2
 80101bc:	d00e      	beq.n	80101dc <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	681b      	ldr	r3, [r3, #0]
 80101c2:	4a28      	ldr	r2, [pc, #160]	; (8010264 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80101c4:	4293      	cmp	r3, r2
 80101c6:	d009      	beq.n	80101dc <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	681b      	ldr	r3, [r3, #0]
 80101cc:	4a26      	ldr	r2, [pc, #152]	; (8010268 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80101ce:	4293      	cmp	r3, r2
 80101d0:	d004      	beq.n	80101dc <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80101d2:	f240 71b4 	movw	r1, #1972	; 0x7b4
 80101d6:	4825      	ldr	r0, [pc, #148]	; (801026c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80101d8:	f7f5 fcdb 	bl	8005b92 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 80101dc:	683b      	ldr	r3, [r7, #0]
 80101de:	681b      	ldr	r3, [r3, #0]
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d020      	beq.n	8010226 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80101e4:	683b      	ldr	r3, [r7, #0]
 80101e6:	681b      	ldr	r3, [r3, #0]
 80101e8:	2b10      	cmp	r3, #16
 80101ea:	d01c      	beq.n	8010226 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80101ec:	683b      	ldr	r3, [r7, #0]
 80101ee:	681b      	ldr	r3, [r3, #0]
 80101f0:	2b20      	cmp	r3, #32
 80101f2:	d018      	beq.n	8010226 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80101f4:	683b      	ldr	r3, [r7, #0]
 80101f6:	681b      	ldr	r3, [r3, #0]
 80101f8:	2b30      	cmp	r3, #48	; 0x30
 80101fa:	d014      	beq.n	8010226 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80101fc:	683b      	ldr	r3, [r7, #0]
 80101fe:	681b      	ldr	r3, [r3, #0]
 8010200:	2b40      	cmp	r3, #64	; 0x40
 8010202:	d010      	beq.n	8010226 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8010204:	683b      	ldr	r3, [r7, #0]
 8010206:	681b      	ldr	r3, [r3, #0]
 8010208:	2b50      	cmp	r3, #80	; 0x50
 801020a:	d00c      	beq.n	8010226 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 801020c:	683b      	ldr	r3, [r7, #0]
 801020e:	681b      	ldr	r3, [r3, #0]
 8010210:	2b60      	cmp	r3, #96	; 0x60
 8010212:	d008      	beq.n	8010226 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8010214:	683b      	ldr	r3, [r7, #0]
 8010216:	681b      	ldr	r3, [r3, #0]
 8010218:	2b70      	cmp	r3, #112	; 0x70
 801021a:	d004      	beq.n	8010226 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 801021c:	f240 71b5 	movw	r1, #1973	; 0x7b5
 8010220:	4812      	ldr	r0, [pc, #72]	; (801026c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8010222:	f7f5 fcb6 	bl	8005b92 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8010226:	683b      	ldr	r3, [r7, #0]
 8010228:	689b      	ldr	r3, [r3, #8]
 801022a:	2b80      	cmp	r3, #128	; 0x80
 801022c:	d008      	beq.n	8010240 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801022e:	683b      	ldr	r3, [r7, #0]
 8010230:	689b      	ldr	r3, [r3, #8]
 8010232:	2b00      	cmp	r3, #0
 8010234:	d004      	beq.n	8010240 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010236:	f240 71b6 	movw	r1, #1974	; 0x7b6
 801023a:	480c      	ldr	r0, [pc, #48]	; (801026c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 801023c:	f7f5 fca9 	bl	8005b92 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010246:	2b01      	cmp	r3, #1
 8010248:	d112      	bne.n	8010270 <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 801024a:	2302      	movs	r3, #2
 801024c:	e0cd      	b.n	80103ea <HAL_TIMEx_MasterConfigSynchronization+0x272>
 801024e:	bf00      	nop
 8010250:	40012c00 	.word	0x40012c00
 8010254:	40000400 	.word	0x40000400
 8010258:	40000800 	.word	0x40000800
 801025c:	40001000 	.word	0x40001000
 8010260:	40001400 	.word	0x40001400
 8010264:	40013400 	.word	0x40013400
 8010268:	40014000 	.word	0x40014000
 801026c:	080344e8 	.word	0x080344e8
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	2201      	movs	r2, #1
 8010274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	2202      	movs	r2, #2
 801027c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	681b      	ldr	r3, [r3, #0]
 8010284:	685b      	ldr	r3, [r3, #4]
 8010286:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	681b      	ldr	r3, [r3, #0]
 801028c:	689b      	ldr	r3, [r3, #8]
 801028e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	681b      	ldr	r3, [r3, #0]
 8010294:	4a57      	ldr	r2, [pc, #348]	; (80103f4 <HAL_TIMEx_MasterConfigSynchronization+0x27c>)
 8010296:	4293      	cmp	r3, r2
 8010298:	d004      	beq.n	80102a4 <HAL_TIMEx_MasterConfigSynchronization+0x12c>
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	681b      	ldr	r3, [r3, #0]
 801029e:	4a56      	ldr	r2, [pc, #344]	; (80103f8 <HAL_TIMEx_MasterConfigSynchronization+0x280>)
 80102a0:	4293      	cmp	r3, r2
 80102a2:	d161      	bne.n	8010368 <HAL_TIMEx_MasterConfigSynchronization+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 80102a4:	683b      	ldr	r3, [r7, #0]
 80102a6:	685b      	ldr	r3, [r3, #4]
 80102a8:	2b00      	cmp	r3, #0
 80102aa:	d054      	beq.n	8010356 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80102ac:	683b      	ldr	r3, [r7, #0]
 80102ae:	685b      	ldr	r3, [r3, #4]
 80102b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80102b4:	d04f      	beq.n	8010356 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80102b6:	683b      	ldr	r3, [r7, #0]
 80102b8:	685b      	ldr	r3, [r3, #4]
 80102ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80102be:	d04a      	beq.n	8010356 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80102c0:	683b      	ldr	r3, [r7, #0]
 80102c2:	685b      	ldr	r3, [r3, #4]
 80102c4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80102c8:	d045      	beq.n	8010356 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80102ca:	683b      	ldr	r3, [r7, #0]
 80102cc:	685b      	ldr	r3, [r3, #4]
 80102ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80102d2:	d040      	beq.n	8010356 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80102d4:	683b      	ldr	r3, [r7, #0]
 80102d6:	685b      	ldr	r3, [r3, #4]
 80102d8:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 80102dc:	d03b      	beq.n	8010356 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80102de:	683b      	ldr	r3, [r7, #0]
 80102e0:	685b      	ldr	r3, [r3, #4]
 80102e2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80102e6:	d036      	beq.n	8010356 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80102e8:	683b      	ldr	r3, [r7, #0]
 80102ea:	685b      	ldr	r3, [r3, #4]
 80102ec:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80102f0:	d031      	beq.n	8010356 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80102f2:	683b      	ldr	r3, [r7, #0]
 80102f4:	685b      	ldr	r3, [r3, #4]
 80102f6:	f5b3 0fe0 	cmp.w	r3, #7340032	; 0x700000
 80102fa:	d02c      	beq.n	8010356 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80102fc:	683b      	ldr	r3, [r7, #0]
 80102fe:	685b      	ldr	r3, [r3, #4]
 8010300:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8010304:	d027      	beq.n	8010356 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8010306:	683b      	ldr	r3, [r7, #0]
 8010308:	685b      	ldr	r3, [r3, #4]
 801030a:	f5b3 0f10 	cmp.w	r3, #9437184	; 0x900000
 801030e:	d022      	beq.n	8010356 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8010310:	683b      	ldr	r3, [r7, #0]
 8010312:	685b      	ldr	r3, [r3, #4]
 8010314:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8010318:	d01d      	beq.n	8010356 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 801031a:	683b      	ldr	r3, [r7, #0]
 801031c:	685b      	ldr	r3, [r3, #4]
 801031e:	f5b3 0f30 	cmp.w	r3, #11534336	; 0xb00000
 8010322:	d018      	beq.n	8010356 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8010324:	683b      	ldr	r3, [r7, #0]
 8010326:	685b      	ldr	r3, [r3, #4]
 8010328:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 801032c:	d013      	beq.n	8010356 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 801032e:	683b      	ldr	r3, [r7, #0]
 8010330:	685b      	ldr	r3, [r3, #4]
 8010332:	f5b3 0f50 	cmp.w	r3, #13631488	; 0xd00000
 8010336:	d00e      	beq.n	8010356 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8010338:	683b      	ldr	r3, [r7, #0]
 801033a:	685b      	ldr	r3, [r3, #4]
 801033c:	f5b3 0f60 	cmp.w	r3, #14680064	; 0xe00000
 8010340:	d009      	beq.n	8010356 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8010342:	683b      	ldr	r3, [r7, #0]
 8010344:	685b      	ldr	r3, [r3, #4]
 8010346:	f5b3 0f70 	cmp.w	r3, #15728640	; 0xf00000
 801034a:	d004      	beq.n	8010356 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 801034c:	f240 71c9 	movw	r1, #1993	; 0x7c9
 8010350:	482a      	ldr	r0, [pc, #168]	; (80103fc <HAL_TIMEx_MasterConfigSynchronization+0x284>)
 8010352:	f7f5 fc1e 	bl	8005b92 <assert_failed>

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8010356:	68fb      	ldr	r3, [r7, #12]
 8010358:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 801035c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 801035e:	683b      	ldr	r3, [r7, #0]
 8010360:	685b      	ldr	r3, [r3, #4]
 8010362:	68fa      	ldr	r2, [r7, #12]
 8010364:	4313      	orrs	r3, r2
 8010366:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8010368:	68fb      	ldr	r3, [r7, #12]
 801036a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801036e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8010370:	683b      	ldr	r3, [r7, #0]
 8010372:	681b      	ldr	r3, [r3, #0]
 8010374:	68fa      	ldr	r2, [r7, #12]
 8010376:	4313      	orrs	r3, r2
 8010378:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	681b      	ldr	r3, [r3, #0]
 801037e:	68fa      	ldr	r2, [r7, #12]
 8010380:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	681b      	ldr	r3, [r3, #0]
 8010386:	4a1b      	ldr	r2, [pc, #108]	; (80103f4 <HAL_TIMEx_MasterConfigSynchronization+0x27c>)
 8010388:	4293      	cmp	r3, r2
 801038a:	d018      	beq.n	80103be <HAL_TIMEx_MasterConfigSynchronization+0x246>
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	681b      	ldr	r3, [r3, #0]
 8010390:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010394:	d013      	beq.n	80103be <HAL_TIMEx_MasterConfigSynchronization+0x246>
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	681b      	ldr	r3, [r3, #0]
 801039a:	4a19      	ldr	r2, [pc, #100]	; (8010400 <HAL_TIMEx_MasterConfigSynchronization+0x288>)
 801039c:	4293      	cmp	r3, r2
 801039e:	d00e      	beq.n	80103be <HAL_TIMEx_MasterConfigSynchronization+0x246>
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	681b      	ldr	r3, [r3, #0]
 80103a4:	4a17      	ldr	r2, [pc, #92]	; (8010404 <HAL_TIMEx_MasterConfigSynchronization+0x28c>)
 80103a6:	4293      	cmp	r3, r2
 80103a8:	d009      	beq.n	80103be <HAL_TIMEx_MasterConfigSynchronization+0x246>
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	681b      	ldr	r3, [r3, #0]
 80103ae:	4a12      	ldr	r2, [pc, #72]	; (80103f8 <HAL_TIMEx_MasterConfigSynchronization+0x280>)
 80103b0:	4293      	cmp	r3, r2
 80103b2:	d004      	beq.n	80103be <HAL_TIMEx_MasterConfigSynchronization+0x246>
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	681b      	ldr	r3, [r3, #0]
 80103b8:	4a13      	ldr	r2, [pc, #76]	; (8010408 <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 80103ba:	4293      	cmp	r3, r2
 80103bc:	d10c      	bne.n	80103d8 <HAL_TIMEx_MasterConfigSynchronization+0x260>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80103be:	68bb      	ldr	r3, [r7, #8]
 80103c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80103c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80103c6:	683b      	ldr	r3, [r7, #0]
 80103c8:	689b      	ldr	r3, [r3, #8]
 80103ca:	68ba      	ldr	r2, [r7, #8]
 80103cc:	4313      	orrs	r3, r2
 80103ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	681b      	ldr	r3, [r3, #0]
 80103d4:	68ba      	ldr	r2, [r7, #8]
 80103d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	2201      	movs	r2, #1
 80103dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	2200      	movs	r2, #0
 80103e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80103e8:	2300      	movs	r3, #0
}
 80103ea:	4618      	mov	r0, r3
 80103ec:	3710      	adds	r7, #16
 80103ee:	46bd      	mov	sp, r7
 80103f0:	bd80      	pop	{r7, pc}
 80103f2:	bf00      	nop
 80103f4:	40012c00 	.word	0x40012c00
 80103f8:	40013400 	.word	0x40013400
 80103fc:	080344e8 	.word	0x080344e8
 8010400:	40000400 	.word	0x40000400
 8010404:	40000800 	.word	0x40000800
 8010408:	40014000 	.word	0x40014000

0801040c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801040c:	b580      	push	{r7, lr}
 801040e:	b082      	sub	sp, #8
 8010410:	af00      	add	r7, sp, #0
 8010412:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	2b00      	cmp	r3, #0
 8010418:	d101      	bne.n	801041e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801041a:	2301      	movs	r3, #1
 801041c:	e077      	b.n	801050e <HAL_UART_Init+0x102>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	699b      	ldr	r3, [r3, #24]
 8010422:	2b00      	cmp	r3, #0
 8010424:	d014      	beq.n	8010450 <HAL_UART_Init+0x44>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	681b      	ldr	r3, [r3, #0]
 801042a:	4a3b      	ldr	r2, [pc, #236]	; (8010518 <HAL_UART_Init+0x10c>)
 801042c:	4293      	cmp	r3, r2
 801042e:	d02d      	beq.n	801048c <HAL_UART_Init+0x80>
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	681b      	ldr	r3, [r3, #0]
 8010434:	4a39      	ldr	r2, [pc, #228]	; (801051c <HAL_UART_Init+0x110>)
 8010436:	4293      	cmp	r3, r2
 8010438:	d028      	beq.n	801048c <HAL_UART_Init+0x80>
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	681b      	ldr	r3, [r3, #0]
 801043e:	4a38      	ldr	r2, [pc, #224]	; (8010520 <HAL_UART_Init+0x114>)
 8010440:	4293      	cmp	r3, r2
 8010442:	d023      	beq.n	801048c <HAL_UART_Init+0x80>
 8010444:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8010448:	4836      	ldr	r0, [pc, #216]	; (8010524 <HAL_UART_Init+0x118>)
 801044a:	f7f5 fba2 	bl	8005b92 <assert_failed>
 801044e:	e01d      	b.n	801048c <HAL_UART_Init+0x80>
  }
  else
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	681b      	ldr	r3, [r3, #0]
 8010454:	4a30      	ldr	r2, [pc, #192]	; (8010518 <HAL_UART_Init+0x10c>)
 8010456:	4293      	cmp	r3, r2
 8010458:	d018      	beq.n	801048c <HAL_UART_Init+0x80>
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	681b      	ldr	r3, [r3, #0]
 801045e:	4a2f      	ldr	r2, [pc, #188]	; (801051c <HAL_UART_Init+0x110>)
 8010460:	4293      	cmp	r3, r2
 8010462:	d013      	beq.n	801048c <HAL_UART_Init+0x80>
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	681b      	ldr	r3, [r3, #0]
 8010468:	4a2d      	ldr	r2, [pc, #180]	; (8010520 <HAL_UART_Init+0x114>)
 801046a:	4293      	cmp	r3, r2
 801046c:	d00e      	beq.n	801048c <HAL_UART_Init+0x80>
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	681b      	ldr	r3, [r3, #0]
 8010472:	4a2d      	ldr	r2, [pc, #180]	; (8010528 <HAL_UART_Init+0x11c>)
 8010474:	4293      	cmp	r3, r2
 8010476:	d009      	beq.n	801048c <HAL_UART_Init+0x80>
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	681b      	ldr	r3, [r3, #0]
 801047c:	4a2b      	ldr	r2, [pc, #172]	; (801052c <HAL_UART_Init+0x120>)
 801047e:	4293      	cmp	r3, r2
 8010480:	d004      	beq.n	801048c <HAL_UART_Init+0x80>
 8010482:	f240 1131 	movw	r1, #305	; 0x131
 8010486:	4827      	ldr	r0, [pc, #156]	; (8010524 <HAL_UART_Init+0x118>)
 8010488:	f7f5 fb83 	bl	8005b92 <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010490:	2b00      	cmp	r3, #0
 8010492:	d106      	bne.n	80104a2 <HAL_UART_Init+0x96>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	2200      	movs	r2, #0
 8010498:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801049c:	6878      	ldr	r0, [r7, #4]
 801049e:	f7f7 fa99 	bl	80079d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	2224      	movs	r2, #36	; 0x24
 80104a6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	681b      	ldr	r3, [r3, #0]
 80104ac:	681a      	ldr	r2, [r3, #0]
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	681b      	ldr	r3, [r3, #0]
 80104b2:	f022 0201 	bic.w	r2, r2, #1
 80104b6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80104b8:	6878      	ldr	r0, [r7, #4]
 80104ba:	f000 f8cd 	bl	8010658 <UART_SetConfig>
 80104be:	4603      	mov	r3, r0
 80104c0:	2b01      	cmp	r3, #1
 80104c2:	d101      	bne.n	80104c8 <HAL_UART_Init+0xbc>
  {
    return HAL_ERROR;
 80104c4:	2301      	movs	r3, #1
 80104c6:	e022      	b.n	801050e <HAL_UART_Init+0x102>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d002      	beq.n	80104d6 <HAL_UART_Init+0xca>
  {
    UART_AdvFeatureConfig(huart);
 80104d0:	6878      	ldr	r0, [r7, #4]
 80104d2:	f000 fb21 	bl	8010b18 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	681b      	ldr	r3, [r3, #0]
 80104da:	685a      	ldr	r2, [r3, #4]
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	681b      	ldr	r3, [r3, #0]
 80104e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80104e4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	681b      	ldr	r3, [r3, #0]
 80104ea:	689a      	ldr	r2, [r3, #8]
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	681b      	ldr	r3, [r3, #0]
 80104f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80104f4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	681b      	ldr	r3, [r3, #0]
 80104fa:	681a      	ldr	r2, [r3, #0]
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	681b      	ldr	r3, [r3, #0]
 8010500:	f042 0201 	orr.w	r2, r2, #1
 8010504:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8010506:	6878      	ldr	r0, [r7, #4]
 8010508:	f000 fc56 	bl	8010db8 <UART_CheckIdleState>
 801050c:	4603      	mov	r3, r0
}
 801050e:	4618      	mov	r0, r3
 8010510:	3708      	adds	r7, #8
 8010512:	46bd      	mov	sp, r7
 8010514:	bd80      	pop	{r7, pc}
 8010516:	bf00      	nop
 8010518:	40013800 	.word	0x40013800
 801051c:	40004400 	.word	0x40004400
 8010520:	40004800 	.word	0x40004800
 8010524:	08034524 	.word	0x08034524
 8010528:	40004c00 	.word	0x40004c00
 801052c:	40005000 	.word	0x40005000

08010530 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010530:	b580      	push	{r7, lr}
 8010532:	b08a      	sub	sp, #40	; 0x28
 8010534:	af02      	add	r7, sp, #8
 8010536:	60f8      	str	r0, [r7, #12]
 8010538:	60b9      	str	r1, [r7, #8]
 801053a:	603b      	str	r3, [r7, #0]
 801053c:	4613      	mov	r3, r2
 801053e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8010540:	68fb      	ldr	r3, [r7, #12]
 8010542:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010544:	2b20      	cmp	r3, #32
 8010546:	f040 8082 	bne.w	801064e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 801054a:	68bb      	ldr	r3, [r7, #8]
 801054c:	2b00      	cmp	r3, #0
 801054e:	d002      	beq.n	8010556 <HAL_UART_Transmit+0x26>
 8010550:	88fb      	ldrh	r3, [r7, #6]
 8010552:	2b00      	cmp	r3, #0
 8010554:	d101      	bne.n	801055a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8010556:	2301      	movs	r3, #1
 8010558:	e07a      	b.n	8010650 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 801055a:	68fb      	ldr	r3, [r7, #12]
 801055c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8010560:	2b01      	cmp	r3, #1
 8010562:	d101      	bne.n	8010568 <HAL_UART_Transmit+0x38>
 8010564:	2302      	movs	r3, #2
 8010566:	e073      	b.n	8010650 <HAL_UART_Transmit+0x120>
 8010568:	68fb      	ldr	r3, [r7, #12]
 801056a:	2201      	movs	r2, #1
 801056c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010570:	68fb      	ldr	r3, [r7, #12]
 8010572:	2200      	movs	r2, #0
 8010574:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010578:	68fb      	ldr	r3, [r7, #12]
 801057a:	2221      	movs	r2, #33	; 0x21
 801057c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801057e:	f7f7 faef 	bl	8007b60 <HAL_GetTick>
 8010582:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8010584:	68fb      	ldr	r3, [r7, #12]
 8010586:	88fa      	ldrh	r2, [r7, #6]
 8010588:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 801058c:	68fb      	ldr	r3, [r7, #12]
 801058e:	88fa      	ldrh	r2, [r7, #6]
 8010590:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010594:	68fb      	ldr	r3, [r7, #12]
 8010596:	689b      	ldr	r3, [r3, #8]
 8010598:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801059c:	d108      	bne.n	80105b0 <HAL_UART_Transmit+0x80>
 801059e:	68fb      	ldr	r3, [r7, #12]
 80105a0:	691b      	ldr	r3, [r3, #16]
 80105a2:	2b00      	cmp	r3, #0
 80105a4:	d104      	bne.n	80105b0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80105a6:	2300      	movs	r3, #0
 80105a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80105aa:	68bb      	ldr	r3, [r7, #8]
 80105ac:	61bb      	str	r3, [r7, #24]
 80105ae:	e003      	b.n	80105b8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80105b0:	68bb      	ldr	r3, [r7, #8]
 80105b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80105b4:	2300      	movs	r3, #0
 80105b6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80105b8:	68fb      	ldr	r3, [r7, #12]
 80105ba:	2200      	movs	r2, #0
 80105bc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80105c0:	e02d      	b.n	801061e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80105c2:	683b      	ldr	r3, [r7, #0]
 80105c4:	9300      	str	r3, [sp, #0]
 80105c6:	697b      	ldr	r3, [r7, #20]
 80105c8:	2200      	movs	r2, #0
 80105ca:	2180      	movs	r1, #128	; 0x80
 80105cc:	68f8      	ldr	r0, [r7, #12]
 80105ce:	f000 fc3c 	bl	8010e4a <UART_WaitOnFlagUntilTimeout>
 80105d2:	4603      	mov	r3, r0
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d001      	beq.n	80105dc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80105d8:	2303      	movs	r3, #3
 80105da:	e039      	b.n	8010650 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80105dc:	69fb      	ldr	r3, [r7, #28]
 80105de:	2b00      	cmp	r3, #0
 80105e0:	d10b      	bne.n	80105fa <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80105e2:	69bb      	ldr	r3, [r7, #24]
 80105e4:	881a      	ldrh	r2, [r3, #0]
 80105e6:	68fb      	ldr	r3, [r7, #12]
 80105e8:	681b      	ldr	r3, [r3, #0]
 80105ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80105ee:	b292      	uxth	r2, r2
 80105f0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80105f2:	69bb      	ldr	r3, [r7, #24]
 80105f4:	3302      	adds	r3, #2
 80105f6:	61bb      	str	r3, [r7, #24]
 80105f8:	e008      	b.n	801060c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80105fa:	69fb      	ldr	r3, [r7, #28]
 80105fc:	781a      	ldrb	r2, [r3, #0]
 80105fe:	68fb      	ldr	r3, [r7, #12]
 8010600:	681b      	ldr	r3, [r3, #0]
 8010602:	b292      	uxth	r2, r2
 8010604:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8010606:	69fb      	ldr	r3, [r7, #28]
 8010608:	3301      	adds	r3, #1
 801060a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801060c:	68fb      	ldr	r3, [r7, #12]
 801060e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8010612:	b29b      	uxth	r3, r3
 8010614:	3b01      	subs	r3, #1
 8010616:	b29a      	uxth	r2, r3
 8010618:	68fb      	ldr	r3, [r7, #12]
 801061a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 801061e:	68fb      	ldr	r3, [r7, #12]
 8010620:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8010624:	b29b      	uxth	r3, r3
 8010626:	2b00      	cmp	r3, #0
 8010628:	d1cb      	bne.n	80105c2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801062a:	683b      	ldr	r3, [r7, #0]
 801062c:	9300      	str	r3, [sp, #0]
 801062e:	697b      	ldr	r3, [r7, #20]
 8010630:	2200      	movs	r2, #0
 8010632:	2140      	movs	r1, #64	; 0x40
 8010634:	68f8      	ldr	r0, [r7, #12]
 8010636:	f000 fc08 	bl	8010e4a <UART_WaitOnFlagUntilTimeout>
 801063a:	4603      	mov	r3, r0
 801063c:	2b00      	cmp	r3, #0
 801063e:	d001      	beq.n	8010644 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8010640:	2303      	movs	r3, #3
 8010642:	e005      	b.n	8010650 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8010644:	68fb      	ldr	r3, [r7, #12]
 8010646:	2220      	movs	r2, #32
 8010648:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 801064a:	2300      	movs	r3, #0
 801064c:	e000      	b.n	8010650 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 801064e:	2302      	movs	r3, #2
  }
}
 8010650:	4618      	mov	r0, r3
 8010652:	3720      	adds	r7, #32
 8010654:	46bd      	mov	sp, r7
 8010656:	bd80      	pop	{r7, pc}

08010658 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010658:	b580      	push	{r7, lr}
 801065a:	b088      	sub	sp, #32
 801065c:	af00      	add	r7, sp, #0
 801065e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8010660:	2300      	movs	r3, #0
 8010662:	77bb      	strb	r3, [r7, #30]
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	685b      	ldr	r3, [r3, #4]
 8010668:	4a99      	ldr	r2, [pc, #612]	; (80108d0 <UART_SetConfig+0x278>)
 801066a:	4293      	cmp	r3, r2
 801066c:	d904      	bls.n	8010678 <UART_SetConfig+0x20>
 801066e:	f640 313f 	movw	r1, #2879	; 0xb3f
 8010672:	4898      	ldr	r0, [pc, #608]	; (80108d4 <UART_SetConfig+0x27c>)
 8010674:	f7f5 fa8d 	bl	8005b92 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	689b      	ldr	r3, [r3, #8]
 801067c:	2b00      	cmp	r3, #0
 801067e:	d009      	beq.n	8010694 <UART_SetConfig+0x3c>
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	689b      	ldr	r3, [r3, #8]
 8010684:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010688:	d004      	beq.n	8010694 <UART_SetConfig+0x3c>
 801068a:	f44f 6134 	mov.w	r1, #2880	; 0xb40
 801068e:	4891      	ldr	r0, [pc, #580]	; (80108d4 <UART_SetConfig+0x27c>)
 8010690:	f7f5 fa7f 	bl	8005b92 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	68db      	ldr	r3, [r3, #12]
 8010698:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801069c:	d012      	beq.n	80106c4 <UART_SetConfig+0x6c>
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	68db      	ldr	r3, [r3, #12]
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	d00e      	beq.n	80106c4 <UART_SetConfig+0x6c>
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	68db      	ldr	r3, [r3, #12]
 80106aa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80106ae:	d009      	beq.n	80106c4 <UART_SetConfig+0x6c>
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	68db      	ldr	r3, [r3, #12]
 80106b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80106b8:	d004      	beq.n	80106c4 <UART_SetConfig+0x6c>
 80106ba:	f640 3141 	movw	r1, #2881	; 0xb41
 80106be:	4885      	ldr	r0, [pc, #532]	; (80108d4 <UART_SetConfig+0x27c>)
 80106c0:	f7f5 fa67 	bl	8005b92 <assert_failed>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	6a1b      	ldr	r3, [r3, #32]
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	d009      	beq.n	80106e0 <UART_SetConfig+0x88>
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	6a1b      	ldr	r3, [r3, #32]
 80106d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80106d4:	d004      	beq.n	80106e0 <UART_SetConfig+0x88>
 80106d6:	f640 3142 	movw	r1, #2882	; 0xb42
 80106da:	487e      	ldr	r0, [pc, #504]	; (80108d4 <UART_SetConfig+0x27c>)
 80106dc:	f7f5 fa59 	bl	8005b92 <assert_failed>

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	691b      	ldr	r3, [r3, #16]
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	d00e      	beq.n	8010706 <UART_SetConfig+0xae>
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	691b      	ldr	r3, [r3, #16]
 80106ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80106f0:	d009      	beq.n	8010706 <UART_SetConfig+0xae>
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	691b      	ldr	r3, [r3, #16]
 80106f6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80106fa:	d004      	beq.n	8010706 <UART_SetConfig+0xae>
 80106fc:	f640 3144 	movw	r1, #2884	; 0xb44
 8010700:	4874      	ldr	r0, [pc, #464]	; (80108d4 <UART_SetConfig+0x27c>)
 8010702:	f7f5 fa46 	bl	8005b92 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	695b      	ldr	r3, [r3, #20]
 801070a:	f023 030c 	bic.w	r3, r3, #12
 801070e:	2b00      	cmp	r3, #0
 8010710:	d103      	bne.n	801071a <UART_SetConfig+0xc2>
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	695b      	ldr	r3, [r3, #20]
 8010716:	2b00      	cmp	r3, #0
 8010718:	d104      	bne.n	8010724 <UART_SetConfig+0xcc>
 801071a:	f640 3145 	movw	r1, #2885	; 0xb45
 801071e:	486d      	ldr	r0, [pc, #436]	; (80108d4 <UART_SetConfig+0x27c>)
 8010720:	f7f5 fa37 	bl	8005b92 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	699b      	ldr	r3, [r3, #24]
 8010728:	2b00      	cmp	r3, #0
 801072a:	d013      	beq.n	8010754 <UART_SetConfig+0xfc>
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	699b      	ldr	r3, [r3, #24]
 8010730:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010734:	d00e      	beq.n	8010754 <UART_SetConfig+0xfc>
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	699b      	ldr	r3, [r3, #24]
 801073a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801073e:	d009      	beq.n	8010754 <UART_SetConfig+0xfc>
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	699b      	ldr	r3, [r3, #24]
 8010744:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010748:	d004      	beq.n	8010754 <UART_SetConfig+0xfc>
 801074a:	f640 3146 	movw	r1, #2886	; 0xb46
 801074e:	4861      	ldr	r0, [pc, #388]	; (80108d4 <UART_SetConfig+0x27c>)
 8010750:	f7f5 fa1f 	bl	8005b92 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	69db      	ldr	r3, [r3, #28]
 8010758:	2b00      	cmp	r3, #0
 801075a:	d009      	beq.n	8010770 <UART_SetConfig+0x118>
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	69db      	ldr	r3, [r3, #28]
 8010760:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010764:	d004      	beq.n	8010770 <UART_SetConfig+0x118>
 8010766:	f640 3147 	movw	r1, #2887	; 0xb47
 801076a:	485a      	ldr	r0, [pc, #360]	; (80108d4 <UART_SetConfig+0x27c>)
 801076c:	f7f5 fa11 	bl	8005b92 <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	689a      	ldr	r2, [r3, #8]
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	691b      	ldr	r3, [r3, #16]
 8010778:	431a      	orrs	r2, r3
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	695b      	ldr	r3, [r3, #20]
 801077e:	431a      	orrs	r2, r3
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	69db      	ldr	r3, [r3, #28]
 8010784:	4313      	orrs	r3, r2
 8010786:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	681b      	ldr	r3, [r3, #0]
 801078c:	681b      	ldr	r3, [r3, #0]
 801078e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8010792:	f023 030c 	bic.w	r3, r3, #12
 8010796:	687a      	ldr	r2, [r7, #4]
 8010798:	6812      	ldr	r2, [r2, #0]
 801079a:	6979      	ldr	r1, [r7, #20]
 801079c:	430b      	orrs	r3, r1
 801079e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	681b      	ldr	r3, [r3, #0]
 80107a4:	685b      	ldr	r3, [r3, #4]
 80107a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	68da      	ldr	r2, [r3, #12]
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	681b      	ldr	r3, [r3, #0]
 80107b2:	430a      	orrs	r2, r1
 80107b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	699b      	ldr	r3, [r3, #24]
 80107ba:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	6a1b      	ldr	r3, [r3, #32]
 80107c0:	697a      	ldr	r2, [r7, #20]
 80107c2:	4313      	orrs	r3, r2
 80107c4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	681b      	ldr	r3, [r3, #0]
 80107ca:	689b      	ldr	r3, [r3, #8]
 80107cc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	681b      	ldr	r3, [r3, #0]
 80107d4:	697a      	ldr	r2, [r7, #20]
 80107d6:	430a      	orrs	r2, r1
 80107d8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	681b      	ldr	r3, [r3, #0]
 80107de:	4a3e      	ldr	r2, [pc, #248]	; (80108d8 <UART_SetConfig+0x280>)
 80107e0:	4293      	cmp	r3, r2
 80107e2:	d120      	bne.n	8010826 <UART_SetConfig+0x1ce>
 80107e4:	4b3d      	ldr	r3, [pc, #244]	; (80108dc <UART_SetConfig+0x284>)
 80107e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80107e8:	f003 0303 	and.w	r3, r3, #3
 80107ec:	2b03      	cmp	r3, #3
 80107ee:	d817      	bhi.n	8010820 <UART_SetConfig+0x1c8>
 80107f0:	a201      	add	r2, pc, #4	; (adr r2, 80107f8 <UART_SetConfig+0x1a0>)
 80107f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80107f6:	bf00      	nop
 80107f8:	08010809 	.word	0x08010809
 80107fc:	08010815 	.word	0x08010815
 8010800:	0801081b 	.word	0x0801081b
 8010804:	0801080f 	.word	0x0801080f
 8010808:	2301      	movs	r3, #1
 801080a:	77fb      	strb	r3, [r7, #31]
 801080c:	e0c2      	b.n	8010994 <UART_SetConfig+0x33c>
 801080e:	2302      	movs	r3, #2
 8010810:	77fb      	strb	r3, [r7, #31]
 8010812:	e0bf      	b.n	8010994 <UART_SetConfig+0x33c>
 8010814:	2304      	movs	r3, #4
 8010816:	77fb      	strb	r3, [r7, #31]
 8010818:	e0bc      	b.n	8010994 <UART_SetConfig+0x33c>
 801081a:	2308      	movs	r3, #8
 801081c:	77fb      	strb	r3, [r7, #31]
 801081e:	e0b9      	b.n	8010994 <UART_SetConfig+0x33c>
 8010820:	2310      	movs	r3, #16
 8010822:	77fb      	strb	r3, [r7, #31]
 8010824:	e0b6      	b.n	8010994 <UART_SetConfig+0x33c>
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	681b      	ldr	r3, [r3, #0]
 801082a:	4a2d      	ldr	r2, [pc, #180]	; (80108e0 <UART_SetConfig+0x288>)
 801082c:	4293      	cmp	r3, r2
 801082e:	d124      	bne.n	801087a <UART_SetConfig+0x222>
 8010830:	4b2a      	ldr	r3, [pc, #168]	; (80108dc <UART_SetConfig+0x284>)
 8010832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010834:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8010838:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 801083c:	d011      	beq.n	8010862 <UART_SetConfig+0x20a>
 801083e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8010842:	d817      	bhi.n	8010874 <UART_SetConfig+0x21c>
 8010844:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010848:	d011      	beq.n	801086e <UART_SetConfig+0x216>
 801084a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801084e:	d811      	bhi.n	8010874 <UART_SetConfig+0x21c>
 8010850:	2b00      	cmp	r3, #0
 8010852:	d003      	beq.n	801085c <UART_SetConfig+0x204>
 8010854:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010858:	d006      	beq.n	8010868 <UART_SetConfig+0x210>
 801085a:	e00b      	b.n	8010874 <UART_SetConfig+0x21c>
 801085c:	2300      	movs	r3, #0
 801085e:	77fb      	strb	r3, [r7, #31]
 8010860:	e098      	b.n	8010994 <UART_SetConfig+0x33c>
 8010862:	2302      	movs	r3, #2
 8010864:	77fb      	strb	r3, [r7, #31]
 8010866:	e095      	b.n	8010994 <UART_SetConfig+0x33c>
 8010868:	2304      	movs	r3, #4
 801086a:	77fb      	strb	r3, [r7, #31]
 801086c:	e092      	b.n	8010994 <UART_SetConfig+0x33c>
 801086e:	2308      	movs	r3, #8
 8010870:	77fb      	strb	r3, [r7, #31]
 8010872:	e08f      	b.n	8010994 <UART_SetConfig+0x33c>
 8010874:	2310      	movs	r3, #16
 8010876:	77fb      	strb	r3, [r7, #31]
 8010878:	e08c      	b.n	8010994 <UART_SetConfig+0x33c>
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	681b      	ldr	r3, [r3, #0]
 801087e:	4a19      	ldr	r2, [pc, #100]	; (80108e4 <UART_SetConfig+0x28c>)
 8010880:	4293      	cmp	r3, r2
 8010882:	d131      	bne.n	80108e8 <UART_SetConfig+0x290>
 8010884:	4b15      	ldr	r3, [pc, #84]	; (80108dc <UART_SetConfig+0x284>)
 8010886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010888:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 801088c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8010890:	d011      	beq.n	80108b6 <UART_SetConfig+0x25e>
 8010892:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8010896:	d817      	bhi.n	80108c8 <UART_SetConfig+0x270>
 8010898:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 801089c:	d011      	beq.n	80108c2 <UART_SetConfig+0x26a>
 801089e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80108a2:	d811      	bhi.n	80108c8 <UART_SetConfig+0x270>
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d003      	beq.n	80108b0 <UART_SetConfig+0x258>
 80108a8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80108ac:	d006      	beq.n	80108bc <UART_SetConfig+0x264>
 80108ae:	e00b      	b.n	80108c8 <UART_SetConfig+0x270>
 80108b0:	2300      	movs	r3, #0
 80108b2:	77fb      	strb	r3, [r7, #31]
 80108b4:	e06e      	b.n	8010994 <UART_SetConfig+0x33c>
 80108b6:	2302      	movs	r3, #2
 80108b8:	77fb      	strb	r3, [r7, #31]
 80108ba:	e06b      	b.n	8010994 <UART_SetConfig+0x33c>
 80108bc:	2304      	movs	r3, #4
 80108be:	77fb      	strb	r3, [r7, #31]
 80108c0:	e068      	b.n	8010994 <UART_SetConfig+0x33c>
 80108c2:	2308      	movs	r3, #8
 80108c4:	77fb      	strb	r3, [r7, #31]
 80108c6:	e065      	b.n	8010994 <UART_SetConfig+0x33c>
 80108c8:	2310      	movs	r3, #16
 80108ca:	77fb      	strb	r3, [r7, #31]
 80108cc:	e062      	b.n	8010994 <UART_SetConfig+0x33c>
 80108ce:	bf00      	nop
 80108d0:	00895440 	.word	0x00895440
 80108d4:	08034524 	.word	0x08034524
 80108d8:	40013800 	.word	0x40013800
 80108dc:	40021000 	.word	0x40021000
 80108e0:	40004400 	.word	0x40004400
 80108e4:	40004800 	.word	0x40004800
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	681b      	ldr	r3, [r3, #0]
 80108ec:	4a86      	ldr	r2, [pc, #536]	; (8010b08 <UART_SetConfig+0x4b0>)
 80108ee:	4293      	cmp	r3, r2
 80108f0:	d124      	bne.n	801093c <UART_SetConfig+0x2e4>
 80108f2:	4b86      	ldr	r3, [pc, #536]	; (8010b0c <UART_SetConfig+0x4b4>)
 80108f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80108f6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80108fa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80108fe:	d011      	beq.n	8010924 <UART_SetConfig+0x2cc>
 8010900:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8010904:	d817      	bhi.n	8010936 <UART_SetConfig+0x2de>
 8010906:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801090a:	d011      	beq.n	8010930 <UART_SetConfig+0x2d8>
 801090c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010910:	d811      	bhi.n	8010936 <UART_SetConfig+0x2de>
 8010912:	2b00      	cmp	r3, #0
 8010914:	d003      	beq.n	801091e <UART_SetConfig+0x2c6>
 8010916:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801091a:	d006      	beq.n	801092a <UART_SetConfig+0x2d2>
 801091c:	e00b      	b.n	8010936 <UART_SetConfig+0x2de>
 801091e:	2300      	movs	r3, #0
 8010920:	77fb      	strb	r3, [r7, #31]
 8010922:	e037      	b.n	8010994 <UART_SetConfig+0x33c>
 8010924:	2302      	movs	r3, #2
 8010926:	77fb      	strb	r3, [r7, #31]
 8010928:	e034      	b.n	8010994 <UART_SetConfig+0x33c>
 801092a:	2304      	movs	r3, #4
 801092c:	77fb      	strb	r3, [r7, #31]
 801092e:	e031      	b.n	8010994 <UART_SetConfig+0x33c>
 8010930:	2308      	movs	r3, #8
 8010932:	77fb      	strb	r3, [r7, #31]
 8010934:	e02e      	b.n	8010994 <UART_SetConfig+0x33c>
 8010936:	2310      	movs	r3, #16
 8010938:	77fb      	strb	r3, [r7, #31]
 801093a:	e02b      	b.n	8010994 <UART_SetConfig+0x33c>
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	4a73      	ldr	r2, [pc, #460]	; (8010b10 <UART_SetConfig+0x4b8>)
 8010942:	4293      	cmp	r3, r2
 8010944:	d124      	bne.n	8010990 <UART_SetConfig+0x338>
 8010946:	4b71      	ldr	r3, [pc, #452]	; (8010b0c <UART_SetConfig+0x4b4>)
 8010948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801094a:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 801094e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8010952:	d011      	beq.n	8010978 <UART_SetConfig+0x320>
 8010954:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8010958:	d817      	bhi.n	801098a <UART_SetConfig+0x332>
 801095a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801095e:	d011      	beq.n	8010984 <UART_SetConfig+0x32c>
 8010960:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8010964:	d811      	bhi.n	801098a <UART_SetConfig+0x332>
 8010966:	2b00      	cmp	r3, #0
 8010968:	d003      	beq.n	8010972 <UART_SetConfig+0x31a>
 801096a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801096e:	d006      	beq.n	801097e <UART_SetConfig+0x326>
 8010970:	e00b      	b.n	801098a <UART_SetConfig+0x332>
 8010972:	2300      	movs	r3, #0
 8010974:	77fb      	strb	r3, [r7, #31]
 8010976:	e00d      	b.n	8010994 <UART_SetConfig+0x33c>
 8010978:	2302      	movs	r3, #2
 801097a:	77fb      	strb	r3, [r7, #31]
 801097c:	e00a      	b.n	8010994 <UART_SetConfig+0x33c>
 801097e:	2304      	movs	r3, #4
 8010980:	77fb      	strb	r3, [r7, #31]
 8010982:	e007      	b.n	8010994 <UART_SetConfig+0x33c>
 8010984:	2308      	movs	r3, #8
 8010986:	77fb      	strb	r3, [r7, #31]
 8010988:	e004      	b.n	8010994 <UART_SetConfig+0x33c>
 801098a:	2310      	movs	r3, #16
 801098c:	77fb      	strb	r3, [r7, #31]
 801098e:	e001      	b.n	8010994 <UART_SetConfig+0x33c>
 8010990:	2310      	movs	r3, #16
 8010992:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	69db      	ldr	r3, [r3, #28]
 8010998:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801099c:	d15c      	bne.n	8010a58 <UART_SetConfig+0x400>
  {
    switch (clocksource)
 801099e:	7ffb      	ldrb	r3, [r7, #31]
 80109a0:	2b08      	cmp	r3, #8
 80109a2:	d828      	bhi.n	80109f6 <UART_SetConfig+0x39e>
 80109a4:	a201      	add	r2, pc, #4	; (adr r2, 80109ac <UART_SetConfig+0x354>)
 80109a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80109aa:	bf00      	nop
 80109ac:	080109d1 	.word	0x080109d1
 80109b0:	080109d9 	.word	0x080109d9
 80109b4:	080109e1 	.word	0x080109e1
 80109b8:	080109f7 	.word	0x080109f7
 80109bc:	080109e7 	.word	0x080109e7
 80109c0:	080109f7 	.word	0x080109f7
 80109c4:	080109f7 	.word	0x080109f7
 80109c8:	080109f7 	.word	0x080109f7
 80109cc:	080109ef 	.word	0x080109ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80109d0:	f7fd f8d2 	bl	800db78 <HAL_RCC_GetPCLK1Freq>
 80109d4:	61b8      	str	r0, [r7, #24]
        break;
 80109d6:	e013      	b.n	8010a00 <UART_SetConfig+0x3a8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80109d8:	f7fd f8f0 	bl	800dbbc <HAL_RCC_GetPCLK2Freq>
 80109dc:	61b8      	str	r0, [r7, #24]
        break;
 80109de:	e00f      	b.n	8010a00 <UART_SetConfig+0x3a8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80109e0:	4b4c      	ldr	r3, [pc, #304]	; (8010b14 <UART_SetConfig+0x4bc>)
 80109e2:	61bb      	str	r3, [r7, #24]
        break;
 80109e4:	e00c      	b.n	8010a00 <UART_SetConfig+0x3a8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80109e6:	f7fd f851 	bl	800da8c <HAL_RCC_GetSysClockFreq>
 80109ea:	61b8      	str	r0, [r7, #24]
        break;
 80109ec:	e008      	b.n	8010a00 <UART_SetConfig+0x3a8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80109ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80109f2:	61bb      	str	r3, [r7, #24]
        break;
 80109f4:	e004      	b.n	8010a00 <UART_SetConfig+0x3a8>
      default:
        pclk = 0U;
 80109f6:	2300      	movs	r3, #0
 80109f8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80109fa:	2301      	movs	r3, #1
 80109fc:	77bb      	strb	r3, [r7, #30]
        break;
 80109fe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010a00:	69bb      	ldr	r3, [r7, #24]
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	d074      	beq.n	8010af0 <UART_SetConfig+0x498>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8010a06:	69bb      	ldr	r3, [r7, #24]
 8010a08:	005a      	lsls	r2, r3, #1
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	685b      	ldr	r3, [r3, #4]
 8010a0e:	085b      	lsrs	r3, r3, #1
 8010a10:	441a      	add	r2, r3
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	685b      	ldr	r3, [r3, #4]
 8010a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8010a1a:	b29b      	uxth	r3, r3
 8010a1c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010a1e:	693b      	ldr	r3, [r7, #16]
 8010a20:	2b0f      	cmp	r3, #15
 8010a22:	d916      	bls.n	8010a52 <UART_SetConfig+0x3fa>
 8010a24:	693b      	ldr	r3, [r7, #16]
 8010a26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010a2a:	d212      	bcs.n	8010a52 <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010a2c:	693b      	ldr	r3, [r7, #16]
 8010a2e:	b29b      	uxth	r3, r3
 8010a30:	f023 030f 	bic.w	r3, r3, #15
 8010a34:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010a36:	693b      	ldr	r3, [r7, #16]
 8010a38:	085b      	lsrs	r3, r3, #1
 8010a3a:	b29b      	uxth	r3, r3
 8010a3c:	f003 0307 	and.w	r3, r3, #7
 8010a40:	b29a      	uxth	r2, r3
 8010a42:	89fb      	ldrh	r3, [r7, #14]
 8010a44:	4313      	orrs	r3, r2
 8010a46:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	681b      	ldr	r3, [r3, #0]
 8010a4c:	89fa      	ldrh	r2, [r7, #14]
 8010a4e:	60da      	str	r2, [r3, #12]
 8010a50:	e04e      	b.n	8010af0 <UART_SetConfig+0x498>
      }
      else
      {
        ret = HAL_ERROR;
 8010a52:	2301      	movs	r3, #1
 8010a54:	77bb      	strb	r3, [r7, #30]
 8010a56:	e04b      	b.n	8010af0 <UART_SetConfig+0x498>
      }
    }
  }
  else
  {
    switch (clocksource)
 8010a58:	7ffb      	ldrb	r3, [r7, #31]
 8010a5a:	2b08      	cmp	r3, #8
 8010a5c:	d827      	bhi.n	8010aae <UART_SetConfig+0x456>
 8010a5e:	a201      	add	r2, pc, #4	; (adr r2, 8010a64 <UART_SetConfig+0x40c>)
 8010a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a64:	08010a89 	.word	0x08010a89
 8010a68:	08010a91 	.word	0x08010a91
 8010a6c:	08010a99 	.word	0x08010a99
 8010a70:	08010aaf 	.word	0x08010aaf
 8010a74:	08010a9f 	.word	0x08010a9f
 8010a78:	08010aaf 	.word	0x08010aaf
 8010a7c:	08010aaf 	.word	0x08010aaf
 8010a80:	08010aaf 	.word	0x08010aaf
 8010a84:	08010aa7 	.word	0x08010aa7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010a88:	f7fd f876 	bl	800db78 <HAL_RCC_GetPCLK1Freq>
 8010a8c:	61b8      	str	r0, [r7, #24]
        break;
 8010a8e:	e013      	b.n	8010ab8 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010a90:	f7fd f894 	bl	800dbbc <HAL_RCC_GetPCLK2Freq>
 8010a94:	61b8      	str	r0, [r7, #24]
        break;
 8010a96:	e00f      	b.n	8010ab8 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010a98:	4b1e      	ldr	r3, [pc, #120]	; (8010b14 <UART_SetConfig+0x4bc>)
 8010a9a:	61bb      	str	r3, [r7, #24]
        break;
 8010a9c:	e00c      	b.n	8010ab8 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010a9e:	f7fc fff5 	bl	800da8c <HAL_RCC_GetSysClockFreq>
 8010aa2:	61b8      	str	r0, [r7, #24]
        break;
 8010aa4:	e008      	b.n	8010ab8 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010aa6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010aaa:	61bb      	str	r3, [r7, #24]
        break;
 8010aac:	e004      	b.n	8010ab8 <UART_SetConfig+0x460>
      default:
        pclk = 0U;
 8010aae:	2300      	movs	r3, #0
 8010ab0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8010ab2:	2301      	movs	r3, #1
 8010ab4:	77bb      	strb	r3, [r7, #30]
        break;
 8010ab6:	bf00      	nop
    }

    if (pclk != 0U)
 8010ab8:	69bb      	ldr	r3, [r7, #24]
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	d018      	beq.n	8010af0 <UART_SetConfig+0x498>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	685b      	ldr	r3, [r3, #4]
 8010ac2:	085a      	lsrs	r2, r3, #1
 8010ac4:	69bb      	ldr	r3, [r7, #24]
 8010ac6:	441a      	add	r2, r3
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	685b      	ldr	r3, [r3, #4]
 8010acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8010ad0:	b29b      	uxth	r3, r3
 8010ad2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010ad4:	693b      	ldr	r3, [r7, #16]
 8010ad6:	2b0f      	cmp	r3, #15
 8010ad8:	d908      	bls.n	8010aec <UART_SetConfig+0x494>
 8010ada:	693b      	ldr	r3, [r7, #16]
 8010adc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010ae0:	d204      	bcs.n	8010aec <UART_SetConfig+0x494>
      {
        huart->Instance->BRR = usartdiv;
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	681b      	ldr	r3, [r3, #0]
 8010ae6:	693a      	ldr	r2, [r7, #16]
 8010ae8:	60da      	str	r2, [r3, #12]
 8010aea:	e001      	b.n	8010af0 <UART_SetConfig+0x498>
      }
      else
      {
        ret = HAL_ERROR;
 8010aec:	2301      	movs	r3, #1
 8010aee:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	2200      	movs	r2, #0
 8010af4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	2200      	movs	r2, #0
 8010afa:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8010afc:	7fbb      	ldrb	r3, [r7, #30]
}
 8010afe:	4618      	mov	r0, r3
 8010b00:	3720      	adds	r7, #32
 8010b02:	46bd      	mov	sp, r7
 8010b04:	bd80      	pop	{r7, pc}
 8010b06:	bf00      	nop
 8010b08:	40004c00 	.word	0x40004c00
 8010b0c:	40021000 	.word	0x40021000
 8010b10:	40005000 	.word	0x40005000
 8010b14:	007a1200 	.word	0x007a1200

08010b18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010b18:	b580      	push	{r7, lr}
 8010b1a:	b082      	sub	sp, #8
 8010b1c:	af00      	add	r7, sp, #0
 8010b1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b24:	2bff      	cmp	r3, #255	; 0xff
 8010b26:	d904      	bls.n	8010b32 <UART_AdvFeatureConfig+0x1a>
 8010b28:	f640 31c8 	movw	r1, #3016	; 0xbc8
 8010b2c:	4896      	ldr	r0, [pc, #600]	; (8010d88 <UART_AdvFeatureConfig+0x270>)
 8010b2e:	f7f5 f830 	bl	8005b92 <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b36:	f003 0301 	and.w	r3, r3, #1
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	d018      	beq.n	8010b70 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010b42:	2b00      	cmp	r3, #0
 8010b44:	d009      	beq.n	8010b5a <UART_AdvFeatureConfig+0x42>
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010b4a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010b4e:	d004      	beq.n	8010b5a <UART_AdvFeatureConfig+0x42>
 8010b50:	f640 31cd 	movw	r1, #3021	; 0xbcd
 8010b54:	488c      	ldr	r0, [pc, #560]	; (8010d88 <UART_AdvFeatureConfig+0x270>)
 8010b56:	f7f5 f81c 	bl	8005b92 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	681b      	ldr	r3, [r3, #0]
 8010b5e:	685b      	ldr	r3, [r3, #4]
 8010b60:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	681b      	ldr	r3, [r3, #0]
 8010b6c:	430a      	orrs	r2, r1
 8010b6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b74:	f003 0302 	and.w	r3, r3, #2
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	d018      	beq.n	8010bae <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	d009      	beq.n	8010b98 <UART_AdvFeatureConfig+0x80>
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010b8c:	d004      	beq.n	8010b98 <UART_AdvFeatureConfig+0x80>
 8010b8e:	f640 31d4 	movw	r1, #3028	; 0xbd4
 8010b92:	487d      	ldr	r0, [pc, #500]	; (8010d88 <UART_AdvFeatureConfig+0x270>)
 8010b94:	f7f4 fffd 	bl	8005b92 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	681b      	ldr	r3, [r3, #0]
 8010b9c:	685b      	ldr	r3, [r3, #4]
 8010b9e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	681b      	ldr	r3, [r3, #0]
 8010baa:	430a      	orrs	r2, r1
 8010bac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010bb2:	f003 0304 	and.w	r3, r3, #4
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	d018      	beq.n	8010bec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	d009      	beq.n	8010bd6 <UART_AdvFeatureConfig+0xbe>
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010bc6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8010bca:	d004      	beq.n	8010bd6 <UART_AdvFeatureConfig+0xbe>
 8010bcc:	f640 31db 	movw	r1, #3035	; 0xbdb
 8010bd0:	486d      	ldr	r0, [pc, #436]	; (8010d88 <UART_AdvFeatureConfig+0x270>)
 8010bd2:	f7f4 ffde 	bl	8005b92 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	681b      	ldr	r3, [r3, #0]
 8010bda:	685b      	ldr	r3, [r3, #4]
 8010bdc:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	681b      	ldr	r3, [r3, #0]
 8010be8:	430a      	orrs	r2, r1
 8010bea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010bf0:	f003 0308 	and.w	r3, r3, #8
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	d018      	beq.n	8010c2a <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010bfc:	2b00      	cmp	r3, #0
 8010bfe:	d009      	beq.n	8010c14 <UART_AdvFeatureConfig+0xfc>
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010c08:	d004      	beq.n	8010c14 <UART_AdvFeatureConfig+0xfc>
 8010c0a:	f640 31e2 	movw	r1, #3042	; 0xbe2
 8010c0e:	485e      	ldr	r0, [pc, #376]	; (8010d88 <UART_AdvFeatureConfig+0x270>)
 8010c10:	f7f4 ffbf 	bl	8005b92 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	681b      	ldr	r3, [r3, #0]
 8010c18:	685b      	ldr	r3, [r3, #4]
 8010c1a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	681b      	ldr	r3, [r3, #0]
 8010c26:	430a      	orrs	r2, r1
 8010c28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c2e:	f003 0310 	and.w	r3, r3, #16
 8010c32:	2b00      	cmp	r3, #0
 8010c34:	d018      	beq.n	8010c68 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c3a:	2b00      	cmp	r3, #0
 8010c3c:	d009      	beq.n	8010c52 <UART_AdvFeatureConfig+0x13a>
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010c46:	d004      	beq.n	8010c52 <UART_AdvFeatureConfig+0x13a>
 8010c48:	f640 31e9 	movw	r1, #3049	; 0xbe9
 8010c4c:	484e      	ldr	r0, [pc, #312]	; (8010d88 <UART_AdvFeatureConfig+0x270>)
 8010c4e:	f7f4 ffa0 	bl	8005b92 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	681b      	ldr	r3, [r3, #0]
 8010c56:	689b      	ldr	r3, [r3, #8]
 8010c58:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	681b      	ldr	r3, [r3, #0]
 8010c64:	430a      	orrs	r2, r1
 8010c66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c6c:	f003 0320 	and.w	r3, r3, #32
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	d018      	beq.n	8010ca6 <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010c78:	2b00      	cmp	r3, #0
 8010c7a:	d009      	beq.n	8010c90 <UART_AdvFeatureConfig+0x178>
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010c80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010c84:	d004      	beq.n	8010c90 <UART_AdvFeatureConfig+0x178>
 8010c86:	f44f 613f 	mov.w	r1, #3056	; 0xbf0
 8010c8a:	483f      	ldr	r0, [pc, #252]	; (8010d88 <UART_AdvFeatureConfig+0x270>)
 8010c8c:	f7f4 ff81 	bl	8005b92 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	681b      	ldr	r3, [r3, #0]
 8010c94:	689b      	ldr	r3, [r3, #8]
 8010c96:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	681b      	ldr	r3, [r3, #0]
 8010ca2:	430a      	orrs	r2, r1
 8010ca4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	d054      	beq.n	8010d5c <UART_AdvFeatureConfig+0x244>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	681b      	ldr	r3, [r3, #0]
 8010cb6:	4a35      	ldr	r2, [pc, #212]	; (8010d8c <UART_AdvFeatureConfig+0x274>)
 8010cb8:	4293      	cmp	r3, r2
 8010cba:	d00e      	beq.n	8010cda <UART_AdvFeatureConfig+0x1c2>
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	681b      	ldr	r3, [r3, #0]
 8010cc0:	4a33      	ldr	r2, [pc, #204]	; (8010d90 <UART_AdvFeatureConfig+0x278>)
 8010cc2:	4293      	cmp	r3, r2
 8010cc4:	d009      	beq.n	8010cda <UART_AdvFeatureConfig+0x1c2>
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	681b      	ldr	r3, [r3, #0]
 8010cca:	4a32      	ldr	r2, [pc, #200]	; (8010d94 <UART_AdvFeatureConfig+0x27c>)
 8010ccc:	4293      	cmp	r3, r2
 8010cce:	d004      	beq.n	8010cda <UART_AdvFeatureConfig+0x1c2>
 8010cd0:	f640 31f7 	movw	r1, #3063	; 0xbf7
 8010cd4:	482c      	ldr	r0, [pc, #176]	; (8010d88 <UART_AdvFeatureConfig+0x270>)
 8010cd6:	f7f4 ff5c 	bl	8005b92 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010cde:	2b00      	cmp	r3, #0
 8010ce0:	d009      	beq.n	8010cf6 <UART_AdvFeatureConfig+0x1de>
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ce6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010cea:	d004      	beq.n	8010cf6 <UART_AdvFeatureConfig+0x1de>
 8010cec:	f640 31f8 	movw	r1, #3064	; 0xbf8
 8010cf0:	4825      	ldr	r0, [pc, #148]	; (8010d88 <UART_AdvFeatureConfig+0x270>)
 8010cf2:	f7f4 ff4e 	bl	8005b92 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	681b      	ldr	r3, [r3, #0]
 8010cfa:	685b      	ldr	r3, [r3, #4]
 8010cfc:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	681b      	ldr	r3, [r3, #0]
 8010d08:	430a      	orrs	r2, r1
 8010d0a:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010d14:	d122      	bne.n	8010d5c <UART_AdvFeatureConfig+0x244>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010d1a:	2b00      	cmp	r3, #0
 8010d1c:	d013      	beq.n	8010d46 <UART_AdvFeatureConfig+0x22e>
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010d22:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010d26:	d00e      	beq.n	8010d46 <UART_AdvFeatureConfig+0x22e>
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010d2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010d30:	d009      	beq.n	8010d46 <UART_AdvFeatureConfig+0x22e>
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010d36:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8010d3a:	d004      	beq.n	8010d46 <UART_AdvFeatureConfig+0x22e>
 8010d3c:	f640 31fd 	movw	r1, #3069	; 0xbfd
 8010d40:	4811      	ldr	r0, [pc, #68]	; (8010d88 <UART_AdvFeatureConfig+0x270>)
 8010d42:	f7f4 ff26 	bl	8005b92 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	681b      	ldr	r3, [r3, #0]
 8010d4a:	685b      	ldr	r3, [r3, #4]
 8010d4c:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	681b      	ldr	r3, [r3, #0]
 8010d58:	430a      	orrs	r2, r1
 8010d5a:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	d022      	beq.n	8010dae <UART_AdvFeatureConfig+0x296>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	d013      	beq.n	8010d98 <UART_AdvFeatureConfig+0x280>
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010d74:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8010d78:	d00e      	beq.n	8010d98 <UART_AdvFeatureConfig+0x280>
 8010d7a:	f640 4105 	movw	r1, #3077	; 0xc05
 8010d7e:	4802      	ldr	r0, [pc, #8]	; (8010d88 <UART_AdvFeatureConfig+0x270>)
 8010d80:	f7f4 ff07 	bl	8005b92 <assert_failed>
 8010d84:	e008      	b.n	8010d98 <UART_AdvFeatureConfig+0x280>
 8010d86:	bf00      	nop
 8010d88:	08034524 	.word	0x08034524
 8010d8c:	40013800 	.word	0x40013800
 8010d90:	40004400 	.word	0x40004400
 8010d94:	40004800 	.word	0x40004800
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	681b      	ldr	r3, [r3, #0]
 8010d9c:	685b      	ldr	r3, [r3, #4]
 8010d9e:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	681b      	ldr	r3, [r3, #0]
 8010daa:	430a      	orrs	r2, r1
 8010dac:	605a      	str	r2, [r3, #4]
  }
}
 8010dae:	bf00      	nop
 8010db0:	3708      	adds	r7, #8
 8010db2:	46bd      	mov	sp, r7
 8010db4:	bd80      	pop	{r7, pc}
 8010db6:	bf00      	nop

08010db8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010db8:	b580      	push	{r7, lr}
 8010dba:	b086      	sub	sp, #24
 8010dbc:	af02      	add	r7, sp, #8
 8010dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	2200      	movs	r2, #0
 8010dc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010dc8:	f7f6 feca 	bl	8007b60 <HAL_GetTick>
 8010dcc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	681b      	ldr	r3, [r3, #0]
 8010dd2:	681b      	ldr	r3, [r3, #0]
 8010dd4:	f003 0308 	and.w	r3, r3, #8
 8010dd8:	2b08      	cmp	r3, #8
 8010dda:	d10e      	bne.n	8010dfa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010ddc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010de0:	9300      	str	r3, [sp, #0]
 8010de2:	68fb      	ldr	r3, [r7, #12]
 8010de4:	2200      	movs	r2, #0
 8010de6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8010dea:	6878      	ldr	r0, [r7, #4]
 8010dec:	f000 f82d 	bl	8010e4a <UART_WaitOnFlagUntilTimeout>
 8010df0:	4603      	mov	r3, r0
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	d001      	beq.n	8010dfa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010df6:	2303      	movs	r3, #3
 8010df8:	e023      	b.n	8010e42 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	681b      	ldr	r3, [r3, #0]
 8010dfe:	681b      	ldr	r3, [r3, #0]
 8010e00:	f003 0304 	and.w	r3, r3, #4
 8010e04:	2b04      	cmp	r3, #4
 8010e06:	d10e      	bne.n	8010e26 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010e08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010e0c:	9300      	str	r3, [sp, #0]
 8010e0e:	68fb      	ldr	r3, [r7, #12]
 8010e10:	2200      	movs	r2, #0
 8010e12:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8010e16:	6878      	ldr	r0, [r7, #4]
 8010e18:	f000 f817 	bl	8010e4a <UART_WaitOnFlagUntilTimeout>
 8010e1c:	4603      	mov	r3, r0
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	d001      	beq.n	8010e26 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010e22:	2303      	movs	r3, #3
 8010e24:	e00d      	b.n	8010e42 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	2220      	movs	r2, #32
 8010e2a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	2220      	movs	r2, #32
 8010e30:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	2200      	movs	r2, #0
 8010e36:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	2200      	movs	r2, #0
 8010e3c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8010e40:	2300      	movs	r3, #0
}
 8010e42:	4618      	mov	r0, r3
 8010e44:	3710      	adds	r7, #16
 8010e46:	46bd      	mov	sp, r7
 8010e48:	bd80      	pop	{r7, pc}

08010e4a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010e4a:	b580      	push	{r7, lr}
 8010e4c:	b09c      	sub	sp, #112	; 0x70
 8010e4e:	af00      	add	r7, sp, #0
 8010e50:	60f8      	str	r0, [r7, #12]
 8010e52:	60b9      	str	r1, [r7, #8]
 8010e54:	603b      	str	r3, [r7, #0]
 8010e56:	4613      	mov	r3, r2
 8010e58:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010e5a:	e0a5      	b.n	8010fa8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010e5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e62:	f000 80a1 	beq.w	8010fa8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010e66:	f7f6 fe7b 	bl	8007b60 <HAL_GetTick>
 8010e6a:	4602      	mov	r2, r0
 8010e6c:	683b      	ldr	r3, [r7, #0]
 8010e6e:	1ad3      	subs	r3, r2, r3
 8010e70:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8010e72:	429a      	cmp	r2, r3
 8010e74:	d302      	bcc.n	8010e7c <UART_WaitOnFlagUntilTimeout+0x32>
 8010e76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	d13e      	bne.n	8010efa <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8010e7c:	68fb      	ldr	r3, [r7, #12]
 8010e7e:	681b      	ldr	r3, [r3, #0]
 8010e80:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010e84:	e853 3f00 	ldrex	r3, [r3]
 8010e88:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8010e8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010e8c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8010e90:	667b      	str	r3, [r7, #100]	; 0x64
 8010e92:	68fb      	ldr	r3, [r7, #12]
 8010e94:	681b      	ldr	r3, [r3, #0]
 8010e96:	461a      	mov	r2, r3
 8010e98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010e9a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010e9c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e9e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010ea0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010ea2:	e841 2300 	strex	r3, r2, [r1]
 8010ea6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8010ea8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	d1e6      	bne.n	8010e7c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010eae:	68fb      	ldr	r3, [r7, #12]
 8010eb0:	681b      	ldr	r3, [r3, #0]
 8010eb2:	3308      	adds	r3, #8
 8010eb4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010eb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010eb8:	e853 3f00 	ldrex	r3, [r3]
 8010ebc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ec0:	f023 0301 	bic.w	r3, r3, #1
 8010ec4:	663b      	str	r3, [r7, #96]	; 0x60
 8010ec6:	68fb      	ldr	r3, [r7, #12]
 8010ec8:	681b      	ldr	r3, [r3, #0]
 8010eca:	3308      	adds	r3, #8
 8010ecc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010ece:	64ba      	str	r2, [r7, #72]	; 0x48
 8010ed0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ed2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010ed4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010ed6:	e841 2300 	strex	r3, r2, [r1]
 8010eda:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8010edc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	d1e5      	bne.n	8010eae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8010ee2:	68fb      	ldr	r3, [r7, #12]
 8010ee4:	2220      	movs	r2, #32
 8010ee6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8010ee8:	68fb      	ldr	r3, [r7, #12]
 8010eea:	2220      	movs	r2, #32
 8010eec:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8010eee:	68fb      	ldr	r3, [r7, #12]
 8010ef0:	2200      	movs	r2, #0
 8010ef2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8010ef6:	2303      	movs	r3, #3
 8010ef8:	e067      	b.n	8010fca <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8010efa:	68fb      	ldr	r3, [r7, #12]
 8010efc:	681b      	ldr	r3, [r3, #0]
 8010efe:	681b      	ldr	r3, [r3, #0]
 8010f00:	f003 0304 	and.w	r3, r3, #4
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	d04f      	beq.n	8010fa8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010f08:	68fb      	ldr	r3, [r7, #12]
 8010f0a:	681b      	ldr	r3, [r3, #0]
 8010f0c:	69db      	ldr	r3, [r3, #28]
 8010f0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010f12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010f16:	d147      	bne.n	8010fa8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010f18:	68fb      	ldr	r3, [r7, #12]
 8010f1a:	681b      	ldr	r3, [r3, #0]
 8010f1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010f20:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8010f22:	68fb      	ldr	r3, [r7, #12]
 8010f24:	681b      	ldr	r3, [r3, #0]
 8010f26:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f2a:	e853 3f00 	ldrex	r3, [r3]
 8010f2e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f32:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8010f36:	66fb      	str	r3, [r7, #108]	; 0x6c
 8010f38:	68fb      	ldr	r3, [r7, #12]
 8010f3a:	681b      	ldr	r3, [r3, #0]
 8010f3c:	461a      	mov	r2, r3
 8010f3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010f40:	637b      	str	r3, [r7, #52]	; 0x34
 8010f42:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f44:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010f46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010f48:	e841 2300 	strex	r3, r2, [r1]
 8010f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8010f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	d1e6      	bne.n	8010f22 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010f54:	68fb      	ldr	r3, [r7, #12]
 8010f56:	681b      	ldr	r3, [r3, #0]
 8010f58:	3308      	adds	r3, #8
 8010f5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f5c:	697b      	ldr	r3, [r7, #20]
 8010f5e:	e853 3f00 	ldrex	r3, [r3]
 8010f62:	613b      	str	r3, [r7, #16]
   return(result);
 8010f64:	693b      	ldr	r3, [r7, #16]
 8010f66:	f023 0301 	bic.w	r3, r3, #1
 8010f6a:	66bb      	str	r3, [r7, #104]	; 0x68
 8010f6c:	68fb      	ldr	r3, [r7, #12]
 8010f6e:	681b      	ldr	r3, [r3, #0]
 8010f70:	3308      	adds	r3, #8
 8010f72:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010f74:	623a      	str	r2, [r7, #32]
 8010f76:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f78:	69f9      	ldr	r1, [r7, #28]
 8010f7a:	6a3a      	ldr	r2, [r7, #32]
 8010f7c:	e841 2300 	strex	r3, r2, [r1]
 8010f80:	61bb      	str	r3, [r7, #24]
   return(result);
 8010f82:	69bb      	ldr	r3, [r7, #24]
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	d1e5      	bne.n	8010f54 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8010f88:	68fb      	ldr	r3, [r7, #12]
 8010f8a:	2220      	movs	r2, #32
 8010f8c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8010f8e:	68fb      	ldr	r3, [r7, #12]
 8010f90:	2220      	movs	r2, #32
 8010f92:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010f94:	68fb      	ldr	r3, [r7, #12]
 8010f96:	2220      	movs	r2, #32
 8010f98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010f9c:	68fb      	ldr	r3, [r7, #12]
 8010f9e:	2200      	movs	r2, #0
 8010fa0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8010fa4:	2303      	movs	r3, #3
 8010fa6:	e010      	b.n	8010fca <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010fa8:	68fb      	ldr	r3, [r7, #12]
 8010faa:	681b      	ldr	r3, [r3, #0]
 8010fac:	69da      	ldr	r2, [r3, #28]
 8010fae:	68bb      	ldr	r3, [r7, #8]
 8010fb0:	4013      	ands	r3, r2
 8010fb2:	68ba      	ldr	r2, [r7, #8]
 8010fb4:	429a      	cmp	r2, r3
 8010fb6:	bf0c      	ite	eq
 8010fb8:	2301      	moveq	r3, #1
 8010fba:	2300      	movne	r3, #0
 8010fbc:	b2db      	uxtb	r3, r3
 8010fbe:	461a      	mov	r2, r3
 8010fc0:	79fb      	ldrb	r3, [r7, #7]
 8010fc2:	429a      	cmp	r2, r3
 8010fc4:	f43f af4a 	beq.w	8010e5c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010fc8:	2300      	movs	r3, #0
}
 8010fca:	4618      	mov	r0, r3
 8010fcc:	3770      	adds	r7, #112	; 0x70
 8010fce:	46bd      	mov	sp, r7
 8010fd0:	bd80      	pop	{r7, pc}

08010fd2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8010fd2:	b480      	push	{r7}
 8010fd4:	b085      	sub	sp, #20
 8010fd6:	af00      	add	r7, sp, #0
 8010fd8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	2200      	movs	r2, #0
 8010fde:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8010fe2:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8010fe6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8010fe8:	68fb      	ldr	r3, [r7, #12]
 8010fea:	b29a      	uxth	r2, r3
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8010ff2:	2300      	movs	r3, #0
}
 8010ff4:	4618      	mov	r0, r3
 8010ff6:	3714      	adds	r7, #20
 8010ff8:	46bd      	mov	sp, r7
 8010ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ffe:	4770      	bx	lr

08011000 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8011000:	b480      	push	{r7}
 8011002:	b085      	sub	sp, #20
 8011004:	af00      	add	r7, sp, #0
 8011006:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8011008:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 801100c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8011014:	b29a      	uxth	r2, r3
 8011016:	68fb      	ldr	r3, [r7, #12]
 8011018:	b29b      	uxth	r3, r3
 801101a:	43db      	mvns	r3, r3
 801101c:	b29b      	uxth	r3, r3
 801101e:	4013      	ands	r3, r2
 8011020:	b29a      	uxth	r2, r3
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8011028:	2300      	movs	r3, #0
}
 801102a:	4618      	mov	r0, r3
 801102c:	3714      	adds	r7, #20
 801102e:	46bd      	mov	sp, r7
 8011030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011034:	4770      	bx	lr

08011036 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8011036:	b084      	sub	sp, #16
 8011038:	b480      	push	{r7}
 801103a:	b083      	sub	sp, #12
 801103c:	af00      	add	r7, sp, #0
 801103e:	6078      	str	r0, [r7, #4]
 8011040:	f107 0014 	add.w	r0, r7, #20
 8011044:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	2201      	movs	r2, #1
 801104c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	2200      	movs	r2, #0
 8011054:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	2200      	movs	r2, #0
 801105c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	2200      	movs	r2, #0
 8011064:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8011068:	2300      	movs	r3, #0
}
 801106a:	4618      	mov	r0, r3
 801106c:	370c      	adds	r7, #12
 801106e:	46bd      	mov	sp, r7
 8011070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011074:	b004      	add	sp, #16
 8011076:	4770      	bx	lr

08011078 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8011078:	b480      	push	{r7}
 801107a:	b09d      	sub	sp, #116	; 0x74
 801107c:	af00      	add	r7, sp, #0
 801107e:	6078      	str	r0, [r7, #4]
 8011080:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8011082:	2300      	movs	r3, #0
 8011084:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8011088:	687a      	ldr	r2, [r7, #4]
 801108a:	683b      	ldr	r3, [r7, #0]
 801108c:	781b      	ldrb	r3, [r3, #0]
 801108e:	009b      	lsls	r3, r3, #2
 8011090:	4413      	add	r3, r2
 8011092:	881b      	ldrh	r3, [r3, #0]
 8011094:	b29b      	uxth	r3, r3
 8011096:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 801109a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801109e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80110a2:	683b      	ldr	r3, [r7, #0]
 80110a4:	78db      	ldrb	r3, [r3, #3]
 80110a6:	2b03      	cmp	r3, #3
 80110a8:	d81f      	bhi.n	80110ea <USB_ActivateEndpoint+0x72>
 80110aa:	a201      	add	r2, pc, #4	; (adr r2, 80110b0 <USB_ActivateEndpoint+0x38>)
 80110ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80110b0:	080110c1 	.word	0x080110c1
 80110b4:	080110dd 	.word	0x080110dd
 80110b8:	080110f3 	.word	0x080110f3
 80110bc:	080110cf 	.word	0x080110cf
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80110c0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80110c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80110c8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80110cc:	e012      	b.n	80110f4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80110ce:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80110d2:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80110d6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80110da:	e00b      	b.n	80110f4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80110dc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80110e0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80110e4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80110e8:	e004      	b.n	80110f4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80110ea:	2301      	movs	r3, #1
 80110ec:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 80110f0:	e000      	b.n	80110f4 <USB_ActivateEndpoint+0x7c>
      break;
 80110f2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80110f4:	687a      	ldr	r2, [r7, #4]
 80110f6:	683b      	ldr	r3, [r7, #0]
 80110f8:	781b      	ldrb	r3, [r3, #0]
 80110fa:	009b      	lsls	r3, r3, #2
 80110fc:	441a      	add	r2, r3
 80110fe:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8011102:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011106:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801110a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801110e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011112:	b29b      	uxth	r3, r3
 8011114:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8011116:	687a      	ldr	r2, [r7, #4]
 8011118:	683b      	ldr	r3, [r7, #0]
 801111a:	781b      	ldrb	r3, [r3, #0]
 801111c:	009b      	lsls	r3, r3, #2
 801111e:	4413      	add	r3, r2
 8011120:	881b      	ldrh	r3, [r3, #0]
 8011122:	b29b      	uxth	r3, r3
 8011124:	b21b      	sxth	r3, r3
 8011126:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801112a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801112e:	b21a      	sxth	r2, r3
 8011130:	683b      	ldr	r3, [r7, #0]
 8011132:	781b      	ldrb	r3, [r3, #0]
 8011134:	b21b      	sxth	r3, r3
 8011136:	4313      	orrs	r3, r2
 8011138:	b21b      	sxth	r3, r3
 801113a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 801113e:	687a      	ldr	r2, [r7, #4]
 8011140:	683b      	ldr	r3, [r7, #0]
 8011142:	781b      	ldrb	r3, [r3, #0]
 8011144:	009b      	lsls	r3, r3, #2
 8011146:	441a      	add	r2, r3
 8011148:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 801114c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011150:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011154:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011158:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801115c:	b29b      	uxth	r3, r3
 801115e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8011160:	683b      	ldr	r3, [r7, #0]
 8011162:	7b1b      	ldrb	r3, [r3, #12]
 8011164:	2b00      	cmp	r3, #0
 8011166:	f040 8149 	bne.w	80113fc <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 801116a:	683b      	ldr	r3, [r7, #0]
 801116c:	785b      	ldrb	r3, [r3, #1]
 801116e:	2b00      	cmp	r3, #0
 8011170:	f000 8084 	beq.w	801127c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	61bb      	str	r3, [r7, #24]
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801117e:	b29b      	uxth	r3, r3
 8011180:	461a      	mov	r2, r3
 8011182:	69bb      	ldr	r3, [r7, #24]
 8011184:	4413      	add	r3, r2
 8011186:	61bb      	str	r3, [r7, #24]
 8011188:	683b      	ldr	r3, [r7, #0]
 801118a:	781b      	ldrb	r3, [r3, #0]
 801118c:	011a      	lsls	r2, r3, #4
 801118e:	69bb      	ldr	r3, [r7, #24]
 8011190:	4413      	add	r3, r2
 8011192:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011196:	617b      	str	r3, [r7, #20]
 8011198:	683b      	ldr	r3, [r7, #0]
 801119a:	88db      	ldrh	r3, [r3, #6]
 801119c:	085b      	lsrs	r3, r3, #1
 801119e:	b29b      	uxth	r3, r3
 80111a0:	005b      	lsls	r3, r3, #1
 80111a2:	b29a      	uxth	r2, r3
 80111a4:	697b      	ldr	r3, [r7, #20]
 80111a6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80111a8:	687a      	ldr	r2, [r7, #4]
 80111aa:	683b      	ldr	r3, [r7, #0]
 80111ac:	781b      	ldrb	r3, [r3, #0]
 80111ae:	009b      	lsls	r3, r3, #2
 80111b0:	4413      	add	r3, r2
 80111b2:	881b      	ldrh	r3, [r3, #0]
 80111b4:	827b      	strh	r3, [r7, #18]
 80111b6:	8a7b      	ldrh	r3, [r7, #18]
 80111b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80111bc:	2b00      	cmp	r3, #0
 80111be:	d01b      	beq.n	80111f8 <USB_ActivateEndpoint+0x180>
 80111c0:	687a      	ldr	r2, [r7, #4]
 80111c2:	683b      	ldr	r3, [r7, #0]
 80111c4:	781b      	ldrb	r3, [r3, #0]
 80111c6:	009b      	lsls	r3, r3, #2
 80111c8:	4413      	add	r3, r2
 80111ca:	881b      	ldrh	r3, [r3, #0]
 80111cc:	b29b      	uxth	r3, r3
 80111ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80111d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80111d6:	823b      	strh	r3, [r7, #16]
 80111d8:	687a      	ldr	r2, [r7, #4]
 80111da:	683b      	ldr	r3, [r7, #0]
 80111dc:	781b      	ldrb	r3, [r3, #0]
 80111de:	009b      	lsls	r3, r3, #2
 80111e0:	441a      	add	r2, r3
 80111e2:	8a3b      	ldrh	r3, [r7, #16]
 80111e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80111e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80111ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80111f0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80111f4:	b29b      	uxth	r3, r3
 80111f6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80111f8:	683b      	ldr	r3, [r7, #0]
 80111fa:	78db      	ldrb	r3, [r3, #3]
 80111fc:	2b01      	cmp	r3, #1
 80111fe:	d020      	beq.n	8011242 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8011200:	687a      	ldr	r2, [r7, #4]
 8011202:	683b      	ldr	r3, [r7, #0]
 8011204:	781b      	ldrb	r3, [r3, #0]
 8011206:	009b      	lsls	r3, r3, #2
 8011208:	4413      	add	r3, r2
 801120a:	881b      	ldrh	r3, [r3, #0]
 801120c:	b29b      	uxth	r3, r3
 801120e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011212:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011216:	81bb      	strh	r3, [r7, #12]
 8011218:	89bb      	ldrh	r3, [r7, #12]
 801121a:	f083 0320 	eor.w	r3, r3, #32
 801121e:	81bb      	strh	r3, [r7, #12]
 8011220:	687a      	ldr	r2, [r7, #4]
 8011222:	683b      	ldr	r3, [r7, #0]
 8011224:	781b      	ldrb	r3, [r3, #0]
 8011226:	009b      	lsls	r3, r3, #2
 8011228:	441a      	add	r2, r3
 801122a:	89bb      	ldrh	r3, [r7, #12]
 801122c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011230:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011234:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011238:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801123c:	b29b      	uxth	r3, r3
 801123e:	8013      	strh	r3, [r2, #0]
 8011240:	e2a6      	b.n	8011790 <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8011242:	687a      	ldr	r2, [r7, #4]
 8011244:	683b      	ldr	r3, [r7, #0]
 8011246:	781b      	ldrb	r3, [r3, #0]
 8011248:	009b      	lsls	r3, r3, #2
 801124a:	4413      	add	r3, r2
 801124c:	881b      	ldrh	r3, [r3, #0]
 801124e:	b29b      	uxth	r3, r3
 8011250:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011254:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011258:	81fb      	strh	r3, [r7, #14]
 801125a:	687a      	ldr	r2, [r7, #4]
 801125c:	683b      	ldr	r3, [r7, #0]
 801125e:	781b      	ldrb	r3, [r3, #0]
 8011260:	009b      	lsls	r3, r3, #2
 8011262:	441a      	add	r2, r3
 8011264:	89fb      	ldrh	r3, [r7, #14]
 8011266:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801126a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801126e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011272:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011276:	b29b      	uxth	r3, r3
 8011278:	8013      	strh	r3, [r2, #0]
 801127a:	e289      	b.n	8011790 <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	633b      	str	r3, [r7, #48]	; 0x30
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011286:	b29b      	uxth	r3, r3
 8011288:	461a      	mov	r2, r3
 801128a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801128c:	4413      	add	r3, r2
 801128e:	633b      	str	r3, [r7, #48]	; 0x30
 8011290:	683b      	ldr	r3, [r7, #0]
 8011292:	781b      	ldrb	r3, [r3, #0]
 8011294:	011a      	lsls	r2, r3, #4
 8011296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011298:	4413      	add	r3, r2
 801129a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 801129e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80112a0:	683b      	ldr	r3, [r7, #0]
 80112a2:	88db      	ldrh	r3, [r3, #6]
 80112a4:	085b      	lsrs	r3, r3, #1
 80112a6:	b29b      	uxth	r3, r3
 80112a8:	005b      	lsls	r3, r3, #1
 80112aa:	b29a      	uxth	r2, r3
 80112ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112ae:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80112ba:	b29b      	uxth	r3, r3
 80112bc:	461a      	mov	r2, r3
 80112be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112c0:	4413      	add	r3, r2
 80112c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80112c4:	683b      	ldr	r3, [r7, #0]
 80112c6:	781b      	ldrb	r3, [r3, #0]
 80112c8:	011a      	lsls	r2, r3, #4
 80112ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112cc:	4413      	add	r3, r2
 80112ce:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80112d2:	627b      	str	r3, [r7, #36]	; 0x24
 80112d4:	683b      	ldr	r3, [r7, #0]
 80112d6:	691b      	ldr	r3, [r3, #16]
 80112d8:	2b00      	cmp	r3, #0
 80112da:	d112      	bne.n	8011302 <USB_ActivateEndpoint+0x28a>
 80112dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112de:	881b      	ldrh	r3, [r3, #0]
 80112e0:	b29b      	uxth	r3, r3
 80112e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80112e6:	b29a      	uxth	r2, r3
 80112e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112ea:	801a      	strh	r2, [r3, #0]
 80112ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112ee:	881b      	ldrh	r3, [r3, #0]
 80112f0:	b29b      	uxth	r3, r3
 80112f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80112f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80112fa:	b29a      	uxth	r2, r3
 80112fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112fe:	801a      	strh	r2, [r3, #0]
 8011300:	e02f      	b.n	8011362 <USB_ActivateEndpoint+0x2ea>
 8011302:	683b      	ldr	r3, [r7, #0]
 8011304:	691b      	ldr	r3, [r3, #16]
 8011306:	2b3e      	cmp	r3, #62	; 0x3e
 8011308:	d813      	bhi.n	8011332 <USB_ActivateEndpoint+0x2ba>
 801130a:	683b      	ldr	r3, [r7, #0]
 801130c:	691b      	ldr	r3, [r3, #16]
 801130e:	085b      	lsrs	r3, r3, #1
 8011310:	66bb      	str	r3, [r7, #104]	; 0x68
 8011312:	683b      	ldr	r3, [r7, #0]
 8011314:	691b      	ldr	r3, [r3, #16]
 8011316:	f003 0301 	and.w	r3, r3, #1
 801131a:	2b00      	cmp	r3, #0
 801131c:	d002      	beq.n	8011324 <USB_ActivateEndpoint+0x2ac>
 801131e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011320:	3301      	adds	r3, #1
 8011322:	66bb      	str	r3, [r7, #104]	; 0x68
 8011324:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011326:	b29b      	uxth	r3, r3
 8011328:	029b      	lsls	r3, r3, #10
 801132a:	b29a      	uxth	r2, r3
 801132c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801132e:	801a      	strh	r2, [r3, #0]
 8011330:	e017      	b.n	8011362 <USB_ActivateEndpoint+0x2ea>
 8011332:	683b      	ldr	r3, [r7, #0]
 8011334:	691b      	ldr	r3, [r3, #16]
 8011336:	095b      	lsrs	r3, r3, #5
 8011338:	66bb      	str	r3, [r7, #104]	; 0x68
 801133a:	683b      	ldr	r3, [r7, #0]
 801133c:	691b      	ldr	r3, [r3, #16]
 801133e:	f003 031f 	and.w	r3, r3, #31
 8011342:	2b00      	cmp	r3, #0
 8011344:	d102      	bne.n	801134c <USB_ActivateEndpoint+0x2d4>
 8011346:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011348:	3b01      	subs	r3, #1
 801134a:	66bb      	str	r3, [r7, #104]	; 0x68
 801134c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801134e:	b29b      	uxth	r3, r3
 8011350:	029b      	lsls	r3, r3, #10
 8011352:	b29b      	uxth	r3, r3
 8011354:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011358:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801135c:	b29a      	uxth	r2, r3
 801135e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011360:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011362:	687a      	ldr	r2, [r7, #4]
 8011364:	683b      	ldr	r3, [r7, #0]
 8011366:	781b      	ldrb	r3, [r3, #0]
 8011368:	009b      	lsls	r3, r3, #2
 801136a:	4413      	add	r3, r2
 801136c:	881b      	ldrh	r3, [r3, #0]
 801136e:	847b      	strh	r3, [r7, #34]	; 0x22
 8011370:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011372:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011376:	2b00      	cmp	r3, #0
 8011378:	d01b      	beq.n	80113b2 <USB_ActivateEndpoint+0x33a>
 801137a:	687a      	ldr	r2, [r7, #4]
 801137c:	683b      	ldr	r3, [r7, #0]
 801137e:	781b      	ldrb	r3, [r3, #0]
 8011380:	009b      	lsls	r3, r3, #2
 8011382:	4413      	add	r3, r2
 8011384:	881b      	ldrh	r3, [r3, #0]
 8011386:	b29b      	uxth	r3, r3
 8011388:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801138c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011390:	843b      	strh	r3, [r7, #32]
 8011392:	687a      	ldr	r2, [r7, #4]
 8011394:	683b      	ldr	r3, [r7, #0]
 8011396:	781b      	ldrb	r3, [r3, #0]
 8011398:	009b      	lsls	r3, r3, #2
 801139a:	441a      	add	r2, r3
 801139c:	8c3b      	ldrh	r3, [r7, #32]
 801139e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80113a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80113a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80113aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80113ae:	b29b      	uxth	r3, r3
 80113b0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80113b2:	687a      	ldr	r2, [r7, #4]
 80113b4:	683b      	ldr	r3, [r7, #0]
 80113b6:	781b      	ldrb	r3, [r3, #0]
 80113b8:	009b      	lsls	r3, r3, #2
 80113ba:	4413      	add	r3, r2
 80113bc:	881b      	ldrh	r3, [r3, #0]
 80113be:	b29b      	uxth	r3, r3
 80113c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80113c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80113c8:	83fb      	strh	r3, [r7, #30]
 80113ca:	8bfb      	ldrh	r3, [r7, #30]
 80113cc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80113d0:	83fb      	strh	r3, [r7, #30]
 80113d2:	8bfb      	ldrh	r3, [r7, #30]
 80113d4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80113d8:	83fb      	strh	r3, [r7, #30]
 80113da:	687a      	ldr	r2, [r7, #4]
 80113dc:	683b      	ldr	r3, [r7, #0]
 80113de:	781b      	ldrb	r3, [r3, #0]
 80113e0:	009b      	lsls	r3, r3, #2
 80113e2:	441a      	add	r2, r3
 80113e4:	8bfb      	ldrh	r3, [r7, #30]
 80113e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80113ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80113ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80113f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80113f6:	b29b      	uxth	r3, r3
 80113f8:	8013      	strh	r3, [r2, #0]
 80113fa:	e1c9      	b.n	8011790 <USB_ActivateEndpoint+0x718>
    }
  }
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80113fc:	683b      	ldr	r3, [r7, #0]
 80113fe:	78db      	ldrb	r3, [r3, #3]
 8011400:	2b02      	cmp	r3, #2
 8011402:	d11e      	bne.n	8011442 <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8011404:	687a      	ldr	r2, [r7, #4]
 8011406:	683b      	ldr	r3, [r7, #0]
 8011408:	781b      	ldrb	r3, [r3, #0]
 801140a:	009b      	lsls	r3, r3, #2
 801140c:	4413      	add	r3, r2
 801140e:	881b      	ldrh	r3, [r3, #0]
 8011410:	b29b      	uxth	r3, r3
 8011412:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011416:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801141a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 801141e:	687a      	ldr	r2, [r7, #4]
 8011420:	683b      	ldr	r3, [r7, #0]
 8011422:	781b      	ldrb	r3, [r3, #0]
 8011424:	009b      	lsls	r3, r3, #2
 8011426:	441a      	add	r2, r3
 8011428:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 801142c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011430:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011434:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8011438:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801143c:	b29b      	uxth	r3, r3
 801143e:	8013      	strh	r3, [r2, #0]
 8011440:	e01d      	b.n	801147e <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8011442:	687a      	ldr	r2, [r7, #4]
 8011444:	683b      	ldr	r3, [r7, #0]
 8011446:	781b      	ldrb	r3, [r3, #0]
 8011448:	009b      	lsls	r3, r3, #2
 801144a:	4413      	add	r3, r2
 801144c:	881b      	ldrh	r3, [r3, #0]
 801144e:	b29b      	uxth	r3, r3
 8011450:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8011454:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011458:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 801145c:	687a      	ldr	r2, [r7, #4]
 801145e:	683b      	ldr	r3, [r7, #0]
 8011460:	781b      	ldrb	r3, [r3, #0]
 8011462:	009b      	lsls	r3, r3, #2
 8011464:	441a      	add	r2, r3
 8011466:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 801146a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801146e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011472:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011476:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801147a:	b29b      	uxth	r3, r3
 801147c:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011488:	b29b      	uxth	r3, r3
 801148a:	461a      	mov	r2, r3
 801148c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801148e:	4413      	add	r3, r2
 8011490:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011492:	683b      	ldr	r3, [r7, #0]
 8011494:	781b      	ldrb	r3, [r3, #0]
 8011496:	011a      	lsls	r2, r3, #4
 8011498:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801149a:	4413      	add	r3, r2
 801149c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80114a0:	65bb      	str	r3, [r7, #88]	; 0x58
 80114a2:	683b      	ldr	r3, [r7, #0]
 80114a4:	891b      	ldrh	r3, [r3, #8]
 80114a6:	085b      	lsrs	r3, r3, #1
 80114a8:	b29b      	uxth	r3, r3
 80114aa:	005b      	lsls	r3, r3, #1
 80114ac:	b29a      	uxth	r2, r3
 80114ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80114b0:	801a      	strh	r2, [r3, #0]
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	657b      	str	r3, [r7, #84]	; 0x54
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80114bc:	b29b      	uxth	r3, r3
 80114be:	461a      	mov	r2, r3
 80114c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80114c2:	4413      	add	r3, r2
 80114c4:	657b      	str	r3, [r7, #84]	; 0x54
 80114c6:	683b      	ldr	r3, [r7, #0]
 80114c8:	781b      	ldrb	r3, [r3, #0]
 80114ca:	011a      	lsls	r2, r3, #4
 80114cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80114ce:	4413      	add	r3, r2
 80114d0:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80114d4:	653b      	str	r3, [r7, #80]	; 0x50
 80114d6:	683b      	ldr	r3, [r7, #0]
 80114d8:	895b      	ldrh	r3, [r3, #10]
 80114da:	085b      	lsrs	r3, r3, #1
 80114dc:	b29b      	uxth	r3, r3
 80114de:	005b      	lsls	r3, r3, #1
 80114e0:	b29a      	uxth	r2, r3
 80114e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80114e4:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80114e6:	683b      	ldr	r3, [r7, #0]
 80114e8:	785b      	ldrb	r3, [r3, #1]
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	f040 8093 	bne.w	8011616 <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80114f0:	687a      	ldr	r2, [r7, #4]
 80114f2:	683b      	ldr	r3, [r7, #0]
 80114f4:	781b      	ldrb	r3, [r3, #0]
 80114f6:	009b      	lsls	r3, r3, #2
 80114f8:	4413      	add	r3, r2
 80114fa:	881b      	ldrh	r3, [r3, #0]
 80114fc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8011500:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011504:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011508:	2b00      	cmp	r3, #0
 801150a:	d01b      	beq.n	8011544 <USB_ActivateEndpoint+0x4cc>
 801150c:	687a      	ldr	r2, [r7, #4]
 801150e:	683b      	ldr	r3, [r7, #0]
 8011510:	781b      	ldrb	r3, [r3, #0]
 8011512:	009b      	lsls	r3, r3, #2
 8011514:	4413      	add	r3, r2
 8011516:	881b      	ldrh	r3, [r3, #0]
 8011518:	b29b      	uxth	r3, r3
 801151a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801151e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011522:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8011524:	687a      	ldr	r2, [r7, #4]
 8011526:	683b      	ldr	r3, [r7, #0]
 8011528:	781b      	ldrb	r3, [r3, #0]
 801152a:	009b      	lsls	r3, r3, #2
 801152c:	441a      	add	r2, r3
 801152e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011530:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011534:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011538:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 801153c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011540:	b29b      	uxth	r3, r3
 8011542:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011544:	687a      	ldr	r2, [r7, #4]
 8011546:	683b      	ldr	r3, [r7, #0]
 8011548:	781b      	ldrb	r3, [r3, #0]
 801154a:	009b      	lsls	r3, r3, #2
 801154c:	4413      	add	r3, r2
 801154e:	881b      	ldrh	r3, [r3, #0]
 8011550:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8011552:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011554:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011558:	2b00      	cmp	r3, #0
 801155a:	d01b      	beq.n	8011594 <USB_ActivateEndpoint+0x51c>
 801155c:	687a      	ldr	r2, [r7, #4]
 801155e:	683b      	ldr	r3, [r7, #0]
 8011560:	781b      	ldrb	r3, [r3, #0]
 8011562:	009b      	lsls	r3, r3, #2
 8011564:	4413      	add	r3, r2
 8011566:	881b      	ldrh	r3, [r3, #0]
 8011568:	b29b      	uxth	r3, r3
 801156a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801156e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011572:	877b      	strh	r3, [r7, #58]	; 0x3a
 8011574:	687a      	ldr	r2, [r7, #4]
 8011576:	683b      	ldr	r3, [r7, #0]
 8011578:	781b      	ldrb	r3, [r3, #0]
 801157a:	009b      	lsls	r3, r3, #2
 801157c:	441a      	add	r2, r3
 801157e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011580:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011584:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011588:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801158c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8011590:	b29b      	uxth	r3, r3
 8011592:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8011594:	687a      	ldr	r2, [r7, #4]
 8011596:	683b      	ldr	r3, [r7, #0]
 8011598:	781b      	ldrb	r3, [r3, #0]
 801159a:	009b      	lsls	r3, r3, #2
 801159c:	4413      	add	r3, r2
 801159e:	881b      	ldrh	r3, [r3, #0]
 80115a0:	b29b      	uxth	r3, r3
 80115a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80115a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80115aa:	873b      	strh	r3, [r7, #56]	; 0x38
 80115ac:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80115ae:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80115b2:	873b      	strh	r3, [r7, #56]	; 0x38
 80115b4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80115b6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80115ba:	873b      	strh	r3, [r7, #56]	; 0x38
 80115bc:	687a      	ldr	r2, [r7, #4]
 80115be:	683b      	ldr	r3, [r7, #0]
 80115c0:	781b      	ldrb	r3, [r3, #0]
 80115c2:	009b      	lsls	r3, r3, #2
 80115c4:	441a      	add	r2, r3
 80115c6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80115c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80115cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80115d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80115d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80115d8:	b29b      	uxth	r3, r3
 80115da:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80115dc:	687a      	ldr	r2, [r7, #4]
 80115de:	683b      	ldr	r3, [r7, #0]
 80115e0:	781b      	ldrb	r3, [r3, #0]
 80115e2:	009b      	lsls	r3, r3, #2
 80115e4:	4413      	add	r3, r2
 80115e6:	881b      	ldrh	r3, [r3, #0]
 80115e8:	b29b      	uxth	r3, r3
 80115ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80115ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80115f2:	86fb      	strh	r3, [r7, #54]	; 0x36
 80115f4:	687a      	ldr	r2, [r7, #4]
 80115f6:	683b      	ldr	r3, [r7, #0]
 80115f8:	781b      	ldrb	r3, [r3, #0]
 80115fa:	009b      	lsls	r3, r3, #2
 80115fc:	441a      	add	r2, r3
 80115fe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011600:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011604:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011608:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801160c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011610:	b29b      	uxth	r3, r3
 8011612:	8013      	strh	r3, [r2, #0]
 8011614:	e0bc      	b.n	8011790 <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011616:	687a      	ldr	r2, [r7, #4]
 8011618:	683b      	ldr	r3, [r7, #0]
 801161a:	781b      	ldrb	r3, [r3, #0]
 801161c:	009b      	lsls	r3, r3, #2
 801161e:	4413      	add	r3, r2
 8011620:	881b      	ldrh	r3, [r3, #0]
 8011622:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8011626:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801162a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801162e:	2b00      	cmp	r3, #0
 8011630:	d01d      	beq.n	801166e <USB_ActivateEndpoint+0x5f6>
 8011632:	687a      	ldr	r2, [r7, #4]
 8011634:	683b      	ldr	r3, [r7, #0]
 8011636:	781b      	ldrb	r3, [r3, #0]
 8011638:	009b      	lsls	r3, r3, #2
 801163a:	4413      	add	r3, r2
 801163c:	881b      	ldrh	r3, [r3, #0]
 801163e:	b29b      	uxth	r3, r3
 8011640:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011644:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011648:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 801164c:	687a      	ldr	r2, [r7, #4]
 801164e:	683b      	ldr	r3, [r7, #0]
 8011650:	781b      	ldrb	r3, [r3, #0]
 8011652:	009b      	lsls	r3, r3, #2
 8011654:	441a      	add	r2, r3
 8011656:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 801165a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801165e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011662:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8011666:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801166a:	b29b      	uxth	r3, r3
 801166c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801166e:	687a      	ldr	r2, [r7, #4]
 8011670:	683b      	ldr	r3, [r7, #0]
 8011672:	781b      	ldrb	r3, [r3, #0]
 8011674:	009b      	lsls	r3, r3, #2
 8011676:	4413      	add	r3, r2
 8011678:	881b      	ldrh	r3, [r3, #0]
 801167a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 801167e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8011682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011686:	2b00      	cmp	r3, #0
 8011688:	d01d      	beq.n	80116c6 <USB_ActivateEndpoint+0x64e>
 801168a:	687a      	ldr	r2, [r7, #4]
 801168c:	683b      	ldr	r3, [r7, #0]
 801168e:	781b      	ldrb	r3, [r3, #0]
 8011690:	009b      	lsls	r3, r3, #2
 8011692:	4413      	add	r3, r2
 8011694:	881b      	ldrh	r3, [r3, #0]
 8011696:	b29b      	uxth	r3, r3
 8011698:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801169c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80116a0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80116a4:	687a      	ldr	r2, [r7, #4]
 80116a6:	683b      	ldr	r3, [r7, #0]
 80116a8:	781b      	ldrb	r3, [r3, #0]
 80116aa:	009b      	lsls	r3, r3, #2
 80116ac:	441a      	add	r2, r3
 80116ae:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80116b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80116b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80116ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80116be:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80116c2:	b29b      	uxth	r3, r3
 80116c4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80116c6:	683b      	ldr	r3, [r7, #0]
 80116c8:	78db      	ldrb	r3, [r3, #3]
 80116ca:	2b01      	cmp	r3, #1
 80116cc:	d024      	beq.n	8011718 <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80116ce:	687a      	ldr	r2, [r7, #4]
 80116d0:	683b      	ldr	r3, [r7, #0]
 80116d2:	781b      	ldrb	r3, [r3, #0]
 80116d4:	009b      	lsls	r3, r3, #2
 80116d6:	4413      	add	r3, r2
 80116d8:	881b      	ldrh	r3, [r3, #0]
 80116da:	b29b      	uxth	r3, r3
 80116dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80116e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80116e4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80116e8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80116ec:	f083 0320 	eor.w	r3, r3, #32
 80116f0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80116f4:	687a      	ldr	r2, [r7, #4]
 80116f6:	683b      	ldr	r3, [r7, #0]
 80116f8:	781b      	ldrb	r3, [r3, #0]
 80116fa:	009b      	lsls	r3, r3, #2
 80116fc:	441a      	add	r2, r3
 80116fe:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8011702:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011706:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801170a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801170e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011712:	b29b      	uxth	r3, r3
 8011714:	8013      	strh	r3, [r2, #0]
 8011716:	e01d      	b.n	8011754 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8011718:	687a      	ldr	r2, [r7, #4]
 801171a:	683b      	ldr	r3, [r7, #0]
 801171c:	781b      	ldrb	r3, [r3, #0]
 801171e:	009b      	lsls	r3, r3, #2
 8011720:	4413      	add	r3, r2
 8011722:	881b      	ldrh	r3, [r3, #0]
 8011724:	b29b      	uxth	r3, r3
 8011726:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801172a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801172e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8011732:	687a      	ldr	r2, [r7, #4]
 8011734:	683b      	ldr	r3, [r7, #0]
 8011736:	781b      	ldrb	r3, [r3, #0]
 8011738:	009b      	lsls	r3, r3, #2
 801173a:	441a      	add	r2, r3
 801173c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8011740:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011744:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011748:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801174c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011750:	b29b      	uxth	r3, r3
 8011752:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8011754:	687a      	ldr	r2, [r7, #4]
 8011756:	683b      	ldr	r3, [r7, #0]
 8011758:	781b      	ldrb	r3, [r3, #0]
 801175a:	009b      	lsls	r3, r3, #2
 801175c:	4413      	add	r3, r2
 801175e:	881b      	ldrh	r3, [r3, #0]
 8011760:	b29b      	uxth	r3, r3
 8011762:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011766:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801176a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 801176e:	687a      	ldr	r2, [r7, #4]
 8011770:	683b      	ldr	r3, [r7, #0]
 8011772:	781b      	ldrb	r3, [r3, #0]
 8011774:	009b      	lsls	r3, r3, #2
 8011776:	441a      	add	r2, r3
 8011778:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801177c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011780:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011784:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801178c:	b29b      	uxth	r3, r3
 801178e:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8011790:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8011794:	4618      	mov	r0, r3
 8011796:	3774      	adds	r7, #116	; 0x74
 8011798:	46bd      	mov	sp, r7
 801179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801179e:	4770      	bx	lr

080117a0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80117a0:	b480      	push	{r7}
 80117a2:	b08d      	sub	sp, #52	; 0x34
 80117a4:	af00      	add	r7, sp, #0
 80117a6:	6078      	str	r0, [r7, #4]
 80117a8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80117aa:	683b      	ldr	r3, [r7, #0]
 80117ac:	7b1b      	ldrb	r3, [r3, #12]
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	f040 808e 	bne.w	80118d0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80117b4:	683b      	ldr	r3, [r7, #0]
 80117b6:	785b      	ldrb	r3, [r3, #1]
 80117b8:	2b00      	cmp	r3, #0
 80117ba:	d044      	beq.n	8011846 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80117bc:	687a      	ldr	r2, [r7, #4]
 80117be:	683b      	ldr	r3, [r7, #0]
 80117c0:	781b      	ldrb	r3, [r3, #0]
 80117c2:	009b      	lsls	r3, r3, #2
 80117c4:	4413      	add	r3, r2
 80117c6:	881b      	ldrh	r3, [r3, #0]
 80117c8:	81bb      	strh	r3, [r7, #12]
 80117ca:	89bb      	ldrh	r3, [r7, #12]
 80117cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80117d0:	2b00      	cmp	r3, #0
 80117d2:	d01b      	beq.n	801180c <USB_DeactivateEndpoint+0x6c>
 80117d4:	687a      	ldr	r2, [r7, #4]
 80117d6:	683b      	ldr	r3, [r7, #0]
 80117d8:	781b      	ldrb	r3, [r3, #0]
 80117da:	009b      	lsls	r3, r3, #2
 80117dc:	4413      	add	r3, r2
 80117de:	881b      	ldrh	r3, [r3, #0]
 80117e0:	b29b      	uxth	r3, r3
 80117e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80117e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80117ea:	817b      	strh	r3, [r7, #10]
 80117ec:	687a      	ldr	r2, [r7, #4]
 80117ee:	683b      	ldr	r3, [r7, #0]
 80117f0:	781b      	ldrb	r3, [r3, #0]
 80117f2:	009b      	lsls	r3, r3, #2
 80117f4:	441a      	add	r2, r3
 80117f6:	897b      	ldrh	r3, [r7, #10]
 80117f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80117fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011800:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011804:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8011808:	b29b      	uxth	r3, r3
 801180a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801180c:	687a      	ldr	r2, [r7, #4]
 801180e:	683b      	ldr	r3, [r7, #0]
 8011810:	781b      	ldrb	r3, [r3, #0]
 8011812:	009b      	lsls	r3, r3, #2
 8011814:	4413      	add	r3, r2
 8011816:	881b      	ldrh	r3, [r3, #0]
 8011818:	b29b      	uxth	r3, r3
 801181a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801181e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011822:	813b      	strh	r3, [r7, #8]
 8011824:	687a      	ldr	r2, [r7, #4]
 8011826:	683b      	ldr	r3, [r7, #0]
 8011828:	781b      	ldrb	r3, [r3, #0]
 801182a:	009b      	lsls	r3, r3, #2
 801182c:	441a      	add	r2, r3
 801182e:	893b      	ldrh	r3, [r7, #8]
 8011830:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011834:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011838:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801183c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011840:	b29b      	uxth	r3, r3
 8011842:	8013      	strh	r3, [r2, #0]
 8011844:	e192      	b.n	8011b6c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011846:	687a      	ldr	r2, [r7, #4]
 8011848:	683b      	ldr	r3, [r7, #0]
 801184a:	781b      	ldrb	r3, [r3, #0]
 801184c:	009b      	lsls	r3, r3, #2
 801184e:	4413      	add	r3, r2
 8011850:	881b      	ldrh	r3, [r3, #0]
 8011852:	827b      	strh	r3, [r7, #18]
 8011854:	8a7b      	ldrh	r3, [r7, #18]
 8011856:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801185a:	2b00      	cmp	r3, #0
 801185c:	d01b      	beq.n	8011896 <USB_DeactivateEndpoint+0xf6>
 801185e:	687a      	ldr	r2, [r7, #4]
 8011860:	683b      	ldr	r3, [r7, #0]
 8011862:	781b      	ldrb	r3, [r3, #0]
 8011864:	009b      	lsls	r3, r3, #2
 8011866:	4413      	add	r3, r2
 8011868:	881b      	ldrh	r3, [r3, #0]
 801186a:	b29b      	uxth	r3, r3
 801186c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011870:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011874:	823b      	strh	r3, [r7, #16]
 8011876:	687a      	ldr	r2, [r7, #4]
 8011878:	683b      	ldr	r3, [r7, #0]
 801187a:	781b      	ldrb	r3, [r3, #0]
 801187c:	009b      	lsls	r3, r3, #2
 801187e:	441a      	add	r2, r3
 8011880:	8a3b      	ldrh	r3, [r7, #16]
 8011882:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011886:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801188a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 801188e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011892:	b29b      	uxth	r3, r3
 8011894:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8011896:	687a      	ldr	r2, [r7, #4]
 8011898:	683b      	ldr	r3, [r7, #0]
 801189a:	781b      	ldrb	r3, [r3, #0]
 801189c:	009b      	lsls	r3, r3, #2
 801189e:	4413      	add	r3, r2
 80118a0:	881b      	ldrh	r3, [r3, #0]
 80118a2:	b29b      	uxth	r3, r3
 80118a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80118a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80118ac:	81fb      	strh	r3, [r7, #14]
 80118ae:	687a      	ldr	r2, [r7, #4]
 80118b0:	683b      	ldr	r3, [r7, #0]
 80118b2:	781b      	ldrb	r3, [r3, #0]
 80118b4:	009b      	lsls	r3, r3, #2
 80118b6:	441a      	add	r2, r3
 80118b8:	89fb      	ldrh	r3, [r7, #14]
 80118ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80118be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80118c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80118c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80118ca:	b29b      	uxth	r3, r3
 80118cc:	8013      	strh	r3, [r2, #0]
 80118ce:	e14d      	b.n	8011b6c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80118d0:	683b      	ldr	r3, [r7, #0]
 80118d2:	785b      	ldrb	r3, [r3, #1]
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	f040 80a5 	bne.w	8011a24 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80118da:	687a      	ldr	r2, [r7, #4]
 80118dc:	683b      	ldr	r3, [r7, #0]
 80118de:	781b      	ldrb	r3, [r3, #0]
 80118e0:	009b      	lsls	r3, r3, #2
 80118e2:	4413      	add	r3, r2
 80118e4:	881b      	ldrh	r3, [r3, #0]
 80118e6:	843b      	strh	r3, [r7, #32]
 80118e8:	8c3b      	ldrh	r3, [r7, #32]
 80118ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80118ee:	2b00      	cmp	r3, #0
 80118f0:	d01b      	beq.n	801192a <USB_DeactivateEndpoint+0x18a>
 80118f2:	687a      	ldr	r2, [r7, #4]
 80118f4:	683b      	ldr	r3, [r7, #0]
 80118f6:	781b      	ldrb	r3, [r3, #0]
 80118f8:	009b      	lsls	r3, r3, #2
 80118fa:	4413      	add	r3, r2
 80118fc:	881b      	ldrh	r3, [r3, #0]
 80118fe:	b29b      	uxth	r3, r3
 8011900:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011904:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011908:	83fb      	strh	r3, [r7, #30]
 801190a:	687a      	ldr	r2, [r7, #4]
 801190c:	683b      	ldr	r3, [r7, #0]
 801190e:	781b      	ldrb	r3, [r3, #0]
 8011910:	009b      	lsls	r3, r3, #2
 8011912:	441a      	add	r2, r3
 8011914:	8bfb      	ldrh	r3, [r7, #30]
 8011916:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801191a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801191e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8011922:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011926:	b29b      	uxth	r3, r3
 8011928:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801192a:	687a      	ldr	r2, [r7, #4]
 801192c:	683b      	ldr	r3, [r7, #0]
 801192e:	781b      	ldrb	r3, [r3, #0]
 8011930:	009b      	lsls	r3, r3, #2
 8011932:	4413      	add	r3, r2
 8011934:	881b      	ldrh	r3, [r3, #0]
 8011936:	83bb      	strh	r3, [r7, #28]
 8011938:	8bbb      	ldrh	r3, [r7, #28]
 801193a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801193e:	2b00      	cmp	r3, #0
 8011940:	d01b      	beq.n	801197a <USB_DeactivateEndpoint+0x1da>
 8011942:	687a      	ldr	r2, [r7, #4]
 8011944:	683b      	ldr	r3, [r7, #0]
 8011946:	781b      	ldrb	r3, [r3, #0]
 8011948:	009b      	lsls	r3, r3, #2
 801194a:	4413      	add	r3, r2
 801194c:	881b      	ldrh	r3, [r3, #0]
 801194e:	b29b      	uxth	r3, r3
 8011950:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011954:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011958:	837b      	strh	r3, [r7, #26]
 801195a:	687a      	ldr	r2, [r7, #4]
 801195c:	683b      	ldr	r3, [r7, #0]
 801195e:	781b      	ldrb	r3, [r3, #0]
 8011960:	009b      	lsls	r3, r3, #2
 8011962:	441a      	add	r2, r3
 8011964:	8b7b      	ldrh	r3, [r7, #26]
 8011966:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801196a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801196e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011972:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8011976:	b29b      	uxth	r3, r3
 8011978:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 801197a:	687a      	ldr	r2, [r7, #4]
 801197c:	683b      	ldr	r3, [r7, #0]
 801197e:	781b      	ldrb	r3, [r3, #0]
 8011980:	009b      	lsls	r3, r3, #2
 8011982:	4413      	add	r3, r2
 8011984:	881b      	ldrh	r3, [r3, #0]
 8011986:	b29b      	uxth	r3, r3
 8011988:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801198c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011990:	833b      	strh	r3, [r7, #24]
 8011992:	687a      	ldr	r2, [r7, #4]
 8011994:	683b      	ldr	r3, [r7, #0]
 8011996:	781b      	ldrb	r3, [r3, #0]
 8011998:	009b      	lsls	r3, r3, #2
 801199a:	441a      	add	r2, r3
 801199c:	8b3b      	ldrh	r3, [r7, #24]
 801199e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80119a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80119a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80119aa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80119ae:	b29b      	uxth	r3, r3
 80119b0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80119b2:	687a      	ldr	r2, [r7, #4]
 80119b4:	683b      	ldr	r3, [r7, #0]
 80119b6:	781b      	ldrb	r3, [r3, #0]
 80119b8:	009b      	lsls	r3, r3, #2
 80119ba:	4413      	add	r3, r2
 80119bc:	881b      	ldrh	r3, [r3, #0]
 80119be:	b29b      	uxth	r3, r3
 80119c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80119c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80119c8:	82fb      	strh	r3, [r7, #22]
 80119ca:	687a      	ldr	r2, [r7, #4]
 80119cc:	683b      	ldr	r3, [r7, #0]
 80119ce:	781b      	ldrb	r3, [r3, #0]
 80119d0:	009b      	lsls	r3, r3, #2
 80119d2:	441a      	add	r2, r3
 80119d4:	8afb      	ldrh	r3, [r7, #22]
 80119d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80119da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80119de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80119e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80119e6:	b29b      	uxth	r3, r3
 80119e8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80119ea:	687a      	ldr	r2, [r7, #4]
 80119ec:	683b      	ldr	r3, [r7, #0]
 80119ee:	781b      	ldrb	r3, [r3, #0]
 80119f0:	009b      	lsls	r3, r3, #2
 80119f2:	4413      	add	r3, r2
 80119f4:	881b      	ldrh	r3, [r3, #0]
 80119f6:	b29b      	uxth	r3, r3
 80119f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80119fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011a00:	82bb      	strh	r3, [r7, #20]
 8011a02:	687a      	ldr	r2, [r7, #4]
 8011a04:	683b      	ldr	r3, [r7, #0]
 8011a06:	781b      	ldrb	r3, [r3, #0]
 8011a08:	009b      	lsls	r3, r3, #2
 8011a0a:	441a      	add	r2, r3
 8011a0c:	8abb      	ldrh	r3, [r7, #20]
 8011a0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011a12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011a16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011a1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011a1e:	b29b      	uxth	r3, r3
 8011a20:	8013      	strh	r3, [r2, #0]
 8011a22:	e0a3      	b.n	8011b6c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011a24:	687a      	ldr	r2, [r7, #4]
 8011a26:	683b      	ldr	r3, [r7, #0]
 8011a28:	781b      	ldrb	r3, [r3, #0]
 8011a2a:	009b      	lsls	r3, r3, #2
 8011a2c:	4413      	add	r3, r2
 8011a2e:	881b      	ldrh	r3, [r3, #0]
 8011a30:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8011a32:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011a34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011a38:	2b00      	cmp	r3, #0
 8011a3a:	d01b      	beq.n	8011a74 <USB_DeactivateEndpoint+0x2d4>
 8011a3c:	687a      	ldr	r2, [r7, #4]
 8011a3e:	683b      	ldr	r3, [r7, #0]
 8011a40:	781b      	ldrb	r3, [r3, #0]
 8011a42:	009b      	lsls	r3, r3, #2
 8011a44:	4413      	add	r3, r2
 8011a46:	881b      	ldrh	r3, [r3, #0]
 8011a48:	b29b      	uxth	r3, r3
 8011a4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011a4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011a52:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8011a54:	687a      	ldr	r2, [r7, #4]
 8011a56:	683b      	ldr	r3, [r7, #0]
 8011a58:	781b      	ldrb	r3, [r3, #0]
 8011a5a:	009b      	lsls	r3, r3, #2
 8011a5c:	441a      	add	r2, r3
 8011a5e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011a60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011a64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011a68:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8011a6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011a70:	b29b      	uxth	r3, r3
 8011a72:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011a74:	687a      	ldr	r2, [r7, #4]
 8011a76:	683b      	ldr	r3, [r7, #0]
 8011a78:	781b      	ldrb	r3, [r3, #0]
 8011a7a:	009b      	lsls	r3, r3, #2
 8011a7c:	4413      	add	r3, r2
 8011a7e:	881b      	ldrh	r3, [r3, #0]
 8011a80:	857b      	strh	r3, [r7, #42]	; 0x2a
 8011a82:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011a84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011a88:	2b00      	cmp	r3, #0
 8011a8a:	d01b      	beq.n	8011ac4 <USB_DeactivateEndpoint+0x324>
 8011a8c:	687a      	ldr	r2, [r7, #4]
 8011a8e:	683b      	ldr	r3, [r7, #0]
 8011a90:	781b      	ldrb	r3, [r3, #0]
 8011a92:	009b      	lsls	r3, r3, #2
 8011a94:	4413      	add	r3, r2
 8011a96:	881b      	ldrh	r3, [r3, #0]
 8011a98:	b29b      	uxth	r3, r3
 8011a9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011a9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011aa2:	853b      	strh	r3, [r7, #40]	; 0x28
 8011aa4:	687a      	ldr	r2, [r7, #4]
 8011aa6:	683b      	ldr	r3, [r7, #0]
 8011aa8:	781b      	ldrb	r3, [r3, #0]
 8011aaa:	009b      	lsls	r3, r3, #2
 8011aac:	441a      	add	r2, r3
 8011aae:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8011ab0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011ab4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011ab8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011abc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8011ac0:	b29b      	uxth	r3, r3
 8011ac2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8011ac4:	687a      	ldr	r2, [r7, #4]
 8011ac6:	683b      	ldr	r3, [r7, #0]
 8011ac8:	781b      	ldrb	r3, [r3, #0]
 8011aca:	009b      	lsls	r3, r3, #2
 8011acc:	4413      	add	r3, r2
 8011ace:	881b      	ldrh	r3, [r3, #0]
 8011ad0:	b29b      	uxth	r3, r3
 8011ad2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011ad6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011ada:	84fb      	strh	r3, [r7, #38]	; 0x26
 8011adc:	687a      	ldr	r2, [r7, #4]
 8011ade:	683b      	ldr	r3, [r7, #0]
 8011ae0:	781b      	ldrb	r3, [r3, #0]
 8011ae2:	009b      	lsls	r3, r3, #2
 8011ae4:	441a      	add	r2, r3
 8011ae6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011ae8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011aec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011af0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8011af4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011af8:	b29b      	uxth	r3, r3
 8011afa:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8011afc:	687a      	ldr	r2, [r7, #4]
 8011afe:	683b      	ldr	r3, [r7, #0]
 8011b00:	781b      	ldrb	r3, [r3, #0]
 8011b02:	009b      	lsls	r3, r3, #2
 8011b04:	4413      	add	r3, r2
 8011b06:	881b      	ldrh	r3, [r3, #0]
 8011b08:	b29b      	uxth	r3, r3
 8011b0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011b0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011b12:	84bb      	strh	r3, [r7, #36]	; 0x24
 8011b14:	687a      	ldr	r2, [r7, #4]
 8011b16:	683b      	ldr	r3, [r7, #0]
 8011b18:	781b      	ldrb	r3, [r3, #0]
 8011b1a:	009b      	lsls	r3, r3, #2
 8011b1c:	441a      	add	r2, r3
 8011b1e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011b20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011b24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011b28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011b2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011b30:	b29b      	uxth	r3, r3
 8011b32:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8011b34:	687a      	ldr	r2, [r7, #4]
 8011b36:	683b      	ldr	r3, [r7, #0]
 8011b38:	781b      	ldrb	r3, [r3, #0]
 8011b3a:	009b      	lsls	r3, r3, #2
 8011b3c:	4413      	add	r3, r2
 8011b3e:	881b      	ldrh	r3, [r3, #0]
 8011b40:	b29b      	uxth	r3, r3
 8011b42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011b46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011b4a:	847b      	strh	r3, [r7, #34]	; 0x22
 8011b4c:	687a      	ldr	r2, [r7, #4]
 8011b4e:	683b      	ldr	r3, [r7, #0]
 8011b50:	781b      	ldrb	r3, [r3, #0]
 8011b52:	009b      	lsls	r3, r3, #2
 8011b54:	441a      	add	r2, r3
 8011b56:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011b58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011b5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011b60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011b64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011b68:	b29b      	uxth	r3, r3
 8011b6a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8011b6c:	2300      	movs	r3, #0
}
 8011b6e:	4618      	mov	r0, r3
 8011b70:	3734      	adds	r7, #52	; 0x34
 8011b72:	46bd      	mov	sp, r7
 8011b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b78:	4770      	bx	lr

08011b7a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8011b7a:	b580      	push	{r7, lr}
 8011b7c:	b0c2      	sub	sp, #264	; 0x108
 8011b7e:	af00      	add	r7, sp, #0
 8011b80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b84:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011b88:	6018      	str	r0, [r3, #0]
 8011b8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011b92:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8011b94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011b9c:	681b      	ldr	r3, [r3, #0]
 8011b9e:	785b      	ldrb	r3, [r3, #1]
 8011ba0:	2b01      	cmp	r3, #1
 8011ba2:	f040 867b 	bne.w	801289c <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8011ba6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011baa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011bae:	681b      	ldr	r3, [r3, #0]
 8011bb0:	699a      	ldr	r2, [r3, #24]
 8011bb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011bb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011bba:	681b      	ldr	r3, [r3, #0]
 8011bbc:	691b      	ldr	r3, [r3, #16]
 8011bbe:	429a      	cmp	r2, r3
 8011bc0:	d908      	bls.n	8011bd4 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8011bc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011bc6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011bca:	681b      	ldr	r3, [r3, #0]
 8011bcc:	691b      	ldr	r3, [r3, #16]
 8011bce:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8011bd2:	e007      	b.n	8011be4 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8011bd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011bd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011bdc:	681b      	ldr	r3, [r3, #0]
 8011bde:	699b      	ldr	r3, [r3, #24]
 8011be0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8011be4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011be8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011bec:	681b      	ldr	r3, [r3, #0]
 8011bee:	7b1b      	ldrb	r3, [r3, #12]
 8011bf0:	2b00      	cmp	r3, #0
 8011bf2:	d13a      	bne.n	8011c6a <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8011bf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011bf8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011bfc:	681b      	ldr	r3, [r3, #0]
 8011bfe:	6959      	ldr	r1, [r3, #20]
 8011c00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011c08:	681b      	ldr	r3, [r3, #0]
 8011c0a:	88da      	ldrh	r2, [r3, #6]
 8011c0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011c10:	b29b      	uxth	r3, r3
 8011c12:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8011c16:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8011c1a:	6800      	ldr	r0, [r0, #0]
 8011c1c:	f001 fc11 	bl	8013442 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8011c20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c24:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011c28:	681b      	ldr	r3, [r3, #0]
 8011c2a:	613b      	str	r3, [r7, #16]
 8011c2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c30:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011c34:	681b      	ldr	r3, [r3, #0]
 8011c36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011c3a:	b29b      	uxth	r3, r3
 8011c3c:	461a      	mov	r2, r3
 8011c3e:	693b      	ldr	r3, [r7, #16]
 8011c40:	4413      	add	r3, r2
 8011c42:	613b      	str	r3, [r7, #16]
 8011c44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011c4c:	681b      	ldr	r3, [r3, #0]
 8011c4e:	781b      	ldrb	r3, [r3, #0]
 8011c50:	011a      	lsls	r2, r3, #4
 8011c52:	693b      	ldr	r3, [r7, #16]
 8011c54:	4413      	add	r3, r2
 8011c56:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8011c5a:	60fb      	str	r3, [r7, #12]
 8011c5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011c60:	b29a      	uxth	r2, r3
 8011c62:	68fb      	ldr	r3, [r7, #12]
 8011c64:	801a      	strh	r2, [r3, #0]
 8011c66:	f000 bde3 	b.w	8012830 <USB_EPStartXfer+0xcb6>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8011c6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011c72:	681b      	ldr	r3, [r3, #0]
 8011c74:	78db      	ldrb	r3, [r3, #3]
 8011c76:	2b02      	cmp	r3, #2
 8011c78:	f040 843a 	bne.w	80124f0 <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8011c7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011c84:	681b      	ldr	r3, [r3, #0]
 8011c86:	6a1a      	ldr	r2, [r3, #32]
 8011c88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011c90:	681b      	ldr	r3, [r3, #0]
 8011c92:	691b      	ldr	r3, [r3, #16]
 8011c94:	429a      	cmp	r2, r3
 8011c96:	f240 83b7 	bls.w	8012408 <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8011c9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c9e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011ca2:	681a      	ldr	r2, [r3, #0]
 8011ca4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ca8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011cac:	681b      	ldr	r3, [r3, #0]
 8011cae:	781b      	ldrb	r3, [r3, #0]
 8011cb0:	009b      	lsls	r3, r3, #2
 8011cb2:	4413      	add	r3, r2
 8011cb4:	881b      	ldrh	r3, [r3, #0]
 8011cb6:	b29b      	uxth	r3, r3
 8011cb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011cbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011cc0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8011cc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011cc8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011ccc:	681a      	ldr	r2, [r3, #0]
 8011cce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011cd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011cd6:	681b      	ldr	r3, [r3, #0]
 8011cd8:	781b      	ldrb	r3, [r3, #0]
 8011cda:	009b      	lsls	r3, r3, #2
 8011cdc:	441a      	add	r2, r3
 8011cde:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8011ce2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011ce6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011cea:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8011cee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011cf2:	b29b      	uxth	r3, r3
 8011cf4:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8011cf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011cfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011cfe:	681b      	ldr	r3, [r3, #0]
 8011d00:	6a1a      	ldr	r2, [r3, #32]
 8011d02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011d06:	1ad2      	subs	r2, r2, r3
 8011d08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011d10:	681b      	ldr	r3, [r3, #0]
 8011d12:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8011d14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d18:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011d1c:	681a      	ldr	r2, [r3, #0]
 8011d1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011d26:	681b      	ldr	r3, [r3, #0]
 8011d28:	781b      	ldrb	r3, [r3, #0]
 8011d2a:	009b      	lsls	r3, r3, #2
 8011d2c:	4413      	add	r3, r2
 8011d2e:	881b      	ldrh	r3, [r3, #0]
 8011d30:	b29b      	uxth	r3, r3
 8011d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011d36:	2b00      	cmp	r3, #0
 8011d38:	f000 81b3 	beq.w	80120a2 <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8011d3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d40:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011d44:	681b      	ldr	r3, [r3, #0]
 8011d46:	633b      	str	r3, [r7, #48]	; 0x30
 8011d48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011d50:	681b      	ldr	r3, [r3, #0]
 8011d52:	785b      	ldrb	r3, [r3, #1]
 8011d54:	2b00      	cmp	r3, #0
 8011d56:	d16d      	bne.n	8011e34 <USB_EPStartXfer+0x2ba>
 8011d58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d5c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011d60:	681b      	ldr	r3, [r3, #0]
 8011d62:	62bb      	str	r3, [r7, #40]	; 0x28
 8011d64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d68:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011d6c:	681b      	ldr	r3, [r3, #0]
 8011d6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011d72:	b29b      	uxth	r3, r3
 8011d74:	461a      	mov	r2, r3
 8011d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d78:	4413      	add	r3, r2
 8011d7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8011d7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011d84:	681b      	ldr	r3, [r3, #0]
 8011d86:	781b      	ldrb	r3, [r3, #0]
 8011d88:	011a      	lsls	r2, r3, #4
 8011d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d8c:	4413      	add	r3, r2
 8011d8e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8011d92:	627b      	str	r3, [r7, #36]	; 0x24
 8011d94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011d98:	2b00      	cmp	r3, #0
 8011d9a:	d112      	bne.n	8011dc2 <USB_EPStartXfer+0x248>
 8011d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d9e:	881b      	ldrh	r3, [r3, #0]
 8011da0:	b29b      	uxth	r3, r3
 8011da2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8011da6:	b29a      	uxth	r2, r3
 8011da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011daa:	801a      	strh	r2, [r3, #0]
 8011dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dae:	881b      	ldrh	r3, [r3, #0]
 8011db0:	b29b      	uxth	r3, r3
 8011db2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011db6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011dba:	b29a      	uxth	r2, r3
 8011dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dbe:	801a      	strh	r2, [r3, #0]
 8011dc0:	e05d      	b.n	8011e7e <USB_EPStartXfer+0x304>
 8011dc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011dc6:	2b3e      	cmp	r3, #62	; 0x3e
 8011dc8:	d817      	bhi.n	8011dfa <USB_EPStartXfer+0x280>
 8011dca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011dce:	085b      	lsrs	r3, r3, #1
 8011dd0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8011dd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011dd8:	f003 0301 	and.w	r3, r3, #1
 8011ddc:	2b00      	cmp	r3, #0
 8011dde:	d004      	beq.n	8011dea <USB_EPStartXfer+0x270>
 8011de0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8011de4:	3301      	adds	r3, #1
 8011de6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8011dea:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8011dee:	b29b      	uxth	r3, r3
 8011df0:	029b      	lsls	r3, r3, #10
 8011df2:	b29a      	uxth	r2, r3
 8011df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011df6:	801a      	strh	r2, [r3, #0]
 8011df8:	e041      	b.n	8011e7e <USB_EPStartXfer+0x304>
 8011dfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011dfe:	095b      	lsrs	r3, r3, #5
 8011e00:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8011e04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011e08:	f003 031f 	and.w	r3, r3, #31
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	d104      	bne.n	8011e1a <USB_EPStartXfer+0x2a0>
 8011e10:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8011e14:	3b01      	subs	r3, #1
 8011e16:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8011e1a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8011e1e:	b29b      	uxth	r3, r3
 8011e20:	029b      	lsls	r3, r3, #10
 8011e22:	b29b      	uxth	r3, r3
 8011e24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011e28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011e2c:	b29a      	uxth	r2, r3
 8011e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e30:	801a      	strh	r2, [r3, #0]
 8011e32:	e024      	b.n	8011e7e <USB_EPStartXfer+0x304>
 8011e34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011e38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011e3c:	681b      	ldr	r3, [r3, #0]
 8011e3e:	785b      	ldrb	r3, [r3, #1]
 8011e40:	2b01      	cmp	r3, #1
 8011e42:	d11c      	bne.n	8011e7e <USB_EPStartXfer+0x304>
 8011e44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011e48:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011e4c:	681b      	ldr	r3, [r3, #0]
 8011e4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011e52:	b29b      	uxth	r3, r3
 8011e54:	461a      	mov	r2, r3
 8011e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e58:	4413      	add	r3, r2
 8011e5a:	633b      	str	r3, [r7, #48]	; 0x30
 8011e5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011e60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011e64:	681b      	ldr	r3, [r3, #0]
 8011e66:	781b      	ldrb	r3, [r3, #0]
 8011e68:	011a      	lsls	r2, r3, #4
 8011e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e6c:	4413      	add	r3, r2
 8011e6e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8011e72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011e74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011e78:	b29a      	uxth	r2, r3
 8011e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e7c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8011e7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011e82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011e86:	681b      	ldr	r3, [r3, #0]
 8011e88:	895b      	ldrh	r3, [r3, #10]
 8011e8a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8011e8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011e92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011e96:	681b      	ldr	r3, [r3, #0]
 8011e98:	6959      	ldr	r1, [r3, #20]
 8011e9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011e9e:	b29b      	uxth	r3, r3
 8011ea0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8011ea4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8011ea8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8011eac:	6800      	ldr	r0, [r0, #0]
 8011eae:	f001 fac8 	bl	8013442 <USB_WritePMA>
            ep->xfer_buff += len;
 8011eb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011eb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011eba:	681b      	ldr	r3, [r3, #0]
 8011ebc:	695a      	ldr	r2, [r3, #20]
 8011ebe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011ec2:	441a      	add	r2, r3
 8011ec4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ec8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011ecc:	681b      	ldr	r3, [r3, #0]
 8011ece:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8011ed0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ed4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011ed8:	681b      	ldr	r3, [r3, #0]
 8011eda:	6a1a      	ldr	r2, [r3, #32]
 8011edc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ee0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011ee4:	681b      	ldr	r3, [r3, #0]
 8011ee6:	691b      	ldr	r3, [r3, #16]
 8011ee8:	429a      	cmp	r2, r3
 8011eea:	d90f      	bls.n	8011f0c <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 8011eec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ef0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011ef4:	681b      	ldr	r3, [r3, #0]
 8011ef6:	6a1a      	ldr	r2, [r3, #32]
 8011ef8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011efc:	1ad2      	subs	r2, r2, r3
 8011efe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011f02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011f06:	681b      	ldr	r3, [r3, #0]
 8011f08:	621a      	str	r2, [r3, #32]
 8011f0a:	e00e      	b.n	8011f2a <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8011f0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011f10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011f14:	681b      	ldr	r3, [r3, #0]
 8011f16:	6a1b      	ldr	r3, [r3, #32]
 8011f18:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8011f1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011f20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011f24:	681b      	ldr	r3, [r3, #0]
 8011f26:	2200      	movs	r2, #0
 8011f28:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8011f2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011f2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011f32:	681b      	ldr	r3, [r3, #0]
 8011f34:	785b      	ldrb	r3, [r3, #1]
 8011f36:	2b00      	cmp	r3, #0
 8011f38:	d16d      	bne.n	8012016 <USB_EPStartXfer+0x49c>
 8011f3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011f3e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011f42:	681b      	ldr	r3, [r3, #0]
 8011f44:	61bb      	str	r3, [r7, #24]
 8011f46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011f4a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011f4e:	681b      	ldr	r3, [r3, #0]
 8011f50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011f54:	b29b      	uxth	r3, r3
 8011f56:	461a      	mov	r2, r3
 8011f58:	69bb      	ldr	r3, [r7, #24]
 8011f5a:	4413      	add	r3, r2
 8011f5c:	61bb      	str	r3, [r7, #24]
 8011f5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011f62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011f66:	681b      	ldr	r3, [r3, #0]
 8011f68:	781b      	ldrb	r3, [r3, #0]
 8011f6a:	011a      	lsls	r2, r3, #4
 8011f6c:	69bb      	ldr	r3, [r7, #24]
 8011f6e:	4413      	add	r3, r2
 8011f70:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8011f74:	617b      	str	r3, [r7, #20]
 8011f76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011f7a:	2b00      	cmp	r3, #0
 8011f7c:	d112      	bne.n	8011fa4 <USB_EPStartXfer+0x42a>
 8011f7e:	697b      	ldr	r3, [r7, #20]
 8011f80:	881b      	ldrh	r3, [r3, #0]
 8011f82:	b29b      	uxth	r3, r3
 8011f84:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8011f88:	b29a      	uxth	r2, r3
 8011f8a:	697b      	ldr	r3, [r7, #20]
 8011f8c:	801a      	strh	r2, [r3, #0]
 8011f8e:	697b      	ldr	r3, [r7, #20]
 8011f90:	881b      	ldrh	r3, [r3, #0]
 8011f92:	b29b      	uxth	r3, r3
 8011f94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011f98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011f9c:	b29a      	uxth	r2, r3
 8011f9e:	697b      	ldr	r3, [r7, #20]
 8011fa0:	801a      	strh	r2, [r3, #0]
 8011fa2:	e063      	b.n	801206c <USB_EPStartXfer+0x4f2>
 8011fa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011fa8:	2b3e      	cmp	r3, #62	; 0x3e
 8011faa:	d817      	bhi.n	8011fdc <USB_EPStartXfer+0x462>
 8011fac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011fb0:	085b      	lsrs	r3, r3, #1
 8011fb2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8011fb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011fba:	f003 0301 	and.w	r3, r3, #1
 8011fbe:	2b00      	cmp	r3, #0
 8011fc0:	d004      	beq.n	8011fcc <USB_EPStartXfer+0x452>
 8011fc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011fc6:	3301      	adds	r3, #1
 8011fc8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8011fcc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011fd0:	b29b      	uxth	r3, r3
 8011fd2:	029b      	lsls	r3, r3, #10
 8011fd4:	b29a      	uxth	r2, r3
 8011fd6:	697b      	ldr	r3, [r7, #20]
 8011fd8:	801a      	strh	r2, [r3, #0]
 8011fda:	e047      	b.n	801206c <USB_EPStartXfer+0x4f2>
 8011fdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011fe0:	095b      	lsrs	r3, r3, #5
 8011fe2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8011fe6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011fea:	f003 031f 	and.w	r3, r3, #31
 8011fee:	2b00      	cmp	r3, #0
 8011ff0:	d104      	bne.n	8011ffc <USB_EPStartXfer+0x482>
 8011ff2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011ff6:	3b01      	subs	r3, #1
 8011ff8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8011ffc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8012000:	b29b      	uxth	r3, r3
 8012002:	029b      	lsls	r3, r3, #10
 8012004:	b29b      	uxth	r3, r3
 8012006:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801200a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801200e:	b29a      	uxth	r2, r3
 8012010:	697b      	ldr	r3, [r7, #20]
 8012012:	801a      	strh	r2, [r3, #0]
 8012014:	e02a      	b.n	801206c <USB_EPStartXfer+0x4f2>
 8012016:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801201a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801201e:	681b      	ldr	r3, [r3, #0]
 8012020:	785b      	ldrb	r3, [r3, #1]
 8012022:	2b01      	cmp	r3, #1
 8012024:	d122      	bne.n	801206c <USB_EPStartXfer+0x4f2>
 8012026:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801202a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801202e:	681b      	ldr	r3, [r3, #0]
 8012030:	623b      	str	r3, [r7, #32]
 8012032:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012036:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801203a:	681b      	ldr	r3, [r3, #0]
 801203c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012040:	b29b      	uxth	r3, r3
 8012042:	461a      	mov	r2, r3
 8012044:	6a3b      	ldr	r3, [r7, #32]
 8012046:	4413      	add	r3, r2
 8012048:	623b      	str	r3, [r7, #32]
 801204a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801204e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012052:	681b      	ldr	r3, [r3, #0]
 8012054:	781b      	ldrb	r3, [r3, #0]
 8012056:	011a      	lsls	r2, r3, #4
 8012058:	6a3b      	ldr	r3, [r7, #32]
 801205a:	4413      	add	r3, r2
 801205c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8012060:	61fb      	str	r3, [r7, #28]
 8012062:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012066:	b29a      	uxth	r2, r3
 8012068:	69fb      	ldr	r3, [r7, #28]
 801206a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 801206c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012070:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012074:	681b      	ldr	r3, [r3, #0]
 8012076:	891b      	ldrh	r3, [r3, #8]
 8012078:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801207c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012080:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012084:	681b      	ldr	r3, [r3, #0]
 8012086:	6959      	ldr	r1, [r3, #20]
 8012088:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801208c:	b29b      	uxth	r3, r3
 801208e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8012092:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8012096:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 801209a:	6800      	ldr	r0, [r0, #0]
 801209c:	f001 f9d1 	bl	8013442 <USB_WritePMA>
 80120a0:	e3c6      	b.n	8012830 <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80120a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80120a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80120aa:	681b      	ldr	r3, [r3, #0]
 80120ac:	785b      	ldrb	r3, [r3, #1]
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	d16d      	bne.n	801218e <USB_EPStartXfer+0x614>
 80120b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80120b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80120ba:	681b      	ldr	r3, [r3, #0]
 80120bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80120be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80120c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80120c6:	681b      	ldr	r3, [r3, #0]
 80120c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80120cc:	b29b      	uxth	r3, r3
 80120ce:	461a      	mov	r2, r3
 80120d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80120d2:	4413      	add	r3, r2
 80120d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80120d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80120da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80120de:	681b      	ldr	r3, [r3, #0]
 80120e0:	781b      	ldrb	r3, [r3, #0]
 80120e2:	011a      	lsls	r2, r3, #4
 80120e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80120e6:	4413      	add	r3, r2
 80120e8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80120ec:	647b      	str	r3, [r7, #68]	; 0x44
 80120ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80120f2:	2b00      	cmp	r3, #0
 80120f4:	d112      	bne.n	801211c <USB_EPStartXfer+0x5a2>
 80120f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80120f8:	881b      	ldrh	r3, [r3, #0]
 80120fa:	b29b      	uxth	r3, r3
 80120fc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8012100:	b29a      	uxth	r2, r3
 8012102:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012104:	801a      	strh	r2, [r3, #0]
 8012106:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012108:	881b      	ldrh	r3, [r3, #0]
 801210a:	b29b      	uxth	r3, r3
 801210c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012110:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012114:	b29a      	uxth	r2, r3
 8012116:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012118:	801a      	strh	r2, [r3, #0]
 801211a:	e063      	b.n	80121e4 <USB_EPStartXfer+0x66a>
 801211c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012120:	2b3e      	cmp	r3, #62	; 0x3e
 8012122:	d817      	bhi.n	8012154 <USB_EPStartXfer+0x5da>
 8012124:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012128:	085b      	lsrs	r3, r3, #1
 801212a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 801212e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012132:	f003 0301 	and.w	r3, r3, #1
 8012136:	2b00      	cmp	r3, #0
 8012138:	d004      	beq.n	8012144 <USB_EPStartXfer+0x5ca>
 801213a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801213e:	3301      	adds	r3, #1
 8012140:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8012144:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8012148:	b29b      	uxth	r3, r3
 801214a:	029b      	lsls	r3, r3, #10
 801214c:	b29a      	uxth	r2, r3
 801214e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012150:	801a      	strh	r2, [r3, #0]
 8012152:	e047      	b.n	80121e4 <USB_EPStartXfer+0x66a>
 8012154:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012158:	095b      	lsrs	r3, r3, #5
 801215a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 801215e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012162:	f003 031f 	and.w	r3, r3, #31
 8012166:	2b00      	cmp	r3, #0
 8012168:	d104      	bne.n	8012174 <USB_EPStartXfer+0x5fa>
 801216a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801216e:	3b01      	subs	r3, #1
 8012170:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8012174:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8012178:	b29b      	uxth	r3, r3
 801217a:	029b      	lsls	r3, r3, #10
 801217c:	b29b      	uxth	r3, r3
 801217e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012182:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012186:	b29a      	uxth	r2, r3
 8012188:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801218a:	801a      	strh	r2, [r3, #0]
 801218c:	e02a      	b.n	80121e4 <USB_EPStartXfer+0x66a>
 801218e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012192:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012196:	681b      	ldr	r3, [r3, #0]
 8012198:	785b      	ldrb	r3, [r3, #1]
 801219a:	2b01      	cmp	r3, #1
 801219c:	d122      	bne.n	80121e4 <USB_EPStartXfer+0x66a>
 801219e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80121a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80121a6:	681b      	ldr	r3, [r3, #0]
 80121a8:	653b      	str	r3, [r7, #80]	; 0x50
 80121aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80121ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80121b2:	681b      	ldr	r3, [r3, #0]
 80121b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80121b8:	b29b      	uxth	r3, r3
 80121ba:	461a      	mov	r2, r3
 80121bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80121be:	4413      	add	r3, r2
 80121c0:	653b      	str	r3, [r7, #80]	; 0x50
 80121c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80121c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80121ca:	681b      	ldr	r3, [r3, #0]
 80121cc:	781b      	ldrb	r3, [r3, #0]
 80121ce:	011a      	lsls	r2, r3, #4
 80121d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80121d2:	4413      	add	r3, r2
 80121d4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80121d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80121da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80121de:	b29a      	uxth	r2, r3
 80121e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80121e2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80121e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80121e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80121ec:	681b      	ldr	r3, [r3, #0]
 80121ee:	891b      	ldrh	r3, [r3, #8]
 80121f0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80121f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80121f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80121fc:	681b      	ldr	r3, [r3, #0]
 80121fe:	6959      	ldr	r1, [r3, #20]
 8012200:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012204:	b29b      	uxth	r3, r3
 8012206:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 801220a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 801220e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8012212:	6800      	ldr	r0, [r0, #0]
 8012214:	f001 f915 	bl	8013442 <USB_WritePMA>
            ep->xfer_buff += len;
 8012218:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801221c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012220:	681b      	ldr	r3, [r3, #0]
 8012222:	695a      	ldr	r2, [r3, #20]
 8012224:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012228:	441a      	add	r2, r3
 801222a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801222e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012232:	681b      	ldr	r3, [r3, #0]
 8012234:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8012236:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801223a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801223e:	681b      	ldr	r3, [r3, #0]
 8012240:	6a1a      	ldr	r2, [r3, #32]
 8012242:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012246:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801224a:	681b      	ldr	r3, [r3, #0]
 801224c:	691b      	ldr	r3, [r3, #16]
 801224e:	429a      	cmp	r2, r3
 8012250:	d90f      	bls.n	8012272 <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 8012252:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012256:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801225a:	681b      	ldr	r3, [r3, #0]
 801225c:	6a1a      	ldr	r2, [r3, #32]
 801225e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012262:	1ad2      	subs	r2, r2, r3
 8012264:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012268:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801226c:	681b      	ldr	r3, [r3, #0]
 801226e:	621a      	str	r2, [r3, #32]
 8012270:	e00e      	b.n	8012290 <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 8012272:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012276:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801227a:	681b      	ldr	r3, [r3, #0]
 801227c:	6a1b      	ldr	r3, [r3, #32]
 801227e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8012282:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012286:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801228a:	681b      	ldr	r3, [r3, #0]
 801228c:	2200      	movs	r2, #0
 801228e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8012290:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012294:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012298:	681b      	ldr	r3, [r3, #0]
 801229a:	643b      	str	r3, [r7, #64]	; 0x40
 801229c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80122a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80122a4:	681b      	ldr	r3, [r3, #0]
 80122a6:	785b      	ldrb	r3, [r3, #1]
 80122a8:	2b00      	cmp	r3, #0
 80122aa:	d16d      	bne.n	8012388 <USB_EPStartXfer+0x80e>
 80122ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80122b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80122b4:	681b      	ldr	r3, [r3, #0]
 80122b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80122b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80122bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80122c0:	681b      	ldr	r3, [r3, #0]
 80122c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80122c6:	b29b      	uxth	r3, r3
 80122c8:	461a      	mov	r2, r3
 80122ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122cc:	4413      	add	r3, r2
 80122ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80122d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80122d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80122d8:	681b      	ldr	r3, [r3, #0]
 80122da:	781b      	ldrb	r3, [r3, #0]
 80122dc:	011a      	lsls	r2, r3, #4
 80122de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122e0:	4413      	add	r3, r2
 80122e2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80122e6:	637b      	str	r3, [r7, #52]	; 0x34
 80122e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80122ec:	2b00      	cmp	r3, #0
 80122ee:	d112      	bne.n	8012316 <USB_EPStartXfer+0x79c>
 80122f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80122f2:	881b      	ldrh	r3, [r3, #0]
 80122f4:	b29b      	uxth	r3, r3
 80122f6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80122fa:	b29a      	uxth	r2, r3
 80122fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80122fe:	801a      	strh	r2, [r3, #0]
 8012300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012302:	881b      	ldrh	r3, [r3, #0]
 8012304:	b29b      	uxth	r3, r3
 8012306:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801230a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801230e:	b29a      	uxth	r2, r3
 8012310:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012312:	801a      	strh	r2, [r3, #0]
 8012314:	e05d      	b.n	80123d2 <USB_EPStartXfer+0x858>
 8012316:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801231a:	2b3e      	cmp	r3, #62	; 0x3e
 801231c:	d817      	bhi.n	801234e <USB_EPStartXfer+0x7d4>
 801231e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012322:	085b      	lsrs	r3, r3, #1
 8012324:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8012328:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801232c:	f003 0301 	and.w	r3, r3, #1
 8012330:	2b00      	cmp	r3, #0
 8012332:	d004      	beq.n	801233e <USB_EPStartXfer+0x7c4>
 8012334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012338:	3301      	adds	r3, #1
 801233a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 801233e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012342:	b29b      	uxth	r3, r3
 8012344:	029b      	lsls	r3, r3, #10
 8012346:	b29a      	uxth	r2, r3
 8012348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801234a:	801a      	strh	r2, [r3, #0]
 801234c:	e041      	b.n	80123d2 <USB_EPStartXfer+0x858>
 801234e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012352:	095b      	lsrs	r3, r3, #5
 8012354:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8012358:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801235c:	f003 031f 	and.w	r3, r3, #31
 8012360:	2b00      	cmp	r3, #0
 8012362:	d104      	bne.n	801236e <USB_EPStartXfer+0x7f4>
 8012364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012368:	3b01      	subs	r3, #1
 801236a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 801236e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012372:	b29b      	uxth	r3, r3
 8012374:	029b      	lsls	r3, r3, #10
 8012376:	b29b      	uxth	r3, r3
 8012378:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801237c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012380:	b29a      	uxth	r2, r3
 8012382:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012384:	801a      	strh	r2, [r3, #0]
 8012386:	e024      	b.n	80123d2 <USB_EPStartXfer+0x858>
 8012388:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801238c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012390:	681b      	ldr	r3, [r3, #0]
 8012392:	785b      	ldrb	r3, [r3, #1]
 8012394:	2b01      	cmp	r3, #1
 8012396:	d11c      	bne.n	80123d2 <USB_EPStartXfer+0x858>
 8012398:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801239c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80123a0:	681b      	ldr	r3, [r3, #0]
 80123a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80123a6:	b29b      	uxth	r3, r3
 80123a8:	461a      	mov	r2, r3
 80123aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80123ac:	4413      	add	r3, r2
 80123ae:	643b      	str	r3, [r7, #64]	; 0x40
 80123b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80123b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80123b8:	681b      	ldr	r3, [r3, #0]
 80123ba:	781b      	ldrb	r3, [r3, #0]
 80123bc:	011a      	lsls	r2, r3, #4
 80123be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80123c0:	4413      	add	r3, r2
 80123c2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80123c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80123c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80123cc:	b29a      	uxth	r2, r3
 80123ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80123d0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80123d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80123d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80123da:	681b      	ldr	r3, [r3, #0]
 80123dc:	895b      	ldrh	r3, [r3, #10]
 80123de:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80123e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80123e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80123ea:	681b      	ldr	r3, [r3, #0]
 80123ec:	6959      	ldr	r1, [r3, #20]
 80123ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80123f2:	b29b      	uxth	r3, r3
 80123f4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80123f8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80123fc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8012400:	6800      	ldr	r0, [r0, #0]
 8012402:	f001 f81e 	bl	8013442 <USB_WritePMA>
 8012406:	e213      	b.n	8012830 <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8012408:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801240c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012410:	681b      	ldr	r3, [r3, #0]
 8012412:	6a1b      	ldr	r3, [r3, #32]
 8012414:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8012418:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801241c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012420:	681a      	ldr	r2, [r3, #0]
 8012422:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012426:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801242a:	681b      	ldr	r3, [r3, #0]
 801242c:	781b      	ldrb	r3, [r3, #0]
 801242e:	009b      	lsls	r3, r3, #2
 8012430:	4413      	add	r3, r2
 8012432:	881b      	ldrh	r3, [r3, #0]
 8012434:	b29b      	uxth	r3, r3
 8012436:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 801243a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801243e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8012442:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012446:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801244a:	681a      	ldr	r2, [r3, #0]
 801244c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012450:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012454:	681b      	ldr	r3, [r3, #0]
 8012456:	781b      	ldrb	r3, [r3, #0]
 8012458:	009b      	lsls	r3, r3, #2
 801245a:	441a      	add	r2, r3
 801245c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8012460:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012464:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012468:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801246c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012470:	b29b      	uxth	r3, r3
 8012472:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8012474:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012478:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801247c:	681b      	ldr	r3, [r3, #0]
 801247e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012480:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012484:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012488:	681b      	ldr	r3, [r3, #0]
 801248a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801248e:	b29b      	uxth	r3, r3
 8012490:	461a      	mov	r2, r3
 8012492:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012494:	4413      	add	r3, r2
 8012496:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012498:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801249c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80124a0:	681b      	ldr	r3, [r3, #0]
 80124a2:	781b      	ldrb	r3, [r3, #0]
 80124a4:	011a      	lsls	r2, r3, #4
 80124a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80124a8:	4413      	add	r3, r2
 80124aa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80124ae:	65bb      	str	r3, [r7, #88]	; 0x58
 80124b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80124b4:	b29a      	uxth	r2, r3
 80124b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80124b8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80124ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80124be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80124c2:	681b      	ldr	r3, [r3, #0]
 80124c4:	891b      	ldrh	r3, [r3, #8]
 80124c6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80124ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80124ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80124d2:	681b      	ldr	r3, [r3, #0]
 80124d4:	6959      	ldr	r1, [r3, #20]
 80124d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80124da:	b29b      	uxth	r3, r3
 80124dc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80124e0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80124e4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80124e8:	6800      	ldr	r0, [r0, #0]
 80124ea:	f000 ffaa 	bl	8013442 <USB_WritePMA>
 80124ee:	e19f      	b.n	8012830 <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80124f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80124f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80124f8:	681b      	ldr	r3, [r3, #0]
 80124fa:	6a1a      	ldr	r2, [r3, #32]
 80124fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012500:	1ad2      	subs	r2, r2, r3
 8012502:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012506:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801250a:	681b      	ldr	r3, [r3, #0]
 801250c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 801250e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012512:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012516:	681a      	ldr	r2, [r3, #0]
 8012518:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801251c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012520:	681b      	ldr	r3, [r3, #0]
 8012522:	781b      	ldrb	r3, [r3, #0]
 8012524:	009b      	lsls	r3, r3, #2
 8012526:	4413      	add	r3, r2
 8012528:	881b      	ldrh	r3, [r3, #0]
 801252a:	b29b      	uxth	r3, r3
 801252c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012530:	2b00      	cmp	r3, #0
 8012532:	f000 80bc 	beq.w	80126ae <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8012536:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801253a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801253e:	681b      	ldr	r3, [r3, #0]
 8012540:	673b      	str	r3, [r7, #112]	; 0x70
 8012542:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012546:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801254a:	681b      	ldr	r3, [r3, #0]
 801254c:	785b      	ldrb	r3, [r3, #1]
 801254e:	2b00      	cmp	r3, #0
 8012550:	d16d      	bne.n	801262e <USB_EPStartXfer+0xab4>
 8012552:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012556:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801255a:	681b      	ldr	r3, [r3, #0]
 801255c:	66bb      	str	r3, [r7, #104]	; 0x68
 801255e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012562:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012566:	681b      	ldr	r3, [r3, #0]
 8012568:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801256c:	b29b      	uxth	r3, r3
 801256e:	461a      	mov	r2, r3
 8012570:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012572:	4413      	add	r3, r2
 8012574:	66bb      	str	r3, [r7, #104]	; 0x68
 8012576:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801257a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801257e:	681b      	ldr	r3, [r3, #0]
 8012580:	781b      	ldrb	r3, [r3, #0]
 8012582:	011a      	lsls	r2, r3, #4
 8012584:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012586:	4413      	add	r3, r2
 8012588:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 801258c:	667b      	str	r3, [r7, #100]	; 0x64
 801258e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012592:	2b00      	cmp	r3, #0
 8012594:	d112      	bne.n	80125bc <USB_EPStartXfer+0xa42>
 8012596:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012598:	881b      	ldrh	r3, [r3, #0]
 801259a:	b29b      	uxth	r3, r3
 801259c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80125a0:	b29a      	uxth	r2, r3
 80125a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80125a4:	801a      	strh	r2, [r3, #0]
 80125a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80125a8:	881b      	ldrh	r3, [r3, #0]
 80125aa:	b29b      	uxth	r3, r3
 80125ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80125b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80125b4:	b29a      	uxth	r2, r3
 80125b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80125b8:	801a      	strh	r2, [r3, #0]
 80125ba:	e05d      	b.n	8012678 <USB_EPStartXfer+0xafe>
 80125bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80125c0:	2b3e      	cmp	r3, #62	; 0x3e
 80125c2:	d817      	bhi.n	80125f4 <USB_EPStartXfer+0xa7a>
 80125c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80125c8:	085b      	lsrs	r3, r3, #1
 80125ca:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80125ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80125d2:	f003 0301 	and.w	r3, r3, #1
 80125d6:	2b00      	cmp	r3, #0
 80125d8:	d004      	beq.n	80125e4 <USB_EPStartXfer+0xa6a>
 80125da:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80125de:	3301      	adds	r3, #1
 80125e0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80125e4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80125e8:	b29b      	uxth	r3, r3
 80125ea:	029b      	lsls	r3, r3, #10
 80125ec:	b29a      	uxth	r2, r3
 80125ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80125f0:	801a      	strh	r2, [r3, #0]
 80125f2:	e041      	b.n	8012678 <USB_EPStartXfer+0xafe>
 80125f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80125f8:	095b      	lsrs	r3, r3, #5
 80125fa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80125fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012602:	f003 031f 	and.w	r3, r3, #31
 8012606:	2b00      	cmp	r3, #0
 8012608:	d104      	bne.n	8012614 <USB_EPStartXfer+0xa9a>
 801260a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 801260e:	3b01      	subs	r3, #1
 8012610:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8012614:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8012618:	b29b      	uxth	r3, r3
 801261a:	029b      	lsls	r3, r3, #10
 801261c:	b29b      	uxth	r3, r3
 801261e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012622:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012626:	b29a      	uxth	r2, r3
 8012628:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801262a:	801a      	strh	r2, [r3, #0]
 801262c:	e024      	b.n	8012678 <USB_EPStartXfer+0xafe>
 801262e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012632:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012636:	681b      	ldr	r3, [r3, #0]
 8012638:	785b      	ldrb	r3, [r3, #1]
 801263a:	2b01      	cmp	r3, #1
 801263c:	d11c      	bne.n	8012678 <USB_EPStartXfer+0xafe>
 801263e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012642:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012646:	681b      	ldr	r3, [r3, #0]
 8012648:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801264c:	b29b      	uxth	r3, r3
 801264e:	461a      	mov	r2, r3
 8012650:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012652:	4413      	add	r3, r2
 8012654:	673b      	str	r3, [r7, #112]	; 0x70
 8012656:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801265a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801265e:	681b      	ldr	r3, [r3, #0]
 8012660:	781b      	ldrb	r3, [r3, #0]
 8012662:	011a      	lsls	r2, r3, #4
 8012664:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012666:	4413      	add	r3, r2
 8012668:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 801266c:	66fb      	str	r3, [r7, #108]	; 0x6c
 801266e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012672:	b29a      	uxth	r2, r3
 8012674:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012676:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8012678:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801267c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012680:	681b      	ldr	r3, [r3, #0]
 8012682:	895b      	ldrh	r3, [r3, #10]
 8012684:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8012688:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801268c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012690:	681b      	ldr	r3, [r3, #0]
 8012692:	6959      	ldr	r1, [r3, #20]
 8012694:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012698:	b29b      	uxth	r3, r3
 801269a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 801269e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80126a2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80126a6:	6800      	ldr	r0, [r0, #0]
 80126a8:	f000 fecb 	bl	8013442 <USB_WritePMA>
 80126ac:	e0c0      	b.n	8012830 <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80126ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80126b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80126b6:	681b      	ldr	r3, [r3, #0]
 80126b8:	785b      	ldrb	r3, [r3, #1]
 80126ba:	2b00      	cmp	r3, #0
 80126bc:	d16d      	bne.n	801279a <USB_EPStartXfer+0xc20>
 80126be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80126c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80126c6:	681b      	ldr	r3, [r3, #0]
 80126c8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80126ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80126ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80126d2:	681b      	ldr	r3, [r3, #0]
 80126d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80126d8:	b29b      	uxth	r3, r3
 80126da:	461a      	mov	r2, r3
 80126dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80126de:	4413      	add	r3, r2
 80126e0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80126e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80126e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80126ea:	681b      	ldr	r3, [r3, #0]
 80126ec:	781b      	ldrb	r3, [r3, #0]
 80126ee:	011a      	lsls	r2, r3, #4
 80126f0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80126f2:	4413      	add	r3, r2
 80126f4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80126f8:	67bb      	str	r3, [r7, #120]	; 0x78
 80126fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80126fe:	2b00      	cmp	r3, #0
 8012700:	d112      	bne.n	8012728 <USB_EPStartXfer+0xbae>
 8012702:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012704:	881b      	ldrh	r3, [r3, #0]
 8012706:	b29b      	uxth	r3, r3
 8012708:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 801270c:	b29a      	uxth	r2, r3
 801270e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012710:	801a      	strh	r2, [r3, #0]
 8012712:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012714:	881b      	ldrh	r3, [r3, #0]
 8012716:	b29b      	uxth	r3, r3
 8012718:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801271c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012720:	b29a      	uxth	r2, r3
 8012722:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012724:	801a      	strh	r2, [r3, #0]
 8012726:	e069      	b.n	80127fc <USB_EPStartXfer+0xc82>
 8012728:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801272c:	2b3e      	cmp	r3, #62	; 0x3e
 801272e:	d817      	bhi.n	8012760 <USB_EPStartXfer+0xbe6>
 8012730:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012734:	085b      	lsrs	r3, r3, #1
 8012736:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 801273a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801273e:	f003 0301 	and.w	r3, r3, #1
 8012742:	2b00      	cmp	r3, #0
 8012744:	d004      	beq.n	8012750 <USB_EPStartXfer+0xbd6>
 8012746:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801274a:	3301      	adds	r3, #1
 801274c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8012750:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8012754:	b29b      	uxth	r3, r3
 8012756:	029b      	lsls	r3, r3, #10
 8012758:	b29a      	uxth	r2, r3
 801275a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801275c:	801a      	strh	r2, [r3, #0]
 801275e:	e04d      	b.n	80127fc <USB_EPStartXfer+0xc82>
 8012760:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012764:	095b      	lsrs	r3, r3, #5
 8012766:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 801276a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801276e:	f003 031f 	and.w	r3, r3, #31
 8012772:	2b00      	cmp	r3, #0
 8012774:	d104      	bne.n	8012780 <USB_EPStartXfer+0xc06>
 8012776:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801277a:	3b01      	subs	r3, #1
 801277c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8012780:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8012784:	b29b      	uxth	r3, r3
 8012786:	029b      	lsls	r3, r3, #10
 8012788:	b29b      	uxth	r3, r3
 801278a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801278e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012792:	b29a      	uxth	r2, r3
 8012794:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012796:	801a      	strh	r2, [r3, #0]
 8012798:	e030      	b.n	80127fc <USB_EPStartXfer+0xc82>
 801279a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801279e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80127a2:	681b      	ldr	r3, [r3, #0]
 80127a4:	785b      	ldrb	r3, [r3, #1]
 80127a6:	2b01      	cmp	r3, #1
 80127a8:	d128      	bne.n	80127fc <USB_EPStartXfer+0xc82>
 80127aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80127ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80127b2:	681b      	ldr	r3, [r3, #0]
 80127b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80127b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80127bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80127c0:	681b      	ldr	r3, [r3, #0]
 80127c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80127c6:	b29b      	uxth	r3, r3
 80127c8:	461a      	mov	r2, r3
 80127ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80127ce:	4413      	add	r3, r2
 80127d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80127d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80127d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80127dc:	681b      	ldr	r3, [r3, #0]
 80127de:	781b      	ldrb	r3, [r3, #0]
 80127e0:	011a      	lsls	r2, r3, #4
 80127e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80127e6:	4413      	add	r3, r2
 80127e8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80127ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80127f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80127f4:	b29a      	uxth	r2, r3
 80127f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80127fa:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80127fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012800:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012804:	681b      	ldr	r3, [r3, #0]
 8012806:	891b      	ldrh	r3, [r3, #8]
 8012808:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801280c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012810:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012814:	681b      	ldr	r3, [r3, #0]
 8012816:	6959      	ldr	r1, [r3, #20]
 8012818:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801281c:	b29b      	uxth	r3, r3
 801281e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8012822:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8012826:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 801282a:	6800      	ldr	r0, [r0, #0]
 801282c:	f000 fe09 	bl	8013442 <USB_WritePMA>
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8012830:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012834:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012838:	681a      	ldr	r2, [r3, #0]
 801283a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801283e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012842:	681b      	ldr	r3, [r3, #0]
 8012844:	781b      	ldrb	r3, [r3, #0]
 8012846:	009b      	lsls	r3, r3, #2
 8012848:	4413      	add	r3, r2
 801284a:	881b      	ldrh	r3, [r3, #0]
 801284c:	b29b      	uxth	r3, r3
 801284e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012852:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012856:	817b      	strh	r3, [r7, #10]
 8012858:	897b      	ldrh	r3, [r7, #10]
 801285a:	f083 0310 	eor.w	r3, r3, #16
 801285e:	817b      	strh	r3, [r7, #10]
 8012860:	897b      	ldrh	r3, [r7, #10]
 8012862:	f083 0320 	eor.w	r3, r3, #32
 8012866:	817b      	strh	r3, [r7, #10]
 8012868:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801286c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012870:	681a      	ldr	r2, [r3, #0]
 8012872:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012876:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801287a:	681b      	ldr	r3, [r3, #0]
 801287c:	781b      	ldrb	r3, [r3, #0]
 801287e:	009b      	lsls	r3, r3, #2
 8012880:	441a      	add	r2, r3
 8012882:	897b      	ldrh	r3, [r7, #10]
 8012884:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012888:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801288c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012890:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012894:	b29b      	uxth	r3, r3
 8012896:	8013      	strh	r3, [r2, #0]
 8012898:	f000 bc9f 	b.w	80131da <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 801289c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80128a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80128a4:	681b      	ldr	r3, [r3, #0]
 80128a6:	7b1b      	ldrb	r3, [r3, #12]
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	f040 80ae 	bne.w	8012a0a <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80128ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80128b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80128b6:	681b      	ldr	r3, [r3, #0]
 80128b8:	699a      	ldr	r2, [r3, #24]
 80128ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80128be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80128c2:	681b      	ldr	r3, [r3, #0]
 80128c4:	691b      	ldr	r3, [r3, #16]
 80128c6:	429a      	cmp	r2, r3
 80128c8:	d917      	bls.n	80128fa <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 80128ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80128ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80128d2:	681b      	ldr	r3, [r3, #0]
 80128d4:	691b      	ldr	r3, [r3, #16]
 80128d6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 80128da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80128de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80128e2:	681b      	ldr	r3, [r3, #0]
 80128e4:	699a      	ldr	r2, [r3, #24]
 80128e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80128ea:	1ad2      	subs	r2, r2, r3
 80128ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80128f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80128f4:	681b      	ldr	r3, [r3, #0]
 80128f6:	619a      	str	r2, [r3, #24]
 80128f8:	e00e      	b.n	8012918 <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 80128fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80128fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012902:	681b      	ldr	r3, [r3, #0]
 8012904:	699b      	ldr	r3, [r3, #24]
 8012906:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 801290a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801290e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012912:	681b      	ldr	r3, [r3, #0]
 8012914:	2200      	movs	r2, #0
 8012916:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8012918:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801291c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012920:	681b      	ldr	r3, [r3, #0]
 8012922:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8012926:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801292a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801292e:	681b      	ldr	r3, [r3, #0]
 8012930:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012934:	b29b      	uxth	r3, r3
 8012936:	461a      	mov	r2, r3
 8012938:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801293c:	4413      	add	r3, r2
 801293e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8012942:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012946:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801294a:	681b      	ldr	r3, [r3, #0]
 801294c:	781b      	ldrb	r3, [r3, #0]
 801294e:	011a      	lsls	r2, r3, #4
 8012950:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012954:	4413      	add	r3, r2
 8012956:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 801295a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801295e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012962:	2b00      	cmp	r3, #0
 8012964:	d116      	bne.n	8012994 <USB_EPStartXfer+0xe1a>
 8012966:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801296a:	881b      	ldrh	r3, [r3, #0]
 801296c:	b29b      	uxth	r3, r3
 801296e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8012972:	b29a      	uxth	r2, r3
 8012974:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012978:	801a      	strh	r2, [r3, #0]
 801297a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801297e:	881b      	ldrh	r3, [r3, #0]
 8012980:	b29b      	uxth	r3, r3
 8012982:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012986:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801298a:	b29a      	uxth	r2, r3
 801298c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012990:	801a      	strh	r2, [r3, #0]
 8012992:	e3e8      	b.n	8013166 <USB_EPStartXfer+0x15ec>
 8012994:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012998:	2b3e      	cmp	r3, #62	; 0x3e
 801299a:	d818      	bhi.n	80129ce <USB_EPStartXfer+0xe54>
 801299c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80129a0:	085b      	lsrs	r3, r3, #1
 80129a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80129a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80129aa:	f003 0301 	and.w	r3, r3, #1
 80129ae:	2b00      	cmp	r3, #0
 80129b0:	d004      	beq.n	80129bc <USB_EPStartXfer+0xe42>
 80129b2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80129b6:	3301      	adds	r3, #1
 80129b8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80129bc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80129c0:	b29b      	uxth	r3, r3
 80129c2:	029b      	lsls	r3, r3, #10
 80129c4:	b29a      	uxth	r2, r3
 80129c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80129ca:	801a      	strh	r2, [r3, #0]
 80129cc:	e3cb      	b.n	8013166 <USB_EPStartXfer+0x15ec>
 80129ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80129d2:	095b      	lsrs	r3, r3, #5
 80129d4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80129d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80129dc:	f003 031f 	and.w	r3, r3, #31
 80129e0:	2b00      	cmp	r3, #0
 80129e2:	d104      	bne.n	80129ee <USB_EPStartXfer+0xe74>
 80129e4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80129e8:	3b01      	subs	r3, #1
 80129ea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80129ee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80129f2:	b29b      	uxth	r3, r3
 80129f4:	029b      	lsls	r3, r3, #10
 80129f6:	b29b      	uxth	r3, r3
 80129f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80129fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012a00:	b29a      	uxth	r2, r3
 8012a02:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012a06:	801a      	strh	r2, [r3, #0]
 8012a08:	e3ad      	b.n	8013166 <USB_EPStartXfer+0x15ec>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8012a0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012a0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012a12:	681b      	ldr	r3, [r3, #0]
 8012a14:	78db      	ldrb	r3, [r3, #3]
 8012a16:	2b02      	cmp	r3, #2
 8012a18:	f040 8200 	bne.w	8012e1c <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8012a1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012a20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012a24:	681b      	ldr	r3, [r3, #0]
 8012a26:	785b      	ldrb	r3, [r3, #1]
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	f040 8091 	bne.w	8012b50 <USB_EPStartXfer+0xfd6>
 8012a2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012a32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012a36:	681b      	ldr	r3, [r3, #0]
 8012a38:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8012a3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012a40:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012a44:	681b      	ldr	r3, [r3, #0]
 8012a46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012a4a:	b29b      	uxth	r3, r3
 8012a4c:	461a      	mov	r2, r3
 8012a4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012a52:	4413      	add	r3, r2
 8012a54:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8012a58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012a5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012a60:	681b      	ldr	r3, [r3, #0]
 8012a62:	781b      	ldrb	r3, [r3, #0]
 8012a64:	011a      	lsls	r2, r3, #4
 8012a66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012a6a:	4413      	add	r3, r2
 8012a6c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8012a70:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8012a74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012a78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012a7c:	681b      	ldr	r3, [r3, #0]
 8012a7e:	691b      	ldr	r3, [r3, #16]
 8012a80:	2b00      	cmp	r3, #0
 8012a82:	d116      	bne.n	8012ab2 <USB_EPStartXfer+0xf38>
 8012a84:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8012a88:	881b      	ldrh	r3, [r3, #0]
 8012a8a:	b29b      	uxth	r3, r3
 8012a8c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8012a90:	b29a      	uxth	r2, r3
 8012a92:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8012a96:	801a      	strh	r2, [r3, #0]
 8012a98:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8012a9c:	881b      	ldrh	r3, [r3, #0]
 8012a9e:	b29b      	uxth	r3, r3
 8012aa0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012aa4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012aa8:	b29a      	uxth	r2, r3
 8012aaa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8012aae:	801a      	strh	r2, [r3, #0]
 8012ab0:	e083      	b.n	8012bba <USB_EPStartXfer+0x1040>
 8012ab2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012ab6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012aba:	681b      	ldr	r3, [r3, #0]
 8012abc:	691b      	ldr	r3, [r3, #16]
 8012abe:	2b3e      	cmp	r3, #62	; 0x3e
 8012ac0:	d820      	bhi.n	8012b04 <USB_EPStartXfer+0xf8a>
 8012ac2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012ac6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012aca:	681b      	ldr	r3, [r3, #0]
 8012acc:	691b      	ldr	r3, [r3, #16]
 8012ace:	085b      	lsrs	r3, r3, #1
 8012ad0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8012ad4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012ad8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012adc:	681b      	ldr	r3, [r3, #0]
 8012ade:	691b      	ldr	r3, [r3, #16]
 8012ae0:	f003 0301 	and.w	r3, r3, #1
 8012ae4:	2b00      	cmp	r3, #0
 8012ae6:	d004      	beq.n	8012af2 <USB_EPStartXfer+0xf78>
 8012ae8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012aec:	3301      	adds	r3, #1
 8012aee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8012af2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012af6:	b29b      	uxth	r3, r3
 8012af8:	029b      	lsls	r3, r3, #10
 8012afa:	b29a      	uxth	r2, r3
 8012afc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8012b00:	801a      	strh	r2, [r3, #0]
 8012b02:	e05a      	b.n	8012bba <USB_EPStartXfer+0x1040>
 8012b04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012b08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012b0c:	681b      	ldr	r3, [r3, #0]
 8012b0e:	691b      	ldr	r3, [r3, #16]
 8012b10:	095b      	lsrs	r3, r3, #5
 8012b12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8012b16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012b1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012b1e:	681b      	ldr	r3, [r3, #0]
 8012b20:	691b      	ldr	r3, [r3, #16]
 8012b22:	f003 031f 	and.w	r3, r3, #31
 8012b26:	2b00      	cmp	r3, #0
 8012b28:	d104      	bne.n	8012b34 <USB_EPStartXfer+0xfba>
 8012b2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012b2e:	3b01      	subs	r3, #1
 8012b30:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8012b34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012b38:	b29b      	uxth	r3, r3
 8012b3a:	029b      	lsls	r3, r3, #10
 8012b3c:	b29b      	uxth	r3, r3
 8012b3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012b42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012b46:	b29a      	uxth	r2, r3
 8012b48:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8012b4c:	801a      	strh	r2, [r3, #0]
 8012b4e:	e034      	b.n	8012bba <USB_EPStartXfer+0x1040>
 8012b50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012b54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012b58:	681b      	ldr	r3, [r3, #0]
 8012b5a:	785b      	ldrb	r3, [r3, #1]
 8012b5c:	2b01      	cmp	r3, #1
 8012b5e:	d12c      	bne.n	8012bba <USB_EPStartXfer+0x1040>
 8012b60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012b64:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012b68:	681b      	ldr	r3, [r3, #0]
 8012b6a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8012b6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012b72:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012b76:	681b      	ldr	r3, [r3, #0]
 8012b78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012b7c:	b29b      	uxth	r3, r3
 8012b7e:	461a      	mov	r2, r3
 8012b80:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012b84:	4413      	add	r3, r2
 8012b86:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8012b8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012b8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012b92:	681b      	ldr	r3, [r3, #0]
 8012b94:	781b      	ldrb	r3, [r3, #0]
 8012b96:	011a      	lsls	r2, r3, #4
 8012b98:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012b9c:	4413      	add	r3, r2
 8012b9e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8012ba2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8012ba6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012baa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012bae:	681b      	ldr	r3, [r3, #0]
 8012bb0:	691b      	ldr	r3, [r3, #16]
 8012bb2:	b29a      	uxth	r2, r3
 8012bb4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8012bb8:	801a      	strh	r2, [r3, #0]
 8012bba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012bbe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012bc2:	681b      	ldr	r3, [r3, #0]
 8012bc4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8012bc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012bcc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012bd0:	681b      	ldr	r3, [r3, #0]
 8012bd2:	785b      	ldrb	r3, [r3, #1]
 8012bd4:	2b00      	cmp	r3, #0
 8012bd6:	f040 8091 	bne.w	8012cfc <USB_EPStartXfer+0x1182>
 8012bda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012bde:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012be2:	681b      	ldr	r3, [r3, #0]
 8012be4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8012be8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012bec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012bf0:	681b      	ldr	r3, [r3, #0]
 8012bf2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012bf6:	b29b      	uxth	r3, r3
 8012bf8:	461a      	mov	r2, r3
 8012bfa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012bfe:	4413      	add	r3, r2
 8012c00:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8012c04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012c08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012c0c:	681b      	ldr	r3, [r3, #0]
 8012c0e:	781b      	ldrb	r3, [r3, #0]
 8012c10:	011a      	lsls	r2, r3, #4
 8012c12:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012c16:	4413      	add	r3, r2
 8012c18:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8012c1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8012c20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012c24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012c28:	681b      	ldr	r3, [r3, #0]
 8012c2a:	691b      	ldr	r3, [r3, #16]
 8012c2c:	2b00      	cmp	r3, #0
 8012c2e:	d116      	bne.n	8012c5e <USB_EPStartXfer+0x10e4>
 8012c30:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012c34:	881b      	ldrh	r3, [r3, #0]
 8012c36:	b29b      	uxth	r3, r3
 8012c38:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8012c3c:	b29a      	uxth	r2, r3
 8012c3e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012c42:	801a      	strh	r2, [r3, #0]
 8012c44:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012c48:	881b      	ldrh	r3, [r3, #0]
 8012c4a:	b29b      	uxth	r3, r3
 8012c4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012c50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012c54:	b29a      	uxth	r2, r3
 8012c56:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012c5a:	801a      	strh	r2, [r3, #0]
 8012c5c:	e07c      	b.n	8012d58 <USB_EPStartXfer+0x11de>
 8012c5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012c62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012c66:	681b      	ldr	r3, [r3, #0]
 8012c68:	691b      	ldr	r3, [r3, #16]
 8012c6a:	2b3e      	cmp	r3, #62	; 0x3e
 8012c6c:	d820      	bhi.n	8012cb0 <USB_EPStartXfer+0x1136>
 8012c6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012c72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012c76:	681b      	ldr	r3, [r3, #0]
 8012c78:	691b      	ldr	r3, [r3, #16]
 8012c7a:	085b      	lsrs	r3, r3, #1
 8012c7c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8012c80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012c84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012c88:	681b      	ldr	r3, [r3, #0]
 8012c8a:	691b      	ldr	r3, [r3, #16]
 8012c8c:	f003 0301 	and.w	r3, r3, #1
 8012c90:	2b00      	cmp	r3, #0
 8012c92:	d004      	beq.n	8012c9e <USB_EPStartXfer+0x1124>
 8012c94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012c98:	3301      	adds	r3, #1
 8012c9a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8012c9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012ca2:	b29b      	uxth	r3, r3
 8012ca4:	029b      	lsls	r3, r3, #10
 8012ca6:	b29a      	uxth	r2, r3
 8012ca8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012cac:	801a      	strh	r2, [r3, #0]
 8012cae:	e053      	b.n	8012d58 <USB_EPStartXfer+0x11de>
 8012cb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012cb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012cb8:	681b      	ldr	r3, [r3, #0]
 8012cba:	691b      	ldr	r3, [r3, #16]
 8012cbc:	095b      	lsrs	r3, r3, #5
 8012cbe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8012cc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012cc6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012cca:	681b      	ldr	r3, [r3, #0]
 8012ccc:	691b      	ldr	r3, [r3, #16]
 8012cce:	f003 031f 	and.w	r3, r3, #31
 8012cd2:	2b00      	cmp	r3, #0
 8012cd4:	d104      	bne.n	8012ce0 <USB_EPStartXfer+0x1166>
 8012cd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012cda:	3b01      	subs	r3, #1
 8012cdc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8012ce0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012ce4:	b29b      	uxth	r3, r3
 8012ce6:	029b      	lsls	r3, r3, #10
 8012ce8:	b29b      	uxth	r3, r3
 8012cea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012cee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012cf2:	b29a      	uxth	r2, r3
 8012cf4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012cf8:	801a      	strh	r2, [r3, #0]
 8012cfa:	e02d      	b.n	8012d58 <USB_EPStartXfer+0x11de>
 8012cfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012d00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012d04:	681b      	ldr	r3, [r3, #0]
 8012d06:	785b      	ldrb	r3, [r3, #1]
 8012d08:	2b01      	cmp	r3, #1
 8012d0a:	d125      	bne.n	8012d58 <USB_EPStartXfer+0x11de>
 8012d0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012d10:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012d14:	681b      	ldr	r3, [r3, #0]
 8012d16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012d1a:	b29b      	uxth	r3, r3
 8012d1c:	461a      	mov	r2, r3
 8012d1e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8012d22:	4413      	add	r3, r2
 8012d24:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8012d28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012d2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012d30:	681b      	ldr	r3, [r3, #0]
 8012d32:	781b      	ldrb	r3, [r3, #0]
 8012d34:	011a      	lsls	r2, r3, #4
 8012d36:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8012d3a:	4413      	add	r3, r2
 8012d3c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8012d40:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8012d44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012d48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012d4c:	681b      	ldr	r3, [r3, #0]
 8012d4e:	691b      	ldr	r3, [r3, #16]
 8012d50:	b29a      	uxth	r2, r3
 8012d52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8012d56:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8012d58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012d5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012d60:	681b      	ldr	r3, [r3, #0]
 8012d62:	69db      	ldr	r3, [r3, #28]
 8012d64:	2b00      	cmp	r3, #0
 8012d66:	f000 81fe 	beq.w	8013166 <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8012d6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012d6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012d72:	681a      	ldr	r2, [r3, #0]
 8012d74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012d78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012d7c:	681b      	ldr	r3, [r3, #0]
 8012d7e:	781b      	ldrb	r3, [r3, #0]
 8012d80:	009b      	lsls	r3, r3, #2
 8012d82:	4413      	add	r3, r2
 8012d84:	881b      	ldrh	r3, [r3, #0]
 8012d86:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8012d8a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8012d8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012d92:	2b00      	cmp	r3, #0
 8012d94:	d005      	beq.n	8012da2 <USB_EPStartXfer+0x1228>
 8012d96:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8012d9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012d9e:	2b00      	cmp	r3, #0
 8012da0:	d10d      	bne.n	8012dbe <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8012da2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8012da6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8012daa:	2b00      	cmp	r3, #0
 8012dac:	f040 81db 	bne.w	8013166 <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8012db0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8012db4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012db8:	2b00      	cmp	r3, #0
 8012dba:	f040 81d4 	bne.w	8013166 <USB_EPStartXfer+0x15ec>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8012dbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012dc2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012dc6:	681a      	ldr	r2, [r3, #0]
 8012dc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012dcc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012dd0:	681b      	ldr	r3, [r3, #0]
 8012dd2:	781b      	ldrb	r3, [r3, #0]
 8012dd4:	009b      	lsls	r3, r3, #2
 8012dd6:	4413      	add	r3, r2
 8012dd8:	881b      	ldrh	r3, [r3, #0]
 8012dda:	b29b      	uxth	r3, r3
 8012ddc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012de0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012de4:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8012de8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012dec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012df0:	681a      	ldr	r2, [r3, #0]
 8012df2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012df6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012dfa:	681b      	ldr	r3, [r3, #0]
 8012dfc:	781b      	ldrb	r3, [r3, #0]
 8012dfe:	009b      	lsls	r3, r3, #2
 8012e00:	441a      	add	r2, r3
 8012e02:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8012e06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012e0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012e0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012e12:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8012e16:	b29b      	uxth	r3, r3
 8012e18:	8013      	strh	r3, [r2, #0]
 8012e1a:	e1a4      	b.n	8013166 <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8012e1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012e20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012e24:	681b      	ldr	r3, [r3, #0]
 8012e26:	78db      	ldrb	r3, [r3, #3]
 8012e28:	2b01      	cmp	r3, #1
 8012e2a:	f040 819a 	bne.w	8013162 <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8012e2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012e32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012e36:	681b      	ldr	r3, [r3, #0]
 8012e38:	699a      	ldr	r2, [r3, #24]
 8012e3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012e3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012e42:	681b      	ldr	r3, [r3, #0]
 8012e44:	691b      	ldr	r3, [r3, #16]
 8012e46:	429a      	cmp	r2, r3
 8012e48:	d917      	bls.n	8012e7a <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 8012e4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012e4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012e52:	681b      	ldr	r3, [r3, #0]
 8012e54:	691b      	ldr	r3, [r3, #16]
 8012e56:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8012e5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012e5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012e62:	681b      	ldr	r3, [r3, #0]
 8012e64:	699a      	ldr	r2, [r3, #24]
 8012e66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012e6a:	1ad2      	subs	r2, r2, r3
 8012e6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012e70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012e74:	681b      	ldr	r3, [r3, #0]
 8012e76:	619a      	str	r2, [r3, #24]
 8012e78:	e00e      	b.n	8012e98 <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 8012e7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012e7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012e82:	681b      	ldr	r3, [r3, #0]
 8012e84:	699b      	ldr	r3, [r3, #24]
 8012e86:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8012e8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012e8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012e92:	681b      	ldr	r3, [r3, #0]
 8012e94:	2200      	movs	r2, #0
 8012e96:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8012e98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012e9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012ea0:	681b      	ldr	r3, [r3, #0]
 8012ea2:	785b      	ldrb	r3, [r3, #1]
 8012ea4:	2b00      	cmp	r3, #0
 8012ea6:	d178      	bne.n	8012f9a <USB_EPStartXfer+0x1420>
 8012ea8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012eac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012eb0:	681b      	ldr	r3, [r3, #0]
 8012eb2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8012eb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012eba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012ebe:	681b      	ldr	r3, [r3, #0]
 8012ec0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012ec4:	b29b      	uxth	r3, r3
 8012ec6:	461a      	mov	r2, r3
 8012ec8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8012ecc:	4413      	add	r3, r2
 8012ece:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8012ed2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012ed6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012eda:	681b      	ldr	r3, [r3, #0]
 8012edc:	781b      	ldrb	r3, [r3, #0]
 8012ede:	011a      	lsls	r2, r3, #4
 8012ee0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8012ee4:	4413      	add	r3, r2
 8012ee6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8012eea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8012eee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012ef2:	2b00      	cmp	r3, #0
 8012ef4:	d116      	bne.n	8012f24 <USB_EPStartXfer+0x13aa>
 8012ef6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8012efa:	881b      	ldrh	r3, [r3, #0]
 8012efc:	b29b      	uxth	r3, r3
 8012efe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8012f02:	b29a      	uxth	r2, r3
 8012f04:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8012f08:	801a      	strh	r2, [r3, #0]
 8012f0a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8012f0e:	881b      	ldrh	r3, [r3, #0]
 8012f10:	b29b      	uxth	r3, r3
 8012f12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012f16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012f1a:	b29a      	uxth	r2, r3
 8012f1c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8012f20:	801a      	strh	r2, [r3, #0]
 8012f22:	e06b      	b.n	8012ffc <USB_EPStartXfer+0x1482>
 8012f24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012f28:	2b3e      	cmp	r3, #62	; 0x3e
 8012f2a:	d818      	bhi.n	8012f5e <USB_EPStartXfer+0x13e4>
 8012f2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012f30:	085b      	lsrs	r3, r3, #1
 8012f32:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8012f36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012f3a:	f003 0301 	and.w	r3, r3, #1
 8012f3e:	2b00      	cmp	r3, #0
 8012f40:	d004      	beq.n	8012f4c <USB_EPStartXfer+0x13d2>
 8012f42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012f46:	3301      	adds	r3, #1
 8012f48:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8012f4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012f50:	b29b      	uxth	r3, r3
 8012f52:	029b      	lsls	r3, r3, #10
 8012f54:	b29a      	uxth	r2, r3
 8012f56:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8012f5a:	801a      	strh	r2, [r3, #0]
 8012f5c:	e04e      	b.n	8012ffc <USB_EPStartXfer+0x1482>
 8012f5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012f62:	095b      	lsrs	r3, r3, #5
 8012f64:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8012f68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012f6c:	f003 031f 	and.w	r3, r3, #31
 8012f70:	2b00      	cmp	r3, #0
 8012f72:	d104      	bne.n	8012f7e <USB_EPStartXfer+0x1404>
 8012f74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012f78:	3b01      	subs	r3, #1
 8012f7a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8012f7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012f82:	b29b      	uxth	r3, r3
 8012f84:	029b      	lsls	r3, r3, #10
 8012f86:	b29b      	uxth	r3, r3
 8012f88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012f8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012f90:	b29a      	uxth	r2, r3
 8012f92:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8012f96:	801a      	strh	r2, [r3, #0]
 8012f98:	e030      	b.n	8012ffc <USB_EPStartXfer+0x1482>
 8012f9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012f9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012fa2:	681b      	ldr	r3, [r3, #0]
 8012fa4:	785b      	ldrb	r3, [r3, #1]
 8012fa6:	2b01      	cmp	r3, #1
 8012fa8:	d128      	bne.n	8012ffc <USB_EPStartXfer+0x1482>
 8012faa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012fae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012fb2:	681b      	ldr	r3, [r3, #0]
 8012fb4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8012fb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012fbc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012fc0:	681b      	ldr	r3, [r3, #0]
 8012fc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012fc6:	b29b      	uxth	r3, r3
 8012fc8:	461a      	mov	r2, r3
 8012fca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8012fce:	4413      	add	r3, r2
 8012fd0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8012fd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012fd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012fdc:	681b      	ldr	r3, [r3, #0]
 8012fde:	781b      	ldrb	r3, [r3, #0]
 8012fe0:	011a      	lsls	r2, r3, #4
 8012fe2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8012fe6:	4413      	add	r3, r2
 8012fe8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8012fec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8012ff0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012ff4:	b29a      	uxth	r2, r3
 8012ff6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8012ffa:	801a      	strh	r2, [r3, #0]
 8012ffc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013000:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013004:	681b      	ldr	r3, [r3, #0]
 8013006:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801300a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801300e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013012:	681b      	ldr	r3, [r3, #0]
 8013014:	785b      	ldrb	r3, [r3, #1]
 8013016:	2b00      	cmp	r3, #0
 8013018:	d178      	bne.n	801310c <USB_EPStartXfer+0x1592>
 801301a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801301e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013022:	681b      	ldr	r3, [r3, #0]
 8013024:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8013028:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801302c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013030:	681b      	ldr	r3, [r3, #0]
 8013032:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8013036:	b29b      	uxth	r3, r3
 8013038:	461a      	mov	r2, r3
 801303a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801303e:	4413      	add	r3, r2
 8013040:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8013044:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013048:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801304c:	681b      	ldr	r3, [r3, #0]
 801304e:	781b      	ldrb	r3, [r3, #0]
 8013050:	011a      	lsls	r2, r3, #4
 8013052:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8013056:	4413      	add	r3, r2
 8013058:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 801305c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8013060:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013064:	2b00      	cmp	r3, #0
 8013066:	d116      	bne.n	8013096 <USB_EPStartXfer+0x151c>
 8013068:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801306c:	881b      	ldrh	r3, [r3, #0]
 801306e:	b29b      	uxth	r3, r3
 8013070:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8013074:	b29a      	uxth	r2, r3
 8013076:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801307a:	801a      	strh	r2, [r3, #0]
 801307c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8013080:	881b      	ldrh	r3, [r3, #0]
 8013082:	b29b      	uxth	r3, r3
 8013084:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8013088:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801308c:	b29a      	uxth	r2, r3
 801308e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8013092:	801a      	strh	r2, [r3, #0]
 8013094:	e067      	b.n	8013166 <USB_EPStartXfer+0x15ec>
 8013096:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801309a:	2b3e      	cmp	r3, #62	; 0x3e
 801309c:	d818      	bhi.n	80130d0 <USB_EPStartXfer+0x1556>
 801309e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80130a2:	085b      	lsrs	r3, r3, #1
 80130a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80130a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80130ac:	f003 0301 	and.w	r3, r3, #1
 80130b0:	2b00      	cmp	r3, #0
 80130b2:	d004      	beq.n	80130be <USB_EPStartXfer+0x1544>
 80130b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80130b8:	3301      	adds	r3, #1
 80130ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80130be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80130c2:	b29b      	uxth	r3, r3
 80130c4:	029b      	lsls	r3, r3, #10
 80130c6:	b29a      	uxth	r2, r3
 80130c8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80130cc:	801a      	strh	r2, [r3, #0]
 80130ce:	e04a      	b.n	8013166 <USB_EPStartXfer+0x15ec>
 80130d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80130d4:	095b      	lsrs	r3, r3, #5
 80130d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80130da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80130de:	f003 031f 	and.w	r3, r3, #31
 80130e2:	2b00      	cmp	r3, #0
 80130e4:	d104      	bne.n	80130f0 <USB_EPStartXfer+0x1576>
 80130e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80130ea:	3b01      	subs	r3, #1
 80130ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80130f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80130f4:	b29b      	uxth	r3, r3
 80130f6:	029b      	lsls	r3, r3, #10
 80130f8:	b29b      	uxth	r3, r3
 80130fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80130fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8013102:	b29a      	uxth	r2, r3
 8013104:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8013108:	801a      	strh	r2, [r3, #0]
 801310a:	e02c      	b.n	8013166 <USB_EPStartXfer+0x15ec>
 801310c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013110:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013114:	681b      	ldr	r3, [r3, #0]
 8013116:	785b      	ldrb	r3, [r3, #1]
 8013118:	2b01      	cmp	r3, #1
 801311a:	d124      	bne.n	8013166 <USB_EPStartXfer+0x15ec>
 801311c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013120:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013124:	681b      	ldr	r3, [r3, #0]
 8013126:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801312a:	b29b      	uxth	r3, r3
 801312c:	461a      	mov	r2, r3
 801312e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8013132:	4413      	add	r3, r2
 8013134:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8013138:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801313c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013140:	681b      	ldr	r3, [r3, #0]
 8013142:	781b      	ldrb	r3, [r3, #0]
 8013144:	011a      	lsls	r2, r3, #4
 8013146:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801314a:	4413      	add	r3, r2
 801314c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8013150:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8013154:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013158:	b29a      	uxth	r2, r3
 801315a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801315e:	801a      	strh	r2, [r3, #0]
 8013160:	e001      	b.n	8013166 <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 8013162:	2301      	movs	r3, #1
 8013164:	e03a      	b.n	80131dc <USB_EPStartXfer+0x1662>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8013166:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801316a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801316e:	681a      	ldr	r2, [r3, #0]
 8013170:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013174:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013178:	681b      	ldr	r3, [r3, #0]
 801317a:	781b      	ldrb	r3, [r3, #0]
 801317c:	009b      	lsls	r3, r3, #2
 801317e:	4413      	add	r3, r2
 8013180:	881b      	ldrh	r3, [r3, #0]
 8013182:	b29b      	uxth	r3, r3
 8013184:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8013188:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801318c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8013190:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8013194:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8013198:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 801319c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80131a0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80131a4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80131a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80131ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80131b0:	681a      	ldr	r2, [r3, #0]
 80131b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80131b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80131ba:	681b      	ldr	r3, [r3, #0]
 80131bc:	781b      	ldrb	r3, [r3, #0]
 80131be:	009b      	lsls	r3, r3, #2
 80131c0:	441a      	add	r2, r3
 80131c2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80131c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80131ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80131ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80131d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80131d6:	b29b      	uxth	r3, r3
 80131d8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80131da:	2300      	movs	r3, #0
}
 80131dc:	4618      	mov	r0, r3
 80131de:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80131e2:	46bd      	mov	sp, r7
 80131e4:	bd80      	pop	{r7, pc}

080131e6 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80131e6:	b480      	push	{r7}
 80131e8:	b085      	sub	sp, #20
 80131ea:	af00      	add	r7, sp, #0
 80131ec:	6078      	str	r0, [r7, #4]
 80131ee:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80131f0:	683b      	ldr	r3, [r7, #0]
 80131f2:	785b      	ldrb	r3, [r3, #1]
 80131f4:	2b00      	cmp	r3, #0
 80131f6:	d020      	beq.n	801323a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80131f8:	687a      	ldr	r2, [r7, #4]
 80131fa:	683b      	ldr	r3, [r7, #0]
 80131fc:	781b      	ldrb	r3, [r3, #0]
 80131fe:	009b      	lsls	r3, r3, #2
 8013200:	4413      	add	r3, r2
 8013202:	881b      	ldrh	r3, [r3, #0]
 8013204:	b29b      	uxth	r3, r3
 8013206:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801320a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801320e:	81bb      	strh	r3, [r7, #12]
 8013210:	89bb      	ldrh	r3, [r7, #12]
 8013212:	f083 0310 	eor.w	r3, r3, #16
 8013216:	81bb      	strh	r3, [r7, #12]
 8013218:	687a      	ldr	r2, [r7, #4]
 801321a:	683b      	ldr	r3, [r7, #0]
 801321c:	781b      	ldrb	r3, [r3, #0]
 801321e:	009b      	lsls	r3, r3, #2
 8013220:	441a      	add	r2, r3
 8013222:	89bb      	ldrh	r3, [r7, #12]
 8013224:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8013228:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801322c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8013230:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013234:	b29b      	uxth	r3, r3
 8013236:	8013      	strh	r3, [r2, #0]
 8013238:	e01f      	b.n	801327a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 801323a:	687a      	ldr	r2, [r7, #4]
 801323c:	683b      	ldr	r3, [r7, #0]
 801323e:	781b      	ldrb	r3, [r3, #0]
 8013240:	009b      	lsls	r3, r3, #2
 8013242:	4413      	add	r3, r2
 8013244:	881b      	ldrh	r3, [r3, #0]
 8013246:	b29b      	uxth	r3, r3
 8013248:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801324c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013250:	81fb      	strh	r3, [r7, #14]
 8013252:	89fb      	ldrh	r3, [r7, #14]
 8013254:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8013258:	81fb      	strh	r3, [r7, #14]
 801325a:	687a      	ldr	r2, [r7, #4]
 801325c:	683b      	ldr	r3, [r7, #0]
 801325e:	781b      	ldrb	r3, [r3, #0]
 8013260:	009b      	lsls	r3, r3, #2
 8013262:	441a      	add	r2, r3
 8013264:	89fb      	ldrh	r3, [r7, #14]
 8013266:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801326a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801326e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8013272:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013276:	b29b      	uxth	r3, r3
 8013278:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 801327a:	2300      	movs	r3, #0
}
 801327c:	4618      	mov	r0, r3
 801327e:	3714      	adds	r7, #20
 8013280:	46bd      	mov	sp, r7
 8013282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013286:	4770      	bx	lr

08013288 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8013288:	b480      	push	{r7}
 801328a:	b087      	sub	sp, #28
 801328c:	af00      	add	r7, sp, #0
 801328e:	6078      	str	r0, [r7, #4]
 8013290:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8013292:	683b      	ldr	r3, [r7, #0]
 8013294:	7b1b      	ldrb	r3, [r3, #12]
 8013296:	2b00      	cmp	r3, #0
 8013298:	f040 809d 	bne.w	80133d6 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 801329c:	683b      	ldr	r3, [r7, #0]
 801329e:	785b      	ldrb	r3, [r3, #1]
 80132a0:	2b00      	cmp	r3, #0
 80132a2:	d04c      	beq.n	801333e <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80132a4:	687a      	ldr	r2, [r7, #4]
 80132a6:	683b      	ldr	r3, [r7, #0]
 80132a8:	781b      	ldrb	r3, [r3, #0]
 80132aa:	009b      	lsls	r3, r3, #2
 80132ac:	4413      	add	r3, r2
 80132ae:	881b      	ldrh	r3, [r3, #0]
 80132b0:	823b      	strh	r3, [r7, #16]
 80132b2:	8a3b      	ldrh	r3, [r7, #16]
 80132b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80132b8:	2b00      	cmp	r3, #0
 80132ba:	d01b      	beq.n	80132f4 <USB_EPClearStall+0x6c>
 80132bc:	687a      	ldr	r2, [r7, #4]
 80132be:	683b      	ldr	r3, [r7, #0]
 80132c0:	781b      	ldrb	r3, [r3, #0]
 80132c2:	009b      	lsls	r3, r3, #2
 80132c4:	4413      	add	r3, r2
 80132c6:	881b      	ldrh	r3, [r3, #0]
 80132c8:	b29b      	uxth	r3, r3
 80132ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80132ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80132d2:	81fb      	strh	r3, [r7, #14]
 80132d4:	687a      	ldr	r2, [r7, #4]
 80132d6:	683b      	ldr	r3, [r7, #0]
 80132d8:	781b      	ldrb	r3, [r3, #0]
 80132da:	009b      	lsls	r3, r3, #2
 80132dc:	441a      	add	r2, r3
 80132de:	89fb      	ldrh	r3, [r7, #14]
 80132e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80132e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80132e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80132ec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80132f0:	b29b      	uxth	r3, r3
 80132f2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80132f4:	683b      	ldr	r3, [r7, #0]
 80132f6:	78db      	ldrb	r3, [r3, #3]
 80132f8:	2b01      	cmp	r3, #1
 80132fa:	d06c      	beq.n	80133d6 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80132fc:	687a      	ldr	r2, [r7, #4]
 80132fe:	683b      	ldr	r3, [r7, #0]
 8013300:	781b      	ldrb	r3, [r3, #0]
 8013302:	009b      	lsls	r3, r3, #2
 8013304:	4413      	add	r3, r2
 8013306:	881b      	ldrh	r3, [r3, #0]
 8013308:	b29b      	uxth	r3, r3
 801330a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801330e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013312:	81bb      	strh	r3, [r7, #12]
 8013314:	89bb      	ldrh	r3, [r7, #12]
 8013316:	f083 0320 	eor.w	r3, r3, #32
 801331a:	81bb      	strh	r3, [r7, #12]
 801331c:	687a      	ldr	r2, [r7, #4]
 801331e:	683b      	ldr	r3, [r7, #0]
 8013320:	781b      	ldrb	r3, [r3, #0]
 8013322:	009b      	lsls	r3, r3, #2
 8013324:	441a      	add	r2, r3
 8013326:	89bb      	ldrh	r3, [r7, #12]
 8013328:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801332c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8013330:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8013334:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013338:	b29b      	uxth	r3, r3
 801333a:	8013      	strh	r3, [r2, #0]
 801333c:	e04b      	b.n	80133d6 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801333e:	687a      	ldr	r2, [r7, #4]
 8013340:	683b      	ldr	r3, [r7, #0]
 8013342:	781b      	ldrb	r3, [r3, #0]
 8013344:	009b      	lsls	r3, r3, #2
 8013346:	4413      	add	r3, r2
 8013348:	881b      	ldrh	r3, [r3, #0]
 801334a:	82fb      	strh	r3, [r7, #22]
 801334c:	8afb      	ldrh	r3, [r7, #22]
 801334e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8013352:	2b00      	cmp	r3, #0
 8013354:	d01b      	beq.n	801338e <USB_EPClearStall+0x106>
 8013356:	687a      	ldr	r2, [r7, #4]
 8013358:	683b      	ldr	r3, [r7, #0]
 801335a:	781b      	ldrb	r3, [r3, #0]
 801335c:	009b      	lsls	r3, r3, #2
 801335e:	4413      	add	r3, r2
 8013360:	881b      	ldrh	r3, [r3, #0]
 8013362:	b29b      	uxth	r3, r3
 8013364:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8013368:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801336c:	82bb      	strh	r3, [r7, #20]
 801336e:	687a      	ldr	r2, [r7, #4]
 8013370:	683b      	ldr	r3, [r7, #0]
 8013372:	781b      	ldrb	r3, [r3, #0]
 8013374:	009b      	lsls	r3, r3, #2
 8013376:	441a      	add	r2, r3
 8013378:	8abb      	ldrh	r3, [r7, #20]
 801337a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801337e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8013382:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8013386:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801338a:	b29b      	uxth	r3, r3
 801338c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801338e:	687a      	ldr	r2, [r7, #4]
 8013390:	683b      	ldr	r3, [r7, #0]
 8013392:	781b      	ldrb	r3, [r3, #0]
 8013394:	009b      	lsls	r3, r3, #2
 8013396:	4413      	add	r3, r2
 8013398:	881b      	ldrh	r3, [r3, #0]
 801339a:	b29b      	uxth	r3, r3
 801339c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80133a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80133a4:	827b      	strh	r3, [r7, #18]
 80133a6:	8a7b      	ldrh	r3, [r7, #18]
 80133a8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80133ac:	827b      	strh	r3, [r7, #18]
 80133ae:	8a7b      	ldrh	r3, [r7, #18]
 80133b0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80133b4:	827b      	strh	r3, [r7, #18]
 80133b6:	687a      	ldr	r2, [r7, #4]
 80133b8:	683b      	ldr	r3, [r7, #0]
 80133ba:	781b      	ldrb	r3, [r3, #0]
 80133bc:	009b      	lsls	r3, r3, #2
 80133be:	441a      	add	r2, r3
 80133c0:	8a7b      	ldrh	r3, [r7, #18]
 80133c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80133c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80133ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80133ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80133d2:	b29b      	uxth	r3, r3
 80133d4:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80133d6:	2300      	movs	r3, #0
}
 80133d8:	4618      	mov	r0, r3
 80133da:	371c      	adds	r7, #28
 80133dc:	46bd      	mov	sp, r7
 80133de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133e2:	4770      	bx	lr

080133e4 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80133e4:	b480      	push	{r7}
 80133e6:	b083      	sub	sp, #12
 80133e8:	af00      	add	r7, sp, #0
 80133ea:	6078      	str	r0, [r7, #4]
 80133ec:	460b      	mov	r3, r1
 80133ee:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80133f0:	78fb      	ldrb	r3, [r7, #3]
 80133f2:	2b00      	cmp	r3, #0
 80133f4:	d103      	bne.n	80133fe <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80133f6:	687b      	ldr	r3, [r7, #4]
 80133f8:	2280      	movs	r2, #128	; 0x80
 80133fa:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80133fe:	2300      	movs	r3, #0
}
 8013400:	4618      	mov	r0, r3
 8013402:	370c      	adds	r7, #12
 8013404:	46bd      	mov	sp, r7
 8013406:	f85d 7b04 	ldr.w	r7, [sp], #4
 801340a:	4770      	bx	lr

0801340c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 801340c:	b480      	push	{r7}
 801340e:	b083      	sub	sp, #12
 8013410:	af00      	add	r7, sp, #0
 8013412:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8013414:	2300      	movs	r3, #0
}
 8013416:	4618      	mov	r0, r3
 8013418:	370c      	adds	r7, #12
 801341a:	46bd      	mov	sp, r7
 801341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013420:	4770      	bx	lr

08013422 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8013422:	b480      	push	{r7}
 8013424:	b085      	sub	sp, #20
 8013426:	af00      	add	r7, sp, #0
 8013428:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 801342a:	687b      	ldr	r3, [r7, #4]
 801342c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8013430:	b29b      	uxth	r3, r3
 8013432:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8013434:	68fb      	ldr	r3, [r7, #12]
}
 8013436:	4618      	mov	r0, r3
 8013438:	3714      	adds	r7, #20
 801343a:	46bd      	mov	sp, r7
 801343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013440:	4770      	bx	lr

08013442 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8013442:	b480      	push	{r7}
 8013444:	b08d      	sub	sp, #52	; 0x34
 8013446:	af00      	add	r7, sp, #0
 8013448:	60f8      	str	r0, [r7, #12]
 801344a:	60b9      	str	r1, [r7, #8]
 801344c:	4611      	mov	r1, r2
 801344e:	461a      	mov	r2, r3
 8013450:	460b      	mov	r3, r1
 8013452:	80fb      	strh	r3, [r7, #6]
 8013454:	4613      	mov	r3, r2
 8013456:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8013458:	88bb      	ldrh	r3, [r7, #4]
 801345a:	3301      	adds	r3, #1
 801345c:	085b      	lsrs	r3, r3, #1
 801345e:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8013460:	68fb      	ldr	r3, [r7, #12]
 8013462:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8013464:	68bb      	ldr	r3, [r7, #8]
 8013466:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8013468:	88fb      	ldrh	r3, [r7, #6]
 801346a:	005a      	lsls	r2, r3, #1
 801346c:	69fb      	ldr	r3, [r7, #28]
 801346e:	4413      	add	r3, r2
 8013470:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8013474:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8013476:	6a3b      	ldr	r3, [r7, #32]
 8013478:	62fb      	str	r3, [r7, #44]	; 0x2c
 801347a:	e01e      	b.n	80134ba <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 801347c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801347e:	781b      	ldrb	r3, [r3, #0]
 8013480:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8013482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013484:	3301      	adds	r3, #1
 8013486:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8013488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801348a:	781b      	ldrb	r3, [r3, #0]
 801348c:	b29b      	uxth	r3, r3
 801348e:	021b      	lsls	r3, r3, #8
 8013490:	b29b      	uxth	r3, r3
 8013492:	461a      	mov	r2, r3
 8013494:	69bb      	ldr	r3, [r7, #24]
 8013496:	4313      	orrs	r3, r2
 8013498:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 801349a:	697b      	ldr	r3, [r7, #20]
 801349c:	b29a      	uxth	r2, r3
 801349e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134a0:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80134a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134a4:	3302      	adds	r3, #2
 80134a6:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80134a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134aa:	3302      	adds	r3, #2
 80134ac:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80134ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134b0:	3301      	adds	r3, #1
 80134b2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80134b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134b6:	3b01      	subs	r3, #1
 80134b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80134ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134bc:	2b00      	cmp	r3, #0
 80134be:	d1dd      	bne.n	801347c <USB_WritePMA+0x3a>
  }
}
 80134c0:	bf00      	nop
 80134c2:	bf00      	nop
 80134c4:	3734      	adds	r7, #52	; 0x34
 80134c6:	46bd      	mov	sp, r7
 80134c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134cc:	4770      	bx	lr

080134ce <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80134ce:	b480      	push	{r7}
 80134d0:	b08b      	sub	sp, #44	; 0x2c
 80134d2:	af00      	add	r7, sp, #0
 80134d4:	60f8      	str	r0, [r7, #12]
 80134d6:	60b9      	str	r1, [r7, #8]
 80134d8:	4611      	mov	r1, r2
 80134da:	461a      	mov	r2, r3
 80134dc:	460b      	mov	r3, r1
 80134de:	80fb      	strh	r3, [r7, #6]
 80134e0:	4613      	mov	r3, r2
 80134e2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80134e4:	88bb      	ldrh	r3, [r7, #4]
 80134e6:	085b      	lsrs	r3, r3, #1
 80134e8:	b29b      	uxth	r3, r3
 80134ea:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80134ec:	68fb      	ldr	r3, [r7, #12]
 80134ee:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80134f0:	68bb      	ldr	r3, [r7, #8]
 80134f2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80134f4:	88fb      	ldrh	r3, [r7, #6]
 80134f6:	005a      	lsls	r2, r3, #1
 80134f8:	697b      	ldr	r3, [r7, #20]
 80134fa:	4413      	add	r3, r2
 80134fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8013500:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8013502:	69bb      	ldr	r3, [r7, #24]
 8013504:	627b      	str	r3, [r7, #36]	; 0x24
 8013506:	e01b      	b.n	8013540 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8013508:	6a3b      	ldr	r3, [r7, #32]
 801350a:	881b      	ldrh	r3, [r3, #0]
 801350c:	b29b      	uxth	r3, r3
 801350e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8013510:	6a3b      	ldr	r3, [r7, #32]
 8013512:	3302      	adds	r3, #2
 8013514:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8013516:	693b      	ldr	r3, [r7, #16]
 8013518:	b2da      	uxtb	r2, r3
 801351a:	69fb      	ldr	r3, [r7, #28]
 801351c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 801351e:	69fb      	ldr	r3, [r7, #28]
 8013520:	3301      	adds	r3, #1
 8013522:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8013524:	693b      	ldr	r3, [r7, #16]
 8013526:	0a1b      	lsrs	r3, r3, #8
 8013528:	b2da      	uxtb	r2, r3
 801352a:	69fb      	ldr	r3, [r7, #28]
 801352c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 801352e:	69fb      	ldr	r3, [r7, #28]
 8013530:	3301      	adds	r3, #1
 8013532:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8013534:	6a3b      	ldr	r3, [r7, #32]
 8013536:	3302      	adds	r3, #2
 8013538:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 801353a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801353c:	3b01      	subs	r3, #1
 801353e:	627b      	str	r3, [r7, #36]	; 0x24
 8013540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013542:	2b00      	cmp	r3, #0
 8013544:	d1e0      	bne.n	8013508 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8013546:	88bb      	ldrh	r3, [r7, #4]
 8013548:	f003 0301 	and.w	r3, r3, #1
 801354c:	b29b      	uxth	r3, r3
 801354e:	2b00      	cmp	r3, #0
 8013550:	d007      	beq.n	8013562 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8013552:	6a3b      	ldr	r3, [r7, #32]
 8013554:	881b      	ldrh	r3, [r3, #0]
 8013556:	b29b      	uxth	r3, r3
 8013558:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 801355a:	693b      	ldr	r3, [r7, #16]
 801355c:	b2da      	uxtb	r2, r3
 801355e:	69fb      	ldr	r3, [r7, #28]
 8013560:	701a      	strb	r2, [r3, #0]
  }
}
 8013562:	bf00      	nop
 8013564:	372c      	adds	r7, #44	; 0x2c
 8013566:	46bd      	mov	sp, r7
 8013568:	f85d 7b04 	ldr.w	r7, [sp], #4
 801356c:	4770      	bx	lr

0801356e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801356e:	b580      	push	{r7, lr}
 8013570:	b084      	sub	sp, #16
 8013572:	af00      	add	r7, sp, #0
 8013574:	6078      	str	r0, [r7, #4]
 8013576:	460b      	mov	r3, r1
 8013578:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 801357a:	2300      	movs	r3, #0
 801357c:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801357e:	687b      	ldr	r3, [r7, #4]
 8013580:	7c1b      	ldrb	r3, [r3, #16]
 8013582:	2b00      	cmp	r3, #0
 8013584:	d115      	bne.n	80135b2 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8013586:	f44f 7300 	mov.w	r3, #512	; 0x200
 801358a:	2202      	movs	r2, #2
 801358c:	2181      	movs	r1, #129	; 0x81
 801358e:	6878      	ldr	r0, [r7, #4]
 8013590:	f01b ff97 	bl	802f4c2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	2201      	movs	r2, #1
 8013598:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801359a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801359e:	2202      	movs	r2, #2
 80135a0:	2101      	movs	r1, #1
 80135a2:	6878      	ldr	r0, [r7, #4]
 80135a4:	f01b ff8d 	bl	802f4c2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80135a8:	687b      	ldr	r3, [r7, #4]
 80135aa:	2201      	movs	r2, #1
 80135ac:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80135b0:	e012      	b.n	80135d8 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80135b2:	2340      	movs	r3, #64	; 0x40
 80135b4:	2202      	movs	r2, #2
 80135b6:	2181      	movs	r1, #129	; 0x81
 80135b8:	6878      	ldr	r0, [r7, #4]
 80135ba:	f01b ff82 	bl	802f4c2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80135be:	687b      	ldr	r3, [r7, #4]
 80135c0:	2201      	movs	r2, #1
 80135c2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80135c4:	2340      	movs	r3, #64	; 0x40
 80135c6:	2202      	movs	r2, #2
 80135c8:	2101      	movs	r1, #1
 80135ca:	6878      	ldr	r0, [r7, #4]
 80135cc:	f01b ff79 	bl	802f4c2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	2201      	movs	r2, #1
 80135d4:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80135d8:	2308      	movs	r3, #8
 80135da:	2203      	movs	r2, #3
 80135dc:	2182      	movs	r1, #130	; 0x82
 80135de:	6878      	ldr	r0, [r7, #4]
 80135e0:	f01b ff6f 	bl	802f4c2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80135e4:	687b      	ldr	r3, [r7, #4]
 80135e6:	2201      	movs	r2, #1
 80135e8:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80135ea:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80135ee:	f01c f891 	bl	802f714 <USBD_static_malloc>
 80135f2:	4602      	mov	r2, r0
 80135f4:	687b      	ldr	r3, [r7, #4]
 80135f6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80135fa:	687b      	ldr	r3, [r7, #4]
 80135fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013600:	2b00      	cmp	r3, #0
 8013602:	d102      	bne.n	801360a <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8013604:	2301      	movs	r3, #1
 8013606:	73fb      	strb	r3, [r7, #15]
 8013608:	e026      	b.n	8013658 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801360a:	687b      	ldr	r3, [r7, #4]
 801360c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013610:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013618:	681b      	ldr	r3, [r3, #0]
 801361a:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 801361c:	68bb      	ldr	r3, [r7, #8]
 801361e:	2200      	movs	r2, #0
 8013620:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8013624:	68bb      	ldr	r3, [r7, #8]
 8013626:	2200      	movs	r2, #0
 8013628:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801362c:	687b      	ldr	r3, [r7, #4]
 801362e:	7c1b      	ldrb	r3, [r3, #16]
 8013630:	2b00      	cmp	r3, #0
 8013632:	d109      	bne.n	8013648 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8013634:	68bb      	ldr	r3, [r7, #8]
 8013636:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801363a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801363e:	2101      	movs	r1, #1
 8013640:	6878      	ldr	r0, [r7, #4]
 8013642:	f01c f830 	bl	802f6a6 <USBD_LL_PrepareReceive>
 8013646:	e007      	b.n	8013658 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8013648:	68bb      	ldr	r3, [r7, #8]
 801364a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801364e:	2340      	movs	r3, #64	; 0x40
 8013650:	2101      	movs	r1, #1
 8013652:	6878      	ldr	r0, [r7, #4]
 8013654:	f01c f827 	bl	802f6a6 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8013658:	7bfb      	ldrb	r3, [r7, #15]
}
 801365a:	4618      	mov	r0, r3
 801365c:	3710      	adds	r7, #16
 801365e:	46bd      	mov	sp, r7
 8013660:	bd80      	pop	{r7, pc}

08013662 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013662:	b580      	push	{r7, lr}
 8013664:	b084      	sub	sp, #16
 8013666:	af00      	add	r7, sp, #0
 8013668:	6078      	str	r0, [r7, #4]
 801366a:	460b      	mov	r3, r1
 801366c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 801366e:	2300      	movs	r3, #0
 8013670:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8013672:	2181      	movs	r1, #129	; 0x81
 8013674:	6878      	ldr	r0, [r7, #4]
 8013676:	f01b ff4a 	bl	802f50e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 801367a:	687b      	ldr	r3, [r7, #4]
 801367c:	2200      	movs	r2, #0
 801367e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8013680:	2101      	movs	r1, #1
 8013682:	6878      	ldr	r0, [r7, #4]
 8013684:	f01b ff43 	bl	802f50e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8013688:	687b      	ldr	r3, [r7, #4]
 801368a:	2200      	movs	r2, #0
 801368c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8013690:	2182      	movs	r1, #130	; 0x82
 8013692:	6878      	ldr	r0, [r7, #4]
 8013694:	f01b ff3b 	bl	802f50e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8013698:	687b      	ldr	r3, [r7, #4]
 801369a:	2200      	movs	r2, #0
 801369c:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 801369e:	687b      	ldr	r3, [r7, #4]
 80136a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80136a4:	2b00      	cmp	r3, #0
 80136a6:	d00e      	beq.n	80136c6 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80136a8:	687b      	ldr	r3, [r7, #4]
 80136aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80136ae:	685b      	ldr	r3, [r3, #4]
 80136b0:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80136b2:	687b      	ldr	r3, [r7, #4]
 80136b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80136b8:	4618      	mov	r0, r3
 80136ba:	f01c f839 	bl	802f730 <USBD_static_free>
    pdev->pClassData = NULL;
 80136be:	687b      	ldr	r3, [r7, #4]
 80136c0:	2200      	movs	r2, #0
 80136c2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80136c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80136c8:	4618      	mov	r0, r3
 80136ca:	3710      	adds	r7, #16
 80136cc:	46bd      	mov	sp, r7
 80136ce:	bd80      	pop	{r7, pc}

080136d0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80136d0:	b580      	push	{r7, lr}
 80136d2:	b086      	sub	sp, #24
 80136d4:	af00      	add	r7, sp, #0
 80136d6:	6078      	str	r0, [r7, #4]
 80136d8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80136da:	687b      	ldr	r3, [r7, #4]
 80136dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80136e0:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80136e2:	2300      	movs	r3, #0
 80136e4:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80136e6:	2300      	movs	r3, #0
 80136e8:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80136ea:	2300      	movs	r3, #0
 80136ec:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80136ee:	683b      	ldr	r3, [r7, #0]
 80136f0:	781b      	ldrb	r3, [r3, #0]
 80136f2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80136f6:	2b00      	cmp	r3, #0
 80136f8:	d039      	beq.n	801376e <USBD_CDC_Setup+0x9e>
 80136fa:	2b20      	cmp	r3, #32
 80136fc:	d17f      	bne.n	80137fe <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80136fe:	683b      	ldr	r3, [r7, #0]
 8013700:	88db      	ldrh	r3, [r3, #6]
 8013702:	2b00      	cmp	r3, #0
 8013704:	d029      	beq.n	801375a <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8013706:	683b      	ldr	r3, [r7, #0]
 8013708:	781b      	ldrb	r3, [r3, #0]
 801370a:	b25b      	sxtb	r3, r3
 801370c:	2b00      	cmp	r3, #0
 801370e:	da11      	bge.n	8013734 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8013710:	687b      	ldr	r3, [r7, #4]
 8013712:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013716:	689b      	ldr	r3, [r3, #8]
 8013718:	683a      	ldr	r2, [r7, #0]
 801371a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 801371c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801371e:	683a      	ldr	r2, [r7, #0]
 8013720:	88d2      	ldrh	r2, [r2, #6]
 8013722:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8013724:	6939      	ldr	r1, [r7, #16]
 8013726:	683b      	ldr	r3, [r7, #0]
 8013728:	88db      	ldrh	r3, [r3, #6]
 801372a:	461a      	mov	r2, r3
 801372c:	6878      	ldr	r0, [r7, #4]
 801372e:	f001 f9e4 	bl	8014afa <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8013732:	e06b      	b.n	801380c <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8013734:	683b      	ldr	r3, [r7, #0]
 8013736:	785a      	ldrb	r2, [r3, #1]
 8013738:	693b      	ldr	r3, [r7, #16]
 801373a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 801373e:	683b      	ldr	r3, [r7, #0]
 8013740:	88db      	ldrh	r3, [r3, #6]
 8013742:	b2da      	uxtb	r2, r3
 8013744:	693b      	ldr	r3, [r7, #16]
 8013746:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 801374a:	6939      	ldr	r1, [r7, #16]
 801374c:	683b      	ldr	r3, [r7, #0]
 801374e:	88db      	ldrh	r3, [r3, #6]
 8013750:	461a      	mov	r2, r3
 8013752:	6878      	ldr	r0, [r7, #4]
 8013754:	f001 f9ff 	bl	8014b56 <USBD_CtlPrepareRx>
      break;
 8013758:	e058      	b.n	801380c <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801375a:	687b      	ldr	r3, [r7, #4]
 801375c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013760:	689b      	ldr	r3, [r3, #8]
 8013762:	683a      	ldr	r2, [r7, #0]
 8013764:	7850      	ldrb	r0, [r2, #1]
 8013766:	2200      	movs	r2, #0
 8013768:	6839      	ldr	r1, [r7, #0]
 801376a:	4798      	blx	r3
      break;
 801376c:	e04e      	b.n	801380c <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801376e:	683b      	ldr	r3, [r7, #0]
 8013770:	785b      	ldrb	r3, [r3, #1]
 8013772:	2b0b      	cmp	r3, #11
 8013774:	d02e      	beq.n	80137d4 <USBD_CDC_Setup+0x104>
 8013776:	2b0b      	cmp	r3, #11
 8013778:	dc38      	bgt.n	80137ec <USBD_CDC_Setup+0x11c>
 801377a:	2b00      	cmp	r3, #0
 801377c:	d002      	beq.n	8013784 <USBD_CDC_Setup+0xb4>
 801377e:	2b0a      	cmp	r3, #10
 8013780:	d014      	beq.n	80137ac <USBD_CDC_Setup+0xdc>
 8013782:	e033      	b.n	80137ec <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801378a:	2b03      	cmp	r3, #3
 801378c:	d107      	bne.n	801379e <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 801378e:	f107 030c 	add.w	r3, r7, #12
 8013792:	2202      	movs	r2, #2
 8013794:	4619      	mov	r1, r3
 8013796:	6878      	ldr	r0, [r7, #4]
 8013798:	f001 f9af 	bl	8014afa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801379c:	e02e      	b.n	80137fc <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 801379e:	6839      	ldr	r1, [r7, #0]
 80137a0:	6878      	ldr	r0, [r7, #4]
 80137a2:	f001 f93f 	bl	8014a24 <USBD_CtlError>
            ret = USBD_FAIL;
 80137a6:	2302      	movs	r3, #2
 80137a8:	75fb      	strb	r3, [r7, #23]
          break;
 80137aa:	e027      	b.n	80137fc <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80137ac:	687b      	ldr	r3, [r7, #4]
 80137ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80137b2:	2b03      	cmp	r3, #3
 80137b4:	d107      	bne.n	80137c6 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80137b6:	f107 030f 	add.w	r3, r7, #15
 80137ba:	2201      	movs	r2, #1
 80137bc:	4619      	mov	r1, r3
 80137be:	6878      	ldr	r0, [r7, #4]
 80137c0:	f001 f99b 	bl	8014afa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80137c4:	e01a      	b.n	80137fc <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80137c6:	6839      	ldr	r1, [r7, #0]
 80137c8:	6878      	ldr	r0, [r7, #4]
 80137ca:	f001 f92b 	bl	8014a24 <USBD_CtlError>
            ret = USBD_FAIL;
 80137ce:	2302      	movs	r3, #2
 80137d0:	75fb      	strb	r3, [r7, #23]
          break;
 80137d2:	e013      	b.n	80137fc <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80137d4:	687b      	ldr	r3, [r7, #4]
 80137d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80137da:	2b03      	cmp	r3, #3
 80137dc:	d00d      	beq.n	80137fa <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80137de:	6839      	ldr	r1, [r7, #0]
 80137e0:	6878      	ldr	r0, [r7, #4]
 80137e2:	f001 f91f 	bl	8014a24 <USBD_CtlError>
            ret = USBD_FAIL;
 80137e6:	2302      	movs	r3, #2
 80137e8:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80137ea:	e006      	b.n	80137fa <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80137ec:	6839      	ldr	r1, [r7, #0]
 80137ee:	6878      	ldr	r0, [r7, #4]
 80137f0:	f001 f918 	bl	8014a24 <USBD_CtlError>
          ret = USBD_FAIL;
 80137f4:	2302      	movs	r3, #2
 80137f6:	75fb      	strb	r3, [r7, #23]
          break;
 80137f8:	e000      	b.n	80137fc <USBD_CDC_Setup+0x12c>
          break;
 80137fa:	bf00      	nop
      }
      break;
 80137fc:	e006      	b.n	801380c <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80137fe:	6839      	ldr	r1, [r7, #0]
 8013800:	6878      	ldr	r0, [r7, #4]
 8013802:	f001 f90f 	bl	8014a24 <USBD_CtlError>
      ret = USBD_FAIL;
 8013806:	2302      	movs	r3, #2
 8013808:	75fb      	strb	r3, [r7, #23]
      break;
 801380a:	bf00      	nop
  }

  return ret;
 801380c:	7dfb      	ldrb	r3, [r7, #23]
}
 801380e:	4618      	mov	r0, r3
 8013810:	3718      	adds	r7, #24
 8013812:	46bd      	mov	sp, r7
 8013814:	bd80      	pop	{r7, pc}

08013816 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013816:	b580      	push	{r7, lr}
 8013818:	b084      	sub	sp, #16
 801381a:	af00      	add	r7, sp, #0
 801381c:	6078      	str	r0, [r7, #4]
 801381e:	460b      	mov	r3, r1
 8013820:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8013822:	687b      	ldr	r3, [r7, #4]
 8013824:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013828:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 801382a:	687b      	ldr	r3, [r7, #4]
 801382c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013830:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8013832:	687b      	ldr	r3, [r7, #4]
 8013834:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013838:	2b00      	cmp	r3, #0
 801383a:	d03a      	beq.n	80138b2 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 801383c:	78fa      	ldrb	r2, [r7, #3]
 801383e:	6879      	ldr	r1, [r7, #4]
 8013840:	4613      	mov	r3, r2
 8013842:	009b      	lsls	r3, r3, #2
 8013844:	4413      	add	r3, r2
 8013846:	009b      	lsls	r3, r3, #2
 8013848:	440b      	add	r3, r1
 801384a:	331c      	adds	r3, #28
 801384c:	681b      	ldr	r3, [r3, #0]
 801384e:	2b00      	cmp	r3, #0
 8013850:	d029      	beq.n	80138a6 <USBD_CDC_DataIn+0x90>
 8013852:	78fa      	ldrb	r2, [r7, #3]
 8013854:	6879      	ldr	r1, [r7, #4]
 8013856:	4613      	mov	r3, r2
 8013858:	009b      	lsls	r3, r3, #2
 801385a:	4413      	add	r3, r2
 801385c:	009b      	lsls	r3, r3, #2
 801385e:	440b      	add	r3, r1
 8013860:	331c      	adds	r3, #28
 8013862:	681a      	ldr	r2, [r3, #0]
 8013864:	78f9      	ldrb	r1, [r7, #3]
 8013866:	68b8      	ldr	r0, [r7, #8]
 8013868:	460b      	mov	r3, r1
 801386a:	009b      	lsls	r3, r3, #2
 801386c:	440b      	add	r3, r1
 801386e:	00db      	lsls	r3, r3, #3
 8013870:	4403      	add	r3, r0
 8013872:	3338      	adds	r3, #56	; 0x38
 8013874:	681b      	ldr	r3, [r3, #0]
 8013876:	fbb2 f1f3 	udiv	r1, r2, r3
 801387a:	fb01 f303 	mul.w	r3, r1, r3
 801387e:	1ad3      	subs	r3, r2, r3
 8013880:	2b00      	cmp	r3, #0
 8013882:	d110      	bne.n	80138a6 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8013884:	78fa      	ldrb	r2, [r7, #3]
 8013886:	6879      	ldr	r1, [r7, #4]
 8013888:	4613      	mov	r3, r2
 801388a:	009b      	lsls	r3, r3, #2
 801388c:	4413      	add	r3, r2
 801388e:	009b      	lsls	r3, r3, #2
 8013890:	440b      	add	r3, r1
 8013892:	331c      	adds	r3, #28
 8013894:	2200      	movs	r2, #0
 8013896:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8013898:	78f9      	ldrb	r1, [r7, #3]
 801389a:	2300      	movs	r3, #0
 801389c:	2200      	movs	r2, #0
 801389e:	6878      	ldr	r0, [r7, #4]
 80138a0:	f01b fede 	bl	802f660 <USBD_LL_Transmit>
 80138a4:	e003      	b.n	80138ae <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80138a6:	68fb      	ldr	r3, [r7, #12]
 80138a8:	2200      	movs	r2, #0
 80138aa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80138ae:	2300      	movs	r3, #0
 80138b0:	e000      	b.n	80138b4 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80138b2:	2302      	movs	r3, #2
  }
}
 80138b4:	4618      	mov	r0, r3
 80138b6:	3710      	adds	r7, #16
 80138b8:	46bd      	mov	sp, r7
 80138ba:	bd80      	pop	{r7, pc}

080138bc <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80138bc:	b580      	push	{r7, lr}
 80138be:	b084      	sub	sp, #16
 80138c0:	af00      	add	r7, sp, #0
 80138c2:	6078      	str	r0, [r7, #4]
 80138c4:	460b      	mov	r3, r1
 80138c6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80138c8:	687b      	ldr	r3, [r7, #4]
 80138ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80138ce:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80138d0:	78fb      	ldrb	r3, [r7, #3]
 80138d2:	4619      	mov	r1, r3
 80138d4:	6878      	ldr	r0, [r7, #4]
 80138d6:	f01b ff09 	bl	802f6ec <USBD_LL_GetRxDataSize>
 80138da:	4602      	mov	r2, r0
 80138dc:	68fb      	ldr	r3, [r7, #12]
 80138de:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80138e2:	687b      	ldr	r3, [r7, #4]
 80138e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80138e8:	2b00      	cmp	r3, #0
 80138ea:	d00d      	beq.n	8013908 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80138ec:	687b      	ldr	r3, [r7, #4]
 80138ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80138f2:	68db      	ldr	r3, [r3, #12]
 80138f4:	68fa      	ldr	r2, [r7, #12]
 80138f6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80138fa:	68fa      	ldr	r2, [r7, #12]
 80138fc:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8013900:	4611      	mov	r1, r2
 8013902:	4798      	blx	r3

    return USBD_OK;
 8013904:	2300      	movs	r3, #0
 8013906:	e000      	b.n	801390a <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8013908:	2302      	movs	r3, #2
  }
}
 801390a:	4618      	mov	r0, r3
 801390c:	3710      	adds	r7, #16
 801390e:	46bd      	mov	sp, r7
 8013910:	bd80      	pop	{r7, pc}

08013912 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8013912:	b580      	push	{r7, lr}
 8013914:	b084      	sub	sp, #16
 8013916:	af00      	add	r7, sp, #0
 8013918:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801391a:	687b      	ldr	r3, [r7, #4]
 801391c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013920:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8013922:	687b      	ldr	r3, [r7, #4]
 8013924:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013928:	2b00      	cmp	r3, #0
 801392a:	d015      	beq.n	8013958 <USBD_CDC_EP0_RxReady+0x46>
 801392c:	68fb      	ldr	r3, [r7, #12]
 801392e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8013932:	2bff      	cmp	r3, #255	; 0xff
 8013934:	d010      	beq.n	8013958 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801393c:	689b      	ldr	r3, [r3, #8]
 801393e:	68fa      	ldr	r2, [r7, #12]
 8013940:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8013944:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8013946:	68fa      	ldr	r2, [r7, #12]
 8013948:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801394c:	b292      	uxth	r2, r2
 801394e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8013950:	68fb      	ldr	r3, [r7, #12]
 8013952:	22ff      	movs	r2, #255	; 0xff
 8013954:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8013958:	2300      	movs	r3, #0
}
 801395a:	4618      	mov	r0, r3
 801395c:	3710      	adds	r7, #16
 801395e:	46bd      	mov	sp, r7
 8013960:	bd80      	pop	{r7, pc}
	...

08013964 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8013964:	b480      	push	{r7}
 8013966:	b083      	sub	sp, #12
 8013968:	af00      	add	r7, sp, #0
 801396a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 801396c:	687b      	ldr	r3, [r7, #4]
 801396e:	2243      	movs	r2, #67	; 0x43
 8013970:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8013972:	4b03      	ldr	r3, [pc, #12]	; (8013980 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8013974:	4618      	mov	r0, r3
 8013976:	370c      	adds	r7, #12
 8013978:	46bd      	mov	sp, r7
 801397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801397e:	4770      	bx	lr
 8013980:	200003a8 	.word	0x200003a8

08013984 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8013984:	b480      	push	{r7}
 8013986:	b083      	sub	sp, #12
 8013988:	af00      	add	r7, sp, #0
 801398a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 801398c:	687b      	ldr	r3, [r7, #4]
 801398e:	2243      	movs	r2, #67	; 0x43
 8013990:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8013992:	4b03      	ldr	r3, [pc, #12]	; (80139a0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8013994:	4618      	mov	r0, r3
 8013996:	370c      	adds	r7, #12
 8013998:	46bd      	mov	sp, r7
 801399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801399e:	4770      	bx	lr
 80139a0:	20000364 	.word	0x20000364

080139a4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80139a4:	b480      	push	{r7}
 80139a6:	b083      	sub	sp, #12
 80139a8:	af00      	add	r7, sp, #0
 80139aa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80139ac:	687b      	ldr	r3, [r7, #4]
 80139ae:	2243      	movs	r2, #67	; 0x43
 80139b0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80139b2:	4b03      	ldr	r3, [pc, #12]	; (80139c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80139b4:	4618      	mov	r0, r3
 80139b6:	370c      	adds	r7, #12
 80139b8:	46bd      	mov	sp, r7
 80139ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139be:	4770      	bx	lr
 80139c0:	200003ec 	.word	0x200003ec

080139c4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80139c4:	b480      	push	{r7}
 80139c6:	b083      	sub	sp, #12
 80139c8:	af00      	add	r7, sp, #0
 80139ca:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80139cc:	687b      	ldr	r3, [r7, #4]
 80139ce:	220a      	movs	r2, #10
 80139d0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80139d2:	4b03      	ldr	r3, [pc, #12]	; (80139e0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80139d4:	4618      	mov	r0, r3
 80139d6:	370c      	adds	r7, #12
 80139d8:	46bd      	mov	sp, r7
 80139da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139de:	4770      	bx	lr
 80139e0:	20000320 	.word	0x20000320

080139e4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80139e4:	b480      	push	{r7}
 80139e6:	b085      	sub	sp, #20
 80139e8:	af00      	add	r7, sp, #0
 80139ea:	6078      	str	r0, [r7, #4]
 80139ec:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80139ee:	2302      	movs	r3, #2
 80139f0:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80139f2:	683b      	ldr	r3, [r7, #0]
 80139f4:	2b00      	cmp	r3, #0
 80139f6:	d005      	beq.n	8013a04 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80139f8:	687b      	ldr	r3, [r7, #4]
 80139fa:	683a      	ldr	r2, [r7, #0]
 80139fc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8013a00:	2300      	movs	r3, #0
 8013a02:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8013a04:	7bfb      	ldrb	r3, [r7, #15]
}
 8013a06:	4618      	mov	r0, r3
 8013a08:	3714      	adds	r7, #20
 8013a0a:	46bd      	mov	sp, r7
 8013a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a10:	4770      	bx	lr

08013a12 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8013a12:	b480      	push	{r7}
 8013a14:	b087      	sub	sp, #28
 8013a16:	af00      	add	r7, sp, #0
 8013a18:	60f8      	str	r0, [r7, #12]
 8013a1a:	60b9      	str	r1, [r7, #8]
 8013a1c:	4613      	mov	r3, r2
 8013a1e:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8013a20:	68fb      	ldr	r3, [r7, #12]
 8013a22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013a26:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8013a28:	697b      	ldr	r3, [r7, #20]
 8013a2a:	68ba      	ldr	r2, [r7, #8]
 8013a2c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8013a30:	88fa      	ldrh	r2, [r7, #6]
 8013a32:	697b      	ldr	r3, [r7, #20]
 8013a34:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8013a38:	2300      	movs	r3, #0
}
 8013a3a:	4618      	mov	r0, r3
 8013a3c:	371c      	adds	r7, #28
 8013a3e:	46bd      	mov	sp, r7
 8013a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a44:	4770      	bx	lr

08013a46 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8013a46:	b480      	push	{r7}
 8013a48:	b085      	sub	sp, #20
 8013a4a:	af00      	add	r7, sp, #0
 8013a4c:	6078      	str	r0, [r7, #4]
 8013a4e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8013a50:	687b      	ldr	r3, [r7, #4]
 8013a52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013a56:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8013a58:	68fb      	ldr	r3, [r7, #12]
 8013a5a:	683a      	ldr	r2, [r7, #0]
 8013a5c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8013a60:	2300      	movs	r3, #0
}
 8013a62:	4618      	mov	r0, r3
 8013a64:	3714      	adds	r7, #20
 8013a66:	46bd      	mov	sp, r7
 8013a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a6c:	4770      	bx	lr

08013a6e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8013a6e:	b580      	push	{r7, lr}
 8013a70:	b084      	sub	sp, #16
 8013a72:	af00      	add	r7, sp, #0
 8013a74:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8013a76:	687b      	ldr	r3, [r7, #4]
 8013a78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013a7c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8013a7e:	687b      	ldr	r3, [r7, #4]
 8013a80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013a84:	2b00      	cmp	r3, #0
 8013a86:	d017      	beq.n	8013ab8 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013a88:	687b      	ldr	r3, [r7, #4]
 8013a8a:	7c1b      	ldrb	r3, [r3, #16]
 8013a8c:	2b00      	cmp	r3, #0
 8013a8e:	d109      	bne.n	8013aa4 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8013a90:	68fb      	ldr	r3, [r7, #12]
 8013a92:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8013a96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013a9a:	2101      	movs	r1, #1
 8013a9c:	6878      	ldr	r0, [r7, #4]
 8013a9e:	f01b fe02 	bl	802f6a6 <USBD_LL_PrepareReceive>
 8013aa2:	e007      	b.n	8013ab4 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8013aa4:	68fb      	ldr	r3, [r7, #12]
 8013aa6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8013aaa:	2340      	movs	r3, #64	; 0x40
 8013aac:	2101      	movs	r1, #1
 8013aae:	6878      	ldr	r0, [r7, #4]
 8013ab0:	f01b fdf9 	bl	802f6a6 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8013ab4:	2300      	movs	r3, #0
 8013ab6:	e000      	b.n	8013aba <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8013ab8:	2302      	movs	r3, #2
  }
}
 8013aba:	4618      	mov	r0, r3
 8013abc:	3710      	adds	r7, #16
 8013abe:	46bd      	mov	sp, r7
 8013ac0:	bd80      	pop	{r7, pc}

08013ac2 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8013ac2:	b580      	push	{r7, lr}
 8013ac4:	b084      	sub	sp, #16
 8013ac6:	af00      	add	r7, sp, #0
 8013ac8:	60f8      	str	r0, [r7, #12]
 8013aca:	60b9      	str	r1, [r7, #8]
 8013acc:	4613      	mov	r3, r2
 8013ace:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8013ad0:	68fb      	ldr	r3, [r7, #12]
 8013ad2:	2b00      	cmp	r3, #0
 8013ad4:	d101      	bne.n	8013ada <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8013ad6:	2302      	movs	r3, #2
 8013ad8:	e01a      	b.n	8013b10 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8013ada:	68fb      	ldr	r3, [r7, #12]
 8013adc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013ae0:	2b00      	cmp	r3, #0
 8013ae2:	d003      	beq.n	8013aec <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8013ae4:	68fb      	ldr	r3, [r7, #12]
 8013ae6:	2200      	movs	r2, #0
 8013ae8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8013aec:	68bb      	ldr	r3, [r7, #8]
 8013aee:	2b00      	cmp	r3, #0
 8013af0:	d003      	beq.n	8013afa <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8013af2:	68fb      	ldr	r3, [r7, #12]
 8013af4:	68ba      	ldr	r2, [r7, #8]
 8013af6:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013afa:	68fb      	ldr	r3, [r7, #12]
 8013afc:	2201      	movs	r2, #1
 8013afe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8013b02:	68fb      	ldr	r3, [r7, #12]
 8013b04:	79fa      	ldrb	r2, [r7, #7]
 8013b06:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8013b08:	68f8      	ldr	r0, [r7, #12]
 8013b0a:	f01b fc65 	bl	802f3d8 <USBD_LL_Init>

  return USBD_OK;
 8013b0e:	2300      	movs	r3, #0
}
 8013b10:	4618      	mov	r0, r3
 8013b12:	3710      	adds	r7, #16
 8013b14:	46bd      	mov	sp, r7
 8013b16:	bd80      	pop	{r7, pc}

08013b18 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8013b18:	b480      	push	{r7}
 8013b1a:	b085      	sub	sp, #20
 8013b1c:	af00      	add	r7, sp, #0
 8013b1e:	6078      	str	r0, [r7, #4]
 8013b20:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8013b22:	2300      	movs	r3, #0
 8013b24:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8013b26:	683b      	ldr	r3, [r7, #0]
 8013b28:	2b00      	cmp	r3, #0
 8013b2a:	d006      	beq.n	8013b3a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8013b2c:	687b      	ldr	r3, [r7, #4]
 8013b2e:	683a      	ldr	r2, [r7, #0]
 8013b30:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8013b34:	2300      	movs	r3, #0
 8013b36:	73fb      	strb	r3, [r7, #15]
 8013b38:	e001      	b.n	8013b3e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8013b3a:	2302      	movs	r3, #2
 8013b3c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8013b3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013b40:	4618      	mov	r0, r3
 8013b42:	3714      	adds	r7, #20
 8013b44:	46bd      	mov	sp, r7
 8013b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b4a:	4770      	bx	lr

08013b4c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8013b4c:	b580      	push	{r7, lr}
 8013b4e:	b082      	sub	sp, #8
 8013b50:	af00      	add	r7, sp, #0
 8013b52:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8013b54:	6878      	ldr	r0, [r7, #4]
 8013b56:	f01b fc99 	bl	802f48c <USBD_LL_Start>

  return USBD_OK;
 8013b5a:	2300      	movs	r3, #0
}
 8013b5c:	4618      	mov	r0, r3
 8013b5e:	3708      	adds	r7, #8
 8013b60:	46bd      	mov	sp, r7
 8013b62:	bd80      	pop	{r7, pc}

08013b64 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8013b64:	b480      	push	{r7}
 8013b66:	b083      	sub	sp, #12
 8013b68:	af00      	add	r7, sp, #0
 8013b6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8013b6c:	2300      	movs	r3, #0
}
 8013b6e:	4618      	mov	r0, r3
 8013b70:	370c      	adds	r7, #12
 8013b72:	46bd      	mov	sp, r7
 8013b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b78:	4770      	bx	lr

08013b7a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8013b7a:	b580      	push	{r7, lr}
 8013b7c:	b084      	sub	sp, #16
 8013b7e:	af00      	add	r7, sp, #0
 8013b80:	6078      	str	r0, [r7, #4]
 8013b82:	460b      	mov	r3, r1
 8013b84:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8013b86:	2302      	movs	r3, #2
 8013b88:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8013b8a:	687b      	ldr	r3, [r7, #4]
 8013b8c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013b90:	2b00      	cmp	r3, #0
 8013b92:	d00c      	beq.n	8013bae <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8013b94:	687b      	ldr	r3, [r7, #4]
 8013b96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013b9a:	681b      	ldr	r3, [r3, #0]
 8013b9c:	78fa      	ldrb	r2, [r7, #3]
 8013b9e:	4611      	mov	r1, r2
 8013ba0:	6878      	ldr	r0, [r7, #4]
 8013ba2:	4798      	blx	r3
 8013ba4:	4603      	mov	r3, r0
 8013ba6:	2b00      	cmp	r3, #0
 8013ba8:	d101      	bne.n	8013bae <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8013baa:	2300      	movs	r3, #0
 8013bac:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8013bae:	7bfb      	ldrb	r3, [r7, #15]
}
 8013bb0:	4618      	mov	r0, r3
 8013bb2:	3710      	adds	r7, #16
 8013bb4:	46bd      	mov	sp, r7
 8013bb6:	bd80      	pop	{r7, pc}

08013bb8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8013bb8:	b580      	push	{r7, lr}
 8013bba:	b082      	sub	sp, #8
 8013bbc:	af00      	add	r7, sp, #0
 8013bbe:	6078      	str	r0, [r7, #4]
 8013bc0:	460b      	mov	r3, r1
 8013bc2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8013bc4:	687b      	ldr	r3, [r7, #4]
 8013bc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013bca:	685b      	ldr	r3, [r3, #4]
 8013bcc:	78fa      	ldrb	r2, [r7, #3]
 8013bce:	4611      	mov	r1, r2
 8013bd0:	6878      	ldr	r0, [r7, #4]
 8013bd2:	4798      	blx	r3

  return USBD_OK;
 8013bd4:	2300      	movs	r3, #0
}
 8013bd6:	4618      	mov	r0, r3
 8013bd8:	3708      	adds	r7, #8
 8013bda:	46bd      	mov	sp, r7
 8013bdc:	bd80      	pop	{r7, pc}

08013bde <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8013bde:	b580      	push	{r7, lr}
 8013be0:	b082      	sub	sp, #8
 8013be2:	af00      	add	r7, sp, #0
 8013be4:	6078      	str	r0, [r7, #4]
 8013be6:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8013be8:	687b      	ldr	r3, [r7, #4]
 8013bea:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8013bee:	6839      	ldr	r1, [r7, #0]
 8013bf0:	4618      	mov	r0, r3
 8013bf2:	f000 feda 	bl	80149aa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	2201      	movs	r2, #1
 8013bfa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8013bfe:	687b      	ldr	r3, [r7, #4]
 8013c00:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8013c04:	461a      	mov	r2, r3
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8013c12:	f003 031f 	and.w	r3, r3, #31
 8013c16:	2b02      	cmp	r3, #2
 8013c18:	d016      	beq.n	8013c48 <USBD_LL_SetupStage+0x6a>
 8013c1a:	2b02      	cmp	r3, #2
 8013c1c:	d81c      	bhi.n	8013c58 <USBD_LL_SetupStage+0x7a>
 8013c1e:	2b00      	cmp	r3, #0
 8013c20:	d002      	beq.n	8013c28 <USBD_LL_SetupStage+0x4a>
 8013c22:	2b01      	cmp	r3, #1
 8013c24:	d008      	beq.n	8013c38 <USBD_LL_SetupStage+0x5a>
 8013c26:	e017      	b.n	8013c58 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8013c28:	687b      	ldr	r3, [r7, #4]
 8013c2a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8013c2e:	4619      	mov	r1, r3
 8013c30:	6878      	ldr	r0, [r7, #4]
 8013c32:	f000 f9cd 	bl	8013fd0 <USBD_StdDevReq>
      break;
 8013c36:	e01a      	b.n	8013c6e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8013c38:	687b      	ldr	r3, [r7, #4]
 8013c3a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8013c3e:	4619      	mov	r1, r3
 8013c40:	6878      	ldr	r0, [r7, #4]
 8013c42:	f000 fa2f 	bl	80140a4 <USBD_StdItfReq>
      break;
 8013c46:	e012      	b.n	8013c6e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8013c48:	687b      	ldr	r3, [r7, #4]
 8013c4a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8013c4e:	4619      	mov	r1, r3
 8013c50:	6878      	ldr	r0, [r7, #4]
 8013c52:	f000 fa6f 	bl	8014134 <USBD_StdEPReq>
      break;
 8013c56:	e00a      	b.n	8013c6e <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8013c58:	687b      	ldr	r3, [r7, #4]
 8013c5a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8013c5e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8013c62:	b2db      	uxtb	r3, r3
 8013c64:	4619      	mov	r1, r3
 8013c66:	6878      	ldr	r0, [r7, #4]
 8013c68:	f01b fc70 	bl	802f54c <USBD_LL_StallEP>
      break;
 8013c6c:	bf00      	nop
  }

  return USBD_OK;
 8013c6e:	2300      	movs	r3, #0
}
 8013c70:	4618      	mov	r0, r3
 8013c72:	3708      	adds	r7, #8
 8013c74:	46bd      	mov	sp, r7
 8013c76:	bd80      	pop	{r7, pc}

08013c78 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8013c78:	b580      	push	{r7, lr}
 8013c7a:	b086      	sub	sp, #24
 8013c7c:	af00      	add	r7, sp, #0
 8013c7e:	60f8      	str	r0, [r7, #12]
 8013c80:	460b      	mov	r3, r1
 8013c82:	607a      	str	r2, [r7, #4]
 8013c84:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8013c86:	7afb      	ldrb	r3, [r7, #11]
 8013c88:	2b00      	cmp	r3, #0
 8013c8a:	d14b      	bne.n	8013d24 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8013c8c:	68fb      	ldr	r3, [r7, #12]
 8013c8e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8013c92:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8013c94:	68fb      	ldr	r3, [r7, #12]
 8013c96:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8013c9a:	2b03      	cmp	r3, #3
 8013c9c:	d134      	bne.n	8013d08 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8013c9e:	697b      	ldr	r3, [r7, #20]
 8013ca0:	68da      	ldr	r2, [r3, #12]
 8013ca2:	697b      	ldr	r3, [r7, #20]
 8013ca4:	691b      	ldr	r3, [r3, #16]
 8013ca6:	429a      	cmp	r2, r3
 8013ca8:	d919      	bls.n	8013cde <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8013caa:	697b      	ldr	r3, [r7, #20]
 8013cac:	68da      	ldr	r2, [r3, #12]
 8013cae:	697b      	ldr	r3, [r7, #20]
 8013cb0:	691b      	ldr	r3, [r3, #16]
 8013cb2:	1ad2      	subs	r2, r2, r3
 8013cb4:	697b      	ldr	r3, [r7, #20]
 8013cb6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8013cb8:	697b      	ldr	r3, [r7, #20]
 8013cba:	68da      	ldr	r2, [r3, #12]
 8013cbc:	697b      	ldr	r3, [r7, #20]
 8013cbe:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8013cc0:	429a      	cmp	r2, r3
 8013cc2:	d203      	bcs.n	8013ccc <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8013cc4:	697b      	ldr	r3, [r7, #20]
 8013cc6:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8013cc8:	b29b      	uxth	r3, r3
 8013cca:	e002      	b.n	8013cd2 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8013ccc:	697b      	ldr	r3, [r7, #20]
 8013cce:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8013cd0:	b29b      	uxth	r3, r3
 8013cd2:	461a      	mov	r2, r3
 8013cd4:	6879      	ldr	r1, [r7, #4]
 8013cd6:	68f8      	ldr	r0, [r7, #12]
 8013cd8:	f000 ff5b 	bl	8014b92 <USBD_CtlContinueRx>
 8013cdc:	e038      	b.n	8013d50 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8013cde:	68fb      	ldr	r3, [r7, #12]
 8013ce0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013ce4:	691b      	ldr	r3, [r3, #16]
 8013ce6:	2b00      	cmp	r3, #0
 8013ce8:	d00a      	beq.n	8013d00 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8013cea:	68fb      	ldr	r3, [r7, #12]
 8013cec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8013cf0:	2b03      	cmp	r3, #3
 8013cf2:	d105      	bne.n	8013d00 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8013cf4:	68fb      	ldr	r3, [r7, #12]
 8013cf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013cfa:	691b      	ldr	r3, [r3, #16]
 8013cfc:	68f8      	ldr	r0, [r7, #12]
 8013cfe:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8013d00:	68f8      	ldr	r0, [r7, #12]
 8013d02:	f000 ff58 	bl	8014bb6 <USBD_CtlSendStatus>
 8013d06:	e023      	b.n	8013d50 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8013d08:	68fb      	ldr	r3, [r7, #12]
 8013d0a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8013d0e:	2b05      	cmp	r3, #5
 8013d10:	d11e      	bne.n	8013d50 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8013d12:	68fb      	ldr	r3, [r7, #12]
 8013d14:	2200      	movs	r2, #0
 8013d16:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8013d1a:	2100      	movs	r1, #0
 8013d1c:	68f8      	ldr	r0, [r7, #12]
 8013d1e:	f01b fc15 	bl	802f54c <USBD_LL_StallEP>
 8013d22:	e015      	b.n	8013d50 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8013d24:	68fb      	ldr	r3, [r7, #12]
 8013d26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013d2a:	699b      	ldr	r3, [r3, #24]
 8013d2c:	2b00      	cmp	r3, #0
 8013d2e:	d00d      	beq.n	8013d4c <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8013d30:	68fb      	ldr	r3, [r7, #12]
 8013d32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8013d36:	2b03      	cmp	r3, #3
 8013d38:	d108      	bne.n	8013d4c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8013d3a:	68fb      	ldr	r3, [r7, #12]
 8013d3c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013d40:	699b      	ldr	r3, [r3, #24]
 8013d42:	7afa      	ldrb	r2, [r7, #11]
 8013d44:	4611      	mov	r1, r2
 8013d46:	68f8      	ldr	r0, [r7, #12]
 8013d48:	4798      	blx	r3
 8013d4a:	e001      	b.n	8013d50 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8013d4c:	2302      	movs	r3, #2
 8013d4e:	e000      	b.n	8013d52 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8013d50:	2300      	movs	r3, #0
}
 8013d52:	4618      	mov	r0, r3
 8013d54:	3718      	adds	r7, #24
 8013d56:	46bd      	mov	sp, r7
 8013d58:	bd80      	pop	{r7, pc}

08013d5a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8013d5a:	b580      	push	{r7, lr}
 8013d5c:	b086      	sub	sp, #24
 8013d5e:	af00      	add	r7, sp, #0
 8013d60:	60f8      	str	r0, [r7, #12]
 8013d62:	460b      	mov	r3, r1
 8013d64:	607a      	str	r2, [r7, #4]
 8013d66:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8013d68:	7afb      	ldrb	r3, [r7, #11]
 8013d6a:	2b00      	cmp	r3, #0
 8013d6c:	d17f      	bne.n	8013e6e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8013d6e:	68fb      	ldr	r3, [r7, #12]
 8013d70:	3314      	adds	r3, #20
 8013d72:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8013d74:	68fb      	ldr	r3, [r7, #12]
 8013d76:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8013d7a:	2b02      	cmp	r3, #2
 8013d7c:	d15c      	bne.n	8013e38 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8013d7e:	697b      	ldr	r3, [r7, #20]
 8013d80:	68da      	ldr	r2, [r3, #12]
 8013d82:	697b      	ldr	r3, [r7, #20]
 8013d84:	691b      	ldr	r3, [r3, #16]
 8013d86:	429a      	cmp	r2, r3
 8013d88:	d915      	bls.n	8013db6 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8013d8a:	697b      	ldr	r3, [r7, #20]
 8013d8c:	68da      	ldr	r2, [r3, #12]
 8013d8e:	697b      	ldr	r3, [r7, #20]
 8013d90:	691b      	ldr	r3, [r3, #16]
 8013d92:	1ad2      	subs	r2, r2, r3
 8013d94:	697b      	ldr	r3, [r7, #20]
 8013d96:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8013d98:	697b      	ldr	r3, [r7, #20]
 8013d9a:	68db      	ldr	r3, [r3, #12]
 8013d9c:	b29b      	uxth	r3, r3
 8013d9e:	461a      	mov	r2, r3
 8013da0:	6879      	ldr	r1, [r7, #4]
 8013da2:	68f8      	ldr	r0, [r7, #12]
 8013da4:	f000 fec5 	bl	8014b32 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013da8:	2300      	movs	r3, #0
 8013daa:	2200      	movs	r2, #0
 8013dac:	2100      	movs	r1, #0
 8013dae:	68f8      	ldr	r0, [r7, #12]
 8013db0:	f01b fc79 	bl	802f6a6 <USBD_LL_PrepareReceive>
 8013db4:	e04e      	b.n	8013e54 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8013db6:	697b      	ldr	r3, [r7, #20]
 8013db8:	689b      	ldr	r3, [r3, #8]
 8013dba:	697a      	ldr	r2, [r7, #20]
 8013dbc:	6912      	ldr	r2, [r2, #16]
 8013dbe:	fbb3 f1f2 	udiv	r1, r3, r2
 8013dc2:	fb01 f202 	mul.w	r2, r1, r2
 8013dc6:	1a9b      	subs	r3, r3, r2
 8013dc8:	2b00      	cmp	r3, #0
 8013dca:	d11c      	bne.n	8013e06 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8013dcc:	697b      	ldr	r3, [r7, #20]
 8013dce:	689a      	ldr	r2, [r3, #8]
 8013dd0:	697b      	ldr	r3, [r7, #20]
 8013dd2:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8013dd4:	429a      	cmp	r2, r3
 8013dd6:	d316      	bcc.n	8013e06 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8013dd8:	697b      	ldr	r3, [r7, #20]
 8013dda:	689a      	ldr	r2, [r3, #8]
 8013ddc:	68fb      	ldr	r3, [r7, #12]
 8013dde:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8013de2:	429a      	cmp	r2, r3
 8013de4:	d20f      	bcs.n	8013e06 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8013de6:	2200      	movs	r2, #0
 8013de8:	2100      	movs	r1, #0
 8013dea:	68f8      	ldr	r0, [r7, #12]
 8013dec:	f000 fea1 	bl	8014b32 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8013df0:	68fb      	ldr	r3, [r7, #12]
 8013df2:	2200      	movs	r2, #0
 8013df4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013df8:	2300      	movs	r3, #0
 8013dfa:	2200      	movs	r2, #0
 8013dfc:	2100      	movs	r1, #0
 8013dfe:	68f8      	ldr	r0, [r7, #12]
 8013e00:	f01b fc51 	bl	802f6a6 <USBD_LL_PrepareReceive>
 8013e04:	e026      	b.n	8013e54 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8013e06:	68fb      	ldr	r3, [r7, #12]
 8013e08:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013e0c:	68db      	ldr	r3, [r3, #12]
 8013e0e:	2b00      	cmp	r3, #0
 8013e10:	d00a      	beq.n	8013e28 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8013e12:	68fb      	ldr	r3, [r7, #12]
 8013e14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8013e18:	2b03      	cmp	r3, #3
 8013e1a:	d105      	bne.n	8013e28 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8013e1c:	68fb      	ldr	r3, [r7, #12]
 8013e1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013e22:	68db      	ldr	r3, [r3, #12]
 8013e24:	68f8      	ldr	r0, [r7, #12]
 8013e26:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8013e28:	2180      	movs	r1, #128	; 0x80
 8013e2a:	68f8      	ldr	r0, [r7, #12]
 8013e2c:	f01b fb8e 	bl	802f54c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8013e30:	68f8      	ldr	r0, [r7, #12]
 8013e32:	f000 fed3 	bl	8014bdc <USBD_CtlReceiveStatus>
 8013e36:	e00d      	b.n	8013e54 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8013e38:	68fb      	ldr	r3, [r7, #12]
 8013e3a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8013e3e:	2b04      	cmp	r3, #4
 8013e40:	d004      	beq.n	8013e4c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8013e42:	68fb      	ldr	r3, [r7, #12]
 8013e44:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8013e48:	2b00      	cmp	r3, #0
 8013e4a:	d103      	bne.n	8013e54 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8013e4c:	2180      	movs	r1, #128	; 0x80
 8013e4e:	68f8      	ldr	r0, [r7, #12]
 8013e50:	f01b fb7c 	bl	802f54c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8013e54:	68fb      	ldr	r3, [r7, #12]
 8013e56:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8013e5a:	2b01      	cmp	r3, #1
 8013e5c:	d11d      	bne.n	8013e9a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8013e5e:	68f8      	ldr	r0, [r7, #12]
 8013e60:	f7ff fe80 	bl	8013b64 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8013e64:	68fb      	ldr	r3, [r7, #12]
 8013e66:	2200      	movs	r2, #0
 8013e68:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8013e6c:	e015      	b.n	8013e9a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8013e6e:	68fb      	ldr	r3, [r7, #12]
 8013e70:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013e74:	695b      	ldr	r3, [r3, #20]
 8013e76:	2b00      	cmp	r3, #0
 8013e78:	d00d      	beq.n	8013e96 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8013e7a:	68fb      	ldr	r3, [r7, #12]
 8013e7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8013e80:	2b03      	cmp	r3, #3
 8013e82:	d108      	bne.n	8013e96 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8013e84:	68fb      	ldr	r3, [r7, #12]
 8013e86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013e8a:	695b      	ldr	r3, [r3, #20]
 8013e8c:	7afa      	ldrb	r2, [r7, #11]
 8013e8e:	4611      	mov	r1, r2
 8013e90:	68f8      	ldr	r0, [r7, #12]
 8013e92:	4798      	blx	r3
 8013e94:	e001      	b.n	8013e9a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8013e96:	2302      	movs	r3, #2
 8013e98:	e000      	b.n	8013e9c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8013e9a:	2300      	movs	r3, #0
}
 8013e9c:	4618      	mov	r0, r3
 8013e9e:	3718      	adds	r7, #24
 8013ea0:	46bd      	mov	sp, r7
 8013ea2:	bd80      	pop	{r7, pc}

08013ea4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8013ea4:	b580      	push	{r7, lr}
 8013ea6:	b082      	sub	sp, #8
 8013ea8:	af00      	add	r7, sp, #0
 8013eaa:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8013eac:	2340      	movs	r3, #64	; 0x40
 8013eae:	2200      	movs	r2, #0
 8013eb0:	2100      	movs	r1, #0
 8013eb2:	6878      	ldr	r0, [r7, #4]
 8013eb4:	f01b fb05 	bl	802f4c2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8013eb8:	687b      	ldr	r3, [r7, #4]
 8013eba:	2201      	movs	r2, #1
 8013ebc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8013ec0:	687b      	ldr	r3, [r7, #4]
 8013ec2:	2240      	movs	r2, #64	; 0x40
 8013ec4:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8013ec8:	2340      	movs	r3, #64	; 0x40
 8013eca:	2200      	movs	r2, #0
 8013ecc:	2180      	movs	r1, #128	; 0x80
 8013ece:	6878      	ldr	r0, [r7, #4]
 8013ed0:	f01b faf7 	bl	802f4c2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8013ed4:	687b      	ldr	r3, [r7, #4]
 8013ed6:	2201      	movs	r2, #1
 8013ed8:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8013eda:	687b      	ldr	r3, [r7, #4]
 8013edc:	2240      	movs	r2, #64	; 0x40
 8013ede:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013ee0:	687b      	ldr	r3, [r7, #4]
 8013ee2:	2201      	movs	r2, #1
 8013ee4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8013ee8:	687b      	ldr	r3, [r7, #4]
 8013eea:	2200      	movs	r2, #0
 8013eec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8013ef0:	687b      	ldr	r3, [r7, #4]
 8013ef2:	2200      	movs	r2, #0
 8013ef4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8013ef6:	687b      	ldr	r3, [r7, #4]
 8013ef8:	2200      	movs	r2, #0
 8013efa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8013efe:	687b      	ldr	r3, [r7, #4]
 8013f00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013f04:	2b00      	cmp	r3, #0
 8013f06:	d009      	beq.n	8013f1c <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8013f08:	687b      	ldr	r3, [r7, #4]
 8013f0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013f0e:	685b      	ldr	r3, [r3, #4]
 8013f10:	687a      	ldr	r2, [r7, #4]
 8013f12:	6852      	ldr	r2, [r2, #4]
 8013f14:	b2d2      	uxtb	r2, r2
 8013f16:	4611      	mov	r1, r2
 8013f18:	6878      	ldr	r0, [r7, #4]
 8013f1a:	4798      	blx	r3
  }

  return USBD_OK;
 8013f1c:	2300      	movs	r3, #0
}
 8013f1e:	4618      	mov	r0, r3
 8013f20:	3708      	adds	r7, #8
 8013f22:	46bd      	mov	sp, r7
 8013f24:	bd80      	pop	{r7, pc}

08013f26 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8013f26:	b480      	push	{r7}
 8013f28:	b083      	sub	sp, #12
 8013f2a:	af00      	add	r7, sp, #0
 8013f2c:	6078      	str	r0, [r7, #4]
 8013f2e:	460b      	mov	r3, r1
 8013f30:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8013f32:	687b      	ldr	r3, [r7, #4]
 8013f34:	78fa      	ldrb	r2, [r7, #3]
 8013f36:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8013f38:	2300      	movs	r3, #0
}
 8013f3a:	4618      	mov	r0, r3
 8013f3c:	370c      	adds	r7, #12
 8013f3e:	46bd      	mov	sp, r7
 8013f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f44:	4770      	bx	lr

08013f46 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8013f46:	b480      	push	{r7}
 8013f48:	b083      	sub	sp, #12
 8013f4a:	af00      	add	r7, sp, #0
 8013f4c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8013f4e:	687b      	ldr	r3, [r7, #4]
 8013f50:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8013f54:	687b      	ldr	r3, [r7, #4]
 8013f56:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8013f5a:	687b      	ldr	r3, [r7, #4]
 8013f5c:	2204      	movs	r2, #4
 8013f5e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8013f62:	2300      	movs	r3, #0
}
 8013f64:	4618      	mov	r0, r3
 8013f66:	370c      	adds	r7, #12
 8013f68:	46bd      	mov	sp, r7
 8013f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f6e:	4770      	bx	lr

08013f70 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8013f70:	b480      	push	{r7}
 8013f72:	b083      	sub	sp, #12
 8013f74:	af00      	add	r7, sp, #0
 8013f76:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8013f78:	687b      	ldr	r3, [r7, #4]
 8013f7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013f7e:	2b04      	cmp	r3, #4
 8013f80:	d105      	bne.n	8013f8e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8013f82:	687b      	ldr	r3, [r7, #4]
 8013f84:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8013f88:	687b      	ldr	r3, [r7, #4]
 8013f8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8013f8e:	2300      	movs	r3, #0
}
 8013f90:	4618      	mov	r0, r3
 8013f92:	370c      	adds	r7, #12
 8013f94:	46bd      	mov	sp, r7
 8013f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f9a:	4770      	bx	lr

08013f9c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8013f9c:	b580      	push	{r7, lr}
 8013f9e:	b082      	sub	sp, #8
 8013fa0:	af00      	add	r7, sp, #0
 8013fa2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013faa:	2b03      	cmp	r3, #3
 8013fac:	d10b      	bne.n	8013fc6 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8013fae:	687b      	ldr	r3, [r7, #4]
 8013fb0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013fb4:	69db      	ldr	r3, [r3, #28]
 8013fb6:	2b00      	cmp	r3, #0
 8013fb8:	d005      	beq.n	8013fc6 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8013fba:	687b      	ldr	r3, [r7, #4]
 8013fbc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013fc0:	69db      	ldr	r3, [r3, #28]
 8013fc2:	6878      	ldr	r0, [r7, #4]
 8013fc4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8013fc6:	2300      	movs	r3, #0
}
 8013fc8:	4618      	mov	r0, r3
 8013fca:	3708      	adds	r7, #8
 8013fcc:	46bd      	mov	sp, r7
 8013fce:	bd80      	pop	{r7, pc}

08013fd0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8013fd0:	b580      	push	{r7, lr}
 8013fd2:	b084      	sub	sp, #16
 8013fd4:	af00      	add	r7, sp, #0
 8013fd6:	6078      	str	r0, [r7, #4]
 8013fd8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8013fda:	2300      	movs	r3, #0
 8013fdc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013fde:	683b      	ldr	r3, [r7, #0]
 8013fe0:	781b      	ldrb	r3, [r3, #0]
 8013fe2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013fe6:	2b40      	cmp	r3, #64	; 0x40
 8013fe8:	d005      	beq.n	8013ff6 <USBD_StdDevReq+0x26>
 8013fea:	2b40      	cmp	r3, #64	; 0x40
 8013fec:	d84f      	bhi.n	801408e <USBD_StdDevReq+0xbe>
 8013fee:	2b00      	cmp	r3, #0
 8013ff0:	d009      	beq.n	8014006 <USBD_StdDevReq+0x36>
 8013ff2:	2b20      	cmp	r3, #32
 8013ff4:	d14b      	bne.n	801408e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8013ff6:	687b      	ldr	r3, [r7, #4]
 8013ff8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013ffc:	689b      	ldr	r3, [r3, #8]
 8013ffe:	6839      	ldr	r1, [r7, #0]
 8014000:	6878      	ldr	r0, [r7, #4]
 8014002:	4798      	blx	r3
      break;
 8014004:	e048      	b.n	8014098 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8014006:	683b      	ldr	r3, [r7, #0]
 8014008:	785b      	ldrb	r3, [r3, #1]
 801400a:	2b09      	cmp	r3, #9
 801400c:	d839      	bhi.n	8014082 <USBD_StdDevReq+0xb2>
 801400e:	a201      	add	r2, pc, #4	; (adr r2, 8014014 <USBD_StdDevReq+0x44>)
 8014010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014014:	08014065 	.word	0x08014065
 8014018:	08014079 	.word	0x08014079
 801401c:	08014083 	.word	0x08014083
 8014020:	0801406f 	.word	0x0801406f
 8014024:	08014083 	.word	0x08014083
 8014028:	08014047 	.word	0x08014047
 801402c:	0801403d 	.word	0x0801403d
 8014030:	08014083 	.word	0x08014083
 8014034:	0801405b 	.word	0x0801405b
 8014038:	08014051 	.word	0x08014051
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801403c:	6839      	ldr	r1, [r7, #0]
 801403e:	6878      	ldr	r0, [r7, #4]
 8014040:	f000 f9dc 	bl	80143fc <USBD_GetDescriptor>
          break;
 8014044:	e022      	b.n	801408c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8014046:	6839      	ldr	r1, [r7, #0]
 8014048:	6878      	ldr	r0, [r7, #4]
 801404a:	f000 fb3f 	bl	80146cc <USBD_SetAddress>
          break;
 801404e:	e01d      	b.n	801408c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8014050:	6839      	ldr	r1, [r7, #0]
 8014052:	6878      	ldr	r0, [r7, #4]
 8014054:	f000 fb7e 	bl	8014754 <USBD_SetConfig>
          break;
 8014058:	e018      	b.n	801408c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801405a:	6839      	ldr	r1, [r7, #0]
 801405c:	6878      	ldr	r0, [r7, #4]
 801405e:	f000 fc07 	bl	8014870 <USBD_GetConfig>
          break;
 8014062:	e013      	b.n	801408c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8014064:	6839      	ldr	r1, [r7, #0]
 8014066:	6878      	ldr	r0, [r7, #4]
 8014068:	f000 fc37 	bl	80148da <USBD_GetStatus>
          break;
 801406c:	e00e      	b.n	801408c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801406e:	6839      	ldr	r1, [r7, #0]
 8014070:	6878      	ldr	r0, [r7, #4]
 8014072:	f000 fc65 	bl	8014940 <USBD_SetFeature>
          break;
 8014076:	e009      	b.n	801408c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8014078:	6839      	ldr	r1, [r7, #0]
 801407a:	6878      	ldr	r0, [r7, #4]
 801407c:	f000 fc74 	bl	8014968 <USBD_ClrFeature>
          break;
 8014080:	e004      	b.n	801408c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8014082:	6839      	ldr	r1, [r7, #0]
 8014084:	6878      	ldr	r0, [r7, #4]
 8014086:	f000 fccd 	bl	8014a24 <USBD_CtlError>
          break;
 801408a:	bf00      	nop
      }
      break;
 801408c:	e004      	b.n	8014098 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 801408e:	6839      	ldr	r1, [r7, #0]
 8014090:	6878      	ldr	r0, [r7, #4]
 8014092:	f000 fcc7 	bl	8014a24 <USBD_CtlError>
      break;
 8014096:	bf00      	nop
  }

  return ret;
 8014098:	7bfb      	ldrb	r3, [r7, #15]
}
 801409a:	4618      	mov	r0, r3
 801409c:	3710      	adds	r7, #16
 801409e:	46bd      	mov	sp, r7
 80140a0:	bd80      	pop	{r7, pc}
 80140a2:	bf00      	nop

080140a4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80140a4:	b580      	push	{r7, lr}
 80140a6:	b084      	sub	sp, #16
 80140a8:	af00      	add	r7, sp, #0
 80140aa:	6078      	str	r0, [r7, #4]
 80140ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80140ae:	2300      	movs	r3, #0
 80140b0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80140b2:	683b      	ldr	r3, [r7, #0]
 80140b4:	781b      	ldrb	r3, [r3, #0]
 80140b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80140ba:	2b40      	cmp	r3, #64	; 0x40
 80140bc:	d005      	beq.n	80140ca <USBD_StdItfReq+0x26>
 80140be:	2b40      	cmp	r3, #64	; 0x40
 80140c0:	d82e      	bhi.n	8014120 <USBD_StdItfReq+0x7c>
 80140c2:	2b00      	cmp	r3, #0
 80140c4:	d001      	beq.n	80140ca <USBD_StdItfReq+0x26>
 80140c6:	2b20      	cmp	r3, #32
 80140c8:	d12a      	bne.n	8014120 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80140ca:	687b      	ldr	r3, [r7, #4]
 80140cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80140d0:	3b01      	subs	r3, #1
 80140d2:	2b02      	cmp	r3, #2
 80140d4:	d81d      	bhi.n	8014112 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80140d6:	683b      	ldr	r3, [r7, #0]
 80140d8:	889b      	ldrh	r3, [r3, #4]
 80140da:	b2db      	uxtb	r3, r3
 80140dc:	2b01      	cmp	r3, #1
 80140de:	d813      	bhi.n	8014108 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80140e0:	687b      	ldr	r3, [r7, #4]
 80140e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80140e6:	689b      	ldr	r3, [r3, #8]
 80140e8:	6839      	ldr	r1, [r7, #0]
 80140ea:	6878      	ldr	r0, [r7, #4]
 80140ec:	4798      	blx	r3
 80140ee:	4603      	mov	r3, r0
 80140f0:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80140f2:	683b      	ldr	r3, [r7, #0]
 80140f4:	88db      	ldrh	r3, [r3, #6]
 80140f6:	2b00      	cmp	r3, #0
 80140f8:	d110      	bne.n	801411c <USBD_StdItfReq+0x78>
 80140fa:	7bfb      	ldrb	r3, [r7, #15]
 80140fc:	2b00      	cmp	r3, #0
 80140fe:	d10d      	bne.n	801411c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8014100:	6878      	ldr	r0, [r7, #4]
 8014102:	f000 fd58 	bl	8014bb6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8014106:	e009      	b.n	801411c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8014108:	6839      	ldr	r1, [r7, #0]
 801410a:	6878      	ldr	r0, [r7, #4]
 801410c:	f000 fc8a 	bl	8014a24 <USBD_CtlError>
          break;
 8014110:	e004      	b.n	801411c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8014112:	6839      	ldr	r1, [r7, #0]
 8014114:	6878      	ldr	r0, [r7, #4]
 8014116:	f000 fc85 	bl	8014a24 <USBD_CtlError>
          break;
 801411a:	e000      	b.n	801411e <USBD_StdItfReq+0x7a>
          break;
 801411c:	bf00      	nop
      }
      break;
 801411e:	e004      	b.n	801412a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8014120:	6839      	ldr	r1, [r7, #0]
 8014122:	6878      	ldr	r0, [r7, #4]
 8014124:	f000 fc7e 	bl	8014a24 <USBD_CtlError>
      break;
 8014128:	bf00      	nop
  }

  return USBD_OK;
 801412a:	2300      	movs	r3, #0
}
 801412c:	4618      	mov	r0, r3
 801412e:	3710      	adds	r7, #16
 8014130:	46bd      	mov	sp, r7
 8014132:	bd80      	pop	{r7, pc}

08014134 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8014134:	b580      	push	{r7, lr}
 8014136:	b084      	sub	sp, #16
 8014138:	af00      	add	r7, sp, #0
 801413a:	6078      	str	r0, [r7, #4]
 801413c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 801413e:	2300      	movs	r3, #0
 8014140:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8014142:	683b      	ldr	r3, [r7, #0]
 8014144:	889b      	ldrh	r3, [r3, #4]
 8014146:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014148:	683b      	ldr	r3, [r7, #0]
 801414a:	781b      	ldrb	r3, [r3, #0]
 801414c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014150:	2b40      	cmp	r3, #64	; 0x40
 8014152:	d007      	beq.n	8014164 <USBD_StdEPReq+0x30>
 8014154:	2b40      	cmp	r3, #64	; 0x40
 8014156:	f200 8146 	bhi.w	80143e6 <USBD_StdEPReq+0x2b2>
 801415a:	2b00      	cmp	r3, #0
 801415c:	d00a      	beq.n	8014174 <USBD_StdEPReq+0x40>
 801415e:	2b20      	cmp	r3, #32
 8014160:	f040 8141 	bne.w	80143e6 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8014164:	687b      	ldr	r3, [r7, #4]
 8014166:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801416a:	689b      	ldr	r3, [r3, #8]
 801416c:	6839      	ldr	r1, [r7, #0]
 801416e:	6878      	ldr	r0, [r7, #4]
 8014170:	4798      	blx	r3
      break;
 8014172:	e13d      	b.n	80143f0 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8014174:	683b      	ldr	r3, [r7, #0]
 8014176:	781b      	ldrb	r3, [r3, #0]
 8014178:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801417c:	2b20      	cmp	r3, #32
 801417e:	d10a      	bne.n	8014196 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8014180:	687b      	ldr	r3, [r7, #4]
 8014182:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014186:	689b      	ldr	r3, [r3, #8]
 8014188:	6839      	ldr	r1, [r7, #0]
 801418a:	6878      	ldr	r0, [r7, #4]
 801418c:	4798      	blx	r3
 801418e:	4603      	mov	r3, r0
 8014190:	73fb      	strb	r3, [r7, #15]

        return ret;
 8014192:	7bfb      	ldrb	r3, [r7, #15]
 8014194:	e12d      	b.n	80143f2 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8014196:	683b      	ldr	r3, [r7, #0]
 8014198:	785b      	ldrb	r3, [r3, #1]
 801419a:	2b03      	cmp	r3, #3
 801419c:	d007      	beq.n	80141ae <USBD_StdEPReq+0x7a>
 801419e:	2b03      	cmp	r3, #3
 80141a0:	f300 811b 	bgt.w	80143da <USBD_StdEPReq+0x2a6>
 80141a4:	2b00      	cmp	r3, #0
 80141a6:	d072      	beq.n	801428e <USBD_StdEPReq+0x15a>
 80141a8:	2b01      	cmp	r3, #1
 80141aa:	d03a      	beq.n	8014222 <USBD_StdEPReq+0xee>
 80141ac:	e115      	b.n	80143da <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80141ae:	687b      	ldr	r3, [r7, #4]
 80141b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80141b4:	2b02      	cmp	r3, #2
 80141b6:	d002      	beq.n	80141be <USBD_StdEPReq+0x8a>
 80141b8:	2b03      	cmp	r3, #3
 80141ba:	d015      	beq.n	80141e8 <USBD_StdEPReq+0xb4>
 80141bc:	e02b      	b.n	8014216 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80141be:	7bbb      	ldrb	r3, [r7, #14]
 80141c0:	2b00      	cmp	r3, #0
 80141c2:	d00c      	beq.n	80141de <USBD_StdEPReq+0xaa>
 80141c4:	7bbb      	ldrb	r3, [r7, #14]
 80141c6:	2b80      	cmp	r3, #128	; 0x80
 80141c8:	d009      	beq.n	80141de <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80141ca:	7bbb      	ldrb	r3, [r7, #14]
 80141cc:	4619      	mov	r1, r3
 80141ce:	6878      	ldr	r0, [r7, #4]
 80141d0:	f01b f9bc 	bl	802f54c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80141d4:	2180      	movs	r1, #128	; 0x80
 80141d6:	6878      	ldr	r0, [r7, #4]
 80141d8:	f01b f9b8 	bl	802f54c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80141dc:	e020      	b.n	8014220 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80141de:	6839      	ldr	r1, [r7, #0]
 80141e0:	6878      	ldr	r0, [r7, #4]
 80141e2:	f000 fc1f 	bl	8014a24 <USBD_CtlError>
              break;
 80141e6:	e01b      	b.n	8014220 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80141e8:	683b      	ldr	r3, [r7, #0]
 80141ea:	885b      	ldrh	r3, [r3, #2]
 80141ec:	2b00      	cmp	r3, #0
 80141ee:	d10e      	bne.n	801420e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80141f0:	7bbb      	ldrb	r3, [r7, #14]
 80141f2:	2b00      	cmp	r3, #0
 80141f4:	d00b      	beq.n	801420e <USBD_StdEPReq+0xda>
 80141f6:	7bbb      	ldrb	r3, [r7, #14]
 80141f8:	2b80      	cmp	r3, #128	; 0x80
 80141fa:	d008      	beq.n	801420e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80141fc:	683b      	ldr	r3, [r7, #0]
 80141fe:	88db      	ldrh	r3, [r3, #6]
 8014200:	2b00      	cmp	r3, #0
 8014202:	d104      	bne.n	801420e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8014204:	7bbb      	ldrb	r3, [r7, #14]
 8014206:	4619      	mov	r1, r3
 8014208:	6878      	ldr	r0, [r7, #4]
 801420a:	f01b f99f 	bl	802f54c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 801420e:	6878      	ldr	r0, [r7, #4]
 8014210:	f000 fcd1 	bl	8014bb6 <USBD_CtlSendStatus>

              break;
 8014214:	e004      	b.n	8014220 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8014216:	6839      	ldr	r1, [r7, #0]
 8014218:	6878      	ldr	r0, [r7, #4]
 801421a:	f000 fc03 	bl	8014a24 <USBD_CtlError>
              break;
 801421e:	bf00      	nop
          }
          break;
 8014220:	e0e0      	b.n	80143e4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8014222:	687b      	ldr	r3, [r7, #4]
 8014224:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014228:	2b02      	cmp	r3, #2
 801422a:	d002      	beq.n	8014232 <USBD_StdEPReq+0xfe>
 801422c:	2b03      	cmp	r3, #3
 801422e:	d015      	beq.n	801425c <USBD_StdEPReq+0x128>
 8014230:	e026      	b.n	8014280 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014232:	7bbb      	ldrb	r3, [r7, #14]
 8014234:	2b00      	cmp	r3, #0
 8014236:	d00c      	beq.n	8014252 <USBD_StdEPReq+0x11e>
 8014238:	7bbb      	ldrb	r3, [r7, #14]
 801423a:	2b80      	cmp	r3, #128	; 0x80
 801423c:	d009      	beq.n	8014252 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 801423e:	7bbb      	ldrb	r3, [r7, #14]
 8014240:	4619      	mov	r1, r3
 8014242:	6878      	ldr	r0, [r7, #4]
 8014244:	f01b f982 	bl	802f54c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8014248:	2180      	movs	r1, #128	; 0x80
 801424a:	6878      	ldr	r0, [r7, #4]
 801424c:	f01b f97e 	bl	802f54c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8014250:	e01c      	b.n	801428c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8014252:	6839      	ldr	r1, [r7, #0]
 8014254:	6878      	ldr	r0, [r7, #4]
 8014256:	f000 fbe5 	bl	8014a24 <USBD_CtlError>
              break;
 801425a:	e017      	b.n	801428c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801425c:	683b      	ldr	r3, [r7, #0]
 801425e:	885b      	ldrh	r3, [r3, #2]
 8014260:	2b00      	cmp	r3, #0
 8014262:	d112      	bne.n	801428a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8014264:	7bbb      	ldrb	r3, [r7, #14]
 8014266:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801426a:	2b00      	cmp	r3, #0
 801426c:	d004      	beq.n	8014278 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 801426e:	7bbb      	ldrb	r3, [r7, #14]
 8014270:	4619      	mov	r1, r3
 8014272:	6878      	ldr	r0, [r7, #4]
 8014274:	f01b f989 	bl	802f58a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8014278:	6878      	ldr	r0, [r7, #4]
 801427a:	f000 fc9c 	bl	8014bb6 <USBD_CtlSendStatus>
              }
              break;
 801427e:	e004      	b.n	801428a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8014280:	6839      	ldr	r1, [r7, #0]
 8014282:	6878      	ldr	r0, [r7, #4]
 8014284:	f000 fbce 	bl	8014a24 <USBD_CtlError>
              break;
 8014288:	e000      	b.n	801428c <USBD_StdEPReq+0x158>
              break;
 801428a:	bf00      	nop
          }
          break;
 801428c:	e0aa      	b.n	80143e4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801428e:	687b      	ldr	r3, [r7, #4]
 8014290:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014294:	2b02      	cmp	r3, #2
 8014296:	d002      	beq.n	801429e <USBD_StdEPReq+0x16a>
 8014298:	2b03      	cmp	r3, #3
 801429a:	d032      	beq.n	8014302 <USBD_StdEPReq+0x1ce>
 801429c:	e097      	b.n	80143ce <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801429e:	7bbb      	ldrb	r3, [r7, #14]
 80142a0:	2b00      	cmp	r3, #0
 80142a2:	d007      	beq.n	80142b4 <USBD_StdEPReq+0x180>
 80142a4:	7bbb      	ldrb	r3, [r7, #14]
 80142a6:	2b80      	cmp	r3, #128	; 0x80
 80142a8:	d004      	beq.n	80142b4 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80142aa:	6839      	ldr	r1, [r7, #0]
 80142ac:	6878      	ldr	r0, [r7, #4]
 80142ae:	f000 fbb9 	bl	8014a24 <USBD_CtlError>
                break;
 80142b2:	e091      	b.n	80143d8 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80142b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80142b8:	2b00      	cmp	r3, #0
 80142ba:	da0b      	bge.n	80142d4 <USBD_StdEPReq+0x1a0>
 80142bc:	7bbb      	ldrb	r3, [r7, #14]
 80142be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80142c2:	4613      	mov	r3, r2
 80142c4:	009b      	lsls	r3, r3, #2
 80142c6:	4413      	add	r3, r2
 80142c8:	009b      	lsls	r3, r3, #2
 80142ca:	3310      	adds	r3, #16
 80142cc:	687a      	ldr	r2, [r7, #4]
 80142ce:	4413      	add	r3, r2
 80142d0:	3304      	adds	r3, #4
 80142d2:	e00b      	b.n	80142ec <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80142d4:	7bbb      	ldrb	r3, [r7, #14]
 80142d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80142da:	4613      	mov	r3, r2
 80142dc:	009b      	lsls	r3, r3, #2
 80142de:	4413      	add	r3, r2
 80142e0:	009b      	lsls	r3, r3, #2
 80142e2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80142e6:	687a      	ldr	r2, [r7, #4]
 80142e8:	4413      	add	r3, r2
 80142ea:	3304      	adds	r3, #4
 80142ec:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80142ee:	68bb      	ldr	r3, [r7, #8]
 80142f0:	2200      	movs	r2, #0
 80142f2:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80142f4:	68bb      	ldr	r3, [r7, #8]
 80142f6:	2202      	movs	r2, #2
 80142f8:	4619      	mov	r1, r3
 80142fa:	6878      	ldr	r0, [r7, #4]
 80142fc:	f000 fbfd 	bl	8014afa <USBD_CtlSendData>
              break;
 8014300:	e06a      	b.n	80143d8 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8014302:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014306:	2b00      	cmp	r3, #0
 8014308:	da11      	bge.n	801432e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801430a:	7bbb      	ldrb	r3, [r7, #14]
 801430c:	f003 020f 	and.w	r2, r3, #15
 8014310:	6879      	ldr	r1, [r7, #4]
 8014312:	4613      	mov	r3, r2
 8014314:	009b      	lsls	r3, r3, #2
 8014316:	4413      	add	r3, r2
 8014318:	009b      	lsls	r3, r3, #2
 801431a:	440b      	add	r3, r1
 801431c:	3318      	adds	r3, #24
 801431e:	681b      	ldr	r3, [r3, #0]
 8014320:	2b00      	cmp	r3, #0
 8014322:	d117      	bne.n	8014354 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8014324:	6839      	ldr	r1, [r7, #0]
 8014326:	6878      	ldr	r0, [r7, #4]
 8014328:	f000 fb7c 	bl	8014a24 <USBD_CtlError>
                  break;
 801432c:	e054      	b.n	80143d8 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801432e:	7bbb      	ldrb	r3, [r7, #14]
 8014330:	f003 020f 	and.w	r2, r3, #15
 8014334:	6879      	ldr	r1, [r7, #4]
 8014336:	4613      	mov	r3, r2
 8014338:	009b      	lsls	r3, r3, #2
 801433a:	4413      	add	r3, r2
 801433c:	009b      	lsls	r3, r3, #2
 801433e:	440b      	add	r3, r1
 8014340:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8014344:	681b      	ldr	r3, [r3, #0]
 8014346:	2b00      	cmp	r3, #0
 8014348:	d104      	bne.n	8014354 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 801434a:	6839      	ldr	r1, [r7, #0]
 801434c:	6878      	ldr	r0, [r7, #4]
 801434e:	f000 fb69 	bl	8014a24 <USBD_CtlError>
                  break;
 8014352:	e041      	b.n	80143d8 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014354:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014358:	2b00      	cmp	r3, #0
 801435a:	da0b      	bge.n	8014374 <USBD_StdEPReq+0x240>
 801435c:	7bbb      	ldrb	r3, [r7, #14]
 801435e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014362:	4613      	mov	r3, r2
 8014364:	009b      	lsls	r3, r3, #2
 8014366:	4413      	add	r3, r2
 8014368:	009b      	lsls	r3, r3, #2
 801436a:	3310      	adds	r3, #16
 801436c:	687a      	ldr	r2, [r7, #4]
 801436e:	4413      	add	r3, r2
 8014370:	3304      	adds	r3, #4
 8014372:	e00b      	b.n	801438c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8014374:	7bbb      	ldrb	r3, [r7, #14]
 8014376:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801437a:	4613      	mov	r3, r2
 801437c:	009b      	lsls	r3, r3, #2
 801437e:	4413      	add	r3, r2
 8014380:	009b      	lsls	r3, r3, #2
 8014382:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8014386:	687a      	ldr	r2, [r7, #4]
 8014388:	4413      	add	r3, r2
 801438a:	3304      	adds	r3, #4
 801438c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801438e:	7bbb      	ldrb	r3, [r7, #14]
 8014390:	2b00      	cmp	r3, #0
 8014392:	d002      	beq.n	801439a <USBD_StdEPReq+0x266>
 8014394:	7bbb      	ldrb	r3, [r7, #14]
 8014396:	2b80      	cmp	r3, #128	; 0x80
 8014398:	d103      	bne.n	80143a2 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 801439a:	68bb      	ldr	r3, [r7, #8]
 801439c:	2200      	movs	r2, #0
 801439e:	601a      	str	r2, [r3, #0]
 80143a0:	e00e      	b.n	80143c0 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80143a2:	7bbb      	ldrb	r3, [r7, #14]
 80143a4:	4619      	mov	r1, r3
 80143a6:	6878      	ldr	r0, [r7, #4]
 80143a8:	f01b f90e 	bl	802f5c8 <USBD_LL_IsStallEP>
 80143ac:	4603      	mov	r3, r0
 80143ae:	2b00      	cmp	r3, #0
 80143b0:	d003      	beq.n	80143ba <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80143b2:	68bb      	ldr	r3, [r7, #8]
 80143b4:	2201      	movs	r2, #1
 80143b6:	601a      	str	r2, [r3, #0]
 80143b8:	e002      	b.n	80143c0 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80143ba:	68bb      	ldr	r3, [r7, #8]
 80143bc:	2200      	movs	r2, #0
 80143be:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80143c0:	68bb      	ldr	r3, [r7, #8]
 80143c2:	2202      	movs	r2, #2
 80143c4:	4619      	mov	r1, r3
 80143c6:	6878      	ldr	r0, [r7, #4]
 80143c8:	f000 fb97 	bl	8014afa <USBD_CtlSendData>
              break;
 80143cc:	e004      	b.n	80143d8 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80143ce:	6839      	ldr	r1, [r7, #0]
 80143d0:	6878      	ldr	r0, [r7, #4]
 80143d2:	f000 fb27 	bl	8014a24 <USBD_CtlError>
              break;
 80143d6:	bf00      	nop
          }
          break;
 80143d8:	e004      	b.n	80143e4 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80143da:	6839      	ldr	r1, [r7, #0]
 80143dc:	6878      	ldr	r0, [r7, #4]
 80143de:	f000 fb21 	bl	8014a24 <USBD_CtlError>
          break;
 80143e2:	bf00      	nop
      }
      break;
 80143e4:	e004      	b.n	80143f0 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80143e6:	6839      	ldr	r1, [r7, #0]
 80143e8:	6878      	ldr	r0, [r7, #4]
 80143ea:	f000 fb1b 	bl	8014a24 <USBD_CtlError>
      break;
 80143ee:	bf00      	nop
  }

  return ret;
 80143f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80143f2:	4618      	mov	r0, r3
 80143f4:	3710      	adds	r7, #16
 80143f6:	46bd      	mov	sp, r7
 80143f8:	bd80      	pop	{r7, pc}
	...

080143fc <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80143fc:	b580      	push	{r7, lr}
 80143fe:	b084      	sub	sp, #16
 8014400:	af00      	add	r7, sp, #0
 8014402:	6078      	str	r0, [r7, #4]
 8014404:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8014406:	2300      	movs	r3, #0
 8014408:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801440a:	2300      	movs	r3, #0
 801440c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801440e:	2300      	movs	r3, #0
 8014410:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8014412:	683b      	ldr	r3, [r7, #0]
 8014414:	885b      	ldrh	r3, [r3, #2]
 8014416:	0a1b      	lsrs	r3, r3, #8
 8014418:	b29b      	uxth	r3, r3
 801441a:	3b01      	subs	r3, #1
 801441c:	2b06      	cmp	r3, #6
 801441e:	f200 8128 	bhi.w	8014672 <USBD_GetDescriptor+0x276>
 8014422:	a201      	add	r2, pc, #4	; (adr r2, 8014428 <USBD_GetDescriptor+0x2c>)
 8014424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014428:	08014445 	.word	0x08014445
 801442c:	0801445d 	.word	0x0801445d
 8014430:	0801449d 	.word	0x0801449d
 8014434:	08014673 	.word	0x08014673
 8014438:	08014673 	.word	0x08014673
 801443c:	08014613 	.word	0x08014613
 8014440:	0801463f 	.word	0x0801463f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8014444:	687b      	ldr	r3, [r7, #4]
 8014446:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801444a:	681b      	ldr	r3, [r3, #0]
 801444c:	687a      	ldr	r2, [r7, #4]
 801444e:	7c12      	ldrb	r2, [r2, #16]
 8014450:	f107 0108 	add.w	r1, r7, #8
 8014454:	4610      	mov	r0, r2
 8014456:	4798      	blx	r3
 8014458:	60f8      	str	r0, [r7, #12]
      break;
 801445a:	e112      	b.n	8014682 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801445c:	687b      	ldr	r3, [r7, #4]
 801445e:	7c1b      	ldrb	r3, [r3, #16]
 8014460:	2b00      	cmp	r3, #0
 8014462:	d10d      	bne.n	8014480 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8014464:	687b      	ldr	r3, [r7, #4]
 8014466:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801446a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801446c:	f107 0208 	add.w	r2, r7, #8
 8014470:	4610      	mov	r0, r2
 8014472:	4798      	blx	r3
 8014474:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8014476:	68fb      	ldr	r3, [r7, #12]
 8014478:	3301      	adds	r3, #1
 801447a:	2202      	movs	r2, #2
 801447c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801447e:	e100      	b.n	8014682 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8014480:	687b      	ldr	r3, [r7, #4]
 8014482:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014488:	f107 0208 	add.w	r2, r7, #8
 801448c:	4610      	mov	r0, r2
 801448e:	4798      	blx	r3
 8014490:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8014492:	68fb      	ldr	r3, [r7, #12]
 8014494:	3301      	adds	r3, #1
 8014496:	2202      	movs	r2, #2
 8014498:	701a      	strb	r2, [r3, #0]
      break;
 801449a:	e0f2      	b.n	8014682 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801449c:	683b      	ldr	r3, [r7, #0]
 801449e:	885b      	ldrh	r3, [r3, #2]
 80144a0:	b2db      	uxtb	r3, r3
 80144a2:	2b05      	cmp	r3, #5
 80144a4:	f200 80ac 	bhi.w	8014600 <USBD_GetDescriptor+0x204>
 80144a8:	a201      	add	r2, pc, #4	; (adr r2, 80144b0 <USBD_GetDescriptor+0xb4>)
 80144aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80144ae:	bf00      	nop
 80144b0:	080144c9 	.word	0x080144c9
 80144b4:	080144fd 	.word	0x080144fd
 80144b8:	08014531 	.word	0x08014531
 80144bc:	08014565 	.word	0x08014565
 80144c0:	08014599 	.word	0x08014599
 80144c4:	080145cd 	.word	0x080145cd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80144c8:	687b      	ldr	r3, [r7, #4]
 80144ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80144ce:	685b      	ldr	r3, [r3, #4]
 80144d0:	2b00      	cmp	r3, #0
 80144d2:	d00b      	beq.n	80144ec <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80144d4:	687b      	ldr	r3, [r7, #4]
 80144d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80144da:	685b      	ldr	r3, [r3, #4]
 80144dc:	687a      	ldr	r2, [r7, #4]
 80144de:	7c12      	ldrb	r2, [r2, #16]
 80144e0:	f107 0108 	add.w	r1, r7, #8
 80144e4:	4610      	mov	r0, r2
 80144e6:	4798      	blx	r3
 80144e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80144ea:	e091      	b.n	8014610 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80144ec:	6839      	ldr	r1, [r7, #0]
 80144ee:	6878      	ldr	r0, [r7, #4]
 80144f0:	f000 fa98 	bl	8014a24 <USBD_CtlError>
            err++;
 80144f4:	7afb      	ldrb	r3, [r7, #11]
 80144f6:	3301      	adds	r3, #1
 80144f8:	72fb      	strb	r3, [r7, #11]
          break;
 80144fa:	e089      	b.n	8014610 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80144fc:	687b      	ldr	r3, [r7, #4]
 80144fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8014502:	689b      	ldr	r3, [r3, #8]
 8014504:	2b00      	cmp	r3, #0
 8014506:	d00b      	beq.n	8014520 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8014508:	687b      	ldr	r3, [r7, #4]
 801450a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801450e:	689b      	ldr	r3, [r3, #8]
 8014510:	687a      	ldr	r2, [r7, #4]
 8014512:	7c12      	ldrb	r2, [r2, #16]
 8014514:	f107 0108 	add.w	r1, r7, #8
 8014518:	4610      	mov	r0, r2
 801451a:	4798      	blx	r3
 801451c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801451e:	e077      	b.n	8014610 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014520:	6839      	ldr	r1, [r7, #0]
 8014522:	6878      	ldr	r0, [r7, #4]
 8014524:	f000 fa7e 	bl	8014a24 <USBD_CtlError>
            err++;
 8014528:	7afb      	ldrb	r3, [r7, #11]
 801452a:	3301      	adds	r3, #1
 801452c:	72fb      	strb	r3, [r7, #11]
          break;
 801452e:	e06f      	b.n	8014610 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8014530:	687b      	ldr	r3, [r7, #4]
 8014532:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8014536:	68db      	ldr	r3, [r3, #12]
 8014538:	2b00      	cmp	r3, #0
 801453a:	d00b      	beq.n	8014554 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801453c:	687b      	ldr	r3, [r7, #4]
 801453e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8014542:	68db      	ldr	r3, [r3, #12]
 8014544:	687a      	ldr	r2, [r7, #4]
 8014546:	7c12      	ldrb	r2, [r2, #16]
 8014548:	f107 0108 	add.w	r1, r7, #8
 801454c:	4610      	mov	r0, r2
 801454e:	4798      	blx	r3
 8014550:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014552:	e05d      	b.n	8014610 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014554:	6839      	ldr	r1, [r7, #0]
 8014556:	6878      	ldr	r0, [r7, #4]
 8014558:	f000 fa64 	bl	8014a24 <USBD_CtlError>
            err++;
 801455c:	7afb      	ldrb	r3, [r7, #11]
 801455e:	3301      	adds	r3, #1
 8014560:	72fb      	strb	r3, [r7, #11]
          break;
 8014562:	e055      	b.n	8014610 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8014564:	687b      	ldr	r3, [r7, #4]
 8014566:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801456a:	691b      	ldr	r3, [r3, #16]
 801456c:	2b00      	cmp	r3, #0
 801456e:	d00b      	beq.n	8014588 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8014570:	687b      	ldr	r3, [r7, #4]
 8014572:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8014576:	691b      	ldr	r3, [r3, #16]
 8014578:	687a      	ldr	r2, [r7, #4]
 801457a:	7c12      	ldrb	r2, [r2, #16]
 801457c:	f107 0108 	add.w	r1, r7, #8
 8014580:	4610      	mov	r0, r2
 8014582:	4798      	blx	r3
 8014584:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014586:	e043      	b.n	8014610 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014588:	6839      	ldr	r1, [r7, #0]
 801458a:	6878      	ldr	r0, [r7, #4]
 801458c:	f000 fa4a 	bl	8014a24 <USBD_CtlError>
            err++;
 8014590:	7afb      	ldrb	r3, [r7, #11]
 8014592:	3301      	adds	r3, #1
 8014594:	72fb      	strb	r3, [r7, #11]
          break;
 8014596:	e03b      	b.n	8014610 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8014598:	687b      	ldr	r3, [r7, #4]
 801459a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801459e:	695b      	ldr	r3, [r3, #20]
 80145a0:	2b00      	cmp	r3, #0
 80145a2:	d00b      	beq.n	80145bc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80145a4:	687b      	ldr	r3, [r7, #4]
 80145a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80145aa:	695b      	ldr	r3, [r3, #20]
 80145ac:	687a      	ldr	r2, [r7, #4]
 80145ae:	7c12      	ldrb	r2, [r2, #16]
 80145b0:	f107 0108 	add.w	r1, r7, #8
 80145b4:	4610      	mov	r0, r2
 80145b6:	4798      	blx	r3
 80145b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80145ba:	e029      	b.n	8014610 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80145bc:	6839      	ldr	r1, [r7, #0]
 80145be:	6878      	ldr	r0, [r7, #4]
 80145c0:	f000 fa30 	bl	8014a24 <USBD_CtlError>
            err++;
 80145c4:	7afb      	ldrb	r3, [r7, #11]
 80145c6:	3301      	adds	r3, #1
 80145c8:	72fb      	strb	r3, [r7, #11]
          break;
 80145ca:	e021      	b.n	8014610 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80145cc:	687b      	ldr	r3, [r7, #4]
 80145ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80145d2:	699b      	ldr	r3, [r3, #24]
 80145d4:	2b00      	cmp	r3, #0
 80145d6:	d00b      	beq.n	80145f0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80145d8:	687b      	ldr	r3, [r7, #4]
 80145da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80145de:	699b      	ldr	r3, [r3, #24]
 80145e0:	687a      	ldr	r2, [r7, #4]
 80145e2:	7c12      	ldrb	r2, [r2, #16]
 80145e4:	f107 0108 	add.w	r1, r7, #8
 80145e8:	4610      	mov	r0, r2
 80145ea:	4798      	blx	r3
 80145ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80145ee:	e00f      	b.n	8014610 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80145f0:	6839      	ldr	r1, [r7, #0]
 80145f2:	6878      	ldr	r0, [r7, #4]
 80145f4:	f000 fa16 	bl	8014a24 <USBD_CtlError>
            err++;
 80145f8:	7afb      	ldrb	r3, [r7, #11]
 80145fa:	3301      	adds	r3, #1
 80145fc:	72fb      	strb	r3, [r7, #11]
          break;
 80145fe:	e007      	b.n	8014610 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8014600:	6839      	ldr	r1, [r7, #0]
 8014602:	6878      	ldr	r0, [r7, #4]
 8014604:	f000 fa0e 	bl	8014a24 <USBD_CtlError>
          err++;
 8014608:	7afb      	ldrb	r3, [r7, #11]
 801460a:	3301      	adds	r3, #1
 801460c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 801460e:	e038      	b.n	8014682 <USBD_GetDescriptor+0x286>
 8014610:	e037      	b.n	8014682 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014612:	687b      	ldr	r3, [r7, #4]
 8014614:	7c1b      	ldrb	r3, [r3, #16]
 8014616:	2b00      	cmp	r3, #0
 8014618:	d109      	bne.n	801462e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801461a:	687b      	ldr	r3, [r7, #4]
 801461c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014622:	f107 0208 	add.w	r2, r7, #8
 8014626:	4610      	mov	r0, r2
 8014628:	4798      	blx	r3
 801462a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801462c:	e029      	b.n	8014682 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801462e:	6839      	ldr	r1, [r7, #0]
 8014630:	6878      	ldr	r0, [r7, #4]
 8014632:	f000 f9f7 	bl	8014a24 <USBD_CtlError>
        err++;
 8014636:	7afb      	ldrb	r3, [r7, #11]
 8014638:	3301      	adds	r3, #1
 801463a:	72fb      	strb	r3, [r7, #11]
      break;
 801463c:	e021      	b.n	8014682 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801463e:	687b      	ldr	r3, [r7, #4]
 8014640:	7c1b      	ldrb	r3, [r3, #16]
 8014642:	2b00      	cmp	r3, #0
 8014644:	d10d      	bne.n	8014662 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8014646:	687b      	ldr	r3, [r7, #4]
 8014648:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801464c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801464e:	f107 0208 	add.w	r2, r7, #8
 8014652:	4610      	mov	r0, r2
 8014654:	4798      	blx	r3
 8014656:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8014658:	68fb      	ldr	r3, [r7, #12]
 801465a:	3301      	adds	r3, #1
 801465c:	2207      	movs	r2, #7
 801465e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014660:	e00f      	b.n	8014682 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8014662:	6839      	ldr	r1, [r7, #0]
 8014664:	6878      	ldr	r0, [r7, #4]
 8014666:	f000 f9dd 	bl	8014a24 <USBD_CtlError>
        err++;
 801466a:	7afb      	ldrb	r3, [r7, #11]
 801466c:	3301      	adds	r3, #1
 801466e:	72fb      	strb	r3, [r7, #11]
      break;
 8014670:	e007      	b.n	8014682 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8014672:	6839      	ldr	r1, [r7, #0]
 8014674:	6878      	ldr	r0, [r7, #4]
 8014676:	f000 f9d5 	bl	8014a24 <USBD_CtlError>
      err++;
 801467a:	7afb      	ldrb	r3, [r7, #11]
 801467c:	3301      	adds	r3, #1
 801467e:	72fb      	strb	r3, [r7, #11]
      break;
 8014680:	bf00      	nop
  }

  if (err != 0U)
 8014682:	7afb      	ldrb	r3, [r7, #11]
 8014684:	2b00      	cmp	r3, #0
 8014686:	d11c      	bne.n	80146c2 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8014688:	893b      	ldrh	r3, [r7, #8]
 801468a:	2b00      	cmp	r3, #0
 801468c:	d011      	beq.n	80146b2 <USBD_GetDescriptor+0x2b6>
 801468e:	683b      	ldr	r3, [r7, #0]
 8014690:	88db      	ldrh	r3, [r3, #6]
 8014692:	2b00      	cmp	r3, #0
 8014694:	d00d      	beq.n	80146b2 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8014696:	683b      	ldr	r3, [r7, #0]
 8014698:	88da      	ldrh	r2, [r3, #6]
 801469a:	893b      	ldrh	r3, [r7, #8]
 801469c:	4293      	cmp	r3, r2
 801469e:	bf28      	it	cs
 80146a0:	4613      	movcs	r3, r2
 80146a2:	b29b      	uxth	r3, r3
 80146a4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80146a6:	893b      	ldrh	r3, [r7, #8]
 80146a8:	461a      	mov	r2, r3
 80146aa:	68f9      	ldr	r1, [r7, #12]
 80146ac:	6878      	ldr	r0, [r7, #4]
 80146ae:	f000 fa24 	bl	8014afa <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80146b2:	683b      	ldr	r3, [r7, #0]
 80146b4:	88db      	ldrh	r3, [r3, #6]
 80146b6:	2b00      	cmp	r3, #0
 80146b8:	d104      	bne.n	80146c4 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80146ba:	6878      	ldr	r0, [r7, #4]
 80146bc:	f000 fa7b 	bl	8014bb6 <USBD_CtlSendStatus>
 80146c0:	e000      	b.n	80146c4 <USBD_GetDescriptor+0x2c8>
    return;
 80146c2:	bf00      	nop
    }
  }
}
 80146c4:	3710      	adds	r7, #16
 80146c6:	46bd      	mov	sp, r7
 80146c8:	bd80      	pop	{r7, pc}
 80146ca:	bf00      	nop

080146cc <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80146cc:	b580      	push	{r7, lr}
 80146ce:	b084      	sub	sp, #16
 80146d0:	af00      	add	r7, sp, #0
 80146d2:	6078      	str	r0, [r7, #4]
 80146d4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80146d6:	683b      	ldr	r3, [r7, #0]
 80146d8:	889b      	ldrh	r3, [r3, #4]
 80146da:	2b00      	cmp	r3, #0
 80146dc:	d130      	bne.n	8014740 <USBD_SetAddress+0x74>
 80146de:	683b      	ldr	r3, [r7, #0]
 80146e0:	88db      	ldrh	r3, [r3, #6]
 80146e2:	2b00      	cmp	r3, #0
 80146e4:	d12c      	bne.n	8014740 <USBD_SetAddress+0x74>
 80146e6:	683b      	ldr	r3, [r7, #0]
 80146e8:	885b      	ldrh	r3, [r3, #2]
 80146ea:	2b7f      	cmp	r3, #127	; 0x7f
 80146ec:	d828      	bhi.n	8014740 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80146ee:	683b      	ldr	r3, [r7, #0]
 80146f0:	885b      	ldrh	r3, [r3, #2]
 80146f2:	b2db      	uxtb	r3, r3
 80146f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80146f8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80146fa:	687b      	ldr	r3, [r7, #4]
 80146fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014700:	2b03      	cmp	r3, #3
 8014702:	d104      	bne.n	801470e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8014704:	6839      	ldr	r1, [r7, #0]
 8014706:	6878      	ldr	r0, [r7, #4]
 8014708:	f000 f98c 	bl	8014a24 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801470c:	e01d      	b.n	801474a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801470e:	687b      	ldr	r3, [r7, #4]
 8014710:	7bfa      	ldrb	r2, [r7, #15]
 8014712:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8014716:	7bfb      	ldrb	r3, [r7, #15]
 8014718:	4619      	mov	r1, r3
 801471a:	6878      	ldr	r0, [r7, #4]
 801471c:	f01a ff81 	bl	802f622 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8014720:	6878      	ldr	r0, [r7, #4]
 8014722:	f000 fa48 	bl	8014bb6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8014726:	7bfb      	ldrb	r3, [r7, #15]
 8014728:	2b00      	cmp	r3, #0
 801472a:	d004      	beq.n	8014736 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801472c:	687b      	ldr	r3, [r7, #4]
 801472e:	2202      	movs	r2, #2
 8014730:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014734:	e009      	b.n	801474a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8014736:	687b      	ldr	r3, [r7, #4]
 8014738:	2201      	movs	r2, #1
 801473a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801473e:	e004      	b.n	801474a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8014740:	6839      	ldr	r1, [r7, #0]
 8014742:	6878      	ldr	r0, [r7, #4]
 8014744:	f000 f96e 	bl	8014a24 <USBD_CtlError>
  }
}
 8014748:	bf00      	nop
 801474a:	bf00      	nop
 801474c:	3710      	adds	r7, #16
 801474e:	46bd      	mov	sp, r7
 8014750:	bd80      	pop	{r7, pc}
	...

08014754 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014754:	b580      	push	{r7, lr}
 8014756:	b082      	sub	sp, #8
 8014758:	af00      	add	r7, sp, #0
 801475a:	6078      	str	r0, [r7, #4]
 801475c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801475e:	683b      	ldr	r3, [r7, #0]
 8014760:	885b      	ldrh	r3, [r3, #2]
 8014762:	b2da      	uxtb	r2, r3
 8014764:	4b41      	ldr	r3, [pc, #260]	; (801486c <USBD_SetConfig+0x118>)
 8014766:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8014768:	4b40      	ldr	r3, [pc, #256]	; (801486c <USBD_SetConfig+0x118>)
 801476a:	781b      	ldrb	r3, [r3, #0]
 801476c:	2b01      	cmp	r3, #1
 801476e:	d904      	bls.n	801477a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8014770:	6839      	ldr	r1, [r7, #0]
 8014772:	6878      	ldr	r0, [r7, #4]
 8014774:	f000 f956 	bl	8014a24 <USBD_CtlError>
 8014778:	e075      	b.n	8014866 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 801477a:	687b      	ldr	r3, [r7, #4]
 801477c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014780:	2b02      	cmp	r3, #2
 8014782:	d002      	beq.n	801478a <USBD_SetConfig+0x36>
 8014784:	2b03      	cmp	r3, #3
 8014786:	d023      	beq.n	80147d0 <USBD_SetConfig+0x7c>
 8014788:	e062      	b.n	8014850 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 801478a:	4b38      	ldr	r3, [pc, #224]	; (801486c <USBD_SetConfig+0x118>)
 801478c:	781b      	ldrb	r3, [r3, #0]
 801478e:	2b00      	cmp	r3, #0
 8014790:	d01a      	beq.n	80147c8 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8014792:	4b36      	ldr	r3, [pc, #216]	; (801486c <USBD_SetConfig+0x118>)
 8014794:	781b      	ldrb	r3, [r3, #0]
 8014796:	461a      	mov	r2, r3
 8014798:	687b      	ldr	r3, [r7, #4]
 801479a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801479c:	687b      	ldr	r3, [r7, #4]
 801479e:	2203      	movs	r2, #3
 80147a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80147a4:	4b31      	ldr	r3, [pc, #196]	; (801486c <USBD_SetConfig+0x118>)
 80147a6:	781b      	ldrb	r3, [r3, #0]
 80147a8:	4619      	mov	r1, r3
 80147aa:	6878      	ldr	r0, [r7, #4]
 80147ac:	f7ff f9e5 	bl	8013b7a <USBD_SetClassConfig>
 80147b0:	4603      	mov	r3, r0
 80147b2:	2b02      	cmp	r3, #2
 80147b4:	d104      	bne.n	80147c0 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80147b6:	6839      	ldr	r1, [r7, #0]
 80147b8:	6878      	ldr	r0, [r7, #4]
 80147ba:	f000 f933 	bl	8014a24 <USBD_CtlError>
            return;
 80147be:	e052      	b.n	8014866 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80147c0:	6878      	ldr	r0, [r7, #4]
 80147c2:	f000 f9f8 	bl	8014bb6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80147c6:	e04e      	b.n	8014866 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80147c8:	6878      	ldr	r0, [r7, #4]
 80147ca:	f000 f9f4 	bl	8014bb6 <USBD_CtlSendStatus>
        break;
 80147ce:	e04a      	b.n	8014866 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80147d0:	4b26      	ldr	r3, [pc, #152]	; (801486c <USBD_SetConfig+0x118>)
 80147d2:	781b      	ldrb	r3, [r3, #0]
 80147d4:	2b00      	cmp	r3, #0
 80147d6:	d112      	bne.n	80147fe <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80147d8:	687b      	ldr	r3, [r7, #4]
 80147da:	2202      	movs	r2, #2
 80147dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80147e0:	4b22      	ldr	r3, [pc, #136]	; (801486c <USBD_SetConfig+0x118>)
 80147e2:	781b      	ldrb	r3, [r3, #0]
 80147e4:	461a      	mov	r2, r3
 80147e6:	687b      	ldr	r3, [r7, #4]
 80147e8:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80147ea:	4b20      	ldr	r3, [pc, #128]	; (801486c <USBD_SetConfig+0x118>)
 80147ec:	781b      	ldrb	r3, [r3, #0]
 80147ee:	4619      	mov	r1, r3
 80147f0:	6878      	ldr	r0, [r7, #4]
 80147f2:	f7ff f9e1 	bl	8013bb8 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80147f6:	6878      	ldr	r0, [r7, #4]
 80147f8:	f000 f9dd 	bl	8014bb6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80147fc:	e033      	b.n	8014866 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80147fe:	4b1b      	ldr	r3, [pc, #108]	; (801486c <USBD_SetConfig+0x118>)
 8014800:	781b      	ldrb	r3, [r3, #0]
 8014802:	461a      	mov	r2, r3
 8014804:	687b      	ldr	r3, [r7, #4]
 8014806:	685b      	ldr	r3, [r3, #4]
 8014808:	429a      	cmp	r2, r3
 801480a:	d01d      	beq.n	8014848 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801480c:	687b      	ldr	r3, [r7, #4]
 801480e:	685b      	ldr	r3, [r3, #4]
 8014810:	b2db      	uxtb	r3, r3
 8014812:	4619      	mov	r1, r3
 8014814:	6878      	ldr	r0, [r7, #4]
 8014816:	f7ff f9cf 	bl	8013bb8 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 801481a:	4b14      	ldr	r3, [pc, #80]	; (801486c <USBD_SetConfig+0x118>)
 801481c:	781b      	ldrb	r3, [r3, #0]
 801481e:	461a      	mov	r2, r3
 8014820:	687b      	ldr	r3, [r7, #4]
 8014822:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8014824:	4b11      	ldr	r3, [pc, #68]	; (801486c <USBD_SetConfig+0x118>)
 8014826:	781b      	ldrb	r3, [r3, #0]
 8014828:	4619      	mov	r1, r3
 801482a:	6878      	ldr	r0, [r7, #4]
 801482c:	f7ff f9a5 	bl	8013b7a <USBD_SetClassConfig>
 8014830:	4603      	mov	r3, r0
 8014832:	2b02      	cmp	r3, #2
 8014834:	d104      	bne.n	8014840 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8014836:	6839      	ldr	r1, [r7, #0]
 8014838:	6878      	ldr	r0, [r7, #4]
 801483a:	f000 f8f3 	bl	8014a24 <USBD_CtlError>
            return;
 801483e:	e012      	b.n	8014866 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8014840:	6878      	ldr	r0, [r7, #4]
 8014842:	f000 f9b8 	bl	8014bb6 <USBD_CtlSendStatus>
        break;
 8014846:	e00e      	b.n	8014866 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8014848:	6878      	ldr	r0, [r7, #4]
 801484a:	f000 f9b4 	bl	8014bb6 <USBD_CtlSendStatus>
        break;
 801484e:	e00a      	b.n	8014866 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8014850:	6839      	ldr	r1, [r7, #0]
 8014852:	6878      	ldr	r0, [r7, #4]
 8014854:	f000 f8e6 	bl	8014a24 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8014858:	4b04      	ldr	r3, [pc, #16]	; (801486c <USBD_SetConfig+0x118>)
 801485a:	781b      	ldrb	r3, [r3, #0]
 801485c:	4619      	mov	r1, r3
 801485e:	6878      	ldr	r0, [r7, #4]
 8014860:	f7ff f9aa 	bl	8013bb8 <USBD_ClrClassConfig>
        break;
 8014864:	bf00      	nop
    }
  }
}
 8014866:	3708      	adds	r7, #8
 8014868:	46bd      	mov	sp, r7
 801486a:	bd80      	pop	{r7, pc}
 801486c:	20000948 	.word	0x20000948

08014870 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014870:	b580      	push	{r7, lr}
 8014872:	b082      	sub	sp, #8
 8014874:	af00      	add	r7, sp, #0
 8014876:	6078      	str	r0, [r7, #4]
 8014878:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801487a:	683b      	ldr	r3, [r7, #0]
 801487c:	88db      	ldrh	r3, [r3, #6]
 801487e:	2b01      	cmp	r3, #1
 8014880:	d004      	beq.n	801488c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8014882:	6839      	ldr	r1, [r7, #0]
 8014884:	6878      	ldr	r0, [r7, #4]
 8014886:	f000 f8cd 	bl	8014a24 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801488a:	e022      	b.n	80148d2 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 801488c:	687b      	ldr	r3, [r7, #4]
 801488e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014892:	2b02      	cmp	r3, #2
 8014894:	dc02      	bgt.n	801489c <USBD_GetConfig+0x2c>
 8014896:	2b00      	cmp	r3, #0
 8014898:	dc03      	bgt.n	80148a2 <USBD_GetConfig+0x32>
 801489a:	e015      	b.n	80148c8 <USBD_GetConfig+0x58>
 801489c:	2b03      	cmp	r3, #3
 801489e:	d00b      	beq.n	80148b8 <USBD_GetConfig+0x48>
 80148a0:	e012      	b.n	80148c8 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80148a2:	687b      	ldr	r3, [r7, #4]
 80148a4:	2200      	movs	r2, #0
 80148a6:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80148a8:	687b      	ldr	r3, [r7, #4]
 80148aa:	3308      	adds	r3, #8
 80148ac:	2201      	movs	r2, #1
 80148ae:	4619      	mov	r1, r3
 80148b0:	6878      	ldr	r0, [r7, #4]
 80148b2:	f000 f922 	bl	8014afa <USBD_CtlSendData>
        break;
 80148b6:	e00c      	b.n	80148d2 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80148b8:	687b      	ldr	r3, [r7, #4]
 80148ba:	3304      	adds	r3, #4
 80148bc:	2201      	movs	r2, #1
 80148be:	4619      	mov	r1, r3
 80148c0:	6878      	ldr	r0, [r7, #4]
 80148c2:	f000 f91a 	bl	8014afa <USBD_CtlSendData>
        break;
 80148c6:	e004      	b.n	80148d2 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80148c8:	6839      	ldr	r1, [r7, #0]
 80148ca:	6878      	ldr	r0, [r7, #4]
 80148cc:	f000 f8aa 	bl	8014a24 <USBD_CtlError>
        break;
 80148d0:	bf00      	nop
}
 80148d2:	bf00      	nop
 80148d4:	3708      	adds	r7, #8
 80148d6:	46bd      	mov	sp, r7
 80148d8:	bd80      	pop	{r7, pc}

080148da <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80148da:	b580      	push	{r7, lr}
 80148dc:	b082      	sub	sp, #8
 80148de:	af00      	add	r7, sp, #0
 80148e0:	6078      	str	r0, [r7, #4]
 80148e2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80148e4:	687b      	ldr	r3, [r7, #4]
 80148e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80148ea:	3b01      	subs	r3, #1
 80148ec:	2b02      	cmp	r3, #2
 80148ee:	d81e      	bhi.n	801492e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80148f0:	683b      	ldr	r3, [r7, #0]
 80148f2:	88db      	ldrh	r3, [r3, #6]
 80148f4:	2b02      	cmp	r3, #2
 80148f6:	d004      	beq.n	8014902 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80148f8:	6839      	ldr	r1, [r7, #0]
 80148fa:	6878      	ldr	r0, [r7, #4]
 80148fc:	f000 f892 	bl	8014a24 <USBD_CtlError>
        break;
 8014900:	e01a      	b.n	8014938 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8014902:	687b      	ldr	r3, [r7, #4]
 8014904:	2201      	movs	r2, #1
 8014906:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8014908:	687b      	ldr	r3, [r7, #4]
 801490a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801490e:	2b00      	cmp	r3, #0
 8014910:	d005      	beq.n	801491e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8014912:	687b      	ldr	r3, [r7, #4]
 8014914:	68db      	ldr	r3, [r3, #12]
 8014916:	f043 0202 	orr.w	r2, r3, #2
 801491a:	687b      	ldr	r3, [r7, #4]
 801491c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 801491e:	687b      	ldr	r3, [r7, #4]
 8014920:	330c      	adds	r3, #12
 8014922:	2202      	movs	r2, #2
 8014924:	4619      	mov	r1, r3
 8014926:	6878      	ldr	r0, [r7, #4]
 8014928:	f000 f8e7 	bl	8014afa <USBD_CtlSendData>
      break;
 801492c:	e004      	b.n	8014938 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 801492e:	6839      	ldr	r1, [r7, #0]
 8014930:	6878      	ldr	r0, [r7, #4]
 8014932:	f000 f877 	bl	8014a24 <USBD_CtlError>
      break;
 8014936:	bf00      	nop
  }
}
 8014938:	bf00      	nop
 801493a:	3708      	adds	r7, #8
 801493c:	46bd      	mov	sp, r7
 801493e:	bd80      	pop	{r7, pc}

08014940 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8014940:	b580      	push	{r7, lr}
 8014942:	b082      	sub	sp, #8
 8014944:	af00      	add	r7, sp, #0
 8014946:	6078      	str	r0, [r7, #4]
 8014948:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801494a:	683b      	ldr	r3, [r7, #0]
 801494c:	885b      	ldrh	r3, [r3, #2]
 801494e:	2b01      	cmp	r3, #1
 8014950:	d106      	bne.n	8014960 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8014952:	687b      	ldr	r3, [r7, #4]
 8014954:	2201      	movs	r2, #1
 8014956:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 801495a:	6878      	ldr	r0, [r7, #4]
 801495c:	f000 f92b 	bl	8014bb6 <USBD_CtlSendStatus>
  }
}
 8014960:	bf00      	nop
 8014962:	3708      	adds	r7, #8
 8014964:	46bd      	mov	sp, r7
 8014966:	bd80      	pop	{r7, pc}

08014968 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8014968:	b580      	push	{r7, lr}
 801496a:	b082      	sub	sp, #8
 801496c:	af00      	add	r7, sp, #0
 801496e:	6078      	str	r0, [r7, #4]
 8014970:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014972:	687b      	ldr	r3, [r7, #4]
 8014974:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014978:	3b01      	subs	r3, #1
 801497a:	2b02      	cmp	r3, #2
 801497c:	d80b      	bhi.n	8014996 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801497e:	683b      	ldr	r3, [r7, #0]
 8014980:	885b      	ldrh	r3, [r3, #2]
 8014982:	2b01      	cmp	r3, #1
 8014984:	d10c      	bne.n	80149a0 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8014986:	687b      	ldr	r3, [r7, #4]
 8014988:	2200      	movs	r2, #0
 801498a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 801498e:	6878      	ldr	r0, [r7, #4]
 8014990:	f000 f911 	bl	8014bb6 <USBD_CtlSendStatus>
      }
      break;
 8014994:	e004      	b.n	80149a0 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8014996:	6839      	ldr	r1, [r7, #0]
 8014998:	6878      	ldr	r0, [r7, #4]
 801499a:	f000 f843 	bl	8014a24 <USBD_CtlError>
      break;
 801499e:	e000      	b.n	80149a2 <USBD_ClrFeature+0x3a>
      break;
 80149a0:	bf00      	nop
  }
}
 80149a2:	bf00      	nop
 80149a4:	3708      	adds	r7, #8
 80149a6:	46bd      	mov	sp, r7
 80149a8:	bd80      	pop	{r7, pc}

080149aa <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80149aa:	b480      	push	{r7}
 80149ac:	b083      	sub	sp, #12
 80149ae:	af00      	add	r7, sp, #0
 80149b0:	6078      	str	r0, [r7, #4]
 80149b2:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80149b4:	683b      	ldr	r3, [r7, #0]
 80149b6:	781a      	ldrb	r2, [r3, #0]
 80149b8:	687b      	ldr	r3, [r7, #4]
 80149ba:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80149bc:	683b      	ldr	r3, [r7, #0]
 80149be:	785a      	ldrb	r2, [r3, #1]
 80149c0:	687b      	ldr	r3, [r7, #4]
 80149c2:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80149c4:	683b      	ldr	r3, [r7, #0]
 80149c6:	3302      	adds	r3, #2
 80149c8:	781b      	ldrb	r3, [r3, #0]
 80149ca:	b29a      	uxth	r2, r3
 80149cc:	683b      	ldr	r3, [r7, #0]
 80149ce:	3303      	adds	r3, #3
 80149d0:	781b      	ldrb	r3, [r3, #0]
 80149d2:	b29b      	uxth	r3, r3
 80149d4:	021b      	lsls	r3, r3, #8
 80149d6:	b29b      	uxth	r3, r3
 80149d8:	4413      	add	r3, r2
 80149da:	b29a      	uxth	r2, r3
 80149dc:	687b      	ldr	r3, [r7, #4]
 80149de:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80149e0:	683b      	ldr	r3, [r7, #0]
 80149e2:	3304      	adds	r3, #4
 80149e4:	781b      	ldrb	r3, [r3, #0]
 80149e6:	b29a      	uxth	r2, r3
 80149e8:	683b      	ldr	r3, [r7, #0]
 80149ea:	3305      	adds	r3, #5
 80149ec:	781b      	ldrb	r3, [r3, #0]
 80149ee:	b29b      	uxth	r3, r3
 80149f0:	021b      	lsls	r3, r3, #8
 80149f2:	b29b      	uxth	r3, r3
 80149f4:	4413      	add	r3, r2
 80149f6:	b29a      	uxth	r2, r3
 80149f8:	687b      	ldr	r3, [r7, #4]
 80149fa:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80149fc:	683b      	ldr	r3, [r7, #0]
 80149fe:	3306      	adds	r3, #6
 8014a00:	781b      	ldrb	r3, [r3, #0]
 8014a02:	b29a      	uxth	r2, r3
 8014a04:	683b      	ldr	r3, [r7, #0]
 8014a06:	3307      	adds	r3, #7
 8014a08:	781b      	ldrb	r3, [r3, #0]
 8014a0a:	b29b      	uxth	r3, r3
 8014a0c:	021b      	lsls	r3, r3, #8
 8014a0e:	b29b      	uxth	r3, r3
 8014a10:	4413      	add	r3, r2
 8014a12:	b29a      	uxth	r2, r3
 8014a14:	687b      	ldr	r3, [r7, #4]
 8014a16:	80da      	strh	r2, [r3, #6]

}
 8014a18:	bf00      	nop
 8014a1a:	370c      	adds	r7, #12
 8014a1c:	46bd      	mov	sp, r7
 8014a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a22:	4770      	bx	lr

08014a24 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8014a24:	b580      	push	{r7, lr}
 8014a26:	b082      	sub	sp, #8
 8014a28:	af00      	add	r7, sp, #0
 8014a2a:	6078      	str	r0, [r7, #4]
 8014a2c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8014a2e:	2180      	movs	r1, #128	; 0x80
 8014a30:	6878      	ldr	r0, [r7, #4]
 8014a32:	f01a fd8b 	bl	802f54c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8014a36:	2100      	movs	r1, #0
 8014a38:	6878      	ldr	r0, [r7, #4]
 8014a3a:	f01a fd87 	bl	802f54c <USBD_LL_StallEP>
}
 8014a3e:	bf00      	nop
 8014a40:	3708      	adds	r7, #8
 8014a42:	46bd      	mov	sp, r7
 8014a44:	bd80      	pop	{r7, pc}

08014a46 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8014a46:	b580      	push	{r7, lr}
 8014a48:	b086      	sub	sp, #24
 8014a4a:	af00      	add	r7, sp, #0
 8014a4c:	60f8      	str	r0, [r7, #12]
 8014a4e:	60b9      	str	r1, [r7, #8]
 8014a50:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8014a52:	2300      	movs	r3, #0
 8014a54:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8014a56:	68fb      	ldr	r3, [r7, #12]
 8014a58:	2b00      	cmp	r3, #0
 8014a5a:	d032      	beq.n	8014ac2 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8014a5c:	68f8      	ldr	r0, [r7, #12]
 8014a5e:	f000 f834 	bl	8014aca <USBD_GetLen>
 8014a62:	4603      	mov	r3, r0
 8014a64:	3301      	adds	r3, #1
 8014a66:	b29b      	uxth	r3, r3
 8014a68:	005b      	lsls	r3, r3, #1
 8014a6a:	b29a      	uxth	r2, r3
 8014a6c:	687b      	ldr	r3, [r7, #4]
 8014a6e:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8014a70:	7dfb      	ldrb	r3, [r7, #23]
 8014a72:	1c5a      	adds	r2, r3, #1
 8014a74:	75fa      	strb	r2, [r7, #23]
 8014a76:	461a      	mov	r2, r3
 8014a78:	68bb      	ldr	r3, [r7, #8]
 8014a7a:	4413      	add	r3, r2
 8014a7c:	687a      	ldr	r2, [r7, #4]
 8014a7e:	7812      	ldrb	r2, [r2, #0]
 8014a80:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8014a82:	7dfb      	ldrb	r3, [r7, #23]
 8014a84:	1c5a      	adds	r2, r3, #1
 8014a86:	75fa      	strb	r2, [r7, #23]
 8014a88:	461a      	mov	r2, r3
 8014a8a:	68bb      	ldr	r3, [r7, #8]
 8014a8c:	4413      	add	r3, r2
 8014a8e:	2203      	movs	r2, #3
 8014a90:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8014a92:	e012      	b.n	8014aba <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8014a94:	68fb      	ldr	r3, [r7, #12]
 8014a96:	1c5a      	adds	r2, r3, #1
 8014a98:	60fa      	str	r2, [r7, #12]
 8014a9a:	7dfa      	ldrb	r2, [r7, #23]
 8014a9c:	1c51      	adds	r1, r2, #1
 8014a9e:	75f9      	strb	r1, [r7, #23]
 8014aa0:	4611      	mov	r1, r2
 8014aa2:	68ba      	ldr	r2, [r7, #8]
 8014aa4:	440a      	add	r2, r1
 8014aa6:	781b      	ldrb	r3, [r3, #0]
 8014aa8:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8014aaa:	7dfb      	ldrb	r3, [r7, #23]
 8014aac:	1c5a      	adds	r2, r3, #1
 8014aae:	75fa      	strb	r2, [r7, #23]
 8014ab0:	461a      	mov	r2, r3
 8014ab2:	68bb      	ldr	r3, [r7, #8]
 8014ab4:	4413      	add	r3, r2
 8014ab6:	2200      	movs	r2, #0
 8014ab8:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8014aba:	68fb      	ldr	r3, [r7, #12]
 8014abc:	781b      	ldrb	r3, [r3, #0]
 8014abe:	2b00      	cmp	r3, #0
 8014ac0:	d1e8      	bne.n	8014a94 <USBD_GetString+0x4e>
    }
  }
}
 8014ac2:	bf00      	nop
 8014ac4:	3718      	adds	r7, #24
 8014ac6:	46bd      	mov	sp, r7
 8014ac8:	bd80      	pop	{r7, pc}

08014aca <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8014aca:	b480      	push	{r7}
 8014acc:	b085      	sub	sp, #20
 8014ace:	af00      	add	r7, sp, #0
 8014ad0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8014ad2:	2300      	movs	r3, #0
 8014ad4:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8014ad6:	e005      	b.n	8014ae4 <USBD_GetLen+0x1a>
  {
    len++;
 8014ad8:	7bfb      	ldrb	r3, [r7, #15]
 8014ada:	3301      	adds	r3, #1
 8014adc:	73fb      	strb	r3, [r7, #15]
    buf++;
 8014ade:	687b      	ldr	r3, [r7, #4]
 8014ae0:	3301      	adds	r3, #1
 8014ae2:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8014ae4:	687b      	ldr	r3, [r7, #4]
 8014ae6:	781b      	ldrb	r3, [r3, #0]
 8014ae8:	2b00      	cmp	r3, #0
 8014aea:	d1f5      	bne.n	8014ad8 <USBD_GetLen+0xe>
  }

  return len;
 8014aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8014aee:	4618      	mov	r0, r3
 8014af0:	3714      	adds	r7, #20
 8014af2:	46bd      	mov	sp, r7
 8014af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014af8:	4770      	bx	lr

08014afa <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8014afa:	b580      	push	{r7, lr}
 8014afc:	b084      	sub	sp, #16
 8014afe:	af00      	add	r7, sp, #0
 8014b00:	60f8      	str	r0, [r7, #12]
 8014b02:	60b9      	str	r1, [r7, #8]
 8014b04:	4613      	mov	r3, r2
 8014b06:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8014b08:	68fb      	ldr	r3, [r7, #12]
 8014b0a:	2202      	movs	r2, #2
 8014b0c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8014b10:	88fa      	ldrh	r2, [r7, #6]
 8014b12:	68fb      	ldr	r3, [r7, #12]
 8014b14:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8014b16:	88fa      	ldrh	r2, [r7, #6]
 8014b18:	68fb      	ldr	r3, [r7, #12]
 8014b1a:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014b1c:	88fb      	ldrh	r3, [r7, #6]
 8014b1e:	68ba      	ldr	r2, [r7, #8]
 8014b20:	2100      	movs	r1, #0
 8014b22:	68f8      	ldr	r0, [r7, #12]
 8014b24:	f01a fd9c 	bl	802f660 <USBD_LL_Transmit>

  return USBD_OK;
 8014b28:	2300      	movs	r3, #0
}
 8014b2a:	4618      	mov	r0, r3
 8014b2c:	3710      	adds	r7, #16
 8014b2e:	46bd      	mov	sp, r7
 8014b30:	bd80      	pop	{r7, pc}

08014b32 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8014b32:	b580      	push	{r7, lr}
 8014b34:	b084      	sub	sp, #16
 8014b36:	af00      	add	r7, sp, #0
 8014b38:	60f8      	str	r0, [r7, #12]
 8014b3a:	60b9      	str	r1, [r7, #8]
 8014b3c:	4613      	mov	r3, r2
 8014b3e:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014b40:	88fb      	ldrh	r3, [r7, #6]
 8014b42:	68ba      	ldr	r2, [r7, #8]
 8014b44:	2100      	movs	r1, #0
 8014b46:	68f8      	ldr	r0, [r7, #12]
 8014b48:	f01a fd8a 	bl	802f660 <USBD_LL_Transmit>

  return USBD_OK;
 8014b4c:	2300      	movs	r3, #0
}
 8014b4e:	4618      	mov	r0, r3
 8014b50:	3710      	adds	r7, #16
 8014b52:	46bd      	mov	sp, r7
 8014b54:	bd80      	pop	{r7, pc}

08014b56 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8014b56:	b580      	push	{r7, lr}
 8014b58:	b084      	sub	sp, #16
 8014b5a:	af00      	add	r7, sp, #0
 8014b5c:	60f8      	str	r0, [r7, #12]
 8014b5e:	60b9      	str	r1, [r7, #8]
 8014b60:	4613      	mov	r3, r2
 8014b62:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8014b64:	68fb      	ldr	r3, [r7, #12]
 8014b66:	2203      	movs	r2, #3
 8014b68:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8014b6c:	88fa      	ldrh	r2, [r7, #6]
 8014b6e:	68fb      	ldr	r3, [r7, #12]
 8014b70:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8014b74:	88fa      	ldrh	r2, [r7, #6]
 8014b76:	68fb      	ldr	r3, [r7, #12]
 8014b78:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8014b7c:	88fb      	ldrh	r3, [r7, #6]
 8014b7e:	68ba      	ldr	r2, [r7, #8]
 8014b80:	2100      	movs	r1, #0
 8014b82:	68f8      	ldr	r0, [r7, #12]
 8014b84:	f01a fd8f 	bl	802f6a6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014b88:	2300      	movs	r3, #0
}
 8014b8a:	4618      	mov	r0, r3
 8014b8c:	3710      	adds	r7, #16
 8014b8e:	46bd      	mov	sp, r7
 8014b90:	bd80      	pop	{r7, pc}

08014b92 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8014b92:	b580      	push	{r7, lr}
 8014b94:	b084      	sub	sp, #16
 8014b96:	af00      	add	r7, sp, #0
 8014b98:	60f8      	str	r0, [r7, #12]
 8014b9a:	60b9      	str	r1, [r7, #8]
 8014b9c:	4613      	mov	r3, r2
 8014b9e:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8014ba0:	88fb      	ldrh	r3, [r7, #6]
 8014ba2:	68ba      	ldr	r2, [r7, #8]
 8014ba4:	2100      	movs	r1, #0
 8014ba6:	68f8      	ldr	r0, [r7, #12]
 8014ba8:	f01a fd7d 	bl	802f6a6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014bac:	2300      	movs	r3, #0
}
 8014bae:	4618      	mov	r0, r3
 8014bb0:	3710      	adds	r7, #16
 8014bb2:	46bd      	mov	sp, r7
 8014bb4:	bd80      	pop	{r7, pc}

08014bb6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8014bb6:	b580      	push	{r7, lr}
 8014bb8:	b082      	sub	sp, #8
 8014bba:	af00      	add	r7, sp, #0
 8014bbc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8014bbe:	687b      	ldr	r3, [r7, #4]
 8014bc0:	2204      	movs	r2, #4
 8014bc2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8014bc6:	2300      	movs	r3, #0
 8014bc8:	2200      	movs	r2, #0
 8014bca:	2100      	movs	r1, #0
 8014bcc:	6878      	ldr	r0, [r7, #4]
 8014bce:	f01a fd47 	bl	802f660 <USBD_LL_Transmit>

  return USBD_OK;
 8014bd2:	2300      	movs	r3, #0
}
 8014bd4:	4618      	mov	r0, r3
 8014bd6:	3708      	adds	r7, #8
 8014bd8:	46bd      	mov	sp, r7
 8014bda:	bd80      	pop	{r7, pc}

08014bdc <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8014bdc:	b580      	push	{r7, lr}
 8014bde:	b082      	sub	sp, #8
 8014be0:	af00      	add	r7, sp, #0
 8014be2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8014be4:	687b      	ldr	r3, [r7, #4]
 8014be6:	2205      	movs	r2, #5
 8014be8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014bec:	2300      	movs	r3, #0
 8014bee:	2200      	movs	r2, #0
 8014bf0:	2100      	movs	r1, #0
 8014bf2:	6878      	ldr	r0, [r7, #4]
 8014bf4:	f01a fd57 	bl	802f6a6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014bf8:	2300      	movs	r3, #0
}
 8014bfa:	4618      	mov	r0, r3
 8014bfc:	3708      	adds	r7, #8
 8014bfe:	46bd      	mov	sp, r7
 8014c00:	bd80      	pop	{r7, pc}

08014c02 <arm_mat_scale_f32>:
#else
arm_status arm_mat_scale_f32(
  const arm_matrix_instance_f32 * pSrc,
        float32_t                 scale,
        arm_matrix_instance_f32 * pDst)
{
 8014c02:	b480      	push	{r7}
 8014c04:	b08b      	sub	sp, #44	; 0x2c
 8014c06:	af00      	add	r7, sp, #0
 8014c08:	60f8      	str	r0, [r7, #12]
 8014c0a:	ed87 0a02 	vstr	s0, [r7, #8]
 8014c0e:	6079      	str	r1, [r7, #4]
  float32_t *pIn = pSrc->pData;                  /* Input data matrix pointer */
 8014c10:	68fb      	ldr	r3, [r7, #12]
 8014c12:	685b      	ldr	r3, [r3, #4]
 8014c14:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 8014c16:	687b      	ldr	r3, [r7, #4]
 8014c18:	685b      	ldr	r3, [r3, #4]
 8014c1a:	623b      	str	r3, [r7, #32]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
 8014c1c:	68fb      	ldr	r3, [r7, #12]
 8014c1e:	881b      	ldrh	r3, [r3, #0]
 8014c20:	461a      	mov	r2, r3
 8014c22:	68fb      	ldr	r3, [r7, #12]
 8014c24:	885b      	ldrh	r3, [r3, #2]
 8014c26:	fb02 f303 	mul.w	r3, r2, r3
 8014c2a:	61bb      	str	r3, [r7, #24]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 8014c2c:	69bb      	ldr	r3, [r7, #24]
 8014c2e:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 8014c30:	e010      	b.n	8014c54 <arm_mat_scale_f32+0x52>
    {
      /* C(m,n) = A(m,n) * scale */

      /* Scale and store result in destination buffer. */
      *pOut++ = (*pIn++) * scale;
 8014c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c34:	1d1a      	adds	r2, r3, #4
 8014c36:	627a      	str	r2, [r7, #36]	; 0x24
 8014c38:	ed93 7a00 	vldr	s14, [r3]
 8014c3c:	6a3b      	ldr	r3, [r7, #32]
 8014c3e:	1d1a      	adds	r2, r3, #4
 8014c40:	623a      	str	r2, [r7, #32]
 8014c42:	edd7 7a02 	vldr	s15, [r7, #8]
 8014c46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014c4a:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 8014c4e:	69fb      	ldr	r3, [r7, #28]
 8014c50:	3b01      	subs	r3, #1
 8014c52:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 8014c54:	69fb      	ldr	r3, [r7, #28]
 8014c56:	2b00      	cmp	r3, #0
 8014c58:	d1eb      	bne.n	8014c32 <arm_mat_scale_f32+0x30>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8014c5a:	2300      	movs	r3, #0
 8014c5c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return to application */
  return (status);
 8014c5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014c62:	4618      	mov	r0, r3
 8014c64:	372c      	adds	r7, #44	; 0x2c
 8014c66:	46bd      	mov	sp, r7
 8014c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c6c:	4770      	bx	lr

08014c6e <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 8014c6e:	b480      	push	{r7}
 8014c70:	b08b      	sub	sp, #44	; 0x2c
 8014c72:	af00      	add	r7, sp, #0
 8014c74:	6078      	str	r0, [r7, #4]
 8014c76:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 8014c78:	687b      	ldr	r3, [r7, #4]
 8014c7a:	685b      	ldr	r3, [r3, #4]
 8014c7c:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8014c7e:	683b      	ldr	r3, [r7, #0]
 8014c80:	685b      	ldr	r3, [r3, #4]
 8014c82:	613b      	str	r3, [r7, #16]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 8014c84:	687b      	ldr	r3, [r7, #4]
 8014c86:	881b      	ldrh	r3, [r3, #0]
 8014c88:	81fb      	strh	r3, [r7, #14]
  uint16_t nCols = pSrc->numCols;                /* number of columns */
 8014c8a:	687b      	ldr	r3, [r7, #4]
 8014c8c:	885b      	ldrh	r3, [r3, #2]
 8014c8e:	81bb      	strh	r3, [r7, #12]
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
 8014c90:	89fb      	ldrh	r3, [r7, #14]
 8014c92:	61bb      	str	r3, [r7, #24]
 8014c94:	2300      	movs	r3, #0
 8014c96:	617b      	str	r3, [r7, #20]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop */
    do
    {
      /* Pointer px is set to starting address of column being processed */
      px = pOut + i;
 8014c98:	697b      	ldr	r3, [r7, #20]
 8014c9a:	009b      	lsls	r3, r3, #2
 8014c9c:	693a      	ldr	r2, [r7, #16]
 8014c9e:	4413      	add	r3, r2
 8014ca0:	623b      	str	r3, [r7, #32]
      col = nCols % 0x4U;

#else

      /* Initialize col with number of samples */
      col = nCols;
 8014ca2:	89bb      	ldrh	r3, [r7, #12]
 8014ca4:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (col > 0U)
 8014ca6:	e00d      	b.n	8014cc4 <arm_mat_trans_f32+0x56>
      {
        /* Read and store input element in destination */
        *px = *pIn++;
 8014ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014caa:	1d1a      	adds	r2, r3, #4
 8014cac:	627a      	str	r2, [r7, #36]	; 0x24
 8014cae:	681a      	ldr	r2, [r3, #0]
 8014cb0:	6a3b      	ldr	r3, [r7, #32]
 8014cb2:	601a      	str	r2, [r3, #0]

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
 8014cb4:	89fb      	ldrh	r3, [r7, #14]
 8014cb6:	009b      	lsls	r3, r3, #2
 8014cb8:	6a3a      	ldr	r2, [r7, #32]
 8014cba:	4413      	add	r3, r2
 8014cbc:	623b      	str	r3, [r7, #32]

        /* Decrement column loop counter */
        col--;
 8014cbe:	69fb      	ldr	r3, [r7, #28]
 8014cc0:	3b01      	subs	r3, #1
 8014cc2:	61fb      	str	r3, [r7, #28]
      while (col > 0U)
 8014cc4:	69fb      	ldr	r3, [r7, #28]
 8014cc6:	2b00      	cmp	r3, #0
 8014cc8:	d1ee      	bne.n	8014ca8 <arm_mat_trans_f32+0x3a>
      }

      i++;
 8014cca:	697b      	ldr	r3, [r7, #20]
 8014ccc:	3301      	adds	r3, #1
 8014cce:	617b      	str	r3, [r7, #20]

      /* Decrement row loop counter */
      row--;
 8014cd0:	69bb      	ldr	r3, [r7, #24]
 8014cd2:	3b01      	subs	r3, #1
 8014cd4:	61bb      	str	r3, [r7, #24]

    } while (row > 0U);          /* row loop end */
 8014cd6:	69bb      	ldr	r3, [r7, #24]
 8014cd8:	2b00      	cmp	r3, #0
 8014cda:	d1dd      	bne.n	8014c98 <arm_mat_trans_f32+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8014cdc:	2300      	movs	r3, #0
 8014cde:	72fb      	strb	r3, [r7, #11]
  }

  /* Return to application */
  return (status);
 8014ce0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8014ce4:	4618      	mov	r0, r3
 8014ce6:	372c      	adds	r7, #44	; 0x2c
 8014ce8:	46bd      	mov	sp, r7
 8014cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cee:	4770      	bx	lr

08014cf0 <arm_max_f32>:
void arm_max_f32(
  const float32_t * pSrc,
        uint32_t blockSize,
        float32_t * pResult,
        uint32_t * pIndex)
{
 8014cf0:	b480      	push	{r7}
 8014cf2:	b089      	sub	sp, #36	; 0x24
 8014cf4:	af00      	add	r7, sp, #0
 8014cf6:	60f8      	str	r0, [r7, #12]
 8014cf8:	60b9      	str	r1, [r7, #8]
 8014cfa:	607a      	str	r2, [r7, #4]
 8014cfc:	603b      	str	r3, [r7, #0]
#if defined (ARM_MATH_LOOPUNROLL) && !defined(ARM_MATH_AUTOVECTORIZE)
        uint32_t index;                                /* index of maximum value */
#endif

  /* Initialise index value to zero. */
  outIndex = 0U;
 8014cfe:	2300      	movs	r3, #0
 8014d00:	617b      	str	r3, [r7, #20]

  /* Load first input value that act as reference value for comparision */
  out = *pSrc++;
 8014d02:	68fb      	ldr	r3, [r7, #12]
 8014d04:	1d1a      	adds	r2, r3, #4
 8014d06:	60fa      	str	r2, [r7, #12]
 8014d08:	681b      	ldr	r3, [r3, #0]
 8014d0a:	61fb      	str	r3, [r7, #28]
  blkCnt = (blockSize - 1U) % 4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = (blockSize - 1U);
 8014d0c:	68bb      	ldr	r3, [r7, #8]
 8014d0e:	3b01      	subs	r3, #1
 8014d10:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 8014d12:	e016      	b.n	8014d42 <arm_max_f32+0x52>
  {
    /* Initialize maxVal to the next consecutive values one by one */
    maxVal = *pSrc++;
 8014d14:	68fb      	ldr	r3, [r7, #12]
 8014d16:	1d1a      	adds	r2, r3, #4
 8014d18:	60fa      	str	r2, [r7, #12]
 8014d1a:	681b      	ldr	r3, [r3, #0]
 8014d1c:	613b      	str	r3, [r7, #16]

    /* compare for the maximum value */
    if (out < maxVal)
 8014d1e:	ed97 7a07 	vldr	s14, [r7, #28]
 8014d22:	edd7 7a04 	vldr	s15, [r7, #16]
 8014d26:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014d2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d2e:	d505      	bpl.n	8014d3c <arm_max_f32+0x4c>
    {
      /* Update the maximum value and it's index */
      out = maxVal;
 8014d30:	693b      	ldr	r3, [r7, #16]
 8014d32:	61fb      	str	r3, [r7, #28]
      outIndex = blockSize - blkCnt;
 8014d34:	68ba      	ldr	r2, [r7, #8]
 8014d36:	69bb      	ldr	r3, [r7, #24]
 8014d38:	1ad3      	subs	r3, r2, r3
 8014d3a:	617b      	str	r3, [r7, #20]
    }

    /* Decrement loop counter */
    blkCnt--;
 8014d3c:	69bb      	ldr	r3, [r7, #24]
 8014d3e:	3b01      	subs	r3, #1
 8014d40:	61bb      	str	r3, [r7, #24]
  while (blkCnt > 0U)
 8014d42:	69bb      	ldr	r3, [r7, #24]
 8014d44:	2b00      	cmp	r3, #0
 8014d46:	d1e5      	bne.n	8014d14 <arm_max_f32+0x24>
  }

  /* Store the maximum value and it's index into destination pointers */
  *pResult = out;
 8014d48:	687b      	ldr	r3, [r7, #4]
 8014d4a:	69fa      	ldr	r2, [r7, #28]
 8014d4c:	601a      	str	r2, [r3, #0]
  *pIndex = outIndex;
 8014d4e:	683b      	ldr	r3, [r7, #0]
 8014d50:	697a      	ldr	r2, [r7, #20]
 8014d52:	601a      	str	r2, [r3, #0]
}
 8014d54:	bf00      	nop
 8014d56:	3724      	adds	r7, #36	; 0x24
 8014d58:	46bd      	mov	sp, r7
 8014d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d5e:	4770      	bx	lr

08014d60 <arm_min_f32>:
void arm_min_f32(
  const float32_t * pSrc,
        uint32_t blockSize,
        float32_t * pResult,
        uint32_t * pIndex)
{
 8014d60:	b480      	push	{r7}
 8014d62:	b089      	sub	sp, #36	; 0x24
 8014d64:	af00      	add	r7, sp, #0
 8014d66:	60f8      	str	r0, [r7, #12]
 8014d68:	60b9      	str	r1, [r7, #8]
 8014d6a:	607a      	str	r2, [r7, #4]
 8014d6c:	603b      	str	r3, [r7, #0]
#if defined (ARM_MATH_LOOPUNROLL) && !defined(ARM_MATH_AUTOVECTORIZE)
        uint32_t index;                                /* index of maximum value */
#endif

  /* Initialise index value to zero. */
  outIndex = 0U;
 8014d6e:	2300      	movs	r3, #0
 8014d70:	617b      	str	r3, [r7, #20]

  /* Load first input value that act as reference value for comparision */
  out = *pSrc++;
 8014d72:	68fb      	ldr	r3, [r7, #12]
 8014d74:	1d1a      	adds	r2, r3, #4
 8014d76:	60fa      	str	r2, [r7, #12]
 8014d78:	681b      	ldr	r3, [r3, #0]
 8014d7a:	61fb      	str	r3, [r7, #28]
  blkCnt = (blockSize - 1U) % 4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = (blockSize - 1U);
 8014d7c:	68bb      	ldr	r3, [r7, #8]
 8014d7e:	3b01      	subs	r3, #1
 8014d80:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 8014d82:	e016      	b.n	8014db2 <arm_min_f32+0x52>
  {
    /* Initialize minVal to the next consecutive values one by one */
    minVal = *pSrc++;
 8014d84:	68fb      	ldr	r3, [r7, #12]
 8014d86:	1d1a      	adds	r2, r3, #4
 8014d88:	60fa      	str	r2, [r7, #12]
 8014d8a:	681b      	ldr	r3, [r3, #0]
 8014d8c:	613b      	str	r3, [r7, #16]

    /* compare for the minimum value */
    if (out > minVal)
 8014d8e:	ed97 7a07 	vldr	s14, [r7, #28]
 8014d92:	edd7 7a04 	vldr	s15, [r7, #16]
 8014d96:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014d9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d9e:	dd05      	ble.n	8014dac <arm_min_f32+0x4c>
    {
      /* Update the minimum value and it's index */
      out = minVal;
 8014da0:	693b      	ldr	r3, [r7, #16]
 8014da2:	61fb      	str	r3, [r7, #28]
      outIndex = blockSize - blkCnt;
 8014da4:	68ba      	ldr	r2, [r7, #8]
 8014da6:	69bb      	ldr	r3, [r7, #24]
 8014da8:	1ad3      	subs	r3, r2, r3
 8014daa:	617b      	str	r3, [r7, #20]
    }

    /* Decrement loop counter */
    blkCnt--;
 8014dac:	69bb      	ldr	r3, [r7, #24]
 8014dae:	3b01      	subs	r3, #1
 8014db0:	61bb      	str	r3, [r7, #24]
  while (blkCnt > 0U)
 8014db2:	69bb      	ldr	r3, [r7, #24]
 8014db4:	2b00      	cmp	r3, #0
 8014db6:	d1e5      	bne.n	8014d84 <arm_min_f32+0x24>
  }

  /* Store the minimum value and it's index into destination pointers */
  *pResult = out;
 8014db8:	687b      	ldr	r3, [r7, #4]
 8014dba:	69fa      	ldr	r2, [r7, #28]
 8014dbc:	601a      	str	r2, [r3, #0]
  *pIndex = outIndex;
 8014dbe:	683b      	ldr	r3, [r7, #0]
 8014dc0:	697a      	ldr	r2, [r7, #20]
 8014dc2:	601a      	str	r2, [r3, #0]
}
 8014dc4:	bf00      	nop
 8014dc6:	3724      	adds	r7, #36	; 0x24
 8014dc8:	46bd      	mov	sp, r7
 8014dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dce:	4770      	bx	lr

08014dd0 <arm_rms_f32>:
#else
void arm_rms_f32(
  const float32_t * pSrc,
        uint32_t blockSize,
        float32_t * pResult)
{
 8014dd0:	b580      	push	{r7, lr}
 8014dd2:	b08a      	sub	sp, #40	; 0x28
 8014dd4:	af00      	add	r7, sp, #0
 8014dd6:	60f8      	str	r0, [r7, #12]
 8014dd8:	60b9      	str	r1, [r7, #8]
 8014dda:	607a      	str	r2, [r7, #4]
        uint32_t blkCnt;                               /* Loop counter */
        float32_t sum = 0.0f;                          /* Temporary result storage */
 8014ddc:	f04f 0300 	mov.w	r3, #0
 8014de0:	623b      	str	r3, [r7, #32]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 8014de2:	68bb      	ldr	r3, [r7, #8]
 8014de4:	627b      	str	r3, [r7, #36]	; 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 8014de6:	e011      	b.n	8014e0c <arm_rms_f32+0x3c>
  {
    /* C = A[0] * A[0] + A[1] * A[1] + ... + A[blockSize-1] * A[blockSize-1] */

    in = *pSrc++;
 8014de8:	68fb      	ldr	r3, [r7, #12]
 8014dea:	1d1a      	adds	r2, r3, #4
 8014dec:	60fa      	str	r2, [r7, #12]
 8014dee:	681b      	ldr	r3, [r3, #0]
 8014df0:	61fb      	str	r3, [r7, #28]
    /* Compute sum of squares and store result in a temporary variable. */
    sum += ( in * in);
 8014df2:	edd7 7a07 	vldr	s15, [r7, #28]
 8014df6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8014dfa:	ed97 7a08 	vldr	s14, [r7, #32]
 8014dfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014e02:	edc7 7a08 	vstr	s15, [r7, #32]

    /* Decrement loop counter */
    blkCnt--;
 8014e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e08:	3b01      	subs	r3, #1
 8014e0a:	627b      	str	r3, [r7, #36]	; 0x24
  while (blkCnt > 0U)
 8014e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e0e:	2b00      	cmp	r3, #0
 8014e10:	d1ea      	bne.n	8014de8 <arm_rms_f32+0x18>
  }

  /* Compute Rms and store result in destination */
  arm_sqrt_f32(sum / (float32_t) blockSize, pResult);
 8014e12:	68bb      	ldr	r3, [r7, #8]
 8014e14:	ee07 3a90 	vmov	s15, r3
 8014e18:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8014e1c:	edd7 6a08 	vldr	s13, [r7, #32]
 8014e20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014e24:	edc7 7a06 	vstr	s15, [r7, #24]
 8014e28:	687b      	ldr	r3, [r7, #4]
 8014e2a:	617b      	str	r3, [r7, #20]
    if (in >= 0.0f)
 8014e2c:	edd7 7a06 	vldr	s15, [r7, #24]
 8014e30:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014e34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e38:	db09      	blt.n	8014e4e <arm_rms_f32+0x7e>
      *pOut = sqrtf(in);
 8014e3a:	ed97 0a06 	vldr	s0, [r7, #24]
 8014e3e:	f01b f911 	bl	8030064 <sqrtf>
 8014e42:	eef0 7a40 	vmov.f32	s15, s0
 8014e46:	697b      	ldr	r3, [r7, #20]
 8014e48:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 8014e4c:	e004      	b.n	8014e58 <arm_rms_f32+0x88>
      *pOut = 0.0f;
 8014e4e:	697b      	ldr	r3, [r7, #20]
 8014e50:	f04f 0200 	mov.w	r2, #0
 8014e54:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8014e56:	bf00      	nop
}
 8014e58:	bf00      	nop
 8014e5a:	3728      	adds	r7, #40	; 0x28
 8014e5c:	46bd      	mov	sp, r7
 8014e5e:	bd80      	pop	{r7, pc}

08014e60 <arm_bitreversal_32>:

void arm_bitreversal_32(
        uint32_t *pSrc,
  const uint16_t bitRevLen,
  const uint16_t *pBitRevTab)
{
 8014e60:	b480      	push	{r7}
 8014e62:	b089      	sub	sp, #36	; 0x24
 8014e64:	af00      	add	r7, sp, #0
 8014e66:	60f8      	str	r0, [r7, #12]
 8014e68:	460b      	mov	r3, r1
 8014e6a:	607a      	str	r2, [r7, #4]
 8014e6c:	817b      	strh	r3, [r7, #10]
  uint32_t a, b, i, tmp;

  for (i = 0; i < bitRevLen; )
 8014e6e:	2300      	movs	r3, #0
 8014e70:	61fb      	str	r3, [r7, #28]
 8014e72:	e043      	b.n	8014efc <arm_bitreversal_32+0x9c>
  {
     a = pBitRevTab[i    ] >> 2;
 8014e74:	69fb      	ldr	r3, [r7, #28]
 8014e76:	005b      	lsls	r3, r3, #1
 8014e78:	687a      	ldr	r2, [r7, #4]
 8014e7a:	4413      	add	r3, r2
 8014e7c:	881b      	ldrh	r3, [r3, #0]
 8014e7e:	089b      	lsrs	r3, r3, #2
 8014e80:	b29b      	uxth	r3, r3
 8014e82:	61bb      	str	r3, [r7, #24]
     b = pBitRevTab[i + 1] >> 2;
 8014e84:	69fb      	ldr	r3, [r7, #28]
 8014e86:	3301      	adds	r3, #1
 8014e88:	005b      	lsls	r3, r3, #1
 8014e8a:	687a      	ldr	r2, [r7, #4]
 8014e8c:	4413      	add	r3, r2
 8014e8e:	881b      	ldrh	r3, [r3, #0]
 8014e90:	089b      	lsrs	r3, r3, #2
 8014e92:	b29b      	uxth	r3, r3
 8014e94:	617b      	str	r3, [r7, #20]

     //real
     tmp = pSrc[a];
 8014e96:	69bb      	ldr	r3, [r7, #24]
 8014e98:	009b      	lsls	r3, r3, #2
 8014e9a:	68fa      	ldr	r2, [r7, #12]
 8014e9c:	4413      	add	r3, r2
 8014e9e:	681b      	ldr	r3, [r3, #0]
 8014ea0:	613b      	str	r3, [r7, #16]
     pSrc[a] = pSrc[b];
 8014ea2:	697b      	ldr	r3, [r7, #20]
 8014ea4:	009b      	lsls	r3, r3, #2
 8014ea6:	68fa      	ldr	r2, [r7, #12]
 8014ea8:	441a      	add	r2, r3
 8014eaa:	69bb      	ldr	r3, [r7, #24]
 8014eac:	009b      	lsls	r3, r3, #2
 8014eae:	68f9      	ldr	r1, [r7, #12]
 8014eb0:	440b      	add	r3, r1
 8014eb2:	6812      	ldr	r2, [r2, #0]
 8014eb4:	601a      	str	r2, [r3, #0]
     pSrc[b] = tmp;
 8014eb6:	697b      	ldr	r3, [r7, #20]
 8014eb8:	009b      	lsls	r3, r3, #2
 8014eba:	68fa      	ldr	r2, [r7, #12]
 8014ebc:	4413      	add	r3, r2
 8014ebe:	693a      	ldr	r2, [r7, #16]
 8014ec0:	601a      	str	r2, [r3, #0]

     //complex
     tmp = pSrc[a+1];
 8014ec2:	69bb      	ldr	r3, [r7, #24]
 8014ec4:	3301      	adds	r3, #1
 8014ec6:	009b      	lsls	r3, r3, #2
 8014ec8:	68fa      	ldr	r2, [r7, #12]
 8014eca:	4413      	add	r3, r2
 8014ecc:	681b      	ldr	r3, [r3, #0]
 8014ece:	613b      	str	r3, [r7, #16]
     pSrc[a+1] = pSrc[b+1];
 8014ed0:	697b      	ldr	r3, [r7, #20]
 8014ed2:	3301      	adds	r3, #1
 8014ed4:	009b      	lsls	r3, r3, #2
 8014ed6:	68fa      	ldr	r2, [r7, #12]
 8014ed8:	441a      	add	r2, r3
 8014eda:	69bb      	ldr	r3, [r7, #24]
 8014edc:	3301      	adds	r3, #1
 8014ede:	009b      	lsls	r3, r3, #2
 8014ee0:	68f9      	ldr	r1, [r7, #12]
 8014ee2:	440b      	add	r3, r1
 8014ee4:	6812      	ldr	r2, [r2, #0]
 8014ee6:	601a      	str	r2, [r3, #0]
     pSrc[b+1] = tmp;
 8014ee8:	697b      	ldr	r3, [r7, #20]
 8014eea:	3301      	adds	r3, #1
 8014eec:	009b      	lsls	r3, r3, #2
 8014eee:	68fa      	ldr	r2, [r7, #12]
 8014ef0:	4413      	add	r3, r2
 8014ef2:	693a      	ldr	r2, [r7, #16]
 8014ef4:	601a      	str	r2, [r3, #0]

    i += 2;
 8014ef6:	69fb      	ldr	r3, [r7, #28]
 8014ef8:	3302      	adds	r3, #2
 8014efa:	61fb      	str	r3, [r7, #28]
  for (i = 0; i < bitRevLen; )
 8014efc:	897b      	ldrh	r3, [r7, #10]
 8014efe:	69fa      	ldr	r2, [r7, #28]
 8014f00:	429a      	cmp	r2, r3
 8014f02:	d3b7      	bcc.n	8014e74 <arm_bitreversal_32+0x14>
  }
}
 8014f04:	bf00      	nop
 8014f06:	bf00      	nop
 8014f08:	3724      	adds	r7, #36	; 0x24
 8014f0a:	46bd      	mov	sp, r7
 8014f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f10:	4770      	bx	lr

08014f12 <arm_cfft_radix8by2_f32>:
  @endcode
 
 */

void arm_cfft_radix8by2_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 8014f12:	b580      	push	{r7, lr}
 8014f14:	b0a0      	sub	sp, #128	; 0x80
 8014f16:	af00      	add	r7, sp, #0
 8014f18:	6078      	str	r0, [r7, #4]
 8014f1a:	6039      	str	r1, [r7, #0]
  uint32_t    L  = S->fftLen;
 8014f1c:	687b      	ldr	r3, [r7, #4]
 8014f1e:	881b      	ldrh	r3, [r3, #0]
 8014f20:	66bb      	str	r3, [r7, #104]	; 0x68
  float32_t * pCol1, * pCol2, * pMid1, * pMid2;
  float32_t * p2 = p1 + L;
 8014f22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8014f24:	009b      	lsls	r3, r3, #2
 8014f26:	683a      	ldr	r2, [r7, #0]
 8014f28:	4413      	add	r3, r2
 8014f2a:	677b      	str	r3, [r7, #116]	; 0x74
  const float32_t * tw = (float32_t *) S->pTwiddle;
 8014f2c:	687b      	ldr	r3, [r7, #4]
 8014f2e:	685b      	ldr	r3, [r3, #4]
 8014f30:	673b      	str	r3, [r7, #112]	; 0x70
  float32_t t1[4], t2[4], t3[4], t4[4], twR, twI;
  float32_t m0, m1, m2, m3;
  uint32_t l;

  pCol1 = p1;
 8014f32:	683b      	ldr	r3, [r7, #0]
 8014f34:	667b      	str	r3, [r7, #100]	; 0x64
  pCol2 = p2;
 8014f36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014f38:	663b      	str	r3, [r7, #96]	; 0x60

  /* Define new length */
  L >>= 1;
 8014f3a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8014f3c:	085b      	lsrs	r3, r3, #1
 8014f3e:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Initialize mid pointers */
  pMid1 = p1 + L;
 8014f40:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8014f42:	009b      	lsls	r3, r3, #2
 8014f44:	683a      	ldr	r2, [r7, #0]
 8014f46:	4413      	add	r3, r2
 8014f48:	67fb      	str	r3, [r7, #124]	; 0x7c
  pMid2 = p2 + L;
 8014f4a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8014f4c:	009b      	lsls	r3, r3, #2
 8014f4e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8014f50:	4413      	add	r3, r2
 8014f52:	67bb      	str	r3, [r7, #120]	; 0x78

  /* do two dot Fourier transform */
  for (l = L >> 2; l > 0; l-- )
 8014f54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8014f56:	089b      	lsrs	r3, r3, #2
 8014f58:	66fb      	str	r3, [r7, #108]	; 0x6c
 8014f5a:	e1b6      	b.n	80152ca <arm_cfft_radix8by2_f32+0x3b8>
  {
    t1[0] = p1[0];
 8014f5c:	683b      	ldr	r3, [r7, #0]
 8014f5e:	681b      	ldr	r3, [r3, #0]
 8014f60:	63bb      	str	r3, [r7, #56]	; 0x38
    t1[1] = p1[1];
 8014f62:	683b      	ldr	r3, [r7, #0]
 8014f64:	685b      	ldr	r3, [r3, #4]
 8014f66:	63fb      	str	r3, [r7, #60]	; 0x3c
    t1[2] = p1[2];
 8014f68:	683b      	ldr	r3, [r7, #0]
 8014f6a:	689b      	ldr	r3, [r3, #8]
 8014f6c:	643b      	str	r3, [r7, #64]	; 0x40
    t1[3] = p1[3];
 8014f6e:	683b      	ldr	r3, [r7, #0]
 8014f70:	68db      	ldr	r3, [r3, #12]
 8014f72:	647b      	str	r3, [r7, #68]	; 0x44

    t2[0] = p2[0];
 8014f74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014f76:	681b      	ldr	r3, [r3, #0]
 8014f78:	62bb      	str	r3, [r7, #40]	; 0x28
    t2[1] = p2[1];
 8014f7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014f7c:	685b      	ldr	r3, [r3, #4]
 8014f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    t2[2] = p2[2];
 8014f80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014f82:	689b      	ldr	r3, [r3, #8]
 8014f84:	633b      	str	r3, [r7, #48]	; 0x30
    t2[3] = p2[3];
 8014f86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014f88:	68db      	ldr	r3, [r3, #12]
 8014f8a:	637b      	str	r3, [r7, #52]	; 0x34

    t3[0] = pMid1[0];
 8014f8c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014f8e:	681b      	ldr	r3, [r3, #0]
 8014f90:	61bb      	str	r3, [r7, #24]
    t3[1] = pMid1[1];
 8014f92:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014f94:	685b      	ldr	r3, [r3, #4]
 8014f96:	61fb      	str	r3, [r7, #28]
    t3[2] = pMid1[2];
 8014f98:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014f9a:	689b      	ldr	r3, [r3, #8]
 8014f9c:	623b      	str	r3, [r7, #32]
    t3[3] = pMid1[3];
 8014f9e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014fa0:	68db      	ldr	r3, [r3, #12]
 8014fa2:	627b      	str	r3, [r7, #36]	; 0x24

    t4[0] = pMid2[0];
 8014fa4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014fa6:	681b      	ldr	r3, [r3, #0]
 8014fa8:	60bb      	str	r3, [r7, #8]
    t4[1] = pMid2[1];
 8014faa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014fac:	685b      	ldr	r3, [r3, #4]
 8014fae:	60fb      	str	r3, [r7, #12]
    t4[2] = pMid2[2];
 8014fb0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014fb2:	689b      	ldr	r3, [r3, #8]
 8014fb4:	613b      	str	r3, [r7, #16]
    t4[3] = pMid2[3];
 8014fb6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014fb8:	68db      	ldr	r3, [r3, #12]
 8014fba:	617b      	str	r3, [r7, #20]

    *p1++ = t1[0] + t2[0];
 8014fbc:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8014fc0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8014fc4:	683b      	ldr	r3, [r7, #0]
 8014fc6:	1d1a      	adds	r2, r3, #4
 8014fc8:	603a      	str	r2, [r7, #0]
 8014fca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014fce:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[1] + t2[1];
 8014fd2:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8014fd6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8014fda:	683b      	ldr	r3, [r7, #0]
 8014fdc:	1d1a      	adds	r2, r3, #4
 8014fde:	603a      	str	r2, [r7, #0]
 8014fe0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014fe4:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[2] + t2[2];
 8014fe8:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8014fec:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8014ff0:	683b      	ldr	r3, [r7, #0]
 8014ff2:	1d1a      	adds	r2, r3, #4
 8014ff4:	603a      	str	r2, [r7, #0]
 8014ff6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014ffa:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[3] + t2[3];    /* col 1 */
 8014ffe:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8015002:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8015006:	683b      	ldr	r3, [r7, #0]
 8015008:	1d1a      	adds	r2, r3, #4
 801500a:	603a      	str	r2, [r7, #0]
 801500c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015010:	edc3 7a00 	vstr	s15, [r3]

    t2[0] = t1[0] - t2[0];
 8015014:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8015018:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 801501c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015020:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    t2[1] = t1[1] - t2[1];
 8015024:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8015028:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 801502c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015030:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[2] = t1[2] - t2[2];
 8015034:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8015038:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 801503c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015040:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    t2[3] = t1[3] - t2[3];    /* for col 2 */
 8015044:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8015048:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 801504c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015050:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

    *pMid1++ = t3[0] + t4[0];
 8015054:	ed97 7a06 	vldr	s14, [r7, #24]
 8015058:	edd7 7a02 	vldr	s15, [r7, #8]
 801505c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801505e:	1d1a      	adds	r2, r3, #4
 8015060:	67fa      	str	r2, [r7, #124]	; 0x7c
 8015062:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015066:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[1] + t4[1];
 801506a:	ed97 7a07 	vldr	s14, [r7, #28]
 801506e:	edd7 7a03 	vldr	s15, [r7, #12]
 8015072:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8015074:	1d1a      	adds	r2, r3, #4
 8015076:	67fa      	str	r2, [r7, #124]	; 0x7c
 8015078:	ee77 7a27 	vadd.f32	s15, s14, s15
 801507c:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[2] + t4[2];
 8015080:	ed97 7a08 	vldr	s14, [r7, #32]
 8015084:	edd7 7a04 	vldr	s15, [r7, #16]
 8015088:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801508a:	1d1a      	adds	r2, r3, #4
 801508c:	67fa      	str	r2, [r7, #124]	; 0x7c
 801508e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015092:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[3] + t4[3]; /* col 1 */
 8015096:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 801509a:	edd7 7a05 	vldr	s15, [r7, #20]
 801509e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80150a0:	1d1a      	adds	r2, r3, #4
 80150a2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80150a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80150a8:	edc3 7a00 	vstr	s15, [r3]

    t4[0] = t4[0] - t3[0];
 80150ac:	ed97 7a02 	vldr	s14, [r7, #8]
 80150b0:	edd7 7a06 	vldr	s15, [r7, #24]
 80150b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80150b8:	edc7 7a02 	vstr	s15, [r7, #8]
    t4[1] = t4[1] - t3[1];
 80150bc:	ed97 7a03 	vldr	s14, [r7, #12]
 80150c0:	edd7 7a07 	vldr	s15, [r7, #28]
 80150c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80150c8:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[2] = t4[2] - t3[2];
 80150cc:	ed97 7a04 	vldr	s14, [r7, #16]
 80150d0:	edd7 7a08 	vldr	s15, [r7, #32]
 80150d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80150d8:	edc7 7a04 	vstr	s15, [r7, #16]
    t4[3] = t4[3] - t3[3];    /* for col 2 */
 80150dc:	ed97 7a05 	vldr	s14, [r7, #20]
 80150e0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80150e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80150e8:	edc7 7a05 	vstr	s15, [r7, #20]

    twR = *tw++;
 80150ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80150ee:	1d1a      	adds	r2, r3, #4
 80150f0:	673a      	str	r2, [r7, #112]	; 0x70
 80150f2:	681b      	ldr	r3, [r3, #0]
 80150f4:	65fb      	str	r3, [r7, #92]	; 0x5c
    twI = *tw++;
 80150f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80150f8:	1d1a      	adds	r2, r3, #4
 80150fa:	673a      	str	r2, [r7, #112]	; 0x70
 80150fc:	681b      	ldr	r3, [r3, #0]
 80150fe:	65bb      	str	r3, [r7, #88]	; 0x58

    /* multiply by twiddle factors */
    m0 = t2[0] * twR;
 8015100:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8015104:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8015108:	ee67 7a27 	vmul.f32	s15, s14, s15
 801510c:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t2[1] * twI;
 8015110:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8015114:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8015118:	ee67 7a27 	vmul.f32	s15, s14, s15
 801511c:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t2[1] * twR;
 8015120:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8015124:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8015128:	ee67 7a27 	vmul.f32	s15, s14, s15
 801512c:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t2[0] * twI;
 8015130:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8015134:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8015138:	ee67 7a27 	vmul.f32	s15, s14, s15
 801513c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    /* R  =  R  *  Tr - I * Ti */
    *p2++ = m0 + m1;
 8015140:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015142:	1d1a      	adds	r2, r3, #4
 8015144:	677a      	str	r2, [r7, #116]	; 0x74
 8015146:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 801514a:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 801514e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015152:	edc3 7a00 	vstr	s15, [r3]
    /* I  =  I  *  Tr + R * Ti */
    *p2++ = m2 - m3;
 8015156:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015158:	1d1a      	adds	r2, r3, #4
 801515a:	677a      	str	r2, [r7, #116]	; 0x74
 801515c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8015160:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8015164:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015168:	edc3 7a00 	vstr	s15, [r3]

    /* use vertical symmetry */
    /*  0.9988 - 0.0491i <==> -0.0491 - 0.9988i */
    m0 = t4[0] * twI;
 801516c:	edd7 7a02 	vldr	s15, [r7, #8]
 8015170:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8015174:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015178:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t4[1] * twR;
 801517c:	edd7 7a03 	vldr	s15, [r7, #12]
 8015180:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8015184:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015188:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t4[1] * twI;
 801518c:	edd7 7a03 	vldr	s15, [r7, #12]
 8015190:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8015194:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015198:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t4[0] * twR;
 801519c:	edd7 7a02 	vldr	s15, [r7, #8]
 80151a0:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80151a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80151a8:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    *pMid2++ = m0 - m1;
 80151ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80151ae:	1d1a      	adds	r2, r3, #4
 80151b0:	67ba      	str	r2, [r7, #120]	; 0x78
 80151b2:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80151b6:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80151ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80151be:	edc3 7a00 	vstr	s15, [r3]
    *pMid2++ = m2 + m3;
 80151c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80151c4:	1d1a      	adds	r2, r3, #4
 80151c6:	67ba      	str	r2, [r7, #120]	; 0x78
 80151c8:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80151cc:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80151d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80151d4:	edc3 7a00 	vstr	s15, [r3]

    twR = *tw++;
 80151d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80151da:	1d1a      	adds	r2, r3, #4
 80151dc:	673a      	str	r2, [r7, #112]	; 0x70
 80151de:	681b      	ldr	r3, [r3, #0]
 80151e0:	65fb      	str	r3, [r7, #92]	; 0x5c
    twI = *tw++;
 80151e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80151e4:	1d1a      	adds	r2, r3, #4
 80151e6:	673a      	str	r2, [r7, #112]	; 0x70
 80151e8:	681b      	ldr	r3, [r3, #0]
 80151ea:	65bb      	str	r3, [r7, #88]	; 0x58

    m0 = t2[2] * twR;
 80151ec:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80151f0:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80151f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80151f8:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t2[3] * twI;
 80151fc:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8015200:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8015204:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015208:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t2[3] * twR;
 801520c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8015210:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8015214:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015218:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t2[2] * twI;
 801521c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8015220:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8015224:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015228:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    *p2++ = m0 + m1;
 801522c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801522e:	1d1a      	adds	r2, r3, #4
 8015230:	677a      	str	r2, [r7, #116]	; 0x74
 8015232:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8015236:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 801523a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801523e:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 8015242:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015244:	1d1a      	adds	r2, r3, #4
 8015246:	677a      	str	r2, [r7, #116]	; 0x74
 8015248:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 801524c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8015250:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015254:	edc3 7a00 	vstr	s15, [r3]

    m0 = t4[2] * twI;
 8015258:	edd7 7a04 	vldr	s15, [r7, #16]
 801525c:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8015260:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015264:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t4[3] * twR;
 8015268:	edd7 7a05 	vldr	s15, [r7, #20]
 801526c:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8015270:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015274:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t4[3] * twI;
 8015278:	edd7 7a05 	vldr	s15, [r7, #20]
 801527c:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8015280:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015284:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t4[2] * twR;
 8015288:	edd7 7a04 	vldr	s15, [r7, #16]
 801528c:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8015290:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015294:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    *pMid2++ = m0 - m1;
 8015298:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801529a:	1d1a      	adds	r2, r3, #4
 801529c:	67ba      	str	r2, [r7, #120]	; 0x78
 801529e:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80152a2:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80152a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80152aa:	edc3 7a00 	vstr	s15, [r3]
    *pMid2++ = m2 + m3;
 80152ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80152b0:	1d1a      	adds	r2, r3, #4
 80152b2:	67ba      	str	r2, [r7, #120]	; 0x78
 80152b4:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80152b8:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80152bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80152c0:	edc3 7a00 	vstr	s15, [r3]
  for (l = L >> 2; l > 0; l-- )
 80152c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80152c6:	3b01      	subs	r3, #1
 80152c8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80152ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80152cc:	2b00      	cmp	r3, #0
 80152ce:	f47f ae45 	bne.w	8014f5c <arm_cfft_radix8by2_f32+0x4a>
  }

  /* first col */
  arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 2U);
 80152d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80152d4:	b299      	uxth	r1, r3
 80152d6:	687b      	ldr	r3, [r7, #4]
 80152d8:	685a      	ldr	r2, [r3, #4]
 80152da:	2302      	movs	r3, #2
 80152dc:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80152de:	f000 fef1 	bl	80160c4 <arm_radix8_butterfly_f32>

  /* second col */
  arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 2U);
 80152e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80152e4:	b299      	uxth	r1, r3
 80152e6:	687b      	ldr	r3, [r7, #4]
 80152e8:	685a      	ldr	r2, [r3, #4]
 80152ea:	2302      	movs	r3, #2
 80152ec:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80152ee:	f000 fee9 	bl	80160c4 <arm_radix8_butterfly_f32>
}
 80152f2:	bf00      	nop
 80152f4:	3780      	adds	r7, #128	; 0x80
 80152f6:	46bd      	mov	sp, r7
 80152f8:	bd80      	pop	{r7, pc}

080152fa <arm_cfft_radix8by4_f32>:

void arm_cfft_radix8by4_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 80152fa:	b580      	push	{r7, lr}
 80152fc:	b0ac      	sub	sp, #176	; 0xb0
 80152fe:	af00      	add	r7, sp, #0
 8015300:	6078      	str	r0, [r7, #4]
 8015302:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen >> 1;
 8015304:	687b      	ldr	r3, [r7, #4]
 8015306:	881b      	ldrh	r3, [r3, #0]
 8015308:	085b      	lsrs	r3, r3, #1
 801530a:	b29b      	uxth	r3, r3
 801530c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    float32_t * pCol1, *pCol2, *pCol3, *pCol4, *pEnd1, *pEnd2, *pEnd3, *pEnd4;
    const float32_t *tw2, *tw3, *tw4;
    float32_t * p2 = p1 + L;
 8015310:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8015314:	009b      	lsls	r3, r3, #2
 8015316:	683a      	ldr	r2, [r7, #0]
 8015318:	4413      	add	r3, r2
 801531a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    float32_t * p3 = p2 + L;
 801531e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8015322:	009b      	lsls	r3, r3, #2
 8015324:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8015328:	4413      	add	r3, r2
 801532a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    float32_t * p4 = p3 + L;
 801532e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8015332:	009b      	lsls	r3, r3, #2
 8015334:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8015338:	4413      	add	r3, r2
 801533a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    float32_t t2[4], t3[4], t4[4], twR, twI;
    float32_t p1ap3_0, p1sp3_0, p1ap3_1, p1sp3_1;
    float32_t m0, m1, m2, m3;
    uint32_t l, twMod2, twMod3, twMod4;

    pCol1 = p1;         /* points to real values by default */
 801533e:	683b      	ldr	r3, [r7, #0]
 8015340:	67fb      	str	r3, [r7, #124]	; 0x7c
    pCol2 = p2;
 8015342:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8015346:	67bb      	str	r3, [r7, #120]	; 0x78
    pCol3 = p3;
 8015348:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801534c:	677b      	str	r3, [r7, #116]	; 0x74
    pCol4 = p4;
 801534e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8015352:	673b      	str	r3, [r7, #112]	; 0x70
    pEnd1 = p2 - 1;     /* points to imaginary values by default */
 8015354:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8015358:	3b04      	subs	r3, #4
 801535a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    pEnd2 = p3 - 1;
 801535e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015362:	3b04      	subs	r3, #4
 8015364:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    pEnd3 = p4 - 1;
 8015368:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801536c:	3b04      	subs	r3, #4
 801536e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    pEnd4 = pEnd3 + L;
 8015372:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8015376:	009b      	lsls	r3, r3, #2
 8015378:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 801537c:	4413      	add	r3, r2
 801537e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
 8015382:	687b      	ldr	r3, [r7, #4]
 8015384:	685b      	ldr	r3, [r3, #4]
 8015386:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801538a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801538e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8015392:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8015396:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    L >>= 1;
 801539a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801539e:	085b      	lsrs	r3, r3, #1
 80153a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    /* do four dot Fourier transform */

    twMod2 = 2;
 80153a4:	2302      	movs	r3, #2
 80153a6:	66fb      	str	r3, [r7, #108]	; 0x6c
    twMod3 = 4;
 80153a8:	2304      	movs	r3, #4
 80153aa:	66bb      	str	r3, [r7, #104]	; 0x68
    twMod4 = 6;
 80153ac:	2306      	movs	r3, #6
 80153ae:	667b      	str	r3, [r7, #100]	; 0x64

    /* TOP */
    p1ap3_0 = p1[0] + p3[0];
 80153b0:	683b      	ldr	r3, [r7, #0]
 80153b2:	ed93 7a00 	vldr	s14, [r3]
 80153b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80153ba:	edd3 7a00 	vldr	s15, [r3]
 80153be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80153c2:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 80153c6:	683b      	ldr	r3, [r7, #0]
 80153c8:	ed93 7a00 	vldr	s14, [r3]
 80153cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80153d0:	edd3 7a00 	vldr	s15, [r3]
 80153d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80153d8:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 80153dc:	683b      	ldr	r3, [r7, #0]
 80153de:	3304      	adds	r3, #4
 80153e0:	ed93 7a00 	vldr	s14, [r3]
 80153e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80153e8:	3304      	adds	r3, #4
 80153ea:	edd3 7a00 	vldr	s15, [r3]
 80153ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80153f2:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 80153f6:	683b      	ldr	r3, [r7, #0]
 80153f8:	3304      	adds	r3, #4
 80153fa:	ed93 7a00 	vldr	s14, [r3]
 80153fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015402:	3304      	adds	r3, #4
 8015404:	edd3 7a00 	vldr	s15, [r3]
 8015408:	ee77 7a67 	vsub.f32	s15, s14, s15
 801540c:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8015410:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8015414:	3304      	adds	r3, #4
 8015416:	ed93 7a00 	vldr	s14, [r3]
 801541a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 801541e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015422:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8015426:	3304      	adds	r3, #4
 8015428:	edd3 7a00 	vldr	s15, [r3]
 801542c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015430:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8015434:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8015438:	edd3 7a00 	vldr	s15, [r3]
 801543c:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8015440:	ee37 7a67 	vsub.f32	s14, s14, s15
 8015444:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8015448:	edd3 7a00 	vldr	s15, [r3]
 801544c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015450:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    /* col 3 */
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8015454:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8015458:	edd3 7a00 	vldr	s15, [r3]
 801545c:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8015460:	ee37 7a67 	vsub.f32	s14, s14, s15
 8015464:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8015468:	edd3 7a00 	vldr	s15, [r3]
 801546c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015470:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8015474:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8015478:	3304      	adds	r3, #4
 801547a:	edd3 7a00 	vldr	s15, [r3]
 801547e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8015482:	ee37 7a67 	vsub.f32	s14, s14, s15
 8015486:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801548a:	3304      	adds	r3, #4
 801548c:	edd3 7a00 	vldr	s15, [r3]
 8015490:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015494:	edc7 7a08 	vstr	s15, [r7, #32]
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8015498:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801549c:	3304      	adds	r3, #4
 801549e:	edd3 7a00 	vldr	s15, [r3]
 80154a2:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80154a6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80154aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80154ae:	3304      	adds	r3, #4
 80154b0:	edd3 7a00 	vldr	s15, [r3]
 80154b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80154b8:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 80154bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80154c0:	ed93 7a00 	vldr	s14, [r3]
 80154c4:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80154c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80154cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80154d0:	edd3 7a00 	vldr	s15, [r3]
 80154d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80154d8:	edc7 7a04 	vstr	s15, [r7, #16]
    /* col 1 */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 80154dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80154e0:	ed93 7a00 	vldr	s14, [r3]
 80154e4:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80154e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80154ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80154f0:	edd3 7a00 	vldr	s15, [r3]
 80154f4:	683b      	ldr	r3, [r7, #0]
 80154f6:	1d1a      	adds	r2, r3, #4
 80154f8:	603a      	str	r2, [r7, #0]
 80154fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80154fe:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8015502:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8015506:	3304      	adds	r3, #4
 8015508:	ed93 7a00 	vldr	s14, [r3]
 801550c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8015510:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015514:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8015518:	3304      	adds	r3, #4
 801551a:	edd3 7a00 	vldr	s15, [r3]
 801551e:	683b      	ldr	r3, [r7, #0]
 8015520:	1d1a      	adds	r2, r3, #4
 8015522:	603a      	str	r2, [r7, #0]
 8015524:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015528:	edc3 7a00 	vstr	s15, [r3]

    /* Twiddle factors are ones */
    *p2++ = t2[0];
 801552c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8015530:	1d1a      	adds	r2, r3, #4
 8015532:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8015536:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015538:	601a      	str	r2, [r3, #0]
    *p2++ = t2[1];
 801553a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801553e:	1d1a      	adds	r2, r3, #4
 8015540:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8015544:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015546:	601a      	str	r2, [r3, #0]
    *p3++ = t3[0];
 8015548:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801554c:	1d1a      	adds	r2, r3, #4
 801554e:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8015552:	69fa      	ldr	r2, [r7, #28]
 8015554:	601a      	str	r2, [r3, #0]
    *p3++ = t3[1];
 8015556:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801555a:	1d1a      	adds	r2, r3, #4
 801555c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8015560:	6a3a      	ldr	r2, [r7, #32]
 8015562:	601a      	str	r2, [r3, #0]
    *p4++ = t4[0];
 8015564:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8015568:	1d1a      	adds	r2, r3, #4
 801556a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 801556e:	68fa      	ldr	r2, [r7, #12]
 8015570:	601a      	str	r2, [r3, #0]
    *p4++ = t4[1];
 8015572:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8015576:	1d1a      	adds	r2, r3, #4
 8015578:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 801557c:	693a      	ldr	r2, [r7, #16]
 801557e:	601a      	str	r2, [r3, #0]

    tw2 += twMod2;
 8015580:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015582:	009b      	lsls	r3, r3, #2
 8015584:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8015588:	4413      	add	r3, r2
 801558a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    tw3 += twMod3;
 801558e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015590:	009b      	lsls	r3, r3, #2
 8015592:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8015596:	4413      	add	r3, r2
 8015598:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    tw4 += twMod4;
 801559c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801559e:	009b      	lsls	r3, r3, #2
 80155a0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80155a4:	4413      	add	r3, r2
 80155a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    for (l = (L - 2) >> 1; l > 0; l-- )
 80155aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80155ae:	3b02      	subs	r3, #2
 80155b0:	085b      	lsrs	r3, r3, #1
 80155b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80155b6:	e31a      	b.n	8015bee <arm_cfft_radix8by4_f32+0x8f4>
    {
      /* TOP */
      p1ap3_0 = p1[0] + p3[0];
 80155b8:	683b      	ldr	r3, [r7, #0]
 80155ba:	ed93 7a00 	vldr	s14, [r3]
 80155be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80155c2:	edd3 7a00 	vldr	s15, [r3]
 80155c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80155ca:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
      p1sp3_0 = p1[0] - p3[0];
 80155ce:	683b      	ldr	r3, [r7, #0]
 80155d0:	ed93 7a00 	vldr	s14, [r3]
 80155d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80155d8:	edd3 7a00 	vldr	s15, [r3]
 80155dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80155e0:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
      p1ap3_1 = p1[1] + p3[1];
 80155e4:	683b      	ldr	r3, [r7, #0]
 80155e6:	3304      	adds	r3, #4
 80155e8:	ed93 7a00 	vldr	s14, [r3]
 80155ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80155f0:	3304      	adds	r3, #4
 80155f2:	edd3 7a00 	vldr	s15, [r3]
 80155f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80155fa:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
      p1sp3_1 = p1[1] - p3[1];
 80155fe:	683b      	ldr	r3, [r7, #0]
 8015600:	3304      	adds	r3, #4
 8015602:	ed93 7a00 	vldr	s14, [r3]
 8015606:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801560a:	3304      	adds	r3, #4
 801560c:	edd3 7a00 	vldr	s15, [r3]
 8015610:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015614:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
      /* col 2 */
      t2[0] = p1sp3_0 + p2[1] - p4[1];
 8015618:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801561c:	3304      	adds	r3, #4
 801561e:	ed93 7a00 	vldr	s14, [r3]
 8015622:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8015626:	ee37 7a27 	vadd.f32	s14, s14, s15
 801562a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801562e:	3304      	adds	r3, #4
 8015630:	edd3 7a00 	vldr	s15, [r3]
 8015634:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015638:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
      t2[1] = p1sp3_1 - p2[0] + p4[0];
 801563c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8015640:	edd3 7a00 	vldr	s15, [r3]
 8015644:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8015648:	ee37 7a67 	vsub.f32	s14, s14, s15
 801564c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8015650:	edd3 7a00 	vldr	s15, [r3]
 8015654:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015658:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
      /* col 3 */
      t3[0] = p1ap3_0 - p2[0] - p4[0];
 801565c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8015660:	edd3 7a00 	vldr	s15, [r3]
 8015664:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8015668:	ee37 7a67 	vsub.f32	s14, s14, s15
 801566c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8015670:	edd3 7a00 	vldr	s15, [r3]
 8015674:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015678:	edc7 7a07 	vstr	s15, [r7, #28]
      t3[1] = p1ap3_1 - p2[1] - p4[1];
 801567c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8015680:	3304      	adds	r3, #4
 8015682:	edd3 7a00 	vldr	s15, [r3]
 8015686:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 801568a:	ee37 7a67 	vsub.f32	s14, s14, s15
 801568e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8015692:	3304      	adds	r3, #4
 8015694:	edd3 7a00 	vldr	s15, [r3]
 8015698:	ee77 7a67 	vsub.f32	s15, s14, s15
 801569c:	edc7 7a08 	vstr	s15, [r7, #32]
      /* col 4 */
      t4[0] = p1sp3_0 - p2[1] + p4[1];
 80156a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80156a4:	3304      	adds	r3, #4
 80156a6:	edd3 7a00 	vldr	s15, [r3]
 80156aa:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80156ae:	ee37 7a67 	vsub.f32	s14, s14, s15
 80156b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80156b6:	3304      	adds	r3, #4
 80156b8:	edd3 7a00 	vldr	s15, [r3]
 80156bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80156c0:	edc7 7a03 	vstr	s15, [r7, #12]
      t4[1] = p1sp3_1 + p2[0] - p4[0];
 80156c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80156c8:	ed93 7a00 	vldr	s14, [r3]
 80156cc:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80156d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80156d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80156d8:	edd3 7a00 	vldr	s15, [r3]
 80156dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80156e0:	edc7 7a04 	vstr	s15, [r7, #16]
      /* col 1 - top */
      *p1++ = p1ap3_0 + p2[0] + p4[0];
 80156e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80156e8:	ed93 7a00 	vldr	s14, [r3]
 80156ec:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80156f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80156f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80156f8:	edd3 7a00 	vldr	s15, [r3]
 80156fc:	683b      	ldr	r3, [r7, #0]
 80156fe:	1d1a      	adds	r2, r3, #4
 8015700:	603a      	str	r2, [r7, #0]
 8015702:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015706:	edc3 7a00 	vstr	s15, [r3]
      *p1++ = p1ap3_1 + p2[1] + p4[1];
 801570a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801570e:	3304      	adds	r3, #4
 8015710:	ed93 7a00 	vldr	s14, [r3]
 8015714:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8015718:	ee37 7a27 	vadd.f32	s14, s14, s15
 801571c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8015720:	3304      	adds	r3, #4
 8015722:	edd3 7a00 	vldr	s15, [r3]
 8015726:	683b      	ldr	r3, [r7, #0]
 8015728:	1d1a      	adds	r2, r3, #4
 801572a:	603a      	str	r2, [r7, #0]
 801572c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015730:	edc3 7a00 	vstr	s15, [r3]

      /* BOTTOM */
      p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 8015734:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8015738:	3b04      	subs	r3, #4
 801573a:	ed93 7a00 	vldr	s14, [r3]
 801573e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8015742:	3b04      	subs	r3, #4
 8015744:	edd3 7a00 	vldr	s15, [r3]
 8015748:	ee77 7a27 	vadd.f32	s15, s14, s15
 801574c:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
      p1sp3_1 = pEnd1[-1] - pEnd3[-1];
 8015750:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8015754:	3b04      	subs	r3, #4
 8015756:	ed93 7a00 	vldr	s14, [r3]
 801575a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801575e:	3b04      	subs	r3, #4
 8015760:	edd3 7a00 	vldr	s15, [r3]
 8015764:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015768:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
      p1ap3_0 = pEnd1[ 0] + pEnd3[0];
 801576c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8015770:	ed93 7a00 	vldr	s14, [r3]
 8015774:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8015778:	edd3 7a00 	vldr	s15, [r3]
 801577c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015780:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
      p1sp3_0 = pEnd1[ 0] - pEnd3[0];
 8015784:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8015788:	ed93 7a00 	vldr	s14, [r3]
 801578c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8015790:	edd3 7a00 	vldr	s15, [r3]
 8015794:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015798:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
      /* col 2 */
      t2[2] = pEnd2[0] - pEnd4[0] + p1sp3_1;
 801579c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80157a0:	ed93 7a00 	vldr	s14, [r3]
 80157a4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80157a8:	edd3 7a00 	vldr	s15, [r3]
 80157ac:	ee37 7a67 	vsub.f32	s14, s14, s15
 80157b0:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80157b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80157b8:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
      t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 80157bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80157c0:	ed93 7a00 	vldr	s14, [r3]
 80157c4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80157c8:	edd3 7a00 	vldr	s15, [r3]
 80157cc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80157d0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80157d4:	3b04      	subs	r3, #4
 80157d6:	edd3 7a00 	vldr	s15, [r3]
 80157da:	ee37 7a67 	vsub.f32	s14, s14, s15
 80157de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80157e2:	3b04      	subs	r3, #4
 80157e4:	edd3 7a00 	vldr	s15, [r3]
 80157e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80157ec:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
      /* col 3 */
      t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 80157f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80157f4:	3b04      	subs	r3, #4
 80157f6:	edd3 7a00 	vldr	s15, [r3]
 80157fa:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80157fe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8015802:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8015806:	3b04      	subs	r3, #4
 8015808:	edd3 7a00 	vldr	s15, [r3]
 801580c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015810:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t3[3] = p1ap3_0 - pEnd2[ 0] - pEnd4[ 0];
 8015814:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8015818:	edd3 7a00 	vldr	s15, [r3]
 801581c:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8015820:	ee37 7a67 	vsub.f32	s14, s14, s15
 8015824:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8015828:	edd3 7a00 	vldr	s15, [r3]
 801582c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015830:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
      /* col 4 */
      t4[2] = pEnd2[ 0] - pEnd4[ 0] - p1sp3_1;
 8015834:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8015838:	ed93 7a00 	vldr	s14, [r3]
 801583c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8015840:	edd3 7a00 	vldr	s15, [r3]
 8015844:	ee37 7a67 	vsub.f32	s14, s14, s15
 8015848:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 801584c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015850:	edc7 7a05 	vstr	s15, [r7, #20]
      t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 8015854:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8015858:	3b04      	subs	r3, #4
 801585a:	ed93 7a00 	vldr	s14, [r3]
 801585e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8015862:	3b04      	subs	r3, #4
 8015864:	edd3 7a00 	vldr	s15, [r3]
 8015868:	ee37 7a67 	vsub.f32	s14, s14, s15
 801586c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8015870:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015874:	edc7 7a06 	vstr	s15, [r7, #24]
      /* col 1 - Bottom */
      *pEnd1-- = p1ap3_0 + pEnd2[ 0] + pEnd4[ 0];
 8015878:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801587c:	ed93 7a00 	vldr	s14, [r3]
 8015880:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8015884:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015888:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801588c:	edd3 7a00 	vldr	s15, [r3]
 8015890:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8015894:	1f1a      	subs	r2, r3, #4
 8015896:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 801589a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801589e:	edc3 7a00 	vstr	s15, [r3]
      *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 80158a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80158a6:	3b04      	subs	r3, #4
 80158a8:	ed93 7a00 	vldr	s14, [r3]
 80158ac:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80158b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80158b4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80158b8:	3b04      	subs	r3, #4
 80158ba:	edd3 7a00 	vldr	s15, [r3]
 80158be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80158c2:	1f1a      	subs	r2, r3, #4
 80158c4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80158c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80158cc:	edc3 7a00 	vstr	s15, [r3]

      /* COL 2 */
      /* read twiddle factors */
      twR = *tw2++;
 80158d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80158d4:	1d1a      	adds	r2, r3, #4
 80158d6:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80158da:	681b      	ldr	r3, [r3, #0]
 80158dc:	653b      	str	r3, [r7, #80]	; 0x50
      twI = *tw2++;
 80158de:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80158e2:	1d1a      	adds	r2, r3, #4
 80158e4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80158e8:	681b      	ldr	r3, [r3, #0]
 80158ea:	64fb      	str	r3, [r7, #76]	; 0x4c
      /* multiply by twiddle factors */
      /*  let    Z1 = a + i(b),   Z2 = c + i(d) */
      /*   =>  Z1 * Z2  =  (a*c - b*d) + i(b*c + a*d) */

      /* Top */
      m0 = t2[0] * twR;
 80158ec:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80158f0:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80158f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80158f8:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t2[1] * twI;
 80158fc:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8015900:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8015904:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015908:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t2[1] * twR;
 801590c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8015910:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8015914:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015918:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t2[0] * twI;
 801591c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8015920:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8015924:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015928:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *p2++ = m0 + m1;
 801592c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8015930:	1d1a      	adds	r2, r3, #4
 8015932:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8015936:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 801593a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 801593e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015942:	edc3 7a00 	vstr	s15, [r3]
      *p2++ = m2 - m3;
 8015946:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801594a:	1d1a      	adds	r2, r3, #4
 801594c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8015950:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8015954:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8015958:	ee77 7a67 	vsub.f32	s15, s14, s15
 801595c:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 2 */
      /* 0.9997 - 0.0245i  <==>  0.0245 - 0.9997i */
      /* Bottom */
      m0 = t2[3] * twI;
 8015960:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8015964:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8015968:	ee67 7a27 	vmul.f32	s15, s14, s15
 801596c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t2[2] * twR;
 8015970:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8015974:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8015978:	ee67 7a27 	vmul.f32	s15, s14, s15
 801597c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t2[2] * twI;
 8015980:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8015984:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8015988:	ee67 7a27 	vmul.f32	s15, s14, s15
 801598c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t2[3] * twR;
 8015990:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8015994:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8015998:	ee67 7a27 	vmul.f32	s15, s14, s15
 801599c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *pEnd2-- = m0 - m1;
 80159a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80159a4:	1f1a      	subs	r2, r3, #4
 80159a6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80159aa:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80159ae:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80159b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80159b6:	edc3 7a00 	vstr	s15, [r3]
      *pEnd2-- = m2 + m3;
 80159ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80159be:	1f1a      	subs	r2, r3, #4
 80159c0:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80159c4:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80159c8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80159cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80159d0:	edc3 7a00 	vstr	s15, [r3]

      /* COL 3 */
      twR = tw3[0];
 80159d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80159d8:	681b      	ldr	r3, [r3, #0]
 80159da:	653b      	str	r3, [r7, #80]	; 0x50
      twI = tw3[1];
 80159dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80159e0:	685b      	ldr	r3, [r3, #4]
 80159e2:	64fb      	str	r3, [r7, #76]	; 0x4c
      tw3 += twMod3;
 80159e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80159e6:	009b      	lsls	r3, r3, #2
 80159e8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80159ec:	4413      	add	r3, r2
 80159ee:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
      /* Top */
      m0 = t3[0] * twR;
 80159f2:	edd7 7a07 	vldr	s15, [r7, #28]
 80159f6:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80159fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80159fe:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t3[1] * twI;
 8015a02:	edd7 7a08 	vldr	s15, [r7, #32]
 8015a06:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8015a0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015a0e:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t3[1] * twR;
 8015a12:	edd7 7a08 	vldr	s15, [r7, #32]
 8015a16:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8015a1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015a1e:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t3[0] * twI;
 8015a22:	edd7 7a07 	vldr	s15, [r7, #28]
 8015a26:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8015a2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015a2e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *p3++ = m0 + m1;
 8015a32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015a36:	1d1a      	adds	r2, r3, #4
 8015a38:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8015a3c:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8015a40:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8015a44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015a48:	edc3 7a00 	vstr	s15, [r3]
      *p3++ = m2 - m3;
 8015a4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015a50:	1d1a      	adds	r2, r3, #4
 8015a52:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8015a56:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8015a5a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8015a5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015a62:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 3 */
      /* 0.9988 - 0.0491i  <==>  -0.9988 - 0.0491i */
      /* Bottom */
      m0 = -t3[3] * twR;
 8015a66:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8015a6a:	eef1 7a67 	vneg.f32	s15, s15
 8015a6e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8015a72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015a76:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 =  t3[2] * twI;
 8015a7a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8015a7e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8015a82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015a86:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 =  t3[2] * twR;
 8015a8a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8015a8e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8015a92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015a96:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 =  t3[3] * twI;
 8015a9a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8015a9e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8015aa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015aa6:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *pEnd3-- = m0 - m1;
 8015aaa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8015aae:	1f1a      	subs	r2, r3, #4
 8015ab0:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8015ab4:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8015ab8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8015abc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015ac0:	edc3 7a00 	vstr	s15, [r3]
      *pEnd3-- = m3 - m2;
 8015ac4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8015ac8:	1f1a      	subs	r2, r3, #4
 8015aca:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8015ace:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8015ad2:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8015ad6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015ada:	edc3 7a00 	vstr	s15, [r3]

      /* COL 4 */
      twR = tw4[0];
 8015ade:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8015ae2:	681b      	ldr	r3, [r3, #0]
 8015ae4:	653b      	str	r3, [r7, #80]	; 0x50
      twI = tw4[1];
 8015ae6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8015aea:	685b      	ldr	r3, [r3, #4]
 8015aec:	64fb      	str	r3, [r7, #76]	; 0x4c
      tw4 += twMod4;
 8015aee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015af0:	009b      	lsls	r3, r3, #2
 8015af2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8015af6:	4413      	add	r3, r2
 8015af8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      /* Top */
      m0 = t4[0] * twR;
 8015afc:	edd7 7a03 	vldr	s15, [r7, #12]
 8015b00:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8015b04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015b08:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t4[1] * twI;
 8015b0c:	edd7 7a04 	vldr	s15, [r7, #16]
 8015b10:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8015b14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015b18:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t4[1] * twR;
 8015b1c:	edd7 7a04 	vldr	s15, [r7, #16]
 8015b20:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8015b24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015b28:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t4[0] * twI;
 8015b2c:	edd7 7a03 	vldr	s15, [r7, #12]
 8015b30:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8015b34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015b38:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *p4++ = m0 + m1;
 8015b3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8015b40:	1d1a      	adds	r2, r3, #4
 8015b42:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8015b46:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8015b4a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8015b4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015b52:	edc3 7a00 	vstr	s15, [r3]
      *p4++ = m2 - m3;
 8015b56:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8015b5a:	1d1a      	adds	r2, r3, #4
 8015b5c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8015b60:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8015b64:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8015b68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015b6c:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 4 */
      /* 0.9973 - 0.0736i  <==>  -0.0736 + 0.9973i */
      /* Bottom */
      m0 = t4[3] * twI;
 8015b70:	edd7 7a06 	vldr	s15, [r7, #24]
 8015b74:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8015b78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015b7c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t4[2] * twR;
 8015b80:	edd7 7a05 	vldr	s15, [r7, #20]
 8015b84:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8015b88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015b8c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t4[2] * twI;
 8015b90:	edd7 7a05 	vldr	s15, [r7, #20]
 8015b94:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8015b98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015b9c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t4[3] * twR;
 8015ba0:	edd7 7a06 	vldr	s15, [r7, #24]
 8015ba4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8015ba8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015bac:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *pEnd4-- = m0 - m1;
 8015bb0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8015bb4:	1f1a      	subs	r2, r3, #4
 8015bb6:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8015bba:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8015bbe:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8015bc2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015bc6:	edc3 7a00 	vstr	s15, [r3]
      *pEnd4-- = m2 + m3;
 8015bca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8015bce:	1f1a      	subs	r2, r3, #4
 8015bd0:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8015bd4:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8015bd8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8015bdc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015be0:	edc3 7a00 	vstr	s15, [r3]
    for (l = (L - 2) >> 1; l > 0; l-- )
 8015be4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8015be8:	3b01      	subs	r3, #1
 8015bea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8015bee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8015bf2:	2b00      	cmp	r3, #0
 8015bf4:	f47f ace0 	bne.w	80155b8 <arm_cfft_radix8by4_f32+0x2be>
    }

    /* MIDDLE */
    /* Twiddle factors are */
    /*  1.0000  0.7071-0.7071i  -1.0000i  -0.7071-0.7071i */
    p1ap3_0 = p1[0] + p3[0];
 8015bf8:	683b      	ldr	r3, [r7, #0]
 8015bfa:	ed93 7a00 	vldr	s14, [r3]
 8015bfe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015c02:	edd3 7a00 	vldr	s15, [r3]
 8015c06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015c0a:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 8015c0e:	683b      	ldr	r3, [r7, #0]
 8015c10:	ed93 7a00 	vldr	s14, [r3]
 8015c14:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015c18:	edd3 7a00 	vldr	s15, [r3]
 8015c1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015c20:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 8015c24:	683b      	ldr	r3, [r7, #0]
 8015c26:	3304      	adds	r3, #4
 8015c28:	ed93 7a00 	vldr	s14, [r3]
 8015c2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015c30:	3304      	adds	r3, #4
 8015c32:	edd3 7a00 	vldr	s15, [r3]
 8015c36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015c3a:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 8015c3e:	683b      	ldr	r3, [r7, #0]
 8015c40:	3304      	adds	r3, #4
 8015c42:	ed93 7a00 	vldr	s14, [r3]
 8015c46:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015c4a:	3304      	adds	r3, #4
 8015c4c:	edd3 7a00 	vldr	s15, [r3]
 8015c50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015c54:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8015c58:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8015c5c:	3304      	adds	r3, #4
 8015c5e:	ed93 7a00 	vldr	s14, [r3]
 8015c62:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8015c66:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015c6a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8015c6e:	3304      	adds	r3, #4
 8015c70:	edd3 7a00 	vldr	s15, [r3]
 8015c74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015c78:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8015c7c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8015c80:	edd3 7a00 	vldr	s15, [r3]
 8015c84:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8015c88:	ee37 7a67 	vsub.f32	s14, s14, s15
 8015c8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8015c90:	edd3 7a00 	vldr	s15, [r3]
 8015c94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015c98:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    /* col 3 */
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8015c9c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8015ca0:	edd3 7a00 	vldr	s15, [r3]
 8015ca4:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8015ca8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8015cac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8015cb0:	edd3 7a00 	vldr	s15, [r3]
 8015cb4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015cb8:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8015cbc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8015cc0:	3304      	adds	r3, #4
 8015cc2:	edd3 7a00 	vldr	s15, [r3]
 8015cc6:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8015cca:	ee37 7a67 	vsub.f32	s14, s14, s15
 8015cce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8015cd2:	3304      	adds	r3, #4
 8015cd4:	edd3 7a00 	vldr	s15, [r3]
 8015cd8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015cdc:	edc7 7a08 	vstr	s15, [r7, #32]
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8015ce0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8015ce4:	3304      	adds	r3, #4
 8015ce6:	edd3 7a00 	vldr	s15, [r3]
 8015cea:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8015cee:	ee37 7a67 	vsub.f32	s14, s14, s15
 8015cf2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8015cf6:	3304      	adds	r3, #4
 8015cf8:	edd3 7a00 	vldr	s15, [r3]
 8015cfc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015d00:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8015d04:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8015d08:	ed93 7a00 	vldr	s14, [r3]
 8015d0c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8015d10:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015d14:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8015d18:	edd3 7a00 	vldr	s15, [r3]
 8015d1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015d20:	edc7 7a04 	vstr	s15, [r7, #16]
    /* col 1 - Top */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8015d24:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8015d28:	ed93 7a00 	vldr	s14, [r3]
 8015d2c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8015d30:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015d34:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8015d38:	edd3 7a00 	vldr	s15, [r3]
 8015d3c:	683b      	ldr	r3, [r7, #0]
 8015d3e:	1d1a      	adds	r2, r3, #4
 8015d40:	603a      	str	r2, [r7, #0]
 8015d42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015d46:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8015d4a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8015d4e:	3304      	adds	r3, #4
 8015d50:	ed93 7a00 	vldr	s14, [r3]
 8015d54:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8015d58:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015d5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8015d60:	3304      	adds	r3, #4
 8015d62:	edd3 7a00 	vldr	s15, [r3]
 8015d66:	683b      	ldr	r3, [r7, #0]
 8015d68:	1d1a      	adds	r2, r3, #4
 8015d6a:	603a      	str	r2, [r7, #0]
 8015d6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015d70:	edc3 7a00 	vstr	s15, [r3]

    /* COL 2 */
    twR = tw2[0];
 8015d74:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8015d78:	681b      	ldr	r3, [r3, #0]
 8015d7a:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw2[1];
 8015d7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8015d80:	685b      	ldr	r3, [r3, #4]
 8015d82:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t2[0] * twR;
 8015d84:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8015d88:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8015d8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015d90:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t2[1] * twI;
 8015d94:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8015d98:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8015d9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015da0:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t2[1] * twR;
 8015da4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8015da8:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8015dac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015db0:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t2[0] * twI;
 8015db4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8015db8:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8015dbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015dc0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p2++ = m0 + m1;
 8015dc4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8015dc8:	1d1a      	adds	r2, r3, #4
 8015dca:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8015dce:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8015dd2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8015dd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015dda:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 8015dde:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8015de2:	1d1a      	adds	r2, r3, #4
 8015de4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8015de8:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8015dec:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8015df0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015df4:	edc3 7a00 	vstr	s15, [r3]
    /* COL 3 */
    twR = tw3[0];
 8015df8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8015dfc:	681b      	ldr	r3, [r3, #0]
 8015dfe:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw3[1];
 8015e00:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8015e04:	685b      	ldr	r3, [r3, #4]
 8015e06:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t3[0] * twR;
 8015e08:	edd7 7a07 	vldr	s15, [r7, #28]
 8015e0c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8015e10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015e14:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t3[1] * twI;
 8015e18:	edd7 7a08 	vldr	s15, [r7, #32]
 8015e1c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8015e20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015e24:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t3[1] * twR;
 8015e28:	edd7 7a08 	vldr	s15, [r7, #32]
 8015e2c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8015e30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015e34:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t3[0] * twI;
 8015e38:	edd7 7a07 	vldr	s15, [r7, #28]
 8015e3c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8015e40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015e44:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p3++ = m0 + m1;
 8015e48:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015e4c:	1d1a      	adds	r2, r3, #4
 8015e4e:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8015e52:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8015e56:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8015e5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015e5e:	edc3 7a00 	vstr	s15, [r3]
    *p3++ = m2 - m3;
 8015e62:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015e66:	1d1a      	adds	r2, r3, #4
 8015e68:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8015e6c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8015e70:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8015e74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015e78:	edc3 7a00 	vstr	s15, [r3]
    /* COL 4 */
    twR = tw4[0];
 8015e7c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8015e80:	681b      	ldr	r3, [r3, #0]
 8015e82:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw4[1];
 8015e84:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8015e88:	685b      	ldr	r3, [r3, #4]
 8015e8a:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t4[0] * twR;
 8015e8c:	edd7 7a03 	vldr	s15, [r7, #12]
 8015e90:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8015e94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015e98:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t4[1] * twI;
 8015e9c:	edd7 7a04 	vldr	s15, [r7, #16]
 8015ea0:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8015ea4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015ea8:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t4[1] * twR;
 8015eac:	edd7 7a04 	vldr	s15, [r7, #16]
 8015eb0:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8015eb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015eb8:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t4[0] * twI;
 8015ebc:	edd7 7a03 	vldr	s15, [r7, #12]
 8015ec0:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8015ec4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015ec8:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p4++ = m0 + m1;
 8015ecc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8015ed0:	1d1a      	adds	r2, r3, #4
 8015ed2:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8015ed6:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8015eda:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8015ede:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015ee2:	edc3 7a00 	vstr	s15, [r3]
    *p4++ = m2 - m3;
 8015ee6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8015eea:	1d1a      	adds	r2, r3, #4
 8015eec:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8015ef0:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8015ef4:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8015ef8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015efc:	edc3 7a00 	vstr	s15, [r3]

    /* first col */
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
 8015f00:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8015f04:	b299      	uxth	r1, r3
 8015f06:	687b      	ldr	r3, [r7, #4]
 8015f08:	685a      	ldr	r2, [r3, #4]
 8015f0a:	2304      	movs	r3, #4
 8015f0c:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8015f0e:	f000 f8d9 	bl	80160c4 <arm_radix8_butterfly_f32>

    /* second col */
    arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 4U);
 8015f12:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8015f16:	b299      	uxth	r1, r3
 8015f18:	687b      	ldr	r3, [r7, #4]
 8015f1a:	685a      	ldr	r2, [r3, #4]
 8015f1c:	2304      	movs	r3, #4
 8015f1e:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8015f20:	f000 f8d0 	bl	80160c4 <arm_radix8_butterfly_f32>

    /* third col */
    arm_radix8_butterfly_f32 (pCol3, L, (float32_t *) S->pTwiddle, 4U);
 8015f24:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8015f28:	b299      	uxth	r1, r3
 8015f2a:	687b      	ldr	r3, [r7, #4]
 8015f2c:	685a      	ldr	r2, [r3, #4]
 8015f2e:	2304      	movs	r3, #4
 8015f30:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8015f32:	f000 f8c7 	bl	80160c4 <arm_radix8_butterfly_f32>

    /* fourth col */
    arm_radix8_butterfly_f32 (pCol4, L, (float32_t *) S->pTwiddle, 4U);
 8015f36:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8015f3a:	b299      	uxth	r1, r3
 8015f3c:	687b      	ldr	r3, [r7, #4]
 8015f3e:	685a      	ldr	r2, [r3, #4]
 8015f40:	2304      	movs	r3, #4
 8015f42:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8015f44:	f000 f8be 	bl	80160c4 <arm_radix8_butterfly_f32>
}
 8015f48:	bf00      	nop
 8015f4a:	37b0      	adds	r7, #176	; 0xb0
 8015f4c:	46bd      	mov	sp, r7
 8015f4e:	bd80      	pop	{r7, pc}

08015f50 <arm_cfft_f32>:
void arm_cfft_f32(
  const arm_cfft_instance_f32 * S,
        float32_t * p1,
        uint8_t ifftFlag,
        uint8_t bitReverseFlag)
{
 8015f50:	b580      	push	{r7, lr}
 8015f52:	b088      	sub	sp, #32
 8015f54:	af00      	add	r7, sp, #0
 8015f56:	60f8      	str	r0, [r7, #12]
 8015f58:	60b9      	str	r1, [r7, #8]
 8015f5a:	4611      	mov	r1, r2
 8015f5c:	461a      	mov	r2, r3
 8015f5e:	460b      	mov	r3, r1
 8015f60:	71fb      	strb	r3, [r7, #7]
 8015f62:	4613      	mov	r3, r2
 8015f64:	71bb      	strb	r3, [r7, #6]
  uint32_t  L = S->fftLen, l;
 8015f66:	68fb      	ldr	r3, [r7, #12]
 8015f68:	881b      	ldrh	r3, [r3, #0]
 8015f6a:	617b      	str	r3, [r7, #20]
  float32_t invL, * pSrc;

  if (ifftFlag == 1U)
 8015f6c:	79fb      	ldrb	r3, [r7, #7]
 8015f6e:	2b01      	cmp	r3, #1
 8015f70:	d117      	bne.n	8015fa2 <arm_cfft_f32+0x52>
  {
    /* Conjugate input data */
    pSrc = p1 + 1;
 8015f72:	68bb      	ldr	r3, [r7, #8]
 8015f74:	3304      	adds	r3, #4
 8015f76:	61bb      	str	r3, [r7, #24]
    for (l = 0; l < L; l++)
 8015f78:	2300      	movs	r3, #0
 8015f7a:	61fb      	str	r3, [r7, #28]
 8015f7c:	e00d      	b.n	8015f9a <arm_cfft_f32+0x4a>
    {
      *pSrc = -*pSrc;
 8015f7e:	69bb      	ldr	r3, [r7, #24]
 8015f80:	edd3 7a00 	vldr	s15, [r3]
 8015f84:	eef1 7a67 	vneg.f32	s15, s15
 8015f88:	69bb      	ldr	r3, [r7, #24]
 8015f8a:	edc3 7a00 	vstr	s15, [r3]
      pSrc += 2;
 8015f8e:	69bb      	ldr	r3, [r7, #24]
 8015f90:	3308      	adds	r3, #8
 8015f92:	61bb      	str	r3, [r7, #24]
    for (l = 0; l < L; l++)
 8015f94:	69fb      	ldr	r3, [r7, #28]
 8015f96:	3301      	adds	r3, #1
 8015f98:	61fb      	str	r3, [r7, #28]
 8015f9a:	69fa      	ldr	r2, [r7, #28]
 8015f9c:	697b      	ldr	r3, [r7, #20]
 8015f9e:	429a      	cmp	r2, r3
 8015fa0:	d3ed      	bcc.n	8015f7e <arm_cfft_f32+0x2e>
    }
  }

  switch (L)
 8015fa2:	697b      	ldr	r3, [r7, #20]
 8015fa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015fa8:	d040      	beq.n	801602c <arm_cfft_f32+0xdc>
 8015faa:	697b      	ldr	r3, [r7, #20]
 8015fac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015fb0:	d845      	bhi.n	801603e <arm_cfft_f32+0xee>
 8015fb2:	697b      	ldr	r3, [r7, #20]
 8015fb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8015fb8:	d033      	beq.n	8016022 <arm_cfft_f32+0xd2>
 8015fba:	697b      	ldr	r3, [r7, #20]
 8015fbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8015fc0:	d83d      	bhi.n	801603e <arm_cfft_f32+0xee>
 8015fc2:	697b      	ldr	r3, [r7, #20]
 8015fc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8015fc8:	d026      	beq.n	8016018 <arm_cfft_f32+0xc8>
 8015fca:	697b      	ldr	r3, [r7, #20]
 8015fcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8015fd0:	d835      	bhi.n	801603e <arm_cfft_f32+0xee>
 8015fd2:	697b      	ldr	r3, [r7, #20]
 8015fd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015fd8:	d028      	beq.n	801602c <arm_cfft_f32+0xdc>
 8015fda:	697b      	ldr	r3, [r7, #20]
 8015fdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015fe0:	d82d      	bhi.n	801603e <arm_cfft_f32+0xee>
 8015fe2:	697b      	ldr	r3, [r7, #20]
 8015fe4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015fe8:	d01b      	beq.n	8016022 <arm_cfft_f32+0xd2>
 8015fea:	697b      	ldr	r3, [r7, #20]
 8015fec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015ff0:	d825      	bhi.n	801603e <arm_cfft_f32+0xee>
 8015ff2:	697b      	ldr	r3, [r7, #20]
 8015ff4:	2b80      	cmp	r3, #128	; 0x80
 8015ff6:	d00f      	beq.n	8016018 <arm_cfft_f32+0xc8>
 8015ff8:	697b      	ldr	r3, [r7, #20]
 8015ffa:	2b80      	cmp	r3, #128	; 0x80
 8015ffc:	d81f      	bhi.n	801603e <arm_cfft_f32+0xee>
 8015ffe:	697b      	ldr	r3, [r7, #20]
 8016000:	2b40      	cmp	r3, #64	; 0x40
 8016002:	d013      	beq.n	801602c <arm_cfft_f32+0xdc>
 8016004:	697b      	ldr	r3, [r7, #20]
 8016006:	2b40      	cmp	r3, #64	; 0x40
 8016008:	d819      	bhi.n	801603e <arm_cfft_f32+0xee>
 801600a:	697b      	ldr	r3, [r7, #20]
 801600c:	2b10      	cmp	r3, #16
 801600e:	d003      	beq.n	8016018 <arm_cfft_f32+0xc8>
 8016010:	697b      	ldr	r3, [r7, #20]
 8016012:	2b20      	cmp	r3, #32
 8016014:	d005      	beq.n	8016022 <arm_cfft_f32+0xd2>
 8016016:	e012      	b.n	801603e <arm_cfft_f32+0xee>
  {
  case 16:
  case 128:
  case 1024:
    arm_cfft_radix8by2_f32 ( (arm_cfft_instance_f32 *) S, p1);
 8016018:	68b9      	ldr	r1, [r7, #8]
 801601a:	68f8      	ldr	r0, [r7, #12]
 801601c:	f7fe ff79 	bl	8014f12 <arm_cfft_radix8by2_f32>
    break;
 8016020:	e00d      	b.n	801603e <arm_cfft_f32+0xee>
  case 32:
  case 256:
  case 2048:
    arm_cfft_radix8by4_f32 ( (arm_cfft_instance_f32 *) S, p1);
 8016022:	68b9      	ldr	r1, [r7, #8]
 8016024:	68f8      	ldr	r0, [r7, #12]
 8016026:	f7ff f968 	bl	80152fa <arm_cfft_radix8by4_f32>
    break;
 801602a:	e008      	b.n	801603e <arm_cfft_f32+0xee>
  case 64:
  case 512:
  case 4096:
    arm_radix8_butterfly_f32 ( p1, L, (float32_t *) S->pTwiddle, 1);
 801602c:	697b      	ldr	r3, [r7, #20]
 801602e:	b299      	uxth	r1, r3
 8016030:	68fb      	ldr	r3, [r7, #12]
 8016032:	685a      	ldr	r2, [r3, #4]
 8016034:	2301      	movs	r3, #1
 8016036:	68b8      	ldr	r0, [r7, #8]
 8016038:	f000 f844 	bl	80160c4 <arm_radix8_butterfly_f32>
    break;
 801603c:	bf00      	nop
  }

  if ( bitReverseFlag )
 801603e:	79bb      	ldrb	r3, [r7, #6]
 8016040:	2b00      	cmp	r3, #0
 8016042:	d007      	beq.n	8016054 <arm_cfft_f32+0x104>
    arm_bitreversal_32 ((uint32_t*) p1, S->bitRevLength, S->pBitRevTable);
 8016044:	68fb      	ldr	r3, [r7, #12]
 8016046:	8999      	ldrh	r1, [r3, #12]
 8016048:	68fb      	ldr	r3, [r7, #12]
 801604a:	689b      	ldr	r3, [r3, #8]
 801604c:	461a      	mov	r2, r3
 801604e:	68b8      	ldr	r0, [r7, #8]
 8016050:	f7fe ff06 	bl	8014e60 <arm_bitreversal_32>

  if (ifftFlag == 1U)
 8016054:	79fb      	ldrb	r3, [r7, #7]
 8016056:	2b01      	cmp	r3, #1
 8016058:	d130      	bne.n	80160bc <arm_cfft_f32+0x16c>
  {
    invL = 1.0f / (float32_t)L;
 801605a:	697b      	ldr	r3, [r7, #20]
 801605c:	ee07 3a90 	vmov	s15, r3
 8016060:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8016064:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016068:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801606c:	edc7 7a04 	vstr	s15, [r7, #16]

    /* Conjugate and scale output data */
    pSrc = p1;
 8016070:	68bb      	ldr	r3, [r7, #8]
 8016072:	61bb      	str	r3, [r7, #24]
    for (l= 0; l < L; l++)
 8016074:	2300      	movs	r3, #0
 8016076:	61fb      	str	r3, [r7, #28]
 8016078:	e01c      	b.n	80160b4 <arm_cfft_f32+0x164>
    {
      *pSrc++ *=   invL ;
 801607a:	69bb      	ldr	r3, [r7, #24]
 801607c:	1d1a      	adds	r2, r3, #4
 801607e:	61ba      	str	r2, [r7, #24]
 8016080:	ed93 7a00 	vldr	s14, [r3]
 8016084:	edd7 7a04 	vldr	s15, [r7, #16]
 8016088:	ee67 7a27 	vmul.f32	s15, s14, s15
 801608c:	edc3 7a00 	vstr	s15, [r3]
      *pSrc    = -(*pSrc) * invL;
 8016090:	69bb      	ldr	r3, [r7, #24]
 8016092:	edd3 7a00 	vldr	s15, [r3]
 8016096:	eeb1 7a67 	vneg.f32	s14, s15
 801609a:	edd7 7a04 	vldr	s15, [r7, #16]
 801609e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80160a2:	69bb      	ldr	r3, [r7, #24]
 80160a4:	edc3 7a00 	vstr	s15, [r3]
      pSrc++;
 80160a8:	69bb      	ldr	r3, [r7, #24]
 80160aa:	3304      	adds	r3, #4
 80160ac:	61bb      	str	r3, [r7, #24]
    for (l= 0; l < L; l++)
 80160ae:	69fb      	ldr	r3, [r7, #28]
 80160b0:	3301      	adds	r3, #1
 80160b2:	61fb      	str	r3, [r7, #28]
 80160b4:	69fa      	ldr	r2, [r7, #28]
 80160b6:	697b      	ldr	r3, [r7, #20]
 80160b8:	429a      	cmp	r2, r3
 80160ba:	d3de      	bcc.n	801607a <arm_cfft_f32+0x12a>
    }
  }
}
 80160bc:	bf00      	nop
 80160be:	3720      	adds	r7, #32
 80160c0:	46bd      	mov	sp, r7
 80160c2:	bd80      	pop	{r7, pc}

080160c4 <arm_radix8_butterfly_f32>:
void arm_radix8_butterfly_f32(
  float32_t * pSrc,
  uint16_t fftLen,
  const float32_t * pCoef,
  uint16_t twidCoefModifier)
{
 80160c4:	b480      	push	{r7}
 80160c6:	b0bd      	sub	sp, #244	; 0xf4
 80160c8:	af00      	add	r7, sp, #0
 80160ca:	60f8      	str	r0, [r7, #12]
 80160cc:	607a      	str	r2, [r7, #4]
 80160ce:	461a      	mov	r2, r3
 80160d0:	460b      	mov	r3, r1
 80160d2:	817b      	strh	r3, [r7, #10]
 80160d4:	4613      	mov	r3, r2
 80160d6:	813b      	strh	r3, [r7, #8]
   float32_t t1, t2;
   float32_t s1, s2, s3, s4, s5, s6, s7, s8;
   float32_t p1, p2, p3, p4;
   float32_t co2, co3, co4, co5, co6, co7, co8;
   float32_t si2, si3, si4, si5, si6, si7, si8;
   const float32_t C81 = 0.70710678118f;
 80160d8:	4b09      	ldr	r3, [pc, #36]	; (8016100 <arm_radix8_butterfly_f32+0x3c>)
 80160da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

   n2 = fftLen;
 80160de:	897b      	ldrh	r3, [r7, #10]
 80160e0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

   do
   {
      n1 = n2;
 80160e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80160e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      n2 = n2 >> 3;
 80160ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80160f0:	08db      	lsrs	r3, r3, #3
 80160f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      i1 = 0;
 80160f6:	2300      	movs	r3, #0
 80160f8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80160fc:	e002      	b.n	8016104 <arm_radix8_butterfly_f32+0x40>
 80160fe:	bf00      	nop
 8016100:	3f3504f3 	.word	0x3f3504f3

      do
      {
         i2 = i1 + n2;
 8016104:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8016108:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801610c:	4413      	add	r3, r2
 801610e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
         i3 = i2 + n2;
 8016112:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8016116:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801611a:	4413      	add	r3, r2
 801611c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
         i4 = i3 + n2;
 8016120:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8016124:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016128:	4413      	add	r3, r2
 801612a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
         i5 = i4 + n2;
 801612e:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8016132:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016136:	4413      	add	r3, r2
 8016138:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
         i6 = i5 + n2;
 801613c:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8016140:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016144:	4413      	add	r3, r2
 8016146:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
         i7 = i6 + n2;
 801614a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 801614e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016152:	4413      	add	r3, r2
 8016154:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
         i8 = i7 + n2;
 8016158:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 801615c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016160:	4413      	add	r3, r2
 8016162:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8016166:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801616a:	00db      	lsls	r3, r3, #3
 801616c:	68fa      	ldr	r2, [r7, #12]
 801616e:	4413      	add	r3, r2
 8016170:	ed93 7a00 	vldr	s14, [r3]
 8016174:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8016178:	00db      	lsls	r3, r3, #3
 801617a:	68fa      	ldr	r2, [r7, #12]
 801617c:	4413      	add	r3, r2
 801617e:	edd3 7a00 	vldr	s15, [r3]
 8016182:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016186:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r5 = pSrc[2 * i1] - pSrc[2 * i5];
 801618a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801618e:	00db      	lsls	r3, r3, #3
 8016190:	68fa      	ldr	r2, [r7, #12]
 8016192:	4413      	add	r3, r2
 8016194:	ed93 7a00 	vldr	s14, [r3]
 8016198:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801619c:	00db      	lsls	r3, r3, #3
 801619e:	68fa      	ldr	r2, [r7, #12]
 80161a0:	4413      	add	r3, r2
 80161a2:	edd3 7a00 	vldr	s15, [r3]
 80161a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80161aa:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 80161ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80161b2:	00db      	lsls	r3, r3, #3
 80161b4:	68fa      	ldr	r2, [r7, #12]
 80161b6:	4413      	add	r3, r2
 80161b8:	ed93 7a00 	vldr	s14, [r3]
 80161bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80161c0:	00db      	lsls	r3, r3, #3
 80161c2:	68fa      	ldr	r2, [r7, #12]
 80161c4:	4413      	add	r3, r2
 80161c6:	edd3 7a00 	vldr	s15, [r3]
 80161ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80161ce:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         r6 = pSrc[2 * i2] - pSrc[2 * i6];
 80161d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80161d6:	00db      	lsls	r3, r3, #3
 80161d8:	68fa      	ldr	r2, [r7, #12]
 80161da:	4413      	add	r3, r2
 80161dc:	ed93 7a00 	vldr	s14, [r3]
 80161e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80161e4:	00db      	lsls	r3, r3, #3
 80161e6:	68fa      	ldr	r2, [r7, #12]
 80161e8:	4413      	add	r3, r2
 80161ea:	edd3 7a00 	vldr	s15, [r3]
 80161ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80161f2:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 80161f6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80161fa:	00db      	lsls	r3, r3, #3
 80161fc:	68fa      	ldr	r2, [r7, #12]
 80161fe:	4413      	add	r3, r2
 8016200:	ed93 7a00 	vldr	s14, [r3]
 8016204:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8016208:	00db      	lsls	r3, r3, #3
 801620a:	68fa      	ldr	r2, [r7, #12]
 801620c:	4413      	add	r3, r2
 801620e:	edd3 7a00 	vldr	s15, [r3]
 8016212:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016216:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r7 = pSrc[2 * i3] - pSrc[2 * i7];
 801621a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801621e:	00db      	lsls	r3, r3, #3
 8016220:	68fa      	ldr	r2, [r7, #12]
 8016222:	4413      	add	r3, r2
 8016224:	ed93 7a00 	vldr	s14, [r3]
 8016228:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801622c:	00db      	lsls	r3, r3, #3
 801622e:	68fa      	ldr	r2, [r7, #12]
 8016230:	4413      	add	r3, r2
 8016232:	edd3 7a00 	vldr	s15, [r3]
 8016236:	ee77 7a67 	vsub.f32	s15, s14, s15
 801623a:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 801623e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8016242:	00db      	lsls	r3, r3, #3
 8016244:	68fa      	ldr	r2, [r7, #12]
 8016246:	4413      	add	r3, r2
 8016248:	ed93 7a00 	vldr	s14, [r3]
 801624c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8016250:	00db      	lsls	r3, r3, #3
 8016252:	68fa      	ldr	r2, [r7, #12]
 8016254:	4413      	add	r3, r2
 8016256:	edd3 7a00 	vldr	s15, [r3]
 801625a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801625e:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         r8 = pSrc[2 * i4] - pSrc[2 * i8];
 8016262:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8016266:	00db      	lsls	r3, r3, #3
 8016268:	68fa      	ldr	r2, [r7, #12]
 801626a:	4413      	add	r3, r2
 801626c:	ed93 7a00 	vldr	s14, [r3]
 8016270:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8016274:	00db      	lsls	r3, r3, #3
 8016276:	68fa      	ldr	r2, [r7, #12]
 8016278:	4413      	add	r3, r2
 801627a:	edd3 7a00 	vldr	s15, [r3]
 801627e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016282:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         t1 = r1 - r3;
 8016286:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 801628a:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 801628e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016292:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r1 = r1 + r3;
 8016296:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 801629a:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 801629e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80162a2:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r3 = r2 - r4;
 80162a6:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 80162aa:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80162ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80162b2:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r2 = r2 + r4;
 80162b6:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 80162ba:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80162be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80162c2:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1] = r1 + r2;
 80162c6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80162ca:	00db      	lsls	r3, r3, #3
 80162cc:	68fa      	ldr	r2, [r7, #12]
 80162ce:	4413      	add	r3, r2
 80162d0:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80162d4:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80162d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80162dc:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5] = r1 - r2;
 80162e0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80162e4:	00db      	lsls	r3, r3, #3
 80162e6:	68fa      	ldr	r2, [r7, #12]
 80162e8:	4413      	add	r3, r2
 80162ea:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80162ee:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80162f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80162f6:	edc3 7a00 	vstr	s15, [r3]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 80162fa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80162fe:	00db      	lsls	r3, r3, #3
 8016300:	3304      	adds	r3, #4
 8016302:	68fa      	ldr	r2, [r7, #12]
 8016304:	4413      	add	r3, r2
 8016306:	ed93 7a00 	vldr	s14, [r3]
 801630a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801630e:	00db      	lsls	r3, r3, #3
 8016310:	3304      	adds	r3, #4
 8016312:	68fa      	ldr	r2, [r7, #12]
 8016314:	4413      	add	r3, r2
 8016316:	edd3 7a00 	vldr	s15, [r3]
 801631a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801631e:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 8016322:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8016326:	00db      	lsls	r3, r3, #3
 8016328:	3304      	adds	r3, #4
 801632a:	68fa      	ldr	r2, [r7, #12]
 801632c:	4413      	add	r3, r2
 801632e:	ed93 7a00 	vldr	s14, [r3]
 8016332:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8016336:	00db      	lsls	r3, r3, #3
 8016338:	3304      	adds	r3, #4
 801633a:	68fa      	ldr	r2, [r7, #12]
 801633c:	4413      	add	r3, r2
 801633e:	edd3 7a00 	vldr	s15, [r3]
 8016342:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016346:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 801634a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801634e:	00db      	lsls	r3, r3, #3
 8016350:	3304      	adds	r3, #4
 8016352:	68fa      	ldr	r2, [r7, #12]
 8016354:	4413      	add	r3, r2
 8016356:	ed93 7a00 	vldr	s14, [r3]
 801635a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801635e:	00db      	lsls	r3, r3, #3
 8016360:	3304      	adds	r3, #4
 8016362:	68fa      	ldr	r2, [r7, #12]
 8016364:	4413      	add	r3, r2
 8016366:	edd3 7a00 	vldr	s15, [r3]
 801636a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801636e:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 8016372:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8016376:	00db      	lsls	r3, r3, #3
 8016378:	3304      	adds	r3, #4
 801637a:	68fa      	ldr	r2, [r7, #12]
 801637c:	4413      	add	r3, r2
 801637e:	ed93 7a00 	vldr	s14, [r3]
 8016382:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8016386:	00db      	lsls	r3, r3, #3
 8016388:	3304      	adds	r3, #4
 801638a:	68fa      	ldr	r2, [r7, #12]
 801638c:	4413      	add	r3, r2
 801638e:	edd3 7a00 	vldr	s15, [r3]
 8016392:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016396:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 801639a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801639e:	00db      	lsls	r3, r3, #3
 80163a0:	3304      	adds	r3, #4
 80163a2:	68fa      	ldr	r2, [r7, #12]
 80163a4:	4413      	add	r3, r2
 80163a6:	ed93 7a00 	vldr	s14, [r3]
 80163aa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80163ae:	00db      	lsls	r3, r3, #3
 80163b0:	3304      	adds	r3, #4
 80163b2:	68fa      	ldr	r2, [r7, #12]
 80163b4:	4413      	add	r3, r2
 80163b6:	edd3 7a00 	vldr	s15, [r3]
 80163ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80163be:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 80163c2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80163c6:	00db      	lsls	r3, r3, #3
 80163c8:	3304      	adds	r3, #4
 80163ca:	68fa      	ldr	r2, [r7, #12]
 80163cc:	4413      	add	r3, r2
 80163ce:	ed93 7a00 	vldr	s14, [r3]
 80163d2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80163d6:	00db      	lsls	r3, r3, #3
 80163d8:	3304      	adds	r3, #4
 80163da:	68fa      	ldr	r2, [r7, #12]
 80163dc:	4413      	add	r3, r2
 80163de:	edd3 7a00 	vldr	s15, [r3]
 80163e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80163e6:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 80163ea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80163ee:	00db      	lsls	r3, r3, #3
 80163f0:	3304      	adds	r3, #4
 80163f2:	68fa      	ldr	r2, [r7, #12]
 80163f4:	4413      	add	r3, r2
 80163f6:	ed93 7a00 	vldr	s14, [r3]
 80163fa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80163fe:	00db      	lsls	r3, r3, #3
 8016400:	3304      	adds	r3, #4
 8016402:	68fa      	ldr	r2, [r7, #12]
 8016404:	4413      	add	r3, r2
 8016406:	edd3 7a00 	vldr	s15, [r3]
 801640a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801640e:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 8016412:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8016416:	00db      	lsls	r3, r3, #3
 8016418:	3304      	adds	r3, #4
 801641a:	68fa      	ldr	r2, [r7, #12]
 801641c:	4413      	add	r3, r2
 801641e:	ed93 7a00 	vldr	s14, [r3]
 8016422:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8016426:	00db      	lsls	r3, r3, #3
 8016428:	3304      	adds	r3, #4
 801642a:	68fa      	ldr	r2, [r7, #12]
 801642c:	4413      	add	r3, r2
 801642e:	edd3 7a00 	vldr	s15, [r3]
 8016432:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016436:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         t2 = r1 - s3;
 801643a:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 801643e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8016442:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016446:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         r1 = r1 + s3;
 801644a:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 801644e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8016452:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016456:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s3 = r2 - r4;
 801645a:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 801645e:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8016462:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016466:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         r2 = r2 + r4;
 801646a:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 801646e:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8016472:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016476:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1 + 1] = r1 + r2;
 801647a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801647e:	00db      	lsls	r3, r3, #3
 8016480:	3304      	adds	r3, #4
 8016482:	68fa      	ldr	r2, [r7, #12]
 8016484:	4413      	add	r3, r2
 8016486:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 801648a:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 801648e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016492:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5 + 1] = r1 - r2;
 8016496:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801649a:	00db      	lsls	r3, r3, #3
 801649c:	3304      	adds	r3, #4
 801649e:	68fa      	ldr	r2, [r7, #12]
 80164a0:	4413      	add	r3, r2
 80164a2:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80164a6:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80164aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80164ae:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3]     = t1 + s3;
 80164b2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80164b6:	00db      	lsls	r3, r3, #3
 80164b8:	68fa      	ldr	r2, [r7, #12]
 80164ba:	4413      	add	r3, r2
 80164bc:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80164c0:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80164c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80164c8:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7]     = t1 - s3;
 80164cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80164d0:	00db      	lsls	r3, r3, #3
 80164d2:	68fa      	ldr	r2, [r7, #12]
 80164d4:	4413      	add	r3, r2
 80164d6:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80164da:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80164de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80164e2:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3 + 1] = t2 - r3;
 80164e6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80164ea:	00db      	lsls	r3, r3, #3
 80164ec:	3304      	adds	r3, #4
 80164ee:	68fa      	ldr	r2, [r7, #12]
 80164f0:	4413      	add	r3, r2
 80164f2:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80164f6:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80164fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80164fe:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7 + 1] = t2 + r3;
 8016502:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8016506:	00db      	lsls	r3, r3, #3
 8016508:	3304      	adds	r3, #4
 801650a:	68fa      	ldr	r2, [r7, #12]
 801650c:	4413      	add	r3, r2
 801650e:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8016512:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8016516:	ee77 7a27 	vadd.f32	s15, s14, s15
 801651a:	edc3 7a00 	vstr	s15, [r3]
         r1 = (r6 - r8) * C81;
 801651e:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8016522:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8016526:	ee77 7a67 	vsub.f32	s15, s14, s15
 801652a:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 801652e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016532:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r6 = (r6 + r8) * C81;
 8016536:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 801653a:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 801653e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016542:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8016546:	ee67 7a27 	vmul.f32	s15, s14, s15
 801654a:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r2 = (s6 - s8) * C81;
 801654e:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8016552:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8016556:	ee77 7a67 	vsub.f32	s15, s14, s15
 801655a:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 801655e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016562:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = (s6 + s8) * C81;
 8016566:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 801656a:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 801656e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016572:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8016576:	ee67 7a27 	vmul.f32	s15, s14, s15
 801657a:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         t1 = r5 - r1;
 801657e:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8016582:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8016586:	ee77 7a67 	vsub.f32	s15, s14, s15
 801658a:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r5 = r5 + r1;
 801658e:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8016592:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8016596:	ee77 7a27 	vadd.f32	s15, s14, s15
 801659a:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r8 = r7 - r6;
 801659e:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 80165a2:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80165a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80165aa:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         r7 = r7 + r6;
 80165ae:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 80165b2:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80165b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80165ba:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         t2 = s5 - r2;
 80165be:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80165c2:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80165c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80165ca:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         s5 = s5 + r2;
 80165ce:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80165d2:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80165d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80165da:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         s8 = s7 - s6;
 80165de:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 80165e2:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80165e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80165ea:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         s7 = s7 + s6;
 80165ee:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 80165f2:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80165f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80165fa:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         pSrc[2 * i2]     = r5 + s7;
 80165fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8016602:	00db      	lsls	r3, r3, #3
 8016604:	68fa      	ldr	r2, [r7, #12]
 8016606:	4413      	add	r3, r2
 8016608:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 801660c:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8016610:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016614:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8]     = r5 - s7;
 8016618:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801661c:	00db      	lsls	r3, r3, #3
 801661e:	68fa      	ldr	r2, [r7, #12]
 8016620:	4413      	add	r3, r2
 8016622:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8016626:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 801662a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801662e:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6]     = t1 + s8;
 8016632:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8016636:	00db      	lsls	r3, r3, #3
 8016638:	68fa      	ldr	r2, [r7, #12]
 801663a:	4413      	add	r3, r2
 801663c:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8016640:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8016644:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016648:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4]     = t1 - s8;
 801664c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8016650:	00db      	lsls	r3, r3, #3
 8016652:	68fa      	ldr	r2, [r7, #12]
 8016654:	4413      	add	r3, r2
 8016656:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 801665a:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 801665e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016662:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i2 + 1] = s5 - r7;
 8016666:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801666a:	00db      	lsls	r3, r3, #3
 801666c:	3304      	adds	r3, #4
 801666e:	68fa      	ldr	r2, [r7, #12]
 8016670:	4413      	add	r3, r2
 8016672:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8016676:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 801667a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801667e:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8 + 1] = s5 + r7;
 8016682:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8016686:	00db      	lsls	r3, r3, #3
 8016688:	3304      	adds	r3, #4
 801668a:	68fa      	ldr	r2, [r7, #12]
 801668c:	4413      	add	r3, r2
 801668e:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8016692:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8016696:	ee77 7a27 	vadd.f32	s15, s14, s15
 801669a:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6 + 1] = t2 - r8;
 801669e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80166a2:	00db      	lsls	r3, r3, #3
 80166a4:	3304      	adds	r3, #4
 80166a6:	68fa      	ldr	r2, [r7, #12]
 80166a8:	4413      	add	r3, r2
 80166aa:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80166ae:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80166b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80166b6:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4 + 1] = t2 + r8;
 80166ba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80166be:	00db      	lsls	r3, r3, #3
 80166c0:	3304      	adds	r3, #4
 80166c2:	68fa      	ldr	r2, [r7, #12]
 80166c4:	4413      	add	r3, r2
 80166c6:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80166ca:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80166ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80166d2:	edc3 7a00 	vstr	s15, [r3]

         i1 += n1;
 80166d6:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80166da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80166de:	4413      	add	r3, r2
 80166e0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
      } while (i1 < fftLen);
 80166e4:	897b      	ldrh	r3, [r7, #10]
 80166e6:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80166ea:	429a      	cmp	r2, r3
 80166ec:	f4ff ad0a 	bcc.w	8016104 <arm_radix8_butterfly_f32+0x40>

      if (n2 < 8)
 80166f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80166f4:	2b07      	cmp	r3, #7
 80166f6:	f240 84e3 	bls.w	80170c0 <arm_radix8_butterfly_f32+0xffc>
         break;

      ia1 = 0;
 80166fa:	2300      	movs	r3, #0
 80166fc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
      j = 1;
 8016700:	2301      	movs	r3, #1
 8016702:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

      do
      {
         /*  index calculation for the coefficients */
         id  = ia1 + twidCoefModifier;
 8016706:	893b      	ldrh	r3, [r7, #8]
 8016708:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 801670c:	4413      	add	r3, r2
 801670e:	67fb      	str	r3, [r7, #124]	; 0x7c
         ia1 = id;
 8016710:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8016712:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
         ia2 = ia1 + id;
 8016716:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 801671a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801671c:	4413      	add	r3, r2
 801671e:	67bb      	str	r3, [r7, #120]	; 0x78
         ia3 = ia2 + id;
 8016720:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8016722:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8016724:	4413      	add	r3, r2
 8016726:	677b      	str	r3, [r7, #116]	; 0x74
         ia4 = ia3 + id;
 8016728:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801672a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801672c:	4413      	add	r3, r2
 801672e:	673b      	str	r3, [r7, #112]	; 0x70
         ia5 = ia4 + id;
 8016730:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8016732:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8016734:	4413      	add	r3, r2
 8016736:	66fb      	str	r3, [r7, #108]	; 0x6c
         ia6 = ia5 + id;
 8016738:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801673a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801673c:	4413      	add	r3, r2
 801673e:	66bb      	str	r3, [r7, #104]	; 0x68
         ia7 = ia6 + id;
 8016740:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8016742:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8016744:	4413      	add	r3, r2
 8016746:	667b      	str	r3, [r7, #100]	; 0x64

         co2 = pCoef[2 * ia1];
 8016748:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801674c:	00db      	lsls	r3, r3, #3
 801674e:	687a      	ldr	r2, [r7, #4]
 8016750:	4413      	add	r3, r2
 8016752:	681b      	ldr	r3, [r3, #0]
 8016754:	663b      	str	r3, [r7, #96]	; 0x60
         co3 = pCoef[2 * ia2];
 8016756:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016758:	00db      	lsls	r3, r3, #3
 801675a:	687a      	ldr	r2, [r7, #4]
 801675c:	4413      	add	r3, r2
 801675e:	681b      	ldr	r3, [r3, #0]
 8016760:	65fb      	str	r3, [r7, #92]	; 0x5c
         co4 = pCoef[2 * ia3];
 8016762:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016764:	00db      	lsls	r3, r3, #3
 8016766:	687a      	ldr	r2, [r7, #4]
 8016768:	4413      	add	r3, r2
 801676a:	681b      	ldr	r3, [r3, #0]
 801676c:	65bb      	str	r3, [r7, #88]	; 0x58
         co5 = pCoef[2 * ia4];
 801676e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016770:	00db      	lsls	r3, r3, #3
 8016772:	687a      	ldr	r2, [r7, #4]
 8016774:	4413      	add	r3, r2
 8016776:	681b      	ldr	r3, [r3, #0]
 8016778:	657b      	str	r3, [r7, #84]	; 0x54
         co6 = pCoef[2 * ia5];
 801677a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801677c:	00db      	lsls	r3, r3, #3
 801677e:	687a      	ldr	r2, [r7, #4]
 8016780:	4413      	add	r3, r2
 8016782:	681b      	ldr	r3, [r3, #0]
 8016784:	653b      	str	r3, [r7, #80]	; 0x50
         co7 = pCoef[2 * ia6];
 8016786:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8016788:	00db      	lsls	r3, r3, #3
 801678a:	687a      	ldr	r2, [r7, #4]
 801678c:	4413      	add	r3, r2
 801678e:	681b      	ldr	r3, [r3, #0]
 8016790:	64fb      	str	r3, [r7, #76]	; 0x4c
         co8 = pCoef[2 * ia7];
 8016792:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016794:	00db      	lsls	r3, r3, #3
 8016796:	687a      	ldr	r2, [r7, #4]
 8016798:	4413      	add	r3, r2
 801679a:	681b      	ldr	r3, [r3, #0]
 801679c:	64bb      	str	r3, [r7, #72]	; 0x48
         si2 = pCoef[2 * ia1 + 1];
 801679e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80167a2:	00db      	lsls	r3, r3, #3
 80167a4:	3304      	adds	r3, #4
 80167a6:	687a      	ldr	r2, [r7, #4]
 80167a8:	4413      	add	r3, r2
 80167aa:	681b      	ldr	r3, [r3, #0]
 80167ac:	647b      	str	r3, [r7, #68]	; 0x44
         si3 = pCoef[2 * ia2 + 1];
 80167ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80167b0:	00db      	lsls	r3, r3, #3
 80167b2:	3304      	adds	r3, #4
 80167b4:	687a      	ldr	r2, [r7, #4]
 80167b6:	4413      	add	r3, r2
 80167b8:	681b      	ldr	r3, [r3, #0]
 80167ba:	643b      	str	r3, [r7, #64]	; 0x40
         si4 = pCoef[2 * ia3 + 1];
 80167bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80167be:	00db      	lsls	r3, r3, #3
 80167c0:	3304      	adds	r3, #4
 80167c2:	687a      	ldr	r2, [r7, #4]
 80167c4:	4413      	add	r3, r2
 80167c6:	681b      	ldr	r3, [r3, #0]
 80167c8:	63fb      	str	r3, [r7, #60]	; 0x3c
         si5 = pCoef[2 * ia4 + 1];
 80167ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80167cc:	00db      	lsls	r3, r3, #3
 80167ce:	3304      	adds	r3, #4
 80167d0:	687a      	ldr	r2, [r7, #4]
 80167d2:	4413      	add	r3, r2
 80167d4:	681b      	ldr	r3, [r3, #0]
 80167d6:	63bb      	str	r3, [r7, #56]	; 0x38
         si6 = pCoef[2 * ia5 + 1];
 80167d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80167da:	00db      	lsls	r3, r3, #3
 80167dc:	3304      	adds	r3, #4
 80167de:	687a      	ldr	r2, [r7, #4]
 80167e0:	4413      	add	r3, r2
 80167e2:	681b      	ldr	r3, [r3, #0]
 80167e4:	637b      	str	r3, [r7, #52]	; 0x34
         si7 = pCoef[2 * ia6 + 1];
 80167e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80167e8:	00db      	lsls	r3, r3, #3
 80167ea:	3304      	adds	r3, #4
 80167ec:	687a      	ldr	r2, [r7, #4]
 80167ee:	4413      	add	r3, r2
 80167f0:	681b      	ldr	r3, [r3, #0]
 80167f2:	633b      	str	r3, [r7, #48]	; 0x30
         si8 = pCoef[2 * ia7 + 1];
 80167f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80167f6:	00db      	lsls	r3, r3, #3
 80167f8:	3304      	adds	r3, #4
 80167fa:	687a      	ldr	r2, [r7, #4]
 80167fc:	4413      	add	r3, r2
 80167fe:	681b      	ldr	r3, [r3, #0]
 8016800:	62fb      	str	r3, [r7, #44]	; 0x2c

         i1 = j;
 8016802:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8016806:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

         do
         {
            /*  index calculation for the input */
            i2 = i1 + n2;
 801680a:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 801680e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016812:	4413      	add	r3, r2
 8016814:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
            i3 = i2 + n2;
 8016818:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 801681c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016820:	4413      	add	r3, r2
 8016822:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
            i4 = i3 + n2;
 8016826:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 801682a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801682e:	4413      	add	r3, r2
 8016830:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
            i5 = i4 + n2;
 8016834:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8016838:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801683c:	4413      	add	r3, r2
 801683e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
            i6 = i5 + n2;
 8016842:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8016846:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801684a:	4413      	add	r3, r2
 801684c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            i7 = i6 + n2;
 8016850:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8016854:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016858:	4413      	add	r3, r2
 801685a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
            i8 = i7 + n2;
 801685e:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8016862:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016866:	4413      	add	r3, r2
 8016868:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 801686c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8016870:	00db      	lsls	r3, r3, #3
 8016872:	68fa      	ldr	r2, [r7, #12]
 8016874:	4413      	add	r3, r2
 8016876:	ed93 7a00 	vldr	s14, [r3]
 801687a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801687e:	00db      	lsls	r3, r3, #3
 8016880:	68fa      	ldr	r2, [r7, #12]
 8016882:	4413      	add	r3, r2
 8016884:	edd3 7a00 	vldr	s15, [r3]
 8016888:	ee77 7a27 	vadd.f32	s15, s14, s15
 801688c:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
 8016890:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8016894:	00db      	lsls	r3, r3, #3
 8016896:	68fa      	ldr	r2, [r7, #12]
 8016898:	4413      	add	r3, r2
 801689a:	ed93 7a00 	vldr	s14, [r3]
 801689e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80168a2:	00db      	lsls	r3, r3, #3
 80168a4:	68fa      	ldr	r2, [r7, #12]
 80168a6:	4413      	add	r3, r2
 80168a8:	edd3 7a00 	vldr	s15, [r3]
 80168ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80168b0:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 80168b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80168b8:	00db      	lsls	r3, r3, #3
 80168ba:	68fa      	ldr	r2, [r7, #12]
 80168bc:	4413      	add	r3, r2
 80168be:	ed93 7a00 	vldr	s14, [r3]
 80168c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80168c6:	00db      	lsls	r3, r3, #3
 80168c8:	68fa      	ldr	r2, [r7, #12]
 80168ca:	4413      	add	r3, r2
 80168cc:	edd3 7a00 	vldr	s15, [r3]
 80168d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80168d4:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
 80168d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80168dc:	00db      	lsls	r3, r3, #3
 80168de:	68fa      	ldr	r2, [r7, #12]
 80168e0:	4413      	add	r3, r2
 80168e2:	ed93 7a00 	vldr	s14, [r3]
 80168e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80168ea:	00db      	lsls	r3, r3, #3
 80168ec:	68fa      	ldr	r2, [r7, #12]
 80168ee:	4413      	add	r3, r2
 80168f0:	edd3 7a00 	vldr	s15, [r3]
 80168f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80168f8:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 80168fc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8016900:	00db      	lsls	r3, r3, #3
 8016902:	68fa      	ldr	r2, [r7, #12]
 8016904:	4413      	add	r3, r2
 8016906:	ed93 7a00 	vldr	s14, [r3]
 801690a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801690e:	00db      	lsls	r3, r3, #3
 8016910:	68fa      	ldr	r2, [r7, #12]
 8016912:	4413      	add	r3, r2
 8016914:	edd3 7a00 	vldr	s15, [r3]
 8016918:	ee77 7a27 	vadd.f32	s15, s14, s15
 801691c:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
 8016920:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8016924:	00db      	lsls	r3, r3, #3
 8016926:	68fa      	ldr	r2, [r7, #12]
 8016928:	4413      	add	r3, r2
 801692a:	ed93 7a00 	vldr	s14, [r3]
 801692e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8016932:	00db      	lsls	r3, r3, #3
 8016934:	68fa      	ldr	r2, [r7, #12]
 8016936:	4413      	add	r3, r2
 8016938:	edd3 7a00 	vldr	s15, [r3]
 801693c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016940:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8016944:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8016948:	00db      	lsls	r3, r3, #3
 801694a:	68fa      	ldr	r2, [r7, #12]
 801694c:	4413      	add	r3, r2
 801694e:	ed93 7a00 	vldr	s14, [r3]
 8016952:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8016956:	00db      	lsls	r3, r3, #3
 8016958:	68fa      	ldr	r2, [r7, #12]
 801695a:	4413      	add	r3, r2
 801695c:	edd3 7a00 	vldr	s15, [r3]
 8016960:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016964:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
            r8 = pSrc[2 * i4] - pSrc[2 * i8];
 8016968:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801696c:	00db      	lsls	r3, r3, #3
 801696e:	68fa      	ldr	r2, [r7, #12]
 8016970:	4413      	add	r3, r2
 8016972:	ed93 7a00 	vldr	s14, [r3]
 8016976:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801697a:	00db      	lsls	r3, r3, #3
 801697c:	68fa      	ldr	r2, [r7, #12]
 801697e:	4413      	add	r3, r2
 8016980:	edd3 7a00 	vldr	s15, [r3]
 8016984:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016988:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            t1 = r1 - r3;
 801698c:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8016990:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8016994:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016998:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r1 = r1 + r3;
 801699c:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80169a0:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80169a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80169a8:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r3 = r2 - r4;
 80169ac:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 80169b0:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80169b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80169b8:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r2 = r2 + r4;
 80169bc:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 80169c0:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80169c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80169c8:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            pSrc[2 * i1] = r1 + r2;
 80169cc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80169d0:	00db      	lsls	r3, r3, #3
 80169d2:	68fa      	ldr	r2, [r7, #12]
 80169d4:	4413      	add	r3, r2
 80169d6:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80169da:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80169de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80169e2:	edc3 7a00 	vstr	s15, [r3]
            r2 = r1 - r2;
 80169e6:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80169ea:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80169ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80169f2:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 80169f6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80169fa:	00db      	lsls	r3, r3, #3
 80169fc:	3304      	adds	r3, #4
 80169fe:	68fa      	ldr	r2, [r7, #12]
 8016a00:	4413      	add	r3, r2
 8016a02:	ed93 7a00 	vldr	s14, [r3]
 8016a06:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8016a0a:	00db      	lsls	r3, r3, #3
 8016a0c:	3304      	adds	r3, #4
 8016a0e:	68fa      	ldr	r2, [r7, #12]
 8016a10:	4413      	add	r3, r2
 8016a12:	edd3 7a00 	vldr	s15, [r3]
 8016a16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016a1a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 8016a1e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8016a22:	00db      	lsls	r3, r3, #3
 8016a24:	3304      	adds	r3, #4
 8016a26:	68fa      	ldr	r2, [r7, #12]
 8016a28:	4413      	add	r3, r2
 8016a2a:	ed93 7a00 	vldr	s14, [r3]
 8016a2e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8016a32:	00db      	lsls	r3, r3, #3
 8016a34:	3304      	adds	r3, #4
 8016a36:	68fa      	ldr	r2, [r7, #12]
 8016a38:	4413      	add	r3, r2
 8016a3a:	edd3 7a00 	vldr	s15, [r3]
 8016a3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016a42:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8016a46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8016a4a:	00db      	lsls	r3, r3, #3
 8016a4c:	3304      	adds	r3, #4
 8016a4e:	68fa      	ldr	r2, [r7, #12]
 8016a50:	4413      	add	r3, r2
 8016a52:	ed93 7a00 	vldr	s14, [r3]
 8016a56:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8016a5a:	00db      	lsls	r3, r3, #3
 8016a5c:	3304      	adds	r3, #4
 8016a5e:	68fa      	ldr	r2, [r7, #12]
 8016a60:	4413      	add	r3, r2
 8016a62:	edd3 7a00 	vldr	s15, [r3]
 8016a66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016a6a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 8016a6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8016a72:	00db      	lsls	r3, r3, #3
 8016a74:	3304      	adds	r3, #4
 8016a76:	68fa      	ldr	r2, [r7, #12]
 8016a78:	4413      	add	r3, r2
 8016a7a:	ed93 7a00 	vldr	s14, [r3]
 8016a7e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8016a82:	00db      	lsls	r3, r3, #3
 8016a84:	3304      	adds	r3, #4
 8016a86:	68fa      	ldr	r2, [r7, #12]
 8016a88:	4413      	add	r3, r2
 8016a8a:	edd3 7a00 	vldr	s15, [r3]
 8016a8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016a92:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8016a96:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8016a9a:	00db      	lsls	r3, r3, #3
 8016a9c:	3304      	adds	r3, #4
 8016a9e:	68fa      	ldr	r2, [r7, #12]
 8016aa0:	4413      	add	r3, r2
 8016aa2:	ed93 7a00 	vldr	s14, [r3]
 8016aa6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8016aaa:	00db      	lsls	r3, r3, #3
 8016aac:	3304      	adds	r3, #4
 8016aae:	68fa      	ldr	r2, [r7, #12]
 8016ab0:	4413      	add	r3, r2
 8016ab2:	edd3 7a00 	vldr	s15, [r3]
 8016ab6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016aba:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 8016abe:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8016ac2:	00db      	lsls	r3, r3, #3
 8016ac4:	3304      	adds	r3, #4
 8016ac6:	68fa      	ldr	r2, [r7, #12]
 8016ac8:	4413      	add	r3, r2
 8016aca:	ed93 7a00 	vldr	s14, [r3]
 8016ace:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8016ad2:	00db      	lsls	r3, r3, #3
 8016ad4:	3304      	adds	r3, #4
 8016ad6:	68fa      	ldr	r2, [r7, #12]
 8016ad8:	4413      	add	r3, r2
 8016ada:	edd3 7a00 	vldr	s15, [r3]
 8016ade:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016ae2:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8016ae6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8016aea:	00db      	lsls	r3, r3, #3
 8016aec:	3304      	adds	r3, #4
 8016aee:	68fa      	ldr	r2, [r7, #12]
 8016af0:	4413      	add	r3, r2
 8016af2:	ed93 7a00 	vldr	s14, [r3]
 8016af6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8016afa:	00db      	lsls	r3, r3, #3
 8016afc:	3304      	adds	r3, #4
 8016afe:	68fa      	ldr	r2, [r7, #12]
 8016b00:	4413      	add	r3, r2
 8016b02:	edd3 7a00 	vldr	s15, [r3]
 8016b06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016b0a:	edc7 7a08 	vstr	s15, [r7, #32]
            s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 8016b0e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8016b12:	00db      	lsls	r3, r3, #3
 8016b14:	3304      	adds	r3, #4
 8016b16:	68fa      	ldr	r2, [r7, #12]
 8016b18:	4413      	add	r3, r2
 8016b1a:	ed93 7a00 	vldr	s14, [r3]
 8016b1e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8016b22:	00db      	lsls	r3, r3, #3
 8016b24:	3304      	adds	r3, #4
 8016b26:	68fa      	ldr	r2, [r7, #12]
 8016b28:	4413      	add	r3, r2
 8016b2a:	edd3 7a00 	vldr	s15, [r3]
 8016b2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016b32:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            t2 = s1 - s3;
 8016b36:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8016b3a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8016b3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016b42:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s1 = s1 + s3;
 8016b46:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8016b4a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8016b4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016b52:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s3 = s2 - s4;
 8016b56:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8016b5a:	edd7 7a08 	vldr	s15, [r7, #32]
 8016b5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016b62:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s2 = s2 + s4;
 8016b66:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8016b6a:	edd7 7a08 	vldr	s15, [r7, #32]
 8016b6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016b72:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            r1 = t1 + s3;
 8016b76:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8016b7a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8016b7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016b82:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            t1 = t1 - s3;
 8016b86:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8016b8a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8016b8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016b92:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            pSrc[2 * i1 + 1] = s1 + s2;
 8016b96:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8016b9a:	00db      	lsls	r3, r3, #3
 8016b9c:	3304      	adds	r3, #4
 8016b9e:	68fa      	ldr	r2, [r7, #12]
 8016ba0:	4413      	add	r3, r2
 8016ba2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8016ba6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8016baa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016bae:	edc3 7a00 	vstr	s15, [r3]
            s2 = s1 - s2;
 8016bb2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8016bb6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8016bba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016bbe:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s1 = t2 - r3;
 8016bc2:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8016bc6:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8016bca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016bce:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            t2 = t2 + r3;
 8016bd2:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8016bd6:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8016bda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016bde:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co5 * r2;
 8016be2:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8016be6:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8016bea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016bee:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si5 * s2;
 8016bf2:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8016bf6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8016bfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016bfe:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co5 * s2;
 8016c02:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8016c06:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8016c0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016c0e:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si5 * r2;
 8016c12:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8016c16:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8016c1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016c1e:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i5]     = p1 + p2;
 8016c22:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8016c26:	00db      	lsls	r3, r3, #3
 8016c28:	68fa      	ldr	r2, [r7, #12]
 8016c2a:	4413      	add	r3, r2
 8016c2c:	ed97 7a07 	vldr	s14, [r7, #28]
 8016c30:	edd7 7a06 	vldr	s15, [r7, #24]
 8016c34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016c38:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i5 + 1] = p3 - p4;
 8016c3c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8016c40:	00db      	lsls	r3, r3, #3
 8016c42:	3304      	adds	r3, #4
 8016c44:	68fa      	ldr	r2, [r7, #12]
 8016c46:	4413      	add	r3, r2
 8016c48:	ed97 7a05 	vldr	s14, [r7, #20]
 8016c4c:	edd7 7a04 	vldr	s15, [r7, #16]
 8016c50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016c54:	edc3 7a00 	vstr	s15, [r3]
            p1 = co3 * r1;
 8016c58:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8016c5c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8016c60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016c64:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si3 * s1;
 8016c68:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8016c6c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8016c70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016c74:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co3 * s1;
 8016c78:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8016c7c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8016c80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016c84:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si3 * r1;
 8016c88:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8016c8c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8016c90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016c94:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i3]     = p1 + p2;
 8016c98:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8016c9c:	00db      	lsls	r3, r3, #3
 8016c9e:	68fa      	ldr	r2, [r7, #12]
 8016ca0:	4413      	add	r3, r2
 8016ca2:	ed97 7a07 	vldr	s14, [r7, #28]
 8016ca6:	edd7 7a06 	vldr	s15, [r7, #24]
 8016caa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016cae:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i3 + 1] = p3 - p4;
 8016cb2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8016cb6:	00db      	lsls	r3, r3, #3
 8016cb8:	3304      	adds	r3, #4
 8016cba:	68fa      	ldr	r2, [r7, #12]
 8016cbc:	4413      	add	r3, r2
 8016cbe:	ed97 7a05 	vldr	s14, [r7, #20]
 8016cc2:	edd7 7a04 	vldr	s15, [r7, #16]
 8016cc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016cca:	edc3 7a00 	vstr	s15, [r3]
            p1 = co7 * t1;
 8016cce:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8016cd2:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8016cd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016cda:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si7 * t2;
 8016cde:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8016ce2:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8016ce6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016cea:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co7 * t2;
 8016cee:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8016cf2:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8016cf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016cfa:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si7 * t1;
 8016cfe:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8016d02:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8016d06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016d0a:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i7]     = p1 + p2;
 8016d0e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8016d12:	00db      	lsls	r3, r3, #3
 8016d14:	68fa      	ldr	r2, [r7, #12]
 8016d16:	4413      	add	r3, r2
 8016d18:	ed97 7a07 	vldr	s14, [r7, #28]
 8016d1c:	edd7 7a06 	vldr	s15, [r7, #24]
 8016d20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016d24:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i7 + 1] = p3 - p4;
 8016d28:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8016d2c:	00db      	lsls	r3, r3, #3
 8016d2e:	3304      	adds	r3, #4
 8016d30:	68fa      	ldr	r2, [r7, #12]
 8016d32:	4413      	add	r3, r2
 8016d34:	ed97 7a05 	vldr	s14, [r7, #20]
 8016d38:	edd7 7a04 	vldr	s15, [r7, #16]
 8016d3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016d40:	edc3 7a00 	vstr	s15, [r3]
            r1 = (r6 - r8) * C81;
 8016d44:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8016d48:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8016d4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016d50:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8016d54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016d58:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r6 = (r6 + r8) * C81;
 8016d5c:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8016d60:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8016d64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016d68:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8016d6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016d70:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            s1 = (s6 - s8) * C81;
 8016d74:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8016d78:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8016d7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016d80:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8016d84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016d88:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s6 = (s6 + s8) * C81;
 8016d8c:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8016d90:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8016d94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016d98:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8016d9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016da0:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t1 = r5 - r1;
 8016da4:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8016da8:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8016dac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016db0:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r5 = r5 + r1;
 8016db4:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8016db8:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8016dbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016dc0:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r8 = r7 - r6;
 8016dc4:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8016dc8:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8016dcc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016dd0:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            r7 = r7 + r6;
 8016dd4:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8016dd8:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8016ddc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016de0:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            t2 = s5 - s1;
 8016de4:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8016de8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8016dec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016df0:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s5 = s5 + s1;
 8016df4:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8016df8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8016dfc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016e00:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s8 = s7 - s6;
 8016e04:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8016e08:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8016e0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016e10:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            s7 = s7 + s6;
 8016e14:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8016e18:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8016e1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016e20:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            r1 = r5 + s7;
 8016e24:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8016e28:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8016e2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016e30:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = r5 - s7;
 8016e34:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8016e38:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8016e3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016e40:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r6 = t1 + s8;
 8016e44:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8016e48:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8016e4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016e50:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            t1 = t1 - s8;
 8016e54:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8016e58:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8016e5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016e60:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            s1 = s5 - r7;
 8016e64:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8016e68:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8016e6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016e70:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = s5 + r7;
 8016e74:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8016e78:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8016e7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016e80:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s6 = t2 - r8;
 8016e84:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8016e88:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8016e8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016e90:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t2 = t2 + r8;
 8016e94:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8016e98:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8016e9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016ea0:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co2 * r1;
 8016ea4:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8016ea8:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8016eac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016eb0:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si2 * s1;
 8016eb4:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8016eb8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8016ebc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016ec0:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co2 * s1;
 8016ec4:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8016ec8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8016ecc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016ed0:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si2 * r1;
 8016ed4:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8016ed8:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8016edc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016ee0:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i2]     = p1 + p2;
 8016ee4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8016ee8:	00db      	lsls	r3, r3, #3
 8016eea:	68fa      	ldr	r2, [r7, #12]
 8016eec:	4413      	add	r3, r2
 8016eee:	ed97 7a07 	vldr	s14, [r7, #28]
 8016ef2:	edd7 7a06 	vldr	s15, [r7, #24]
 8016ef6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016efa:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i2 + 1] = p3 - p4;
 8016efe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8016f02:	00db      	lsls	r3, r3, #3
 8016f04:	3304      	adds	r3, #4
 8016f06:	68fa      	ldr	r2, [r7, #12]
 8016f08:	4413      	add	r3, r2
 8016f0a:	ed97 7a05 	vldr	s14, [r7, #20]
 8016f0e:	edd7 7a04 	vldr	s15, [r7, #16]
 8016f12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016f16:	edc3 7a00 	vstr	s15, [r3]
            p1 = co8 * r5;
 8016f1a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8016f1e:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8016f22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016f26:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si8 * s5;
 8016f2a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8016f2e:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8016f32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016f36:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co8 * s5;
 8016f3a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8016f3e:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8016f42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016f46:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si8 * r5;
 8016f4a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8016f4e:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8016f52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016f56:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i8]     = p1 + p2;
 8016f5a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8016f5e:	00db      	lsls	r3, r3, #3
 8016f60:	68fa      	ldr	r2, [r7, #12]
 8016f62:	4413      	add	r3, r2
 8016f64:	ed97 7a07 	vldr	s14, [r7, #28]
 8016f68:	edd7 7a06 	vldr	s15, [r7, #24]
 8016f6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016f70:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i8 + 1] = p3 - p4;
 8016f74:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8016f78:	00db      	lsls	r3, r3, #3
 8016f7a:	3304      	adds	r3, #4
 8016f7c:	68fa      	ldr	r2, [r7, #12]
 8016f7e:	4413      	add	r3, r2
 8016f80:	ed97 7a05 	vldr	s14, [r7, #20]
 8016f84:	edd7 7a04 	vldr	s15, [r7, #16]
 8016f88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016f8c:	edc3 7a00 	vstr	s15, [r3]
            p1 = co6 * r6;
 8016f90:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8016f94:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8016f98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016f9c:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si6 * s6;
 8016fa0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8016fa4:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8016fa8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016fac:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co6 * s6;
 8016fb0:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8016fb4:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8016fb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016fbc:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si6 * r6;
 8016fc0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8016fc4:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8016fc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016fcc:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i6]     = p1 + p2;
 8016fd0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8016fd4:	00db      	lsls	r3, r3, #3
 8016fd6:	68fa      	ldr	r2, [r7, #12]
 8016fd8:	4413      	add	r3, r2
 8016fda:	ed97 7a07 	vldr	s14, [r7, #28]
 8016fde:	edd7 7a06 	vldr	s15, [r7, #24]
 8016fe2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016fe6:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i6 + 1] = p3 - p4;
 8016fea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8016fee:	00db      	lsls	r3, r3, #3
 8016ff0:	3304      	adds	r3, #4
 8016ff2:	68fa      	ldr	r2, [r7, #12]
 8016ff4:	4413      	add	r3, r2
 8016ff6:	ed97 7a05 	vldr	s14, [r7, #20]
 8016ffa:	edd7 7a04 	vldr	s15, [r7, #16]
 8016ffe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017002:	edc3 7a00 	vstr	s15, [r3]
            p1 = co4 * t1;
 8017006:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 801700a:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 801700e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017012:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si4 * t2;
 8017016:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 801701a:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 801701e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017022:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co4 * t2;
 8017026:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 801702a:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 801702e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017032:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si4 * t1;
 8017036:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 801703a:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 801703e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017042:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i4]     = p1 + p2;
 8017046:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801704a:	00db      	lsls	r3, r3, #3
 801704c:	68fa      	ldr	r2, [r7, #12]
 801704e:	4413      	add	r3, r2
 8017050:	ed97 7a07 	vldr	s14, [r7, #28]
 8017054:	edd7 7a06 	vldr	s15, [r7, #24]
 8017058:	ee77 7a27 	vadd.f32	s15, s14, s15
 801705c:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i4 + 1] = p3 - p4;
 8017060:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8017064:	00db      	lsls	r3, r3, #3
 8017066:	3304      	adds	r3, #4
 8017068:	68fa      	ldr	r2, [r7, #12]
 801706a:	4413      	add	r3, r2
 801706c:	ed97 7a05 	vldr	s14, [r7, #20]
 8017070:	edd7 7a04 	vldr	s15, [r7, #16]
 8017074:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017078:	edc3 7a00 	vstr	s15, [r3]

            i1 += n1;
 801707c:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8017080:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8017084:	4413      	add	r3, r2
 8017086:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
         } while (i1 < fftLen);
 801708a:	897b      	ldrh	r3, [r7, #10]
 801708c:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8017090:	429a      	cmp	r2, r3
 8017092:	f4ff abba 	bcc.w	801680a <arm_radix8_butterfly_f32+0x746>

         j++;
 8017096:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801709a:	3301      	adds	r3, #1
 801709c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      } while (j < n2);
 80170a0:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80170a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80170a8:	429a      	cmp	r2, r3
 80170aa:	f4ff ab2c 	bcc.w	8016706 <arm_radix8_butterfly_f32+0x642>

      twidCoefModifier <<= 3;
 80170ae:	893b      	ldrh	r3, [r7, #8]
 80170b0:	00db      	lsls	r3, r3, #3
 80170b2:	813b      	strh	r3, [r7, #8]
   } while (n2 > 7);
 80170b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80170b8:	2b07      	cmp	r3, #7
 80170ba:	f63f a813 	bhi.w	80160e4 <arm_radix8_butterfly_f32+0x20>
}
 80170be:	e000      	b.n	80170c2 <arm_radix8_butterfly_f32+0xffe>
         break;
 80170c0:	bf00      	nop
}
 80170c2:	bf00      	nop
 80170c4:	37f4      	adds	r7, #244	; 0xf4
 80170c6:	46bd      	mov	sp, r7
 80170c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170cc:	4770      	bx	lr
 80170ce:	bf00      	nop

080170d0 <stage_rfft_f32>:
#else
void stage_rfft_f32(
  const arm_rfft_fast_instance_f32 * S,
        float32_t * p,
        float32_t * pOut)
{
 80170d0:	b480      	push	{r7}
 80170d2:	b095      	sub	sp, #84	; 0x54
 80170d4:	af00      	add	r7, sp, #0
 80170d6:	60f8      	str	r0, [r7, #12]
 80170d8:	60b9      	str	r1, [r7, #8]
 80170da:	607a      	str	r2, [r7, #4]
        int32_t  k;                                /* Loop Counter */
        float32_t twR, twI;                         /* RFFT Twiddle coefficients */
  const float32_t * pCoeff = S->pTwiddleRFFT;       /* Points to RFFT Twiddle factors */
 80170dc:	68fb      	ldr	r3, [r7, #12]
 80170de:	695b      	ldr	r3, [r3, #20]
 80170e0:	64bb      	str	r3, [r7, #72]	; 0x48
        float32_t *pA = p;                          /* increasing pointer */
 80170e2:	68bb      	ldr	r3, [r7, #8]
 80170e4:	647b      	str	r3, [r7, #68]	; 0x44
        float32_t *pB = p;                          /* decreasing pointer */
 80170e6:	68bb      	ldr	r3, [r7, #8]
 80170e8:	643b      	str	r3, [r7, #64]	; 0x40
        float32_t xAR, xAI, xBR, xBI;               /* temporary variables */
        float32_t t1a, t1b;                         /* temporary variables */
        float32_t p0, p1, p2, p3;                   /* temporary variables */


   k = (S->Sint).fftLen - 1;
 80170ea:	68fb      	ldr	r3, [r7, #12]
 80170ec:	881b      	ldrh	r3, [r3, #0]
 80170ee:	3b01      	subs	r3, #1
 80170f0:	64fb      	str	r3, [r7, #76]	; 0x4c

   /* Pack first and last sample of the frequency domain together */

   xBR = pB[0];
 80170f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80170f4:	681b      	ldr	r3, [r3, #0]
 80170f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   xBI = pB[1];
 80170f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80170fa:	685b      	ldr	r3, [r3, #4]
 80170fc:	63bb      	str	r3, [r7, #56]	; 0x38
   xAR = pA[0];
 80170fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017100:	681b      	ldr	r3, [r3, #0]
 8017102:	637b      	str	r3, [r7, #52]	; 0x34
   xAI = pA[1];
 8017104:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017106:	685b      	ldr	r3, [r3, #4]
 8017108:	633b      	str	r3, [r7, #48]	; 0x30

   twR = *pCoeff++ ;
 801710a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801710c:	1d1a      	adds	r2, r3, #4
 801710e:	64ba      	str	r2, [r7, #72]	; 0x48
 8017110:	681b      	ldr	r3, [r3, #0]
 8017112:	62fb      	str	r3, [r7, #44]	; 0x2c
   twI = *pCoeff++ ;
 8017114:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017116:	1d1a      	adds	r2, r3, #4
 8017118:	64ba      	str	r2, [r7, #72]	; 0x48
 801711a:	681b      	ldr	r3, [r3, #0]
 801711c:	62bb      	str	r3, [r7, #40]	; 0x28


   // U1 = XA(1) + XB(1); % It is real
   t1a = xBR + xAR  ;
 801711e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8017122:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8017126:	ee77 7a27 	vadd.f32	s15, s14, s15
 801712a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

   // U2 = XB(1) - XA(1); % It is imaginary
   t1b = xBI + xAI  ;
 801712e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8017132:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8017136:	ee77 7a27 	vadd.f32	s15, s14, s15
 801713a:	edc7 7a08 	vstr	s15, [r7, #32]

   // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
   // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
   *pOut++ = 0.5f * ( t1a + t1b );
 801713e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8017142:	edd7 7a08 	vldr	s15, [r7, #32]
 8017146:	ee77 7a27 	vadd.f32	s15, s14, s15
 801714a:	687b      	ldr	r3, [r7, #4]
 801714c:	1d1a      	adds	r2, r3, #4
 801714e:	607a      	str	r2, [r7, #4]
 8017150:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8017154:	ee67 7a87 	vmul.f32	s15, s15, s14
 8017158:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( t1a - t1b );
 801715c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8017160:	edd7 7a08 	vldr	s15, [r7, #32]
 8017164:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017168:	687b      	ldr	r3, [r7, #4]
 801716a:	1d1a      	adds	r2, r3, #4
 801716c:	607a      	str	r2, [r7, #4]
 801716e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8017172:	ee67 7a87 	vmul.f32	s15, s15, s14
 8017176:	edc3 7a00 	vstr	s15, [r3]

   // XA(1) = 1/2*( U1 - imag(U2) +  i*( U1 +imag(U2) ));
   pB  = p + 2*k;
 801717a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801717c:	00db      	lsls	r3, r3, #3
 801717e:	68ba      	ldr	r2, [r7, #8]
 8017180:	4413      	add	r3, r2
 8017182:	643b      	str	r3, [r7, #64]	; 0x40
   pA += 2;
 8017184:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017186:	3308      	adds	r3, #8
 8017188:	647b      	str	r3, [r7, #68]	; 0x44
         end
         XA(1) = 1/2* (XA(1) + XB(1) + TW(1) * (XB(1) - XA(1))) + i*( 1/2*( XA(1) + XB(1) + i*( XA(1) - XB(1))));
         X = XA;
      */

      xBI = pB[1];
 801718a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801718c:	685b      	ldr	r3, [r3, #4]
 801718e:	63bb      	str	r3, [r7, #56]	; 0x38
      xBR = pB[0];
 8017190:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017192:	681b      	ldr	r3, [r3, #0]
 8017194:	63fb      	str	r3, [r7, #60]	; 0x3c
      xAR = pA[0];
 8017196:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017198:	681b      	ldr	r3, [r3, #0]
 801719a:	637b      	str	r3, [r7, #52]	; 0x34
      xAI = pA[1];
 801719c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801719e:	685b      	ldr	r3, [r3, #4]
 80171a0:	633b      	str	r3, [r7, #48]	; 0x30

      twR = *pCoeff++;
 80171a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80171a4:	1d1a      	adds	r2, r3, #4
 80171a6:	64ba      	str	r2, [r7, #72]	; 0x48
 80171a8:	681b      	ldr	r3, [r3, #0]
 80171aa:	62fb      	str	r3, [r7, #44]	; 0x2c
      twI = *pCoeff++;
 80171ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80171ae:	1d1a      	adds	r2, r3, #4
 80171b0:	64ba      	str	r2, [r7, #72]	; 0x48
 80171b2:	681b      	ldr	r3, [r3, #0]
 80171b4:	62bb      	str	r3, [r7, #40]	; 0x28

      t1a = xBR - xAR ;
 80171b6:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80171ba:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80171be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80171c2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t1b = xBI + xAI ;
 80171c6:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80171ca:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80171ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80171d2:	edc7 7a08 	vstr	s15, [r7, #32]

      // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
      // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
      p0 = twR * t1a;
 80171d6:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80171da:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80171de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80171e2:	edc7 7a07 	vstr	s15, [r7, #28]
      p1 = twI * t1a;
 80171e6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80171ea:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80171ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80171f2:	edc7 7a06 	vstr	s15, [r7, #24]
      p2 = twR * t1b;
 80171f6:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80171fa:	edd7 7a08 	vldr	s15, [r7, #32]
 80171fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017202:	edc7 7a05 	vstr	s15, [r7, #20]
      p3 = twI * t1b;
 8017206:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 801720a:	edd7 7a08 	vldr	s15, [r7, #32]
 801720e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017212:	edc7 7a04 	vstr	s15, [r7, #16]

      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
 8017216:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 801721a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 801721e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017222:	edd7 7a07 	vldr	s15, [r7, #28]
 8017226:	ee37 7a27 	vadd.f32	s14, s14, s15
 801722a:	edd7 7a04 	vldr	s15, [r7, #16]
 801722e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017232:	687b      	ldr	r3, [r7, #4]
 8017234:	1d1a      	adds	r2, r3, #4
 8017236:	607a      	str	r2, [r7, #4]
 8017238:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801723c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8017240:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
 8017244:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8017248:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 801724c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8017250:	edd7 7a06 	vldr	s15, [r7, #24]
 8017254:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017258:	edd7 7a05 	vldr	s15, [r7, #20]
 801725c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017260:	687b      	ldr	r3, [r7, #4]
 8017262:	1d1a      	adds	r2, r3, #4
 8017264:	607a      	str	r2, [r7, #4]
 8017266:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801726a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801726e:	edc3 7a00 	vstr	s15, [r3]


      pA += 2;
 8017272:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017274:	3308      	adds	r3, #8
 8017276:	647b      	str	r3, [r7, #68]	; 0x44
      pB -= 2;
 8017278:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801727a:	3b08      	subs	r3, #8
 801727c:	643b      	str	r3, [r7, #64]	; 0x40
      k--;
 801727e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017280:	3b01      	subs	r3, #1
 8017282:	64fb      	str	r3, [r7, #76]	; 0x4c
   } while (k > 0);
 8017284:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017286:	2b00      	cmp	r3, #0
 8017288:	f73f af7f 	bgt.w	801718a <stage_rfft_f32+0xba>
}
 801728c:	bf00      	nop
 801728e:	bf00      	nop
 8017290:	3754      	adds	r7, #84	; 0x54
 8017292:	46bd      	mov	sp, r7
 8017294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017298:	4770      	bx	lr

0801729a <merge_rfft_f32>:
/* Prepares data for inverse cfft */
void merge_rfft_f32(
  const arm_rfft_fast_instance_f32 * S,
        float32_t * p,
        float32_t * pOut)
{
 801729a:	b480      	push	{r7}
 801729c:	b095      	sub	sp, #84	; 0x54
 801729e:	af00      	add	r7, sp, #0
 80172a0:	60f8      	str	r0, [r7, #12]
 80172a2:	60b9      	str	r1, [r7, #8]
 80172a4:	607a      	str	r2, [r7, #4]
        int32_t  k;                                /* Loop Counter */
        float32_t twR, twI;                         /* RFFT Twiddle coefficients */
  const float32_t *pCoeff = S->pTwiddleRFFT;        /* Points to RFFT Twiddle factors */
 80172a6:	68fb      	ldr	r3, [r7, #12]
 80172a8:	695b      	ldr	r3, [r3, #20]
 80172aa:	64bb      	str	r3, [r7, #72]	; 0x48
        float32_t *pA = p;                          /* increasing pointer */
 80172ac:	68bb      	ldr	r3, [r7, #8]
 80172ae:	647b      	str	r3, [r7, #68]	; 0x44
        float32_t *pB = p;                          /* decreasing pointer */
 80172b0:	68bb      	ldr	r3, [r7, #8]
 80172b2:	643b      	str	r3, [r7, #64]	; 0x40
        float32_t xAR, xAI, xBR, xBI;               /* temporary variables */
        float32_t t1a, t1b, r, s, t, u;             /* temporary variables */

   k = (S->Sint).fftLen - 1;
 80172b4:	68fb      	ldr	r3, [r7, #12]
 80172b6:	881b      	ldrh	r3, [r3, #0]
 80172b8:	3b01      	subs	r3, #1
 80172ba:	64fb      	str	r3, [r7, #76]	; 0x4c

   xAR = pA[0];
 80172bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80172be:	681b      	ldr	r3, [r3, #0]
 80172c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   xAI = pA[1];
 80172c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80172c4:	685b      	ldr	r3, [r3, #4]
 80172c6:	63bb      	str	r3, [r7, #56]	; 0x38

   pCoeff += 2 ;
 80172c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80172ca:	3308      	adds	r3, #8
 80172cc:	64bb      	str	r3, [r7, #72]	; 0x48

   *pOut++ = 0.5f * ( xAR + xAI );
 80172ce:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80172d2:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80172d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80172da:	687b      	ldr	r3, [r7, #4]
 80172dc:	1d1a      	adds	r2, r3, #4
 80172de:	607a      	str	r2, [r7, #4]
 80172e0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80172e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80172e8:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( xAR - xAI );
 80172ec:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80172f0:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80172f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80172f8:	687b      	ldr	r3, [r7, #4]
 80172fa:	1d1a      	adds	r2, r3, #4
 80172fc:	607a      	str	r2, [r7, #4]
 80172fe:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8017302:	ee67 7a87 	vmul.f32	s15, s15, s14
 8017306:	edc3 7a00 	vstr	s15, [r3]

   pB  =  p + 2*k ;
 801730a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801730c:	00db      	lsls	r3, r3, #3
 801730e:	68ba      	ldr	r2, [r7, #8]
 8017310:	4413      	add	r3, r2
 8017312:	643b      	str	r3, [r7, #64]	; 0x40
   pA +=  2	   ;
 8017314:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017316:	3308      	adds	r3, #8
 8017318:	647b      	str	r3, [r7, #68]	; 0x44

   while (k > 0)
 801731a:	e07c      	b.n	8017416 <merge_rfft_f32+0x17c>
   {
      /* G is half of the frequency complex spectrum */
      //for k = 2:N
      //    Xk(k) = 1/2 * (G(k) + conj(G(N-k+2)) + Tw(k)*( G(k) - conj(G(N-k+2))));
      xBI =   pB[1]    ;
 801731c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801731e:	685b      	ldr	r3, [r3, #4]
 8017320:	637b      	str	r3, [r7, #52]	; 0x34
      xBR =   pB[0]    ;
 8017322:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017324:	681b      	ldr	r3, [r3, #0]
 8017326:	633b      	str	r3, [r7, #48]	; 0x30
      xAR =  pA[0];
 8017328:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801732a:	681b      	ldr	r3, [r3, #0]
 801732c:	63fb      	str	r3, [r7, #60]	; 0x3c
      xAI =  pA[1];
 801732e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017330:	685b      	ldr	r3, [r3, #4]
 8017332:	63bb      	str	r3, [r7, #56]	; 0x38

      twR = *pCoeff++;
 8017334:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017336:	1d1a      	adds	r2, r3, #4
 8017338:	64ba      	str	r2, [r7, #72]	; 0x48
 801733a:	681b      	ldr	r3, [r3, #0]
 801733c:	62fb      	str	r3, [r7, #44]	; 0x2c
      twI = *pCoeff++;
 801733e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017340:	1d1a      	adds	r2, r3, #4
 8017342:	64ba      	str	r2, [r7, #72]	; 0x48
 8017344:	681b      	ldr	r3, [r3, #0]
 8017346:	62bb      	str	r3, [r7, #40]	; 0x28

      t1a = xAR - xBR ;
 8017348:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 801734c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8017350:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017354:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t1b = xAI + xBI ;
 8017358:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 801735c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8017360:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017364:	edc7 7a08 	vstr	s15, [r7, #32]

      r = twR * t1a;
 8017368:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 801736c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8017370:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017374:	edc7 7a07 	vstr	s15, [r7, #28]
      s = twI * t1b;
 8017378:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 801737c:	edd7 7a08 	vldr	s15, [r7, #32]
 8017380:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017384:	edc7 7a06 	vstr	s15, [r7, #24]
      t = twI * t1a;
 8017388:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 801738c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8017390:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017394:	edc7 7a05 	vstr	s15, [r7, #20]
      u = twR * t1b;
 8017398:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 801739c:	edd7 7a08 	vldr	s15, [r7, #32]
 80173a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80173a4:	edc7 7a04 	vstr	s15, [r7, #16]

      // real(tw * (xA - xB)) = twR * (xAR - xBR) - twI * (xAI - xBI);
      // imag(tw * (xA - xB)) = twI * (xAR - xBR) + twR * (xAI - xBI);
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
 80173a8:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80173ac:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80173b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80173b4:	edd7 7a07 	vldr	s15, [r7, #28]
 80173b8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80173bc:	edd7 7a06 	vldr	s15, [r7, #24]
 80173c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80173c4:	687b      	ldr	r3, [r7, #4]
 80173c6:	1d1a      	adds	r2, r3, #4
 80173c8:	607a      	str	r2, [r7, #4]
 80173ca:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80173ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80173d2:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
 80173d6:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80173da:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80173de:	ee37 7a67 	vsub.f32	s14, s14, s15
 80173e2:	edd7 7a05 	vldr	s15, [r7, #20]
 80173e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80173ea:	edd7 7a04 	vldr	s15, [r7, #16]
 80173ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80173f2:	687b      	ldr	r3, [r7, #4]
 80173f4:	1d1a      	adds	r2, r3, #4
 80173f6:	607a      	str	r2, [r7, #4]
 80173f8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80173fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8017400:	edc3 7a00 	vstr	s15, [r3]

      pA += 2;
 8017404:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017406:	3308      	adds	r3, #8
 8017408:	647b      	str	r3, [r7, #68]	; 0x44
      pB -= 2;
 801740a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801740c:	3b08      	subs	r3, #8
 801740e:	643b      	str	r3, [r7, #64]	; 0x40
      k--;
 8017410:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017412:	3b01      	subs	r3, #1
 8017414:	64fb      	str	r3, [r7, #76]	; 0x4c
   while (k > 0)
 8017416:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017418:	2b00      	cmp	r3, #0
 801741a:	f73f af7f 	bgt.w	801731c <merge_rfft_f32+0x82>
   }

}
 801741e:	bf00      	nop
 8017420:	bf00      	nop
 8017422:	3754      	adds	r7, #84	; 0x54
 8017424:	46bd      	mov	sp, r7
 8017426:	f85d 7b04 	ldr.w	r7, [sp], #4
 801742a:	4770      	bx	lr

0801742c <arm_rfft_fast_f32>:
void arm_rfft_fast_f32(
  const arm_rfft_fast_instance_f32 * S,
  float32_t * p,
  float32_t * pOut,
  uint8_t ifftFlag)
{
 801742c:	b580      	push	{r7, lr}
 801742e:	b086      	sub	sp, #24
 8017430:	af00      	add	r7, sp, #0
 8017432:	60f8      	str	r0, [r7, #12]
 8017434:	60b9      	str	r1, [r7, #8]
 8017436:	607a      	str	r2, [r7, #4]
 8017438:	70fb      	strb	r3, [r7, #3]
   const arm_cfft_instance_f32 * Sint = &(S->Sint);
 801743a:	68fb      	ldr	r3, [r7, #12]
 801743c:	617b      	str	r3, [r7, #20]

   /* Calculation of Real FFT */
   if (ifftFlag)
 801743e:	78fb      	ldrb	r3, [r7, #3]
 8017440:	2b00      	cmp	r3, #0
 8017442:	d00b      	beq.n	801745c <arm_rfft_fast_f32+0x30>
   {
      /*  Real FFT compression */
      merge_rfft_f32(S, p, pOut);
 8017444:	687a      	ldr	r2, [r7, #4]
 8017446:	68b9      	ldr	r1, [r7, #8]
 8017448:	68f8      	ldr	r0, [r7, #12]
 801744a:	f7ff ff26 	bl	801729a <merge_rfft_f32>
      /* Complex radix-4 IFFT process */
      arm_cfft_f32( Sint, pOut, ifftFlag, 1);
 801744e:	78fa      	ldrb	r2, [r7, #3]
 8017450:	2301      	movs	r3, #1
 8017452:	6879      	ldr	r1, [r7, #4]
 8017454:	6978      	ldr	r0, [r7, #20]
 8017456:	f7fe fd7b 	bl	8015f50 <arm_cfft_f32>
      arm_cfft_f32( Sint, p, ifftFlag, 1);

      /*  Real FFT extraction */
      stage_rfft_f32(S, p, pOut);
   }
}
 801745a:	e00a      	b.n	8017472 <arm_rfft_fast_f32+0x46>
      arm_cfft_f32( Sint, p, ifftFlag, 1);
 801745c:	78fa      	ldrb	r2, [r7, #3]
 801745e:	2301      	movs	r3, #1
 8017460:	68b9      	ldr	r1, [r7, #8]
 8017462:	6978      	ldr	r0, [r7, #20]
 8017464:	f7fe fd74 	bl	8015f50 <arm_cfft_f32>
      stage_rfft_f32(S, p, pOut);
 8017468:	687a      	ldr	r2, [r7, #4]
 801746a:	68b9      	ldr	r1, [r7, #8]
 801746c:	68f8      	ldr	r0, [r7, #12]
 801746e:	f7ff fe2f 	bl	80170d0 <stage_rfft_f32>
}
 8017472:	bf00      	nop
 8017474:	3718      	adds	r7, #24
 8017476:	46bd      	mov	sp, r7
 8017478:	bd80      	pop	{r7, pc}

0801747a <arm_convolve_1_x_n_s8>:
                                 const q7_t *filter_data,
                                 const cmsis_nn_dims *bias_dims,
                                 const int32_t *bias_data,
                                 const cmsis_nn_dims *output_dims,
                                 q7_t *output_data)
{
 801747a:	b580      	push	{r7, lr}
 801747c:	b08e      	sub	sp, #56	; 0x38
 801747e:	af08      	add	r7, sp, #32
 8017480:	60f8      	str	r0, [r7, #12]
 8017482:	60b9      	str	r1, [r7, #8]
 8017484:	607a      	str	r2, [r7, #4]
 8017486:	603b      	str	r3, [r7, #0]
    (void)bias_dims;
    arm_status status = ARM_MATH_SUCCESS;
 8017488:	2300      	movs	r3, #0
 801748a:	75fb      	strb	r3, [r7, #23]
    if (output_dims->w % 4 != 0)
 801748c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801748e:	689b      	ldr	r3, [r3, #8]
 8017490:	f003 0303 	and.w	r3, r3, #3
 8017494:	2b00      	cmp	r3, #0
 8017496:	d002      	beq.n	801749e <arm_convolve_1_x_n_s8+0x24>
    {
        status = ARM_MATH_SIZE_MISMATCH;
 8017498:	23fd      	movs	r3, #253	; 0xfd
 801749a:	75fb      	strb	r3, [r7, #23]
        goto out;
 801749c:	e015      	b.n	80174ca <arm_convolve_1_x_n_s8+0x50>
        }
        output_data += (3 * output_ch);
    }

#else
    status = arm_convolve_s8(ctx,
 801749e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80174a0:	9306      	str	r3, [sp, #24]
 80174a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80174a4:	9305      	str	r3, [sp, #20]
 80174a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174a8:	9304      	str	r3, [sp, #16]
 80174aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174ac:	9303      	str	r3, [sp, #12]
 80174ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174b0:	9302      	str	r3, [sp, #8]
 80174b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80174b4:	9301      	str	r3, [sp, #4]
 80174b6:	6a3b      	ldr	r3, [r7, #32]
 80174b8:	9300      	str	r3, [sp, #0]
 80174ba:	683b      	ldr	r3, [r7, #0]
 80174bc:	687a      	ldr	r2, [r7, #4]
 80174be:	68b9      	ldr	r1, [r7, #8]
 80174c0:	68f8      	ldr	r0, [r7, #12]
 80174c2:	f000 f87d 	bl	80175c0 <arm_convolve_s8>
 80174c6:	4603      	mov	r3, r0
 80174c8:	75fb      	strb	r3, [r7, #23]
                             output_data);
#endif

out:
    /* Return to application */
    return status;
 80174ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80174ce:	4618      	mov	r0, r3
 80174d0:	3718      	adds	r7, #24
 80174d2:	46bd      	mov	sp, r7
 80174d4:	bd80      	pop	{r7, pc}

080174d6 <arm_convolve_1_x_n_s8_get_buffer_size>:

int32_t arm_convolve_1_x_n_s8_get_buffer_size(const cmsis_nn_dims *input_dims, const cmsis_nn_dims *filter_dims)
{
 80174d6:	b480      	push	{r7}
 80174d8:	b083      	sub	sp, #12
 80174da:	af00      	add	r7, sp, #0
 80174dc:	6078      	str	r0, [r7, #4]
 80174de:	6039      	str	r1, [r7, #0]
#if defined(ARM_MATH_DSP) && !defined(ARM_MATH_MVEI)
    return (2 * input_dims->c * filter_dims->w * filter_dims->h) * sizeof(int16_t);
 80174e0:	687b      	ldr	r3, [r7, #4]
 80174e2:	68db      	ldr	r3, [r3, #12]
 80174e4:	683a      	ldr	r2, [r7, #0]
 80174e6:	6892      	ldr	r2, [r2, #8]
 80174e8:	fb02 f303 	mul.w	r3, r2, r3
 80174ec:	683a      	ldr	r2, [r7, #0]
 80174ee:	6852      	ldr	r2, [r2, #4]
 80174f0:	fb02 f303 	mul.w	r3, r2, r3
 80174f4:	009b      	lsls	r3, r3, #2
#else
    (void)input_dims;
    (void)filter_dims;
    return 0;
#endif
}
 80174f6:	4618      	mov	r0, r3
 80174f8:	370c      	adds	r7, #12
 80174fa:	46bd      	mov	sp, r7
 80174fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017500:	4770      	bx	lr

08017502 <arm_convolve_1x1_s8_fast>:
                                    const q7_t *filter_data,
                                    const cmsis_nn_dims *bias_dims,
                                    const int32_t *bias_data,
                                    const cmsis_nn_dims *output_dims,
                                    q7_t *output_data)
{
 8017502:	b5b0      	push	{r4, r5, r7, lr}
 8017504:	b092      	sub	sp, #72	; 0x48
 8017506:	af0a      	add	r7, sp, #40	; 0x28
 8017508:	60f8      	str	r0, [r7, #12]
 801750a:	60b9      	str	r1, [r7, #8]
 801750c:	607a      	str	r2, [r7, #4]
 801750e:	603b      	str	r3, [r7, #0]
    if (input_dims->c % 4 != 0 || conv_params->padding.w != 0 || conv_params->padding.h != 0 ||
 8017510:	683b      	ldr	r3, [r7, #0]
 8017512:	68db      	ldr	r3, [r3, #12]
 8017514:	f003 0303 	and.w	r3, r3, #3
 8017518:	2b00      	cmp	r3, #0
 801751a:	d10f      	bne.n	801753c <arm_convolve_1x1_s8_fast+0x3a>
 801751c:	68bb      	ldr	r3, [r7, #8]
 801751e:	691b      	ldr	r3, [r3, #16]
 8017520:	2b00      	cmp	r3, #0
 8017522:	d10b      	bne.n	801753c <arm_convolve_1x1_s8_fast+0x3a>
 8017524:	68bb      	ldr	r3, [r7, #8]
 8017526:	695b      	ldr	r3, [r3, #20]
 8017528:	2b00      	cmp	r3, #0
 801752a:	d107      	bne.n	801753c <arm_convolve_1x1_s8_fast+0x3a>
        conv_params->stride.w != 1 || conv_params->stride.h != 1)
 801752c:	68bb      	ldr	r3, [r7, #8]
 801752e:	689b      	ldr	r3, [r3, #8]
    if (input_dims->c % 4 != 0 || conv_params->padding.w != 0 || conv_params->padding.h != 0 ||
 8017530:	2b01      	cmp	r3, #1
 8017532:	d103      	bne.n	801753c <arm_convolve_1x1_s8_fast+0x3a>
        conv_params->stride.w != 1 || conv_params->stride.h != 1)
 8017534:	68bb      	ldr	r3, [r7, #8]
 8017536:	68db      	ldr	r3, [r3, #12]
 8017538:	2b01      	cmp	r3, #1
 801753a:	d002      	beq.n	8017542 <arm_convolve_1x1_s8_fast+0x40>
    {
        return ARM_MATH_SIZE_MISMATCH;
 801753c:	f06f 0302 	mvn.w	r3, #2
 8017540:	e02f      	b.n	80175a2 <arm_convolve_1x1_s8_fast+0xa0>
    }

#else
    /* Run the following code as reference implementation for Cortex-M processors with or without DSP extension */

    const int32_t lhs_rows = input_dims->w * input_dims->h * input_dims->n;
 8017542:	683b      	ldr	r3, [r7, #0]
 8017544:	689b      	ldr	r3, [r3, #8]
 8017546:	683a      	ldr	r2, [r7, #0]
 8017548:	6852      	ldr	r2, [r2, #4]
 801754a:	fb02 f303 	mul.w	r3, r2, r3
 801754e:	683a      	ldr	r2, [r7, #0]
 8017550:	6812      	ldr	r2, [r2, #0]
 8017552:	fb02 f303 	mul.w	r3, r2, r3
 8017556:	61fb      	str	r3, [r7, #28]
    const int32_t rhs_rows = output_dims->c;
 8017558:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801755a:	68db      	ldr	r3, [r3, #12]
 801755c:	61bb      	str	r3, [r7, #24]
    const int32_t rhs_cols = input_dims->c;
 801755e:	683b      	ldr	r3, [r7, #0]
 8017560:	68db      	ldr	r3, [r3, #12]
 8017562:	617b      	str	r3, [r7, #20]

    arm_nn_mat_mult_nt_t_s8(input_data,
                            filter_data,
                            bias_data,
                            output_data,
                            quant_params->multiplier,
 8017564:	687b      	ldr	r3, [r7, #4]
 8017566:	681b      	ldr	r3, [r3, #0]
                            quant_params->shift,
 8017568:	687a      	ldr	r2, [r7, #4]
 801756a:	6852      	ldr	r2, [r2, #4]
    arm_nn_mat_mult_nt_t_s8(input_data,
 801756c:	68b9      	ldr	r1, [r7, #8]
 801756e:	6809      	ldr	r1, [r1, #0]
 8017570:	68b8      	ldr	r0, [r7, #8]
 8017572:	6840      	ldr	r0, [r0, #4]
 8017574:	68bc      	ldr	r4, [r7, #8]
 8017576:	6a24      	ldr	r4, [r4, #32]
 8017578:	68bd      	ldr	r5, [r7, #8]
 801757a:	6a6d      	ldr	r5, [r5, #36]	; 0x24
 801757c:	9508      	str	r5, [sp, #32]
 801757e:	9407      	str	r4, [sp, #28]
 8017580:	9006      	str	r0, [sp, #24]
 8017582:	9105      	str	r1, [sp, #20]
 8017584:	6979      	ldr	r1, [r7, #20]
 8017586:	9104      	str	r1, [sp, #16]
 8017588:	69b9      	ldr	r1, [r7, #24]
 801758a:	9103      	str	r1, [sp, #12]
 801758c:	69f9      	ldr	r1, [r7, #28]
 801758e:	9102      	str	r1, [sp, #8]
 8017590:	9201      	str	r2, [sp, #4]
 8017592:	9300      	str	r3, [sp, #0]
 8017594:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017596:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8017598:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801759a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801759c:	f002 fcaa 	bl	8019ef4 <arm_nn_mat_mult_nt_t_s8>
                            conv_params->activation.max);

#endif

    /* Return to application */
    return ARM_MATH_SUCCESS;
 80175a0:	2300      	movs	r3, #0
}
 80175a2:	4618      	mov	r0, r3
 80175a4:	3720      	adds	r7, #32
 80175a6:	46bd      	mov	sp, r7
 80175a8:	bdb0      	pop	{r4, r5, r7, pc}

080175aa <arm_convolve_1x1_s8_fast_get_buffer_size>:

int32_t arm_convolve_1x1_s8_fast_get_buffer_size(const cmsis_nn_dims *input_dims)
{
 80175aa:	b480      	push	{r7}
 80175ac:	b083      	sub	sp, #12
 80175ae:	af00      	add	r7, sp, #0
 80175b0:	6078      	str	r0, [r7, #4]
    (void)input_dims;
    return 0;
 80175b2:	2300      	movs	r3, #0
}
 80175b4:	4618      	mov	r0, r3
 80175b6:	370c      	adds	r7, #12
 80175b8:	46bd      	mov	sp, r7
 80175ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175be:	4770      	bx	lr

080175c0 <arm_convolve_s8>:
                           const q7_t *filter_data,
                           const cmsis_nn_dims *bias_dims,
                           const int32_t *bias_data,
                           const cmsis_nn_dims *output_dims,
                           q7_t *output_data)
{
 80175c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80175c4:	b0dd      	sub	sp, #372	; 0x174
 80175c6:	af08      	add	r7, sp, #32
 80175c8:	f507 76a8 	add.w	r6, r7, #336	; 0x150
 80175cc:	f5a6 769e 	sub.w	r6, r6, #316	; 0x13c
 80175d0:	6030      	str	r0, [r6, #0]
 80175d2:	f507 70a8 	add.w	r0, r7, #336	; 0x150
 80175d6:	f5a0 70a0 	sub.w	r0, r0, #320	; 0x140
 80175da:	6001      	str	r1, [r0, #0]
 80175dc:	f507 71a8 	add.w	r1, r7, #336	; 0x150
 80175e0:	f5a1 71a2 	sub.w	r1, r1, #324	; 0x144
 80175e4:	600a      	str	r2, [r1, #0]
 80175e6:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 80175ea:	f5a2 72a4 	sub.w	r2, r2, #328	; 0x148
 80175ee:	6013      	str	r3, [r2, #0]
    (void)bias_dims;
    q15_t *buffer_a = (q15_t *)ctx->buf;
 80175f0:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80175f4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80175f8:	681b      	ldr	r3, [r3, #0]
 80175fa:	681b      	ldr	r3, [r3, #0]
 80175fc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

    const uint16_t input_batches = input_dims->n;
 8017600:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8017604:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8017608:	681b      	ldr	r3, [r3, #0]
 801760a:	681b      	ldr	r3, [r3, #0]
 801760c:	f8a7 311e 	strh.w	r3, [r7, #286]	; 0x11e
    const uint16_t input_x = input_dims->w;
 8017610:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8017614:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8017618:	681b      	ldr	r3, [r3, #0]
 801761a:	689b      	ldr	r3, [r3, #8]
 801761c:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
    const uint16_t input_y = input_dims->h;
 8017620:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8017624:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8017628:	681b      	ldr	r3, [r3, #0]
 801762a:	685b      	ldr	r3, [r3, #4]
 801762c:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
    const uint16_t input_ch = input_dims->c;
 8017630:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8017634:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8017638:	681b      	ldr	r3, [r3, #0]
 801763a:	68db      	ldr	r3, [r3, #12]
 801763c:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
    const uint16_t kernel_x = filter_dims->w;
 8017640:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8017644:	689b      	ldr	r3, [r3, #8]
 8017646:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116
    const uint16_t kernel_y = filter_dims->h;
 801764a:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 801764e:	685b      	ldr	r3, [r3, #4]
 8017650:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
    const uint16_t output_x = output_dims->w;
 8017654:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8017658:	689b      	ldr	r3, [r3, #8]
 801765a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
    const uint16_t output_y = output_dims->h;
 801765e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8017662:	685b      	ldr	r3, [r3, #4]
 8017664:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
    const uint16_t output_ch = output_dims->c;
 8017668:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 801766c:	68db      	ldr	r3, [r3, #12]
 801766e:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

    const uint16_t pad_x = conv_params->padding.w;
 8017672:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8017676:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 801767a:	681b      	ldr	r3, [r3, #0]
 801767c:	691b      	ldr	r3, [r3, #16]
 801767e:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
    const uint16_t pad_y = conv_params->padding.h;
 8017682:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8017686:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 801768a:	681b      	ldr	r3, [r3, #0]
 801768c:	695b      	ldr	r3, [r3, #20]
 801768e:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
    const uint16_t stride_x = conv_params->stride.w;
 8017692:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8017696:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 801769a:	681b      	ldr	r3, [r3, #0]
 801769c:	689b      	ldr	r3, [r3, #8]
 801769e:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
    const uint16_t stride_y = conv_params->stride.h;
 80176a2:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80176a6:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80176aa:	681b      	ldr	r3, [r3, #0]
 80176ac:	68db      	ldr	r3, [r3, #12]
 80176ae:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106

    const int32_t input_offset = conv_params->input_offset;
 80176b2:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80176b6:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80176ba:	681b      	ldr	r3, [r3, #0]
 80176bc:	681b      	ldr	r3, [r3, #0]
 80176be:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    const int32_t out_offset = conv_params->output_offset;
 80176c2:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80176c6:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80176ca:	681b      	ldr	r3, [r3, #0]
 80176cc:	685b      	ldr	r3, [r3, #4]
 80176ce:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    const int32_t out_activation_min = conv_params->activation.min;
 80176d2:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80176d6:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80176da:	681b      	ldr	r3, [r3, #0]
 80176dc:	6a1b      	ldr	r3, [r3, #32]
 80176de:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    const int32_t out_activation_max = conv_params->activation.max;
 80176e2:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80176e6:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80176ea:	681b      	ldr	r3, [r3, #0]
 80176ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80176ee:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    int32_t *output_mult = quant_params->multiplier;
 80176f2:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80176f6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80176fa:	681b      	ldr	r3, [r3, #0]
 80176fc:	681b      	ldr	r3, [r3, #0]
 80176fe:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    int32_t *output_shift = quant_params->shift;
 8017702:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8017706:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 801770a:	681b      	ldr	r3, [r3, #0]
 801770c:	685b      	ldr	r3, [r3, #4]
 801770e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

    int i_batch;
    for (i_batch = 0; i_batch < input_batches; i_batch++)
 8017712:	2300      	movs	r3, #0
 8017714:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8017718:	e37f      	b.n	8017e1a <arm_convolve_s8+0x85a>

#elif defined(ARM_MATH_DSP)
        int32_t i_out_y, i_out_x, i_ker_y, i_ker_x;

        /* Generate two columns from the input tensor a GEMM computation */
        q15_t *two_column_buf = buffer_a;
 801771a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801771e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
        q7_t *out = output_data;
 8017722:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8017726:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

        /* This part implements the im2col function */
        for (i_out_y = 0; i_out_y < output_y; i_out_y++)
 801772a:	2300      	movs	r3, #0
 801772c:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8017730:	e0da      	b.n	80178e8 <arm_convolve_s8+0x328>
        {
            for (i_out_x = 0; i_out_x < output_x; i_out_x++)
 8017732:	2300      	movs	r3, #0
 8017734:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8017738:	e0ca      	b.n	80178d0 <arm_convolve_s8+0x310>
            {
                for (i_ker_y = i_out_y * stride_y - pad_y; i_ker_y < i_out_y * stride_y - pad_y + kernel_y; i_ker_y++)
 801773a:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 801773e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8017742:	fb03 f202 	mul.w	r2, r3, r2
 8017746:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 801774a:	1ad3      	subs	r3, r2, r3
 801774c:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8017750:	e065      	b.n	801781e <arm_convolve_s8+0x25e>
                {
                    for (i_ker_x = i_out_x * stride_x - pad_x; i_ker_x < i_out_x * stride_x - pad_x + kernel_x;
 8017752:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
 8017756:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 801775a:	fb03 f202 	mul.w	r2, r3, r2
 801775e:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8017762:	1ad3      	subs	r3, r2, r3
 8017764:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8017768:	e044      	b.n	80177f4 <arm_convolve_s8+0x234>
                         i_ker_x++)
                    {
                        if (i_ker_y < 0 || i_ker_y >= input_y || i_ker_x < 0 || i_ker_x >= input_x)
 801776a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 801776e:	2b00      	cmp	r3, #0
 8017770:	db0f      	blt.n	8017792 <arm_convolve_s8+0x1d2>
 8017772:	f8b7 311a 	ldrh.w	r3, [r7, #282]	; 0x11a
 8017776:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 801777a:	429a      	cmp	r2, r3
 801777c:	da09      	bge.n	8017792 <arm_convolve_s8+0x1d2>
 801777e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8017782:	2b00      	cmp	r3, #0
 8017784:	db05      	blt.n	8017792 <arm_convolve_s8+0x1d2>
 8017786:	f8b7 311c 	ldrh.w	r3, [r7, #284]	; 0x11c
 801778a:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 801778e:	429a      	cmp	r2, r3
 8017790:	db09      	blt.n	80177a6 <arm_convolve_s8+0x1e6>
                        {
                            /* Filling 0 for out-of-bound paddings */
                            memset(two_column_buf, 0, sizeof(q15_t) * input_ch);
 8017792:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8017796:	005b      	lsls	r3, r3, #1
 8017798:	461a      	mov	r2, r3
 801779a:	2100      	movs	r1, #0
 801779c:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
 80177a0:	f01a fd02 	bl	80321a8 <memset>
 80177a4:	e019      	b.n	80177da <arm_convolve_s8+0x21a>
                        }
                        else
                        {
                            /* Copying the pixel data to column */
                            arm_q7_to_q15_with_offset(input_data + (i_ker_y * input_x + i_ker_x) * input_ch,
 80177a6:	f8b7 311c 	ldrh.w	r3, [r7, #284]	; 0x11c
 80177aa:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 80177ae:	fb03 f202 	mul.w	r2, r3, r2
 80177b2:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80177b6:	4413      	add	r3, r2
 80177b8:	f8b7 2118 	ldrh.w	r2, [r7, #280]	; 0x118
 80177bc:	fb02 f303 	mul.w	r3, r2, r3
 80177c0:	461a      	mov	r2, r3
 80177c2:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 80177c6:	1898      	adds	r0, r3, r2
 80177c8:	f8b7 2118 	ldrh.w	r2, [r7, #280]	; 0x118
 80177cc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80177d0:	b21b      	sxth	r3, r3
 80177d2:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 80177d6:	f009 ffea 	bl	80217ae <arm_q7_to_q15_with_offset>
                                                      two_column_buf,
                                                      input_ch,
                                                      input_offset);
                        }
                        two_column_buf += input_ch;
 80177da:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 80177de:	005b      	lsls	r3, r3, #1
 80177e0:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 80177e4:	4413      	add	r3, r2
 80177e6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
                         i_ker_x++)
 80177ea:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80177ee:	3301      	adds	r3, #1
 80177f0:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
                    for (i_ker_x = i_out_x * stride_x - pad_x; i_ker_x < i_out_x * stride_x - pad_x + kernel_x;
 80177f4:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
 80177f8:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80177fc:	fb03 f202 	mul.w	r2, r3, r2
 8017800:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8017804:	1ad2      	subs	r2, r2, r3
 8017806:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 801780a:	4413      	add	r3, r2
 801780c:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8017810:	429a      	cmp	r2, r3
 8017812:	dbaa      	blt.n	801776a <arm_convolve_s8+0x1aa>
                for (i_ker_y = i_out_y * stride_y - pad_y; i_ker_y < i_out_y * stride_y - pad_y + kernel_y; i_ker_y++)
 8017814:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8017818:	3301      	adds	r3, #1
 801781a:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 801781e:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 8017822:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8017826:	fb03 f202 	mul.w	r2, r3, r2
 801782a:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 801782e:	1ad2      	subs	r2, r2, r3
 8017830:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 8017834:	4413      	add	r3, r2
 8017836:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 801783a:	429a      	cmp	r2, r3
 801783c:	db89      	blt.n	8017752 <arm_convolve_s8+0x192>
                    }
                }

                /* Computation is filed for every 2 columns */
                if (two_column_buf == buffer_a + 2 * input_ch * kernel_y * kernel_x)
 801783e:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8017842:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 8017846:	fb02 f303 	mul.w	r3, r2, r3
 801784a:	f8b7 2116 	ldrh.w	r2, [r7, #278]	; 0x116
 801784e:	fb02 f303 	mul.w	r3, r2, r3
 8017852:	009b      	lsls	r3, r3, #2
 8017854:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8017858:	4413      	add	r3, r2
 801785a:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 801785e:	429a      	cmp	r2, r3
 8017860:	d131      	bne.n	80178c6 <arm_convolve_s8+0x306>
                {
                    out = arm_nn_mat_mult_kernel_s8_s16(filter_data,
 8017862:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8017866:	b21b      	sxth	r3, r3
 8017868:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 801786c:	b212      	sxth	r2, r2
 801786e:	f8b7 0118 	ldrh.w	r0, [r7, #280]	; 0x118
 8017872:	f8b7 1114 	ldrh.w	r1, [r7, #276]	; 0x114
 8017876:	fb10 f101 	smulbb	r1, r0, r1
 801787a:	b289      	uxth	r1, r1
 801787c:	f8b7 0116 	ldrh.w	r0, [r7, #278]	; 0x116
 8017880:	fb10 f101 	smulbb	r1, r0, r1
 8017884:	b289      	uxth	r1, r1
 8017886:	f8b7 610e 	ldrh.w	r6, [r7, #270]	; 0x10e
 801788a:	f8d7 0134 	ldr.w	r0, [r7, #308]	; 0x134
 801788e:	9006      	str	r0, [sp, #24]
 8017890:	f8d7 0188 	ldr.w	r0, [r7, #392]	; 0x188
 8017894:	9005      	str	r0, [sp, #20]
 8017896:	9104      	str	r1, [sp, #16]
 8017898:	9203      	str	r2, [sp, #12]
 801789a:	9302      	str	r3, [sp, #8]
 801789c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80178a0:	9301      	str	r3, [sp, #4]
 80178a2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80178a6:	9300      	str	r3, [sp, #0]
 80178a8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80178ac:	4632      	mov	r2, r6
 80178ae:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 80178b2:	f8d7 0180 	ldr.w	r0, [r7, #384]	; 0x180
 80178b6:	f000 fba3 	bl	8018000 <arm_nn_mat_mult_kernel_s8_s16>
 80178ba:	f8c7 0134 	str.w	r0, [r7, #308]	; 0x134
                                                        input_ch * kernel_y * kernel_x,
                                                        bias_data,
                                                        out);

                    /* counter reset */
                    two_column_buf = buffer_a;
 80178be:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80178c2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
            for (i_out_x = 0; i_out_x < output_x; i_out_x++)
 80178c6:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80178ca:	3301      	adds	r3, #1
 80178cc:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80178d0:	f8b7 3112 	ldrh.w	r3, [r7, #274]	; 0x112
 80178d4:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80178d8:	429a      	cmp	r2, r3
 80178da:	f6ff af2e 	blt.w	801773a <arm_convolve_s8+0x17a>
        for (i_out_y = 0; i_out_y < output_y; i_out_y++)
 80178de:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80178e2:	3301      	adds	r3, #1
 80178e4:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 80178e8:	f8b7 3110 	ldrh.w	r3, [r7, #272]	; 0x110
 80178ec:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80178f0:	429a      	cmp	r2, r3
 80178f2:	f6ff af1e 	blt.w	8017732 <arm_convolve_s8+0x172>
                }
            }
        }

        /* left-over because odd number of output pixels */
        if (two_column_buf != buffer_a)
 80178f6:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 80178fa:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80178fe:	429a      	cmp	r2, r3
 8017900:	f000 8266 	beq.w	8017dd0 <arm_convolve_s8+0x810>
        {
            const q7_t *ker_a = filter_data;
 8017904:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8017908:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
            int i;

            for (i = 0; i < output_ch; i++)
 801790c:	2300      	movs	r3, #0
 801790e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8017912:	e256      	b.n	8017dc2 <arm_convolve_s8+0x802>
            {
                /* Load the accumulator with bias first */
                q31_t sum = 0;
 8017914:	2300      	movs	r3, #0
 8017916:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
                if (bias_data)
 801791a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 801791e:	2b00      	cmp	r3, #0
 8017920:	d008      	beq.n	8017934 <arm_convolve_s8+0x374>
                {
                    sum = bias_data[i];
 8017922:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8017926:	009b      	lsls	r3, r3, #2
 8017928:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 801792c:	4413      	add	r3, r2
 801792e:	681b      	ldr	r3, [r3, #0]
 8017930:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
                }

                /* Point to the beginning of the im2col buffer where the input is available as a rearranged column */
                const q15_t *ip_as_col = buffer_a;
 8017934:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8017938:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 801793c:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8017940:	601a      	str	r2, [r3, #0]

                /* 4 multiply and accumulates are done in one loop. */
                uint16_t col_count = (input_ch * kernel_y * kernel_x) >> 2;
 8017942:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8017946:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 801794a:	fb02 f303 	mul.w	r3, r2, r3
 801794e:	f8b7 2116 	ldrh.w	r2, [r7, #278]	; 0x116
 8017952:	fb02 f303 	mul.w	r3, r2, r3
 8017956:	109b      	asrs	r3, r3, #2
 8017958:	f8a7 3126 	strh.w	r3, [r7, #294]	; 0x126

                while (col_count)
 801795c:	e102      	b.n	8017b64 <arm_convolve_s8+0x5a4>
 801795e:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8017962:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8017966:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 801796a:	601a      	str	r2, [r3, #0]
 801796c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8017970:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8017974:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8017978:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801797c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8017980:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  @return        q31 value
 */
__STATIC_FORCEINLINE q31_t arm_nn_read_q7x4_ia(const q7_t **in_q7)
{
    q31_t val;
    memcpy(&val, *in_q7, 4);
 8017984:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8017988:	681b      	ldr	r3, [r3, #0]
 801798a:	681b      	ldr	r3, [r3, #0]
 801798c:	461a      	mov	r2, r3
 801798e:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8017992:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8017996:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8017998:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801799c:	681b      	ldr	r3, [r3, #0]
 801799e:	1d1a      	adds	r2, r3, #4
 80179a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80179a4:	601a      	str	r2, [r3, #0]

    return (val);
 80179a6:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80179aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80179ae:	681b      	ldr	r3, [r3, #0]
 * @brief read and expand one q7 word into two q15 words
 */

__STATIC_FORCEINLINE const q7_t *read_and_pad(const q7_t *source, q31_t *out1, q31_t *out2)
{
    q31_t inA = arm_nn_read_q7x4_ia(&source);
 80179b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    q31_t inAbuf1 = __SXTB16(__ROR((uint32_t)inA, 8));
 80179b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80179b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80179bc:	2308      	movs	r3, #8
 80179be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  \param [in]    op2  Number of Bits to rotate
  \return               Rotated value
 */
__STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
{
  op2 %= 32U;
 80179c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80179c6:	f003 031f 	and.w	r3, r3, #31
 80179ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (op2 == 0U)
 80179ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80179d2:	2b00      	cmp	r3, #0
 80179d4:	d102      	bne.n	80179dc <arm_convolve_s8+0x41c>
  {
    return op1;
 80179d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80179da:	e005      	b.n	80179e8 <arm_convolve_s8+0x428>
  }
  return (op1 >> op2) | (op1 << (32U - op2));
 80179dc:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80179e0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80179e4:	fa62 f303 	ror.w	r3, r2, r3
 80179e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

__STATIC_FORCEINLINE uint32_t __SXTB16(uint32_t op1)
{
  uint32_t result;

  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80179ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80179f0:	fa2f f383 	sxtb16	r3, r3
 80179f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  return(result);
 80179f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80179fc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    q31_t inAbuf2 = __SXTB16(inA);
 8017a00:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8017a04:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8017a08:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8017a0c:	fa2f f383 	sxtb16	r3, r3
 8017a10:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  return(result);
 8017a14:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8017a18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

#ifndef ARM_MATH_BIG_ENDIAN
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 8017a1c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8017a20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8017a24:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8017a28:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8017a2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8017a30:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8017a34:	eac3 4322 	pkhtb	r3, r3, r2, asr #16
 8017a38:	67fb      	str	r3, [r7, #124]	; 0x7c
 8017a3a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8017a3c:	461a      	mov	r2, r3
 8017a3e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8017a42:	601a      	str	r2, [r3, #0]
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 8017a44:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8017a48:	67bb      	str	r3, [r7, #120]	; 0x78
 8017a4a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8017a4e:	677b      	str	r3, [r7, #116]	; 0x74
 8017a50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8017a52:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8017a54:	eac3 4302 	pkhbt	r3, r3, r2, lsl #16
 8017a58:	673b      	str	r3, [r7, #112]	; 0x70
 8017a5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8017a5c:	461a      	mov	r2, r3
 8017a5e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8017a62:	601a      	str	r2, [r3, #0]
#else
    *out1 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
    *out2 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
#endif

    return source;
 8017a64:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8017a68:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8017a6c:	681b      	ldr	r3, [r3, #0]
                {
                    q31_t ker_a1, ker_a2;
                    q31_t ip_b1, ip_b2;

                    ker_a = read_and_pad(ker_a, &ker_a1, &ker_a2);
 8017a6e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8017a72:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8017a76:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    memcpy(&val, *in_q15, 4);
 8017a7a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8017a7e:	681b      	ldr	r3, [r3, #0]
 8017a80:	681b      	ldr	r3, [r3, #0]
 8017a82:	461a      	mov	r2, r3
 8017a84:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8017a88:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8017a8c:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 8017a8e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8017a92:	681b      	ldr	r3, [r3, #0]
 8017a94:	1d1a      	adds	r2, r3, #4
 8017a96:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8017a9a:	601a      	str	r2, [r3, #0]
    return (val);
 8017a9c:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8017aa0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8017aa4:	681b      	ldr	r3, [r3, #0]

                    ip_b1 = arm_nn_read_q15x2_ia(&ip_as_col);
 8017aa6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                    sum = __SMLAD(ker_a1, ip_b1, sum);
 8017aaa:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8017aae:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8017ab2:	681b      	ldr	r3, [r3, #0]
 8017ab4:	4619      	mov	r1, r3
 8017ab6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8017aba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8017abe:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8017ac2:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8017ac6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

__STATIC_FORCEINLINE uint32_t __SMLAD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8017aca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8017ace:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8017ad2:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8017ad6:	fb23 1302 	smlad	r3, r3, r2, r1
 8017ada:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  return(result);
 8017ade:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8017ae2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8017ae6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8017aea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    memcpy(&val, *in_q15, 4);
 8017aee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8017af2:	681b      	ldr	r3, [r3, #0]
 8017af4:	681b      	ldr	r3, [r3, #0]
 8017af6:	461a      	mov	r2, r3
 8017af8:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8017afc:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8017b00:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 8017b02:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8017b06:	681b      	ldr	r3, [r3, #0]
 8017b08:	1d1a      	adds	r2, r3, #4
 8017b0a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8017b0e:	601a      	str	r2, [r3, #0]
    return (val);
 8017b10:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8017b14:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8017b18:	681b      	ldr	r3, [r3, #0]
                    ip_b2 = arm_nn_read_q15x2_ia(&ip_as_col);
 8017b1a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
                    sum = __SMLAD(ker_a2, ip_b2, sum);
 8017b1e:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8017b22:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8017b26:	681b      	ldr	r3, [r3, #0]
 8017b28:	4619      	mov	r1, r3
 8017b2a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8017b2e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8017b32:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 8017b36:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8017b3a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8017b3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8017b42:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8017b46:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8017b4a:	fb23 1302 	smlad	r3, r3, r2, r1
 8017b4e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  return(result);
 8017b52:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8017b56:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

                    col_count--;
 8017b5a:	f8b7 3126 	ldrh.w	r3, [r7, #294]	; 0x126
 8017b5e:	3b01      	subs	r3, #1
 8017b60:	f8a7 3126 	strh.w	r3, [r7, #294]	; 0x126
                while (col_count)
 8017b64:	f8b7 3126 	ldrh.w	r3, [r7, #294]	; 0x126
 8017b68:	2b00      	cmp	r3, #0
 8017b6a:	f47f aef8 	bne.w	801795e <arm_convolve_s8+0x39e>
                }
                /* Handle left over mac */
                col_count = input_ch * kernel_y * kernel_x & 0x3;
 8017b6e:	f8b7 2118 	ldrh.w	r2, [r7, #280]	; 0x118
 8017b72:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 8017b76:	fb12 f303 	smulbb	r3, r2, r3
 8017b7a:	b29b      	uxth	r3, r3
 8017b7c:	f8b7 2116 	ldrh.w	r2, [r7, #278]	; 0x116
 8017b80:	fb12 f303 	smulbb	r3, r2, r3
 8017b84:	b29b      	uxth	r3, r3
 8017b86:	f003 0303 	and.w	r3, r3, #3
 8017b8a:	f8a7 3126 	strh.w	r3, [r7, #294]	; 0x126
                while (col_count)
 8017b8e:	e025      	b.n	8017bdc <arm_convolve_s8+0x61c>
                {
                    q7_t ker_a1 = *ker_a++;
 8017b90:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8017b94:	1c5a      	adds	r2, r3, #1
 8017b96:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
 8017b9a:	781b      	ldrb	r3, [r3, #0]
 8017b9c:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
                    q15_t ip_b1 = *ip_as_col++;
 8017ba0:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8017ba4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8017ba8:	681b      	ldr	r3, [r3, #0]
 8017baa:	1c99      	adds	r1, r3, #2
 8017bac:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 8017bb0:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
 8017bb4:	6011      	str	r1, [r2, #0]
 8017bb6:	881b      	ldrh	r3, [r3, #0]
 8017bb8:	f8a7 30e8 	strh.w	r3, [r7, #232]	; 0xe8
                    sum += ker_a1 * ip_b1;
 8017bbc:	f997 30eb 	ldrsb.w	r3, [r7, #235]	; 0xeb
 8017bc0:	f9b7 20e8 	ldrsh.w	r2, [r7, #232]	; 0xe8
 8017bc4:	fb02 f303 	mul.w	r3, r2, r3
 8017bc8:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8017bcc:	4413      	add	r3, r2
 8017bce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
                    col_count--;
 8017bd2:	f8b7 3126 	ldrh.w	r3, [r7, #294]	; 0x126
 8017bd6:	3b01      	subs	r3, #1
 8017bd8:	f8a7 3126 	strh.w	r3, [r7, #294]	; 0x126
                while (col_count)
 8017bdc:	f8b7 3126 	ldrh.w	r3, [r7, #294]	; 0x126
 8017be0:	2b00      	cmp	r3, #0
 8017be2:	d1d5      	bne.n	8017b90 <arm_convolve_s8+0x5d0>
                }

                sum = arm_nn_requantize(sum, output_mult[i], output_shift[i]);
 8017be4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8017be8:	009b      	lsls	r3, r3, #2
 8017bea:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8017bee:	4413      	add	r3, r2
 8017bf0:	681a      	ldr	r2, [r3, #0]
 8017bf2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8017bf6:	009b      	lsls	r3, r3, #2
 8017bf8:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 8017bfc:	440b      	add	r3, r1
 8017bfe:	681b      	ldr	r3, [r3, #0]
 8017c00:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 8017c04:	66f9      	str	r1, [r7, #108]	; 0x6c
 8017c06:	66ba      	str	r2, [r7, #104]	; 0x68
 8017c08:	667b      	str	r3, [r7, #100]	; 0x64
 * @return          Returns (val * multiplier)/(2 ^ shift)
 *
 */
__STATIC_FORCEINLINE q31_t arm_nn_requantize(const q31_t val, const q31_t multiplier, const q31_t shift)
{
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8017c0a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017c0c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017c10:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8017c12:	fa02 f303 	lsl.w	r3, r2, r3
 8017c16:	663b      	str	r3, [r7, #96]	; 0x60
 8017c18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017c1a:	65fb      	str	r3, [r7, #92]	; 0x5c
    q31_t result = 0;
 8017c1c:	2300      	movs	r3, #0
 8017c1e:	65bb      	str	r3, [r7, #88]	; 0x58
    mult.word.low = 1 << 30;
 8017c20:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8017c24:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8017c28:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8017c2c:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 8017c2e:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8017c32:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8017c36:	2200      	movs	r2, #0
 8017c38:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8017c3a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8017c3e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8017c40:	17c8      	asrs	r0, r1, #31
 8017c42:	4688      	mov	r8, r1
 8017c44:	4681      	mov	r9, r0
 8017c46:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8017c48:	17c8      	asrs	r0, r1, #31
 8017c4a:	468a      	mov	sl, r1
 8017c4c:	4683      	mov	fp, r0
 8017c4e:	fb0a f009 	mul.w	r0, sl, r9
 8017c52:	fb08 f10b 	mul.w	r1, r8, fp
 8017c56:	4401      	add	r1, r0
 8017c58:	fba8 450a 	umull	r4, r5, r8, sl
 8017c5c:	4429      	add	r1, r5
 8017c5e:	460d      	mov	r5, r1
 8017c60:	1911      	adds	r1, r2, r4
 8017c62:	6039      	str	r1, [r7, #0]
 8017c64:	416b      	adcs	r3, r5
 8017c66:	607b      	str	r3, [r7, #4]
 8017c68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017c6c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    result = (int32_t)(mult.long_long >> 31);
 8017c70:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8017c74:	f04f 0200 	mov.w	r2, #0
 8017c78:	f04f 0300 	mov.w	r3, #0
 8017c7c:	0fc2      	lsrs	r2, r0, #31
 8017c7e:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8017c82:	17cb      	asrs	r3, r1, #31
 8017c84:	4613      	mov	r3, r2
 8017c86:	65bb      	str	r3, [r7, #88]	; 0x58
    return result;
 8017c88:	6dba      	ldr	r2, [r7, #88]	; 0x58
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8017c8a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017c8c:	2b00      	cmp	r3, #0
 8017c8e:	dc02      	bgt.n	8017c96 <arm_convolve_s8+0x6d6>
 8017c90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017c92:	425b      	negs	r3, r3
 8017c94:	e000      	b.n	8017c98 <arm_convolve_s8+0x6d8>
 8017c96:	2300      	movs	r3, #0
 8017c98:	657a      	str	r2, [r7, #84]	; 0x54
 8017c9a:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 8017c9e:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8017ca2:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8017ca4:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8017ca8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8017cac:	2200      	movs	r2, #0
 8017cae:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8017cb0:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8017cb4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8017cb8:	2201      	movs	r2, #1
 8017cba:	681b      	ldr	r3, [r3, #0]
 8017cbc:	409a      	lsls	r2, r3
 8017cbe:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8017cc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8017cc6:	3a01      	subs	r2, #1
 8017cc8:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 8017cca:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8017cce:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8017cd2:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 8017cd6:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8017cda:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8017cdc:	6812      	ldr	r2, [r2, #0]
 8017cde:	400a      	ands	r2, r1
 8017ce0:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 8017ce2:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8017ce6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8017cea:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 8017cee:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8017cf2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8017cf4:	6812      	ldr	r2, [r2, #0]
 8017cf6:	fa41 f202 	asr.w	r2, r1, r2
 8017cfa:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 8017cfc:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8017d00:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8017d04:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 8017d08:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8017d0c:	6812      	ldr	r2, [r2, #0]
 8017d0e:	1052      	asrs	r2, r2, #1
 8017d10:	601a      	str	r2, [r3, #0]
    if (result < 0)
 8017d12:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8017d16:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8017d1a:	681b      	ldr	r3, [r3, #0]
 8017d1c:	2b00      	cmp	r3, #0
 8017d1e:	da0a      	bge.n	8017d36 <arm_convolve_s8+0x776>
        threshold++;
 8017d20:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8017d24:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8017d28:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 8017d2c:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8017d30:	6812      	ldr	r2, [r2, #0]
 8017d32:	3201      	adds	r2, #1
 8017d34:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 8017d36:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8017d3a:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 8017d3e:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8017d42:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8017d46:	6812      	ldr	r2, [r2, #0]
 8017d48:	681b      	ldr	r3, [r3, #0]
 8017d4a:	429a      	cmp	r2, r3
 8017d4c:	dd0a      	ble.n	8017d64 <arm_convolve_s8+0x7a4>
        result++;
 8017d4e:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8017d52:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8017d56:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 8017d5a:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8017d5e:	6812      	ldr	r2, [r2, #0]
 8017d60:	3201      	adds	r2, #1
 8017d62:	601a      	str	r2, [r3, #0]
    return result;
 8017d64:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8017d68:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8017d6c:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8017d6e:	bf00      	nop
 8017d70:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
                sum += out_offset;
 8017d74:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8017d78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8017d7c:	4413      	add	r3, r2
 8017d7e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
                sum = MAX(sum, out_activation_min);
 8017d82:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8017d86:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8017d8a:	4293      	cmp	r3, r2
 8017d8c:	bfb8      	it	lt
 8017d8e:	4613      	movlt	r3, r2
 8017d90:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
                sum = MIN(sum, out_activation_max);
 8017d94:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8017d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017d9c:	4293      	cmp	r3, r2
 8017d9e:	bfa8      	it	ge
 8017da0:	4613      	movge	r3, r2
 8017da2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
                *out++ = (q7_t)sum;
 8017da6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8017daa:	1c5a      	adds	r2, r3, #1
 8017dac:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 8017db0:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8017db4:	b252      	sxtb	r2, r2
 8017db6:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < output_ch; i++)
 8017db8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8017dbc:	3301      	adds	r3, #1
 8017dbe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8017dc2:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8017dc6:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8017dca:	429a      	cmp	r2, r3
 8017dcc:	f6ff ada2 	blt.w	8017914 <arm_convolve_s8+0x354>
                }
            }
        }
#endif
        /* Advance to the next batch */
        input_data += (input_x * input_y * input_ch);
 8017dd0:	f8b7 311c 	ldrh.w	r3, [r7, #284]	; 0x11c
 8017dd4:	f8b7 211a 	ldrh.w	r2, [r7, #282]	; 0x11a
 8017dd8:	fb02 f303 	mul.w	r3, r2, r3
 8017ddc:	f8b7 2118 	ldrh.w	r2, [r7, #280]	; 0x118
 8017de0:	fb02 f303 	mul.w	r3, r2, r3
 8017de4:	461a      	mov	r2, r3
 8017de6:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8017dea:	4413      	add	r3, r2
 8017dec:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
        output_data += (output_x * output_y * output_ch);
 8017df0:	f8b7 3112 	ldrh.w	r3, [r7, #274]	; 0x112
 8017df4:	f8b7 2110 	ldrh.w	r2, [r7, #272]	; 0x110
 8017df8:	fb02 f303 	mul.w	r3, r2, r3
 8017dfc:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8017e00:	fb02 f303 	mul.w	r3, r2, r3
 8017e04:	461a      	mov	r2, r3
 8017e06:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8017e0a:	4413      	add	r3, r2
 8017e0c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
    for (i_batch = 0; i_batch < input_batches; i_batch++)
 8017e10:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8017e14:	3301      	adds	r3, #1
 8017e16:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8017e1a:	f8b7 311e 	ldrh.w	r3, [r7, #286]	; 0x11e
 8017e1e:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8017e22:	429a      	cmp	r2, r3
 8017e24:	f6ff ac79 	blt.w	801771a <arm_convolve_s8+0x15a>
    }

    /* Return to application */
    return ARM_MATH_SUCCESS;
 8017e28:	2300      	movs	r3, #0
}
 8017e2a:	4618      	mov	r0, r3
 8017e2c:	f507 77aa 	add.w	r7, r7, #340	; 0x154
 8017e30:	46bd      	mov	sp, r7
 8017e32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017e36 <arm_convolve_s8_get_buffer_size>:

int32_t arm_convolve_s8_get_buffer_size(const cmsis_nn_dims *input_dims, const cmsis_nn_dims *filter_dims)
{
 8017e36:	b480      	push	{r7}
 8017e38:	b083      	sub	sp, #12
 8017e3a:	af00      	add	r7, sp, #0
 8017e3c:	6078      	str	r0, [r7, #4]
 8017e3e:	6039      	str	r1, [r7, #0]
#if defined(ARM_MATH_DSP)
    return (2 * input_dims->c * filter_dims->w * filter_dims->h) * (int32_t)sizeof(int16_t);
 8017e40:	687b      	ldr	r3, [r7, #4]
 8017e42:	68db      	ldr	r3, [r3, #12]
 8017e44:	683a      	ldr	r2, [r7, #0]
 8017e46:	6892      	ldr	r2, [r2, #8]
 8017e48:	fb02 f303 	mul.w	r3, r2, r3
 8017e4c:	683a      	ldr	r2, [r7, #0]
 8017e4e:	6852      	ldr	r2, [r2, #4]
 8017e50:	fb02 f303 	mul.w	r3, r2, r3
 8017e54:	009b      	lsls	r3, r3, #2
#else
    (void)input_dims;
    (void)filter_dims;
    return 0;
#endif
}
 8017e56:	4618      	mov	r0, r3
 8017e58:	370c      	adds	r7, #12
 8017e5a:	46bd      	mov	sp, r7
 8017e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e60:	4770      	bx	lr

08017e62 <arm_convolve_wrapper_s8>:
                                   const q7_t *filter_data,
                                   const cmsis_nn_dims *bias_dims,
                                   const int32_t *bias_data,
                                   const cmsis_nn_dims *output_dims,
                                   q7_t *output_data)
{
 8017e62:	b580      	push	{r7, lr}
 8017e64:	b08c      	sub	sp, #48	; 0x30
 8017e66:	af08      	add	r7, sp, #32
 8017e68:	60f8      	str	r0, [r7, #12]
 8017e6a:	60b9      	str	r1, [r7, #8]
 8017e6c:	607a      	str	r2, [r7, #4]
 8017e6e:	603b      	str	r3, [r7, #0]
    if ((conv_params->padding.w == 0) && (conv_params->padding.h == 0) && (input_dims->c % 4 == 0) &&
 8017e70:	68bb      	ldr	r3, [r7, #8]
 8017e72:	691b      	ldr	r3, [r3, #16]
 8017e74:	2b00      	cmp	r3, #0
 8017e76:	d12f      	bne.n	8017ed8 <arm_convolve_wrapper_s8+0x76>
 8017e78:	68bb      	ldr	r3, [r7, #8]
 8017e7a:	695b      	ldr	r3, [r3, #20]
 8017e7c:	2b00      	cmp	r3, #0
 8017e7e:	d12b      	bne.n	8017ed8 <arm_convolve_wrapper_s8+0x76>
 8017e80:	683b      	ldr	r3, [r7, #0]
 8017e82:	68db      	ldr	r3, [r3, #12]
 8017e84:	f003 0303 	and.w	r3, r3, #3
 8017e88:	2b00      	cmp	r3, #0
 8017e8a:	d125      	bne.n	8017ed8 <arm_convolve_wrapper_s8+0x76>
        (conv_params->stride.w == 1) && (conv_params->stride.h == 1) && (filter_dims->w == 1) && (filter_dims->h == 1))
 8017e8c:	68bb      	ldr	r3, [r7, #8]
 8017e8e:	689b      	ldr	r3, [r3, #8]
    if ((conv_params->padding.w == 0) && (conv_params->padding.h == 0) && (input_dims->c % 4 == 0) &&
 8017e90:	2b01      	cmp	r3, #1
 8017e92:	d121      	bne.n	8017ed8 <arm_convolve_wrapper_s8+0x76>
        (conv_params->stride.w == 1) && (conv_params->stride.h == 1) && (filter_dims->w == 1) && (filter_dims->h == 1))
 8017e94:	68bb      	ldr	r3, [r7, #8]
 8017e96:	68db      	ldr	r3, [r3, #12]
 8017e98:	2b01      	cmp	r3, #1
 8017e9a:	d11d      	bne.n	8017ed8 <arm_convolve_wrapper_s8+0x76>
 8017e9c:	69fb      	ldr	r3, [r7, #28]
 8017e9e:	689b      	ldr	r3, [r3, #8]
 8017ea0:	2b01      	cmp	r3, #1
 8017ea2:	d119      	bne.n	8017ed8 <arm_convolve_wrapper_s8+0x76>
 8017ea4:	69fb      	ldr	r3, [r7, #28]
 8017ea6:	685b      	ldr	r3, [r3, #4]
 8017ea8:	2b01      	cmp	r3, #1
 8017eaa:	d115      	bne.n	8017ed8 <arm_convolve_wrapper_s8+0x76>
    {
        return arm_convolve_1x1_s8_fast(ctx,
 8017eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017eae:	9306      	str	r3, [sp, #24]
 8017eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017eb2:	9305      	str	r3, [sp, #20]
 8017eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017eb6:	9304      	str	r3, [sp, #16]
 8017eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017eba:	9303      	str	r3, [sp, #12]
 8017ebc:	6a3b      	ldr	r3, [r7, #32]
 8017ebe:	9302      	str	r3, [sp, #8]
 8017ec0:	69fb      	ldr	r3, [r7, #28]
 8017ec2:	9301      	str	r3, [sp, #4]
 8017ec4:	69bb      	ldr	r3, [r7, #24]
 8017ec6:	9300      	str	r3, [sp, #0]
 8017ec8:	683b      	ldr	r3, [r7, #0]
 8017eca:	687a      	ldr	r2, [r7, #4]
 8017ecc:	68b9      	ldr	r1, [r7, #8]
 8017ece:	68f8      	ldr	r0, [r7, #12]
 8017ed0:	f7ff fb17 	bl	8017502 <arm_convolve_1x1_s8_fast>
 8017ed4:	4603      	mov	r3, r0
 8017ed6:	e040      	b.n	8017f5a <arm_convolve_wrapper_s8+0xf8>
                                        bias_dims,
                                        bias_data,
                                        output_dims,
                                        output_data);
    }
    else if ((output_dims->h == 1) && (input_dims->h == 1) && (filter_dims->h == 1) && (output_dims->w % 4 == 0) &&
 8017ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017eda:	685b      	ldr	r3, [r3, #4]
 8017edc:	2b01      	cmp	r3, #1
 8017ede:	d127      	bne.n	8017f30 <arm_convolve_wrapper_s8+0xce>
 8017ee0:	683b      	ldr	r3, [r7, #0]
 8017ee2:	685b      	ldr	r3, [r3, #4]
 8017ee4:	2b01      	cmp	r3, #1
 8017ee6:	d123      	bne.n	8017f30 <arm_convolve_wrapper_s8+0xce>
 8017ee8:	69fb      	ldr	r3, [r7, #28]
 8017eea:	685b      	ldr	r3, [r3, #4]
 8017eec:	2b01      	cmp	r3, #1
 8017eee:	d11f      	bne.n	8017f30 <arm_convolve_wrapper_s8+0xce>
 8017ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ef2:	689b      	ldr	r3, [r3, #8]
 8017ef4:	f003 0303 	and.w	r3, r3, #3
 8017ef8:	2b00      	cmp	r3, #0
 8017efa:	d119      	bne.n	8017f30 <arm_convolve_wrapper_s8+0xce>
             (input_dims->n == 1))
 8017efc:	683b      	ldr	r3, [r7, #0]
 8017efe:	681b      	ldr	r3, [r3, #0]
    else if ((output_dims->h == 1) && (input_dims->h == 1) && (filter_dims->h == 1) && (output_dims->w % 4 == 0) &&
 8017f00:	2b01      	cmp	r3, #1
 8017f02:	d115      	bne.n	8017f30 <arm_convolve_wrapper_s8+0xce>
    {
        return arm_convolve_1_x_n_s8(ctx,
 8017f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f06:	9306      	str	r3, [sp, #24]
 8017f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f0a:	9305      	str	r3, [sp, #20]
 8017f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f0e:	9304      	str	r3, [sp, #16]
 8017f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f12:	9303      	str	r3, [sp, #12]
 8017f14:	6a3b      	ldr	r3, [r7, #32]
 8017f16:	9302      	str	r3, [sp, #8]
 8017f18:	69fb      	ldr	r3, [r7, #28]
 8017f1a:	9301      	str	r3, [sp, #4]
 8017f1c:	69bb      	ldr	r3, [r7, #24]
 8017f1e:	9300      	str	r3, [sp, #0]
 8017f20:	683b      	ldr	r3, [r7, #0]
 8017f22:	687a      	ldr	r2, [r7, #4]
 8017f24:	68b9      	ldr	r1, [r7, #8]
 8017f26:	68f8      	ldr	r0, [r7, #12]
 8017f28:	f7ff faa7 	bl	801747a <arm_convolve_1_x_n_s8>
 8017f2c:	4603      	mov	r3, r0
 8017f2e:	e014      	b.n	8017f5a <arm_convolve_wrapper_s8+0xf8>
                                     output_dims,
                                     output_data);
    }
    else
    {
        return arm_convolve_s8(ctx,
 8017f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f32:	9306      	str	r3, [sp, #24]
 8017f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f36:	9305      	str	r3, [sp, #20]
 8017f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f3a:	9304      	str	r3, [sp, #16]
 8017f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f3e:	9303      	str	r3, [sp, #12]
 8017f40:	6a3b      	ldr	r3, [r7, #32]
 8017f42:	9302      	str	r3, [sp, #8]
 8017f44:	69fb      	ldr	r3, [r7, #28]
 8017f46:	9301      	str	r3, [sp, #4]
 8017f48:	69bb      	ldr	r3, [r7, #24]
 8017f4a:	9300      	str	r3, [sp, #0]
 8017f4c:	683b      	ldr	r3, [r7, #0]
 8017f4e:	687a      	ldr	r2, [r7, #4]
 8017f50:	68b9      	ldr	r1, [r7, #8]
 8017f52:	68f8      	ldr	r0, [r7, #12]
 8017f54:	f7ff fb34 	bl	80175c0 <arm_convolve_s8>
 8017f58:	4603      	mov	r3, r0
                               bias_dims,
                               bias_data,
                               output_dims,
                               output_data);
    }
}
 8017f5a:	4618      	mov	r0, r3
 8017f5c:	3710      	adds	r7, #16
 8017f5e:	46bd      	mov	sp, r7
 8017f60:	bd80      	pop	{r7, pc}

08017f62 <arm_convolve_wrapper_s8_get_buffer_size>:

int32_t arm_convolve_wrapper_s8_get_buffer_size(const cmsis_nn_conv_params *conv_params,
                                                const cmsis_nn_dims *input_dims,
                                                const cmsis_nn_dims *filter_dims,
                                                const cmsis_nn_dims *output_dims)
{
 8017f62:	b580      	push	{r7, lr}
 8017f64:	b084      	sub	sp, #16
 8017f66:	af00      	add	r7, sp, #0
 8017f68:	60f8      	str	r0, [r7, #12]
 8017f6a:	60b9      	str	r1, [r7, #8]
 8017f6c:	607a      	str	r2, [r7, #4]
 8017f6e:	603b      	str	r3, [r7, #0]
    if ((conv_params->padding.w == 0) && (conv_params->padding.h == 0) && (input_dims->c % 4 == 0) &&
 8017f70:	68fb      	ldr	r3, [r7, #12]
 8017f72:	691b      	ldr	r3, [r3, #16]
 8017f74:	2b00      	cmp	r3, #0
 8017f76:	d11e      	bne.n	8017fb6 <arm_convolve_wrapper_s8_get_buffer_size+0x54>
 8017f78:	68fb      	ldr	r3, [r7, #12]
 8017f7a:	695b      	ldr	r3, [r3, #20]
 8017f7c:	2b00      	cmp	r3, #0
 8017f7e:	d11a      	bne.n	8017fb6 <arm_convolve_wrapper_s8_get_buffer_size+0x54>
 8017f80:	68bb      	ldr	r3, [r7, #8]
 8017f82:	68db      	ldr	r3, [r3, #12]
 8017f84:	f003 0303 	and.w	r3, r3, #3
 8017f88:	2b00      	cmp	r3, #0
 8017f8a:	d114      	bne.n	8017fb6 <arm_convolve_wrapper_s8_get_buffer_size+0x54>
        (conv_params->stride.w == 1) && (conv_params->stride.h == 1) && (filter_dims->w == 1) && (filter_dims->h == 1))
 8017f8c:	68fb      	ldr	r3, [r7, #12]
 8017f8e:	689b      	ldr	r3, [r3, #8]
    if ((conv_params->padding.w == 0) && (conv_params->padding.h == 0) && (input_dims->c % 4 == 0) &&
 8017f90:	2b01      	cmp	r3, #1
 8017f92:	d110      	bne.n	8017fb6 <arm_convolve_wrapper_s8_get_buffer_size+0x54>
        (conv_params->stride.w == 1) && (conv_params->stride.h == 1) && (filter_dims->w == 1) && (filter_dims->h == 1))
 8017f94:	68fb      	ldr	r3, [r7, #12]
 8017f96:	68db      	ldr	r3, [r3, #12]
 8017f98:	2b01      	cmp	r3, #1
 8017f9a:	d10c      	bne.n	8017fb6 <arm_convolve_wrapper_s8_get_buffer_size+0x54>
 8017f9c:	687b      	ldr	r3, [r7, #4]
 8017f9e:	689b      	ldr	r3, [r3, #8]
 8017fa0:	2b01      	cmp	r3, #1
 8017fa2:	d108      	bne.n	8017fb6 <arm_convolve_wrapper_s8_get_buffer_size+0x54>
 8017fa4:	687b      	ldr	r3, [r7, #4]
 8017fa6:	685b      	ldr	r3, [r3, #4]
 8017fa8:	2b01      	cmp	r3, #1
 8017faa:	d104      	bne.n	8017fb6 <arm_convolve_wrapper_s8_get_buffer_size+0x54>
    {
        return arm_convolve_1x1_s8_fast_get_buffer_size(input_dims);
 8017fac:	68b8      	ldr	r0, [r7, #8]
 8017fae:	f7ff fafc 	bl	80175aa <arm_convolve_1x1_s8_fast_get_buffer_size>
 8017fb2:	4603      	mov	r3, r0
 8017fb4:	e020      	b.n	8017ff8 <arm_convolve_wrapper_s8_get_buffer_size+0x96>
    }
    else if ((output_dims->h == 1) && (input_dims->h == 1) && (filter_dims->h == 1) && (output_dims->w % 4 == 0) &&
 8017fb6:	683b      	ldr	r3, [r7, #0]
 8017fb8:	685b      	ldr	r3, [r3, #4]
 8017fba:	2b01      	cmp	r3, #1
 8017fbc:	d117      	bne.n	8017fee <arm_convolve_wrapper_s8_get_buffer_size+0x8c>
 8017fbe:	68bb      	ldr	r3, [r7, #8]
 8017fc0:	685b      	ldr	r3, [r3, #4]
 8017fc2:	2b01      	cmp	r3, #1
 8017fc4:	d113      	bne.n	8017fee <arm_convolve_wrapper_s8_get_buffer_size+0x8c>
 8017fc6:	687b      	ldr	r3, [r7, #4]
 8017fc8:	685b      	ldr	r3, [r3, #4]
 8017fca:	2b01      	cmp	r3, #1
 8017fcc:	d10f      	bne.n	8017fee <arm_convolve_wrapper_s8_get_buffer_size+0x8c>
 8017fce:	683b      	ldr	r3, [r7, #0]
 8017fd0:	689b      	ldr	r3, [r3, #8]
 8017fd2:	f003 0303 	and.w	r3, r3, #3
 8017fd6:	2b00      	cmp	r3, #0
 8017fd8:	d109      	bne.n	8017fee <arm_convolve_wrapper_s8_get_buffer_size+0x8c>
             (input_dims->n == 1))
 8017fda:	68bb      	ldr	r3, [r7, #8]
 8017fdc:	681b      	ldr	r3, [r3, #0]
    else if ((output_dims->h == 1) && (input_dims->h == 1) && (filter_dims->h == 1) && (output_dims->w % 4 == 0) &&
 8017fde:	2b01      	cmp	r3, #1
 8017fe0:	d105      	bne.n	8017fee <arm_convolve_wrapper_s8_get_buffer_size+0x8c>
    {
        return arm_convolve_1_x_n_s8_get_buffer_size(input_dims, filter_dims);
 8017fe2:	6879      	ldr	r1, [r7, #4]
 8017fe4:	68b8      	ldr	r0, [r7, #8]
 8017fe6:	f7ff fa76 	bl	80174d6 <arm_convolve_1_x_n_s8_get_buffer_size>
 8017fea:	4603      	mov	r3, r0
 8017fec:	e004      	b.n	8017ff8 <arm_convolve_wrapper_s8_get_buffer_size+0x96>
    }
    else
    {
        return arm_convolve_s8_get_buffer_size(input_dims, filter_dims);
 8017fee:	6879      	ldr	r1, [r7, #4]
 8017ff0:	68b8      	ldr	r0, [r7, #8]
 8017ff2:	f7ff ff20 	bl	8017e36 <arm_convolve_s8_get_buffer_size>
 8017ff6:	4603      	mov	r3, r0
    }
}
 8017ff8:	4618      	mov	r0, r3
 8017ffa:	3710      	adds	r7, #16
 8017ffc:	46bd      	mov	sp, r7
 8017ffe:	bd80      	pop	{r7, pc}

08018000 <arm_nn_mat_mult_kernel_s8_s16>:
                                    const int16_t activation_min,
                                    const int16_t activation_max,
                                    const uint16_t num_col_a,
                                    const int32_t *const output_bias,
                                    q7_t *out_0)
{
 8018000:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8018004:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 8018008:	af00      	add	r7, sp, #0
 801800a:	f507 648e 	add.w	r4, r7, #1136	; 0x470
 801800e:	f5a4 746f 	sub.w	r4, r4, #956	; 0x3bc
 8018012:	6020      	str	r0, [r4, #0]
 8018014:	f507 608e 	add.w	r0, r7, #1136	; 0x470
 8018018:	f5a0 7070 	sub.w	r0, r0, #960	; 0x3c0
 801801c:	6001      	str	r1, [r0, #0]
 801801e:	4611      	mov	r1, r2
 8018020:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8018024:	f5a2 7272 	sub.w	r2, r2, #968	; 0x3c8
 8018028:	6013      	str	r3, [r2, #0]
 801802a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801802e:	f2a3 32c2 	subw	r2, r3, #962	; 0x3c2
 8018032:	460b      	mov	r3, r1
 8018034:	8013      	strh	r3, [r2, #0]

    return out_1;

#elif defined(ARM_MATH_DSP)
    /* set up the second output pointers */
    q7_t *out_1 = out_0 + output_ch;
 8018036:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801803a:	f2a3 33c2 	subw	r3, r3, #962	; 0x3c2
 801803e:	881a      	ldrh	r2, [r3, #0]
 8018040:	f8d7 34a8 	ldr.w	r3, [r7, #1192]	; 0x4a8
 8018044:	4413      	add	r3, r2
 8018046:	f8c7 346c 	str.w	r3, [r7, #1132]	; 0x46c
    const int32_t *bias = output_bias;
 801804a:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	; 0x4a4
 801804e:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468

    uint16_t row_count = output_ch / 2;
 8018052:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018056:	f2a3 33c2 	subw	r3, r3, #962	; 0x3c2
 801805a:	881b      	ldrh	r3, [r3, #0]
 801805c:	085b      	lsrs	r3, r3, #1
 801805e:	f8a7 3466 	strh.w	r3, [r7, #1126]	; 0x466
    const q7_t *ip_a0 = input_a;
 8018062:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018066:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 801806a:	681b      	ldr	r3, [r3, #0]
 801806c:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
    /* this loop over rows in A */
    while (row_count)
 8018070:	f001 b92e 	b.w	80192d0 <arm_nn_mat_mult_kernel_s8_s16+0x12d0>
    {
        /* setup pointers for B */
        const q15_t *ip_b0 = input_b;
 8018074:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018078:	f5a3 724b 	sub.w	r2, r3, #812	; 0x32c
 801807c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018080:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 8018084:	681b      	ldr	r3, [r3, #0]
 8018086:	6013      	str	r3, [r2, #0]
        const q15_t *ip_b1 = ip_b0 + num_col_a;
 8018088:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801808c:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 8018090:	681a      	ldr	r2, [r3, #0]
 8018092:	f8b7 34a0 	ldrh.w	r3, [r7, #1184]	; 0x4a0
 8018096:	005b      	lsls	r3, r3, #1
 8018098:	441a      	add	r2, r3
 801809a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801809e:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 80180a2:	601a      	str	r2, [r3, #0]

        /* align the second pointer for A */
        const q7_t *ip_a1 = ip_a0 + num_col_a;
 80180a4:	f8b7 24a0 	ldrh.w	r2, [r7, #1184]	; 0x4a0
 80180a8:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 80180ac:	4413      	add	r3, r2
 80180ae:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c

        /* Init accumulator with bias for channel N and N + 1 */
        q31_t ch_0_out_0 = *bias;
 80180b2:	f8d7 3468 	ldr.w	r3, [r7, #1128]	; 0x468
 80180b6:	681b      	ldr	r3, [r3, #0]
 80180b8:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
        q31_t ch_0_out_1 = *bias++;
 80180bc:	f8d7 2468 	ldr.w	r2, [r7, #1128]	; 0x468
 80180c0:	1d13      	adds	r3, r2, #4
 80180c2:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
 80180c6:	6813      	ldr	r3, [r2, #0]
 80180c8:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
        q31_t ch_1_out_0 = *bias;
 80180cc:	f8d7 3468 	ldr.w	r3, [r7, #1128]	; 0x468
 80180d0:	681b      	ldr	r3, [r3, #0]
 80180d2:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
        q31_t ch_1_out_1 = *bias++;
 80180d6:	f8d7 2468 	ldr.w	r2, [r7, #1128]	; 0x468
 80180da:	1d13      	adds	r3, r2, #4
 80180dc:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
 80180e0:	6813      	ldr	r3, [r2, #0]
 80180e2:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c

        uint16_t col_count = num_col_a / 4;
 80180e6:	f8b7 34a0 	ldrh.w	r3, [r7, #1184]	; 0x4a0
 80180ea:	089b      	lsrs	r3, r3, #2
 80180ec:	f8a7 344a 	strh.w	r3, [r7, #1098]	; 0x44a
        /* accumulate over the vector */
        while (col_count)
 80180f0:	e35f      	b.n	80187b2 <arm_nn_mat_mult_kernel_s8_s16+0x7b2>
 80180f2:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80180f6:	f5a3 72b8 	sub.w	r2, r3, #368	; 0x170
 80180fa:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 80180fe:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q15, 4);
 8018100:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018104:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8018108:	681b      	ldr	r3, [r3, #0]
 801810a:	681b      	ldr	r3, [r3, #0]
 801810c:	681b      	ldr	r3, [r3, #0]
 801810e:	461a      	mov	r2, r3
 8018110:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018114:	f5a3 7359 	sub.w	r3, r3, #868	; 0x364
 8018118:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 801811a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801811e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8018122:	681b      	ldr	r3, [r3, #0]
 8018124:	681b      	ldr	r3, [r3, #0]
 8018126:	1d1a      	adds	r2, r3, #4
 8018128:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801812c:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8018130:	681b      	ldr	r3, [r3, #0]
 8018132:	601a      	str	r2, [r3, #0]
    return (val);
 8018134:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018138:	f5a3 7359 	sub.w	r3, r3, #868	; 0x364
 801813c:	681b      	ldr	r3, [r3, #0]
        {
            q31_t a01, a02, a11, a12;
            q31_t b0 = arm_nn_read_q15x2_ia(&ip_b0);
 801813e:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
 8018142:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018146:	f5a3 72b6 	sub.w	r2, r3, #364	; 0x16c
 801814a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801814e:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q15, 4);
 8018150:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018154:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8018158:	681b      	ldr	r3, [r3, #0]
 801815a:	681b      	ldr	r3, [r3, #0]
 801815c:	681b      	ldr	r3, [r3, #0]
 801815e:	461a      	mov	r2, r3
 8018160:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018164:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 8018168:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 801816a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801816e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8018172:	681b      	ldr	r3, [r3, #0]
 8018174:	681b      	ldr	r3, [r3, #0]
 8018176:	1d1a      	adds	r2, r3, #4
 8018178:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801817c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8018180:	681b      	ldr	r3, [r3, #0]
 8018182:	601a      	str	r2, [r3, #0]
    return (val);
 8018184:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018188:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 801818c:	681b      	ldr	r3, [r3, #0]
            q31_t b1 = arm_nn_read_q15x2_ia(&ip_b1);
 801818e:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
 8018192:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018196:	f5a3 725b 	sub.w	r2, r3, #876	; 0x36c
 801819a:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 801819e:	6013      	str	r3, [r2, #0]
 80181a0:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80181a4:	f5a3 7292 	sub.w	r2, r3, #292	; 0x124
 80181a8:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80181ac:	6013      	str	r3, [r2, #0]
 80181ae:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80181b2:	f5a3 7294 	sub.w	r2, r3, #296	; 0x128
 80181b6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80181ba:	6013      	str	r3, [r2, #0]
 80181bc:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80181c0:	f5a3 7296 	sub.w	r2, r3, #300	; 0x12c
 80181c4:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80181c8:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 80181ca:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80181ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80181d2:	681b      	ldr	r3, [r3, #0]
 80181d4:	681b      	ldr	r3, [r3, #0]
 80181d6:	681b      	ldr	r3, [r3, #0]
 80181d8:	461a      	mov	r2, r3
 80181da:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80181de:	f5a3 735c 	sub.w	r3, r3, #880	; 0x370
 80181e2:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 80181e4:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80181e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80181ec:	681b      	ldr	r3, [r3, #0]
 80181ee:	681b      	ldr	r3, [r3, #0]
 80181f0:	1d1a      	adds	r2, r3, #4
 80181f2:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80181f6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80181fa:	681b      	ldr	r3, [r3, #0]
 80181fc:	601a      	str	r2, [r3, #0]
    return (val);
 80181fe:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018202:	f5a3 735c 	sub.w	r3, r3, #880	; 0x370
 8018206:	681a      	ldr	r2, [r3, #0]
    q31_t inA = arm_nn_read_q7x4_ia(&source);
 8018208:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801820c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8018210:	601a      	str	r2, [r3, #0]
    q31_t inAbuf1 = __SXTB16(__ROR((uint32_t)inA, 8));
 8018212:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018216:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801821a:	681a      	ldr	r2, [r3, #0]
 801821c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018220:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8018224:	601a      	str	r2, [r3, #0]
 8018226:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801822a:	f5a3 729c 	sub.w	r2, r3, #312	; 0x138
 801822e:	2308      	movs	r3, #8
 8018230:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8018232:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018236:	f5a3 729c 	sub.w	r2, r3, #312	; 0x138
 801823a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801823e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8018242:	681b      	ldr	r3, [r3, #0]
 8018244:	f003 031f 	and.w	r3, r3, #31
 8018248:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801824a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801824e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8018252:	681b      	ldr	r3, [r3, #0]
 8018254:	2b00      	cmp	r3, #0
 8018256:	d105      	bne.n	8018264 <arm_nn_mat_mult_kernel_s8_s16+0x264>
    return op1;
 8018258:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801825c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8018260:	681a      	ldr	r2, [r3, #0]
 8018262:	e00a      	b.n	801827a <arm_nn_mat_mult_kernel_s8_s16+0x27a>
  return (op1 >> op2) | (op1 << (32U - op2));
 8018264:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018268:	f5a3 729a 	sub.w	r2, r3, #308	; 0x134
 801826c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018270:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8018274:	6812      	ldr	r2, [r2, #0]
 8018276:	681b      	ldr	r3, [r3, #0]
 8018278:	41da      	rors	r2, r3
 801827a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801827e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8018282:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8018284:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018288:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 801828c:	681b      	ldr	r3, [r3, #0]
 801828e:	fa2f f283 	sxtb16	r2, r3
 8018292:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018296:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 801829a:	601a      	str	r2, [r3, #0]
  return(result);
 801829c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80182a0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80182a4:	681a      	ldr	r2, [r3, #0]
 80182a6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80182aa:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80182ae:	601a      	str	r2, [r3, #0]
    q31_t inAbuf2 = __SXTB16(inA);
 80182b0:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80182b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80182b8:	681a      	ldr	r2, [r3, #0]
 80182ba:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80182be:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80182c2:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80182c4:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80182c8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80182cc:	681b      	ldr	r3, [r3, #0]
 80182ce:	fa2f f283 	sxtb16	r2, r3
 80182d2:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80182d6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80182da:	601a      	str	r2, [r3, #0]
  return(result);
 80182dc:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80182e0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80182e4:	681a      	ldr	r2, [r3, #0]
 80182e6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80182ea:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80182ee:	601a      	str	r2, [r3, #0]
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 80182f0:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80182f4:	f5a3 72aa 	sub.w	r2, r3, #340	; 0x154
 80182f8:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80182fc:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8018300:	681b      	ldr	r3, [r3, #0]
 8018302:	6013      	str	r3, [r2, #0]
 8018304:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018308:	f5a3 72ac 	sub.w	r2, r3, #344	; 0x158
 801830c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018310:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8018314:	681b      	ldr	r3, [r3, #0]
 8018316:	6013      	str	r3, [r2, #0]
 8018318:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801831c:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8018320:	681a      	ldr	r2, [r3, #0]
 8018322:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018326:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 801832a:	681b      	ldr	r3, [r3, #0]
 801832c:	eac2 4223 	pkhtb	r2, r2, r3, asr #16
 8018330:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018334:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8018338:	601a      	str	r2, [r3, #0]
 801833a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801833e:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8018342:	681b      	ldr	r3, [r3, #0]
 8018344:	461a      	mov	r2, r3
 8018346:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801834a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 801834e:	681b      	ldr	r3, [r3, #0]
 8018350:	601a      	str	r2, [r3, #0]
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 8018352:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018356:	f5a3 72b0 	sub.w	r2, r3, #352	; 0x160
 801835a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801835e:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8018362:	681b      	ldr	r3, [r3, #0]
 8018364:	6013      	str	r3, [r2, #0]
 8018366:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801836a:	f5a3 72b2 	sub.w	r2, r3, #356	; 0x164
 801836e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018372:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8018376:	681b      	ldr	r3, [r3, #0]
 8018378:	6013      	str	r3, [r2, #0]
 801837a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801837e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8018382:	681a      	ldr	r2, [r3, #0]
 8018384:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018388:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 801838c:	681b      	ldr	r3, [r3, #0]
 801838e:	eac2 4203 	pkhbt	r2, r2, r3, lsl #16
 8018392:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018396:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 801839a:	601a      	str	r2, [r3, #0]
 801839c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80183a0:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80183a4:	681b      	ldr	r3, [r3, #0]
 80183a6:	461a      	mov	r2, r3
 80183a8:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80183ac:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80183b0:	681b      	ldr	r3, [r3, #0]
 80183b2:	601a      	str	r2, [r3, #0]
    return source;
 80183b4:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80183b8:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 80183bc:	681b      	ldr	r3, [r3, #0]

            ip_a0 = read_and_pad(ip_a0, &a01, &a02);
 80183be:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
 80183c2:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80183c6:	f5a3 725d 	sub.w	r2, r3, #884	; 0x374
 80183ca:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 80183ce:	6013      	str	r3, [r2, #0]
 80183d0:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80183d4:	f8c7 3394 	str.w	r3, [r7, #916]	; 0x394
 80183d8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80183dc:	f8c7 3390 	str.w	r3, [r7, #912]	; 0x390
 80183e0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80183e4:	f8c7 338c 	str.w	r3, [r7, #908]	; 0x38c
    memcpy(&val, *in_q7, 4);
 80183e8:	f8d7 338c 	ldr.w	r3, [r7, #908]	; 0x38c
 80183ec:	681b      	ldr	r3, [r3, #0]
 80183ee:	681b      	ldr	r3, [r3, #0]
 80183f0:	461a      	mov	r2, r3
 80183f2:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80183f6:	f5a3 735e 	sub.w	r3, r3, #888	; 0x378
 80183fa:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 80183fc:	f8d7 338c 	ldr.w	r3, [r7, #908]	; 0x38c
 8018400:	681b      	ldr	r3, [r3, #0]
 8018402:	1d1a      	adds	r2, r3, #4
 8018404:	f8d7 338c 	ldr.w	r3, [r7, #908]	; 0x38c
 8018408:	601a      	str	r2, [r3, #0]
    return (val);
 801840a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801840e:	f5a3 735e 	sub.w	r3, r3, #888	; 0x378
 8018412:	681b      	ldr	r3, [r3, #0]
    q31_t inA = arm_nn_read_q7x4_ia(&source);
 8018414:	f8c7 3388 	str.w	r3, [r7, #904]	; 0x388
    q31_t inAbuf1 = __SXTB16(__ROR((uint32_t)inA, 8));
 8018418:	f8d7 3388 	ldr.w	r3, [r7, #904]	; 0x388
 801841c:	f8c7 3384 	str.w	r3, [r7, #900]	; 0x384
 8018420:	2308      	movs	r3, #8
 8018422:	f8c7 3380 	str.w	r3, [r7, #896]	; 0x380
  op2 %= 32U;
 8018426:	f8d7 3380 	ldr.w	r3, [r7, #896]	; 0x380
 801842a:	f003 031f 	and.w	r3, r3, #31
 801842e:	f8c7 3380 	str.w	r3, [r7, #896]	; 0x380
  if (op2 == 0U)
 8018432:	f8d7 3380 	ldr.w	r3, [r7, #896]	; 0x380
 8018436:	2b00      	cmp	r3, #0
 8018438:	d102      	bne.n	8018440 <arm_nn_mat_mult_kernel_s8_s16+0x440>
    return op1;
 801843a:	f8d7 3384 	ldr.w	r3, [r7, #900]	; 0x384
 801843e:	e005      	b.n	801844c <arm_nn_mat_mult_kernel_s8_s16+0x44c>
  return (op1 >> op2) | (op1 << (32U - op2));
 8018440:	f8d7 2384 	ldr.w	r2, [r7, #900]	; 0x384
 8018444:	f8d7 3380 	ldr.w	r3, [r7, #896]	; 0x380
 8018448:	fa62 f303 	ror.w	r3, r2, r3
 801844c:	f8c7 337c 	str.w	r3, [r7, #892]	; 0x37c
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8018450:	f8d7 337c 	ldr.w	r3, [r7, #892]	; 0x37c
 8018454:	fa2f f383 	sxtb16	r3, r3
 8018458:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
  return(result);
 801845c:	f8d7 3378 	ldr.w	r3, [r7, #888]	; 0x378
 8018460:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
    q31_t inAbuf2 = __SXTB16(inA);
 8018464:	f8d7 2388 	ldr.w	r2, [r7, #904]	; 0x388
 8018468:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801846c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8018470:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8018472:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018476:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 801847a:	681b      	ldr	r3, [r3, #0]
 801847c:	fa2f f283 	sxtb16	r2, r3
 8018480:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018484:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8018488:	601a      	str	r2, [r3, #0]
  return(result);
 801848a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801848e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8018492:	681a      	ldr	r2, [r3, #0]
 8018494:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018498:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801849c:	601a      	str	r2, [r3, #0]
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 801849e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80184a2:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 80184a6:	f8d7 3374 	ldr.w	r3, [r7, #884]	; 0x374
 80184aa:	6013      	str	r3, [r2, #0]
 80184ac:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80184b0:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 80184b4:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80184b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80184bc:	681b      	ldr	r3, [r3, #0]
 80184be:	6013      	str	r3, [r2, #0]
 80184c0:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80184c4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80184c8:	681a      	ldr	r2, [r3, #0]
 80184ca:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80184ce:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80184d2:	681b      	ldr	r3, [r3, #0]
 80184d4:	eac2 4223 	pkhtb	r2, r2, r3, asr #16
 80184d8:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80184dc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80184e0:	601a      	str	r2, [r3, #0]
 80184e2:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80184e6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80184ea:	681b      	ldr	r3, [r3, #0]
 80184ec:	461a      	mov	r2, r3
 80184ee:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 80184f2:	601a      	str	r2, [r3, #0]
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 80184f4:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80184f8:	f5a3 728c 	sub.w	r2, r3, #280	; 0x118
 80184fc:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018500:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8018504:	681b      	ldr	r3, [r3, #0]
 8018506:	6013      	str	r3, [r2, #0]
 8018508:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801850c:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 8018510:	f8d7 3374 	ldr.w	r3, [r7, #884]	; 0x374
 8018514:	6013      	str	r3, [r2, #0]
 8018516:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801851a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 801851e:	681a      	ldr	r2, [r3, #0]
 8018520:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018524:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8018528:	681b      	ldr	r3, [r3, #0]
 801852a:	eac2 4203 	pkhbt	r2, r2, r3, lsl #16
 801852e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018532:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8018536:	601a      	str	r2, [r3, #0]
 8018538:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801853c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8018540:	681b      	ldr	r3, [r3, #0]
 8018542:	461a      	mov	r2, r3
 8018544:	f8d7 3394 	ldr.w	r3, [r7, #916]	; 0x394
 8018548:	601a      	str	r2, [r3, #0]
    return source;
 801854a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801854e:	f5a3 735d 	sub.w	r3, r3, #884	; 0x374
 8018552:	681b      	ldr	r3, [r3, #0]
            ip_a1 = read_and_pad(ip_a1, &a11, &a12);
 8018554:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c

            ch_0_out_0 = __SMLAD(a01, b0, ch_0_out_0);
 8018558:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801855c:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 8018560:	681b      	ldr	r3, [r3, #0]
 8018562:	4619      	mov	r1, r3
 8018564:	f8d7 2424 	ldr.w	r2, [r7, #1060]	; 0x424
 8018568:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 801856c:	f8c7 13a4 	str.w	r1, [r7, #932]	; 0x3a4
 8018570:	f8c7 23a0 	str.w	r2, [r7, #928]	; 0x3a0
 8018574:	f8c7 339c 	str.w	r3, [r7, #924]	; 0x39c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8018578:	f8d7 13a4 	ldr.w	r1, [r7, #932]	; 0x3a4
 801857c:	f8d7 23a0 	ldr.w	r2, [r7, #928]	; 0x3a0
 8018580:	f8d7 339c 	ldr.w	r3, [r7, #924]	; 0x39c
 8018584:	fb21 3302 	smlad	r3, r1, r2, r3
 8018588:	f8c7 3398 	str.w	r3, [r7, #920]	; 0x398
  return(result);
 801858c:	f8d7 3398 	ldr.w	r3, [r7, #920]	; 0x398
 8018590:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
            ch_0_out_1 = __SMLAD(a01, b1, ch_0_out_1);
 8018594:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018598:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 801859c:	681b      	ldr	r3, [r3, #0]
 801859e:	4619      	mov	r1, r3
 80185a0:	f8d7 2420 	ldr.w	r2, [r7, #1056]	; 0x420
 80185a4:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 80185a8:	f8c7 13b4 	str.w	r1, [r7, #948]	; 0x3b4
 80185ac:	f8c7 23b0 	str.w	r2, [r7, #944]	; 0x3b0
 80185b0:	f8c7 33ac 	str.w	r3, [r7, #940]	; 0x3ac
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80185b4:	f8d7 13b4 	ldr.w	r1, [r7, #948]	; 0x3b4
 80185b8:	f8d7 23b0 	ldr.w	r2, [r7, #944]	; 0x3b0
 80185bc:	f8d7 33ac 	ldr.w	r3, [r7, #940]	; 0x3ac
 80185c0:	fb21 3302 	smlad	r3, r1, r2, r3
 80185c4:	f8c7 33a8 	str.w	r3, [r7, #936]	; 0x3a8
  return(result);
 80185c8:	f8d7 33a8 	ldr.w	r3, [r7, #936]	; 0x3a8
 80185cc:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
            ch_1_out_0 = __SMLAD(a11, b0, ch_1_out_0);
 80185d0:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80185d4:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 80185d8:	681b      	ldr	r3, [r3, #0]
 80185da:	4619      	mov	r1, r3
 80185dc:	f8d7 2424 	ldr.w	r2, [r7, #1060]	; 0x424
 80185e0:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 80185e4:	f8c7 13c4 	str.w	r1, [r7, #964]	; 0x3c4
 80185e8:	f8c7 23c0 	str.w	r2, [r7, #960]	; 0x3c0
 80185ec:	f8c7 33bc 	str.w	r3, [r7, #956]	; 0x3bc
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80185f0:	f8d7 13c4 	ldr.w	r1, [r7, #964]	; 0x3c4
 80185f4:	f8d7 23c0 	ldr.w	r2, [r7, #960]	; 0x3c0
 80185f8:	f8d7 33bc 	ldr.w	r3, [r7, #956]	; 0x3bc
 80185fc:	fb21 3302 	smlad	r3, r1, r2, r3
 8018600:	f8c7 33b8 	str.w	r3, [r7, #952]	; 0x3b8
  return(result);
 8018604:	f8d7 33b8 	ldr.w	r3, [r7, #952]	; 0x3b8
 8018608:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
            ch_1_out_1 = __SMLAD(a11, b1, ch_1_out_1);
 801860c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018610:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 8018614:	681b      	ldr	r3, [r3, #0]
 8018616:	4619      	mov	r1, r3
 8018618:	f8d7 2420 	ldr.w	r2, [r7, #1056]	; 0x420
 801861c:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 8018620:	f8c7 13d4 	str.w	r1, [r7, #980]	; 0x3d4
 8018624:	f8c7 23d0 	str.w	r2, [r7, #976]	; 0x3d0
 8018628:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801862c:	f8d7 13d4 	ldr.w	r1, [r7, #980]	; 0x3d4
 8018630:	f8d7 23d0 	ldr.w	r2, [r7, #976]	; 0x3d0
 8018634:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8018638:	fb21 3302 	smlad	r3, r1, r2, r3
 801863c:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
  return(result);
 8018640:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 8018644:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
 8018648:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 801864c:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
    memcpy(&val, *in_q15, 4);
 8018650:	f8d7 33d8 	ldr.w	r3, [r7, #984]	; 0x3d8
 8018654:	681b      	ldr	r3, [r3, #0]
 8018656:	681b      	ldr	r3, [r3, #0]
 8018658:	461a      	mov	r2, r3
 801865a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801865e:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8018662:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 8018664:	f8d7 33d8 	ldr.w	r3, [r7, #984]	; 0x3d8
 8018668:	681b      	ldr	r3, [r3, #0]
 801866a:	1d1a      	adds	r2, r3, #4
 801866c:	f8d7 33d8 	ldr.w	r3, [r7, #984]	; 0x3d8
 8018670:	601a      	str	r2, [r3, #0]
    return (val);
 8018672:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018676:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 801867a:	681b      	ldr	r3, [r3, #0]

            b0 = arm_nn_read_q15x2_ia(&ip_b0);
 801867c:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
 8018680:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8018684:	f8c7 33dc 	str.w	r3, [r7, #988]	; 0x3dc
    memcpy(&val, *in_q15, 4);
 8018688:	f8d7 33dc 	ldr.w	r3, [r7, #988]	; 0x3dc
 801868c:	681b      	ldr	r3, [r3, #0]
 801868e:	681b      	ldr	r3, [r3, #0]
 8018690:	461a      	mov	r2, r3
 8018692:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018696:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 801869a:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 801869c:	f8d7 33dc 	ldr.w	r3, [r7, #988]	; 0x3dc
 80186a0:	681b      	ldr	r3, [r3, #0]
 80186a2:	1d1a      	adds	r2, r3, #4
 80186a4:	f8d7 33dc 	ldr.w	r3, [r7, #988]	; 0x3dc
 80186a8:	601a      	str	r2, [r3, #0]
    return (val);
 80186aa:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80186ae:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 80186b2:	681b      	ldr	r3, [r3, #0]
            b1 = arm_nn_read_q15x2_ia(&ip_b1);
 80186b4:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420

            ch_0_out_0 = __SMLAD(a02, b0, ch_0_out_0);
 80186b8:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80186bc:	f5a3 7356 	sub.w	r3, r3, #856	; 0x358
 80186c0:	681b      	ldr	r3, [r3, #0]
 80186c2:	4619      	mov	r1, r3
 80186c4:	f8d7 2424 	ldr.w	r2, [r7, #1060]	; 0x424
 80186c8:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 80186cc:	f8c7 13ec 	str.w	r1, [r7, #1004]	; 0x3ec
 80186d0:	f8c7 23e8 	str.w	r2, [r7, #1000]	; 0x3e8
 80186d4:	f8c7 33e4 	str.w	r3, [r7, #996]	; 0x3e4
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80186d8:	f8d7 13ec 	ldr.w	r1, [r7, #1004]	; 0x3ec
 80186dc:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 80186e0:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 80186e4:	fb21 3302 	smlad	r3, r1, r2, r3
 80186e8:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
  return(result);
 80186ec:	f8d7 33e0 	ldr.w	r3, [r7, #992]	; 0x3e0
 80186f0:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
            ch_0_out_1 = __SMLAD(a02, b1, ch_0_out_1);
 80186f4:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80186f8:	f5a3 7356 	sub.w	r3, r3, #856	; 0x358
 80186fc:	681b      	ldr	r3, [r3, #0]
 80186fe:	4619      	mov	r1, r3
 8018700:	f8d7 2420 	ldr.w	r2, [r7, #1056]	; 0x420
 8018704:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 8018708:	f8c7 13fc 	str.w	r1, [r7, #1020]	; 0x3fc
 801870c:	f8c7 23f8 	str.w	r2, [r7, #1016]	; 0x3f8
 8018710:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8018714:	f8d7 13fc 	ldr.w	r1, [r7, #1020]	; 0x3fc
 8018718:	f8d7 23f8 	ldr.w	r2, [r7, #1016]	; 0x3f8
 801871c:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 8018720:	fb21 3302 	smlad	r3, r1, r2, r3
 8018724:	f8c7 33f0 	str.w	r3, [r7, #1008]	; 0x3f0
  return(result);
 8018728:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	; 0x3f0
 801872c:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
            ch_1_out_0 = __SMLAD(a12, b0, ch_1_out_0);
 8018730:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018734:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 8018738:	681b      	ldr	r3, [r3, #0]
 801873a:	4619      	mov	r1, r3
 801873c:	f8d7 2424 	ldr.w	r2, [r7, #1060]	; 0x424
 8018740:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 8018744:	f8c7 140c 	str.w	r1, [r7, #1036]	; 0x40c
 8018748:	f8c7 2408 	str.w	r2, [r7, #1032]	; 0x408
 801874c:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8018750:	f8d7 140c 	ldr.w	r1, [r7, #1036]	; 0x40c
 8018754:	f8d7 2408 	ldr.w	r2, [r7, #1032]	; 0x408
 8018758:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 801875c:	fb21 3302 	smlad	r3, r1, r2, r3
 8018760:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
  return(result);
 8018764:	f8d7 3400 	ldr.w	r3, [r7, #1024]	; 0x400
 8018768:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
            ch_1_out_1 = __SMLAD(a12, b1, ch_1_out_1);
 801876c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018770:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 8018774:	681b      	ldr	r3, [r3, #0]
 8018776:	4619      	mov	r1, r3
 8018778:	f8d7 2420 	ldr.w	r2, [r7, #1056]	; 0x420
 801877c:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 8018780:	f8c7 141c 	str.w	r1, [r7, #1052]	; 0x41c
 8018784:	f8c7 2418 	str.w	r2, [r7, #1048]	; 0x418
 8018788:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801878c:	f8d7 141c 	ldr.w	r1, [r7, #1052]	; 0x41c
 8018790:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
 8018794:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8018798:	fb21 3302 	smlad	r3, r1, r2, r3
 801879c:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
  return(result);
 80187a0:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 80187a4:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c

            col_count--;
 80187a8:	f8b7 344a 	ldrh.w	r3, [r7, #1098]	; 0x44a
 80187ac:	3b01      	subs	r3, #1
 80187ae:	f8a7 344a 	strh.w	r3, [r7, #1098]	; 0x44a
        while (col_count)
 80187b2:	f8b7 344a 	ldrh.w	r3, [r7, #1098]	; 0x44a
 80187b6:	2b00      	cmp	r3, #0
 80187b8:	f47f ac9b 	bne.w	80180f2 <arm_nn_mat_mult_kernel_s8_s16+0xf2>
        } /* while over col_count */
        col_count = num_col_a & 0x3;
 80187bc:	f8b7 34a0 	ldrh.w	r3, [r7, #1184]	; 0x4a0
 80187c0:	f003 0303 	and.w	r3, r3, #3
 80187c4:	f8a7 344a 	strh.w	r3, [r7, #1098]	; 0x44a
        while (col_count)
 80187c8:	e05c      	b.n	8018884 <arm_nn_mat_mult_kernel_s8_s16+0x884>
        {
            q7_t a0 = *ip_a0++;
 80187ca:	f8d7 2460 	ldr.w	r2, [r7, #1120]	; 0x460
 80187ce:	1c53      	adds	r3, r2, #1
 80187d0:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
 80187d4:	7813      	ldrb	r3, [r2, #0]
 80187d6:	f887 342f 	strb.w	r3, [r7, #1071]	; 0x42f
            q15_t b0 = *ip_b0++;
 80187da:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80187de:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 80187e2:	6819      	ldr	r1, [r3, #0]
 80187e4:	1c8a      	adds	r2, r1, #2
 80187e6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80187ea:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 80187ee:	601a      	str	r2, [r3, #0]
 80187f0:	880b      	ldrh	r3, [r1, #0]
 80187f2:	f8a7 342c 	strh.w	r3, [r7, #1068]	; 0x42c
            q7_t a1 = *ip_a1++;
 80187f6:	f8d7 245c 	ldr.w	r2, [r7, #1116]	; 0x45c
 80187fa:	1c53      	adds	r3, r2, #1
 80187fc:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
 8018800:	7813      	ldrb	r3, [r2, #0]
 8018802:	f887 342b 	strb.w	r3, [r7, #1067]	; 0x42b
            q15_t b1 = *ip_b1++;
 8018806:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801880a:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 801880e:	6819      	ldr	r1, [r3, #0]
 8018810:	1c8a      	adds	r2, r1, #2
 8018812:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018816:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 801881a:	601a      	str	r2, [r3, #0]
 801881c:	880b      	ldrh	r3, [r1, #0]
 801881e:	f8a7 3428 	strh.w	r3, [r7, #1064]	; 0x428

            ch_0_out_0 += a0 * b0;
 8018822:	f997 242f 	ldrsb.w	r2, [r7, #1071]	; 0x42f
 8018826:	f9b7 342c 	ldrsh.w	r3, [r7, #1068]	; 0x42c
 801882a:	fb03 f202 	mul.w	r2, r3, r2
 801882e:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 8018832:	4413      	add	r3, r2
 8018834:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
            ch_0_out_1 += a0 * b1;
 8018838:	f997 242f 	ldrsb.w	r2, [r7, #1071]	; 0x42f
 801883c:	f9b7 3428 	ldrsh.w	r3, [r7, #1064]	; 0x428
 8018840:	fb03 f202 	mul.w	r2, r3, r2
 8018844:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 8018848:	4413      	add	r3, r2
 801884a:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
            ch_1_out_0 += a1 * b0;
 801884e:	f997 242b 	ldrsb.w	r2, [r7, #1067]	; 0x42b
 8018852:	f9b7 342c 	ldrsh.w	r3, [r7, #1068]	; 0x42c
 8018856:	fb03 f202 	mul.w	r2, r3, r2
 801885a:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 801885e:	4413      	add	r3, r2
 8018860:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
            ch_1_out_1 += a1 * b1;
 8018864:	f997 242b 	ldrsb.w	r2, [r7, #1067]	; 0x42b
 8018868:	f9b7 3428 	ldrsh.w	r3, [r7, #1064]	; 0x428
 801886c:	fb03 f202 	mul.w	r2, r3, r2
 8018870:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 8018874:	4413      	add	r3, r2
 8018876:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
            col_count--;
 801887a:	f8b7 344a 	ldrh.w	r3, [r7, #1098]	; 0x44a
 801887e:	3b01      	subs	r3, #1
 8018880:	f8a7 344a 	strh.w	r3, [r7, #1098]	; 0x44a
        while (col_count)
 8018884:	f8b7 344a 	ldrh.w	r3, [r7, #1098]	; 0x44a
 8018888:	2b00      	cmp	r3, #0
 801888a:	d19e      	bne.n	80187ca <arm_nn_mat_mult_kernel_s8_s16+0x7ca>
        } /* while over col_count */

        ch_0_out_0 = arm_nn_requantize(ch_0_out_0, *out_mult, *out_shift);
 801888c:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 8018890:	6818      	ldr	r0, [r3, #0]
 8018892:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018896:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 801889a:	681b      	ldr	r3, [r3, #0]
 801889c:	6819      	ldr	r1, [r3, #0]
 801889e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80188a2:	f5a3 7201 	sub.w	r2, r3, #516	; 0x204
 80188a6:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 80188aa:	6013      	str	r3, [r2, #0]
 80188ac:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80188b0:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 80188b4:	6018      	str	r0, [r3, #0]
 80188b6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80188ba:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80188be:	6019      	str	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80188c0:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80188c4:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80188c8:	681b      	ldr	r3, [r3, #0]
 80188ca:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 80188ce:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80188d2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80188d6:	681b      	ldr	r3, [r3, #0]
 80188d8:	fa03 f202 	lsl.w	r2, r3, r2
 80188dc:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80188e0:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80188e4:	601a      	str	r2, [r3, #0]
 80188e6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80188ea:	f5a3 7205 	sub.w	r2, r3, #532	; 0x214
 80188ee:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80188f2:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 80188f6:	681b      	ldr	r3, [r3, #0]
 80188f8:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80188fa:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80188fe:	f5a3 7206 	sub.w	r2, r3, #536	; 0x218
 8018902:	2300      	movs	r3, #0
 8018904:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 8018906:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801890a:	f5a3 724e 	sub.w	r2, r3, #824	; 0x338
 801890e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8018912:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 8018914:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018918:	f5a3 724e 	sub.w	r2, r3, #824	; 0x338
 801891c:	2300      	movs	r3, #0
 801891e:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8018920:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 8018924:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018928:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 801892c:	681b      	ldr	r3, [r3, #0]
 801892e:	17da      	asrs	r2, r3, #31
 8018930:	66bb      	str	r3, [r7, #104]	; 0x68
 8018932:	66fa      	str	r2, [r7, #108]	; 0x6c
 8018934:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018938:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 801893c:	681b      	ldr	r3, [r3, #0]
 801893e:	17da      	asrs	r2, r3, #31
 8018940:	663b      	str	r3, [r7, #96]	; 0x60
 8018942:	667a      	str	r2, [r7, #100]	; 0x64
 8018944:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018946:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8018948:	fb02 f203 	mul.w	r2, r2, r3
 801894c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801894e:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 8018950:	fb04 f303 	mul.w	r3, r4, r3
 8018954:	4413      	add	r3, r2
 8018956:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8018958:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 801895a:	fba2 4204 	umull	r4, r2, r2, r4
 801895e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8018962:	4622      	mov	r2, r4
 8018964:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8018968:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 801896c:	4413      	add	r3, r2
 801896e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8018972:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8018976:	18c3      	adds	r3, r0, r3
 8018978:	633b      	str	r3, [r7, #48]	; 0x30
 801897a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801897e:	eb41 0303 	adc.w	r3, r1, r3
 8018982:	637b      	str	r3, [r7, #52]	; 0x34
 8018984:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8018988:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
    result = (int32_t)(mult.long_long >> 31);
 801898c:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8018990:	f04f 0000 	mov.w	r0, #0
 8018994:	f04f 0100 	mov.w	r1, #0
 8018998:	0fd0      	lsrs	r0, r2, #31
 801899a:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801899e:	17d9      	asrs	r1, r3, #31
 80189a0:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80189a4:	f5a3 7206 	sub.w	r2, r3, #536	; 0x218
 80189a8:	4603      	mov	r3, r0
 80189aa:	6013      	str	r3, [r2, #0]
    return result;
 80189ac:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80189b0:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 80189b4:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80189b6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80189ba:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80189be:	681b      	ldr	r3, [r3, #0]
 80189c0:	2b00      	cmp	r3, #0
 80189c2:	dc06      	bgt.n	80189d2 <arm_nn_mat_mult_kernel_s8_s16+0x9d2>
 80189c4:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80189c8:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80189cc:	681b      	ldr	r3, [r3, #0]
 80189ce:	425a      	negs	r2, r3
 80189d0:	e000      	b.n	80189d4 <arm_nn_mat_mult_kernel_s8_s16+0x9d4>
 80189d2:	2200      	movs	r2, #0
 80189d4:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80189d8:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 80189dc:	6019      	str	r1, [r3, #0]
 80189de:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80189e2:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 80189e6:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 80189e8:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80189ec:	f5a3 7209 	sub.w	r2, r3, #548	; 0x224
 80189f0:	2300      	movs	r3, #0
 80189f2:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 80189f4:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80189f8:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 80189fc:	2201      	movs	r2, #1
 80189fe:	681b      	ldr	r3, [r3, #0]
 8018a00:	fa02 f103 	lsl.w	r1, r2, r3
 8018a04:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018a08:	f5a3 720a 	sub.w	r2, r3, #552	; 0x228
 8018a0c:	1e4b      	subs	r3, r1, #1
 8018a0e:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 8018a10:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018a14:	f5a3 710b 	sub.w	r1, r3, #556	; 0x22c
 8018a18:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018a1c:	f5a3 7207 	sub.w	r2, r3, #540	; 0x21c
 8018a20:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018a24:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8018a28:	6812      	ldr	r2, [r2, #0]
 8018a2a:	681b      	ldr	r3, [r3, #0]
 8018a2c:	4013      	ands	r3, r2
 8018a2e:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 8018a30:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018a34:	f5a3 7109 	sub.w	r1, r3, #548	; 0x224
 8018a38:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018a3c:	f5a3 7207 	sub.w	r2, r3, #540	; 0x21c
 8018a40:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018a44:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8018a48:	6812      	ldr	r2, [r2, #0]
 8018a4a:	681b      	ldr	r3, [r3, #0]
 8018a4c:	fa42 f303 	asr.w	r3, r2, r3
 8018a50:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 8018a52:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018a56:	f5a3 720c 	sub.w	r2, r3, #560	; 0x230
 8018a5a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018a5e:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8018a62:	681b      	ldr	r3, [r3, #0]
 8018a64:	105b      	asrs	r3, r3, #1
 8018a66:	6013      	str	r3, [r2, #0]
    if (result < 0)
 8018a68:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018a6c:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8018a70:	681b      	ldr	r3, [r3, #0]
 8018a72:	2b00      	cmp	r3, #0
 8018a74:	da0a      	bge.n	8018a8c <arm_nn_mat_mult_kernel_s8_s16+0xa8c>
        threshold++;
 8018a76:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018a7a:	f5a3 720c 	sub.w	r2, r3, #560	; 0x230
 8018a7e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018a82:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8018a86:	681b      	ldr	r3, [r3, #0]
 8018a88:	3301      	adds	r3, #1
 8018a8a:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 8018a8c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018a90:	f5a3 720b 	sub.w	r2, r3, #556	; 0x22c
 8018a94:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018a98:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8018a9c:	6812      	ldr	r2, [r2, #0]
 8018a9e:	681b      	ldr	r3, [r3, #0]
 8018aa0:	429a      	cmp	r2, r3
 8018aa2:	dd0a      	ble.n	8018aba <arm_nn_mat_mult_kernel_s8_s16+0xaba>
        result++;
 8018aa4:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018aa8:	f5a3 7209 	sub.w	r2, r3, #548	; 0x224
 8018aac:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018ab0:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8018ab4:	681b      	ldr	r3, [r3, #0]
 8018ab6:	3301      	adds	r3, #1
 8018ab8:	6013      	str	r3, [r2, #0]
    return result;
 8018aba:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018abe:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8018ac2:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8018ac4:	bf00      	nop
 8018ac6:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
        ch_0_out_0 += out_offset;
 8018aca:	f8d7 2458 	ldr.w	r2, [r7, #1112]	; 0x458
 8018ace:	f8d7 3494 	ldr.w	r3, [r7, #1172]	; 0x494
 8018ad2:	4413      	add	r3, r2
 8018ad4:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
        ch_0_out_0 = MAX(ch_0_out_0, activation_min);
 8018ad8:	f9b7 2498 	ldrsh.w	r2, [r7, #1176]	; 0x498
 8018adc:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 8018ae0:	4293      	cmp	r3, r2
 8018ae2:	bfb8      	it	lt
 8018ae4:	4613      	movlt	r3, r2
 8018ae6:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
        ch_0_out_0 = MIN(ch_0_out_0, activation_max);
 8018aea:	f9b7 249c 	ldrsh.w	r2, [r7, #1180]	; 0x49c
 8018aee:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 8018af2:	4293      	cmp	r3, r2
 8018af4:	bfa8      	it	ge
 8018af6:	4613      	movge	r3, r2
 8018af8:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
        *out_0++ = (q7_t)ch_0_out_0;
 8018afc:	f8d7 24a8 	ldr.w	r2, [r7, #1192]	; 0x4a8
 8018b00:	1c53      	adds	r3, r2, #1
 8018b02:	f8c7 34a8 	str.w	r3, [r7, #1192]	; 0x4a8
 8018b06:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 8018b0a:	b25b      	sxtb	r3, r3
 8018b0c:	7013      	strb	r3, [r2, #0]

        ch_0_out_1 = arm_nn_requantize(ch_0_out_1, *out_mult, *out_shift);
 8018b0e:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 8018b12:	6818      	ldr	r0, [r3, #0]
 8018b14:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018b18:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 8018b1c:	681b      	ldr	r3, [r3, #0]
 8018b1e:	6819      	ldr	r1, [r3, #0]
 8018b20:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018b24:	f5a3 72ea 	sub.w	r2, r3, #468	; 0x1d4
 8018b28:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 8018b2c:	6013      	str	r3, [r2, #0]
 8018b2e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018b32:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8018b36:	6018      	str	r0, [r3, #0]
 8018b38:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018b3c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8018b40:	6019      	str	r1, [r3, #0]
 8018b42:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018b46:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8018b4a:	681b      	ldr	r3, [r3, #0]
 8018b4c:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 8018b50:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018b54:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8018b58:	681b      	ldr	r3, [r3, #0]
 8018b5a:	fa03 f202 	lsl.w	r2, r3, r2
 8018b5e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018b62:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8018b66:	601a      	str	r2, [r3, #0]
 8018b68:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018b6c:	f5a3 72f2 	sub.w	r2, r3, #484	; 0x1e4
 8018b70:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018b74:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8018b78:	681b      	ldr	r3, [r3, #0]
 8018b7a:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8018b7c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018b80:	f5a3 72f4 	sub.w	r2, r3, #488	; 0x1e8
 8018b84:	2300      	movs	r3, #0
 8018b86:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 8018b88:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018b8c:	f5a3 7250 	sub.w	r2, r3, #832	; 0x340
 8018b90:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8018b94:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 8018b96:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018b9a:	f5a3 7250 	sub.w	r2, r3, #832	; 0x340
 8018b9e:	2300      	movs	r3, #0
 8018ba0:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8018ba2:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 8018ba6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018baa:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8018bae:	681b      	ldr	r3, [r3, #0]
 8018bb0:	17da      	asrs	r2, r3, #31
 8018bb2:	67bb      	str	r3, [r7, #120]	; 0x78
 8018bb4:	67fa      	str	r2, [r7, #124]	; 0x7c
 8018bb6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018bba:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8018bbe:	681b      	ldr	r3, [r3, #0]
 8018bc0:	17da      	asrs	r2, r3, #31
 8018bc2:	673b      	str	r3, [r7, #112]	; 0x70
 8018bc4:	677a      	str	r2, [r7, #116]	; 0x74
 8018bc6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8018bc8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8018bca:	fb02 f203 	mul.w	r2, r2, r3
 8018bce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8018bd0:	6fbc      	ldr	r4, [r7, #120]	; 0x78
 8018bd2:	fb04 f303 	mul.w	r3, r4, r3
 8018bd6:	4413      	add	r3, r2
 8018bd8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8018bda:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8018bdc:	fba2 5604 	umull	r5, r6, r2, r4
 8018be0:	4433      	add	r3, r6
 8018be2:	461e      	mov	r6, r3
 8018be4:	1943      	adds	r3, r0, r5
 8018be6:	63bb      	str	r3, [r7, #56]	; 0x38
 8018be8:	eb41 0306 	adc.w	r3, r1, r6
 8018bec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8018bee:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8018bf2:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
    result = (int32_t)(mult.long_long >> 31);
 8018bf6:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8018bfa:	f04f 0000 	mov.w	r0, #0
 8018bfe:	f04f 0100 	mov.w	r1, #0
 8018c02:	0fd0      	lsrs	r0, r2, #31
 8018c04:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8018c08:	17d9      	asrs	r1, r3, #31
 8018c0a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018c0e:	f5a3 72f4 	sub.w	r2, r3, #488	; 0x1e8
 8018c12:	4603      	mov	r3, r0
 8018c14:	6013      	str	r3, [r2, #0]
    return result;
 8018c16:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018c1a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8018c1e:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8018c20:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018c24:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8018c28:	681b      	ldr	r3, [r3, #0]
 8018c2a:	2b00      	cmp	r3, #0
 8018c2c:	dc06      	bgt.n	8018c3c <arm_nn_mat_mult_kernel_s8_s16+0xc3c>
 8018c2e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018c32:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8018c36:	681b      	ldr	r3, [r3, #0]
 8018c38:	425a      	negs	r2, r3
 8018c3a:	e000      	b.n	8018c3e <arm_nn_mat_mult_kernel_s8_s16+0xc3e>
 8018c3c:	2200      	movs	r2, #0
 8018c3e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018c42:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8018c46:	6019      	str	r1, [r3, #0]
 8018c48:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018c4c:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8018c50:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8018c52:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018c56:	f5a3 72fa 	sub.w	r2, r3, #500	; 0x1f4
 8018c5a:	2300      	movs	r3, #0
 8018c5c:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8018c5e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018c62:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8018c66:	2201      	movs	r2, #1
 8018c68:	681b      	ldr	r3, [r3, #0]
 8018c6a:	fa02 f103 	lsl.w	r1, r2, r3
 8018c6e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018c72:	f5a3 72fc 	sub.w	r2, r3, #504	; 0x1f8
 8018c76:	1e4b      	subs	r3, r1, #1
 8018c78:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 8018c7a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018c7e:	f5a3 71fe 	sub.w	r1, r3, #508	; 0x1fc
 8018c82:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018c86:	f5a3 72f6 	sub.w	r2, r3, #492	; 0x1ec
 8018c8a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018c8e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8018c92:	6812      	ldr	r2, [r2, #0]
 8018c94:	681b      	ldr	r3, [r3, #0]
 8018c96:	4013      	ands	r3, r2
 8018c98:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 8018c9a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018c9e:	f5a3 71fa 	sub.w	r1, r3, #500	; 0x1f4
 8018ca2:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018ca6:	f5a3 72f6 	sub.w	r2, r3, #492	; 0x1ec
 8018caa:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018cae:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8018cb2:	6812      	ldr	r2, [r2, #0]
 8018cb4:	681b      	ldr	r3, [r3, #0]
 8018cb6:	fa42 f303 	asr.w	r3, r2, r3
 8018cba:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 8018cbc:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018cc0:	f5a3 7200 	sub.w	r2, r3, #512	; 0x200
 8018cc4:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018cc8:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8018ccc:	681b      	ldr	r3, [r3, #0]
 8018cce:	105b      	asrs	r3, r3, #1
 8018cd0:	6013      	str	r3, [r2, #0]
    if (result < 0)
 8018cd2:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018cd6:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8018cda:	681b      	ldr	r3, [r3, #0]
 8018cdc:	2b00      	cmp	r3, #0
 8018cde:	da0a      	bge.n	8018cf6 <arm_nn_mat_mult_kernel_s8_s16+0xcf6>
        threshold++;
 8018ce0:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018ce4:	f5a3 7200 	sub.w	r2, r3, #512	; 0x200
 8018ce8:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018cec:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8018cf0:	681b      	ldr	r3, [r3, #0]
 8018cf2:	3301      	adds	r3, #1
 8018cf4:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 8018cf6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018cfa:	f5a3 72fe 	sub.w	r2, r3, #508	; 0x1fc
 8018cfe:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018d02:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8018d06:	6812      	ldr	r2, [r2, #0]
 8018d08:	681b      	ldr	r3, [r3, #0]
 8018d0a:	429a      	cmp	r2, r3
 8018d0c:	dd0a      	ble.n	8018d24 <arm_nn_mat_mult_kernel_s8_s16+0xd24>
        result++;
 8018d0e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018d12:	f5a3 72fa 	sub.w	r2, r3, #500	; 0x1f4
 8018d16:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018d1a:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8018d1e:	681b      	ldr	r3, [r3, #0]
 8018d20:	3301      	adds	r3, #1
 8018d22:	6013      	str	r3, [r2, #0]
    return result;
 8018d24:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018d28:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8018d2c:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8018d2e:	bf00      	nop
 8018d30:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
        ch_0_out_1 += out_offset;
 8018d34:	f8d7 2454 	ldr.w	r2, [r7, #1108]	; 0x454
 8018d38:	f8d7 3494 	ldr.w	r3, [r7, #1172]	; 0x494
 8018d3c:	4413      	add	r3, r2
 8018d3e:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
        ch_0_out_1 = MAX(ch_0_out_1, activation_min);
 8018d42:	f9b7 2498 	ldrsh.w	r2, [r7, #1176]	; 0x498
 8018d46:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 8018d4a:	4293      	cmp	r3, r2
 8018d4c:	bfb8      	it	lt
 8018d4e:	4613      	movlt	r3, r2
 8018d50:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
        ch_0_out_1 = MIN(ch_0_out_1, activation_max);
 8018d54:	f9b7 249c 	ldrsh.w	r2, [r7, #1180]	; 0x49c
 8018d58:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 8018d5c:	4293      	cmp	r3, r2
 8018d5e:	bfa8      	it	ge
 8018d60:	4613      	movge	r3, r2
 8018d62:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
        *out_1++ = (q7_t)ch_0_out_1;
 8018d66:	f8d7 246c 	ldr.w	r2, [r7, #1132]	; 0x46c
 8018d6a:	1c53      	adds	r3, r2, #1
 8018d6c:	f8c7 346c 	str.w	r3, [r7, #1132]	; 0x46c
 8018d70:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 8018d74:	b25b      	sxtb	r3, r3
 8018d76:	7013      	strb	r3, [r2, #0]
        out_mult++;
 8018d78:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 8018d7c:	3304      	adds	r3, #4
 8018d7e:	f8c7 3490 	str.w	r3, [r7, #1168]	; 0x490
        out_shift++;
 8018d82:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018d86:	f5a3 7272 	sub.w	r2, r3, #968	; 0x3c8
 8018d8a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018d8e:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 8018d92:	681b      	ldr	r3, [r3, #0]
 8018d94:	3304      	adds	r3, #4
 8018d96:	6013      	str	r3, [r2, #0]

        ch_1_out_0 = arm_nn_requantize(ch_1_out_0, *out_mult, *out_shift);
 8018d98:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 8018d9c:	6818      	ldr	r0, [r3, #0]
 8018d9e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018da2:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 8018da6:	681b      	ldr	r3, [r3, #0]
 8018da8:	6819      	ldr	r1, [r3, #0]
 8018daa:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018dae:	f5a3 72d2 	sub.w	r2, r3, #420	; 0x1a4
 8018db2:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 8018db6:	6013      	str	r3, [r2, #0]
 8018db8:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018dbc:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8018dc0:	6018      	str	r0, [r3, #0]
 8018dc2:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018dc6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8018dca:	6019      	str	r1, [r3, #0]
 8018dcc:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018dd0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8018dd4:	681b      	ldr	r3, [r3, #0]
 8018dd6:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 8018dda:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018dde:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8018de2:	681b      	ldr	r3, [r3, #0]
 8018de4:	fa03 f202 	lsl.w	r2, r3, r2
 8018de8:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018dec:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8018df0:	601a      	str	r2, [r3, #0]
 8018df2:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018df6:	f5a3 72da 	sub.w	r2, r3, #436	; 0x1b4
 8018dfa:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018dfe:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8018e02:	681b      	ldr	r3, [r3, #0]
 8018e04:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8018e06:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018e0a:	f5a3 72dc 	sub.w	r2, r3, #440	; 0x1b8
 8018e0e:	2300      	movs	r3, #0
 8018e10:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 8018e12:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018e16:	f5a3 7252 	sub.w	r2, r3, #840	; 0x348
 8018e1a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8018e1e:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 8018e20:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018e24:	f5a3 7252 	sub.w	r2, r3, #840	; 0x348
 8018e28:	2300      	movs	r3, #0
 8018e2a:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8018e2c:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8018e30:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018e34:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8018e38:	681b      	ldr	r3, [r3, #0]
 8018e3a:	17da      	asrs	r2, r3, #31
 8018e3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8018e40:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8018e44:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018e48:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8018e4c:	681b      	ldr	r3, [r3, #0]
 8018e4e:	17da      	asrs	r2, r3, #31
 8018e50:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8018e54:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8018e58:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8018e5c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8018e60:	fb02 f203 	mul.w	r2, r2, r3
 8018e64:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8018e68:	f8d7 4088 	ldr.w	r4, [r7, #136]	; 0x88
 8018e6c:	fb04 f303 	mul.w	r3, r4, r3
 8018e70:	4413      	add	r3, r2
 8018e72:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8018e76:	f8d7 4080 	ldr.w	r4, [r7, #128]	; 0x80
 8018e7a:	fba2 ab04 	umull	sl, fp, r2, r4
 8018e7e:	445b      	add	r3, fp
 8018e80:	469b      	mov	fp, r3
 8018e82:	eb10 030a 	adds.w	r3, r0, sl
 8018e86:	643b      	str	r3, [r7, #64]	; 0x40
 8018e88:	eb41 030b 	adc.w	r3, r1, fp
 8018e8c:	647b      	str	r3, [r7, #68]	; 0x44
 8018e8e:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8018e92:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
    result = (int32_t)(mult.long_long >> 31);
 8018e96:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8018e9a:	f04f 0000 	mov.w	r0, #0
 8018e9e:	f04f 0100 	mov.w	r1, #0
 8018ea2:	0fd0      	lsrs	r0, r2, #31
 8018ea4:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8018ea8:	17d9      	asrs	r1, r3, #31
 8018eaa:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018eae:	f5a3 72dc 	sub.w	r2, r3, #440	; 0x1b8
 8018eb2:	4603      	mov	r3, r0
 8018eb4:	6013      	str	r3, [r2, #0]
    return result;
 8018eb6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018eba:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8018ebe:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8018ec0:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018ec4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8018ec8:	681b      	ldr	r3, [r3, #0]
 8018eca:	2b00      	cmp	r3, #0
 8018ecc:	dc06      	bgt.n	8018edc <arm_nn_mat_mult_kernel_s8_s16+0xedc>
 8018ece:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018ed2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8018ed6:	681b      	ldr	r3, [r3, #0]
 8018ed8:	425a      	negs	r2, r3
 8018eda:	e000      	b.n	8018ede <arm_nn_mat_mult_kernel_s8_s16+0xede>
 8018edc:	2200      	movs	r2, #0
 8018ede:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018ee2:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8018ee6:	6019      	str	r1, [r3, #0]
 8018ee8:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018eec:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8018ef0:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8018ef2:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018ef6:	f5a3 72e2 	sub.w	r2, r3, #452	; 0x1c4
 8018efa:	2300      	movs	r3, #0
 8018efc:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8018efe:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018f02:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8018f06:	2201      	movs	r2, #1
 8018f08:	681b      	ldr	r3, [r3, #0]
 8018f0a:	fa02 f103 	lsl.w	r1, r2, r3
 8018f0e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018f12:	f5a3 72e4 	sub.w	r2, r3, #456	; 0x1c8
 8018f16:	1e4b      	subs	r3, r1, #1
 8018f18:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 8018f1a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018f1e:	f5a3 71e6 	sub.w	r1, r3, #460	; 0x1cc
 8018f22:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018f26:	f5a3 72de 	sub.w	r2, r3, #444	; 0x1bc
 8018f2a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018f2e:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8018f32:	6812      	ldr	r2, [r2, #0]
 8018f34:	681b      	ldr	r3, [r3, #0]
 8018f36:	4013      	ands	r3, r2
 8018f38:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 8018f3a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018f3e:	f5a3 71e2 	sub.w	r1, r3, #452	; 0x1c4
 8018f42:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018f46:	f5a3 72de 	sub.w	r2, r3, #444	; 0x1bc
 8018f4a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018f4e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8018f52:	6812      	ldr	r2, [r2, #0]
 8018f54:	681b      	ldr	r3, [r3, #0]
 8018f56:	fa42 f303 	asr.w	r3, r2, r3
 8018f5a:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 8018f5c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018f60:	f5a3 72e8 	sub.w	r2, r3, #464	; 0x1d0
 8018f64:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018f68:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8018f6c:	681b      	ldr	r3, [r3, #0]
 8018f6e:	105b      	asrs	r3, r3, #1
 8018f70:	6013      	str	r3, [r2, #0]
    if (result < 0)
 8018f72:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018f76:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8018f7a:	681b      	ldr	r3, [r3, #0]
 8018f7c:	2b00      	cmp	r3, #0
 8018f7e:	da0a      	bge.n	8018f96 <arm_nn_mat_mult_kernel_s8_s16+0xf96>
        threshold++;
 8018f80:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018f84:	f5a3 72e8 	sub.w	r2, r3, #464	; 0x1d0
 8018f88:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018f8c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8018f90:	681b      	ldr	r3, [r3, #0]
 8018f92:	3301      	adds	r3, #1
 8018f94:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 8018f96:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018f9a:	f5a3 72e6 	sub.w	r2, r3, #460	; 0x1cc
 8018f9e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018fa2:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8018fa6:	6812      	ldr	r2, [r2, #0]
 8018fa8:	681b      	ldr	r3, [r3, #0]
 8018faa:	429a      	cmp	r2, r3
 8018fac:	dd0a      	ble.n	8018fc4 <arm_nn_mat_mult_kernel_s8_s16+0xfc4>
        result++;
 8018fae:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018fb2:	f5a3 72e2 	sub.w	r2, r3, #452	; 0x1c4
 8018fb6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018fba:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8018fbe:	681b      	ldr	r3, [r3, #0]
 8018fc0:	3301      	adds	r3, #1
 8018fc2:	6013      	str	r3, [r2, #0]
    return result;
 8018fc4:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8018fc8:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8018fcc:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8018fce:	bf00      	nop
 8018fd0:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
        ch_1_out_0 += out_offset;
 8018fd4:	f8d7 2450 	ldr.w	r2, [r7, #1104]	; 0x450
 8018fd8:	f8d7 3494 	ldr.w	r3, [r7, #1172]	; 0x494
 8018fdc:	4413      	add	r3, r2
 8018fde:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
        ch_1_out_0 = MAX(ch_1_out_0, activation_min);
 8018fe2:	f9b7 2498 	ldrsh.w	r2, [r7, #1176]	; 0x498
 8018fe6:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 8018fea:	4293      	cmp	r3, r2
 8018fec:	bfb8      	it	lt
 8018fee:	4613      	movlt	r3, r2
 8018ff0:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
        ch_1_out_0 = MIN(ch_1_out_0, activation_max);
 8018ff4:	f9b7 249c 	ldrsh.w	r2, [r7, #1180]	; 0x49c
 8018ff8:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 8018ffc:	4293      	cmp	r3, r2
 8018ffe:	bfa8      	it	ge
 8019000:	4613      	movge	r3, r2
 8019002:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
        *out_0++ = (q7_t)ch_1_out_0;
 8019006:	f8d7 24a8 	ldr.w	r2, [r7, #1192]	; 0x4a8
 801900a:	1c53      	adds	r3, r2, #1
 801900c:	f8c7 34a8 	str.w	r3, [r7, #1192]	; 0x4a8
 8019010:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 8019014:	b25b      	sxtb	r3, r3
 8019016:	7013      	strb	r3, [r2, #0]

        ch_1_out_1 = arm_nn_requantize(ch_1_out_1, *out_mult, *out_shift);
 8019018:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 801901c:	6818      	ldr	r0, [r3, #0]
 801901e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019022:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 8019026:	681b      	ldr	r3, [r3, #0]
 8019028:	6819      	ldr	r1, [r3, #0]
 801902a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801902e:	f5a3 72ba 	sub.w	r2, r3, #372	; 0x174
 8019032:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 8019036:	6013      	str	r3, [r2, #0]
 8019038:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801903c:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8019040:	6018      	str	r0, [r3, #0]
 8019042:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019046:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 801904a:	6019      	str	r1, [r3, #0]
 801904c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019050:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8019054:	681b      	ldr	r3, [r3, #0]
 8019056:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 801905a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801905e:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8019062:	681b      	ldr	r3, [r3, #0]
 8019064:	fa03 f202 	lsl.w	r2, r3, r2
 8019068:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801906c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8019070:	601a      	str	r2, [r3, #0]
 8019072:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019076:	f5a3 72c2 	sub.w	r2, r3, #388	; 0x184
 801907a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801907e:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8019082:	681b      	ldr	r3, [r3, #0]
 8019084:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8019086:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801908a:	f5a3 72c4 	sub.w	r2, r3, #392	; 0x188
 801908e:	2300      	movs	r3, #0
 8019090:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 8019092:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019096:	f5a3 7254 	sub.w	r2, r3, #848	; 0x350
 801909a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801909e:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 80190a0:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80190a4:	f5a3 7254 	sub.w	r2, r3, #848	; 0x350
 80190a8:	2300      	movs	r3, #0
 80190aa:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 80190ac:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 80190b0:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80190b4:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80190b8:	681b      	ldr	r3, [r3, #0]
 80190ba:	17da      	asrs	r2, r3, #31
 80190bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80190c0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80190c4:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80190c8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80190cc:	681b      	ldr	r3, [r3, #0]
 80190ce:	17da      	asrs	r2, r3, #31
 80190d0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80190d4:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80190d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80190dc:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80190e0:	fb02 f203 	mul.w	r2, r2, r3
 80190e4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80190e8:	f8d7 4098 	ldr.w	r4, [r7, #152]	; 0x98
 80190ec:	fb04 f303 	mul.w	r3, r4, r3
 80190f0:	4413      	add	r3, r2
 80190f2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80190f6:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 80190fa:	fba2 8904 	umull	r8, r9, r2, r4
 80190fe:	444b      	add	r3, r9
 8019100:	4699      	mov	r9, r3
 8019102:	eb10 0308 	adds.w	r3, r0, r8
 8019106:	64bb      	str	r3, [r7, #72]	; 0x48
 8019108:	eb41 0309 	adc.w	r3, r1, r9
 801910c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801910e:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8019112:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
    result = (int32_t)(mult.long_long >> 31);
 8019116:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 801911a:	f04f 0000 	mov.w	r0, #0
 801911e:	f04f 0100 	mov.w	r1, #0
 8019122:	0fd0      	lsrs	r0, r2, #31
 8019124:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8019128:	17d9      	asrs	r1, r3, #31
 801912a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801912e:	f5a3 72c4 	sub.w	r2, r3, #392	; 0x188
 8019132:	4603      	mov	r3, r0
 8019134:	6013      	str	r3, [r2, #0]
    return result;
 8019136:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801913a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 801913e:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8019140:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019144:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8019148:	681b      	ldr	r3, [r3, #0]
 801914a:	2b00      	cmp	r3, #0
 801914c:	dc06      	bgt.n	801915c <arm_nn_mat_mult_kernel_s8_s16+0x115c>
 801914e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019152:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8019156:	681b      	ldr	r3, [r3, #0]
 8019158:	425a      	negs	r2, r3
 801915a:	e000      	b.n	801915e <arm_nn_mat_mult_kernel_s8_s16+0x115e>
 801915c:	2200      	movs	r2, #0
 801915e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019162:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8019166:	6019      	str	r1, [r3, #0]
 8019168:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801916c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8019170:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8019172:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019176:	f5a3 72ca 	sub.w	r2, r3, #404	; 0x194
 801917a:	2300      	movs	r3, #0
 801917c:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801917e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019182:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8019186:	2201      	movs	r2, #1
 8019188:	681b      	ldr	r3, [r3, #0]
 801918a:	fa02 f103 	lsl.w	r1, r2, r3
 801918e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019192:	f5a3 72cc 	sub.w	r2, r3, #408	; 0x198
 8019196:	1e4b      	subs	r3, r1, #1
 8019198:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 801919a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801919e:	f5a3 71ce 	sub.w	r1, r3, #412	; 0x19c
 80191a2:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80191a6:	f5a3 72c6 	sub.w	r2, r3, #396	; 0x18c
 80191aa:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80191ae:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80191b2:	6812      	ldr	r2, [r2, #0]
 80191b4:	681b      	ldr	r3, [r3, #0]
 80191b6:	4013      	ands	r3, r2
 80191b8:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 80191ba:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80191be:	f5a3 71ca 	sub.w	r1, r3, #404	; 0x194
 80191c2:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80191c6:	f5a3 72c6 	sub.w	r2, r3, #396	; 0x18c
 80191ca:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80191ce:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80191d2:	6812      	ldr	r2, [r2, #0]
 80191d4:	681b      	ldr	r3, [r3, #0]
 80191d6:	fa42 f303 	asr.w	r3, r2, r3
 80191da:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 80191dc:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80191e0:	f5a3 72d0 	sub.w	r2, r3, #416	; 0x1a0
 80191e4:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80191e8:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80191ec:	681b      	ldr	r3, [r3, #0]
 80191ee:	105b      	asrs	r3, r3, #1
 80191f0:	6013      	str	r3, [r2, #0]
    if (result < 0)
 80191f2:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80191f6:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80191fa:	681b      	ldr	r3, [r3, #0]
 80191fc:	2b00      	cmp	r3, #0
 80191fe:	da0a      	bge.n	8019216 <arm_nn_mat_mult_kernel_s8_s16+0x1216>
        threshold++;
 8019200:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019204:	f5a3 72d0 	sub.w	r2, r3, #416	; 0x1a0
 8019208:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801920c:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8019210:	681b      	ldr	r3, [r3, #0]
 8019212:	3301      	adds	r3, #1
 8019214:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 8019216:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801921a:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 801921e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019222:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8019226:	6812      	ldr	r2, [r2, #0]
 8019228:	681b      	ldr	r3, [r3, #0]
 801922a:	429a      	cmp	r2, r3
 801922c:	dd0a      	ble.n	8019244 <arm_nn_mat_mult_kernel_s8_s16+0x1244>
        result++;
 801922e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019232:	f5a3 72ca 	sub.w	r2, r3, #404	; 0x194
 8019236:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801923a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 801923e:	681b      	ldr	r3, [r3, #0]
 8019240:	3301      	adds	r3, #1
 8019242:	6013      	str	r3, [r2, #0]
    return result;
 8019244:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019248:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 801924c:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801924e:	bf00      	nop
 8019250:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
        ch_1_out_1 += out_offset;
 8019254:	f8d7 244c 	ldr.w	r2, [r7, #1100]	; 0x44c
 8019258:	f8d7 3494 	ldr.w	r3, [r7, #1172]	; 0x494
 801925c:	4413      	add	r3, r2
 801925e:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
        ch_1_out_1 = MAX(ch_1_out_1, activation_min);
 8019262:	f9b7 2498 	ldrsh.w	r2, [r7, #1176]	; 0x498
 8019266:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 801926a:	4293      	cmp	r3, r2
 801926c:	bfb8      	it	lt
 801926e:	4613      	movlt	r3, r2
 8019270:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
        ch_1_out_1 = MIN(ch_1_out_1, activation_max);
 8019274:	f9b7 249c 	ldrsh.w	r2, [r7, #1180]	; 0x49c
 8019278:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 801927c:	4293      	cmp	r3, r2
 801927e:	bfa8      	it	ge
 8019280:	4613      	movge	r3, r2
 8019282:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
        *out_1++ = (q7_t)ch_1_out_1;
 8019286:	f8d7 246c 	ldr.w	r2, [r7, #1132]	; 0x46c
 801928a:	1c53      	adds	r3, r2, #1
 801928c:	f8c7 346c 	str.w	r3, [r7, #1132]	; 0x46c
 8019290:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 8019294:	b25b      	sxtb	r3, r3
 8019296:	7013      	strb	r3, [r2, #0]
        out_mult++;
 8019298:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 801929c:	3304      	adds	r3, #4
 801929e:	f8c7 3490 	str.w	r3, [r7, #1168]	; 0x490
        out_shift++;
 80192a2:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80192a6:	f5a3 7272 	sub.w	r2, r3, #968	; 0x3c8
 80192aa:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80192ae:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 80192b2:	681b      	ldr	r3, [r3, #0]
 80192b4:	3304      	adds	r3, #4
 80192b6:	6013      	str	r3, [r2, #0]

        /* skip row */
        ip_a0 += num_col_a;
 80192b8:	f8b7 24a0 	ldrh.w	r2, [r7, #1184]	; 0x4a0
 80192bc:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 80192c0:	4413      	add	r3, r2
 80192c2:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
        row_count--;
 80192c6:	f8b7 3466 	ldrh.w	r3, [r7, #1126]	; 0x466
 80192ca:	3b01      	subs	r3, #1
 80192cc:	f8a7 3466 	strh.w	r3, [r7, #1126]	; 0x466
    while (row_count)
 80192d0:	f8b7 3466 	ldrh.w	r3, [r7, #1126]	; 0x466
 80192d4:	2b00      	cmp	r3, #0
 80192d6:	f47e aecd 	bne.w	8018074 <arm_nn_mat_mult_kernel_s8_s16+0x74>
    }

    /* compute the last odd numbered row if any */
    if (output_ch & 0x1)
 80192da:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80192de:	f2a3 33c2 	subw	r3, r3, #962	; 0x3c2
 80192e2:	881b      	ldrh	r3, [r3, #0]
 80192e4:	f003 0301 	and.w	r3, r3, #1
 80192e8:	2b00      	cmp	r3, #0
 80192ea:	f000 859e 	beq.w	8019e2a <arm_nn_mat_mult_kernel_s8_s16+0x1e2a>
    {
        /* setup pointers for B */
        const q15_t *ip_b0 = input_b;
 80192ee:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80192f2:	f5a3 7261 	sub.w	r2, r3, #900	; 0x384
 80192f6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80192fa:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 80192fe:	681b      	ldr	r3, [r3, #0]
 8019300:	6013      	str	r3, [r2, #0]
        const q15_t *ip_b1 = ip_b0 + num_col_a;
 8019302:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019306:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 801930a:	681a      	ldr	r2, [r3, #0]
 801930c:	f8b7 34a0 	ldrh.w	r3, [r7, #1184]	; 0x4a0
 8019310:	005b      	lsls	r3, r3, #1
 8019312:	441a      	add	r2, r3
 8019314:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019318:	f5a3 7362 	sub.w	r3, r3, #904	; 0x388
 801931c:	601a      	str	r2, [r3, #0]

        /* load the bias */
        q31_t ch_0_out_0 = *bias;
 801931e:	f8d7 3468 	ldr.w	r3, [r7, #1128]	; 0x468
 8019322:	681b      	ldr	r3, [r3, #0]
 8019324:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444
        q31_t ch_0_out_1 = *bias++;
 8019328:	f8d7 2468 	ldr.w	r2, [r7, #1128]	; 0x468
 801932c:	1d13      	adds	r3, r2, #4
 801932e:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
 8019332:	6813      	ldr	r3, [r2, #0]
 8019334:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440

        uint16_t col_count = num_col_a >> 2;
 8019338:	f8b7 34a0 	ldrh.w	r3, [r7, #1184]	; 0x4a0
 801933c:	089b      	lsrs	r3, r3, #2
 801933e:	f8a7 343e 	strh.w	r3, [r7, #1086]	; 0x43e
        while (col_count)
 8019342:	e294      	b.n	801986e <arm_nn_mat_mult_kernel_s8_s16+0x186e>
 8019344:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019348:	f5a3 7232 	sub.w	r2, r3, #712	; 0x2c8
 801934c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8019350:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q15, 4);
 8019352:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019356:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 801935a:	681b      	ldr	r3, [r3, #0]
 801935c:	681b      	ldr	r3, [r3, #0]
 801935e:	681b      	ldr	r3, [r3, #0]
 8019360:	461a      	mov	r2, r3
 8019362:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019366:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 801936a:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 801936c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019370:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 8019374:	681b      	ldr	r3, [r3, #0]
 8019376:	681b      	ldr	r3, [r3, #0]
 8019378:	1d1a      	adds	r2, r3, #4
 801937a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801937e:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 8019382:	681b      	ldr	r3, [r3, #0]
 8019384:	601a      	str	r2, [r3, #0]
    return (val);
 8019386:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801938a:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 801938e:	681b      	ldr	r3, [r3, #0]
        {
            q31_t a01, a02;
            q31_t b0 = arm_nn_read_q15x2_ia(&ip_b0);
 8019390:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
 8019394:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019398:	f5a3 7231 	sub.w	r2, r3, #708	; 0x2c4
 801939c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80193a0:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q15, 4);
 80193a2:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80193a6:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 80193aa:	681b      	ldr	r3, [r3, #0]
 80193ac:	681b      	ldr	r3, [r3, #0]
 80193ae:	681b      	ldr	r3, [r3, #0]
 80193b0:	461a      	mov	r2, r3
 80193b2:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80193b6:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 80193ba:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 80193bc:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80193c0:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 80193c4:	681b      	ldr	r3, [r3, #0]
 80193c6:	681b      	ldr	r3, [r3, #0]
 80193c8:	1d1a      	adds	r2, r3, #4
 80193ca:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80193ce:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 80193d2:	681b      	ldr	r3, [r3, #0]
 80193d4:	601a      	str	r2, [r3, #0]
    return (val);
 80193d6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80193da:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 80193de:	681b      	ldr	r3, [r3, #0]
            q31_t b1 = arm_nn_read_q15x2_ia(&ip_b1);
 80193e0:	f8c7 3430 	str.w	r3, [r7, #1072]	; 0x430
 80193e4:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80193e8:	f5a3 726b 	sub.w	r2, r3, #940	; 0x3ac
 80193ec:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 80193f0:	6013      	str	r3, [r2, #0]
 80193f2:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80193f6:	f5a3 721f 	sub.w	r2, r3, #636	; 0x27c
 80193fa:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80193fe:	6013      	str	r3, [r2, #0]
 8019400:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019404:	f5a3 7220 	sub.w	r2, r3, #640	; 0x280
 8019408:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801940c:	6013      	str	r3, [r2, #0]
 801940e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019412:	f5a3 7221 	sub.w	r2, r3, #644	; 0x284
 8019416:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 801941a:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801941c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019420:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 8019424:	681b      	ldr	r3, [r3, #0]
 8019426:	681b      	ldr	r3, [r3, #0]
 8019428:	681b      	ldr	r3, [r3, #0]
 801942a:	461a      	mov	r2, r3
 801942c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019430:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 8019434:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8019436:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801943a:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 801943e:	681b      	ldr	r3, [r3, #0]
 8019440:	681b      	ldr	r3, [r3, #0]
 8019442:	1d1a      	adds	r2, r3, #4
 8019444:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019448:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 801944c:	681b      	ldr	r3, [r3, #0]
 801944e:	601a      	str	r2, [r3, #0]
    return (val);
 8019450:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019454:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 8019458:	681a      	ldr	r2, [r3, #0]
    q31_t inA = arm_nn_read_q7x4_ia(&source);
 801945a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801945e:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8019462:	601a      	str	r2, [r3, #0]
    q31_t inAbuf1 = __SXTB16(__ROR((uint32_t)inA, 8));
 8019464:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019468:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 801946c:	681a      	ldr	r2, [r3, #0]
 801946e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019472:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 8019476:	601a      	str	r2, [r3, #0]
 8019478:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801947c:	f5a3 7224 	sub.w	r2, r3, #656	; 0x290
 8019480:	2308      	movs	r3, #8
 8019482:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8019484:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019488:	f5a3 7224 	sub.w	r2, r3, #656	; 0x290
 801948c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019490:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8019494:	681b      	ldr	r3, [r3, #0]
 8019496:	f003 031f 	and.w	r3, r3, #31
 801949a:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801949c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80194a0:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80194a4:	681b      	ldr	r3, [r3, #0]
 80194a6:	2b00      	cmp	r3, #0
 80194a8:	d105      	bne.n	80194b6 <arm_nn_mat_mult_kernel_s8_s16+0x14b6>
    return op1;
 80194aa:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80194ae:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 80194b2:	681a      	ldr	r2, [r3, #0]
 80194b4:	e00a      	b.n	80194cc <arm_nn_mat_mult_kernel_s8_s16+0x14cc>
  return (op1 >> op2) | (op1 << (32U - op2));
 80194b6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80194ba:	f5a3 7223 	sub.w	r2, r3, #652	; 0x28c
 80194be:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80194c2:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80194c6:	6812      	ldr	r2, [r2, #0]
 80194c8:	681b      	ldr	r3, [r3, #0]
 80194ca:	41da      	rors	r2, r3
 80194cc:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80194d0:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 80194d4:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80194d6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80194da:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 80194de:	681b      	ldr	r3, [r3, #0]
 80194e0:	fa2f f283 	sxtb16	r2, r3
 80194e4:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80194e8:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 80194ec:	601a      	str	r2, [r3, #0]
  return(result);
 80194ee:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80194f2:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 80194f6:	681a      	ldr	r2, [r3, #0]
 80194f8:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80194fc:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8019500:	601a      	str	r2, [r3, #0]
    q31_t inAbuf2 = __SXTB16(inA);
 8019502:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019506:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 801950a:	681a      	ldr	r2, [r3, #0]
 801950c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019510:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8019514:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8019516:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801951a:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 801951e:	681b      	ldr	r3, [r3, #0]
 8019520:	fa2f f283 	sxtb16	r2, r3
 8019524:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019528:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 801952c:	601a      	str	r2, [r3, #0]
  return(result);
 801952e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019532:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 8019536:	681a      	ldr	r2, [r3, #0]
 8019538:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801953c:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 8019540:	601a      	str	r2, [r3, #0]
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 8019542:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019546:	f5a3 722b 	sub.w	r2, r3, #684	; 0x2ac
 801954a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801954e:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8019552:	681b      	ldr	r3, [r3, #0]
 8019554:	6013      	str	r3, [r2, #0]
 8019556:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801955a:	f5a3 722c 	sub.w	r2, r3, #688	; 0x2b0
 801955e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019562:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 8019566:	681b      	ldr	r3, [r3, #0]
 8019568:	6013      	str	r3, [r2, #0]
 801956a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801956e:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 8019572:	681a      	ldr	r2, [r3, #0]
 8019574:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019578:	f5a3 732c 	sub.w	r3, r3, #688	; 0x2b0
 801957c:	681b      	ldr	r3, [r3, #0]
 801957e:	eac2 4223 	pkhtb	r2, r2, r3, asr #16
 8019582:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019586:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 801958a:	601a      	str	r2, [r3, #0]
 801958c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019590:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 8019594:	681b      	ldr	r3, [r3, #0]
 8019596:	461a      	mov	r2, r3
 8019598:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801959c:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 80195a0:	681b      	ldr	r3, [r3, #0]
 80195a2:	601a      	str	r2, [r3, #0]
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 80195a4:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80195a8:	f5a3 722e 	sub.w	r2, r3, #696	; 0x2b8
 80195ac:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80195b0:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 80195b4:	681b      	ldr	r3, [r3, #0]
 80195b6:	6013      	str	r3, [r2, #0]
 80195b8:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80195bc:	f5a3 722f 	sub.w	r2, r3, #700	; 0x2bc
 80195c0:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80195c4:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80195c8:	681b      	ldr	r3, [r3, #0]
 80195ca:	6013      	str	r3, [r2, #0]
 80195cc:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80195d0:	f5a3 732e 	sub.w	r3, r3, #696	; 0x2b8
 80195d4:	681a      	ldr	r2, [r3, #0]
 80195d6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80195da:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 80195de:	681b      	ldr	r3, [r3, #0]
 80195e0:	eac2 4203 	pkhbt	r2, r2, r3, lsl #16
 80195e4:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80195e8:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 80195ec:	601a      	str	r2, [r3, #0]
 80195ee:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80195f2:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 80195f6:	681b      	ldr	r3, [r3, #0]
 80195f8:	461a      	mov	r2, r3
 80195fa:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80195fe:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8019602:	681b      	ldr	r3, [r3, #0]
 8019604:	601a      	str	r2, [r3, #0]
    return source;
 8019606:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801960a:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 801960e:	681b      	ldr	r3, [r3, #0]

            ip_a0 = read_and_pad(ip_a0, &a01, &a02);
 8019610:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460

            ch_0_out_0 = __SMLAD(a01, b0, ch_0_out_0);
 8019614:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019618:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 801961c:	681b      	ldr	r3, [r3, #0]
 801961e:	4618      	mov	r0, r3
 8019620:	f8d7 2434 	ldr.w	r2, [r7, #1076]	; 0x434
 8019624:	f8d7 1444 	ldr.w	r1, [r7, #1092]	; 0x444
 8019628:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801962c:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8019630:	6018      	str	r0, [r3, #0]
 8019632:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019636:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 801963a:	601a      	str	r2, [r3, #0]
 801963c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019640:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8019644:	6019      	str	r1, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8019646:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801964a:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 801964e:	6819      	ldr	r1, [r3, #0]
 8019650:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019654:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8019658:	681a      	ldr	r2, [r3, #0]
 801965a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801965e:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8019662:	681b      	ldr	r3, [r3, #0]
 8019664:	fb21 3202 	smlad	r2, r1, r2, r3
 8019668:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801966c:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 8019670:	601a      	str	r2, [r3, #0]
  return(result);
 8019672:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019676:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 801967a:	681b      	ldr	r3, [r3, #0]
 801967c:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444
            ch_0_out_1 = __SMLAD(a01, b1, ch_0_out_1);
 8019680:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019684:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 8019688:	681b      	ldr	r3, [r3, #0]
 801968a:	4618      	mov	r0, r3
 801968c:	f8d7 2430 	ldr.w	r2, [r7, #1072]	; 0x430
 8019690:	f8d7 1440 	ldr.w	r1, [r7, #1088]	; 0x440
 8019694:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019698:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 801969c:	6018      	str	r0, [r3, #0]
 801969e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80196a2:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80196a6:	601a      	str	r2, [r3, #0]
 80196a8:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80196ac:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80196b0:	6019      	str	r1, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80196b2:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80196b6:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80196ba:	6819      	ldr	r1, [r3, #0]
 80196bc:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80196c0:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80196c4:	681a      	ldr	r2, [r3, #0]
 80196c6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80196ca:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80196ce:	681b      	ldr	r3, [r3, #0]
 80196d0:	fb21 3202 	smlad	r2, r1, r2, r3
 80196d4:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80196d8:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 80196dc:	601a      	str	r2, [r3, #0]
  return(result);
 80196de:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80196e2:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 80196e6:	681b      	ldr	r3, [r3, #0]
 80196e8:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
 80196ec:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80196f0:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 80196f4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80196f8:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q15, 4);
 80196fa:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80196fe:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8019702:	681b      	ldr	r3, [r3, #0]
 8019704:	681b      	ldr	r3, [r3, #0]
 8019706:	681b      	ldr	r3, [r3, #0]
 8019708:	461a      	mov	r2, r3
 801970a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801970e:	f5a3 736d 	sub.w	r3, r3, #948	; 0x3b4
 8019712:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 8019714:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019718:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 801971c:	681b      	ldr	r3, [r3, #0]
 801971e:	681b      	ldr	r3, [r3, #0]
 8019720:	1d1a      	adds	r2, r3, #4
 8019722:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019726:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 801972a:	681b      	ldr	r3, [r3, #0]
 801972c:	601a      	str	r2, [r3, #0]
    return (val);
 801972e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019732:	f5a3 736d 	sub.w	r3, r3, #948	; 0x3b4
 8019736:	681b      	ldr	r3, [r3, #0]

            b0 = arm_nn_read_q15x2_ia(&ip_b0);
 8019738:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
 801973c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019740:	f5a3 7215 	sub.w	r2, r3, #596	; 0x254
 8019744:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8019748:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q15, 4);
 801974a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801974e:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8019752:	681b      	ldr	r3, [r3, #0]
 8019754:	681b      	ldr	r3, [r3, #0]
 8019756:	681b      	ldr	r3, [r3, #0]
 8019758:	461a      	mov	r2, r3
 801975a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801975e:	f5a3 736e 	sub.w	r3, r3, #952	; 0x3b8
 8019762:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 8019764:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019768:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 801976c:	681b      	ldr	r3, [r3, #0]
 801976e:	681b      	ldr	r3, [r3, #0]
 8019770:	1d1a      	adds	r2, r3, #4
 8019772:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019776:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 801977a:	681b      	ldr	r3, [r3, #0]
 801977c:	601a      	str	r2, [r3, #0]
    return (val);
 801977e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019782:	f5a3 736e 	sub.w	r3, r3, #952	; 0x3b8
 8019786:	681b      	ldr	r3, [r3, #0]
            b1 = arm_nn_read_q15x2_ia(&ip_b1);
 8019788:	f8c7 3430 	str.w	r3, [r7, #1072]	; 0x430
            ch_0_out_0 = __SMLAD(a02, b0, ch_0_out_0);
 801978c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019790:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 8019794:	681b      	ldr	r3, [r3, #0]
 8019796:	4618      	mov	r0, r3
 8019798:	f8d7 2434 	ldr.w	r2, [r7, #1076]	; 0x434
 801979c:	f8d7 1444 	ldr.w	r1, [r7, #1092]	; 0x444
 80197a0:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80197a4:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80197a8:	6018      	str	r0, [r3, #0]
 80197aa:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80197ae:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 80197b2:	601a      	str	r2, [r3, #0]
 80197b4:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80197b8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80197bc:	6019      	str	r1, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80197be:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80197c2:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80197c6:	6819      	ldr	r1, [r3, #0]
 80197c8:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80197cc:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 80197d0:	681a      	ldr	r2, [r3, #0]
 80197d2:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80197d6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80197da:	681b      	ldr	r3, [r3, #0]
 80197dc:	fb21 3202 	smlad	r2, r1, r2, r3
 80197e0:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80197e4:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 80197e8:	601a      	str	r2, [r3, #0]
  return(result);
 80197ea:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80197ee:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 80197f2:	681b      	ldr	r3, [r3, #0]
 80197f4:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444
            ch_0_out_1 = __SMLAD(a02, b1, ch_0_out_1);
 80197f8:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80197fc:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 8019800:	681b      	ldr	r3, [r3, #0]
 8019802:	4618      	mov	r0, r3
 8019804:	f8d7 2430 	ldr.w	r2, [r7, #1072]	; 0x430
 8019808:	f8d7 1440 	ldr.w	r1, [r7, #1088]	; 0x440
 801980c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019810:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8019814:	6018      	str	r0, [r3, #0]
 8019816:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801981a:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 801981e:	601a      	str	r2, [r3, #0]
 8019820:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019824:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8019828:	6019      	str	r1, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801982a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801982e:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8019832:	6819      	ldr	r1, [r3, #0]
 8019834:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019838:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 801983c:	681a      	ldr	r2, [r3, #0]
 801983e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019842:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8019846:	681b      	ldr	r3, [r3, #0]
 8019848:	fb21 3202 	smlad	r2, r1, r2, r3
 801984c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019850:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8019854:	601a      	str	r2, [r3, #0]
  return(result);
 8019856:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801985a:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 801985e:	681b      	ldr	r3, [r3, #0]
 8019860:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440

            col_count--;
 8019864:	f8b7 343e 	ldrh.w	r3, [r7, #1086]	; 0x43e
 8019868:	3b01      	subs	r3, #1
 801986a:	f8a7 343e 	strh.w	r3, [r7, #1086]	; 0x43e
        while (col_count)
 801986e:	f8b7 343e 	ldrh.w	r3, [r7, #1086]	; 0x43e
 8019872:	2b00      	cmp	r3, #0
 8019874:	f47f ad66 	bne.w	8019344 <arm_nn_mat_mult_kernel_s8_s16+0x1344>
        }
        col_count = num_col_a & 0x3;
 8019878:	f8b7 34a0 	ldrh.w	r3, [r7, #1184]	; 0x4a0
 801987c:	f003 0303 	and.w	r3, r3, #3
 8019880:	f8a7 343e 	strh.w	r3, [r7, #1086]	; 0x43e
        while (col_count)
 8019884:	e03e      	b.n	8019904 <arm_nn_mat_mult_kernel_s8_s16+0x1904>
        {
            q7_t a0 = *ip_a0++;
 8019886:	f8d7 2460 	ldr.w	r2, [r7, #1120]	; 0x460
 801988a:	1c53      	adds	r3, r2, #1
 801988c:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
 8019890:	7813      	ldrb	r3, [r2, #0]
 8019892:	f887 343d 	strb.w	r3, [r7, #1085]	; 0x43d
            q15_t b0 = *ip_b0++;
 8019896:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801989a:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 801989e:	6819      	ldr	r1, [r3, #0]
 80198a0:	1c8a      	adds	r2, r1, #2
 80198a2:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80198a6:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 80198aa:	601a      	str	r2, [r3, #0]
 80198ac:	880b      	ldrh	r3, [r1, #0]
 80198ae:	f8a7 343a 	strh.w	r3, [r7, #1082]	; 0x43a
            q15_t b1 = *ip_b1++;
 80198b2:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80198b6:	f5a3 7362 	sub.w	r3, r3, #904	; 0x388
 80198ba:	6819      	ldr	r1, [r3, #0]
 80198bc:	1c8a      	adds	r2, r1, #2
 80198be:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80198c2:	f5a3 7362 	sub.w	r3, r3, #904	; 0x388
 80198c6:	601a      	str	r2, [r3, #0]
 80198c8:	880b      	ldrh	r3, [r1, #0]
 80198ca:	f8a7 3438 	strh.w	r3, [r7, #1080]	; 0x438

            ch_0_out_0 += a0 * b0;
 80198ce:	f997 243d 	ldrsb.w	r2, [r7, #1085]	; 0x43d
 80198d2:	f9b7 343a 	ldrsh.w	r3, [r7, #1082]	; 0x43a
 80198d6:	fb03 f202 	mul.w	r2, r3, r2
 80198da:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 80198de:	4413      	add	r3, r2
 80198e0:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444
            ch_0_out_1 += a0 * b1;
 80198e4:	f997 243d 	ldrsb.w	r2, [r7, #1085]	; 0x43d
 80198e8:	f9b7 3438 	ldrsh.w	r3, [r7, #1080]	; 0x438
 80198ec:	fb03 f202 	mul.w	r2, r3, r2
 80198f0:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 80198f4:	4413      	add	r3, r2
 80198f6:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
            col_count--;
 80198fa:	f8b7 343e 	ldrh.w	r3, [r7, #1086]	; 0x43e
 80198fe:	3b01      	subs	r3, #1
 8019900:	f8a7 343e 	strh.w	r3, [r7, #1086]	; 0x43e
        while (col_count)
 8019904:	f8b7 343e 	ldrh.w	r3, [r7, #1086]	; 0x43e
 8019908:	2b00      	cmp	r3, #0
 801990a:	d1bc      	bne.n	8019886 <arm_nn_mat_mult_kernel_s8_s16+0x1886>
        }
        ch_0_out_0 = arm_nn_requantize(ch_0_out_0, *out_mult, *out_shift);
 801990c:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 8019910:	6818      	ldr	r0, [r3, #0]
 8019912:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019916:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 801991a:	681b      	ldr	r3, [r3, #0]
 801991c:	6819      	ldr	r1, [r3, #0]
 801991e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019922:	f5a3 723f 	sub.w	r2, r3, #764	; 0x2fc
 8019926:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 801992a:	6013      	str	r3, [r2, #0]
 801992c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019930:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 8019934:	6018      	str	r0, [r3, #0]
 8019936:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801993a:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 801993e:	6019      	str	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8019940:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019944:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 8019948:	681b      	ldr	r3, [r3, #0]
 801994a:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 801994e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019952:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 8019956:	681b      	ldr	r3, [r3, #0]
 8019958:	fa03 f202 	lsl.w	r2, r3, r2
 801995c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019960:	f5a3 7342 	sub.w	r3, r3, #776	; 0x308
 8019964:	601a      	str	r2, [r3, #0]
 8019966:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801996a:	f5a3 7243 	sub.w	r2, r3, #780	; 0x30c
 801996e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019972:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 8019976:	681b      	ldr	r3, [r3, #0]
 8019978:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801997a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801997e:	f5a3 7244 	sub.w	r2, r3, #784	; 0x310
 8019982:	2300      	movs	r3, #0
 8019984:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 8019986:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801998a:	f5a3 7264 	sub.w	r2, r3, #912	; 0x390
 801998e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8019992:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 8019994:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019998:	f5a3 7264 	sub.w	r2, r3, #912	; 0x390
 801999c:	2300      	movs	r3, #0
 801999e:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 80199a0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80199a4:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80199a8:	f5a3 7342 	sub.w	r3, r3, #776	; 0x308
 80199ac:	681b      	ldr	r3, [r3, #0]
 80199ae:	17da      	asrs	r2, r3, #31
 80199b0:	613b      	str	r3, [r7, #16]
 80199b2:	617a      	str	r2, [r7, #20]
 80199b4:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80199b8:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 80199bc:	681b      	ldr	r3, [r3, #0]
 80199be:	17da      	asrs	r2, r3, #31
 80199c0:	60bb      	str	r3, [r7, #8]
 80199c2:	60fa      	str	r2, [r7, #12]
 80199c4:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 80199c8:	4633      	mov	r3, r6
 80199ca:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80199ce:	4642      	mov	r2, r8
 80199d0:	fb02 f203 	mul.w	r2, r2, r3
 80199d4:	464b      	mov	r3, r9
 80199d6:	462c      	mov	r4, r5
 80199d8:	fb04 f303 	mul.w	r3, r4, r3
 80199dc:	4413      	add	r3, r2
 80199de:	462a      	mov	r2, r5
 80199e0:	4644      	mov	r4, r8
 80199e2:	fba2 4204 	umull	r4, r2, r2, r4
 80199e6:	657a      	str	r2, [r7, #84]	; 0x54
 80199e8:	4622      	mov	r2, r4
 80199ea:	653a      	str	r2, [r7, #80]	; 0x50
 80199ec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80199ee:	4413      	add	r3, r2
 80199f0:	657b      	str	r3, [r7, #84]	; 0x54
 80199f2:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 80199f6:	4623      	mov	r3, r4
 80199f8:	18c3      	adds	r3, r0, r3
 80199fa:	603b      	str	r3, [r7, #0]
 80199fc:	462b      	mov	r3, r5
 80199fe:	eb41 0303 	adc.w	r3, r1, r3
 8019a02:	607b      	str	r3, [r7, #4]
 8019a04:	e9d7 3400 	ldrd	r3, r4, [r7]
 8019a08:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
    result = (int32_t)(mult.long_long >> 31);
 8019a0c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8019a10:	f04f 0200 	mov.w	r2, #0
 8019a14:	f04f 0300 	mov.w	r3, #0
 8019a18:	0fc2      	lsrs	r2, r0, #31
 8019a1a:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8019a1e:	17cb      	asrs	r3, r1, #31
 8019a20:	f507 618e 	add.w	r1, r7, #1136	; 0x470
 8019a24:	f5a1 7144 	sub.w	r1, r1, #784	; 0x310
 8019a28:	4613      	mov	r3, r2
 8019a2a:	600b      	str	r3, [r1, #0]
    return result;
 8019a2c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019a30:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8019a34:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8019a36:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019a3a:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 8019a3e:	681b      	ldr	r3, [r3, #0]
 8019a40:	2b00      	cmp	r3, #0
 8019a42:	dc06      	bgt.n	8019a52 <arm_nn_mat_mult_kernel_s8_s16+0x1a52>
 8019a44:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019a48:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 8019a4c:	681b      	ldr	r3, [r3, #0]
 8019a4e:	425b      	negs	r3, r3
 8019a50:	e000      	b.n	8019a54 <arm_nn_mat_mult_kernel_s8_s16+0x1a54>
 8019a52:	2300      	movs	r3, #0
 8019a54:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8019a58:	f5a2 7245 	sub.w	r2, r2, #788	; 0x314
 8019a5c:	6011      	str	r1, [r2, #0]
 8019a5e:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8019a62:	f5a2 7246 	sub.w	r2, r2, #792	; 0x318
 8019a66:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8019a68:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019a6c:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 8019a70:	2200      	movs	r2, #0
 8019a72:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8019a74:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019a78:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 8019a7c:	2201      	movs	r2, #1
 8019a7e:	681b      	ldr	r3, [r3, #0]
 8019a80:	409a      	lsls	r2, r3
 8019a82:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019a86:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 8019a8a:	3a01      	subs	r2, #1
 8019a8c:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 8019a8e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019a92:	f5a3 7349 	sub.w	r3, r3, #804	; 0x324
 8019a96:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8019a9a:	f5a2 7145 	sub.w	r1, r2, #788	; 0x314
 8019a9e:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8019aa2:	f5a2 7248 	sub.w	r2, r2, #800	; 0x320
 8019aa6:	6809      	ldr	r1, [r1, #0]
 8019aa8:	6812      	ldr	r2, [r2, #0]
 8019aaa:	400a      	ands	r2, r1
 8019aac:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 8019aae:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019ab2:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 8019ab6:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8019aba:	f5a2 7145 	sub.w	r1, r2, #788	; 0x314
 8019abe:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8019ac2:	f5a2 7246 	sub.w	r2, r2, #792	; 0x318
 8019ac6:	6809      	ldr	r1, [r1, #0]
 8019ac8:	6812      	ldr	r2, [r2, #0]
 8019aca:	fa41 f202 	asr.w	r2, r1, r2
 8019ace:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 8019ad0:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019ad4:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8019ad8:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8019adc:	f5a2 7248 	sub.w	r2, r2, #800	; 0x320
 8019ae0:	6812      	ldr	r2, [r2, #0]
 8019ae2:	1052      	asrs	r2, r2, #1
 8019ae4:	601a      	str	r2, [r3, #0]
    if (result < 0)
 8019ae6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019aea:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 8019aee:	681b      	ldr	r3, [r3, #0]
 8019af0:	2b00      	cmp	r3, #0
 8019af2:	da0a      	bge.n	8019b0a <arm_nn_mat_mult_kernel_s8_s16+0x1b0a>
        threshold++;
 8019af4:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019af8:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8019afc:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8019b00:	f5a2 724a 	sub.w	r2, r2, #808	; 0x328
 8019b04:	6812      	ldr	r2, [r2, #0]
 8019b06:	3201      	adds	r2, #1
 8019b08:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 8019b0a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019b0e:	f5a3 7249 	sub.w	r2, r3, #804	; 0x324
 8019b12:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019b16:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8019b1a:	6812      	ldr	r2, [r2, #0]
 8019b1c:	681b      	ldr	r3, [r3, #0]
 8019b1e:	429a      	cmp	r2, r3
 8019b20:	dd0a      	ble.n	8019b38 <arm_nn_mat_mult_kernel_s8_s16+0x1b38>
        result++;
 8019b22:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019b26:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 8019b2a:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8019b2e:	f5a2 7247 	sub.w	r2, r2, #796	; 0x31c
 8019b32:	6812      	ldr	r2, [r2, #0]
 8019b34:	3201      	adds	r2, #1
 8019b36:	601a      	str	r2, [r3, #0]
    return result;
 8019b38:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019b3c:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 8019b40:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8019b42:	bf00      	nop
 8019b44:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444
        ch_0_out_0 += out_offset;
 8019b48:	f8d7 2444 	ldr.w	r2, [r7, #1092]	; 0x444
 8019b4c:	f8d7 3494 	ldr.w	r3, [r7, #1172]	; 0x494
 8019b50:	4413      	add	r3, r2
 8019b52:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444
        ch_0_out_0 = MAX(ch_0_out_0, activation_min);
 8019b56:	f9b7 3498 	ldrsh.w	r3, [r7, #1176]	; 0x498
 8019b5a:	f8d7 2444 	ldr.w	r2, [r7, #1092]	; 0x444
 8019b5e:	4293      	cmp	r3, r2
 8019b60:	bfb8      	it	lt
 8019b62:	4613      	movlt	r3, r2
 8019b64:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444
        ch_0_out_0 = MIN(ch_0_out_0, activation_max);
 8019b68:	f9b7 349c 	ldrsh.w	r3, [r7, #1180]	; 0x49c
 8019b6c:	f8d7 2444 	ldr.w	r2, [r7, #1092]	; 0x444
 8019b70:	4293      	cmp	r3, r2
 8019b72:	bfa8      	it	ge
 8019b74:	4613      	movge	r3, r2
 8019b76:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444
        *out_0++ = (q7_t)ch_0_out_0;
 8019b7a:	f8d7 34a8 	ldr.w	r3, [r7, #1192]	; 0x4a8
 8019b7e:	1c5a      	adds	r2, r3, #1
 8019b80:	f8c7 24a8 	str.w	r2, [r7, #1192]	; 0x4a8
 8019b84:	f8d7 2444 	ldr.w	r2, [r7, #1092]	; 0x444
 8019b88:	b252      	sxtb	r2, r2
 8019b8a:	701a      	strb	r2, [r3, #0]

        ch_0_out_1 = arm_nn_requantize(ch_0_out_1, *out_mult, *out_shift);
 8019b8c:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 8019b90:	6819      	ldr	r1, [r3, #0]
 8019b92:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019b96:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 8019b9a:	681b      	ldr	r3, [r3, #0]
 8019b9c:	681a      	ldr	r2, [r3, #0]
 8019b9e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019ba2:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8019ba6:	f8d7 0440 	ldr.w	r0, [r7, #1088]	; 0x440
 8019baa:	6018      	str	r0, [r3, #0]
 8019bac:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019bb0:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8019bb4:	6019      	str	r1, [r3, #0]
 8019bb6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019bba:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8019bbe:	601a      	str	r2, [r3, #0]
 8019bc0:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019bc4:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8019bc8:	681b      	ldr	r3, [r3, #0]
 8019bca:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019bce:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8019bd2:	f5a2 7233 	sub.w	r2, r2, #716	; 0x2cc
 8019bd6:	6812      	ldr	r2, [r2, #0]
 8019bd8:	409a      	lsls	r2, r3
 8019bda:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019bde:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8019be2:	601a      	str	r2, [r3, #0]
 8019be4:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019be8:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 8019bec:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8019bf0:	f5a2 7234 	sub.w	r2, r2, #720	; 0x2d0
 8019bf4:	6812      	ldr	r2, [r2, #0]
 8019bf6:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8019bf8:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019bfc:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8019c00:	2200      	movs	r2, #0
 8019c02:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 8019c04:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019c08:	f5a3 7366 	sub.w	r3, r3, #920	; 0x398
 8019c0c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8019c10:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 8019c12:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019c16:	f5a3 7366 	sub.w	r3, r3, #920	; 0x398
 8019c1a:	2200      	movs	r2, #0
 8019c1c:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8019c1e:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8019c22:	f507 618e 	add.w	r1, r7, #1136	; 0x470
 8019c26:	f5a1 7136 	sub.w	r1, r1, #728	; 0x2d8
 8019c2a:	6809      	ldr	r1, [r1, #0]
 8019c2c:	17c8      	asrs	r0, r1, #31
 8019c2e:	62b9      	str	r1, [r7, #40]	; 0x28
 8019c30:	62f8      	str	r0, [r7, #44]	; 0x2c
 8019c32:	f507 618e 	add.w	r1, r7, #1136	; 0x470
 8019c36:	f5a1 7137 	sub.w	r1, r1, #732	; 0x2dc
 8019c3a:	6809      	ldr	r1, [r1, #0]
 8019c3c:	17c8      	asrs	r0, r1, #31
 8019c3e:	6239      	str	r1, [r7, #32]
 8019c40:	6278      	str	r0, [r7, #36]	; 0x24
 8019c42:	e9d7 560a 	ldrd	r5, r6, [r7, #40]	; 0x28
 8019c46:	4631      	mov	r1, r6
 8019c48:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8019c4c:	4640      	mov	r0, r8
 8019c4e:	fb00 f001 	mul.w	r0, r0, r1
 8019c52:	4649      	mov	r1, r9
 8019c54:	462c      	mov	r4, r5
 8019c56:	fb04 f101 	mul.w	r1, r4, r1
 8019c5a:	4401      	add	r1, r0
 8019c5c:	4628      	mov	r0, r5
 8019c5e:	4644      	mov	r4, r8
 8019c60:	fba0 4004 	umull	r4, r0, r0, r4
 8019c64:	65f8      	str	r0, [r7, #92]	; 0x5c
 8019c66:	4620      	mov	r0, r4
 8019c68:	65b8      	str	r0, [r7, #88]	; 0x58
 8019c6a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8019c6c:	4401      	add	r1, r0
 8019c6e:	65f9      	str	r1, [r7, #92]	; 0x5c
 8019c70:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8019c74:	4621      	mov	r1, r4
 8019c76:	1851      	adds	r1, r2, r1
 8019c78:	61b9      	str	r1, [r7, #24]
 8019c7a:	4629      	mov	r1, r5
 8019c7c:	eb43 0101 	adc.w	r1, r3, r1
 8019c80:	61f9      	str	r1, [r7, #28]
 8019c82:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8019c86:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
    result = (int32_t)(mult.long_long >> 31);
 8019c8a:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8019c8e:	f04f 0200 	mov.w	r2, #0
 8019c92:	f04f 0300 	mov.w	r3, #0
 8019c96:	0fc2      	lsrs	r2, r0, #31
 8019c98:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8019c9c:	17cb      	asrs	r3, r1, #31
 8019c9e:	f507 618e 	add.w	r1, r7, #1136	; 0x470
 8019ca2:	f5a1 7138 	sub.w	r1, r1, #736	; 0x2e0
 8019ca6:	4613      	mov	r3, r2
 8019ca8:	600b      	str	r3, [r1, #0]
    return result;
 8019caa:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019cae:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8019cb2:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8019cb4:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019cb8:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8019cbc:	681b      	ldr	r3, [r3, #0]
 8019cbe:	2b00      	cmp	r3, #0
 8019cc0:	dc06      	bgt.n	8019cd0 <arm_nn_mat_mult_kernel_s8_s16+0x1cd0>
 8019cc2:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019cc6:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8019cca:	681b      	ldr	r3, [r3, #0]
 8019ccc:	425b      	negs	r3, r3
 8019cce:	e000      	b.n	8019cd2 <arm_nn_mat_mult_kernel_s8_s16+0x1cd2>
 8019cd0:	2300      	movs	r3, #0
 8019cd2:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8019cd6:	f5a2 7239 	sub.w	r2, r2, #740	; 0x2e4
 8019cda:	6011      	str	r1, [r2, #0]
 8019cdc:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8019ce0:	f5a2 723a 	sub.w	r2, r2, #744	; 0x2e8
 8019ce4:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8019ce6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019cea:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8019cee:	2200      	movs	r2, #0
 8019cf0:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8019cf2:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019cf6:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8019cfa:	2201      	movs	r2, #1
 8019cfc:	681b      	ldr	r3, [r3, #0]
 8019cfe:	409a      	lsls	r2, r3
 8019d00:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019d04:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 8019d08:	3a01      	subs	r2, #1
 8019d0a:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 8019d0c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019d10:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 8019d14:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8019d18:	f5a2 7139 	sub.w	r1, r2, #740	; 0x2e4
 8019d1c:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8019d20:	f5a2 723c 	sub.w	r2, r2, #752	; 0x2f0
 8019d24:	6809      	ldr	r1, [r1, #0]
 8019d26:	6812      	ldr	r2, [r2, #0]
 8019d28:	400a      	ands	r2, r1
 8019d2a:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 8019d2c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019d30:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8019d34:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8019d38:	f5a2 7139 	sub.w	r1, r2, #740	; 0x2e4
 8019d3c:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8019d40:	f5a2 723a 	sub.w	r2, r2, #744	; 0x2e8
 8019d44:	6809      	ldr	r1, [r1, #0]
 8019d46:	6812      	ldr	r2, [r2, #0]
 8019d48:	fa41 f202 	asr.w	r2, r1, r2
 8019d4c:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 8019d4e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019d52:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 8019d56:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8019d5a:	f5a2 723c 	sub.w	r2, r2, #752	; 0x2f0
 8019d5e:	6812      	ldr	r2, [r2, #0]
 8019d60:	1052      	asrs	r2, r2, #1
 8019d62:	601a      	str	r2, [r3, #0]
    if (result < 0)
 8019d64:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019d68:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8019d6c:	681b      	ldr	r3, [r3, #0]
 8019d6e:	2b00      	cmp	r3, #0
 8019d70:	da0a      	bge.n	8019d88 <arm_nn_mat_mult_kernel_s8_s16+0x1d88>
        threshold++;
 8019d72:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019d76:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 8019d7a:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8019d7e:	f5a2 723e 	sub.w	r2, r2, #760	; 0x2f8
 8019d82:	6812      	ldr	r2, [r2, #0]
 8019d84:	3201      	adds	r2, #1
 8019d86:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 8019d88:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019d8c:	f5a3 723d 	sub.w	r2, r3, #756	; 0x2f4
 8019d90:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019d94:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 8019d98:	6812      	ldr	r2, [r2, #0]
 8019d9a:	681b      	ldr	r3, [r3, #0]
 8019d9c:	429a      	cmp	r2, r3
 8019d9e:	dd0a      	ble.n	8019db6 <arm_nn_mat_mult_kernel_s8_s16+0x1db6>
        result++;
 8019da0:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019da4:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8019da8:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8019dac:	f5a2 723b 	sub.w	r2, r2, #748	; 0x2ec
 8019db0:	6812      	ldr	r2, [r2, #0]
 8019db2:	3201      	adds	r2, #1
 8019db4:	601a      	str	r2, [r3, #0]
    return result;
 8019db6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019dba:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8019dbe:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8019dc0:	bf00      	nop
 8019dc2:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
        ch_0_out_1 += out_offset;
 8019dc6:	f8d7 2440 	ldr.w	r2, [r7, #1088]	; 0x440
 8019dca:	f8d7 3494 	ldr.w	r3, [r7, #1172]	; 0x494
 8019dce:	4413      	add	r3, r2
 8019dd0:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
        ch_0_out_1 = MAX(ch_0_out_1, activation_min);
 8019dd4:	f9b7 3498 	ldrsh.w	r3, [r7, #1176]	; 0x498
 8019dd8:	f8d7 2440 	ldr.w	r2, [r7, #1088]	; 0x440
 8019ddc:	4293      	cmp	r3, r2
 8019dde:	bfb8      	it	lt
 8019de0:	4613      	movlt	r3, r2
 8019de2:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
        ch_0_out_1 = MIN(ch_0_out_1, activation_max);
 8019de6:	f9b7 349c 	ldrsh.w	r3, [r7, #1180]	; 0x49c
 8019dea:	f8d7 2440 	ldr.w	r2, [r7, #1088]	; 0x440
 8019dee:	4293      	cmp	r3, r2
 8019df0:	bfa8      	it	ge
 8019df2:	4613      	movge	r3, r2
 8019df4:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
        *out_1++ = (q7_t)ch_0_out_1;
 8019df8:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 8019dfc:	1c5a      	adds	r2, r3, #1
 8019dfe:	f8c7 246c 	str.w	r2, [r7, #1132]	; 0x46c
 8019e02:	f8d7 2440 	ldr.w	r2, [r7, #1088]	; 0x440
 8019e06:	b252      	sxtb	r2, r2
 8019e08:	701a      	strb	r2, [r3, #0]
        out_mult++;
 8019e0a:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 8019e0e:	3304      	adds	r3, #4
 8019e10:	f8c7 3490 	str.w	r3, [r7, #1168]	; 0x490
        out_shift++;
 8019e14:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019e18:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 8019e1c:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8019e20:	f5a2 7272 	sub.w	r2, r2, #968	; 0x3c8
 8019e24:	6812      	ldr	r2, [r2, #0]
 8019e26:	3204      	adds	r2, #4
 8019e28:	601a      	str	r2, [r3, #0]
    }

    out_0 += output_ch;
 8019e2a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8019e2e:	f2a3 33c2 	subw	r3, r3, #962	; 0x3c2
 8019e32:	881b      	ldrh	r3, [r3, #0]
 8019e34:	f8d7 24a8 	ldr.w	r2, [r7, #1192]	; 0x4a8
 8019e38:	4413      	add	r3, r2
 8019e3a:	f8c7 34a8 	str.w	r3, [r7, #1192]	; 0x4a8

    /* return the new output pointer with offset */
    return out_0;
 8019e3e:	f8d7 34a8 	ldr.w	r3, [r7, #1192]	; 0x4a8
    (void)output_bias;
    (void)out_0;
    /* To be completed */
    return NULL;
#endif
}
 8019e42:	4618      	mov	r0, r3
 8019e44:	f507 678e 	add.w	r7, r7, #1136	; 0x470
 8019e48:	46bd      	mov	sp, r7
 8019e4a:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8019e4e:	4770      	bx	lr

08019e50 <arm_fully_connected_s8>:
                                  const q7_t *kernel,
                                  const cmsis_nn_dims *bias_dims,
                                  const int32_t *bias,
                                  const cmsis_nn_dims *output_dims,
                                  q7_t *output)
{
 8019e50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019e52:	b093      	sub	sp, #76	; 0x4c
 8019e54:	af0a      	add	r7, sp, #40	; 0x28
 8019e56:	6178      	str	r0, [r7, #20]
 8019e58:	6139      	str	r1, [r7, #16]
 8019e5a:	60fa      	str	r2, [r7, #12]
 8019e5c:	60bb      	str	r3, [r7, #8]
    (void)bias_dims;
    (void)ctx;
    int32_t batch_cnt = input_dims->n;
 8019e5e:	68bb      	ldr	r3, [r7, #8]
 8019e60:	681b      	ldr	r3, [r3, #0]
 8019e62:	61fb      	str	r3, [r7, #28]

    while (batch_cnt)
 8019e64:	e033      	b.n	8019ece <arm_fully_connected_s8+0x7e>
    {
        arm_nn_vec_mat_mult_t_s8(input,
 8019e66:	693b      	ldr	r3, [r7, #16]
 8019e68:	681b      	ldr	r3, [r3, #0]
 8019e6a:	607b      	str	r3, [r7, #4]
 8019e6c:	693a      	ldr	r2, [r7, #16]
 8019e6e:	6852      	ldr	r2, [r2, #4]
 8019e70:	6939      	ldr	r1, [r7, #16]
 8019e72:	6889      	ldr	r1, [r1, #8]
 8019e74:	68f8      	ldr	r0, [r7, #12]
 8019e76:	6800      	ldr	r0, [r0, #0]
 8019e78:	68fc      	ldr	r4, [r7, #12]
 8019e7a:	6864      	ldr	r4, [r4, #4]
 8019e7c:	6bfd      	ldr	r5, [r7, #60]	; 0x3c
 8019e7e:	682d      	ldr	r5, [r5, #0]
 8019e80:	6cfe      	ldr	r6, [r7, #76]	; 0x4c
 8019e82:	68f6      	ldr	r6, [r6, #12]
 8019e84:	693b      	ldr	r3, [r7, #16]
 8019e86:	68db      	ldr	r3, [r3, #12]
 8019e88:	603b      	str	r3, [r7, #0]
 8019e8a:	693b      	ldr	r3, [r7, #16]
 8019e8c:	691b      	ldr	r3, [r3, #16]
 8019e8e:	9308      	str	r3, [sp, #32]
 8019e90:	683b      	ldr	r3, [r7, #0]
 8019e92:	9307      	str	r3, [sp, #28]
 8019e94:	9606      	str	r6, [sp, #24]
 8019e96:	9505      	str	r5, [sp, #20]
 8019e98:	9404      	str	r4, [sp, #16]
 8019e9a:	9003      	str	r0, [sp, #12]
 8019e9c:	9102      	str	r1, [sp, #8]
 8019e9e:	9201      	str	r2, [sp, #4]
 8019ea0:	687b      	ldr	r3, [r7, #4]
 8019ea2:	9300      	str	r3, [sp, #0]
 8019ea4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019ea6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8019ea8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8019eaa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8019eac:	f004 fe94 	bl	801ebd8 <arm_nn_vec_mat_mult_t_s8>
                                 quant_params->shift,
                                 filter_dims->n, /* col_dim or accum_depth */
                                 output_dims->c, /* row_dim or output_depth */
                                 fc_params->activation.min,
                                 fc_params->activation.max);
        input += filter_dims->n;
 8019eb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019eb2:	681b      	ldr	r3, [r3, #0]
 8019eb4:	461a      	mov	r2, r3
 8019eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019eb8:	4413      	add	r3, r2
 8019eba:	63bb      	str	r3, [r7, #56]	; 0x38
        output += output_dims->c;
 8019ebc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019ebe:	68db      	ldr	r3, [r3, #12]
 8019ec0:	461a      	mov	r2, r3
 8019ec2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019ec4:	4413      	add	r3, r2
 8019ec6:	653b      	str	r3, [r7, #80]	; 0x50
        batch_cnt--;
 8019ec8:	69fb      	ldr	r3, [r7, #28]
 8019eca:	3b01      	subs	r3, #1
 8019ecc:	61fb      	str	r3, [r7, #28]
    while (batch_cnt)
 8019ece:	69fb      	ldr	r3, [r7, #28]
 8019ed0:	2b00      	cmp	r3, #0
 8019ed2:	d1c8      	bne.n	8019e66 <arm_fully_connected_s8+0x16>
    }
    return (ARM_MATH_SUCCESS);
 8019ed4:	2300      	movs	r3, #0
}
 8019ed6:	4618      	mov	r0, r3
 8019ed8:	3724      	adds	r7, #36	; 0x24
 8019eda:	46bd      	mov	sp, r7
 8019edc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019ede <arm_fully_connected_s8_get_buffer_size>:

int32_t arm_fully_connected_s8_get_buffer_size(const cmsis_nn_dims *filter_dims)
{
 8019ede:	b480      	push	{r7}
 8019ee0:	b083      	sub	sp, #12
 8019ee2:	af00      	add	r7, sp, #0
 8019ee4:	6078      	str	r0, [r7, #4]
    (void)filter_dims;
    return 0;
 8019ee6:	2300      	movs	r3, #0
}
 8019ee8:	4618      	mov	r0, r3
 8019eea:	370c      	adds	r7, #12
 8019eec:	46bd      	mov	sp, r7
 8019eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ef2:	4770      	bx	lr

08019ef4 <arm_nn_mat_mult_nt_t_s8>:
                                   const int32_t rhs_cols,
                                   const int32_t lhs_offset,
                                   const int32_t dst_offset,
                                   const int32_t activation_min,
                                   const int32_t activation_max)
{
 8019ef4:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8019ef8:	f6ad 2dd8 	subw	sp, sp, #2776	; 0xad8
 8019efc:	af00      	add	r7, sp, #0
 8019efe:	f607 24d8 	addw	r4, r7, #2776	; 0xad8
 8019f02:	f6a4 2404 	subw	r4, r4, #2564	; 0xa04
 8019f06:	6020      	str	r0, [r4, #0]
 8019f08:	f607 20d8 	addw	r0, r7, #2776	; 0xad8
 8019f0c:	f6a0 2008 	subw	r0, r0, #2568	; 0xa08
 8019f10:	6001      	str	r1, [r0, #0]
 8019f12:	f607 21d8 	addw	r1, r7, #2776	; 0xad8
 8019f16:	f6a1 210c 	subw	r1, r1, #2572	; 0xa0c
 8019f1a:	600a      	str	r2, [r1, #0]
 8019f1c:	f607 22d8 	addw	r2, r7, #2776	; 0xad8
 8019f20:	f5a2 6221 	sub.w	r2, r2, #2576	; 0xa10
 8019f24:	6013      	str	r3, [r2, #0]
#if defined(ARM_MATH_DSP)
    const int32_t off0 = rhs_cols - 4;
 8019f26:	f8d7 3b08 	ldr.w	r3, [r7, #2824]	; 0xb08
 8019f2a:	3b04      	subs	r3, #4
 8019f2c:	f8c7 3a84 	str.w	r3, [r7, #2692]	; 0xa84

    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 8019f30:	2300      	movs	r3, #0
 8019f32:	f8c7 3ad4 	str.w	r3, [r7, #2772]	; 0xad4
 8019f36:	f004 bc7b 	b.w	801e830 <arm_nn_mat_mult_nt_t_s8+0x493c>
    {
        const q7_t *lhs_ptr = &lhs[0];
 8019f3a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019f3e:	f6a3 1248 	subw	r2, r3, #2376	; 0x948
 8019f42:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019f46:	f6a3 2304 	subw	r3, r3, #2564	; 0xa04
 8019f4a:	681b      	ldr	r3, [r3, #0]
 8019f4c:	6013      	str	r3, [r2, #0]
        q7_t *dst_ptr = &dst[0];
 8019f4e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019f52:	f5a3 6321 	sub.w	r3, r3, #2576	; 0xa10
 8019f56:	681b      	ldr	r3, [r3, #0]
 8019f58:	f8c7 3ad0 	str.w	r3, [r7, #2768]	; 0xad0

        q31_t lhs_offset_contribution0 = 0;
 8019f5c:	2300      	movs	r3, #0
 8019f5e:	f8c7 3acc 	str.w	r3, [r7, #2764]	; 0xacc
        q31_t lhs_offset_contribution1 = 0;
 8019f62:	2300      	movs	r3, #0
 8019f64:	f8c7 3ac8 	str.w	r3, [r7, #2760]	; 0xac8

        for (int32_t x = 0; x < rhs_cols; ++x)
 8019f68:	2300      	movs	r3, #0
 8019f6a:	f8c7 3ac4 	str.w	r3, [r7, #2756]	; 0xac4
 8019f6e:	e028      	b.n	8019fc2 <arm_nn_mat_mult_nt_t_s8+0xce>
        {
            lhs_offset_contribution0 += rhs[x];
 8019f70:	f8d7 2ac4 	ldr.w	r2, [r7, #2756]	; 0xac4
 8019f74:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019f78:	f6a3 2308 	subw	r3, r3, #2568	; 0xa08
 8019f7c:	681b      	ldr	r3, [r3, #0]
 8019f7e:	4413      	add	r3, r2
 8019f80:	f993 3000 	ldrsb.w	r3, [r3]
 8019f84:	461a      	mov	r2, r3
 8019f86:	f8d7 3acc 	ldr.w	r3, [r7, #2764]	; 0xacc
 8019f8a:	4413      	add	r3, r2
 8019f8c:	f8c7 3acc 	str.w	r3, [r7, #2764]	; 0xacc
            lhs_offset_contribution1 += rhs[x + rhs_cols];
 8019f90:	f8d7 2ac4 	ldr.w	r2, [r7, #2756]	; 0xac4
 8019f94:	f8d7 3b08 	ldr.w	r3, [r7, #2824]	; 0xb08
 8019f98:	4413      	add	r3, r2
 8019f9a:	461a      	mov	r2, r3
 8019f9c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019fa0:	f6a3 2308 	subw	r3, r3, #2568	; 0xa08
 8019fa4:	681b      	ldr	r3, [r3, #0]
 8019fa6:	4413      	add	r3, r2
 8019fa8:	f993 3000 	ldrsb.w	r3, [r3]
 8019fac:	461a      	mov	r2, r3
 8019fae:	f8d7 3ac8 	ldr.w	r3, [r7, #2760]	; 0xac8
 8019fb2:	4413      	add	r3, r2
 8019fb4:	f8c7 3ac8 	str.w	r3, [r7, #2760]	; 0xac8
        for (int32_t x = 0; x < rhs_cols; ++x)
 8019fb8:	f8d7 3ac4 	ldr.w	r3, [r7, #2756]	; 0xac4
 8019fbc:	3301      	adds	r3, #1
 8019fbe:	f8c7 3ac4 	str.w	r3, [r7, #2756]	; 0xac4
 8019fc2:	f8d7 2ac4 	ldr.w	r2, [r7, #2756]	; 0xac4
 8019fc6:	f8d7 3b08 	ldr.w	r3, [r7, #2824]	; 0xb08
 8019fca:	429a      	cmp	r2, r3
 8019fcc:	dbd0      	blt.n	8019f70 <arm_nn_mat_mult_nt_t_s8+0x7c>
        }

        lhs_offset_contribution0 *= lhs_offset;
 8019fce:	f8d7 2acc 	ldr.w	r2, [r7, #2764]	; 0xacc
 8019fd2:	f8d7 3b0c 	ldr.w	r3, [r7, #2828]	; 0xb0c
 8019fd6:	fb02 f303 	mul.w	r3, r2, r3
 8019fda:	f8c7 3acc 	str.w	r3, [r7, #2764]	; 0xacc
        lhs_offset_contribution1 *= lhs_offset;
 8019fde:	f8d7 2ac8 	ldr.w	r2, [r7, #2760]	; 0xac8
 8019fe2:	f8d7 3b0c 	ldr.w	r3, [r7, #2828]	; 0xb0c
 8019fe6:	fb02 f303 	mul.w	r3, r2, r3
 8019fea:	f8c7 3ac8 	str.w	r3, [r7, #2760]	; 0xac8
        if (bias)
 8019fee:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8019ff2:	f6a3 230c 	subw	r3, r3, #2572	; 0xa0c
 8019ff6:	681b      	ldr	r3, [r3, #0]
 8019ff8:	2b00      	cmp	r3, #0
 8019ffa:	d01e      	beq.n	801a03a <arm_nn_mat_mult_nt_t_s8+0x146>
        {
            lhs_offset_contribution0 += bias[rhs_rows_idx];
 8019ffc:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	; 0xad4
 801a000:	009a      	lsls	r2, r3, #2
 801a002:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a006:	f6a3 230c 	subw	r3, r3, #2572	; 0xa0c
 801a00a:	681b      	ldr	r3, [r3, #0]
 801a00c:	4413      	add	r3, r2
 801a00e:	681a      	ldr	r2, [r3, #0]
 801a010:	f8d7 3acc 	ldr.w	r3, [r7, #2764]	; 0xacc
 801a014:	4413      	add	r3, r2
 801a016:	f8c7 3acc 	str.w	r3, [r7, #2764]	; 0xacc
            lhs_offset_contribution1 += bias[rhs_rows_idx + 1];
 801a01a:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	; 0xad4
 801a01e:	3301      	adds	r3, #1
 801a020:	009a      	lsls	r2, r3, #2
 801a022:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a026:	f6a3 230c 	subw	r3, r3, #2572	; 0xa0c
 801a02a:	681b      	ldr	r3, [r3, #0]
 801a02c:	4413      	add	r3, r2
 801a02e:	681a      	ldr	r2, [r3, #0]
 801a030:	f8d7 3ac8 	ldr.w	r3, [r7, #2760]	; 0xac8
 801a034:	4413      	add	r3, r2
 801a036:	f8c7 3ac8 	str.w	r3, [r7, #2760]	; 0xac8
        }

        int32_t lhs_rows_idx = lhs_rows >> 1;
 801a03a:	f8d7 3b00 	ldr.w	r3, [r7, #2816]	; 0xb00
 801a03e:	105b      	asrs	r3, r3, #1
 801a040:	f8c7 3ac0 	str.w	r3, [r7, #2752]	; 0xac0

        while (lhs_rows_idx)
 801a044:	f002 bdd2 	b.w	801cbec <arm_nn_mat_mult_nt_t_s8+0x2cf8>
        {
            const q7_t *rhs_ptr = &rhs[0];
 801a048:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a04c:	f6a3 124c 	subw	r2, r3, #2380	; 0x94c
 801a050:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a054:	f6a3 2308 	subw	r3, r3, #2568	; 0xa08
 801a058:	681b      	ldr	r3, [r3, #0]
 801a05a:	6013      	str	r3, [r2, #0]

            q31_t res00 = lhs_offset_contribution0;
 801a05c:	f8d7 3acc 	ldr.w	r3, [r7, #2764]	; 0xacc
 801a060:	f8c7 3abc 	str.w	r3, [r7, #2748]	; 0xabc
            q31_t res01 = lhs_offset_contribution1;
 801a064:	f8d7 3ac8 	ldr.w	r3, [r7, #2760]	; 0xac8
 801a068:	f8c7 3ab8 	str.w	r3, [r7, #2744]	; 0xab8
            q31_t res10 = lhs_offset_contribution0;
 801a06c:	f8d7 3acc 	ldr.w	r3, [r7, #2764]	; 0xacc
 801a070:	f8c7 3ab4 	str.w	r3, [r7, #2740]	; 0xab4
            q31_t res11 = lhs_offset_contribution1;
 801a074:	f8d7 3ac8 	ldr.w	r3, [r7, #2760]	; 0xac8
 801a078:	f8c7 3ab0 	str.w	r3, [r7, #2736]	; 0xab0

            int32_t rhs_cols_idx = 0;
 801a07c:	2300      	movs	r3, #0
 801a07e:	f8c7 3aac 	str.w	r3, [r7, #2732]	; 0xaac

            q31_t val0, val1, val2, val3, val4, val5;

            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 801a082:	f001 bfee 	b.w	801c062 <arm_nn_mat_mult_nt_t_s8+0x216e>
 801a086:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a08a:	f2a3 5214 	subw	r2, r3, #1300	; 0x514
 801a08e:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 801a092:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801a094:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a098:	f2a3 5314 	subw	r3, r3, #1300	; 0x514
 801a09c:	681b      	ldr	r3, [r3, #0]
 801a09e:	681b      	ldr	r3, [r3, #0]
 801a0a0:	681b      	ldr	r3, [r3, #0]
 801a0a2:	461a      	mov	r2, r3
 801a0a4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a0a8:	f6a3 1374 	subw	r3, r3, #2420	; 0x974
 801a0ac:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801a0ae:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a0b2:	f2a3 5314 	subw	r3, r3, #1300	; 0x514
 801a0b6:	681b      	ldr	r3, [r3, #0]
 801a0b8:	681b      	ldr	r3, [r3, #0]
 801a0ba:	1d1a      	adds	r2, r3, #4
 801a0bc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a0c0:	f2a3 5314 	subw	r3, r3, #1300	; 0x514
 801a0c4:	681b      	ldr	r3, [r3, #0]
 801a0c6:	601a      	str	r2, [r3, #0]
    return (val);
 801a0c8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a0cc:	f6a3 1374 	subw	r3, r3, #2420	; 0x974
 801a0d0:	681b      	ldr	r3, [r3, #0]
            {
                val1 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 801a0d2:	f8c7 3a58 	str.w	r3, [r7, #2648]	; 0xa58
                val2 = __SXTB16(val1);
 801a0d6:	f8d7 2a58 	ldr.w	r2, [r7, #2648]	; 0xa58
 801a0da:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a0de:	f2a3 530c 	subw	r3, r3, #1292	; 0x50c
 801a0e2:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801a0e4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a0e8:	f2a3 530c 	subw	r3, r3, #1292	; 0x50c
 801a0ec:	681b      	ldr	r3, [r3, #0]
 801a0ee:	fa2f f283 	sxtb16	r2, r3
 801a0f2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a0f6:	f5a3 63a2 	sub.w	r3, r3, #1296	; 0x510
 801a0fa:	601a      	str	r2, [r3, #0]
  return(result);
 801a0fc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a100:	f5a3 63a2 	sub.w	r3, r3, #1296	; 0x510
 801a104:	681b      	ldr	r3, [r3, #0]
 801a106:	f8c7 3a54 	str.w	r3, [r7, #2644]	; 0xa54
 801a10a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a10e:	f5a3 62a1 	sub.w	r2, r3, #1288	; 0x508
 801a112:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 801a116:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801a118:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a11c:	f5a3 63a1 	sub.w	r3, r3, #1288	; 0x508
 801a120:	681b      	ldr	r3, [r3, #0]
 801a122:	681b      	ldr	r3, [r3, #0]
 801a124:	681b      	ldr	r3, [r3, #0]
 801a126:	461a      	mov	r2, r3
 801a128:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a12c:	f6a3 1378 	subw	r3, r3, #2424	; 0x978
 801a130:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801a132:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a136:	f5a3 63a1 	sub.w	r3, r3, #1288	; 0x508
 801a13a:	681b      	ldr	r3, [r3, #0]
 801a13c:	681b      	ldr	r3, [r3, #0]
 801a13e:	1d1a      	adds	r2, r3, #4
 801a140:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a144:	f5a3 63a1 	sub.w	r3, r3, #1288	; 0x508
 801a148:	681b      	ldr	r3, [r3, #0]
 801a14a:	601a      	str	r2, [r3, #0]
    return (val);
 801a14c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a150:	f6a3 1378 	subw	r3, r3, #2424	; 0x978
 801a154:	681b      	ldr	r3, [r3, #0]
                val0 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 801a156:	f8c7 3a50 	str.w	r3, [r7, #2640]	; 0xa50
                val3 = __SXTB16(val0);
 801a15a:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 801a15e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a162:	f5a3 63a0 	sub.w	r3, r3, #1280	; 0x500
 801a166:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801a168:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a16c:	f5a3 63a0 	sub.w	r3, r3, #1280	; 0x500
 801a170:	681b      	ldr	r3, [r3, #0]
 801a172:	fa2f f283 	sxtb16	r2, r3
 801a176:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a17a:	f2a3 5304 	subw	r3, r3, #1284	; 0x504
 801a17e:	601a      	str	r2, [r3, #0]
  return(result);
 801a180:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a184:	f2a3 5304 	subw	r3, r3, #1284	; 0x504
 801a188:	681b      	ldr	r3, [r3, #0]
 801a18a:	f8c7 3a4c 	str.w	r3, [r7, #2636]	; 0xa4c
                val4 = arm_nn_read_q7x4((const q7_t *)&rhs_ptr[off0]);
 801a18e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a192:	f6a3 134c 	subw	r3, r3, #2380	; 0x94c
 801a196:	681a      	ldr	r2, [r3, #0]
 801a198:	f8d7 3a84 	ldr.w	r3, [r7, #2692]	; 0xa84
 801a19c:	441a      	add	r2, r3
 801a19e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a1a2:	f2a3 43fc 	subw	r3, r3, #1276	; 0x4fc
 801a1a6:	601a      	str	r2, [r3, #0]
 801a1a8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a1ac:	f2a3 43fc 	subw	r3, r3, #1276	; 0x4fc
 801a1b0:	681b      	ldr	r3, [r3, #0]
 801a1b2:	681b      	ldr	r3, [r3, #0]
 801a1b4:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801a1b6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a1ba:	f6a3 137c 	subw	r3, r3, #2428	; 0x97c
 801a1be:	601a      	str	r2, [r3, #0]
    return (val);
 801a1c0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a1c4:	f6a3 137c 	subw	r3, r3, #2428	; 0x97c
 801a1c8:	681b      	ldr	r3, [r3, #0]
 801a1ca:	f8c7 3a48 	str.w	r3, [r7, #2632]	; 0xa48
                val1 = __SXTB16_RORn(val1, 8);
 801a1ce:	f8d7 2a58 	ldr.w	r2, [r7, #2648]	; 0xa58
 801a1d2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a1d6:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 801a1da:	601a      	str	r2, [r3, #0]
 801a1dc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a1e0:	f2a3 42e4 	subw	r2, r3, #1252	; 0x4e4
 801a1e4:	2308      	movs	r3, #8
 801a1e6:	6013      	str	r3, [r2, #0]
 801a1e8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a1ec:	f5a3 629d 	sub.w	r2, r3, #1256	; 0x4e8
 801a1f0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a1f4:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 801a1f8:	681b      	ldr	r3, [r3, #0]
 801a1fa:	6013      	str	r3, [r2, #0]
 801a1fc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a200:	f2a3 42ec 	subw	r2, r3, #1260	; 0x4ec
 801a204:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a208:	f2a3 43e4 	subw	r3, r3, #1252	; 0x4e4
 801a20c:	681b      	ldr	r3, [r3, #0]
 801a20e:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801a210:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a214:	f2a3 42ec 	subw	r2, r3, #1260	; 0x4ec
 801a218:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a21c:	f2a3 43ec 	subw	r3, r3, #1260	; 0x4ec
 801a220:	681b      	ldr	r3, [r3, #0]
 801a222:	f003 031f 	and.w	r3, r3, #31
 801a226:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801a228:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a22c:	f2a3 43ec 	subw	r3, r3, #1260	; 0x4ec
 801a230:	681b      	ldr	r3, [r3, #0]
 801a232:	2b00      	cmp	r3, #0
 801a234:	d105      	bne.n	801a242 <arm_nn_mat_mult_nt_t_s8+0x34e>
    return op1;
 801a236:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a23a:	f5a3 639d 	sub.w	r3, r3, #1256	; 0x4e8
 801a23e:	681a      	ldr	r2, [r3, #0]
 801a240:	e00a      	b.n	801a258 <arm_nn_mat_mult_nt_t_s8+0x364>
  return (op1 >> op2) | (op1 << (32U - op2));
 801a242:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a246:	f5a3 629d 	sub.w	r2, r3, #1256	; 0x4e8
 801a24a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a24e:	f2a3 43ec 	subw	r3, r3, #1260	; 0x4ec
 801a252:	6812      	ldr	r2, [r2, #0]
 801a254:	681b      	ldr	r3, [r3, #0]
 801a256:	41da      	rors	r2, r3
 801a258:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a25c:	f5a3 639e 	sub.w	r3, r3, #1264	; 0x4f0
 801a260:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801a262:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a266:	f5a3 639e 	sub.w	r3, r3, #1264	; 0x4f0
 801a26a:	681b      	ldr	r3, [r3, #0]
 801a26c:	fa2f f283 	sxtb16	r2, r3
 801a270:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a274:	f2a3 43f4 	subw	r3, r3, #1268	; 0x4f4
 801a278:	601a      	str	r2, [r3, #0]
  return(result);
 801a27a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a27e:	f2a3 43f4 	subw	r3, r3, #1268	; 0x4f4
 801a282:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801a284:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a288:	f5a3 639f 	sub.w	r3, r3, #1272	; 0x4f8
 801a28c:	601a      	str	r2, [r3, #0]
  return result;
 801a28e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a292:	f5a3 639f 	sub.w	r3, r3, #1272	; 0x4f8
 801a296:	681b      	ldr	r3, [r3, #0]
 801a298:	f8c7 3a58 	str.w	r3, [r7, #2648]	; 0xa58
                val0 = __SXTB16_RORn(val0, 8);
 801a29c:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 801a2a0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a2a4:	f2a3 43c4 	subw	r3, r3, #1220	; 0x4c4
 801a2a8:	601a      	str	r2, [r3, #0]
 801a2aa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a2ae:	f5a3 6299 	sub.w	r2, r3, #1224	; 0x4c8
 801a2b2:	2308      	movs	r3, #8
 801a2b4:	6013      	str	r3, [r2, #0]
 801a2b6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a2ba:	f2a3 42cc 	subw	r2, r3, #1228	; 0x4cc
 801a2be:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a2c2:	f2a3 43c4 	subw	r3, r3, #1220	; 0x4c4
 801a2c6:	681b      	ldr	r3, [r3, #0]
 801a2c8:	6013      	str	r3, [r2, #0]
 801a2ca:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a2ce:	f5a3 629a 	sub.w	r2, r3, #1232	; 0x4d0
 801a2d2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a2d6:	f5a3 6399 	sub.w	r3, r3, #1224	; 0x4c8
 801a2da:	681b      	ldr	r3, [r3, #0]
 801a2dc:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801a2de:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a2e2:	f5a3 629a 	sub.w	r2, r3, #1232	; 0x4d0
 801a2e6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a2ea:	f5a3 639a 	sub.w	r3, r3, #1232	; 0x4d0
 801a2ee:	681b      	ldr	r3, [r3, #0]
 801a2f0:	f003 031f 	and.w	r3, r3, #31
 801a2f4:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801a2f6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a2fa:	f5a3 639a 	sub.w	r3, r3, #1232	; 0x4d0
 801a2fe:	681b      	ldr	r3, [r3, #0]
 801a300:	2b00      	cmp	r3, #0
 801a302:	d105      	bne.n	801a310 <arm_nn_mat_mult_nt_t_s8+0x41c>
    return op1;
 801a304:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a308:	f2a3 43cc 	subw	r3, r3, #1228	; 0x4cc
 801a30c:	681a      	ldr	r2, [r3, #0]
 801a30e:	e00a      	b.n	801a326 <arm_nn_mat_mult_nt_t_s8+0x432>
  return (op1 >> op2) | (op1 << (32U - op2));
 801a310:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a314:	f2a3 42cc 	subw	r2, r3, #1228	; 0x4cc
 801a318:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a31c:	f5a3 639a 	sub.w	r3, r3, #1232	; 0x4d0
 801a320:	6812      	ldr	r2, [r2, #0]
 801a322:	681b      	ldr	r3, [r3, #0]
 801a324:	41da      	rors	r2, r3
 801a326:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a32a:	f2a3 43d4 	subw	r3, r3, #1236	; 0x4d4
 801a32e:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801a330:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a334:	f2a3 43d4 	subw	r3, r3, #1236	; 0x4d4
 801a338:	681b      	ldr	r3, [r3, #0]
 801a33a:	fa2f f283 	sxtb16	r2, r3
 801a33e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a342:	f5a3 639b 	sub.w	r3, r3, #1240	; 0x4d8
 801a346:	601a      	str	r2, [r3, #0]
  return(result);
 801a348:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a34c:	f5a3 639b 	sub.w	r3, r3, #1240	; 0x4d8
 801a350:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801a352:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a356:	f2a3 43dc 	subw	r3, r3, #1244	; 0x4dc
 801a35a:	601a      	str	r2, [r3, #0]
  return result;
 801a35c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a360:	f2a3 43dc 	subw	r3, r3, #1244	; 0x4dc
 801a364:	681b      	ldr	r3, [r3, #0]
 801a366:	f8c7 3a50 	str.w	r3, [r7, #2640]	; 0xa50

                // 4 x MAC res00, res01
                res00 = __SMLAD(val3, val2, res00);
 801a36a:	f8d7 2a4c 	ldr.w	r2, [r7, #2636]	; 0xa4c
 801a36e:	f8d7 1a54 	ldr.w	r1, [r7, #2644]	; 0xa54
 801a372:	f8d7 0abc 	ldr.w	r0, [r7, #2748]	; 0xabc
 801a376:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a37a:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 801a37e:	601a      	str	r2, [r3, #0]
 801a380:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a384:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 801a388:	6019      	str	r1, [r3, #0]
 801a38a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a38e:	f2a3 43bc 	subw	r3, r3, #1212	; 0x4bc
 801a392:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801a394:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a398:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 801a39c:	6819      	ldr	r1, [r3, #0]
 801a39e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a3a2:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 801a3a6:	681a      	ldr	r2, [r3, #0]
 801a3a8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a3ac:	f2a3 43bc 	subw	r3, r3, #1212	; 0x4bc
 801a3b0:	681b      	ldr	r3, [r3, #0]
 801a3b2:	fb21 3202 	smlad	r2, r1, r2, r3
 801a3b6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a3ba:	f5a3 6398 	sub.w	r3, r3, #1216	; 0x4c0
 801a3be:	601a      	str	r2, [r3, #0]
  return(result);
 801a3c0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a3c4:	f5a3 6398 	sub.w	r3, r3, #1216	; 0x4c0
 801a3c8:	681b      	ldr	r3, [r3, #0]
 801a3ca:	f8c7 3abc 	str.w	r3, [r7, #2748]	; 0xabc
                val5 = __SXTB16(val4);
 801a3ce:	f8d7 2a48 	ldr.w	r2, [r7, #2632]	; 0xa48
 801a3d2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a3d6:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 801a3da:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801a3dc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a3e0:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 801a3e4:	681b      	ldr	r3, [r3, #0]
 801a3e6:	fa2f f283 	sxtb16	r2, r3
 801a3ea:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a3ee:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 801a3f2:	601a      	str	r2, [r3, #0]
  return(result);
 801a3f4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a3f8:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 801a3fc:	681b      	ldr	r3, [r3, #0]
 801a3fe:	f8c7 3a44 	str.w	r3, [r7, #2628]	; 0xa44
                res00 = __SMLAD(val0, val1, res00);
 801a402:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 801a406:	f8d7 1a58 	ldr.w	r1, [r7, #2648]	; 0xa58
 801a40a:	f8d7 0abc 	ldr.w	r0, [r7, #2748]	; 0xabc
 801a40e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a412:	f2a3 439c 	subw	r3, r3, #1180	; 0x49c
 801a416:	601a      	str	r2, [r3, #0]
 801a418:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a41c:	f5a3 6394 	sub.w	r3, r3, #1184	; 0x4a0
 801a420:	6019      	str	r1, [r3, #0]
 801a422:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a426:	f2a3 43a4 	subw	r3, r3, #1188	; 0x4a4
 801a42a:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801a42c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a430:	f2a3 439c 	subw	r3, r3, #1180	; 0x49c
 801a434:	6819      	ldr	r1, [r3, #0]
 801a436:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a43a:	f5a3 6394 	sub.w	r3, r3, #1184	; 0x4a0
 801a43e:	681a      	ldr	r2, [r3, #0]
 801a440:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a444:	f2a3 43a4 	subw	r3, r3, #1188	; 0x4a4
 801a448:	681b      	ldr	r3, [r3, #0]
 801a44a:	fb21 3202 	smlad	r2, r1, r2, r3
 801a44e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a452:	f5a3 6395 	sub.w	r3, r3, #1192	; 0x4a8
 801a456:	601a      	str	r2, [r3, #0]
  return(result);
 801a458:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a45c:	f5a3 6395 	sub.w	r3, r3, #1192	; 0x4a8
 801a460:	681b      	ldr	r3, [r3, #0]
 801a462:	f8c7 3abc 	str.w	r3, [r7, #2748]	; 0xabc
                val4 = __SXTB16_RORn(val4, 8);
 801a466:	f8d7 2a48 	ldr.w	r2, [r7, #2632]	; 0xa48
 801a46a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a46e:	f5a3 6390 	sub.w	r3, r3, #1152	; 0x480
 801a472:	601a      	str	r2, [r3, #0]
 801a474:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a478:	f2a3 4284 	subw	r2, r3, #1156	; 0x484
 801a47c:	2308      	movs	r3, #8
 801a47e:	6013      	str	r3, [r2, #0]
 801a480:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a484:	f5a3 6291 	sub.w	r2, r3, #1160	; 0x488
 801a488:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a48c:	f5a3 6390 	sub.w	r3, r3, #1152	; 0x480
 801a490:	681b      	ldr	r3, [r3, #0]
 801a492:	6013      	str	r3, [r2, #0]
 801a494:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a498:	f2a3 428c 	subw	r2, r3, #1164	; 0x48c
 801a49c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a4a0:	f2a3 4384 	subw	r3, r3, #1156	; 0x484
 801a4a4:	681b      	ldr	r3, [r3, #0]
 801a4a6:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801a4a8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a4ac:	f2a3 428c 	subw	r2, r3, #1164	; 0x48c
 801a4b0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a4b4:	f2a3 438c 	subw	r3, r3, #1164	; 0x48c
 801a4b8:	681b      	ldr	r3, [r3, #0]
 801a4ba:	f003 031f 	and.w	r3, r3, #31
 801a4be:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801a4c0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a4c4:	f2a3 438c 	subw	r3, r3, #1164	; 0x48c
 801a4c8:	681b      	ldr	r3, [r3, #0]
 801a4ca:	2b00      	cmp	r3, #0
 801a4cc:	d105      	bne.n	801a4da <arm_nn_mat_mult_nt_t_s8+0x5e6>
    return op1;
 801a4ce:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a4d2:	f5a3 6391 	sub.w	r3, r3, #1160	; 0x488
 801a4d6:	681a      	ldr	r2, [r3, #0]
 801a4d8:	e00a      	b.n	801a4f0 <arm_nn_mat_mult_nt_t_s8+0x5fc>
  return (op1 >> op2) | (op1 << (32U - op2));
 801a4da:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a4de:	f5a3 6291 	sub.w	r2, r3, #1160	; 0x488
 801a4e2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a4e6:	f2a3 438c 	subw	r3, r3, #1164	; 0x48c
 801a4ea:	6812      	ldr	r2, [r2, #0]
 801a4ec:	681b      	ldr	r3, [r3, #0]
 801a4ee:	41da      	rors	r2, r3
 801a4f0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a4f4:	f5a3 6392 	sub.w	r3, r3, #1168	; 0x490
 801a4f8:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801a4fa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a4fe:	f5a3 6392 	sub.w	r3, r3, #1168	; 0x490
 801a502:	681b      	ldr	r3, [r3, #0]
 801a504:	fa2f f283 	sxtb16	r2, r3
 801a508:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a50c:	f2a3 4394 	subw	r3, r3, #1172	; 0x494
 801a510:	601a      	str	r2, [r3, #0]
  return(result);
 801a512:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a516:	f2a3 4394 	subw	r3, r3, #1172	; 0x494
 801a51a:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801a51c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a520:	f5a3 6393 	sub.w	r3, r3, #1176	; 0x498
 801a524:	601a      	str	r2, [r3, #0]
  return result;
 801a526:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a52a:	f5a3 6393 	sub.w	r3, r3, #1176	; 0x498
 801a52e:	681b      	ldr	r3, [r3, #0]
 801a530:	f8c7 3a48 	str.w	r3, [r7, #2632]	; 0xa48
                res01 = __SMLAD(val3, val5, res01);
 801a534:	f8d7 2a4c 	ldr.w	r2, [r7, #2636]	; 0xa4c
 801a538:	f8d7 1a44 	ldr.w	r1, [r7, #2628]	; 0xa44
 801a53c:	f8d7 0ab8 	ldr.w	r0, [r7, #2744]	; 0xab8
 801a540:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a544:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 801a548:	601a      	str	r2, [r3, #0]
 801a54a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a54e:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 801a552:	6019      	str	r1, [r3, #0]
 801a554:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a558:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 801a55c:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801a55e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a562:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 801a566:	6819      	ldr	r1, [r3, #0]
 801a568:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a56c:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 801a570:	681a      	ldr	r2, [r3, #0]
 801a572:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a576:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 801a57a:	681b      	ldr	r3, [r3, #0]
 801a57c:	fb21 3202 	smlad	r2, r1, r2, r3
 801a580:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a584:	f2a3 437c 	subw	r3, r3, #1148	; 0x47c
 801a588:	601a      	str	r2, [r3, #0]
  return(result);
 801a58a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a58e:	f2a3 437c 	subw	r3, r3, #1148	; 0x47c
 801a592:	681b      	ldr	r3, [r3, #0]
 801a594:	f8c7 3ab8 	str.w	r3, [r7, #2744]	; 0xab8
                res01 = __SMLAD(val0, val4, res01);
 801a598:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 801a59c:	f8d7 1a48 	ldr.w	r1, [r7, #2632]	; 0xa48
 801a5a0:	f8d7 0ab8 	ldr.w	r0, [r7, #2744]	; 0xab8
 801a5a4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a5a8:	f5a3 638c 	sub.w	r3, r3, #1120	; 0x460
 801a5ac:	601a      	str	r2, [r3, #0]
 801a5ae:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a5b2:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 801a5b6:	6019      	str	r1, [r3, #0]
 801a5b8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a5bc:	f5a3 638d 	sub.w	r3, r3, #1128	; 0x468
 801a5c0:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801a5c2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a5c6:	f5a3 638c 	sub.w	r3, r3, #1120	; 0x460
 801a5ca:	6819      	ldr	r1, [r3, #0]
 801a5cc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a5d0:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 801a5d4:	681a      	ldr	r2, [r3, #0]
 801a5d6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a5da:	f5a3 638d 	sub.w	r3, r3, #1128	; 0x468
 801a5de:	681b      	ldr	r3, [r3, #0]
 801a5e0:	fb21 3202 	smlad	r2, r1, r2, r3
 801a5e4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a5e8:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 801a5ec:	601a      	str	r2, [r3, #0]
  return(result);
 801a5ee:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a5f2:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 801a5f6:	681b      	ldr	r3, [r3, #0]
 801a5f8:	f8c7 3ab8 	str.w	r3, [r7, #2744]	; 0xab8

                // 4 x MAC res10, res11
                val0 = arm_nn_read_q7x4((const q7_t *)&lhs_ptr[off0]);
 801a5fc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a600:	f6a3 1348 	subw	r3, r3, #2376	; 0x948
 801a604:	681a      	ldr	r2, [r3, #0]
 801a606:	f8d7 3a84 	ldr.w	r3, [r7, #2692]	; 0xa84
 801a60a:	441a      	add	r2, r3
 801a60c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a610:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 801a614:	601a      	str	r2, [r3, #0]
 801a616:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a61a:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 801a61e:	681b      	ldr	r3, [r3, #0]
 801a620:	681b      	ldr	r3, [r3, #0]
 801a622:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801a624:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a628:	f5a3 6318 	sub.w	r3, r3, #2432	; 0x980
 801a62c:	601a      	str	r2, [r3, #0]
    return (val);
 801a62e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a632:	f5a3 6318 	sub.w	r3, r3, #2432	; 0x980
 801a636:	681b      	ldr	r3, [r3, #0]
 801a638:	f8c7 3a50 	str.w	r3, [r7, #2640]	; 0xa50
                val3 = __SXTB16(val0);
 801a63c:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 801a640:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a644:	f2a3 4354 	subw	r3, r3, #1108	; 0x454
 801a648:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801a64a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a64e:	f2a3 4354 	subw	r3, r3, #1108	; 0x454
 801a652:	681b      	ldr	r3, [r3, #0]
 801a654:	fa2f f283 	sxtb16	r2, r3
 801a658:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a65c:	f5a3 638b 	sub.w	r3, r3, #1112	; 0x458
 801a660:	601a      	str	r2, [r3, #0]
  return(result);
 801a662:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a666:	f5a3 638b 	sub.w	r3, r3, #1112	; 0x458
 801a66a:	681b      	ldr	r3, [r3, #0]
 801a66c:	f8c7 3a4c 	str.w	r3, [r7, #2636]	; 0xa4c
                val0 = __SXTB16_RORn(val0, 8);
 801a670:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 801a674:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a678:	f5a3 6387 	sub.w	r3, r3, #1080	; 0x438
 801a67c:	601a      	str	r2, [r3, #0]
 801a67e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a682:	f2a3 423c 	subw	r2, r3, #1084	; 0x43c
 801a686:	2308      	movs	r3, #8
 801a688:	6013      	str	r3, [r2, #0]
 801a68a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a68e:	f5a3 6288 	sub.w	r2, r3, #1088	; 0x440
 801a692:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a696:	f5a3 6387 	sub.w	r3, r3, #1080	; 0x438
 801a69a:	681b      	ldr	r3, [r3, #0]
 801a69c:	6013      	str	r3, [r2, #0]
 801a69e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a6a2:	f2a3 4244 	subw	r2, r3, #1092	; 0x444
 801a6a6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a6aa:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 801a6ae:	681b      	ldr	r3, [r3, #0]
 801a6b0:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801a6b2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a6b6:	f2a3 4244 	subw	r2, r3, #1092	; 0x444
 801a6ba:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a6be:	f2a3 4344 	subw	r3, r3, #1092	; 0x444
 801a6c2:	681b      	ldr	r3, [r3, #0]
 801a6c4:	f003 031f 	and.w	r3, r3, #31
 801a6c8:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801a6ca:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a6ce:	f2a3 4344 	subw	r3, r3, #1092	; 0x444
 801a6d2:	681b      	ldr	r3, [r3, #0]
 801a6d4:	2b00      	cmp	r3, #0
 801a6d6:	d105      	bne.n	801a6e4 <arm_nn_mat_mult_nt_t_s8+0x7f0>
    return op1;
 801a6d8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a6dc:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 801a6e0:	681a      	ldr	r2, [r3, #0]
 801a6e2:	e00a      	b.n	801a6fa <arm_nn_mat_mult_nt_t_s8+0x806>
  return (op1 >> op2) | (op1 << (32U - op2));
 801a6e4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a6e8:	f5a3 6288 	sub.w	r2, r3, #1088	; 0x440
 801a6ec:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a6f0:	f2a3 4344 	subw	r3, r3, #1092	; 0x444
 801a6f4:	6812      	ldr	r2, [r2, #0]
 801a6f6:	681b      	ldr	r3, [r3, #0]
 801a6f8:	41da      	rors	r2, r3
 801a6fa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a6fe:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 801a702:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801a704:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a708:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 801a70c:	681b      	ldr	r3, [r3, #0]
 801a70e:	fa2f f283 	sxtb16	r2, r3
 801a712:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a716:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 801a71a:	601a      	str	r2, [r3, #0]
  return(result);
 801a71c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a720:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 801a724:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801a726:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a72a:	f5a3 638a 	sub.w	r3, r3, #1104	; 0x450
 801a72e:	601a      	str	r2, [r3, #0]
  return result;
 801a730:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a734:	f5a3 638a 	sub.w	r3, r3, #1104	; 0x450
 801a738:	681b      	ldr	r3, [r3, #0]
 801a73a:	f8c7 3a50 	str.w	r3, [r7, #2640]	; 0xa50
                res10 = __SMLAD(val3, val2, res10);
 801a73e:	f8d7 2a4c 	ldr.w	r2, [r7, #2636]	; 0xa4c
 801a742:	f8d7 1a54 	ldr.w	r1, [r7, #2644]	; 0xa54
 801a746:	f8d7 0ab4 	ldr.w	r0, [r7, #2740]	; 0xab4
 801a74a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a74e:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 801a752:	601a      	str	r2, [r3, #0]
 801a754:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a758:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 801a75c:	6019      	str	r1, [r3, #0]
 801a75e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a762:	f5a3 6386 	sub.w	r3, r3, #1072	; 0x430
 801a766:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801a768:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a76c:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 801a770:	6819      	ldr	r1, [r3, #0]
 801a772:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a776:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 801a77a:	681a      	ldr	r2, [r3, #0]
 801a77c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a780:	f5a3 6386 	sub.w	r3, r3, #1072	; 0x430
 801a784:	681b      	ldr	r3, [r3, #0]
 801a786:	fb21 3202 	smlad	r2, r1, r2, r3
 801a78a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a78e:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 801a792:	601a      	str	r2, [r3, #0]
  return(result);
 801a794:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a798:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 801a79c:	681b      	ldr	r3, [r3, #0]
 801a79e:	f8c7 3ab4 	str.w	r3, [r7, #2740]	; 0xab4
                res11 = __SMLAD(val3, val5, res11);
 801a7a2:	f8d7 2a4c 	ldr.w	r2, [r7, #2636]	; 0xa4c
 801a7a6:	f8d7 1a44 	ldr.w	r1, [r7, #2628]	; 0xa44
 801a7aa:	f8d7 0ab0 	ldr.w	r0, [r7, #2736]	; 0xab0
 801a7ae:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a7b2:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 801a7b6:	601a      	str	r2, [r3, #0]
 801a7b8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a7bc:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 801a7c0:	6019      	str	r1, [r3, #0]
 801a7c2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a7c6:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 801a7ca:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801a7cc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a7d0:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 801a7d4:	6819      	ldr	r1, [r3, #0]
 801a7d6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a7da:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 801a7de:	681a      	ldr	r2, [r3, #0]
 801a7e0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a7e4:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 801a7e8:	681b      	ldr	r3, [r3, #0]
 801a7ea:	fb21 3202 	smlad	r2, r1, r2, r3
 801a7ee:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a7f2:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 801a7f6:	601a      	str	r2, [r3, #0]
  return(result);
 801a7f8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a7fc:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 801a800:	681b      	ldr	r3, [r3, #0]
 801a802:	f8c7 3ab0 	str.w	r3, [r7, #2736]	; 0xab0
                res10 = __SMLAD(val0, val1, res10);
 801a806:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 801a80a:	f8d7 1a58 	ldr.w	r1, [r7, #2648]	; 0xa58
 801a80e:	f8d7 0ab4 	ldr.w	r0, [r7, #2740]	; 0xab4
 801a812:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a816:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 801a81a:	601a      	str	r2, [r3, #0]
 801a81c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a820:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 801a824:	6019      	str	r1, [r3, #0]
 801a826:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a82a:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 801a82e:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801a830:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a834:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 801a838:	6819      	ldr	r1, [r3, #0]
 801a83a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a83e:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 801a842:	681a      	ldr	r2, [r3, #0]
 801a844:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a848:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 801a84c:	681b      	ldr	r3, [r3, #0]
 801a84e:	fb21 3202 	smlad	r2, r1, r2, r3
 801a852:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a856:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 801a85a:	601a      	str	r2, [r3, #0]
  return(result);
 801a85c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a860:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 801a864:	681b      	ldr	r3, [r3, #0]
 801a866:	f8c7 3ab4 	str.w	r3, [r7, #2740]	; 0xab4
 801a86a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a86e:	f2a3 4204 	subw	r2, r3, #1028	; 0x404
 801a872:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 801a876:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801a878:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a87c:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 801a880:	681b      	ldr	r3, [r3, #0]
 801a882:	681b      	ldr	r3, [r3, #0]
 801a884:	681b      	ldr	r3, [r3, #0]
 801a886:	461a      	mov	r2, r3
 801a888:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a88c:	f6a3 1384 	subw	r3, r3, #2436	; 0x984
 801a890:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801a892:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a896:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 801a89a:	681b      	ldr	r3, [r3, #0]
 801a89c:	681b      	ldr	r3, [r3, #0]
 801a89e:	1d1a      	adds	r2, r3, #4
 801a8a0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a8a4:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 801a8a8:	681b      	ldr	r3, [r3, #0]
 801a8aa:	601a      	str	r2, [r3, #0]
    return (val);
 801a8ac:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a8b0:	f6a3 1384 	subw	r3, r3, #2436	; 0x984
 801a8b4:	681b      	ldr	r3, [r3, #0]
                val1 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 801a8b6:	f8c7 3a58 	str.w	r3, [r7, #2648]	; 0xa58
                res11 = __SMLAD(val0, val4, res11);
 801a8ba:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 801a8be:	f8d7 1a48 	ldr.w	r1, [r7, #2632]	; 0xa48
 801a8c2:	f8d7 0ab0 	ldr.w	r0, [r7, #2736]	; 0xab0
 801a8c6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a8ca:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 801a8ce:	601a      	str	r2, [r3, #0]
 801a8d0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a8d4:	f5a3 737e 	sub.w	r3, r3, #1016	; 0x3f8
 801a8d8:	6019      	str	r1, [r3, #0]
 801a8da:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a8de:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 801a8e2:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801a8e4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a8e8:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 801a8ec:	6819      	ldr	r1, [r3, #0]
 801a8ee:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a8f2:	f5a3 737e 	sub.w	r3, r3, #1016	; 0x3f8
 801a8f6:	681a      	ldr	r2, [r3, #0]
 801a8f8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a8fc:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 801a900:	681b      	ldr	r3, [r3, #0]
 801a902:	fb21 3202 	smlad	r2, r1, r2, r3
 801a906:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a90a:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 801a90e:	601a      	str	r2, [r3, #0]
  return(result);
 801a910:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a914:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 801a918:	681b      	ldr	r3, [r3, #0]
 801a91a:	f8c7 3ab0 	str.w	r3, [r7, #2736]	; 0xab0

                val4 = arm_nn_read_q7x4((const q7_t *)&rhs_ptr[off0]);
 801a91e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a922:	f6a3 134c 	subw	r3, r3, #2380	; 0x94c
 801a926:	681a      	ldr	r2, [r3, #0]
 801a928:	f8d7 3a84 	ldr.w	r3, [r7, #2692]	; 0xa84
 801a92c:	441a      	add	r2, r3
 801a92e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a932:	f5a3 737c 	sub.w	r3, r3, #1008	; 0x3f0
 801a936:	601a      	str	r2, [r3, #0]
 801a938:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a93c:	f5a3 737c 	sub.w	r3, r3, #1008	; 0x3f0
 801a940:	681b      	ldr	r3, [r3, #0]
 801a942:	681b      	ldr	r3, [r3, #0]
 801a944:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801a946:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a94a:	f6a3 1388 	subw	r3, r3, #2440	; 0x988
 801a94e:	601a      	str	r2, [r3, #0]
    return (val);
 801a950:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a954:	f6a3 1388 	subw	r3, r3, #2440	; 0x988
 801a958:	681b      	ldr	r3, [r3, #0]
 801a95a:	f8c7 3a48 	str.w	r3, [r7, #2632]	; 0xa48
                val2 = __SXTB16(val1);
 801a95e:	f8d7 2a58 	ldr.w	r2, [r7, #2648]	; 0xa58
 801a962:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a966:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 801a96a:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801a96c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a970:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 801a974:	681b      	ldr	r3, [r3, #0]
 801a976:	fa2f f283 	sxtb16	r2, r3
 801a97a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a97e:	f5a3 737b 	sub.w	r3, r3, #1004	; 0x3ec
 801a982:	601a      	str	r2, [r3, #0]
  return(result);
 801a984:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a988:	f5a3 737b 	sub.w	r3, r3, #1004	; 0x3ec
 801a98c:	681b      	ldr	r3, [r3, #0]
 801a98e:	f8c7 3a54 	str.w	r3, [r7, #2644]	; 0xa54
 801a992:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a996:	f5a3 7279 	sub.w	r2, r3, #996	; 0x3e4
 801a99a:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 801a99e:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801a9a0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a9a4:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 801a9a8:	681b      	ldr	r3, [r3, #0]
 801a9aa:	681b      	ldr	r3, [r3, #0]
 801a9ac:	681b      	ldr	r3, [r3, #0]
 801a9ae:	461a      	mov	r2, r3
 801a9b0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a9b4:	f6a3 138c 	subw	r3, r3, #2444	; 0x98c
 801a9b8:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801a9ba:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a9be:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 801a9c2:	681b      	ldr	r3, [r3, #0]
 801a9c4:	681b      	ldr	r3, [r3, #0]
 801a9c6:	1d1a      	adds	r2, r3, #4
 801a9c8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a9cc:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 801a9d0:	681b      	ldr	r3, [r3, #0]
 801a9d2:	601a      	str	r2, [r3, #0]
    return (val);
 801a9d4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a9d8:	f6a3 138c 	subw	r3, r3, #2444	; 0x98c
 801a9dc:	681b      	ldr	r3, [r3, #0]
                val0 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 801a9de:	f8c7 3a50 	str.w	r3, [r7, #2640]	; 0xa50
                val3 = __SXTB16(val0);
 801a9e2:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 801a9e6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a9ea:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 801a9ee:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801a9f0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801a9f4:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 801a9f8:	681b      	ldr	r3, [r3, #0]
 801a9fa:	fa2f f283 	sxtb16	r2, r3
 801a9fe:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801aa02:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 801aa06:	601a      	str	r2, [r3, #0]
  return(result);
 801aa08:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801aa0c:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 801aa10:	681b      	ldr	r3, [r3, #0]
 801aa12:	f8c7 3a4c 	str.w	r3, [r7, #2636]	; 0xa4c
                val1 = __SXTB16_RORn(val1, 8);
 801aa16:	f8d7 2a58 	ldr.w	r2, [r7, #2648]	; 0xa58
 801aa1a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801aa1e:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 801aa22:	601a      	str	r2, [r3, #0]
 801aa24:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801aa28:	f5a3 7271 	sub.w	r2, r3, #964	; 0x3c4
 801aa2c:	2308      	movs	r3, #8
 801aa2e:	6013      	str	r3, [r2, #0]
 801aa30:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801aa34:	f5a3 7272 	sub.w	r2, r3, #968	; 0x3c8
 801aa38:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801aa3c:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 801aa40:	681b      	ldr	r3, [r3, #0]
 801aa42:	6013      	str	r3, [r2, #0]
 801aa44:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801aa48:	f5a3 7273 	sub.w	r2, r3, #972	; 0x3cc
 801aa4c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801aa50:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 801aa54:	681b      	ldr	r3, [r3, #0]
 801aa56:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801aa58:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801aa5c:	f5a3 7273 	sub.w	r2, r3, #972	; 0x3cc
 801aa60:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801aa64:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 801aa68:	681b      	ldr	r3, [r3, #0]
 801aa6a:	f003 031f 	and.w	r3, r3, #31
 801aa6e:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801aa70:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801aa74:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 801aa78:	681b      	ldr	r3, [r3, #0]
 801aa7a:	2b00      	cmp	r3, #0
 801aa7c:	d105      	bne.n	801aa8a <arm_nn_mat_mult_nt_t_s8+0xb96>
    return op1;
 801aa7e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801aa82:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 801aa86:	681a      	ldr	r2, [r3, #0]
 801aa88:	e00a      	b.n	801aaa0 <arm_nn_mat_mult_nt_t_s8+0xbac>
  return (op1 >> op2) | (op1 << (32U - op2));
 801aa8a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801aa8e:	f5a3 7272 	sub.w	r2, r3, #968	; 0x3c8
 801aa92:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801aa96:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 801aa9a:	6812      	ldr	r2, [r2, #0]
 801aa9c:	681b      	ldr	r3, [r3, #0]
 801aa9e:	41da      	rors	r2, r3
 801aaa0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801aaa4:	f5a3 7374 	sub.w	r3, r3, #976	; 0x3d0
 801aaa8:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801aaaa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801aaae:	f5a3 7374 	sub.w	r3, r3, #976	; 0x3d0
 801aab2:	681b      	ldr	r3, [r3, #0]
 801aab4:	fa2f f283 	sxtb16	r2, r3
 801aab8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801aabc:	f5a3 7375 	sub.w	r3, r3, #980	; 0x3d4
 801aac0:	601a      	str	r2, [r3, #0]
  return(result);
 801aac2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801aac6:	f5a3 7375 	sub.w	r3, r3, #980	; 0x3d4
 801aaca:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801aacc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801aad0:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 801aad4:	601a      	str	r2, [r3, #0]
  return result;
 801aad6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801aada:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 801aade:	681b      	ldr	r3, [r3, #0]
 801aae0:	f8c7 3a58 	str.w	r3, [r7, #2648]	; 0xa58
                val0 = __SXTB16_RORn(val0, 8);
 801aae4:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 801aae8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801aaec:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 801aaf0:	601a      	str	r2, [r3, #0]
 801aaf2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801aaf6:	f5a3 726a 	sub.w	r2, r3, #936	; 0x3a8
 801aafa:	2308      	movs	r3, #8
 801aafc:	6013      	str	r3, [r2, #0]
 801aafe:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ab02:	f5a3 726b 	sub.w	r2, r3, #940	; 0x3ac
 801ab06:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ab0a:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 801ab0e:	681b      	ldr	r3, [r3, #0]
 801ab10:	6013      	str	r3, [r2, #0]
 801ab12:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ab16:	f5a3 726c 	sub.w	r2, r3, #944	; 0x3b0
 801ab1a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ab1e:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 801ab22:	681b      	ldr	r3, [r3, #0]
 801ab24:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801ab26:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ab2a:	f5a3 726c 	sub.w	r2, r3, #944	; 0x3b0
 801ab2e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ab32:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 801ab36:	681b      	ldr	r3, [r3, #0]
 801ab38:	f003 031f 	and.w	r3, r3, #31
 801ab3c:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801ab3e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ab42:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 801ab46:	681b      	ldr	r3, [r3, #0]
 801ab48:	2b00      	cmp	r3, #0
 801ab4a:	d105      	bne.n	801ab58 <arm_nn_mat_mult_nt_t_s8+0xc64>
    return op1;
 801ab4c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ab50:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 801ab54:	681a      	ldr	r2, [r3, #0]
 801ab56:	e00a      	b.n	801ab6e <arm_nn_mat_mult_nt_t_s8+0xc7a>
  return (op1 >> op2) | (op1 << (32U - op2));
 801ab58:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ab5c:	f5a3 726b 	sub.w	r2, r3, #940	; 0x3ac
 801ab60:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ab64:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 801ab68:	6812      	ldr	r2, [r2, #0]
 801ab6a:	681b      	ldr	r3, [r3, #0]
 801ab6c:	41da      	rors	r2, r3
 801ab6e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ab72:	f5a3 736d 	sub.w	r3, r3, #948	; 0x3b4
 801ab76:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801ab78:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ab7c:	f5a3 736d 	sub.w	r3, r3, #948	; 0x3b4
 801ab80:	681b      	ldr	r3, [r3, #0]
 801ab82:	fa2f f283 	sxtb16	r2, r3
 801ab86:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ab8a:	f5a3 736e 	sub.w	r3, r3, #952	; 0x3b8
 801ab8e:	601a      	str	r2, [r3, #0]
  return(result);
 801ab90:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ab94:	f5a3 736e 	sub.w	r3, r3, #952	; 0x3b8
 801ab98:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801ab9a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ab9e:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 801aba2:	601a      	str	r2, [r3, #0]
  return result;
 801aba4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801aba8:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 801abac:	681b      	ldr	r3, [r3, #0]
 801abae:	f8c7 3a50 	str.w	r3, [r7, #2640]	; 0xa50

                // 4 x MAC res00, res01
                res00 = __SMLAD(val3, val2, res00);
 801abb2:	f8d7 2a4c 	ldr.w	r2, [r7, #2636]	; 0xa4c
 801abb6:	f8d7 1a54 	ldr.w	r1, [r7, #2644]	; 0xa54
 801abba:	f8d7 0abc 	ldr.w	r0, [r7, #2748]	; 0xabc
 801abbe:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801abc2:	f5a3 7365 	sub.w	r3, r3, #916	; 0x394
 801abc6:	601a      	str	r2, [r3, #0]
 801abc8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801abcc:	f5a3 7366 	sub.w	r3, r3, #920	; 0x398
 801abd0:	6019      	str	r1, [r3, #0]
 801abd2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801abd6:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 801abda:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801abdc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801abe0:	f5a3 7365 	sub.w	r3, r3, #916	; 0x394
 801abe4:	6819      	ldr	r1, [r3, #0]
 801abe6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801abea:	f5a3 7366 	sub.w	r3, r3, #920	; 0x398
 801abee:	681a      	ldr	r2, [r3, #0]
 801abf0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801abf4:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 801abf8:	681b      	ldr	r3, [r3, #0]
 801abfa:	fb21 3202 	smlad	r2, r1, r2, r3
 801abfe:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ac02:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 801ac06:	601a      	str	r2, [r3, #0]
  return(result);
 801ac08:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ac0c:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 801ac10:	681b      	ldr	r3, [r3, #0]
 801ac12:	f8c7 3abc 	str.w	r3, [r7, #2748]	; 0xabc
                val5 = __SXTB16(val4);
 801ac16:	f8d7 2a48 	ldr.w	r2, [r7, #2632]	; 0xa48
 801ac1a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ac1e:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 801ac22:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801ac24:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ac28:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 801ac2c:	681b      	ldr	r3, [r3, #0]
 801ac2e:	fa2f f283 	sxtb16	r2, r3
 801ac32:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ac36:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 801ac3a:	601a      	str	r2, [r3, #0]
  return(result);
 801ac3c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ac40:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 801ac44:	681b      	ldr	r3, [r3, #0]
 801ac46:	f8c7 3a44 	str.w	r3, [r7, #2628]	; 0xa44
                res00 = __SMLAD(val0, val1, res00);
 801ac4a:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 801ac4e:	f8d7 1a58 	ldr.w	r1, [r7, #2648]	; 0xa58
 801ac52:	f8d7 0abc 	ldr.w	r0, [r7, #2748]	; 0xabc
 801ac56:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ac5a:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 801ac5e:	601a      	str	r2, [r3, #0]
 801ac60:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ac64:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 801ac68:	6019      	str	r1, [r3, #0]
 801ac6a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ac6e:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 801ac72:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801ac74:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ac78:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 801ac7c:	6819      	ldr	r1, [r3, #0]
 801ac7e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ac82:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 801ac86:	681a      	ldr	r2, [r3, #0]
 801ac88:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ac8c:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 801ac90:	681b      	ldr	r3, [r3, #0]
 801ac92:	fb21 3202 	smlad	r2, r1, r2, r3
 801ac96:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ac9a:	f5a3 7362 	sub.w	r3, r3, #904	; 0x388
 801ac9e:	601a      	str	r2, [r3, #0]
  return(result);
 801aca0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801aca4:	f5a3 7362 	sub.w	r3, r3, #904	; 0x388
 801aca8:	681b      	ldr	r3, [r3, #0]
 801acaa:	f8c7 3abc 	str.w	r3, [r7, #2748]	; 0xabc
                val4 = __SXTB16_RORn(val4, 8);
 801acae:	f8d7 2a48 	ldr.w	r2, [r7, #2632]	; 0xa48
 801acb2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801acb6:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 801acba:	601a      	str	r2, [r3, #0]
 801acbc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801acc0:	f5a3 7259 	sub.w	r2, r3, #868	; 0x364
 801acc4:	2308      	movs	r3, #8
 801acc6:	6013      	str	r3, [r2, #0]
 801acc8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801accc:	f5a3 725a 	sub.w	r2, r3, #872	; 0x368
 801acd0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801acd4:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 801acd8:	681b      	ldr	r3, [r3, #0]
 801acda:	6013      	str	r3, [r2, #0]
 801acdc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ace0:	f5a3 725b 	sub.w	r2, r3, #876	; 0x36c
 801ace4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ace8:	f5a3 7359 	sub.w	r3, r3, #868	; 0x364
 801acec:	681b      	ldr	r3, [r3, #0]
 801acee:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801acf0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801acf4:	f5a3 725b 	sub.w	r2, r3, #876	; 0x36c
 801acf8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801acfc:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 801ad00:	681b      	ldr	r3, [r3, #0]
 801ad02:	f003 031f 	and.w	r3, r3, #31
 801ad06:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801ad08:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ad0c:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 801ad10:	681b      	ldr	r3, [r3, #0]
 801ad12:	2b00      	cmp	r3, #0
 801ad14:	d105      	bne.n	801ad22 <arm_nn_mat_mult_nt_t_s8+0xe2e>
    return op1;
 801ad16:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ad1a:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 801ad1e:	681a      	ldr	r2, [r3, #0]
 801ad20:	e00a      	b.n	801ad38 <arm_nn_mat_mult_nt_t_s8+0xe44>
  return (op1 >> op2) | (op1 << (32U - op2));
 801ad22:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ad26:	f5a3 725a 	sub.w	r2, r3, #872	; 0x368
 801ad2a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ad2e:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 801ad32:	6812      	ldr	r2, [r2, #0]
 801ad34:	681b      	ldr	r3, [r3, #0]
 801ad36:	41da      	rors	r2, r3
 801ad38:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ad3c:	f5a3 735c 	sub.w	r3, r3, #880	; 0x370
 801ad40:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801ad42:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ad46:	f5a3 735c 	sub.w	r3, r3, #880	; 0x370
 801ad4a:	681b      	ldr	r3, [r3, #0]
 801ad4c:	fa2f f283 	sxtb16	r2, r3
 801ad50:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ad54:	f5a3 735d 	sub.w	r3, r3, #884	; 0x374
 801ad58:	601a      	str	r2, [r3, #0]
  return(result);
 801ad5a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ad5e:	f5a3 735d 	sub.w	r3, r3, #884	; 0x374
 801ad62:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801ad64:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ad68:	f5a3 735e 	sub.w	r3, r3, #888	; 0x378
 801ad6c:	601a      	str	r2, [r3, #0]
  return result;
 801ad6e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ad72:	f5a3 735e 	sub.w	r3, r3, #888	; 0x378
 801ad76:	681b      	ldr	r3, [r3, #0]
 801ad78:	f8c7 3a48 	str.w	r3, [r7, #2632]	; 0xa48
                res01 = __SMLAD(val3, val5, res01);
 801ad7c:	f8d7 2a4c 	ldr.w	r2, [r7, #2636]	; 0xa4c
 801ad80:	f8d7 1a44 	ldr.w	r1, [r7, #2628]	; 0xa44
 801ad84:	f8d7 0ab8 	ldr.w	r0, [r7, #2744]	; 0xab8
 801ad88:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ad8c:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 801ad90:	601a      	str	r2, [r3, #0]
 801ad92:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ad96:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 801ad9a:	6019      	str	r1, [r3, #0]
 801ad9c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ada0:	f5a3 7356 	sub.w	r3, r3, #856	; 0x358
 801ada4:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801ada6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801adaa:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 801adae:	6819      	ldr	r1, [r3, #0]
 801adb0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801adb4:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 801adb8:	681a      	ldr	r2, [r3, #0]
 801adba:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801adbe:	f5a3 7356 	sub.w	r3, r3, #856	; 0x358
 801adc2:	681b      	ldr	r3, [r3, #0]
 801adc4:	fb21 3202 	smlad	r2, r1, r2, r3
 801adc8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801adcc:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 801add0:	601a      	str	r2, [r3, #0]
  return(result);
 801add2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801add6:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 801adda:	681b      	ldr	r3, [r3, #0]
 801addc:	f8c7 3ab8 	str.w	r3, [r7, #2744]	; 0xab8
                res01 = __SMLAD(val0, val4, res01);
 801ade0:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 801ade4:	f8d7 1a48 	ldr.w	r1, [r7, #2632]	; 0xa48
 801ade8:	f8d7 0ab8 	ldr.w	r0, [r7, #2744]	; 0xab8
 801adec:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801adf0:	f5a3 7350 	sub.w	r3, r3, #832	; 0x340
 801adf4:	601a      	str	r2, [r3, #0]
 801adf6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801adfa:	f5a3 7351 	sub.w	r3, r3, #836	; 0x344
 801adfe:	6019      	str	r1, [r3, #0]
 801ae00:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ae04:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 801ae08:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801ae0a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ae0e:	f5a3 7350 	sub.w	r3, r3, #832	; 0x340
 801ae12:	6819      	ldr	r1, [r3, #0]
 801ae14:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ae18:	f5a3 7351 	sub.w	r3, r3, #836	; 0x344
 801ae1c:	681a      	ldr	r2, [r3, #0]
 801ae1e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ae22:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 801ae26:	681b      	ldr	r3, [r3, #0]
 801ae28:	fb21 3202 	smlad	r2, r1, r2, r3
 801ae2c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ae30:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 801ae34:	601a      	str	r2, [r3, #0]
  return(result);
 801ae36:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ae3a:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 801ae3e:	681b      	ldr	r3, [r3, #0]
 801ae40:	f8c7 3ab8 	str.w	r3, [r7, #2744]	; 0xab8

                // 4 x MAC res10, res11
                val0 = arm_nn_read_q7x4((const q7_t *)&lhs_ptr[off0]);
 801ae44:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ae48:	f6a3 1348 	subw	r3, r3, #2376	; 0x948
 801ae4c:	681a      	ldr	r2, [r3, #0]
 801ae4e:	f8d7 3a84 	ldr.w	r3, [r7, #2692]	; 0xa84
 801ae52:	441a      	add	r2, r3
 801ae54:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ae58:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 801ae5c:	601a      	str	r2, [r3, #0]
 801ae5e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ae62:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 801ae66:	681b      	ldr	r3, [r3, #0]
 801ae68:	681b      	ldr	r3, [r3, #0]
 801ae6a:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801ae6c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ae70:	f5a3 6319 	sub.w	r3, r3, #2448	; 0x990
 801ae74:	601a      	str	r2, [r3, #0]
    return (val);
 801ae76:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ae7a:	f5a3 6319 	sub.w	r3, r3, #2448	; 0x990
 801ae7e:	681b      	ldr	r3, [r3, #0]
 801ae80:	f8c7 3a50 	str.w	r3, [r7, #2640]	; 0xa50
                val3 = __SXTB16(val0);
 801ae84:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 801ae88:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ae8c:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 801ae90:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801ae92:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ae96:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 801ae9a:	681b      	ldr	r3, [r3, #0]
 801ae9c:	fa2f f283 	sxtb16	r2, r3
 801aea0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801aea4:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 801aea8:	601a      	str	r2, [r3, #0]
  return(result);
 801aeaa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801aeae:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 801aeb2:	681b      	ldr	r3, [r3, #0]
 801aeb4:	f8c7 3a4c 	str.w	r3, [r7, #2636]	; 0xa4c
                val0 = __SXTB16_RORn(val0, 8);
 801aeb8:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 801aebc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801aec0:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 801aec4:	601a      	str	r2, [r3, #0]
 801aec6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801aeca:	f5a3 7247 	sub.w	r2, r3, #796	; 0x31c
 801aece:	2308      	movs	r3, #8
 801aed0:	6013      	str	r3, [r2, #0]
 801aed2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801aed6:	f5a3 7248 	sub.w	r2, r3, #800	; 0x320
 801aeda:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801aede:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 801aee2:	681b      	ldr	r3, [r3, #0]
 801aee4:	6013      	str	r3, [r2, #0]
 801aee6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801aeea:	f5a3 7249 	sub.w	r2, r3, #804	; 0x324
 801aeee:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801aef2:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 801aef6:	681b      	ldr	r3, [r3, #0]
 801aef8:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801aefa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801aefe:	f5a3 7249 	sub.w	r2, r3, #804	; 0x324
 801af02:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801af06:	f5a3 7349 	sub.w	r3, r3, #804	; 0x324
 801af0a:	681b      	ldr	r3, [r3, #0]
 801af0c:	f003 031f 	and.w	r3, r3, #31
 801af10:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801af12:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801af16:	f5a3 7349 	sub.w	r3, r3, #804	; 0x324
 801af1a:	681b      	ldr	r3, [r3, #0]
 801af1c:	2b00      	cmp	r3, #0
 801af1e:	d105      	bne.n	801af2c <arm_nn_mat_mult_nt_t_s8+0x1038>
    return op1;
 801af20:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801af24:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 801af28:	681a      	ldr	r2, [r3, #0]
 801af2a:	e00a      	b.n	801af42 <arm_nn_mat_mult_nt_t_s8+0x104e>
  return (op1 >> op2) | (op1 << (32U - op2));
 801af2c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801af30:	f5a3 7248 	sub.w	r2, r3, #800	; 0x320
 801af34:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801af38:	f5a3 7349 	sub.w	r3, r3, #804	; 0x324
 801af3c:	6812      	ldr	r2, [r2, #0]
 801af3e:	681b      	ldr	r3, [r3, #0]
 801af40:	41da      	rors	r2, r3
 801af42:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801af46:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 801af4a:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801af4c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801af50:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 801af54:	681b      	ldr	r3, [r3, #0]
 801af56:	fa2f f283 	sxtb16	r2, r3
 801af5a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801af5e:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 801af62:	601a      	str	r2, [r3, #0]
  return(result);
 801af64:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801af68:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 801af6c:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801af6e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801af72:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 801af76:	601a      	str	r2, [r3, #0]
  return result;
 801af78:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801af7c:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 801af80:	681b      	ldr	r3, [r3, #0]
 801af82:	f8c7 3a50 	str.w	r3, [r7, #2640]	; 0xa50
                res10 = __SMLAD(val3, val2, res10);
 801af86:	f8d7 2a4c 	ldr.w	r2, [r7, #2636]	; 0xa4c
 801af8a:	f8d7 1a54 	ldr.w	r1, [r7, #2644]	; 0xa54
 801af8e:	f8d7 0ab4 	ldr.w	r0, [r7, #2740]	; 0xab4
 801af92:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801af96:	f5a3 7342 	sub.w	r3, r3, #776	; 0x308
 801af9a:	601a      	str	r2, [r3, #0]
 801af9c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801afa0:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 801afa4:	6019      	str	r1, [r3, #0]
 801afa6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801afaa:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 801afae:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801afb0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801afb4:	f5a3 7342 	sub.w	r3, r3, #776	; 0x308
 801afb8:	6819      	ldr	r1, [r3, #0]
 801afba:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801afbe:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 801afc2:	681a      	ldr	r2, [r3, #0]
 801afc4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801afc8:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 801afcc:	681b      	ldr	r3, [r3, #0]
 801afce:	fb21 3202 	smlad	r2, r1, r2, r3
 801afd2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801afd6:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 801afda:	601a      	str	r2, [r3, #0]
  return(result);
 801afdc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801afe0:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 801afe4:	681b      	ldr	r3, [r3, #0]
 801afe6:	f8c7 3ab4 	str.w	r3, [r7, #2740]	; 0xab4
                res11 = __SMLAD(val3, val5, res11);
 801afea:	f8d7 2a4c 	ldr.w	r2, [r7, #2636]	; 0xa4c
 801afee:	f8d7 1a44 	ldr.w	r1, [r7, #2628]	; 0xa44
 801aff2:	f8d7 0ab0 	ldr.w	r0, [r7, #2736]	; 0xab0
 801aff6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801affa:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 801affe:	601a      	str	r2, [r3, #0]
 801b000:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b004:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 801b008:	6019      	str	r1, [r3, #0]
 801b00a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b00e:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 801b012:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801b014:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b018:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 801b01c:	6819      	ldr	r1, [r3, #0]
 801b01e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b022:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 801b026:	681a      	ldr	r2, [r3, #0]
 801b028:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b02c:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 801b030:	681b      	ldr	r3, [r3, #0]
 801b032:	fb21 3202 	smlad	r2, r1, r2, r3
 801b036:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b03a:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 801b03e:	601a      	str	r2, [r3, #0]
  return(result);
 801b040:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b044:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 801b048:	681b      	ldr	r3, [r3, #0]
 801b04a:	f8c7 3ab0 	str.w	r3, [r7, #2736]	; 0xab0
                res10 = __SMLAD(val0, val1, res10);
 801b04e:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 801b052:	f8d7 1a58 	ldr.w	r1, [r7, #2648]	; 0xa58
 801b056:	f8d7 0ab4 	ldr.w	r0, [r7, #2740]	; 0xab4
 801b05a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b05e:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 801b062:	601a      	str	r2, [r3, #0]
 801b064:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b068:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 801b06c:	6019      	str	r1, [r3, #0]
 801b06e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b072:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 801b076:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801b078:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b07c:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 801b080:	6819      	ldr	r1, [r3, #0]
 801b082:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b086:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 801b08a:	681a      	ldr	r2, [r3, #0]
 801b08c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b090:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 801b094:	681b      	ldr	r3, [r3, #0]
 801b096:	fb21 3202 	smlad	r2, r1, r2, r3
 801b09a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b09e:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 801b0a2:	601a      	str	r2, [r3, #0]
  return(result);
 801b0a4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b0a8:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 801b0ac:	681b      	ldr	r3, [r3, #0]
 801b0ae:	f8c7 3ab4 	str.w	r3, [r7, #2740]	; 0xab4
 801b0b2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b0b6:	f5a3 7239 	sub.w	r2, r3, #740	; 0x2e4
 801b0ba:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 801b0be:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801b0c0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b0c4:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 801b0c8:	681b      	ldr	r3, [r3, #0]
 801b0ca:	681b      	ldr	r3, [r3, #0]
 801b0cc:	681b      	ldr	r3, [r3, #0]
 801b0ce:	461a      	mov	r2, r3
 801b0d0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b0d4:	f6a3 1394 	subw	r3, r3, #2452	; 0x994
 801b0d8:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801b0da:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b0de:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 801b0e2:	681b      	ldr	r3, [r3, #0]
 801b0e4:	681b      	ldr	r3, [r3, #0]
 801b0e6:	1d1a      	adds	r2, r3, #4
 801b0e8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b0ec:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 801b0f0:	681b      	ldr	r3, [r3, #0]
 801b0f2:	601a      	str	r2, [r3, #0]
    return (val);
 801b0f4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b0f8:	f6a3 1394 	subw	r3, r3, #2452	; 0x994
 801b0fc:	681b      	ldr	r3, [r3, #0]
                val1 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 801b0fe:	f8c7 3a58 	str.w	r3, [r7, #2648]	; 0xa58
                res11 = __SMLAD(val0, val4, res11);
 801b102:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 801b106:	f8d7 1a48 	ldr.w	r1, [r7, #2632]	; 0xa48
 801b10a:	f8d7 0ab0 	ldr.w	r0, [r7, #2736]	; 0xab0
 801b10e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b112:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 801b116:	601a      	str	r2, [r3, #0]
 801b118:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b11c:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 801b120:	6019      	str	r1, [r3, #0]
 801b122:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b126:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 801b12a:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801b12c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b130:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 801b134:	6819      	ldr	r1, [r3, #0]
 801b136:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b13a:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 801b13e:	681a      	ldr	r2, [r3, #0]
 801b140:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b144:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 801b148:	681b      	ldr	r3, [r3, #0]
 801b14a:	fb21 3202 	smlad	r2, r1, r2, r3
 801b14e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b152:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 801b156:	601a      	str	r2, [r3, #0]
  return(result);
 801b158:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b15c:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 801b160:	681b      	ldr	r3, [r3, #0]
 801b162:	f8c7 3ab0 	str.w	r3, [r7, #2736]	; 0xab0

                val4 = arm_nn_read_q7x4((const q7_t *)&rhs_ptr[off0]);
 801b166:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b16a:	f6a3 134c 	subw	r3, r3, #2380	; 0x94c
 801b16e:	681a      	ldr	r2, [r3, #0]
 801b170:	f8d7 3a84 	ldr.w	r3, [r7, #2692]	; 0xa84
 801b174:	441a      	add	r2, r3
 801b176:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b17a:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 801b17e:	601a      	str	r2, [r3, #0]
 801b180:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b184:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 801b188:	681b      	ldr	r3, [r3, #0]
 801b18a:	681b      	ldr	r3, [r3, #0]
 801b18c:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801b18e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b192:	f6a3 1398 	subw	r3, r3, #2456	; 0x998
 801b196:	601a      	str	r2, [r3, #0]
    return (val);
 801b198:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b19c:	f6a3 1398 	subw	r3, r3, #2456	; 0x998
 801b1a0:	681b      	ldr	r3, [r3, #0]
 801b1a2:	f8c7 3a48 	str.w	r3, [r7, #2632]	; 0xa48
                val2 = __SXTB16(val1);
 801b1a6:	f8d7 2a58 	ldr.w	r2, [r7, #2648]	; 0xa58
 801b1aa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b1ae:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 801b1b2:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801b1b4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b1b8:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 801b1bc:	681b      	ldr	r3, [r3, #0]
 801b1be:	fa2f f283 	sxtb16	r2, r3
 801b1c2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b1c6:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 801b1ca:	601a      	str	r2, [r3, #0]
  return(result);
 801b1cc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b1d0:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 801b1d4:	681b      	ldr	r3, [r3, #0]
 801b1d6:	f8c7 3a54 	str.w	r3, [r7, #2644]	; 0xa54
 801b1da:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b1de:	f5a3 7231 	sub.w	r2, r3, #708	; 0x2c4
 801b1e2:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 801b1e6:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801b1e8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b1ec:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 801b1f0:	681b      	ldr	r3, [r3, #0]
 801b1f2:	681b      	ldr	r3, [r3, #0]
 801b1f4:	681b      	ldr	r3, [r3, #0]
 801b1f6:	461a      	mov	r2, r3
 801b1f8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b1fc:	f6a3 139c 	subw	r3, r3, #2460	; 0x99c
 801b200:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801b202:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b206:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 801b20a:	681b      	ldr	r3, [r3, #0]
 801b20c:	681b      	ldr	r3, [r3, #0]
 801b20e:	1d1a      	adds	r2, r3, #4
 801b210:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b214:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 801b218:	681b      	ldr	r3, [r3, #0]
 801b21a:	601a      	str	r2, [r3, #0]
    return (val);
 801b21c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b220:	f6a3 139c 	subw	r3, r3, #2460	; 0x99c
 801b224:	681b      	ldr	r3, [r3, #0]
                val0 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 801b226:	f8c7 3a50 	str.w	r3, [r7, #2640]	; 0xa50
                val3 = __SXTB16(val0);
 801b22a:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 801b22e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b232:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 801b236:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801b238:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b23c:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 801b240:	681b      	ldr	r3, [r3, #0]
 801b242:	fa2f f283 	sxtb16	r2, r3
 801b246:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b24a:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 801b24e:	601a      	str	r2, [r3, #0]
  return(result);
 801b250:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b254:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 801b258:	681b      	ldr	r3, [r3, #0]
 801b25a:	f8c7 3a4c 	str.w	r3, [r7, #2636]	; 0xa4c
                val1 = __SXTB16_RORn(val1, 8);
 801b25e:	f8d7 2a58 	ldr.w	r2, [r7, #2648]	; 0xa58
 801b262:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b266:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 801b26a:	601a      	str	r2, [r3, #0]
 801b26c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b270:	f5a3 7229 	sub.w	r2, r3, #676	; 0x2a4
 801b274:	2308      	movs	r3, #8
 801b276:	6013      	str	r3, [r2, #0]
 801b278:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b27c:	f5a3 722a 	sub.w	r2, r3, #680	; 0x2a8
 801b280:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b284:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 801b288:	681b      	ldr	r3, [r3, #0]
 801b28a:	6013      	str	r3, [r2, #0]
 801b28c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b290:	f5a3 722b 	sub.w	r2, r3, #684	; 0x2ac
 801b294:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b298:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 801b29c:	681b      	ldr	r3, [r3, #0]
 801b29e:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801b2a0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b2a4:	f5a3 722b 	sub.w	r2, r3, #684	; 0x2ac
 801b2a8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b2ac:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 801b2b0:	681b      	ldr	r3, [r3, #0]
 801b2b2:	f003 031f 	and.w	r3, r3, #31
 801b2b6:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801b2b8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b2bc:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 801b2c0:	681b      	ldr	r3, [r3, #0]
 801b2c2:	2b00      	cmp	r3, #0
 801b2c4:	d105      	bne.n	801b2d2 <arm_nn_mat_mult_nt_t_s8+0x13de>
    return op1;
 801b2c6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b2ca:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 801b2ce:	681a      	ldr	r2, [r3, #0]
 801b2d0:	e00a      	b.n	801b2e8 <arm_nn_mat_mult_nt_t_s8+0x13f4>
  return (op1 >> op2) | (op1 << (32U - op2));
 801b2d2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b2d6:	f5a3 722a 	sub.w	r2, r3, #680	; 0x2a8
 801b2da:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b2de:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 801b2e2:	6812      	ldr	r2, [r2, #0]
 801b2e4:	681b      	ldr	r3, [r3, #0]
 801b2e6:	41da      	rors	r2, r3
 801b2e8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b2ec:	f5a3 732c 	sub.w	r3, r3, #688	; 0x2b0
 801b2f0:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801b2f2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b2f6:	f5a3 732c 	sub.w	r3, r3, #688	; 0x2b0
 801b2fa:	681b      	ldr	r3, [r3, #0]
 801b2fc:	fa2f f283 	sxtb16	r2, r3
 801b300:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b304:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 801b308:	601a      	str	r2, [r3, #0]
  return(result);
 801b30a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b30e:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 801b312:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801b314:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b318:	f5a3 732e 	sub.w	r3, r3, #696	; 0x2b8
 801b31c:	601a      	str	r2, [r3, #0]
  return result;
 801b31e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b322:	f5a3 732e 	sub.w	r3, r3, #696	; 0x2b8
 801b326:	681b      	ldr	r3, [r3, #0]
 801b328:	f8c7 3a58 	str.w	r3, [r7, #2648]	; 0xa58
                val0 = __SXTB16_RORn(val0, 8);
 801b32c:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 801b330:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b334:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 801b338:	601a      	str	r2, [r3, #0]
 801b33a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b33e:	f5a3 7222 	sub.w	r2, r3, #648	; 0x288
 801b342:	2308      	movs	r3, #8
 801b344:	6013      	str	r3, [r2, #0]
 801b346:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b34a:	f5a3 7223 	sub.w	r2, r3, #652	; 0x28c
 801b34e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b352:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 801b356:	681b      	ldr	r3, [r3, #0]
 801b358:	6013      	str	r3, [r2, #0]
 801b35a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b35e:	f5a3 7224 	sub.w	r2, r3, #656	; 0x290
 801b362:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b366:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 801b36a:	681b      	ldr	r3, [r3, #0]
 801b36c:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801b36e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b372:	f5a3 7224 	sub.w	r2, r3, #656	; 0x290
 801b376:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b37a:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 801b37e:	681b      	ldr	r3, [r3, #0]
 801b380:	f003 031f 	and.w	r3, r3, #31
 801b384:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801b386:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b38a:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 801b38e:	681b      	ldr	r3, [r3, #0]
 801b390:	2b00      	cmp	r3, #0
 801b392:	d105      	bne.n	801b3a0 <arm_nn_mat_mult_nt_t_s8+0x14ac>
    return op1;
 801b394:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b398:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 801b39c:	681a      	ldr	r2, [r3, #0]
 801b39e:	e00a      	b.n	801b3b6 <arm_nn_mat_mult_nt_t_s8+0x14c2>
  return (op1 >> op2) | (op1 << (32U - op2));
 801b3a0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b3a4:	f5a3 7223 	sub.w	r2, r3, #652	; 0x28c
 801b3a8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b3ac:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 801b3b0:	6812      	ldr	r2, [r2, #0]
 801b3b2:	681b      	ldr	r3, [r3, #0]
 801b3b4:	41da      	rors	r2, r3
 801b3b6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b3ba:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 801b3be:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801b3c0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b3c4:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 801b3c8:	681b      	ldr	r3, [r3, #0]
 801b3ca:	fa2f f283 	sxtb16	r2, r3
 801b3ce:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b3d2:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 801b3d6:	601a      	str	r2, [r3, #0]
  return(result);
 801b3d8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b3dc:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 801b3e0:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801b3e2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b3e6:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 801b3ea:	601a      	str	r2, [r3, #0]
  return result;
 801b3ec:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b3f0:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 801b3f4:	681b      	ldr	r3, [r3, #0]
 801b3f6:	f8c7 3a50 	str.w	r3, [r7, #2640]	; 0xa50

                // 4 x MAC res00, res01
                res00 = __SMLAD(val3, val2, res00);
 801b3fa:	f8d7 2a4c 	ldr.w	r2, [r7, #2636]	; 0xa4c
 801b3fe:	f8d7 1a54 	ldr.w	r1, [r7, #2644]	; 0xa54
 801b402:	f8d7 0abc 	ldr.w	r0, [r7, #2748]	; 0xabc
 801b406:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b40a:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 801b40e:	601a      	str	r2, [r3, #0]
 801b410:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b414:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 801b418:	6019      	str	r1, [r3, #0]
 801b41a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b41e:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 801b422:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801b424:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b428:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 801b42c:	6819      	ldr	r1, [r3, #0]
 801b42e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b432:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 801b436:	681a      	ldr	r2, [r3, #0]
 801b438:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b43c:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 801b440:	681b      	ldr	r3, [r3, #0]
 801b442:	fb21 3202 	smlad	r2, r1, r2, r3
 801b446:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b44a:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 801b44e:	601a      	str	r2, [r3, #0]
  return(result);
 801b450:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b454:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 801b458:	681b      	ldr	r3, [r3, #0]
 801b45a:	f8c7 3abc 	str.w	r3, [r7, #2748]	; 0xabc
                val5 = __SXTB16(val4);
 801b45e:	f8d7 2a48 	ldr.w	r2, [r7, #2632]	; 0xa48
 801b462:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b466:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 801b46a:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801b46c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b470:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 801b474:	681b      	ldr	r3, [r3, #0]
 801b476:	fa2f f283 	sxtb16	r2, r3
 801b47a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b47e:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 801b482:	601a      	str	r2, [r3, #0]
  return(result);
 801b484:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b488:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 801b48c:	681b      	ldr	r3, [r3, #0]
 801b48e:	f8c7 3a44 	str.w	r3, [r7, #2628]	; 0xa44
                res00 = __SMLAD(val0, val1, res00);
 801b492:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 801b496:	f8d7 1a58 	ldr.w	r1, [r7, #2648]	; 0xa58
 801b49a:	f8d7 0abc 	ldr.w	r0, [r7, #2748]	; 0xabc
 801b49e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b4a2:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 801b4a6:	601a      	str	r2, [r3, #0]
 801b4a8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b4ac:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 801b4b0:	6019      	str	r1, [r3, #0]
 801b4b2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b4b6:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 801b4ba:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801b4bc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b4c0:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 801b4c4:	6819      	ldr	r1, [r3, #0]
 801b4c6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b4ca:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 801b4ce:	681a      	ldr	r2, [r3, #0]
 801b4d0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b4d4:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 801b4d8:	681b      	ldr	r3, [r3, #0]
 801b4da:	fb21 3202 	smlad	r2, r1, r2, r3
 801b4de:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b4e2:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 801b4e6:	601a      	str	r2, [r3, #0]
  return(result);
 801b4e8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b4ec:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 801b4f0:	681b      	ldr	r3, [r3, #0]
 801b4f2:	f8c7 3abc 	str.w	r3, [r7, #2748]	; 0xabc
                val4 = __SXTB16_RORn(val4, 8);
 801b4f6:	f8d7 2a48 	ldr.w	r2, [r7, #2632]	; 0xa48
 801b4fa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b4fe:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 801b502:	601a      	str	r2, [r3, #0]
 801b504:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b508:	f5a3 7211 	sub.w	r2, r3, #580	; 0x244
 801b50c:	2308      	movs	r3, #8
 801b50e:	6013      	str	r3, [r2, #0]
 801b510:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b514:	f5a3 7212 	sub.w	r2, r3, #584	; 0x248
 801b518:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b51c:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 801b520:	681b      	ldr	r3, [r3, #0]
 801b522:	6013      	str	r3, [r2, #0]
 801b524:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b528:	f5a3 7213 	sub.w	r2, r3, #588	; 0x24c
 801b52c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b530:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 801b534:	681b      	ldr	r3, [r3, #0]
 801b536:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801b538:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b53c:	f5a3 7213 	sub.w	r2, r3, #588	; 0x24c
 801b540:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b544:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 801b548:	681b      	ldr	r3, [r3, #0]
 801b54a:	f003 031f 	and.w	r3, r3, #31
 801b54e:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801b550:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b554:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 801b558:	681b      	ldr	r3, [r3, #0]
 801b55a:	2b00      	cmp	r3, #0
 801b55c:	d105      	bne.n	801b56a <arm_nn_mat_mult_nt_t_s8+0x1676>
    return op1;
 801b55e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b562:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 801b566:	681a      	ldr	r2, [r3, #0]
 801b568:	e00a      	b.n	801b580 <arm_nn_mat_mult_nt_t_s8+0x168c>
  return (op1 >> op2) | (op1 << (32U - op2));
 801b56a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b56e:	f5a3 7212 	sub.w	r2, r3, #584	; 0x248
 801b572:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b576:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 801b57a:	6812      	ldr	r2, [r2, #0]
 801b57c:	681b      	ldr	r3, [r3, #0]
 801b57e:	41da      	rors	r2, r3
 801b580:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b584:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 801b588:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801b58a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b58e:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 801b592:	681b      	ldr	r3, [r3, #0]
 801b594:	fa2f f283 	sxtb16	r2, r3
 801b598:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b59c:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 801b5a0:	601a      	str	r2, [r3, #0]
  return(result);
 801b5a2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b5a6:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 801b5aa:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801b5ac:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b5b0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 801b5b4:	601a      	str	r2, [r3, #0]
  return result;
 801b5b6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b5ba:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 801b5be:	681b      	ldr	r3, [r3, #0]
 801b5c0:	f8c7 3a48 	str.w	r3, [r7, #2632]	; 0xa48
                res01 = __SMLAD(val3, val5, res01);
 801b5c4:	f8d7 2a4c 	ldr.w	r2, [r7, #2636]	; 0xa4c
 801b5c8:	f8d7 1a44 	ldr.w	r1, [r7, #2628]	; 0xa44
 801b5cc:	f8d7 0ab8 	ldr.w	r0, [r7, #2744]	; 0xab8
 801b5d0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b5d4:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 801b5d8:	601a      	str	r2, [r3, #0]
 801b5da:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b5de:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 801b5e2:	6019      	str	r1, [r3, #0]
 801b5e4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b5e8:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 801b5ec:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801b5ee:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b5f2:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 801b5f6:	6819      	ldr	r1, [r3, #0]
 801b5f8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b5fc:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 801b600:	681a      	ldr	r2, [r3, #0]
 801b602:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b606:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 801b60a:	681b      	ldr	r3, [r3, #0]
 801b60c:	fb21 3202 	smlad	r2, r1, r2, r3
 801b610:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b614:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 801b618:	601a      	str	r2, [r3, #0]
  return(result);
 801b61a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b61e:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 801b622:	681b      	ldr	r3, [r3, #0]
 801b624:	f8c7 3ab8 	str.w	r3, [r7, #2744]	; 0xab8
                res01 = __SMLAD(val0, val4, res01);
 801b628:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 801b62c:	f8d7 1a48 	ldr.w	r1, [r7, #2632]	; 0xa48
 801b630:	f8d7 0ab8 	ldr.w	r0, [r7, #2744]	; 0xab8
 801b634:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b638:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 801b63c:	601a      	str	r2, [r3, #0]
 801b63e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b642:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 801b646:	6019      	str	r1, [r3, #0]
 801b648:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b64c:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 801b650:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801b652:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b656:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 801b65a:	6819      	ldr	r1, [r3, #0]
 801b65c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b660:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 801b664:	681a      	ldr	r2, [r3, #0]
 801b666:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b66a:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 801b66e:	681b      	ldr	r3, [r3, #0]
 801b670:	fb21 3202 	smlad	r2, r1, r2, r3
 801b674:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b678:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 801b67c:	601a      	str	r2, [r3, #0]
  return(result);
 801b67e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b682:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 801b686:	681b      	ldr	r3, [r3, #0]
 801b688:	f8c7 3ab8 	str.w	r3, [r7, #2744]	; 0xab8

                // 4 x MAC res10, res11
                val0 = arm_nn_read_q7x4((const q7_t *)&lhs_ptr[off0]);
 801b68c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b690:	f6a3 1348 	subw	r3, r3, #2376	; 0x948
 801b694:	681a      	ldr	r2, [r3, #0]
 801b696:	f8d7 3a84 	ldr.w	r3, [r7, #2692]	; 0xa84
 801b69a:	441a      	add	r2, r3
 801b69c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b6a0:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 801b6a4:	601a      	str	r2, [r3, #0]
 801b6a6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b6aa:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 801b6ae:	681b      	ldr	r3, [r3, #0]
 801b6b0:	681b      	ldr	r3, [r3, #0]
 801b6b2:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801b6b4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b6b8:	f5a3 631a 	sub.w	r3, r3, #2464	; 0x9a0
 801b6bc:	601a      	str	r2, [r3, #0]
    return (val);
 801b6be:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b6c2:	f5a3 631a 	sub.w	r3, r3, #2464	; 0x9a0
 801b6c6:	681b      	ldr	r3, [r3, #0]
 801b6c8:	f8c7 3a50 	str.w	r3, [r7, #2640]	; 0xa50
                val3 = __SXTB16(val0);
 801b6cc:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 801b6d0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b6d4:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 801b6d8:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801b6da:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b6de:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 801b6e2:	681b      	ldr	r3, [r3, #0]
 801b6e4:	fa2f f283 	sxtb16	r2, r3
 801b6e8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b6ec:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 801b6f0:	601a      	str	r2, [r3, #0]
  return(result);
 801b6f2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b6f6:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 801b6fa:	681b      	ldr	r3, [r3, #0]
 801b6fc:	f8c7 3a4c 	str.w	r3, [r7, #2636]	; 0xa4c
                val0 = __SXTB16_RORn(val0, 8);
 801b700:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 801b704:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b708:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 801b70c:	601a      	str	r2, [r3, #0]
 801b70e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b712:	f5a3 72fe 	sub.w	r2, r3, #508	; 0x1fc
 801b716:	2308      	movs	r3, #8
 801b718:	6013      	str	r3, [r2, #0]
 801b71a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b71e:	f5a3 7200 	sub.w	r2, r3, #512	; 0x200
 801b722:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b726:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 801b72a:	681b      	ldr	r3, [r3, #0]
 801b72c:	6013      	str	r3, [r2, #0]
 801b72e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b732:	f5a3 7201 	sub.w	r2, r3, #516	; 0x204
 801b736:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b73a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 801b73e:	681b      	ldr	r3, [r3, #0]
 801b740:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801b742:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b746:	f5a3 7201 	sub.w	r2, r3, #516	; 0x204
 801b74a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b74e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 801b752:	681b      	ldr	r3, [r3, #0]
 801b754:	f003 031f 	and.w	r3, r3, #31
 801b758:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801b75a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b75e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 801b762:	681b      	ldr	r3, [r3, #0]
 801b764:	2b00      	cmp	r3, #0
 801b766:	d105      	bne.n	801b774 <arm_nn_mat_mult_nt_t_s8+0x1880>
    return op1;
 801b768:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b76c:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 801b770:	681a      	ldr	r2, [r3, #0]
 801b772:	e00a      	b.n	801b78a <arm_nn_mat_mult_nt_t_s8+0x1896>
  return (op1 >> op2) | (op1 << (32U - op2));
 801b774:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b778:	f5a3 7200 	sub.w	r2, r3, #512	; 0x200
 801b77c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b780:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 801b784:	6812      	ldr	r2, [r2, #0]
 801b786:	681b      	ldr	r3, [r3, #0]
 801b788:	41da      	rors	r2, r3
 801b78a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b78e:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 801b792:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801b794:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b798:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 801b79c:	681b      	ldr	r3, [r3, #0]
 801b79e:	fa2f f283 	sxtb16	r2, r3
 801b7a2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b7a6:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 801b7aa:	601a      	str	r2, [r3, #0]
  return(result);
 801b7ac:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b7b0:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 801b7b4:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801b7b6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b7ba:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 801b7be:	601a      	str	r2, [r3, #0]
  return result;
 801b7c0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b7c4:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 801b7c8:	681b      	ldr	r3, [r3, #0]
 801b7ca:	f8c7 3a50 	str.w	r3, [r7, #2640]	; 0xa50
                res10 = __SMLAD(val3, val2, res10);
 801b7ce:	f8d7 2a4c 	ldr.w	r2, [r7, #2636]	; 0xa4c
 801b7d2:	f8d7 1a54 	ldr.w	r1, [r7, #2644]	; 0xa54
 801b7d6:	f8d7 0ab4 	ldr.w	r0, [r7, #2740]	; 0xab4
 801b7da:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b7de:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 801b7e2:	601a      	str	r2, [r3, #0]
 801b7e4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b7e8:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 801b7ec:	6019      	str	r1, [r3, #0]
 801b7ee:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b7f2:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 801b7f6:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801b7f8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b7fc:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 801b800:	6819      	ldr	r1, [r3, #0]
 801b802:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b806:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 801b80a:	681a      	ldr	r2, [r3, #0]
 801b80c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b810:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 801b814:	681b      	ldr	r3, [r3, #0]
 801b816:	fb21 3202 	smlad	r2, r1, r2, r3
 801b81a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b81e:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 801b822:	601a      	str	r2, [r3, #0]
  return(result);
 801b824:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b828:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 801b82c:	681b      	ldr	r3, [r3, #0]
 801b82e:	f8c7 3ab4 	str.w	r3, [r7, #2740]	; 0xab4
                res11 = __SMLAD(val3, val5, res11);
 801b832:	f8d7 2a4c 	ldr.w	r2, [r7, #2636]	; 0xa4c
 801b836:	f8d7 1a44 	ldr.w	r1, [r7, #2628]	; 0xa44
 801b83a:	f8d7 0ab0 	ldr.w	r0, [r7, #2736]	; 0xab0
 801b83e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b842:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 801b846:	601a      	str	r2, [r3, #0]
 801b848:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b84c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 801b850:	6019      	str	r1, [r3, #0]
 801b852:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b856:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 801b85a:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801b85c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b860:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 801b864:	6819      	ldr	r1, [r3, #0]
 801b866:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b86a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 801b86e:	681a      	ldr	r2, [r3, #0]
 801b870:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b874:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 801b878:	681b      	ldr	r3, [r3, #0]
 801b87a:	fb21 3202 	smlad	r2, r1, r2, r3
 801b87e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b882:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 801b886:	601a      	str	r2, [r3, #0]
  return(result);
 801b888:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b88c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 801b890:	681b      	ldr	r3, [r3, #0]
 801b892:	f8c7 3ab0 	str.w	r3, [r7, #2736]	; 0xab0
                res10 = __SMLAD(val0, val1, res10);
 801b896:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 801b89a:	f8d7 1a58 	ldr.w	r1, [r7, #2648]	; 0xa58
 801b89e:	f8d7 0ab4 	ldr.w	r0, [r7, #2740]	; 0xab4
 801b8a2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b8a6:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 801b8aa:	601a      	str	r2, [r3, #0]
 801b8ac:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b8b0:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 801b8b4:	6019      	str	r1, [r3, #0]
 801b8b6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b8ba:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 801b8be:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801b8c0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b8c4:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 801b8c8:	6819      	ldr	r1, [r3, #0]
 801b8ca:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b8ce:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 801b8d2:	681a      	ldr	r2, [r3, #0]
 801b8d4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b8d8:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 801b8dc:	681b      	ldr	r3, [r3, #0]
 801b8de:	fb21 3202 	smlad	r2, r1, r2, r3
 801b8e2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b8e6:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 801b8ea:	601a      	str	r2, [r3, #0]
  return(result);
 801b8ec:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b8f0:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 801b8f4:	681b      	ldr	r3, [r3, #0]
 801b8f6:	f8c7 3ab4 	str.w	r3, [r7, #2740]	; 0xab4
 801b8fa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b8fe:	f5a3 72e2 	sub.w	r2, r3, #452	; 0x1c4
 801b902:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 801b906:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801b908:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b90c:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 801b910:	681b      	ldr	r3, [r3, #0]
 801b912:	681b      	ldr	r3, [r3, #0]
 801b914:	681b      	ldr	r3, [r3, #0]
 801b916:	461a      	mov	r2, r3
 801b918:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b91c:	f6a3 13a4 	subw	r3, r3, #2468	; 0x9a4
 801b920:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801b922:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b926:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 801b92a:	681b      	ldr	r3, [r3, #0]
 801b92c:	681b      	ldr	r3, [r3, #0]
 801b92e:	1d1a      	adds	r2, r3, #4
 801b930:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b934:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 801b938:	681b      	ldr	r3, [r3, #0]
 801b93a:	601a      	str	r2, [r3, #0]
    return (val);
 801b93c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b940:	f6a3 13a4 	subw	r3, r3, #2468	; 0x9a4
 801b944:	681b      	ldr	r3, [r3, #0]
                val1 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 801b946:	f8c7 3a58 	str.w	r3, [r7, #2648]	; 0xa58
                res11 = __SMLAD(val0, val4, res11);
 801b94a:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 801b94e:	f8d7 1a48 	ldr.w	r1, [r7, #2632]	; 0xa48
 801b952:	f8d7 0ab0 	ldr.w	r0, [r7, #2736]	; 0xab0
 801b956:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b95a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 801b95e:	601a      	str	r2, [r3, #0]
 801b960:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b964:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 801b968:	6019      	str	r1, [r3, #0]
 801b96a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b96e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 801b972:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801b974:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b978:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 801b97c:	6819      	ldr	r1, [r3, #0]
 801b97e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b982:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 801b986:	681a      	ldr	r2, [r3, #0]
 801b988:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b98c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 801b990:	681b      	ldr	r3, [r3, #0]
 801b992:	fb21 3202 	smlad	r2, r1, r2, r3
 801b996:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b99a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 801b99e:	601a      	str	r2, [r3, #0]
  return(result);
 801b9a0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b9a4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 801b9a8:	681b      	ldr	r3, [r3, #0]
 801b9aa:	f8c7 3ab0 	str.w	r3, [r7, #2736]	; 0xab0

                val4 = arm_nn_read_q7x4((const q7_t *)&rhs_ptr[off0]);
 801b9ae:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b9b2:	f6a3 134c 	subw	r3, r3, #2380	; 0x94c
 801b9b6:	681a      	ldr	r2, [r3, #0]
 801b9b8:	f8d7 3a84 	ldr.w	r3, [r7, #2692]	; 0xa84
 801b9bc:	441a      	add	r2, r3
 801b9be:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b9c2:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 801b9c6:	601a      	str	r2, [r3, #0]
 801b9c8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b9cc:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 801b9d0:	681b      	ldr	r3, [r3, #0]
 801b9d2:	681b      	ldr	r3, [r3, #0]
 801b9d4:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801b9d6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b9da:	f6a3 13a8 	subw	r3, r3, #2472	; 0x9a8
 801b9de:	601a      	str	r2, [r3, #0]
    return (val);
 801b9e0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b9e4:	f6a3 13a8 	subw	r3, r3, #2472	; 0x9a8
 801b9e8:	681b      	ldr	r3, [r3, #0]
 801b9ea:	f8c7 3a48 	str.w	r3, [r7, #2632]	; 0xa48
                val2 = __SXTB16(val1);
 801b9ee:	f8d7 2a58 	ldr.w	r2, [r7, #2648]	; 0xa58
 801b9f2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801b9f6:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 801b9fa:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801b9fc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ba00:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 801ba04:	681b      	ldr	r3, [r3, #0]
 801ba06:	fa2f f283 	sxtb16	r2, r3
 801ba0a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ba0e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 801ba12:	601a      	str	r2, [r3, #0]
  return(result);
 801ba14:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ba18:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 801ba1c:	681b      	ldr	r3, [r3, #0]
 801ba1e:	f8c7 3a54 	str.w	r3, [r7, #2644]	; 0xa54
 801ba22:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ba26:	f5a3 72d2 	sub.w	r2, r3, #420	; 0x1a4
 801ba2a:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 801ba2e:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801ba30:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ba34:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 801ba38:	681b      	ldr	r3, [r3, #0]
 801ba3a:	681b      	ldr	r3, [r3, #0]
 801ba3c:	681b      	ldr	r3, [r3, #0]
 801ba3e:	461a      	mov	r2, r3
 801ba40:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ba44:	f6a3 13ac 	subw	r3, r3, #2476	; 0x9ac
 801ba48:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801ba4a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ba4e:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 801ba52:	681b      	ldr	r3, [r3, #0]
 801ba54:	681b      	ldr	r3, [r3, #0]
 801ba56:	1d1a      	adds	r2, r3, #4
 801ba58:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ba5c:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 801ba60:	681b      	ldr	r3, [r3, #0]
 801ba62:	601a      	str	r2, [r3, #0]
    return (val);
 801ba64:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ba68:	f6a3 13ac 	subw	r3, r3, #2476	; 0x9ac
 801ba6c:	681b      	ldr	r3, [r3, #0]
                val0 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 801ba6e:	f8c7 3a50 	str.w	r3, [r7, #2640]	; 0xa50
                val3 = __SXTB16(val0);
 801ba72:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 801ba76:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ba7a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 801ba7e:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801ba80:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ba84:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 801ba88:	681b      	ldr	r3, [r3, #0]
 801ba8a:	fa2f f283 	sxtb16	r2, r3
 801ba8e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ba92:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 801ba96:	601a      	str	r2, [r3, #0]
  return(result);
 801ba98:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ba9c:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 801baa0:	681b      	ldr	r3, [r3, #0]
 801baa2:	f8c7 3a4c 	str.w	r3, [r7, #2636]	; 0xa4c
                val1 = __SXTB16_RORn(val1, 8);
 801baa6:	f8d7 2a58 	ldr.w	r2, [r7, #2648]	; 0xa58
 801baaa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801baae:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 801bab2:	601a      	str	r2, [r3, #0]
 801bab4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bab8:	f5a3 72c2 	sub.w	r2, r3, #388	; 0x184
 801babc:	2308      	movs	r3, #8
 801babe:	6013      	str	r3, [r2, #0]
 801bac0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bac4:	f5a3 72c4 	sub.w	r2, r3, #392	; 0x188
 801bac8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bacc:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 801bad0:	681b      	ldr	r3, [r3, #0]
 801bad2:	6013      	str	r3, [r2, #0]
 801bad4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bad8:	f5a3 72c6 	sub.w	r2, r3, #396	; 0x18c
 801badc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bae0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 801bae4:	681b      	ldr	r3, [r3, #0]
 801bae6:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801bae8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801baec:	f5a3 72c6 	sub.w	r2, r3, #396	; 0x18c
 801baf0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801baf4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 801baf8:	681b      	ldr	r3, [r3, #0]
 801bafa:	f003 031f 	and.w	r3, r3, #31
 801bafe:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801bb00:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bb04:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 801bb08:	681b      	ldr	r3, [r3, #0]
 801bb0a:	2b00      	cmp	r3, #0
 801bb0c:	d105      	bne.n	801bb1a <arm_nn_mat_mult_nt_t_s8+0x1c26>
    return op1;
 801bb0e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bb12:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 801bb16:	681a      	ldr	r2, [r3, #0]
 801bb18:	e00a      	b.n	801bb30 <arm_nn_mat_mult_nt_t_s8+0x1c3c>
  return (op1 >> op2) | (op1 << (32U - op2));
 801bb1a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bb1e:	f5a3 72c4 	sub.w	r2, r3, #392	; 0x188
 801bb22:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bb26:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 801bb2a:	6812      	ldr	r2, [r2, #0]
 801bb2c:	681b      	ldr	r3, [r3, #0]
 801bb2e:	41da      	rors	r2, r3
 801bb30:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bb34:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 801bb38:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801bb3a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bb3e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 801bb42:	681b      	ldr	r3, [r3, #0]
 801bb44:	fa2f f283 	sxtb16	r2, r3
 801bb48:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bb4c:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 801bb50:	601a      	str	r2, [r3, #0]
  return(result);
 801bb52:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bb56:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 801bb5a:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801bb5c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bb60:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 801bb64:	601a      	str	r2, [r3, #0]
  return result;
 801bb66:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bb6a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 801bb6e:	681b      	ldr	r3, [r3, #0]
 801bb70:	f8c7 3a58 	str.w	r3, [r7, #2648]	; 0xa58
                val0 = __SXTB16_RORn(val0, 8);
 801bb74:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 801bb78:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bb7c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 801bb80:	601a      	str	r2, [r3, #0]
 801bb82:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bb86:	f5a3 72b4 	sub.w	r2, r3, #360	; 0x168
 801bb8a:	2308      	movs	r3, #8
 801bb8c:	6013      	str	r3, [r2, #0]
 801bb8e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bb92:	f5a3 72b6 	sub.w	r2, r3, #364	; 0x16c
 801bb96:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bb9a:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 801bb9e:	681b      	ldr	r3, [r3, #0]
 801bba0:	6013      	str	r3, [r2, #0]
 801bba2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bba6:	f5a3 72b8 	sub.w	r2, r3, #368	; 0x170
 801bbaa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bbae:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 801bbb2:	681b      	ldr	r3, [r3, #0]
 801bbb4:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801bbb6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bbba:	f5a3 72b8 	sub.w	r2, r3, #368	; 0x170
 801bbbe:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bbc2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 801bbc6:	681b      	ldr	r3, [r3, #0]
 801bbc8:	f003 031f 	and.w	r3, r3, #31
 801bbcc:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801bbce:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bbd2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 801bbd6:	681b      	ldr	r3, [r3, #0]
 801bbd8:	2b00      	cmp	r3, #0
 801bbda:	d105      	bne.n	801bbe8 <arm_nn_mat_mult_nt_t_s8+0x1cf4>
    return op1;
 801bbdc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bbe0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 801bbe4:	681a      	ldr	r2, [r3, #0]
 801bbe6:	e00a      	b.n	801bbfe <arm_nn_mat_mult_nt_t_s8+0x1d0a>
  return (op1 >> op2) | (op1 << (32U - op2));
 801bbe8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bbec:	f5a3 72b6 	sub.w	r2, r3, #364	; 0x16c
 801bbf0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bbf4:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 801bbf8:	6812      	ldr	r2, [r2, #0]
 801bbfa:	681b      	ldr	r3, [r3, #0]
 801bbfc:	41da      	rors	r2, r3
 801bbfe:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bc02:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 801bc06:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801bc08:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bc0c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 801bc10:	681b      	ldr	r3, [r3, #0]
 801bc12:	fa2f f283 	sxtb16	r2, r3
 801bc16:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bc1a:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 801bc1e:	601a      	str	r2, [r3, #0]
  return(result);
 801bc20:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bc24:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 801bc28:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801bc2a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bc2e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 801bc32:	601a      	str	r2, [r3, #0]
  return result;
 801bc34:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bc38:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 801bc3c:	681b      	ldr	r3, [r3, #0]
 801bc3e:	f8c7 3a50 	str.w	r3, [r7, #2640]	; 0xa50

                // 4 x MAC res00, res01
                res00 = __SMLAD(val3, val2, res00);
 801bc42:	f8d7 2a4c 	ldr.w	r2, [r7, #2636]	; 0xa4c
 801bc46:	f8d7 1a54 	ldr.w	r1, [r7, #2644]	; 0xa54
 801bc4a:	f8d7 0abc 	ldr.w	r0, [r7, #2748]	; 0xabc
 801bc4e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bc52:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 801bc56:	601a      	str	r2, [r3, #0]
 801bc58:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bc5c:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 801bc60:	6019      	str	r1, [r3, #0]
 801bc62:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bc66:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 801bc6a:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801bc6c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bc70:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 801bc74:	6819      	ldr	r1, [r3, #0]
 801bc76:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bc7a:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 801bc7e:	681a      	ldr	r2, [r3, #0]
 801bc80:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bc84:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 801bc88:	681b      	ldr	r3, [r3, #0]
 801bc8a:	fb21 3202 	smlad	r2, r1, r2, r3
 801bc8e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bc92:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 801bc96:	601a      	str	r2, [r3, #0]
  return(result);
 801bc98:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bc9c:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 801bca0:	681b      	ldr	r3, [r3, #0]
 801bca2:	f8c7 3abc 	str.w	r3, [r7, #2748]	; 0xabc
                val5 = __SXTB16(val4);
 801bca6:	f8d7 2a48 	ldr.w	r2, [r7, #2632]	; 0xa48
 801bcaa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bcae:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 801bcb2:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801bcb4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bcb8:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 801bcbc:	681b      	ldr	r3, [r3, #0]
 801bcbe:	fa2f f283 	sxtb16	r2, r3
 801bcc2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bcc6:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 801bcca:	601a      	str	r2, [r3, #0]
  return(result);
 801bccc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bcd0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 801bcd4:	681b      	ldr	r3, [r3, #0]
 801bcd6:	f8c7 3a44 	str.w	r3, [r7, #2628]	; 0xa44
                res00 = __SMLAD(val0, val1, res00);
 801bcda:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 801bcde:	f8d7 1a58 	ldr.w	r1, [r7, #2648]	; 0xa58
 801bce2:	f8d7 0abc 	ldr.w	r0, [r7, #2748]	; 0xabc
 801bce6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bcea:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 801bcee:	601a      	str	r2, [r3, #0]
 801bcf0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bcf4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 801bcf8:	6019      	str	r1, [r3, #0]
 801bcfa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bcfe:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 801bd02:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801bd04:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bd08:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 801bd0c:	6819      	ldr	r1, [r3, #0]
 801bd0e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bd12:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 801bd16:	681a      	ldr	r2, [r3, #0]
 801bd18:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bd1c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 801bd20:	681b      	ldr	r3, [r3, #0]
 801bd22:	fb21 3202 	smlad	r2, r1, r2, r3
 801bd26:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bd2a:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 801bd2e:	601a      	str	r2, [r3, #0]
  return(result);
 801bd30:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bd34:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 801bd38:	681b      	ldr	r3, [r3, #0]
 801bd3a:	f8c7 3abc 	str.w	r3, [r7, #2748]	; 0xabc
                val4 = __SXTB16_RORn(val4, 8);
 801bd3e:	f8d7 2a48 	ldr.w	r2, [r7, #2632]	; 0xa48
 801bd42:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bd46:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 801bd4a:	601a      	str	r2, [r3, #0]
 801bd4c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bd50:	f5a3 7292 	sub.w	r2, r3, #292	; 0x124
 801bd54:	2308      	movs	r3, #8
 801bd56:	6013      	str	r3, [r2, #0]
 801bd58:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bd5c:	f5a3 7294 	sub.w	r2, r3, #296	; 0x128
 801bd60:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bd64:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 801bd68:	681b      	ldr	r3, [r3, #0]
 801bd6a:	6013      	str	r3, [r2, #0]
 801bd6c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bd70:	f5a3 7296 	sub.w	r2, r3, #300	; 0x12c
 801bd74:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bd78:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 801bd7c:	681b      	ldr	r3, [r3, #0]
 801bd7e:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801bd80:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bd84:	f5a3 7296 	sub.w	r2, r3, #300	; 0x12c
 801bd88:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bd8c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801bd90:	681b      	ldr	r3, [r3, #0]
 801bd92:	f003 031f 	and.w	r3, r3, #31
 801bd96:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801bd98:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bd9c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801bda0:	681b      	ldr	r3, [r3, #0]
 801bda2:	2b00      	cmp	r3, #0
 801bda4:	d105      	bne.n	801bdb2 <arm_nn_mat_mult_nt_t_s8+0x1ebe>
    return op1;
 801bda6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bdaa:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 801bdae:	681a      	ldr	r2, [r3, #0]
 801bdb0:	e00a      	b.n	801bdc8 <arm_nn_mat_mult_nt_t_s8+0x1ed4>
  return (op1 >> op2) | (op1 << (32U - op2));
 801bdb2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bdb6:	f5a3 7294 	sub.w	r2, r3, #296	; 0x128
 801bdba:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bdbe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801bdc2:	6812      	ldr	r2, [r2, #0]
 801bdc4:	681b      	ldr	r3, [r3, #0]
 801bdc6:	41da      	rors	r2, r3
 801bdc8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bdcc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801bdd0:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801bdd2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bdd6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801bdda:	681b      	ldr	r3, [r3, #0]
 801bddc:	fa2f f283 	sxtb16	r2, r3
 801bde0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bde4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 801bde8:	601a      	str	r2, [r3, #0]
  return(result);
 801bdea:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bdee:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 801bdf2:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801bdf4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bdf8:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 801bdfc:	601a      	str	r2, [r3, #0]
  return result;
 801bdfe:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801be02:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 801be06:	681b      	ldr	r3, [r3, #0]
 801be08:	f8c7 3a48 	str.w	r3, [r7, #2632]	; 0xa48
                res01 = __SMLAD(val3, val5, res01);
 801be0c:	f8d7 2a4c 	ldr.w	r2, [r7, #2636]	; 0xa4c
 801be10:	f8d7 1a44 	ldr.w	r1, [r7, #2628]	; 0xa44
 801be14:	f8d7 0ab8 	ldr.w	r0, [r7, #2744]	; 0xab8
 801be18:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801be1c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 801be20:	601a      	str	r2, [r3, #0]
 801be22:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801be26:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 801be2a:	6019      	str	r1, [r3, #0]
 801be2c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801be30:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 801be34:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801be36:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801be3a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 801be3e:	6819      	ldr	r1, [r3, #0]
 801be40:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801be44:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 801be48:	681a      	ldr	r2, [r3, #0]
 801be4a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801be4e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 801be52:	681b      	ldr	r3, [r3, #0]
 801be54:	fb21 3202 	smlad	r2, r1, r2, r3
 801be58:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801be5c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 801be60:	601a      	str	r2, [r3, #0]
  return(result);
 801be62:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801be66:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 801be6a:	681b      	ldr	r3, [r3, #0]
 801be6c:	f8c7 3ab8 	str.w	r3, [r7, #2744]	; 0xab8
                res01 = __SMLAD(val0, val4, res01);
 801be70:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 801be74:	f8d7 1a48 	ldr.w	r1, [r7, #2632]	; 0xa48
 801be78:	f8d7 0ab8 	ldr.w	r0, [r7, #2744]	; 0xab8
 801be7c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801be80:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 801be84:	601a      	str	r2, [r3, #0]
 801be86:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801be8a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801be8e:	6019      	str	r1, [r3, #0]
 801be90:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801be94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801be98:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801be9a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801be9e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 801bea2:	6819      	ldr	r1, [r3, #0]
 801bea4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bea8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801beac:	681a      	ldr	r2, [r3, #0]
 801beae:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801beb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801beb6:	681b      	ldr	r3, [r3, #0]
 801beb8:	fb21 3202 	smlad	r2, r1, r2, r3
 801bebc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bec0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801bec4:	601a      	str	r2, [r3, #0]
  return(result);
 801bec6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801beca:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801bece:	681b      	ldr	r3, [r3, #0]
 801bed0:	f8c7 3ab8 	str.w	r3, [r7, #2744]	; 0xab8

                // 4 x MAC res10, res11
                val0 = arm_nn_read_q7x4((const q7_t *)&lhs_ptr[off0]);
 801bed4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bed8:	f6a3 1348 	subw	r3, r3, #2376	; 0x948
 801bedc:	681a      	ldr	r2, [r3, #0]
 801bede:	f8d7 3a84 	ldr.w	r3, [r7, #2692]	; 0xa84
 801bee2:	4413      	add	r3, r2
 801bee4:	f8c7 39dc 	str.w	r3, [r7, #2524]	; 0x9dc
 801bee8:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	; 0x9dc
 801beec:	681b      	ldr	r3, [r3, #0]
 801beee:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801bef0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801bef4:	f5a3 631b 	sub.w	r3, r3, #2480	; 0x9b0
 801bef8:	601a      	str	r2, [r3, #0]
    return (val);
 801befa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801befe:	f5a3 631b 	sub.w	r3, r3, #2480	; 0x9b0
 801bf02:	681b      	ldr	r3, [r3, #0]
 801bf04:	f8c7 3a50 	str.w	r3, [r7, #2640]	; 0xa50
                val3 = __SXTB16(val0);
 801bf08:	f8d7 3a50 	ldr.w	r3, [r7, #2640]	; 0xa50
 801bf0c:	f8c7 39e4 	str.w	r3, [r7, #2532]	; 0x9e4
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801bf10:	f8d7 39e4 	ldr.w	r3, [r7, #2532]	; 0x9e4
 801bf14:	fa2f f383 	sxtb16	r3, r3
 801bf18:	f8c7 39e0 	str.w	r3, [r7, #2528]	; 0x9e0
  return(result);
 801bf1c:	f8d7 39e0 	ldr.w	r3, [r7, #2528]	; 0x9e0
 801bf20:	f8c7 3a4c 	str.w	r3, [r7, #2636]	; 0xa4c
                val0 = __SXTB16_RORn(val0, 8);
 801bf24:	f8d7 3a50 	ldr.w	r3, [r7, #2640]	; 0xa50
 801bf28:	f8c7 3a00 	str.w	r3, [r7, #2560]	; 0xa00
 801bf2c:	2308      	movs	r3, #8
 801bf2e:	f8c7 39fc 	str.w	r3, [r7, #2556]	; 0x9fc
 801bf32:	f8d7 3a00 	ldr.w	r3, [r7, #2560]	; 0xa00
 801bf36:	f8c7 39f8 	str.w	r3, [r7, #2552]	; 0x9f8
 801bf3a:	f8d7 39fc 	ldr.w	r3, [r7, #2556]	; 0x9fc
 801bf3e:	f8c7 39f4 	str.w	r3, [r7, #2548]	; 0x9f4
  op2 %= 32U;
 801bf42:	f8d7 39f4 	ldr.w	r3, [r7, #2548]	; 0x9f4
 801bf46:	f003 031f 	and.w	r3, r3, #31
 801bf4a:	f8c7 39f4 	str.w	r3, [r7, #2548]	; 0x9f4
  if (op2 == 0U)
 801bf4e:	f8d7 39f4 	ldr.w	r3, [r7, #2548]	; 0x9f4
 801bf52:	2b00      	cmp	r3, #0
 801bf54:	d102      	bne.n	801bf5c <arm_nn_mat_mult_nt_t_s8+0x2068>
    return op1;
 801bf56:	f8d7 39f8 	ldr.w	r3, [r7, #2552]	; 0x9f8
 801bf5a:	e005      	b.n	801bf68 <arm_nn_mat_mult_nt_t_s8+0x2074>
  return (op1 >> op2) | (op1 << (32U - op2));
 801bf5c:	f8d7 29f8 	ldr.w	r2, [r7, #2552]	; 0x9f8
 801bf60:	f8d7 39f4 	ldr.w	r3, [r7, #2548]	; 0x9f4
 801bf64:	fa62 f303 	ror.w	r3, r2, r3
 801bf68:	f8c7 39f0 	str.w	r3, [r7, #2544]	; 0x9f0
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801bf6c:	f8d7 39f0 	ldr.w	r3, [r7, #2544]	; 0x9f0
 801bf70:	fa2f f383 	sxtb16	r3, r3
 801bf74:	f8c7 39ec 	str.w	r3, [r7, #2540]	; 0x9ec
  return(result);
 801bf78:	f8d7 39ec 	ldr.w	r3, [r7, #2540]	; 0x9ec
    result = __SXTB16(__ROR(op1, rotate)) ;
 801bf7c:	f8c7 39e8 	str.w	r3, [r7, #2536]	; 0x9e8
  return result;
 801bf80:	f8d7 39e8 	ldr.w	r3, [r7, #2536]	; 0x9e8
 801bf84:	f8c7 3a50 	str.w	r3, [r7, #2640]	; 0xa50
                res10 = __SMLAD(val3, val2, res10);
 801bf88:	f8d7 1a4c 	ldr.w	r1, [r7, #2636]	; 0xa4c
 801bf8c:	f8d7 2a54 	ldr.w	r2, [r7, #2644]	; 0xa54
 801bf90:	f8d7 3ab4 	ldr.w	r3, [r7, #2740]	; 0xab4
 801bf94:	f8c7 1a10 	str.w	r1, [r7, #2576]	; 0xa10
 801bf98:	f8c7 2a0c 	str.w	r2, [r7, #2572]	; 0xa0c
 801bf9c:	f8c7 3a08 	str.w	r3, [r7, #2568]	; 0xa08
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801bfa0:	f8d7 1a10 	ldr.w	r1, [r7, #2576]	; 0xa10
 801bfa4:	f8d7 2a0c 	ldr.w	r2, [r7, #2572]	; 0xa0c
 801bfa8:	f8d7 3a08 	ldr.w	r3, [r7, #2568]	; 0xa08
 801bfac:	fb21 3302 	smlad	r3, r1, r2, r3
 801bfb0:	f8c7 3a04 	str.w	r3, [r7, #2564]	; 0xa04
  return(result);
 801bfb4:	f8d7 3a04 	ldr.w	r3, [r7, #2564]	; 0xa04
 801bfb8:	f8c7 3ab4 	str.w	r3, [r7, #2740]	; 0xab4
                res11 = __SMLAD(val3, val5, res11);
 801bfbc:	f8d7 1a4c 	ldr.w	r1, [r7, #2636]	; 0xa4c
 801bfc0:	f8d7 2a44 	ldr.w	r2, [r7, #2628]	; 0xa44
 801bfc4:	f8d7 3ab0 	ldr.w	r3, [r7, #2736]	; 0xab0
 801bfc8:	f8c7 1a20 	str.w	r1, [r7, #2592]	; 0xa20
 801bfcc:	f8c7 2a1c 	str.w	r2, [r7, #2588]	; 0xa1c
 801bfd0:	f8c7 3a18 	str.w	r3, [r7, #2584]	; 0xa18
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801bfd4:	f8d7 1a20 	ldr.w	r1, [r7, #2592]	; 0xa20
 801bfd8:	f8d7 2a1c 	ldr.w	r2, [r7, #2588]	; 0xa1c
 801bfdc:	f8d7 3a18 	ldr.w	r3, [r7, #2584]	; 0xa18
 801bfe0:	fb21 3302 	smlad	r3, r1, r2, r3
 801bfe4:	f8c7 3a14 	str.w	r3, [r7, #2580]	; 0xa14
  return(result);
 801bfe8:	f8d7 3a14 	ldr.w	r3, [r7, #2580]	; 0xa14
 801bfec:	f8c7 3ab0 	str.w	r3, [r7, #2736]	; 0xab0
                res10 = __SMLAD(val0, val1, res10);
 801bff0:	f8d7 1a50 	ldr.w	r1, [r7, #2640]	; 0xa50
 801bff4:	f8d7 2a58 	ldr.w	r2, [r7, #2648]	; 0xa58
 801bff8:	f8d7 3ab4 	ldr.w	r3, [r7, #2740]	; 0xab4
 801bffc:	f8c7 1a30 	str.w	r1, [r7, #2608]	; 0xa30
 801c000:	f8c7 2a2c 	str.w	r2, [r7, #2604]	; 0xa2c
 801c004:	f8c7 3a28 	str.w	r3, [r7, #2600]	; 0xa28
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801c008:	f8d7 1a30 	ldr.w	r1, [r7, #2608]	; 0xa30
 801c00c:	f8d7 2a2c 	ldr.w	r2, [r7, #2604]	; 0xa2c
 801c010:	f8d7 3a28 	ldr.w	r3, [r7, #2600]	; 0xa28
 801c014:	fb21 3302 	smlad	r3, r1, r2, r3
 801c018:	f8c7 3a24 	str.w	r3, [r7, #2596]	; 0xa24
  return(result);
 801c01c:	f8d7 3a24 	ldr.w	r3, [r7, #2596]	; 0xa24
 801c020:	f8c7 3ab4 	str.w	r3, [r7, #2740]	; 0xab4
                res11 = __SMLAD(val0, val4, res11);
 801c024:	f8d7 1a50 	ldr.w	r1, [r7, #2640]	; 0xa50
 801c028:	f8d7 2a48 	ldr.w	r2, [r7, #2632]	; 0xa48
 801c02c:	f8d7 3ab0 	ldr.w	r3, [r7, #2736]	; 0xab0
 801c030:	f8c7 1a40 	str.w	r1, [r7, #2624]	; 0xa40
 801c034:	f8c7 2a3c 	str.w	r2, [r7, #2620]	; 0xa3c
 801c038:	f8c7 3a38 	str.w	r3, [r7, #2616]	; 0xa38
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801c03c:	f8d7 1a40 	ldr.w	r1, [r7, #2624]	; 0xa40
 801c040:	f8d7 2a3c 	ldr.w	r2, [r7, #2620]	; 0xa3c
 801c044:	f8d7 3a38 	ldr.w	r3, [r7, #2616]	; 0xa38
 801c048:	fb21 3302 	smlad	r3, r1, r2, r3
 801c04c:	f8c7 3a34 	str.w	r3, [r7, #2612]	; 0xa34
  return(result);
 801c050:	f8d7 3a34 	ldr.w	r3, [r7, #2612]	; 0xa34
 801c054:	f8c7 3ab0 	str.w	r3, [r7, #2736]	; 0xab0
            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 801c058:	f8d7 3aac 	ldr.w	r3, [r7, #2732]	; 0xaac
 801c05c:	3310      	adds	r3, #16
 801c05e:	f8c7 3aac 	str.w	r3, [r7, #2732]	; 0xaac
 801c062:	f8d7 3b08 	ldr.w	r3, [r7, #2824]	; 0xb08
 801c066:	f1a3 020f 	sub.w	r2, r3, #15
 801c06a:	f8d7 3aac 	ldr.w	r3, [r7, #2732]	; 0xaac
 801c06e:	4293      	cmp	r3, r2
 801c070:	f6fe a809 	blt.w	801a086 <arm_nn_mat_mult_nt_t_s8+0x192>
            }

            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 801c074:	e06c      	b.n	801c150 <arm_nn_mat_mult_nt_t_s8+0x225c>
            {
                q7_t rhs_value0 = rhs_ptr[0];
 801c076:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c07a:	f6a3 134c 	subw	r3, r3, #2380	; 0x94c
 801c07e:	681b      	ldr	r3, [r3, #0]
 801c080:	781b      	ldrb	r3, [r3, #0]
 801c082:	f887 3a5f 	strb.w	r3, [r7, #2655]	; 0xa5f
                q7_t rhs_value1 = rhs_ptr[rhs_cols];
 801c086:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c08a:	f6a3 134c 	subw	r3, r3, #2380	; 0x94c
 801c08e:	681a      	ldr	r2, [r3, #0]
 801c090:	f8d7 3b08 	ldr.w	r3, [r7, #2824]	; 0xb08
 801c094:	4413      	add	r3, r2
 801c096:	781b      	ldrb	r3, [r3, #0]
 801c098:	f887 3a5e 	strb.w	r3, [r7, #2654]	; 0xa5e
                q7_t lhs_value = lhs_ptr[0];
 801c09c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c0a0:	f6a3 1348 	subw	r3, r3, #2376	; 0x948
 801c0a4:	681b      	ldr	r3, [r3, #0]
 801c0a6:	781b      	ldrb	r3, [r3, #0]
 801c0a8:	f887 3a5d 	strb.w	r3, [r7, #2653]	; 0xa5d

                res00 += lhs_value * rhs_value0;
 801c0ac:	f997 2a5d 	ldrsb.w	r2, [r7, #2653]	; 0xa5d
 801c0b0:	f997 3a5f 	ldrsb.w	r3, [r7, #2655]	; 0xa5f
 801c0b4:	fb03 f202 	mul.w	r2, r3, r2
 801c0b8:	f8d7 3abc 	ldr.w	r3, [r7, #2748]	; 0xabc
 801c0bc:	4413      	add	r3, r2
 801c0be:	f8c7 3abc 	str.w	r3, [r7, #2748]	; 0xabc
                res01 += lhs_value * rhs_value1;
 801c0c2:	f997 2a5d 	ldrsb.w	r2, [r7, #2653]	; 0xa5d
 801c0c6:	f997 3a5e 	ldrsb.w	r3, [r7, #2654]	; 0xa5e
 801c0ca:	fb03 f202 	mul.w	r2, r3, r2
 801c0ce:	f8d7 3ab8 	ldr.w	r3, [r7, #2744]	; 0xab8
 801c0d2:	4413      	add	r3, r2
 801c0d4:	f8c7 3ab8 	str.w	r3, [r7, #2744]	; 0xab8

                lhs_value = lhs_ptr[rhs_cols];
 801c0d8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c0dc:	f6a3 1348 	subw	r3, r3, #2376	; 0x948
 801c0e0:	681a      	ldr	r2, [r3, #0]
 801c0e2:	f8d7 3b08 	ldr.w	r3, [r7, #2824]	; 0xb08
 801c0e6:	4413      	add	r3, r2
 801c0e8:	781b      	ldrb	r3, [r3, #0]
 801c0ea:	f887 3a5d 	strb.w	r3, [r7, #2653]	; 0xa5d
                res10 += lhs_value * rhs_value0;
 801c0ee:	f997 2a5d 	ldrsb.w	r2, [r7, #2653]	; 0xa5d
 801c0f2:	f997 3a5f 	ldrsb.w	r3, [r7, #2655]	; 0xa5f
 801c0f6:	fb03 f202 	mul.w	r2, r3, r2
 801c0fa:	f8d7 3ab4 	ldr.w	r3, [r7, #2740]	; 0xab4
 801c0fe:	4413      	add	r3, r2
 801c100:	f8c7 3ab4 	str.w	r3, [r7, #2740]	; 0xab4
                res11 += lhs_value * rhs_value1;
 801c104:	f997 2a5d 	ldrsb.w	r2, [r7, #2653]	; 0xa5d
 801c108:	f997 3a5e 	ldrsb.w	r3, [r7, #2654]	; 0xa5e
 801c10c:	fb03 f202 	mul.w	r2, r3, r2
 801c110:	f8d7 3ab0 	ldr.w	r3, [r7, #2736]	; 0xab0
 801c114:	4413      	add	r3, r2
 801c116:	f8c7 3ab0 	str.w	r3, [r7, #2736]	; 0xab0

                ++rhs_ptr;
 801c11a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c11e:	f6a3 134c 	subw	r3, r3, #2380	; 0x94c
 801c122:	681b      	ldr	r3, [r3, #0]
 801c124:	1c5a      	adds	r2, r3, #1
 801c126:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c12a:	f6a3 134c 	subw	r3, r3, #2380	; 0x94c
 801c12e:	601a      	str	r2, [r3, #0]
                ++lhs_ptr;
 801c130:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c134:	f6a3 1348 	subw	r3, r3, #2376	; 0x948
 801c138:	681b      	ldr	r3, [r3, #0]
 801c13a:	1c5a      	adds	r2, r3, #1
 801c13c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c140:	f6a3 1348 	subw	r3, r3, #2376	; 0x948
 801c144:	601a      	str	r2, [r3, #0]
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 801c146:	f8d7 3aac 	ldr.w	r3, [r7, #2732]	; 0xaac
 801c14a:	3301      	adds	r3, #1
 801c14c:	f8c7 3aac 	str.w	r3, [r7, #2732]	; 0xaac
 801c150:	f8d7 2aac 	ldr.w	r2, [r7, #2732]	; 0xaac
 801c154:	f8d7 3b08 	ldr.w	r3, [r7, #2824]	; 0xb08
 801c158:	429a      	cmp	r2, r3
 801c15a:	db8c      	blt.n	801c076 <arm_nn_mat_mult_nt_t_s8+0x2182>
            }

            // Quantize down
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows_idx], dst_shifts[rhs_rows_idx]);
 801c15c:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	; 0xad4
 801c160:	009a      	lsls	r2, r3, #2
 801c162:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	; 0xaf8
 801c166:	4413      	add	r3, r2
 801c168:	6818      	ldr	r0, [r3, #0]
 801c16a:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	; 0xad4
 801c16e:	009a      	lsls	r2, r3, #2
 801c170:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 801c174:	4413      	add	r3, r2
 801c176:	6819      	ldr	r1, [r3, #0]
 801c178:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c17c:	f5a3 62b5 	sub.w	r2, r3, #1448	; 0x5a8
 801c180:	f8d7 3abc 	ldr.w	r3, [r7, #2748]	; 0xabc
 801c184:	6013      	str	r3, [r2, #0]
 801c186:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c18a:	f2a3 53ac 	subw	r3, r3, #1452	; 0x5ac
 801c18e:	6018      	str	r0, [r3, #0]
 801c190:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c194:	f5a3 63b6 	sub.w	r3, r3, #1456	; 0x5b0
 801c198:	6019      	str	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801c19a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c19e:	f5a3 63b6 	sub.w	r3, r3, #1456	; 0x5b0
 801c1a2:	681b      	ldr	r3, [r3, #0]
 801c1a4:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 801c1a8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c1ac:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 801c1b0:	681b      	ldr	r3, [r3, #0]
 801c1b2:	fa03 f202 	lsl.w	r2, r3, r2
 801c1b6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c1ba:	f2a3 53b4 	subw	r3, r3, #1460	; 0x5b4
 801c1be:	601a      	str	r2, [r3, #0]
 801c1c0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c1c4:	f5a3 62b7 	sub.w	r2, r3, #1464	; 0x5b8
 801c1c8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c1cc:	f2a3 53ac 	subw	r3, r3, #1452	; 0x5ac
 801c1d0:	681b      	ldr	r3, [r3, #0]
 801c1d2:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801c1d4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c1d8:	f2a3 52bc 	subw	r2, r3, #1468	; 0x5bc
 801c1dc:	2300      	movs	r3, #0
 801c1de:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 801c1e0:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 801c1e4:	461a      	mov	r2, r3
 801c1e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801c1ea:	f842 3c08 	str.w	r3, [r2, #-8]
    mult.word.high = 0;
 801c1ee:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 801c1f2:	461a      	mov	r2, r3
 801c1f4:	2300      	movs	r3, #0
 801c1f6:	f842 3c04 	str.w	r3, [r2, #-4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801c1fa:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 801c1fe:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 801c202:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c206:	f2a3 53b4 	subw	r3, r3, #1460	; 0x5b4
 801c20a:	681b      	ldr	r3, [r3, #0]
 801c20c:	17da      	asrs	r2, r3, #31
 801c20e:	673b      	str	r3, [r7, #112]	; 0x70
 801c210:	677a      	str	r2, [r7, #116]	; 0x74
 801c212:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c216:	f5a3 63b7 	sub.w	r3, r3, #1464	; 0x5b8
 801c21a:	681b      	ldr	r3, [r3, #0]
 801c21c:	17da      	asrs	r2, r3, #31
 801c21e:	66bb      	str	r3, [r7, #104]	; 0x68
 801c220:	66fa      	str	r2, [r7, #108]	; 0x6c
 801c222:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801c224:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801c226:	fb02 f203 	mul.w	r2, r2, r3
 801c22a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c22c:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 801c22e:	fb04 f303 	mul.w	r3, r4, r3
 801c232:	4413      	add	r3, r2
 801c234:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801c236:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 801c238:	fba2 4204 	umull	r4, r2, r2, r4
 801c23c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 801c240:	4622      	mov	r2, r4
 801c242:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 801c246:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 801c24a:	4413      	add	r3, r2
 801c24c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 801c250:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801c254:	18c3      	adds	r3, r0, r3
 801c256:	62bb      	str	r3, [r7, #40]	; 0x28
 801c258:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801c25c:	eb41 0303 	adc.w	r3, r1, r3
 801c260:	62fb      	str	r3, [r7, #44]	; 0x2c
 801c262:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 801c266:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 801c26a:	e943 1202 	strd	r1, r2, [r3, #-8]
    result = (int32_t)(mult.long_long >> 31);
 801c26e:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 801c272:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801c276:	f04f 0000 	mov.w	r0, #0
 801c27a:	f04f 0100 	mov.w	r1, #0
 801c27e:	0fd0      	lsrs	r0, r2, #31
 801c280:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801c284:	17d9      	asrs	r1, r3, #31
 801c286:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c28a:	f2a3 52bc 	subw	r2, r3, #1468	; 0x5bc
 801c28e:	4603      	mov	r3, r0
 801c290:	6013      	str	r3, [r2, #0]
    return result;
 801c292:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c296:	f2a3 53bc 	subw	r3, r3, #1468	; 0x5bc
 801c29a:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801c29c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c2a0:	f5a3 63b6 	sub.w	r3, r3, #1456	; 0x5b0
 801c2a4:	681b      	ldr	r3, [r3, #0]
 801c2a6:	2b00      	cmp	r3, #0
 801c2a8:	dc06      	bgt.n	801c2b8 <arm_nn_mat_mult_nt_t_s8+0x23c4>
 801c2aa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c2ae:	f5a3 63b6 	sub.w	r3, r3, #1456	; 0x5b0
 801c2b2:	681b      	ldr	r3, [r3, #0]
 801c2b4:	425a      	negs	r2, r3
 801c2b6:	e000      	b.n	801c2ba <arm_nn_mat_mult_nt_t_s8+0x23c6>
 801c2b8:	2200      	movs	r2, #0
 801c2ba:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c2be:	f5a3 63b8 	sub.w	r3, r3, #1472	; 0x5c0
 801c2c2:	6019      	str	r1, [r3, #0]
 801c2c4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c2c8:	f2a3 53c4 	subw	r3, r3, #1476	; 0x5c4
 801c2cc:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801c2ce:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c2d2:	f5a3 62b9 	sub.w	r2, r3, #1480	; 0x5c8
 801c2d6:	2300      	movs	r3, #0
 801c2d8:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801c2da:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c2de:	f2a3 53c4 	subw	r3, r3, #1476	; 0x5c4
 801c2e2:	2201      	movs	r2, #1
 801c2e4:	681b      	ldr	r3, [r3, #0]
 801c2e6:	fa02 f103 	lsl.w	r1, r2, r3
 801c2ea:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c2ee:	f2a3 52cc 	subw	r2, r3, #1484	; 0x5cc
 801c2f2:	1e4b      	subs	r3, r1, #1
 801c2f4:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 801c2f6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c2fa:	f5a3 61ba 	sub.w	r1, r3, #1488	; 0x5d0
 801c2fe:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c302:	f5a3 62b8 	sub.w	r2, r3, #1472	; 0x5c0
 801c306:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c30a:	f2a3 53cc 	subw	r3, r3, #1484	; 0x5cc
 801c30e:	6812      	ldr	r2, [r2, #0]
 801c310:	681b      	ldr	r3, [r3, #0]
 801c312:	4013      	ands	r3, r2
 801c314:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 801c316:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c31a:	f5a3 61b9 	sub.w	r1, r3, #1480	; 0x5c8
 801c31e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c322:	f5a3 62b8 	sub.w	r2, r3, #1472	; 0x5c0
 801c326:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c32a:	f2a3 53c4 	subw	r3, r3, #1476	; 0x5c4
 801c32e:	6812      	ldr	r2, [r2, #0]
 801c330:	681b      	ldr	r3, [r3, #0]
 801c332:	fa42 f303 	asr.w	r3, r2, r3
 801c336:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 801c338:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c33c:	f2a3 52d4 	subw	r2, r3, #1492	; 0x5d4
 801c340:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c344:	f2a3 53cc 	subw	r3, r3, #1484	; 0x5cc
 801c348:	681b      	ldr	r3, [r3, #0]
 801c34a:	105b      	asrs	r3, r3, #1
 801c34c:	6013      	str	r3, [r2, #0]
    if (result < 0)
 801c34e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c352:	f5a3 63b9 	sub.w	r3, r3, #1480	; 0x5c8
 801c356:	681b      	ldr	r3, [r3, #0]
 801c358:	2b00      	cmp	r3, #0
 801c35a:	da0a      	bge.n	801c372 <arm_nn_mat_mult_nt_t_s8+0x247e>
        threshold++;
 801c35c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c360:	f2a3 52d4 	subw	r2, r3, #1492	; 0x5d4
 801c364:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c368:	f2a3 53d4 	subw	r3, r3, #1492	; 0x5d4
 801c36c:	681b      	ldr	r3, [r3, #0]
 801c36e:	3301      	adds	r3, #1
 801c370:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 801c372:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c376:	f5a3 62ba 	sub.w	r2, r3, #1488	; 0x5d0
 801c37a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c37e:	f2a3 53d4 	subw	r3, r3, #1492	; 0x5d4
 801c382:	6812      	ldr	r2, [r2, #0]
 801c384:	681b      	ldr	r3, [r3, #0]
 801c386:	429a      	cmp	r2, r3
 801c388:	dd0a      	ble.n	801c3a0 <arm_nn_mat_mult_nt_t_s8+0x24ac>
        result++;
 801c38a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c38e:	f5a3 62b9 	sub.w	r2, r3, #1480	; 0x5c8
 801c392:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c396:	f5a3 63b9 	sub.w	r3, r3, #1480	; 0x5c8
 801c39a:	681b      	ldr	r3, [r3, #0]
 801c39c:	3301      	adds	r3, #1
 801c39e:	6013      	str	r3, [r2, #0]
    return result;
 801c3a0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c3a4:	f5a3 63b9 	sub.w	r3, r3, #1480	; 0x5c8
 801c3a8:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801c3aa:	bf00      	nop
 801c3ac:	f8c7 3abc 	str.w	r3, [r7, #2748]	; 0xabc
            res01 = arm_nn_requantize(res01, dst_multipliers[rhs_rows_idx + 1], dst_shifts[rhs_rows_idx + 1]);
 801c3b0:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	; 0xad4
 801c3b4:	3301      	adds	r3, #1
 801c3b6:	009a      	lsls	r2, r3, #2
 801c3b8:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	; 0xaf8
 801c3bc:	4413      	add	r3, r2
 801c3be:	6818      	ldr	r0, [r3, #0]
 801c3c0:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	; 0xad4
 801c3c4:	3301      	adds	r3, #1
 801c3c6:	009a      	lsls	r2, r3, #2
 801c3c8:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 801c3cc:	4413      	add	r3, r2
 801c3ce:	6819      	ldr	r1, [r3, #0]
 801c3d0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c3d4:	f5a3 62af 	sub.w	r2, r3, #1400	; 0x578
 801c3d8:	f8d7 3ab8 	ldr.w	r3, [r7, #2744]	; 0xab8
 801c3dc:	6013      	str	r3, [r2, #0]
 801c3de:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c3e2:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 801c3e6:	6018      	str	r0, [r3, #0]
 801c3e8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c3ec:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 801c3f0:	6019      	str	r1, [r3, #0]
 801c3f2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c3f6:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 801c3fa:	681b      	ldr	r3, [r3, #0]
 801c3fc:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 801c400:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c404:	f5a3 63af 	sub.w	r3, r3, #1400	; 0x578
 801c408:	681b      	ldr	r3, [r3, #0]
 801c40a:	fa03 f202 	lsl.w	r2, r3, r2
 801c40e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c412:	f2a3 5384 	subw	r3, r3, #1412	; 0x584
 801c416:	601a      	str	r2, [r3, #0]
 801c418:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c41c:	f5a3 62b1 	sub.w	r2, r3, #1416	; 0x588
 801c420:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c424:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 801c428:	681b      	ldr	r3, [r3, #0]
 801c42a:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801c42c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c430:	f2a3 528c 	subw	r2, r3, #1420	; 0x58c
 801c434:	2300      	movs	r3, #0
 801c436:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 801c438:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 801c43c:	461a      	mov	r2, r3
 801c43e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801c442:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 801c444:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 801c448:	461a      	mov	r2, r3
 801c44a:	2300      	movs	r3, #0
 801c44c:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801c44e:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 801c452:	e9d3 0100 	ldrd	r0, r1, [r3]
 801c456:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c45a:	f2a3 5384 	subw	r3, r3, #1412	; 0x584
 801c45e:	681b      	ldr	r3, [r3, #0]
 801c460:	17da      	asrs	r2, r3, #31
 801c462:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801c466:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 801c46a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c46e:	f5a3 63b1 	sub.w	r3, r3, #1416	; 0x588
 801c472:	681b      	ldr	r3, [r3, #0]
 801c474:	17da      	asrs	r2, r3, #31
 801c476:	67bb      	str	r3, [r7, #120]	; 0x78
 801c478:	67fa      	str	r2, [r7, #124]	; 0x7c
 801c47a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801c47e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801c480:	fb02 f203 	mul.w	r2, r2, r3
 801c484:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801c486:	f8d7 4080 	ldr.w	r4, [r7, #128]	; 0x80
 801c48a:	fb04 f303 	mul.w	r3, r4, r3
 801c48e:	4413      	add	r3, r2
 801c490:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801c494:	6fbc      	ldr	r4, [r7, #120]	; 0x78
 801c496:	fba2 4204 	umull	r4, r2, r2, r4
 801c49a:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 801c49e:	4622      	mov	r2, r4
 801c4a0:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 801c4a4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 801c4a8:	4413      	add	r3, r2
 801c4aa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801c4ae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801c4b2:	18c3      	adds	r3, r0, r3
 801c4b4:	633b      	str	r3, [r7, #48]	; 0x30
 801c4b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801c4ba:	eb41 0303 	adc.w	r3, r1, r3
 801c4be:	637b      	str	r3, [r7, #52]	; 0x34
 801c4c0:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 801c4c4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 801c4c8:	e9c3 1200 	strd	r1, r2, [r3]
    result = (int32_t)(mult.long_long >> 31);
 801c4cc:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 801c4d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c4d4:	f04f 0000 	mov.w	r0, #0
 801c4d8:	f04f 0100 	mov.w	r1, #0
 801c4dc:	0fd0      	lsrs	r0, r2, #31
 801c4de:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801c4e2:	17d9      	asrs	r1, r3, #31
 801c4e4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c4e8:	f2a3 528c 	subw	r2, r3, #1420	; 0x58c
 801c4ec:	4603      	mov	r3, r0
 801c4ee:	6013      	str	r3, [r2, #0]
    return result;
 801c4f0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c4f4:	f2a3 538c 	subw	r3, r3, #1420	; 0x58c
 801c4f8:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801c4fa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c4fe:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 801c502:	681b      	ldr	r3, [r3, #0]
 801c504:	2b00      	cmp	r3, #0
 801c506:	dc06      	bgt.n	801c516 <arm_nn_mat_mult_nt_t_s8+0x2622>
 801c508:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c50c:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 801c510:	681b      	ldr	r3, [r3, #0]
 801c512:	425a      	negs	r2, r3
 801c514:	e000      	b.n	801c518 <arm_nn_mat_mult_nt_t_s8+0x2624>
 801c516:	2200      	movs	r2, #0
 801c518:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c51c:	f5a3 63b2 	sub.w	r3, r3, #1424	; 0x590
 801c520:	6019      	str	r1, [r3, #0]
 801c522:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c526:	f2a3 5394 	subw	r3, r3, #1428	; 0x594
 801c52a:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801c52c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c530:	f5a3 62b3 	sub.w	r2, r3, #1432	; 0x598
 801c534:	2300      	movs	r3, #0
 801c536:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801c538:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c53c:	f2a3 5394 	subw	r3, r3, #1428	; 0x594
 801c540:	2201      	movs	r2, #1
 801c542:	681b      	ldr	r3, [r3, #0]
 801c544:	fa02 f103 	lsl.w	r1, r2, r3
 801c548:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c54c:	f2a3 529c 	subw	r2, r3, #1436	; 0x59c
 801c550:	1e4b      	subs	r3, r1, #1
 801c552:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 801c554:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c558:	f5a3 61b4 	sub.w	r1, r3, #1440	; 0x5a0
 801c55c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c560:	f5a3 62b2 	sub.w	r2, r3, #1424	; 0x590
 801c564:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c568:	f2a3 539c 	subw	r3, r3, #1436	; 0x59c
 801c56c:	6812      	ldr	r2, [r2, #0]
 801c56e:	681b      	ldr	r3, [r3, #0]
 801c570:	4013      	ands	r3, r2
 801c572:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 801c574:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c578:	f5a3 61b3 	sub.w	r1, r3, #1432	; 0x598
 801c57c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c580:	f5a3 62b2 	sub.w	r2, r3, #1424	; 0x590
 801c584:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c588:	f2a3 5394 	subw	r3, r3, #1428	; 0x594
 801c58c:	6812      	ldr	r2, [r2, #0]
 801c58e:	681b      	ldr	r3, [r3, #0]
 801c590:	fa42 f303 	asr.w	r3, r2, r3
 801c594:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 801c596:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c59a:	f2a3 52a4 	subw	r2, r3, #1444	; 0x5a4
 801c59e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c5a2:	f2a3 539c 	subw	r3, r3, #1436	; 0x59c
 801c5a6:	681b      	ldr	r3, [r3, #0]
 801c5a8:	105b      	asrs	r3, r3, #1
 801c5aa:	6013      	str	r3, [r2, #0]
    if (result < 0)
 801c5ac:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c5b0:	f5a3 63b3 	sub.w	r3, r3, #1432	; 0x598
 801c5b4:	681b      	ldr	r3, [r3, #0]
 801c5b6:	2b00      	cmp	r3, #0
 801c5b8:	da0a      	bge.n	801c5d0 <arm_nn_mat_mult_nt_t_s8+0x26dc>
        threshold++;
 801c5ba:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c5be:	f2a3 52a4 	subw	r2, r3, #1444	; 0x5a4
 801c5c2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c5c6:	f2a3 53a4 	subw	r3, r3, #1444	; 0x5a4
 801c5ca:	681b      	ldr	r3, [r3, #0]
 801c5cc:	3301      	adds	r3, #1
 801c5ce:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 801c5d0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c5d4:	f5a3 62b4 	sub.w	r2, r3, #1440	; 0x5a0
 801c5d8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c5dc:	f2a3 53a4 	subw	r3, r3, #1444	; 0x5a4
 801c5e0:	6812      	ldr	r2, [r2, #0]
 801c5e2:	681b      	ldr	r3, [r3, #0]
 801c5e4:	429a      	cmp	r2, r3
 801c5e6:	dd0a      	ble.n	801c5fe <arm_nn_mat_mult_nt_t_s8+0x270a>
        result++;
 801c5e8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c5ec:	f5a3 62b3 	sub.w	r2, r3, #1432	; 0x598
 801c5f0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c5f4:	f5a3 63b3 	sub.w	r3, r3, #1432	; 0x598
 801c5f8:	681b      	ldr	r3, [r3, #0]
 801c5fa:	3301      	adds	r3, #1
 801c5fc:	6013      	str	r3, [r2, #0]
    return result;
 801c5fe:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c602:	f5a3 63b3 	sub.w	r3, r3, #1432	; 0x598
 801c606:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801c608:	bf00      	nop
 801c60a:	f8c7 3ab8 	str.w	r3, [r7, #2744]	; 0xab8
            res10 = arm_nn_requantize(res10, dst_multipliers[rhs_rows_idx], dst_shifts[rhs_rows_idx]);
 801c60e:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	; 0xad4
 801c612:	009a      	lsls	r2, r3, #2
 801c614:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	; 0xaf8
 801c618:	4413      	add	r3, r2
 801c61a:	6818      	ldr	r0, [r3, #0]
 801c61c:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	; 0xad4
 801c620:	009a      	lsls	r2, r3, #2
 801c622:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 801c626:	4413      	add	r3, r2
 801c628:	6819      	ldr	r1, [r3, #0]
 801c62a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c62e:	f5a3 62a9 	sub.w	r2, r3, #1352	; 0x548
 801c632:	f8d7 3ab4 	ldr.w	r3, [r7, #2740]	; 0xab4
 801c636:	6013      	str	r3, [r2, #0]
 801c638:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c63c:	f2a3 534c 	subw	r3, r3, #1356	; 0x54c
 801c640:	6018      	str	r0, [r3, #0]
 801c642:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c646:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 801c64a:	6019      	str	r1, [r3, #0]
 801c64c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c650:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 801c654:	681b      	ldr	r3, [r3, #0]
 801c656:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 801c65a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c65e:	f5a3 63a9 	sub.w	r3, r3, #1352	; 0x548
 801c662:	681b      	ldr	r3, [r3, #0]
 801c664:	fa03 f202 	lsl.w	r2, r3, r2
 801c668:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c66c:	f2a3 5354 	subw	r3, r3, #1364	; 0x554
 801c670:	601a      	str	r2, [r3, #0]
 801c672:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c676:	f5a3 62ab 	sub.w	r2, r3, #1368	; 0x558
 801c67a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c67e:	f2a3 534c 	subw	r3, r3, #1356	; 0x54c
 801c682:	681b      	ldr	r3, [r3, #0]
 801c684:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801c686:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c68a:	f2a3 525c 	subw	r2, r3, #1372	; 0x55c
 801c68e:	2300      	movs	r3, #0
 801c690:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 801c692:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 801c696:	461a      	mov	r2, r3
 801c698:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801c69c:	f842 3c08 	str.w	r3, [r2, #-8]
    mult.word.high = 0;
 801c6a0:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 801c6a4:	461a      	mov	r2, r3
 801c6a6:	2300      	movs	r3, #0
 801c6a8:	f842 3c04 	str.w	r3, [r2, #-4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801c6ac:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 801c6b0:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 801c6b4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c6b8:	f2a3 5354 	subw	r3, r3, #1364	; 0x554
 801c6bc:	681b      	ldr	r3, [r3, #0]
 801c6be:	17da      	asrs	r2, r3, #31
 801c6c0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801c6c4:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 801c6c8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c6cc:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 801c6d0:	681b      	ldr	r3, [r3, #0]
 801c6d2:	17da      	asrs	r2, r3, #31
 801c6d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801c6d8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 801c6dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801c6e0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801c6e4:	fb02 f203 	mul.w	r2, r2, r3
 801c6e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801c6ec:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 801c6f0:	fb04 f303 	mul.w	r3, r4, r3
 801c6f4:	4413      	add	r3, r2
 801c6f6:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801c6fa:	f8d7 4088 	ldr.w	r4, [r7, #136]	; 0x88
 801c6fe:	fba2 5604 	umull	r5, r6, r2, r4
 801c702:	4433      	add	r3, r6
 801c704:	461e      	mov	r6, r3
 801c706:	1943      	adds	r3, r0, r5
 801c708:	63bb      	str	r3, [r7, #56]	; 0x38
 801c70a:	eb41 0306 	adc.w	r3, r1, r6
 801c70e:	63fb      	str	r3, [r7, #60]	; 0x3c
 801c710:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 801c714:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 801c718:	e943 1202 	strd	r1, r2, [r3, #-8]
    result = (int32_t)(mult.long_long >> 31);
 801c71c:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 801c720:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801c724:	f04f 0000 	mov.w	r0, #0
 801c728:	f04f 0100 	mov.w	r1, #0
 801c72c:	0fd0      	lsrs	r0, r2, #31
 801c72e:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801c732:	17d9      	asrs	r1, r3, #31
 801c734:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c738:	f2a3 525c 	subw	r2, r3, #1372	; 0x55c
 801c73c:	4603      	mov	r3, r0
 801c73e:	6013      	str	r3, [r2, #0]
    return result;
 801c740:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c744:	f2a3 535c 	subw	r3, r3, #1372	; 0x55c
 801c748:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801c74a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c74e:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 801c752:	681b      	ldr	r3, [r3, #0]
 801c754:	2b00      	cmp	r3, #0
 801c756:	dc06      	bgt.n	801c766 <arm_nn_mat_mult_nt_t_s8+0x2872>
 801c758:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c75c:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 801c760:	681b      	ldr	r3, [r3, #0]
 801c762:	425a      	negs	r2, r3
 801c764:	e000      	b.n	801c768 <arm_nn_mat_mult_nt_t_s8+0x2874>
 801c766:	2200      	movs	r2, #0
 801c768:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c76c:	f5a3 63ac 	sub.w	r3, r3, #1376	; 0x560
 801c770:	6019      	str	r1, [r3, #0]
 801c772:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c776:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 801c77a:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801c77c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c780:	f5a3 62ad 	sub.w	r2, r3, #1384	; 0x568
 801c784:	2300      	movs	r3, #0
 801c786:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801c788:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c78c:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 801c790:	2201      	movs	r2, #1
 801c792:	681b      	ldr	r3, [r3, #0]
 801c794:	fa02 f103 	lsl.w	r1, r2, r3
 801c798:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c79c:	f2a3 526c 	subw	r2, r3, #1388	; 0x56c
 801c7a0:	1e4b      	subs	r3, r1, #1
 801c7a2:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 801c7a4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c7a8:	f5a3 61ae 	sub.w	r1, r3, #1392	; 0x570
 801c7ac:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c7b0:	f5a3 62ac 	sub.w	r2, r3, #1376	; 0x560
 801c7b4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c7b8:	f2a3 536c 	subw	r3, r3, #1388	; 0x56c
 801c7bc:	6812      	ldr	r2, [r2, #0]
 801c7be:	681b      	ldr	r3, [r3, #0]
 801c7c0:	4013      	ands	r3, r2
 801c7c2:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 801c7c4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c7c8:	f5a3 61ad 	sub.w	r1, r3, #1384	; 0x568
 801c7cc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c7d0:	f5a3 62ac 	sub.w	r2, r3, #1376	; 0x560
 801c7d4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c7d8:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 801c7dc:	6812      	ldr	r2, [r2, #0]
 801c7de:	681b      	ldr	r3, [r3, #0]
 801c7e0:	fa42 f303 	asr.w	r3, r2, r3
 801c7e4:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 801c7e6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c7ea:	f2a3 5274 	subw	r2, r3, #1396	; 0x574
 801c7ee:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c7f2:	f2a3 536c 	subw	r3, r3, #1388	; 0x56c
 801c7f6:	681b      	ldr	r3, [r3, #0]
 801c7f8:	105b      	asrs	r3, r3, #1
 801c7fa:	6013      	str	r3, [r2, #0]
    if (result < 0)
 801c7fc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c800:	f5a3 63ad 	sub.w	r3, r3, #1384	; 0x568
 801c804:	681b      	ldr	r3, [r3, #0]
 801c806:	2b00      	cmp	r3, #0
 801c808:	da0a      	bge.n	801c820 <arm_nn_mat_mult_nt_t_s8+0x292c>
        threshold++;
 801c80a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c80e:	f2a3 5274 	subw	r2, r3, #1396	; 0x574
 801c812:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c816:	f2a3 5374 	subw	r3, r3, #1396	; 0x574
 801c81a:	681b      	ldr	r3, [r3, #0]
 801c81c:	3301      	adds	r3, #1
 801c81e:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 801c820:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c824:	f5a3 62ae 	sub.w	r2, r3, #1392	; 0x570
 801c828:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c82c:	f2a3 5374 	subw	r3, r3, #1396	; 0x574
 801c830:	6812      	ldr	r2, [r2, #0]
 801c832:	681b      	ldr	r3, [r3, #0]
 801c834:	429a      	cmp	r2, r3
 801c836:	dd0a      	ble.n	801c84e <arm_nn_mat_mult_nt_t_s8+0x295a>
        result++;
 801c838:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c83c:	f5a3 62ad 	sub.w	r2, r3, #1384	; 0x568
 801c840:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c844:	f5a3 63ad 	sub.w	r3, r3, #1384	; 0x568
 801c848:	681b      	ldr	r3, [r3, #0]
 801c84a:	3301      	adds	r3, #1
 801c84c:	6013      	str	r3, [r2, #0]
    return result;
 801c84e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c852:	f5a3 63ad 	sub.w	r3, r3, #1384	; 0x568
 801c856:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801c858:	bf00      	nop
 801c85a:	f8c7 3ab4 	str.w	r3, [r7, #2740]	; 0xab4
            res11 = arm_nn_requantize(res11, dst_multipliers[rhs_rows_idx + 1], dst_shifts[rhs_rows_idx + 1]);
 801c85e:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	; 0xad4
 801c862:	3301      	adds	r3, #1
 801c864:	009a      	lsls	r2, r3, #2
 801c866:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	; 0xaf8
 801c86a:	4413      	add	r3, r2
 801c86c:	6818      	ldr	r0, [r3, #0]
 801c86e:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	; 0xad4
 801c872:	3301      	adds	r3, #1
 801c874:	009a      	lsls	r2, r3, #2
 801c876:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 801c87a:	4413      	add	r3, r2
 801c87c:	6819      	ldr	r1, [r3, #0]
 801c87e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c882:	f5a3 62a3 	sub.w	r2, r3, #1304	; 0x518
 801c886:	f8d7 3ab0 	ldr.w	r3, [r7, #2736]	; 0xab0
 801c88a:	6013      	str	r3, [r2, #0]
 801c88c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c890:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 801c894:	6018      	str	r0, [r3, #0]
 801c896:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c89a:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 801c89e:	6019      	str	r1, [r3, #0]
 801c8a0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c8a4:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 801c8a8:	681b      	ldr	r3, [r3, #0]
 801c8aa:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 801c8ae:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c8b2:	f5a3 63a3 	sub.w	r3, r3, #1304	; 0x518
 801c8b6:	681b      	ldr	r3, [r3, #0]
 801c8b8:	fa03 f202 	lsl.w	r2, r3, r2
 801c8bc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c8c0:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 801c8c4:	601a      	str	r2, [r3, #0]
 801c8c6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c8ca:	f5a3 62a5 	sub.w	r2, r3, #1320	; 0x528
 801c8ce:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c8d2:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 801c8d6:	681b      	ldr	r3, [r3, #0]
 801c8d8:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801c8da:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c8de:	f2a3 522c 	subw	r2, r3, #1324	; 0x52c
 801c8e2:	2300      	movs	r3, #0
 801c8e4:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 801c8e6:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 801c8ea:	461a      	mov	r2, r3
 801c8ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801c8f0:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 801c8f2:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 801c8f6:	461a      	mov	r2, r3
 801c8f8:	2300      	movs	r3, #0
 801c8fa:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801c8fc:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 801c900:	e9d3 0100 	ldrd	r0, r1, [r3]
 801c904:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c908:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 801c90c:	681b      	ldr	r3, [r3, #0]
 801c90e:	17da      	asrs	r2, r3, #31
 801c910:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 801c914:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 801c918:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c91c:	f5a3 63a5 	sub.w	r3, r3, #1320	; 0x528
 801c920:	681b      	ldr	r3, [r3, #0]
 801c922:	17da      	asrs	r2, r3, #31
 801c924:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801c928:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 801c92c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801c930:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801c934:	fb02 f203 	mul.w	r2, r2, r3
 801c938:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801c93c:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 801c940:	fb04 f303 	mul.w	r3, r4, r3
 801c944:	4413      	add	r3, r2
 801c946:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 801c94a:	f8d7 4098 	ldr.w	r4, [r7, #152]	; 0x98
 801c94e:	fba2 ab04 	umull	sl, fp, r2, r4
 801c952:	445b      	add	r3, fp
 801c954:	469b      	mov	fp, r3
 801c956:	eb10 030a 	adds.w	r3, r0, sl
 801c95a:	643b      	str	r3, [r7, #64]	; 0x40
 801c95c:	eb41 030b 	adc.w	r3, r1, fp
 801c960:	647b      	str	r3, [r7, #68]	; 0x44
 801c962:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 801c966:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 801c96a:	e9c3 1200 	strd	r1, r2, [r3]
    result = (int32_t)(mult.long_long >> 31);
 801c96e:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 801c972:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c976:	f04f 0000 	mov.w	r0, #0
 801c97a:	f04f 0100 	mov.w	r1, #0
 801c97e:	0fd0      	lsrs	r0, r2, #31
 801c980:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801c984:	17d9      	asrs	r1, r3, #31
 801c986:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c98a:	f2a3 522c 	subw	r2, r3, #1324	; 0x52c
 801c98e:	4603      	mov	r3, r0
 801c990:	6013      	str	r3, [r2, #0]
    return result;
 801c992:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c996:	f2a3 532c 	subw	r3, r3, #1324	; 0x52c
 801c99a:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801c99c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c9a0:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 801c9a4:	681b      	ldr	r3, [r3, #0]
 801c9a6:	2b00      	cmp	r3, #0
 801c9a8:	dc06      	bgt.n	801c9b8 <arm_nn_mat_mult_nt_t_s8+0x2ac4>
 801c9aa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c9ae:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 801c9b2:	681b      	ldr	r3, [r3, #0]
 801c9b4:	425a      	negs	r2, r3
 801c9b6:	e000      	b.n	801c9ba <arm_nn_mat_mult_nt_t_s8+0x2ac6>
 801c9b8:	2200      	movs	r2, #0
 801c9ba:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c9be:	f5a3 63a6 	sub.w	r3, r3, #1328	; 0x530
 801c9c2:	6019      	str	r1, [r3, #0]
 801c9c4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c9c8:	f2a3 5334 	subw	r3, r3, #1332	; 0x534
 801c9cc:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801c9ce:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c9d2:	f5a3 62a7 	sub.w	r2, r3, #1336	; 0x538
 801c9d6:	2300      	movs	r3, #0
 801c9d8:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801c9da:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c9de:	f2a3 5334 	subw	r3, r3, #1332	; 0x534
 801c9e2:	2201      	movs	r2, #1
 801c9e4:	681b      	ldr	r3, [r3, #0]
 801c9e6:	fa02 f103 	lsl.w	r1, r2, r3
 801c9ea:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c9ee:	f2a3 523c 	subw	r2, r3, #1340	; 0x53c
 801c9f2:	1e4b      	subs	r3, r1, #1
 801c9f4:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 801c9f6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801c9fa:	f5a3 61a8 	sub.w	r1, r3, #1344	; 0x540
 801c9fe:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ca02:	f5a3 62a6 	sub.w	r2, r3, #1328	; 0x530
 801ca06:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ca0a:	f2a3 533c 	subw	r3, r3, #1340	; 0x53c
 801ca0e:	6812      	ldr	r2, [r2, #0]
 801ca10:	681b      	ldr	r3, [r3, #0]
 801ca12:	4013      	ands	r3, r2
 801ca14:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 801ca16:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ca1a:	f5a3 61a7 	sub.w	r1, r3, #1336	; 0x538
 801ca1e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ca22:	f5a3 62a6 	sub.w	r2, r3, #1328	; 0x530
 801ca26:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ca2a:	f2a3 5334 	subw	r3, r3, #1332	; 0x534
 801ca2e:	6812      	ldr	r2, [r2, #0]
 801ca30:	681b      	ldr	r3, [r3, #0]
 801ca32:	fa42 f303 	asr.w	r3, r2, r3
 801ca36:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 801ca38:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ca3c:	f2a3 5244 	subw	r2, r3, #1348	; 0x544
 801ca40:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ca44:	f2a3 533c 	subw	r3, r3, #1340	; 0x53c
 801ca48:	681b      	ldr	r3, [r3, #0]
 801ca4a:	105b      	asrs	r3, r3, #1
 801ca4c:	6013      	str	r3, [r2, #0]
    if (result < 0)
 801ca4e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ca52:	f5a3 63a7 	sub.w	r3, r3, #1336	; 0x538
 801ca56:	681b      	ldr	r3, [r3, #0]
 801ca58:	2b00      	cmp	r3, #0
 801ca5a:	da0a      	bge.n	801ca72 <arm_nn_mat_mult_nt_t_s8+0x2b7e>
        threshold++;
 801ca5c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ca60:	f2a3 5244 	subw	r2, r3, #1348	; 0x544
 801ca64:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ca68:	f2a3 5344 	subw	r3, r3, #1348	; 0x544
 801ca6c:	681b      	ldr	r3, [r3, #0]
 801ca6e:	3301      	adds	r3, #1
 801ca70:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 801ca72:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ca76:	f5a3 62a8 	sub.w	r2, r3, #1344	; 0x540
 801ca7a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ca7e:	f2a3 5344 	subw	r3, r3, #1348	; 0x544
 801ca82:	6812      	ldr	r2, [r2, #0]
 801ca84:	681b      	ldr	r3, [r3, #0]
 801ca86:	429a      	cmp	r2, r3
 801ca88:	dd0a      	ble.n	801caa0 <arm_nn_mat_mult_nt_t_s8+0x2bac>
        result++;
 801ca8a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ca8e:	f5a3 62a7 	sub.w	r2, r3, #1336	; 0x538
 801ca92:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ca96:	f5a3 63a7 	sub.w	r3, r3, #1336	; 0x538
 801ca9a:	681b      	ldr	r3, [r3, #0]
 801ca9c:	3301      	adds	r3, #1
 801ca9e:	6013      	str	r3, [r2, #0]
    return result;
 801caa0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801caa4:	f5a3 63a7 	sub.w	r3, r3, #1336	; 0x538
 801caa8:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801caaa:	bf00      	nop
 801caac:	f8c7 3ab0 	str.w	r3, [r7, #2736]	; 0xab0

            // Add offset
            res00 += dst_offset;
 801cab0:	f8d7 2abc 	ldr.w	r2, [r7, #2748]	; 0xabc
 801cab4:	f8d7 3b10 	ldr.w	r3, [r7, #2832]	; 0xb10
 801cab8:	4413      	add	r3, r2
 801caba:	f8c7 3abc 	str.w	r3, [r7, #2748]	; 0xabc
            res01 += dst_offset;
 801cabe:	f8d7 2ab8 	ldr.w	r2, [r7, #2744]	; 0xab8
 801cac2:	f8d7 3b10 	ldr.w	r3, [r7, #2832]	; 0xb10
 801cac6:	4413      	add	r3, r2
 801cac8:	f8c7 3ab8 	str.w	r3, [r7, #2744]	; 0xab8
            res10 += dst_offset;
 801cacc:	f8d7 2ab4 	ldr.w	r2, [r7, #2740]	; 0xab4
 801cad0:	f8d7 3b10 	ldr.w	r3, [r7, #2832]	; 0xb10
 801cad4:	4413      	add	r3, r2
 801cad6:	f8c7 3ab4 	str.w	r3, [r7, #2740]	; 0xab4
            res11 += dst_offset;
 801cada:	f8d7 2ab0 	ldr.w	r2, [r7, #2736]	; 0xab0
 801cade:	f8d7 3b10 	ldr.w	r3, [r7, #2832]	; 0xb10
 801cae2:	4413      	add	r3, r2
 801cae4:	f8c7 3ab0 	str.w	r3, [r7, #2736]	; 0xab0

            // Clamp the result
            res00 = MAX(res00, activation_min);
 801cae8:	f8d7 2abc 	ldr.w	r2, [r7, #2748]	; 0xabc
 801caec:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	; 0xb14
 801caf0:	4293      	cmp	r3, r2
 801caf2:	bfb8      	it	lt
 801caf4:	4613      	movlt	r3, r2
 801caf6:	f8c7 3abc 	str.w	r3, [r7, #2748]	; 0xabc
            res00 = MIN(res00, activation_max);
 801cafa:	f8d7 2abc 	ldr.w	r2, [r7, #2748]	; 0xabc
 801cafe:	f8d7 3b18 	ldr.w	r3, [r7, #2840]	; 0xb18
 801cb02:	4293      	cmp	r3, r2
 801cb04:	bfa8      	it	ge
 801cb06:	4613      	movge	r3, r2
 801cb08:	f8c7 3abc 	str.w	r3, [r7, #2748]	; 0xabc
            res01 = MAX(res01, activation_min);
 801cb0c:	f8d7 2ab8 	ldr.w	r2, [r7, #2744]	; 0xab8
 801cb10:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	; 0xb14
 801cb14:	4293      	cmp	r3, r2
 801cb16:	bfb8      	it	lt
 801cb18:	4613      	movlt	r3, r2
 801cb1a:	f8c7 3ab8 	str.w	r3, [r7, #2744]	; 0xab8
            res01 = MIN(res01, activation_max);
 801cb1e:	f8d7 2ab8 	ldr.w	r2, [r7, #2744]	; 0xab8
 801cb22:	f8d7 3b18 	ldr.w	r3, [r7, #2840]	; 0xb18
 801cb26:	4293      	cmp	r3, r2
 801cb28:	bfa8      	it	ge
 801cb2a:	4613      	movge	r3, r2
 801cb2c:	f8c7 3ab8 	str.w	r3, [r7, #2744]	; 0xab8
            res10 = MAX(res10, activation_min);
 801cb30:	f8d7 2ab4 	ldr.w	r2, [r7, #2740]	; 0xab4
 801cb34:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	; 0xb14
 801cb38:	4293      	cmp	r3, r2
 801cb3a:	bfb8      	it	lt
 801cb3c:	4613      	movlt	r3, r2
 801cb3e:	f8c7 3ab4 	str.w	r3, [r7, #2740]	; 0xab4
            res10 = MIN(res10, activation_max);
 801cb42:	f8d7 2ab4 	ldr.w	r2, [r7, #2740]	; 0xab4
 801cb46:	f8d7 3b18 	ldr.w	r3, [r7, #2840]	; 0xb18
 801cb4a:	4293      	cmp	r3, r2
 801cb4c:	bfa8      	it	ge
 801cb4e:	4613      	movge	r3, r2
 801cb50:	f8c7 3ab4 	str.w	r3, [r7, #2740]	; 0xab4
            res11 = MAX(res11, activation_min);
 801cb54:	f8d7 2ab0 	ldr.w	r2, [r7, #2736]	; 0xab0
 801cb58:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	; 0xb14
 801cb5c:	4293      	cmp	r3, r2
 801cb5e:	bfb8      	it	lt
 801cb60:	4613      	movlt	r3, r2
 801cb62:	f8c7 3ab0 	str.w	r3, [r7, #2736]	; 0xab0
            res11 = MIN(res11, activation_max);
 801cb66:	f8d7 2ab0 	ldr.w	r2, [r7, #2736]	; 0xab0
 801cb6a:	f8d7 3b18 	ldr.w	r3, [r7, #2840]	; 0xb18
 801cb6e:	4293      	cmp	r3, r2
 801cb70:	bfa8      	it	ge
 801cb72:	4613      	movge	r3, r2
 801cb74:	f8c7 3ab0 	str.w	r3, [r7, #2736]	; 0xab0

            dst_ptr[0] = (q7_t)res00;
 801cb78:	f8d7 3abc 	ldr.w	r3, [r7, #2748]	; 0xabc
 801cb7c:	b25b      	sxtb	r3, r3
 801cb7e:	f8d7 2ad0 	ldr.w	r2, [r7, #2768]	; 0xad0
 801cb82:	7013      	strb	r3, [r2, #0]
            dst_ptr[1] = (q7_t)res01;
 801cb84:	f8d7 3ad0 	ldr.w	r3, [r7, #2768]	; 0xad0
 801cb88:	1c5a      	adds	r2, r3, #1
 801cb8a:	f8d7 3ab8 	ldr.w	r3, [r7, #2744]	; 0xab8
 801cb8e:	b25b      	sxtb	r3, r3
 801cb90:	7013      	strb	r3, [r2, #0]
            dst_ptr += rhs_rows;
 801cb92:	f8d7 2b04 	ldr.w	r2, [r7, #2820]	; 0xb04
 801cb96:	f8d7 3ad0 	ldr.w	r3, [r7, #2768]	; 0xad0
 801cb9a:	4413      	add	r3, r2
 801cb9c:	f8c7 3ad0 	str.w	r3, [r7, #2768]	; 0xad0
            dst_ptr[0] = (q7_t)res10;
 801cba0:	f8d7 3ab4 	ldr.w	r3, [r7, #2740]	; 0xab4
 801cba4:	b25b      	sxtb	r3, r3
 801cba6:	f8d7 2ad0 	ldr.w	r2, [r7, #2768]	; 0xad0
 801cbaa:	7013      	strb	r3, [r2, #0]
            dst_ptr[1] = (q7_t)res11;
 801cbac:	f8d7 3ad0 	ldr.w	r3, [r7, #2768]	; 0xad0
 801cbb0:	1c5a      	adds	r2, r3, #1
 801cbb2:	f8d7 3ab0 	ldr.w	r3, [r7, #2736]	; 0xab0
 801cbb6:	b25b      	sxtb	r3, r3
 801cbb8:	7013      	strb	r3, [r2, #0]
            dst_ptr += rhs_rows;
 801cbba:	f8d7 2b04 	ldr.w	r2, [r7, #2820]	; 0xb04
 801cbbe:	f8d7 3ad0 	ldr.w	r3, [r7, #2768]	; 0xad0
 801cbc2:	4413      	add	r3, r2
 801cbc4:	f8c7 3ad0 	str.w	r3, [r7, #2768]	; 0xad0

            lhs_ptr += rhs_cols;
 801cbc8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cbcc:	f6a3 1348 	subw	r3, r3, #2376	; 0x948
 801cbd0:	681a      	ldr	r2, [r3, #0]
 801cbd2:	f8d7 3b08 	ldr.w	r3, [r7, #2824]	; 0xb08
 801cbd6:	441a      	add	r2, r3
 801cbd8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cbdc:	f6a3 1348 	subw	r3, r3, #2376	; 0x948
 801cbe0:	601a      	str	r2, [r3, #0]

            lhs_rows_idx--;
 801cbe2:	f8d7 3ac0 	ldr.w	r3, [r7, #2752]	; 0xac0
 801cbe6:	3b01      	subs	r3, #1
 801cbe8:	f8c7 3ac0 	str.w	r3, [r7, #2752]	; 0xac0
        while (lhs_rows_idx)
 801cbec:	f8d7 3ac0 	ldr.w	r3, [r7, #2752]	; 0xac0
 801cbf0:	2b00      	cmp	r3, #0
 801cbf2:	f47d aa29 	bne.w	801a048 <arm_nn_mat_mult_nt_t_s8+0x154>
        }

        // Left-over rows
        if (lhs_rows % 2)
 801cbf6:	f8d7 3b00 	ldr.w	r3, [r7, #2816]	; 0xb00
 801cbfa:	f003 0301 	and.w	r3, r3, #1
 801cbfe:	2b00      	cmp	r3, #0
 801cc00:	f001 85f7 	beq.w	801e7f2 <arm_nn_mat_mult_nt_t_s8+0x48fe>
        {
            const q7_t *rhs_ptr = &rhs[0];
 801cc04:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cc08:	f6a3 12b4 	subw	r2, r3, #2484	; 0x9b4
 801cc0c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cc10:	f6a3 2308 	subw	r3, r3, #2568	; 0xa08
 801cc14:	681b      	ldr	r3, [r3, #0]
 801cc16:	6013      	str	r3, [r2, #0]

            q31_t res00 = lhs_offset_contribution0;
 801cc18:	f8d7 3acc 	ldr.w	r3, [r7, #2764]	; 0xacc
 801cc1c:	f8c7 3aa8 	str.w	r3, [r7, #2728]	; 0xaa8
            q31_t res01 = lhs_offset_contribution1;
 801cc20:	f8d7 3ac8 	ldr.w	r3, [r7, #2760]	; 0xac8
 801cc24:	f8c7 3aa4 	str.w	r3, [r7, #2724]	; 0xaa4

            int32_t rhs_cols_idx = 0;
 801cc28:	2300      	movs	r3, #0
 801cc2a:	f8c7 3aa0 	str.w	r3, [r7, #2720]	; 0xaa0

            q31_t val0, val1, val2, val3, val4, val5;
            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 801cc2e:	f001 baf1 	b.w	801e214 <arm_nn_mat_mult_nt_t_s8+0x4320>
 801cc32:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cc36:	f6a3 02b4 	subw	r2, r3, #2228	; 0x8b4
 801cc3a:	f507 7392 	add.w	r3, r7, #292	; 0x124
 801cc3e:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801cc40:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cc44:	f6a3 03b4 	subw	r3, r3, #2228	; 0x8b4
 801cc48:	681b      	ldr	r3, [r3, #0]
 801cc4a:	681b      	ldr	r3, [r3, #0]
 801cc4c:	681b      	ldr	r3, [r3, #0]
 801cc4e:	461a      	mov	r2, r3
 801cc50:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cc54:	f6a3 13cc 	subw	r3, r3, #2508	; 0x9cc
 801cc58:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801cc5a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cc5e:	f6a3 03b4 	subw	r3, r3, #2228	; 0x8b4
 801cc62:	681b      	ldr	r3, [r3, #0]
 801cc64:	681b      	ldr	r3, [r3, #0]
 801cc66:	1d1a      	adds	r2, r3, #4
 801cc68:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cc6c:	f6a3 03b4 	subw	r3, r3, #2228	; 0x8b4
 801cc70:	681b      	ldr	r3, [r3, #0]
 801cc72:	601a      	str	r2, [r3, #0]
    return (val);
 801cc74:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cc78:	f6a3 13cc 	subw	r3, r3, #2508	; 0x9cc
 801cc7c:	681b      	ldr	r3, [r3, #0]
            {
                val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 801cc7e:	f8c7 3a74 	str.w	r3, [r7, #2676]	; 0xa74
                val1 = arm_nn_read_q7x4((const q7_t *)&rhs_ptr[off0]);
 801cc82:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cc86:	f6a3 13b4 	subw	r3, r3, #2484	; 0x9b4
 801cc8a:	681a      	ldr	r2, [r3, #0]
 801cc8c:	f8d7 3a84 	ldr.w	r3, [r7, #2692]	; 0xa84
 801cc90:	441a      	add	r2, r3
 801cc92:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cc96:	f5a3 630b 	sub.w	r3, r3, #2224	; 0x8b0
 801cc9a:	601a      	str	r2, [r3, #0]
 801cc9c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cca0:	f5a3 630b 	sub.w	r3, r3, #2224	; 0x8b0
 801cca4:	681b      	ldr	r3, [r3, #0]
 801cca6:	681b      	ldr	r3, [r3, #0]
 801cca8:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801ccaa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ccae:	f5a3 631d 	sub.w	r3, r3, #2512	; 0x9d0
 801ccb2:	601a      	str	r2, [r3, #0]
    return (val);
 801ccb4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ccb8:	f5a3 631d 	sub.w	r3, r3, #2512	; 0x9d0
 801ccbc:	681b      	ldr	r3, [r3, #0]
 801ccbe:	f8c7 3a70 	str.w	r3, [r7, #2672]	; 0xa70
 801ccc2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ccc6:	f6a3 02ac 	subw	r2, r3, #2220	; 0x8ac
 801ccca:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 801ccce:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801ccd0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ccd4:	f6a3 03ac 	subw	r3, r3, #2220	; 0x8ac
 801ccd8:	681b      	ldr	r3, [r3, #0]
 801ccda:	681b      	ldr	r3, [r3, #0]
 801ccdc:	681b      	ldr	r3, [r3, #0]
 801ccde:	461a      	mov	r2, r3
 801cce0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cce4:	f6a3 13d4 	subw	r3, r3, #2516	; 0x9d4
 801cce8:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801ccea:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ccee:	f6a3 03ac 	subw	r3, r3, #2220	; 0x8ac
 801ccf2:	681b      	ldr	r3, [r3, #0]
 801ccf4:	681b      	ldr	r3, [r3, #0]
 801ccf6:	1d1a      	adds	r2, r3, #4
 801ccf8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ccfc:	f6a3 03ac 	subw	r3, r3, #2220	; 0x8ac
 801cd00:	681b      	ldr	r3, [r3, #0]
 801cd02:	601a      	str	r2, [r3, #0]
    return (val);
 801cd04:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cd08:	f6a3 13d4 	subw	r3, r3, #2516	; 0x9d4
 801cd0c:	681b      	ldr	r3, [r3, #0]
                val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 801cd0e:	f8c7 3a6c 	str.w	r3, [r7, #2668]	; 0xa6c
                val3 = __SXTB16(val0);
 801cd12:	f8d7 2a74 	ldr.w	r2, [r7, #2676]	; 0xa74
 801cd16:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cd1a:	f6a3 03a4 	subw	r3, r3, #2212	; 0x8a4
 801cd1e:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801cd20:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cd24:	f6a3 03a4 	subw	r3, r3, #2212	; 0x8a4
 801cd28:	681b      	ldr	r3, [r3, #0]
 801cd2a:	fa2f f283 	sxtb16	r2, r3
 801cd2e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cd32:	f6a3 03a8 	subw	r3, r3, #2216	; 0x8a8
 801cd36:	601a      	str	r2, [r3, #0]
  return(result);
 801cd38:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cd3c:	f6a3 03a8 	subw	r3, r3, #2216	; 0x8a8
 801cd40:	681b      	ldr	r3, [r3, #0]
 801cd42:	f8c7 3a68 	str.w	r3, [r7, #2664]	; 0xa68
                val5 = __SXTB16(val2);
 801cd46:	f8d7 2a6c 	ldr.w	r2, [r7, #2668]	; 0xa6c
 801cd4a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cd4e:	f6a3 039c 	subw	r3, r3, #2204	; 0x89c
 801cd52:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801cd54:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cd58:	f6a3 039c 	subw	r3, r3, #2204	; 0x89c
 801cd5c:	681b      	ldr	r3, [r3, #0]
 801cd5e:	fa2f f283 	sxtb16	r2, r3
 801cd62:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cd66:	f5a3 630a 	sub.w	r3, r3, #2208	; 0x8a0
 801cd6a:	601a      	str	r2, [r3, #0]
  return(result);
 801cd6c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cd70:	f5a3 630a 	sub.w	r3, r3, #2208	; 0x8a0
 801cd74:	681b      	ldr	r3, [r3, #0]
 801cd76:	f8c7 3a64 	str.w	r3, [r7, #2660]	; 0xa64
                val4 = __SXTB16(val1);
 801cd7a:	f8d7 2a70 	ldr.w	r2, [r7, #2672]	; 0xa70
 801cd7e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cd82:	f6a3 0394 	subw	r3, r3, #2196	; 0x894
 801cd86:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801cd88:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cd8c:	f6a3 0394 	subw	r3, r3, #2196	; 0x894
 801cd90:	681b      	ldr	r3, [r3, #0]
 801cd92:	fa2f f283 	sxtb16	r2, r3
 801cd96:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cd9a:	f6a3 0398 	subw	r3, r3, #2200	; 0x898
 801cd9e:	601a      	str	r2, [r3, #0]
  return(result);
 801cda0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cda4:	f6a3 0398 	subw	r3, r3, #2200	; 0x898
 801cda8:	681b      	ldr	r3, [r3, #0]
 801cdaa:	f8c7 3a60 	str.w	r3, [r7, #2656]	; 0xa60
                val0 = __SXTB16_RORn(val0, 8);
 801cdae:	f8d7 2a74 	ldr.w	r2, [r7, #2676]	; 0xa74
 801cdb2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cdb6:	f6a3 0378 	subw	r3, r3, #2168	; 0x878
 801cdba:	601a      	str	r2, [r3, #0]
 801cdbc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cdc0:	f6a3 027c 	subw	r2, r3, #2172	; 0x87c
 801cdc4:	2308      	movs	r3, #8
 801cdc6:	6013      	str	r3, [r2, #0]
 801cdc8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cdcc:	f5a3 6208 	sub.w	r2, r3, #2176	; 0x880
 801cdd0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cdd4:	f6a3 0378 	subw	r3, r3, #2168	; 0x878
 801cdd8:	681b      	ldr	r3, [r3, #0]
 801cdda:	6013      	str	r3, [r2, #0]
 801cddc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cde0:	f6a3 0284 	subw	r2, r3, #2180	; 0x884
 801cde4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cde8:	f6a3 037c 	subw	r3, r3, #2172	; 0x87c
 801cdec:	681b      	ldr	r3, [r3, #0]
 801cdee:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801cdf0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cdf4:	f6a3 0284 	subw	r2, r3, #2180	; 0x884
 801cdf8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cdfc:	f6a3 0384 	subw	r3, r3, #2180	; 0x884
 801ce00:	681b      	ldr	r3, [r3, #0]
 801ce02:	f003 031f 	and.w	r3, r3, #31
 801ce06:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801ce08:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ce0c:	f6a3 0384 	subw	r3, r3, #2180	; 0x884
 801ce10:	681b      	ldr	r3, [r3, #0]
 801ce12:	2b00      	cmp	r3, #0
 801ce14:	d105      	bne.n	801ce22 <arm_nn_mat_mult_nt_t_s8+0x2f2e>
    return op1;
 801ce16:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ce1a:	f5a3 6308 	sub.w	r3, r3, #2176	; 0x880
 801ce1e:	681a      	ldr	r2, [r3, #0]
 801ce20:	e00a      	b.n	801ce38 <arm_nn_mat_mult_nt_t_s8+0x2f44>
  return (op1 >> op2) | (op1 << (32U - op2));
 801ce22:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ce26:	f5a3 6208 	sub.w	r2, r3, #2176	; 0x880
 801ce2a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ce2e:	f6a3 0384 	subw	r3, r3, #2180	; 0x884
 801ce32:	6812      	ldr	r2, [r2, #0]
 801ce34:	681b      	ldr	r3, [r3, #0]
 801ce36:	41da      	rors	r2, r3
 801ce38:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ce3c:	f6a3 0388 	subw	r3, r3, #2184	; 0x888
 801ce40:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801ce42:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ce46:	f6a3 0388 	subw	r3, r3, #2184	; 0x888
 801ce4a:	681b      	ldr	r3, [r3, #0]
 801ce4c:	fa2f f283 	sxtb16	r2, r3
 801ce50:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ce54:	f6a3 038c 	subw	r3, r3, #2188	; 0x88c
 801ce58:	601a      	str	r2, [r3, #0]
  return(result);
 801ce5a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ce5e:	f6a3 038c 	subw	r3, r3, #2188	; 0x88c
 801ce62:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801ce64:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ce68:	f5a3 6309 	sub.w	r3, r3, #2192	; 0x890
 801ce6c:	601a      	str	r2, [r3, #0]
  return result;
 801ce6e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ce72:	f5a3 6309 	sub.w	r3, r3, #2192	; 0x890
 801ce76:	681b      	ldr	r3, [r3, #0]
 801ce78:	f8c7 3a74 	str.w	r3, [r7, #2676]	; 0xa74
                val2 = __SXTB16_RORn(val2, 8);
 801ce7c:	f8d7 2a6c 	ldr.w	r2, [r7, #2668]	; 0xa6c
 801ce80:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ce84:	f6a3 035c 	subw	r3, r3, #2140	; 0x85c
 801ce88:	601a      	str	r2, [r3, #0]
 801ce8a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ce8e:	f5a3 6206 	sub.w	r2, r3, #2144	; 0x860
 801ce92:	2308      	movs	r3, #8
 801ce94:	6013      	str	r3, [r2, #0]
 801ce96:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ce9a:	f6a3 0264 	subw	r2, r3, #2148	; 0x864
 801ce9e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cea2:	f6a3 035c 	subw	r3, r3, #2140	; 0x85c
 801cea6:	681b      	ldr	r3, [r3, #0]
 801cea8:	6013      	str	r3, [r2, #0]
 801ceaa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ceae:	f6a3 0268 	subw	r2, r3, #2152	; 0x868
 801ceb2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ceb6:	f5a3 6306 	sub.w	r3, r3, #2144	; 0x860
 801ceba:	681b      	ldr	r3, [r3, #0]
 801cebc:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801cebe:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cec2:	f6a3 0268 	subw	r2, r3, #2152	; 0x868
 801cec6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ceca:	f6a3 0368 	subw	r3, r3, #2152	; 0x868
 801cece:	681b      	ldr	r3, [r3, #0]
 801ced0:	f003 031f 	and.w	r3, r3, #31
 801ced4:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801ced6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ceda:	f6a3 0368 	subw	r3, r3, #2152	; 0x868
 801cede:	681b      	ldr	r3, [r3, #0]
 801cee0:	2b00      	cmp	r3, #0
 801cee2:	d105      	bne.n	801cef0 <arm_nn_mat_mult_nt_t_s8+0x2ffc>
    return op1;
 801cee4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cee8:	f6a3 0364 	subw	r3, r3, #2148	; 0x864
 801ceec:	681a      	ldr	r2, [r3, #0]
 801ceee:	e00a      	b.n	801cf06 <arm_nn_mat_mult_nt_t_s8+0x3012>
  return (op1 >> op2) | (op1 << (32U - op2));
 801cef0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cef4:	f6a3 0264 	subw	r2, r3, #2148	; 0x864
 801cef8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cefc:	f6a3 0368 	subw	r3, r3, #2152	; 0x868
 801cf00:	6812      	ldr	r2, [r2, #0]
 801cf02:	681b      	ldr	r3, [r3, #0]
 801cf04:	41da      	rors	r2, r3
 801cf06:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cf0a:	f6a3 036c 	subw	r3, r3, #2156	; 0x86c
 801cf0e:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801cf10:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cf14:	f6a3 036c 	subw	r3, r3, #2156	; 0x86c
 801cf18:	681b      	ldr	r3, [r3, #0]
 801cf1a:	fa2f f283 	sxtb16	r2, r3
 801cf1e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cf22:	f5a3 6307 	sub.w	r3, r3, #2160	; 0x870
 801cf26:	601a      	str	r2, [r3, #0]
  return(result);
 801cf28:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cf2c:	f5a3 6307 	sub.w	r3, r3, #2160	; 0x870
 801cf30:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801cf32:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cf36:	f6a3 0374 	subw	r3, r3, #2164	; 0x874
 801cf3a:	601a      	str	r2, [r3, #0]
  return result;
 801cf3c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cf40:	f6a3 0374 	subw	r3, r3, #2164	; 0x874
 801cf44:	681b      	ldr	r3, [r3, #0]
 801cf46:	f8c7 3a6c 	str.w	r3, [r7, #2668]	; 0xa6c
                val1 = __SXTB16_RORn(val1, 8);
 801cf4a:	f8d7 2a70 	ldr.w	r2, [r7, #2672]	; 0xa70
 801cf4e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cf52:	f5a3 6304 	sub.w	r3, r3, #2112	; 0x840
 801cf56:	601a      	str	r2, [r3, #0]
 801cf58:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cf5c:	f6a3 0244 	subw	r2, r3, #2116	; 0x844
 801cf60:	2308      	movs	r3, #8
 801cf62:	6013      	str	r3, [r2, #0]
 801cf64:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cf68:	f6a3 0248 	subw	r2, r3, #2120	; 0x848
 801cf6c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cf70:	f5a3 6304 	sub.w	r3, r3, #2112	; 0x840
 801cf74:	681b      	ldr	r3, [r3, #0]
 801cf76:	6013      	str	r3, [r2, #0]
 801cf78:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cf7c:	f6a3 024c 	subw	r2, r3, #2124	; 0x84c
 801cf80:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cf84:	f6a3 0344 	subw	r3, r3, #2116	; 0x844
 801cf88:	681b      	ldr	r3, [r3, #0]
 801cf8a:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801cf8c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cf90:	f6a3 024c 	subw	r2, r3, #2124	; 0x84c
 801cf94:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cf98:	f6a3 034c 	subw	r3, r3, #2124	; 0x84c
 801cf9c:	681b      	ldr	r3, [r3, #0]
 801cf9e:	f003 031f 	and.w	r3, r3, #31
 801cfa2:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801cfa4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cfa8:	f6a3 034c 	subw	r3, r3, #2124	; 0x84c
 801cfac:	681b      	ldr	r3, [r3, #0]
 801cfae:	2b00      	cmp	r3, #0
 801cfb0:	d105      	bne.n	801cfbe <arm_nn_mat_mult_nt_t_s8+0x30ca>
    return op1;
 801cfb2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cfb6:	f6a3 0348 	subw	r3, r3, #2120	; 0x848
 801cfba:	681a      	ldr	r2, [r3, #0]
 801cfbc:	e00a      	b.n	801cfd4 <arm_nn_mat_mult_nt_t_s8+0x30e0>
  return (op1 >> op2) | (op1 << (32U - op2));
 801cfbe:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cfc2:	f6a3 0248 	subw	r2, r3, #2120	; 0x848
 801cfc6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cfca:	f6a3 034c 	subw	r3, r3, #2124	; 0x84c
 801cfce:	6812      	ldr	r2, [r2, #0]
 801cfd0:	681b      	ldr	r3, [r3, #0]
 801cfd2:	41da      	rors	r2, r3
 801cfd4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cfd8:	f5a3 6305 	sub.w	r3, r3, #2128	; 0x850
 801cfdc:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801cfde:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cfe2:	f5a3 6305 	sub.w	r3, r3, #2128	; 0x850
 801cfe6:	681b      	ldr	r3, [r3, #0]
 801cfe8:	fa2f f283 	sxtb16	r2, r3
 801cfec:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cff0:	f6a3 0354 	subw	r3, r3, #2132	; 0x854
 801cff4:	601a      	str	r2, [r3, #0]
  return(result);
 801cff6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801cffa:	f6a3 0354 	subw	r3, r3, #2132	; 0x854
 801cffe:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801d000:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d004:	f6a3 0358 	subw	r3, r3, #2136	; 0x858
 801d008:	601a      	str	r2, [r3, #0]
  return result;
 801d00a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d00e:	f6a3 0358 	subw	r3, r3, #2136	; 0x858
 801d012:	681b      	ldr	r3, [r3, #0]
 801d014:	f8c7 3a70 	str.w	r3, [r7, #2672]	; 0xa70

                // 4 x MAC res00, res01
                res00 = __SMLAD(val5, val3, res00);
 801d018:	f8d7 2a64 	ldr.w	r2, [r7, #2660]	; 0xa64
 801d01c:	f8d7 1a68 	ldr.w	r1, [r7, #2664]	; 0xa68
 801d020:	f8d7 0aa8 	ldr.w	r0, [r7, #2728]	; 0xaa8
 801d024:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d028:	f5a3 6303 	sub.w	r3, r3, #2096	; 0x830
 801d02c:	601a      	str	r2, [r3, #0]
 801d02e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d032:	f6a3 0334 	subw	r3, r3, #2100	; 0x834
 801d036:	6019      	str	r1, [r3, #0]
 801d038:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d03c:	f6a3 0338 	subw	r3, r3, #2104	; 0x838
 801d040:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801d042:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d046:	f5a3 6303 	sub.w	r3, r3, #2096	; 0x830
 801d04a:	6819      	ldr	r1, [r3, #0]
 801d04c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d050:	f6a3 0334 	subw	r3, r3, #2100	; 0x834
 801d054:	681a      	ldr	r2, [r3, #0]
 801d056:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d05a:	f6a3 0338 	subw	r3, r3, #2104	; 0x838
 801d05e:	681b      	ldr	r3, [r3, #0]
 801d060:	fb21 3202 	smlad	r2, r1, r2, r3
 801d064:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d068:	f6a3 033c 	subw	r3, r3, #2108	; 0x83c
 801d06c:	601a      	str	r2, [r3, #0]
  return(result);
 801d06e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d072:	f6a3 033c 	subw	r3, r3, #2108	; 0x83c
 801d076:	681b      	ldr	r3, [r3, #0]
 801d078:	f8c7 3aa8 	str.w	r3, [r7, #2728]	; 0xaa8
                res00 = __SMLAD(val2, val0, res00);
 801d07c:	f8d7 2a6c 	ldr.w	r2, [r7, #2668]	; 0xa6c
 801d080:	f8d7 1a74 	ldr.w	r1, [r7, #2676]	; 0xa74
 801d084:	f8d7 0aa8 	ldr.w	r0, [r7, #2728]	; 0xaa8
 801d088:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d08c:	f5a3 6302 	sub.w	r3, r3, #2080	; 0x820
 801d090:	601a      	str	r2, [r3, #0]
 801d092:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d096:	f6a3 0324 	subw	r3, r3, #2084	; 0x824
 801d09a:	6019      	str	r1, [r3, #0]
 801d09c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d0a0:	f6a3 0328 	subw	r3, r3, #2088	; 0x828
 801d0a4:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801d0a6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d0aa:	f5a3 6302 	sub.w	r3, r3, #2080	; 0x820
 801d0ae:	6819      	ldr	r1, [r3, #0]
 801d0b0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d0b4:	f6a3 0324 	subw	r3, r3, #2084	; 0x824
 801d0b8:	681a      	ldr	r2, [r3, #0]
 801d0ba:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d0be:	f6a3 0328 	subw	r3, r3, #2088	; 0x828
 801d0c2:	681b      	ldr	r3, [r3, #0]
 801d0c4:	fb21 3202 	smlad	r2, r1, r2, r3
 801d0c8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d0cc:	f6a3 032c 	subw	r3, r3, #2092	; 0x82c
 801d0d0:	601a      	str	r2, [r3, #0]
  return(result);
 801d0d2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d0d6:	f6a3 032c 	subw	r3, r3, #2092	; 0x82c
 801d0da:	681b      	ldr	r3, [r3, #0]
 801d0dc:	f8c7 3aa8 	str.w	r3, [r7, #2728]	; 0xaa8
                res01 = __SMLAD(val5, val4, res01);
 801d0e0:	f8d7 2a64 	ldr.w	r2, [r7, #2660]	; 0xa64
 801d0e4:	f8d7 1a60 	ldr.w	r1, [r7, #2656]	; 0xa60
 801d0e8:	f8d7 0aa4 	ldr.w	r0, [r7, #2724]	; 0xaa4
 801d0ec:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d0f0:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 801d0f4:	601a      	str	r2, [r3, #0]
 801d0f6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d0fa:	f6a3 0314 	subw	r3, r3, #2068	; 0x814
 801d0fe:	6019      	str	r1, [r3, #0]
 801d100:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d104:	f6a3 0318 	subw	r3, r3, #2072	; 0x818
 801d108:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801d10a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d10e:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 801d112:	6819      	ldr	r1, [r3, #0]
 801d114:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d118:	f6a3 0314 	subw	r3, r3, #2068	; 0x814
 801d11c:	681a      	ldr	r2, [r3, #0]
 801d11e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d122:	f6a3 0318 	subw	r3, r3, #2072	; 0x818
 801d126:	681b      	ldr	r3, [r3, #0]
 801d128:	fb21 3202 	smlad	r2, r1, r2, r3
 801d12c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d130:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 801d134:	601a      	str	r2, [r3, #0]
  return(result);
 801d136:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d13a:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 801d13e:	681b      	ldr	r3, [r3, #0]
 801d140:	f8c7 3aa4 	str.w	r3, [r7, #2724]	; 0xaa4
                res01 = __SMLAD(val2, val1, res01);
 801d144:	f8d7 2a6c 	ldr.w	r2, [r7, #2668]	; 0xa6c
 801d148:	f8d7 1a70 	ldr.w	r1, [r7, #2672]	; 0xa70
 801d14c:	f8d7 0aa4 	ldr.w	r0, [r7, #2724]	; 0xaa4
 801d150:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d154:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 801d158:	601a      	str	r2, [r3, #0]
 801d15a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d15e:	f6a3 0304 	subw	r3, r3, #2052	; 0x804
 801d162:	6019      	str	r1, [r3, #0]
 801d164:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d168:	f6a3 0308 	subw	r3, r3, #2056	; 0x808
 801d16c:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801d16e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d172:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 801d176:	6819      	ldr	r1, [r3, #0]
 801d178:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d17c:	f6a3 0304 	subw	r3, r3, #2052	; 0x804
 801d180:	681a      	ldr	r2, [r3, #0]
 801d182:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d186:	f6a3 0308 	subw	r3, r3, #2056	; 0x808
 801d18a:	681b      	ldr	r3, [r3, #0]
 801d18c:	fb21 3202 	smlad	r2, r1, r2, r3
 801d190:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d194:	f6a3 030c 	subw	r3, r3, #2060	; 0x80c
 801d198:	601a      	str	r2, [r3, #0]
  return(result);
 801d19a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d19e:	f6a3 030c 	subw	r3, r3, #2060	; 0x80c
 801d1a2:	681b      	ldr	r3, [r3, #0]
 801d1a4:	f8c7 3aa4 	str.w	r3, [r7, #2724]	; 0xaa4
 801d1a8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d1ac:	f2a3 72fc 	subw	r2, r3, #2044	; 0x7fc
 801d1b0:	f507 7392 	add.w	r3, r7, #292	; 0x124
 801d1b4:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801d1b6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d1ba:	f2a3 73fc 	subw	r3, r3, #2044	; 0x7fc
 801d1be:	681b      	ldr	r3, [r3, #0]
 801d1c0:	681b      	ldr	r3, [r3, #0]
 801d1c2:	681b      	ldr	r3, [r3, #0]
 801d1c4:	461a      	mov	r2, r3
 801d1c6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d1ca:	f6a3 13d8 	subw	r3, r3, #2520	; 0x9d8
 801d1ce:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801d1d0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d1d4:	f2a3 73fc 	subw	r3, r3, #2044	; 0x7fc
 801d1d8:	681b      	ldr	r3, [r3, #0]
 801d1da:	681b      	ldr	r3, [r3, #0]
 801d1dc:	1d1a      	adds	r2, r3, #4
 801d1de:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d1e2:	f2a3 73fc 	subw	r3, r3, #2044	; 0x7fc
 801d1e6:	681b      	ldr	r3, [r3, #0]
 801d1e8:	601a      	str	r2, [r3, #0]
    return (val);
 801d1ea:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d1ee:	f6a3 13d8 	subw	r3, r3, #2520	; 0x9d8
 801d1f2:	681b      	ldr	r3, [r3, #0]

                val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 801d1f4:	f8c7 3a74 	str.w	r3, [r7, #2676]	; 0xa74
                val1 = arm_nn_read_q7x4((const q7_t *)&rhs_ptr[off0]);
 801d1f8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d1fc:	f6a3 13b4 	subw	r3, r3, #2484	; 0x9b4
 801d200:	681a      	ldr	r2, [r3, #0]
 801d202:	f8d7 3a84 	ldr.w	r3, [r7, #2692]	; 0xa84
 801d206:	441a      	add	r2, r3
 801d208:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d20c:	f5a3 63ff 	sub.w	r3, r3, #2040	; 0x7f8
 801d210:	601a      	str	r2, [r3, #0]
 801d212:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d216:	f5a3 63ff 	sub.w	r3, r3, #2040	; 0x7f8
 801d21a:	681b      	ldr	r3, [r3, #0]
 801d21c:	681b      	ldr	r3, [r3, #0]
 801d21e:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801d220:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d224:	f6a3 13dc 	subw	r3, r3, #2524	; 0x9dc
 801d228:	601a      	str	r2, [r3, #0]
    return (val);
 801d22a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d22e:	f6a3 13dc 	subw	r3, r3, #2524	; 0x9dc
 801d232:	681b      	ldr	r3, [r3, #0]
 801d234:	f8c7 3a70 	str.w	r3, [r7, #2672]	; 0xa70
 801d238:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d23c:	f2a3 72f4 	subw	r2, r3, #2036	; 0x7f4
 801d240:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 801d244:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801d246:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d24a:	f2a3 73f4 	subw	r3, r3, #2036	; 0x7f4
 801d24e:	681b      	ldr	r3, [r3, #0]
 801d250:	681b      	ldr	r3, [r3, #0]
 801d252:	681b      	ldr	r3, [r3, #0]
 801d254:	461a      	mov	r2, r3
 801d256:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d25a:	f5a3 631e 	sub.w	r3, r3, #2528	; 0x9e0
 801d25e:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801d260:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d264:	f2a3 73f4 	subw	r3, r3, #2036	; 0x7f4
 801d268:	681b      	ldr	r3, [r3, #0]
 801d26a:	681b      	ldr	r3, [r3, #0]
 801d26c:	1d1a      	adds	r2, r3, #4
 801d26e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d272:	f2a3 73f4 	subw	r3, r3, #2036	; 0x7f4
 801d276:	681b      	ldr	r3, [r3, #0]
 801d278:	601a      	str	r2, [r3, #0]
    return (val);
 801d27a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d27e:	f5a3 631e 	sub.w	r3, r3, #2528	; 0x9e0
 801d282:	681b      	ldr	r3, [r3, #0]
                val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 801d284:	f8c7 3a6c 	str.w	r3, [r7, #2668]	; 0xa6c
                val3 = __SXTB16(val0);
 801d288:	f8d7 2a74 	ldr.w	r2, [r7, #2676]	; 0xa74
 801d28c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d290:	f2a3 73ec 	subw	r3, r3, #2028	; 0x7ec
 801d294:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801d296:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d29a:	f2a3 73ec 	subw	r3, r3, #2028	; 0x7ec
 801d29e:	681b      	ldr	r3, [r3, #0]
 801d2a0:	fa2f f283 	sxtb16	r2, r3
 801d2a4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d2a8:	f5a3 63fe 	sub.w	r3, r3, #2032	; 0x7f0
 801d2ac:	601a      	str	r2, [r3, #0]
  return(result);
 801d2ae:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d2b2:	f5a3 63fe 	sub.w	r3, r3, #2032	; 0x7f0
 801d2b6:	681b      	ldr	r3, [r3, #0]
 801d2b8:	f8c7 3a68 	str.w	r3, [r7, #2664]	; 0xa68
                val5 = __SXTB16(val2);
 801d2bc:	f8d7 2a6c 	ldr.w	r2, [r7, #2668]	; 0xa6c
 801d2c0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d2c4:	f2a3 73e4 	subw	r3, r3, #2020	; 0x7e4
 801d2c8:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801d2ca:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d2ce:	f2a3 73e4 	subw	r3, r3, #2020	; 0x7e4
 801d2d2:	681b      	ldr	r3, [r3, #0]
 801d2d4:	fa2f f283 	sxtb16	r2, r3
 801d2d8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d2dc:	f5a3 63fd 	sub.w	r3, r3, #2024	; 0x7e8
 801d2e0:	601a      	str	r2, [r3, #0]
  return(result);
 801d2e2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d2e6:	f5a3 63fd 	sub.w	r3, r3, #2024	; 0x7e8
 801d2ea:	681b      	ldr	r3, [r3, #0]
 801d2ec:	f8c7 3a64 	str.w	r3, [r7, #2660]	; 0xa64
                val4 = __SXTB16(val1);
 801d2f0:	f8d7 2a70 	ldr.w	r2, [r7, #2672]	; 0xa70
 801d2f4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d2f8:	f2a3 73dc 	subw	r3, r3, #2012	; 0x7dc
 801d2fc:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801d2fe:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d302:	f2a3 73dc 	subw	r3, r3, #2012	; 0x7dc
 801d306:	681b      	ldr	r3, [r3, #0]
 801d308:	fa2f f283 	sxtb16	r2, r3
 801d30c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d310:	f5a3 63fc 	sub.w	r3, r3, #2016	; 0x7e0
 801d314:	601a      	str	r2, [r3, #0]
  return(result);
 801d316:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d31a:	f5a3 63fc 	sub.w	r3, r3, #2016	; 0x7e0
 801d31e:	681b      	ldr	r3, [r3, #0]
 801d320:	f8c7 3a60 	str.w	r3, [r7, #2656]	; 0xa60
                val0 = __SXTB16_RORn(val0, 8);
 801d324:	f8d7 2a74 	ldr.w	r2, [r7, #2676]	; 0xa74
 801d328:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d32c:	f5a3 63f8 	sub.w	r3, r3, #1984	; 0x7c0
 801d330:	601a      	str	r2, [r3, #0]
 801d332:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d336:	f2a3 72c4 	subw	r2, r3, #1988	; 0x7c4
 801d33a:	2308      	movs	r3, #8
 801d33c:	6013      	str	r3, [r2, #0]
 801d33e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d342:	f5a3 62f9 	sub.w	r2, r3, #1992	; 0x7c8
 801d346:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d34a:	f5a3 63f8 	sub.w	r3, r3, #1984	; 0x7c0
 801d34e:	681b      	ldr	r3, [r3, #0]
 801d350:	6013      	str	r3, [r2, #0]
 801d352:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d356:	f2a3 72cc 	subw	r2, r3, #1996	; 0x7cc
 801d35a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d35e:	f2a3 73c4 	subw	r3, r3, #1988	; 0x7c4
 801d362:	681b      	ldr	r3, [r3, #0]
 801d364:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801d366:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d36a:	f2a3 72cc 	subw	r2, r3, #1996	; 0x7cc
 801d36e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d372:	f2a3 73cc 	subw	r3, r3, #1996	; 0x7cc
 801d376:	681b      	ldr	r3, [r3, #0]
 801d378:	f003 031f 	and.w	r3, r3, #31
 801d37c:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801d37e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d382:	f2a3 73cc 	subw	r3, r3, #1996	; 0x7cc
 801d386:	681b      	ldr	r3, [r3, #0]
 801d388:	2b00      	cmp	r3, #0
 801d38a:	d105      	bne.n	801d398 <arm_nn_mat_mult_nt_t_s8+0x34a4>
    return op1;
 801d38c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d390:	f5a3 63f9 	sub.w	r3, r3, #1992	; 0x7c8
 801d394:	681a      	ldr	r2, [r3, #0]
 801d396:	e00a      	b.n	801d3ae <arm_nn_mat_mult_nt_t_s8+0x34ba>
  return (op1 >> op2) | (op1 << (32U - op2));
 801d398:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d39c:	f5a3 62f9 	sub.w	r2, r3, #1992	; 0x7c8
 801d3a0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d3a4:	f2a3 73cc 	subw	r3, r3, #1996	; 0x7cc
 801d3a8:	6812      	ldr	r2, [r2, #0]
 801d3aa:	681b      	ldr	r3, [r3, #0]
 801d3ac:	41da      	rors	r2, r3
 801d3ae:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d3b2:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 801d3b6:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801d3b8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d3bc:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 801d3c0:	681b      	ldr	r3, [r3, #0]
 801d3c2:	fa2f f283 	sxtb16	r2, r3
 801d3c6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d3ca:	f2a3 73d4 	subw	r3, r3, #2004	; 0x7d4
 801d3ce:	601a      	str	r2, [r3, #0]
  return(result);
 801d3d0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d3d4:	f2a3 73d4 	subw	r3, r3, #2004	; 0x7d4
 801d3d8:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801d3da:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d3de:	f5a3 63fb 	sub.w	r3, r3, #2008	; 0x7d8
 801d3e2:	601a      	str	r2, [r3, #0]
  return result;
 801d3e4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d3e8:	f5a3 63fb 	sub.w	r3, r3, #2008	; 0x7d8
 801d3ec:	681b      	ldr	r3, [r3, #0]
 801d3ee:	f8c7 3a74 	str.w	r3, [r7, #2676]	; 0xa74
                val2 = __SXTB16_RORn(val2, 8);
 801d3f2:	f8d7 2a6c 	ldr.w	r2, [r7, #2668]	; 0xa6c
 801d3f6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d3fa:	f2a3 73a4 	subw	r3, r3, #1956	; 0x7a4
 801d3fe:	601a      	str	r2, [r3, #0]
 801d400:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d404:	f5a3 62f5 	sub.w	r2, r3, #1960	; 0x7a8
 801d408:	2308      	movs	r3, #8
 801d40a:	6013      	str	r3, [r2, #0]
 801d40c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d410:	f2a3 72ac 	subw	r2, r3, #1964	; 0x7ac
 801d414:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d418:	f2a3 73a4 	subw	r3, r3, #1956	; 0x7a4
 801d41c:	681b      	ldr	r3, [r3, #0]
 801d41e:	6013      	str	r3, [r2, #0]
 801d420:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d424:	f5a3 62f6 	sub.w	r2, r3, #1968	; 0x7b0
 801d428:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d42c:	f5a3 63f5 	sub.w	r3, r3, #1960	; 0x7a8
 801d430:	681b      	ldr	r3, [r3, #0]
 801d432:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801d434:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d438:	f5a3 62f6 	sub.w	r2, r3, #1968	; 0x7b0
 801d43c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d440:	f5a3 63f6 	sub.w	r3, r3, #1968	; 0x7b0
 801d444:	681b      	ldr	r3, [r3, #0]
 801d446:	f003 031f 	and.w	r3, r3, #31
 801d44a:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801d44c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d450:	f5a3 63f6 	sub.w	r3, r3, #1968	; 0x7b0
 801d454:	681b      	ldr	r3, [r3, #0]
 801d456:	2b00      	cmp	r3, #0
 801d458:	d105      	bne.n	801d466 <arm_nn_mat_mult_nt_t_s8+0x3572>
    return op1;
 801d45a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d45e:	f2a3 73ac 	subw	r3, r3, #1964	; 0x7ac
 801d462:	681a      	ldr	r2, [r3, #0]
 801d464:	e00a      	b.n	801d47c <arm_nn_mat_mult_nt_t_s8+0x3588>
  return (op1 >> op2) | (op1 << (32U - op2));
 801d466:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d46a:	f2a3 72ac 	subw	r2, r3, #1964	; 0x7ac
 801d46e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d472:	f5a3 63f6 	sub.w	r3, r3, #1968	; 0x7b0
 801d476:	6812      	ldr	r2, [r2, #0]
 801d478:	681b      	ldr	r3, [r3, #0]
 801d47a:	41da      	rors	r2, r3
 801d47c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d480:	f2a3 73b4 	subw	r3, r3, #1972	; 0x7b4
 801d484:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801d486:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d48a:	f2a3 73b4 	subw	r3, r3, #1972	; 0x7b4
 801d48e:	681b      	ldr	r3, [r3, #0]
 801d490:	fa2f f283 	sxtb16	r2, r3
 801d494:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d498:	f5a3 63f7 	sub.w	r3, r3, #1976	; 0x7b8
 801d49c:	601a      	str	r2, [r3, #0]
  return(result);
 801d49e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d4a2:	f5a3 63f7 	sub.w	r3, r3, #1976	; 0x7b8
 801d4a6:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801d4a8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d4ac:	f2a3 73bc 	subw	r3, r3, #1980	; 0x7bc
 801d4b0:	601a      	str	r2, [r3, #0]
  return result;
 801d4b2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d4b6:	f2a3 73bc 	subw	r3, r3, #1980	; 0x7bc
 801d4ba:	681b      	ldr	r3, [r3, #0]
 801d4bc:	f8c7 3a6c 	str.w	r3, [r7, #2668]	; 0xa6c
                val1 = __SXTB16_RORn(val1, 8);
 801d4c0:	f8d7 2a70 	ldr.w	r2, [r7, #2672]	; 0xa70
 801d4c4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d4c8:	f5a3 63f1 	sub.w	r3, r3, #1928	; 0x788
 801d4cc:	601a      	str	r2, [r3, #0]
 801d4ce:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d4d2:	f2a3 728c 	subw	r2, r3, #1932	; 0x78c
 801d4d6:	2308      	movs	r3, #8
 801d4d8:	6013      	str	r3, [r2, #0]
 801d4da:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d4de:	f5a3 62f2 	sub.w	r2, r3, #1936	; 0x790
 801d4e2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d4e6:	f5a3 63f1 	sub.w	r3, r3, #1928	; 0x788
 801d4ea:	681b      	ldr	r3, [r3, #0]
 801d4ec:	6013      	str	r3, [r2, #0]
 801d4ee:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d4f2:	f2a3 7294 	subw	r2, r3, #1940	; 0x794
 801d4f6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d4fa:	f2a3 738c 	subw	r3, r3, #1932	; 0x78c
 801d4fe:	681b      	ldr	r3, [r3, #0]
 801d500:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801d502:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d506:	f2a3 7294 	subw	r2, r3, #1940	; 0x794
 801d50a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d50e:	f2a3 7394 	subw	r3, r3, #1940	; 0x794
 801d512:	681b      	ldr	r3, [r3, #0]
 801d514:	f003 031f 	and.w	r3, r3, #31
 801d518:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801d51a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d51e:	f2a3 7394 	subw	r3, r3, #1940	; 0x794
 801d522:	681b      	ldr	r3, [r3, #0]
 801d524:	2b00      	cmp	r3, #0
 801d526:	d105      	bne.n	801d534 <arm_nn_mat_mult_nt_t_s8+0x3640>
    return op1;
 801d528:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d52c:	f5a3 63f2 	sub.w	r3, r3, #1936	; 0x790
 801d530:	681a      	ldr	r2, [r3, #0]
 801d532:	e00a      	b.n	801d54a <arm_nn_mat_mult_nt_t_s8+0x3656>
  return (op1 >> op2) | (op1 << (32U - op2));
 801d534:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d538:	f5a3 62f2 	sub.w	r2, r3, #1936	; 0x790
 801d53c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d540:	f2a3 7394 	subw	r3, r3, #1940	; 0x794
 801d544:	6812      	ldr	r2, [r2, #0]
 801d546:	681b      	ldr	r3, [r3, #0]
 801d548:	41da      	rors	r2, r3
 801d54a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d54e:	f5a3 63f3 	sub.w	r3, r3, #1944	; 0x798
 801d552:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801d554:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d558:	f5a3 63f3 	sub.w	r3, r3, #1944	; 0x798
 801d55c:	681b      	ldr	r3, [r3, #0]
 801d55e:	fa2f f283 	sxtb16	r2, r3
 801d562:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d566:	f2a3 739c 	subw	r3, r3, #1948	; 0x79c
 801d56a:	601a      	str	r2, [r3, #0]
  return(result);
 801d56c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d570:	f2a3 739c 	subw	r3, r3, #1948	; 0x79c
 801d574:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801d576:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d57a:	f5a3 63f4 	sub.w	r3, r3, #1952	; 0x7a0
 801d57e:	601a      	str	r2, [r3, #0]
  return result;
 801d580:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d584:	f5a3 63f4 	sub.w	r3, r3, #1952	; 0x7a0
 801d588:	681b      	ldr	r3, [r3, #0]
 801d58a:	f8c7 3a70 	str.w	r3, [r7, #2672]	; 0xa70

                // 4 x MAC res00, res01
                res00 = __SMLAD(val5, val3, res00);
 801d58e:	f8d7 2a64 	ldr.w	r2, [r7, #2660]	; 0xa64
 801d592:	f8d7 1a68 	ldr.w	r1, [r7, #2664]	; 0xa68
 801d596:	f8d7 0aa8 	ldr.w	r0, [r7, #2728]	; 0xaa8
 801d59a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d59e:	f5a3 63ef 	sub.w	r3, r3, #1912	; 0x778
 801d5a2:	601a      	str	r2, [r3, #0]
 801d5a4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d5a8:	f2a3 737c 	subw	r3, r3, #1916	; 0x77c
 801d5ac:	6019      	str	r1, [r3, #0]
 801d5ae:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d5b2:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 801d5b6:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801d5b8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d5bc:	f5a3 63ef 	sub.w	r3, r3, #1912	; 0x778
 801d5c0:	6819      	ldr	r1, [r3, #0]
 801d5c2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d5c6:	f2a3 737c 	subw	r3, r3, #1916	; 0x77c
 801d5ca:	681a      	ldr	r2, [r3, #0]
 801d5cc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d5d0:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 801d5d4:	681b      	ldr	r3, [r3, #0]
 801d5d6:	fb21 3202 	smlad	r2, r1, r2, r3
 801d5da:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d5de:	f2a3 7384 	subw	r3, r3, #1924	; 0x784
 801d5e2:	601a      	str	r2, [r3, #0]
  return(result);
 801d5e4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d5e8:	f2a3 7384 	subw	r3, r3, #1924	; 0x784
 801d5ec:	681b      	ldr	r3, [r3, #0]
 801d5ee:	f8c7 3aa8 	str.w	r3, [r7, #2728]	; 0xaa8
                res00 = __SMLAD(val2, val0, res00);
 801d5f2:	f8d7 2a6c 	ldr.w	r2, [r7, #2668]	; 0xa6c
 801d5f6:	f8d7 1a74 	ldr.w	r1, [r7, #2676]	; 0xa74
 801d5fa:	f8d7 0aa8 	ldr.w	r0, [r7, #2728]	; 0xaa8
 801d5fe:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d602:	f5a3 63ed 	sub.w	r3, r3, #1896	; 0x768
 801d606:	601a      	str	r2, [r3, #0]
 801d608:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d60c:	f2a3 736c 	subw	r3, r3, #1900	; 0x76c
 801d610:	6019      	str	r1, [r3, #0]
 801d612:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d616:	f5a3 63ee 	sub.w	r3, r3, #1904	; 0x770
 801d61a:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801d61c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d620:	f5a3 63ed 	sub.w	r3, r3, #1896	; 0x768
 801d624:	6819      	ldr	r1, [r3, #0]
 801d626:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d62a:	f2a3 736c 	subw	r3, r3, #1900	; 0x76c
 801d62e:	681a      	ldr	r2, [r3, #0]
 801d630:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d634:	f5a3 63ee 	sub.w	r3, r3, #1904	; 0x770
 801d638:	681b      	ldr	r3, [r3, #0]
 801d63a:	fb21 3202 	smlad	r2, r1, r2, r3
 801d63e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d642:	f2a3 7374 	subw	r3, r3, #1908	; 0x774
 801d646:	601a      	str	r2, [r3, #0]
  return(result);
 801d648:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d64c:	f2a3 7374 	subw	r3, r3, #1908	; 0x774
 801d650:	681b      	ldr	r3, [r3, #0]
 801d652:	f8c7 3aa8 	str.w	r3, [r7, #2728]	; 0xaa8
                res01 = __SMLAD(val5, val4, res01);
 801d656:	f8d7 2a64 	ldr.w	r2, [r7, #2660]	; 0xa64
 801d65a:	f8d7 1a60 	ldr.w	r1, [r7, #2656]	; 0xa60
 801d65e:	f8d7 0aa4 	ldr.w	r0, [r7, #2724]	; 0xaa4
 801d662:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d666:	f5a3 63eb 	sub.w	r3, r3, #1880	; 0x758
 801d66a:	601a      	str	r2, [r3, #0]
 801d66c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d670:	f2a3 735c 	subw	r3, r3, #1884	; 0x75c
 801d674:	6019      	str	r1, [r3, #0]
 801d676:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d67a:	f5a3 63ec 	sub.w	r3, r3, #1888	; 0x760
 801d67e:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801d680:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d684:	f5a3 63eb 	sub.w	r3, r3, #1880	; 0x758
 801d688:	6819      	ldr	r1, [r3, #0]
 801d68a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d68e:	f2a3 735c 	subw	r3, r3, #1884	; 0x75c
 801d692:	681a      	ldr	r2, [r3, #0]
 801d694:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d698:	f5a3 63ec 	sub.w	r3, r3, #1888	; 0x760
 801d69c:	681b      	ldr	r3, [r3, #0]
 801d69e:	fb21 3202 	smlad	r2, r1, r2, r3
 801d6a2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d6a6:	f2a3 7364 	subw	r3, r3, #1892	; 0x764
 801d6aa:	601a      	str	r2, [r3, #0]
  return(result);
 801d6ac:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d6b0:	f2a3 7364 	subw	r3, r3, #1892	; 0x764
 801d6b4:	681b      	ldr	r3, [r3, #0]
 801d6b6:	f8c7 3aa4 	str.w	r3, [r7, #2724]	; 0xaa4
                res01 = __SMLAD(val2, val1, res01);
 801d6ba:	f8d7 2a6c 	ldr.w	r2, [r7, #2668]	; 0xa6c
 801d6be:	f8d7 1a70 	ldr.w	r1, [r7, #2672]	; 0xa70
 801d6c2:	f8d7 0aa4 	ldr.w	r0, [r7, #2724]	; 0xaa4
 801d6c6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d6ca:	f5a3 63e9 	sub.w	r3, r3, #1864	; 0x748
 801d6ce:	601a      	str	r2, [r3, #0]
 801d6d0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d6d4:	f2a3 734c 	subw	r3, r3, #1868	; 0x74c
 801d6d8:	6019      	str	r1, [r3, #0]
 801d6da:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d6de:	f5a3 63ea 	sub.w	r3, r3, #1872	; 0x750
 801d6e2:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801d6e4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d6e8:	f5a3 63e9 	sub.w	r3, r3, #1864	; 0x748
 801d6ec:	6819      	ldr	r1, [r3, #0]
 801d6ee:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d6f2:	f2a3 734c 	subw	r3, r3, #1868	; 0x74c
 801d6f6:	681a      	ldr	r2, [r3, #0]
 801d6f8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d6fc:	f5a3 63ea 	sub.w	r3, r3, #1872	; 0x750
 801d700:	681b      	ldr	r3, [r3, #0]
 801d702:	fb21 3202 	smlad	r2, r1, r2, r3
 801d706:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d70a:	f2a3 7354 	subw	r3, r3, #1876	; 0x754
 801d70e:	601a      	str	r2, [r3, #0]
  return(result);
 801d710:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d714:	f2a3 7354 	subw	r3, r3, #1876	; 0x754
 801d718:	681b      	ldr	r3, [r3, #0]
 801d71a:	f8c7 3aa4 	str.w	r3, [r7, #2724]	; 0xaa4
 801d71e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d722:	f2a3 7244 	subw	r2, r3, #1860	; 0x744
 801d726:	f507 7392 	add.w	r3, r7, #292	; 0x124
 801d72a:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801d72c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d730:	f2a3 7344 	subw	r3, r3, #1860	; 0x744
 801d734:	681b      	ldr	r3, [r3, #0]
 801d736:	681b      	ldr	r3, [r3, #0]
 801d738:	681b      	ldr	r3, [r3, #0]
 801d73a:	461a      	mov	r2, r3
 801d73c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d740:	f6a3 13e4 	subw	r3, r3, #2532	; 0x9e4
 801d744:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801d746:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d74a:	f2a3 7344 	subw	r3, r3, #1860	; 0x744
 801d74e:	681b      	ldr	r3, [r3, #0]
 801d750:	681b      	ldr	r3, [r3, #0]
 801d752:	1d1a      	adds	r2, r3, #4
 801d754:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d758:	f2a3 7344 	subw	r3, r3, #1860	; 0x744
 801d75c:	681b      	ldr	r3, [r3, #0]
 801d75e:	601a      	str	r2, [r3, #0]
    return (val);
 801d760:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d764:	f6a3 13e4 	subw	r3, r3, #2532	; 0x9e4
 801d768:	681b      	ldr	r3, [r3, #0]

                val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 801d76a:	f8c7 3a74 	str.w	r3, [r7, #2676]	; 0xa74
                val1 = arm_nn_read_q7x4((const q7_t *)&rhs_ptr[off0]);
 801d76e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d772:	f6a3 13b4 	subw	r3, r3, #2484	; 0x9b4
 801d776:	681a      	ldr	r2, [r3, #0]
 801d778:	f8d7 3a84 	ldr.w	r3, [r7, #2692]	; 0xa84
 801d77c:	441a      	add	r2, r3
 801d77e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d782:	f5a3 63e8 	sub.w	r3, r3, #1856	; 0x740
 801d786:	601a      	str	r2, [r3, #0]
 801d788:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d78c:	f5a3 63e8 	sub.w	r3, r3, #1856	; 0x740
 801d790:	681b      	ldr	r3, [r3, #0]
 801d792:	681b      	ldr	r3, [r3, #0]
 801d794:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801d796:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d79a:	f6a3 13e8 	subw	r3, r3, #2536	; 0x9e8
 801d79e:	601a      	str	r2, [r3, #0]
    return (val);
 801d7a0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d7a4:	f6a3 13e8 	subw	r3, r3, #2536	; 0x9e8
 801d7a8:	681b      	ldr	r3, [r3, #0]
 801d7aa:	f8c7 3a70 	str.w	r3, [r7, #2672]	; 0xa70
 801d7ae:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d7b2:	f2a3 723c 	subw	r2, r3, #1852	; 0x73c
 801d7b6:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 801d7ba:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801d7bc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d7c0:	f2a3 733c 	subw	r3, r3, #1852	; 0x73c
 801d7c4:	681b      	ldr	r3, [r3, #0]
 801d7c6:	681b      	ldr	r3, [r3, #0]
 801d7c8:	681b      	ldr	r3, [r3, #0]
 801d7ca:	461a      	mov	r2, r3
 801d7cc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d7d0:	f6a3 13ec 	subw	r3, r3, #2540	; 0x9ec
 801d7d4:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801d7d6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d7da:	f2a3 733c 	subw	r3, r3, #1852	; 0x73c
 801d7de:	681b      	ldr	r3, [r3, #0]
 801d7e0:	681b      	ldr	r3, [r3, #0]
 801d7e2:	1d1a      	adds	r2, r3, #4
 801d7e4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d7e8:	f2a3 733c 	subw	r3, r3, #1852	; 0x73c
 801d7ec:	681b      	ldr	r3, [r3, #0]
 801d7ee:	601a      	str	r2, [r3, #0]
    return (val);
 801d7f0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d7f4:	f6a3 13ec 	subw	r3, r3, #2540	; 0x9ec
 801d7f8:	681b      	ldr	r3, [r3, #0]
                val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 801d7fa:	f8c7 3a6c 	str.w	r3, [r7, #2668]	; 0xa6c
                val3 = __SXTB16(val0);
 801d7fe:	f8d7 2a74 	ldr.w	r2, [r7, #2676]	; 0xa74
 801d802:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d806:	f2a3 7334 	subw	r3, r3, #1844	; 0x734
 801d80a:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801d80c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d810:	f2a3 7334 	subw	r3, r3, #1844	; 0x734
 801d814:	681b      	ldr	r3, [r3, #0]
 801d816:	fa2f f283 	sxtb16	r2, r3
 801d81a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d81e:	f5a3 63e7 	sub.w	r3, r3, #1848	; 0x738
 801d822:	601a      	str	r2, [r3, #0]
  return(result);
 801d824:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d828:	f5a3 63e7 	sub.w	r3, r3, #1848	; 0x738
 801d82c:	681b      	ldr	r3, [r3, #0]
 801d82e:	f8c7 3a68 	str.w	r3, [r7, #2664]	; 0xa68
                val5 = __SXTB16(val2);
 801d832:	f8d7 2a6c 	ldr.w	r2, [r7, #2668]	; 0xa6c
 801d836:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d83a:	f2a3 732c 	subw	r3, r3, #1836	; 0x72c
 801d83e:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801d840:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d844:	f2a3 732c 	subw	r3, r3, #1836	; 0x72c
 801d848:	681b      	ldr	r3, [r3, #0]
 801d84a:	fa2f f283 	sxtb16	r2, r3
 801d84e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d852:	f5a3 63e6 	sub.w	r3, r3, #1840	; 0x730
 801d856:	601a      	str	r2, [r3, #0]
  return(result);
 801d858:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d85c:	f5a3 63e6 	sub.w	r3, r3, #1840	; 0x730
 801d860:	681b      	ldr	r3, [r3, #0]
 801d862:	f8c7 3a64 	str.w	r3, [r7, #2660]	; 0xa64
                val4 = __SXTB16(val1);
 801d866:	f8d7 2a70 	ldr.w	r2, [r7, #2672]	; 0xa70
 801d86a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d86e:	f2a3 7324 	subw	r3, r3, #1828	; 0x724
 801d872:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801d874:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d878:	f2a3 7324 	subw	r3, r3, #1828	; 0x724
 801d87c:	681b      	ldr	r3, [r3, #0]
 801d87e:	fa2f f283 	sxtb16	r2, r3
 801d882:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d886:	f5a3 63e5 	sub.w	r3, r3, #1832	; 0x728
 801d88a:	601a      	str	r2, [r3, #0]
  return(result);
 801d88c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d890:	f5a3 63e5 	sub.w	r3, r3, #1832	; 0x728
 801d894:	681b      	ldr	r3, [r3, #0]
 801d896:	f8c7 3a60 	str.w	r3, [r7, #2656]	; 0xa60
                val0 = __SXTB16_RORn(val0, 8);
 801d89a:	f8d7 2a74 	ldr.w	r2, [r7, #2676]	; 0xa74
 801d89e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d8a2:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 801d8a6:	601a      	str	r2, [r3, #0]
 801d8a8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d8ac:	f2a3 720c 	subw	r2, r3, #1804	; 0x70c
 801d8b0:	2308      	movs	r3, #8
 801d8b2:	6013      	str	r3, [r2, #0]
 801d8b4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d8b8:	f5a3 62e2 	sub.w	r2, r3, #1808	; 0x710
 801d8bc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d8c0:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 801d8c4:	681b      	ldr	r3, [r3, #0]
 801d8c6:	6013      	str	r3, [r2, #0]
 801d8c8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d8cc:	f2a3 7214 	subw	r2, r3, #1812	; 0x714
 801d8d0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d8d4:	f2a3 730c 	subw	r3, r3, #1804	; 0x70c
 801d8d8:	681b      	ldr	r3, [r3, #0]
 801d8da:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801d8dc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d8e0:	f2a3 7214 	subw	r2, r3, #1812	; 0x714
 801d8e4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d8e8:	f2a3 7314 	subw	r3, r3, #1812	; 0x714
 801d8ec:	681b      	ldr	r3, [r3, #0]
 801d8ee:	f003 031f 	and.w	r3, r3, #31
 801d8f2:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801d8f4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d8f8:	f2a3 7314 	subw	r3, r3, #1812	; 0x714
 801d8fc:	681b      	ldr	r3, [r3, #0]
 801d8fe:	2b00      	cmp	r3, #0
 801d900:	d105      	bne.n	801d90e <arm_nn_mat_mult_nt_t_s8+0x3a1a>
    return op1;
 801d902:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d906:	f5a3 63e2 	sub.w	r3, r3, #1808	; 0x710
 801d90a:	681a      	ldr	r2, [r3, #0]
 801d90c:	e00a      	b.n	801d924 <arm_nn_mat_mult_nt_t_s8+0x3a30>
  return (op1 >> op2) | (op1 << (32U - op2));
 801d90e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d912:	f5a3 62e2 	sub.w	r2, r3, #1808	; 0x710
 801d916:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d91a:	f2a3 7314 	subw	r3, r3, #1812	; 0x714
 801d91e:	6812      	ldr	r2, [r2, #0]
 801d920:	681b      	ldr	r3, [r3, #0]
 801d922:	41da      	rors	r2, r3
 801d924:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d928:	f5a3 63e3 	sub.w	r3, r3, #1816	; 0x718
 801d92c:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801d92e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d932:	f5a3 63e3 	sub.w	r3, r3, #1816	; 0x718
 801d936:	681b      	ldr	r3, [r3, #0]
 801d938:	fa2f f283 	sxtb16	r2, r3
 801d93c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d940:	f2a3 731c 	subw	r3, r3, #1820	; 0x71c
 801d944:	601a      	str	r2, [r3, #0]
  return(result);
 801d946:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d94a:	f2a3 731c 	subw	r3, r3, #1820	; 0x71c
 801d94e:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801d950:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d954:	f5a3 63e4 	sub.w	r3, r3, #1824	; 0x720
 801d958:	601a      	str	r2, [r3, #0]
  return result;
 801d95a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d95e:	f5a3 63e4 	sub.w	r3, r3, #1824	; 0x720
 801d962:	681b      	ldr	r3, [r3, #0]
 801d964:	f8c7 3a74 	str.w	r3, [r7, #2676]	; 0xa74
                val2 = __SXTB16_RORn(val2, 8);
 801d968:	f8d7 2a6c 	ldr.w	r2, [r7, #2668]	; 0xa6c
 801d96c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d970:	f2a3 63ec 	subw	r3, r3, #1772	; 0x6ec
 801d974:	601a      	str	r2, [r3, #0]
 801d976:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d97a:	f5a3 62de 	sub.w	r2, r3, #1776	; 0x6f0
 801d97e:	2308      	movs	r3, #8
 801d980:	6013      	str	r3, [r2, #0]
 801d982:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d986:	f2a3 62f4 	subw	r2, r3, #1780	; 0x6f4
 801d98a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d98e:	f2a3 63ec 	subw	r3, r3, #1772	; 0x6ec
 801d992:	681b      	ldr	r3, [r3, #0]
 801d994:	6013      	str	r3, [r2, #0]
 801d996:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d99a:	f5a3 62df 	sub.w	r2, r3, #1784	; 0x6f8
 801d99e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d9a2:	f5a3 63de 	sub.w	r3, r3, #1776	; 0x6f0
 801d9a6:	681b      	ldr	r3, [r3, #0]
 801d9a8:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801d9aa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d9ae:	f5a3 62df 	sub.w	r2, r3, #1784	; 0x6f8
 801d9b2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d9b6:	f5a3 63df 	sub.w	r3, r3, #1784	; 0x6f8
 801d9ba:	681b      	ldr	r3, [r3, #0]
 801d9bc:	f003 031f 	and.w	r3, r3, #31
 801d9c0:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801d9c2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d9c6:	f5a3 63df 	sub.w	r3, r3, #1784	; 0x6f8
 801d9ca:	681b      	ldr	r3, [r3, #0]
 801d9cc:	2b00      	cmp	r3, #0
 801d9ce:	d105      	bne.n	801d9dc <arm_nn_mat_mult_nt_t_s8+0x3ae8>
    return op1;
 801d9d0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d9d4:	f2a3 63f4 	subw	r3, r3, #1780	; 0x6f4
 801d9d8:	681a      	ldr	r2, [r3, #0]
 801d9da:	e00a      	b.n	801d9f2 <arm_nn_mat_mult_nt_t_s8+0x3afe>
  return (op1 >> op2) | (op1 << (32U - op2));
 801d9dc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d9e0:	f2a3 62f4 	subw	r2, r3, #1780	; 0x6f4
 801d9e4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d9e8:	f5a3 63df 	sub.w	r3, r3, #1784	; 0x6f8
 801d9ec:	6812      	ldr	r2, [r2, #0]
 801d9ee:	681b      	ldr	r3, [r3, #0]
 801d9f0:	41da      	rors	r2, r3
 801d9f2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801d9f6:	f2a3 63fc 	subw	r3, r3, #1788	; 0x6fc
 801d9fa:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801d9fc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801da00:	f2a3 63fc 	subw	r3, r3, #1788	; 0x6fc
 801da04:	681b      	ldr	r3, [r3, #0]
 801da06:	fa2f f283 	sxtb16	r2, r3
 801da0a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801da0e:	f5a3 63e0 	sub.w	r3, r3, #1792	; 0x700
 801da12:	601a      	str	r2, [r3, #0]
  return(result);
 801da14:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801da18:	f5a3 63e0 	sub.w	r3, r3, #1792	; 0x700
 801da1c:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801da1e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801da22:	f2a3 7304 	subw	r3, r3, #1796	; 0x704
 801da26:	601a      	str	r2, [r3, #0]
  return result;
 801da28:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801da2c:	f2a3 7304 	subw	r3, r3, #1796	; 0x704
 801da30:	681b      	ldr	r3, [r3, #0]
 801da32:	f8c7 3a6c 	str.w	r3, [r7, #2668]	; 0xa6c
                val1 = __SXTB16_RORn(val1, 8);
 801da36:	f8d7 2a70 	ldr.w	r2, [r7, #2672]	; 0xa70
 801da3a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801da3e:	f5a3 63da 	sub.w	r3, r3, #1744	; 0x6d0
 801da42:	601a      	str	r2, [r3, #0]
 801da44:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801da48:	f2a3 62d4 	subw	r2, r3, #1748	; 0x6d4
 801da4c:	2308      	movs	r3, #8
 801da4e:	6013      	str	r3, [r2, #0]
 801da50:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801da54:	f5a3 62db 	sub.w	r2, r3, #1752	; 0x6d8
 801da58:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801da5c:	f5a3 63da 	sub.w	r3, r3, #1744	; 0x6d0
 801da60:	681b      	ldr	r3, [r3, #0]
 801da62:	6013      	str	r3, [r2, #0]
 801da64:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801da68:	f2a3 62dc 	subw	r2, r3, #1756	; 0x6dc
 801da6c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801da70:	f2a3 63d4 	subw	r3, r3, #1748	; 0x6d4
 801da74:	681b      	ldr	r3, [r3, #0]
 801da76:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801da78:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801da7c:	f2a3 62dc 	subw	r2, r3, #1756	; 0x6dc
 801da80:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801da84:	f2a3 63dc 	subw	r3, r3, #1756	; 0x6dc
 801da88:	681b      	ldr	r3, [r3, #0]
 801da8a:	f003 031f 	and.w	r3, r3, #31
 801da8e:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801da90:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801da94:	f2a3 63dc 	subw	r3, r3, #1756	; 0x6dc
 801da98:	681b      	ldr	r3, [r3, #0]
 801da9a:	2b00      	cmp	r3, #0
 801da9c:	d105      	bne.n	801daaa <arm_nn_mat_mult_nt_t_s8+0x3bb6>
    return op1;
 801da9e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801daa2:	f5a3 63db 	sub.w	r3, r3, #1752	; 0x6d8
 801daa6:	681a      	ldr	r2, [r3, #0]
 801daa8:	e00a      	b.n	801dac0 <arm_nn_mat_mult_nt_t_s8+0x3bcc>
  return (op1 >> op2) | (op1 << (32U - op2));
 801daaa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801daae:	f5a3 62db 	sub.w	r2, r3, #1752	; 0x6d8
 801dab2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801dab6:	f2a3 63dc 	subw	r3, r3, #1756	; 0x6dc
 801daba:	6812      	ldr	r2, [r2, #0]
 801dabc:	681b      	ldr	r3, [r3, #0]
 801dabe:	41da      	rors	r2, r3
 801dac0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801dac4:	f5a3 63dc 	sub.w	r3, r3, #1760	; 0x6e0
 801dac8:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801daca:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801dace:	f5a3 63dc 	sub.w	r3, r3, #1760	; 0x6e0
 801dad2:	681b      	ldr	r3, [r3, #0]
 801dad4:	fa2f f283 	sxtb16	r2, r3
 801dad8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801dadc:	f2a3 63e4 	subw	r3, r3, #1764	; 0x6e4
 801dae0:	601a      	str	r2, [r3, #0]
  return(result);
 801dae2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801dae6:	f2a3 63e4 	subw	r3, r3, #1764	; 0x6e4
 801daea:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801daec:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801daf0:	f5a3 63dd 	sub.w	r3, r3, #1768	; 0x6e8
 801daf4:	601a      	str	r2, [r3, #0]
  return result;
 801daf6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801dafa:	f5a3 63dd 	sub.w	r3, r3, #1768	; 0x6e8
 801dafe:	681b      	ldr	r3, [r3, #0]
 801db00:	f8c7 3a70 	str.w	r3, [r7, #2672]	; 0xa70

                // 4 x MAC res00, res01
                res00 = __SMLAD(val5, val3, res00);
 801db04:	f8d7 2a64 	ldr.w	r2, [r7, #2660]	; 0xa64
 801db08:	f8d7 1a68 	ldr.w	r1, [r7, #2664]	; 0xa68
 801db0c:	f8d7 0aa8 	ldr.w	r0, [r7, #2728]	; 0xaa8
 801db10:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801db14:	f5a3 63d8 	sub.w	r3, r3, #1728	; 0x6c0
 801db18:	601a      	str	r2, [r3, #0]
 801db1a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801db1e:	f2a3 63c4 	subw	r3, r3, #1732	; 0x6c4
 801db22:	6019      	str	r1, [r3, #0]
 801db24:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801db28:	f5a3 63d9 	sub.w	r3, r3, #1736	; 0x6c8
 801db2c:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801db2e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801db32:	f5a3 63d8 	sub.w	r3, r3, #1728	; 0x6c0
 801db36:	6819      	ldr	r1, [r3, #0]
 801db38:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801db3c:	f2a3 63c4 	subw	r3, r3, #1732	; 0x6c4
 801db40:	681a      	ldr	r2, [r3, #0]
 801db42:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801db46:	f5a3 63d9 	sub.w	r3, r3, #1736	; 0x6c8
 801db4a:	681b      	ldr	r3, [r3, #0]
 801db4c:	fb21 3202 	smlad	r2, r1, r2, r3
 801db50:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801db54:	f2a3 63cc 	subw	r3, r3, #1740	; 0x6cc
 801db58:	601a      	str	r2, [r3, #0]
  return(result);
 801db5a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801db5e:	f2a3 63cc 	subw	r3, r3, #1740	; 0x6cc
 801db62:	681b      	ldr	r3, [r3, #0]
 801db64:	f8c7 3aa8 	str.w	r3, [r7, #2728]	; 0xaa8
                res00 = __SMLAD(val2, val0, res00);
 801db68:	f8d7 2a6c 	ldr.w	r2, [r7, #2668]	; 0xa6c
 801db6c:	f8d7 1a74 	ldr.w	r1, [r7, #2676]	; 0xa74
 801db70:	f8d7 0aa8 	ldr.w	r0, [r7, #2728]	; 0xaa8
 801db74:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801db78:	f5a3 63d6 	sub.w	r3, r3, #1712	; 0x6b0
 801db7c:	601a      	str	r2, [r3, #0]
 801db7e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801db82:	f2a3 63b4 	subw	r3, r3, #1716	; 0x6b4
 801db86:	6019      	str	r1, [r3, #0]
 801db88:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801db8c:	f5a3 63d7 	sub.w	r3, r3, #1720	; 0x6b8
 801db90:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801db92:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801db96:	f5a3 63d6 	sub.w	r3, r3, #1712	; 0x6b0
 801db9a:	6819      	ldr	r1, [r3, #0]
 801db9c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801dba0:	f2a3 63b4 	subw	r3, r3, #1716	; 0x6b4
 801dba4:	681a      	ldr	r2, [r3, #0]
 801dba6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801dbaa:	f5a3 63d7 	sub.w	r3, r3, #1720	; 0x6b8
 801dbae:	681b      	ldr	r3, [r3, #0]
 801dbb0:	fb21 3202 	smlad	r2, r1, r2, r3
 801dbb4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801dbb8:	f2a3 63bc 	subw	r3, r3, #1724	; 0x6bc
 801dbbc:	601a      	str	r2, [r3, #0]
  return(result);
 801dbbe:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801dbc2:	f2a3 63bc 	subw	r3, r3, #1724	; 0x6bc
 801dbc6:	681b      	ldr	r3, [r3, #0]
 801dbc8:	f8c7 3aa8 	str.w	r3, [r7, #2728]	; 0xaa8
                res01 = __SMLAD(val5, val4, res01);
 801dbcc:	f8d7 2a64 	ldr.w	r2, [r7, #2660]	; 0xa64
 801dbd0:	f8d7 1a60 	ldr.w	r1, [r7, #2656]	; 0xa60
 801dbd4:	f8d7 0aa4 	ldr.w	r0, [r7, #2724]	; 0xaa4
 801dbd8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801dbdc:	f5a3 63d4 	sub.w	r3, r3, #1696	; 0x6a0
 801dbe0:	601a      	str	r2, [r3, #0]
 801dbe2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801dbe6:	f2a3 63a4 	subw	r3, r3, #1700	; 0x6a4
 801dbea:	6019      	str	r1, [r3, #0]
 801dbec:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801dbf0:	f5a3 63d5 	sub.w	r3, r3, #1704	; 0x6a8
 801dbf4:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801dbf6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801dbfa:	f5a3 63d4 	sub.w	r3, r3, #1696	; 0x6a0
 801dbfe:	6819      	ldr	r1, [r3, #0]
 801dc00:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801dc04:	f2a3 63a4 	subw	r3, r3, #1700	; 0x6a4
 801dc08:	681a      	ldr	r2, [r3, #0]
 801dc0a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801dc0e:	f5a3 63d5 	sub.w	r3, r3, #1704	; 0x6a8
 801dc12:	681b      	ldr	r3, [r3, #0]
 801dc14:	fb21 3202 	smlad	r2, r1, r2, r3
 801dc18:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801dc1c:	f2a3 63ac 	subw	r3, r3, #1708	; 0x6ac
 801dc20:	601a      	str	r2, [r3, #0]
  return(result);
 801dc22:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801dc26:	f2a3 63ac 	subw	r3, r3, #1708	; 0x6ac
 801dc2a:	681b      	ldr	r3, [r3, #0]
 801dc2c:	f8c7 3aa4 	str.w	r3, [r7, #2724]	; 0xaa4
                res01 = __SMLAD(val2, val1, res01);
 801dc30:	f8d7 2a6c 	ldr.w	r2, [r7, #2668]	; 0xa6c
 801dc34:	f8d7 1a70 	ldr.w	r1, [r7, #2672]	; 0xa70
 801dc38:	f8d7 0aa4 	ldr.w	r0, [r7, #2724]	; 0xaa4
 801dc3c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801dc40:	f5a3 63d2 	sub.w	r3, r3, #1680	; 0x690
 801dc44:	601a      	str	r2, [r3, #0]
 801dc46:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801dc4a:	f2a3 6394 	subw	r3, r3, #1684	; 0x694
 801dc4e:	6019      	str	r1, [r3, #0]
 801dc50:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801dc54:	f5a3 63d3 	sub.w	r3, r3, #1688	; 0x698
 801dc58:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801dc5a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801dc5e:	f5a3 63d2 	sub.w	r3, r3, #1680	; 0x690
 801dc62:	6819      	ldr	r1, [r3, #0]
 801dc64:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801dc68:	f2a3 6394 	subw	r3, r3, #1684	; 0x694
 801dc6c:	681a      	ldr	r2, [r3, #0]
 801dc6e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801dc72:	f5a3 63d3 	sub.w	r3, r3, #1688	; 0x698
 801dc76:	681b      	ldr	r3, [r3, #0]
 801dc78:	fb21 3202 	smlad	r2, r1, r2, r3
 801dc7c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801dc80:	f2a3 639c 	subw	r3, r3, #1692	; 0x69c
 801dc84:	601a      	str	r2, [r3, #0]
  return(result);
 801dc86:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801dc8a:	f2a3 639c 	subw	r3, r3, #1692	; 0x69c
 801dc8e:	681b      	ldr	r3, [r3, #0]
 801dc90:	f8c7 3aa4 	str.w	r3, [r7, #2724]	; 0xaa4
 801dc94:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801dc98:	f2a3 628c 	subw	r2, r3, #1676	; 0x68c
 801dc9c:	f507 7392 	add.w	r3, r7, #292	; 0x124
 801dca0:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801dca2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801dca6:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 801dcaa:	681b      	ldr	r3, [r3, #0]
 801dcac:	681b      	ldr	r3, [r3, #0]
 801dcae:	681b      	ldr	r3, [r3, #0]
 801dcb0:	461a      	mov	r2, r3
 801dcb2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801dcb6:	f5a3 631f 	sub.w	r3, r3, #2544	; 0x9f0
 801dcba:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801dcbc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801dcc0:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 801dcc4:	681b      	ldr	r3, [r3, #0]
 801dcc6:	681b      	ldr	r3, [r3, #0]
 801dcc8:	1d1a      	adds	r2, r3, #4
 801dcca:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801dcce:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 801dcd2:	681b      	ldr	r3, [r3, #0]
 801dcd4:	601a      	str	r2, [r3, #0]
    return (val);
 801dcd6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801dcda:	f5a3 631f 	sub.w	r3, r3, #2544	; 0x9f0
 801dcde:	681b      	ldr	r3, [r3, #0]

                val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 801dce0:	f8c7 3a74 	str.w	r3, [r7, #2676]	; 0xa74
                val1 = arm_nn_read_q7x4((const q7_t *)&rhs_ptr[off0]);
 801dce4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801dce8:	f6a3 13b4 	subw	r3, r3, #2484	; 0x9b4
 801dcec:	681a      	ldr	r2, [r3, #0]
 801dcee:	f8d7 3a84 	ldr.w	r3, [r7, #2692]	; 0xa84
 801dcf2:	441a      	add	r2, r3
 801dcf4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801dcf8:	f5a3 63d1 	sub.w	r3, r3, #1672	; 0x688
 801dcfc:	601a      	str	r2, [r3, #0]
 801dcfe:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801dd02:	f5a3 63d1 	sub.w	r3, r3, #1672	; 0x688
 801dd06:	681b      	ldr	r3, [r3, #0]
 801dd08:	681b      	ldr	r3, [r3, #0]
 801dd0a:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801dd0c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801dd10:	f6a3 13f4 	subw	r3, r3, #2548	; 0x9f4
 801dd14:	601a      	str	r2, [r3, #0]
    return (val);
 801dd16:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801dd1a:	f6a3 13f4 	subw	r3, r3, #2548	; 0x9f4
 801dd1e:	681b      	ldr	r3, [r3, #0]
 801dd20:	f8c7 3a70 	str.w	r3, [r7, #2672]	; 0xa70
 801dd24:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801dd28:	f2a3 6284 	subw	r2, r3, #1668	; 0x684
 801dd2c:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 801dd30:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801dd32:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801dd36:	f2a3 6384 	subw	r3, r3, #1668	; 0x684
 801dd3a:	681b      	ldr	r3, [r3, #0]
 801dd3c:	681b      	ldr	r3, [r3, #0]
 801dd3e:	681b      	ldr	r3, [r3, #0]
 801dd40:	461a      	mov	r2, r3
 801dd42:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801dd46:	f6a3 13f8 	subw	r3, r3, #2552	; 0x9f8
 801dd4a:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801dd4c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801dd50:	f2a3 6384 	subw	r3, r3, #1668	; 0x684
 801dd54:	681b      	ldr	r3, [r3, #0]
 801dd56:	681b      	ldr	r3, [r3, #0]
 801dd58:	1d1a      	adds	r2, r3, #4
 801dd5a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801dd5e:	f2a3 6384 	subw	r3, r3, #1668	; 0x684
 801dd62:	681b      	ldr	r3, [r3, #0]
 801dd64:	601a      	str	r2, [r3, #0]
    return (val);
 801dd66:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801dd6a:	f6a3 13f8 	subw	r3, r3, #2552	; 0x9f8
 801dd6e:	681b      	ldr	r3, [r3, #0]
                val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 801dd70:	f8c7 3a6c 	str.w	r3, [r7, #2668]	; 0xa6c
                val3 = __SXTB16(val0);
 801dd74:	f8d7 2a74 	ldr.w	r2, [r7, #2676]	; 0xa74
 801dd78:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801dd7c:	f2a3 637c 	subw	r3, r3, #1660	; 0x67c
 801dd80:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801dd82:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801dd86:	f2a3 637c 	subw	r3, r3, #1660	; 0x67c
 801dd8a:	681b      	ldr	r3, [r3, #0]
 801dd8c:	fa2f f283 	sxtb16	r2, r3
 801dd90:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801dd94:	f5a3 63d0 	sub.w	r3, r3, #1664	; 0x680
 801dd98:	601a      	str	r2, [r3, #0]
  return(result);
 801dd9a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801dd9e:	f5a3 63d0 	sub.w	r3, r3, #1664	; 0x680
 801dda2:	681b      	ldr	r3, [r3, #0]
 801dda4:	f8c7 3a68 	str.w	r3, [r7, #2664]	; 0xa68
                val5 = __SXTB16(val2);
 801dda8:	f8d7 2a6c 	ldr.w	r2, [r7, #2668]	; 0xa6c
 801ddac:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ddb0:	f2a3 6374 	subw	r3, r3, #1652	; 0x674
 801ddb4:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801ddb6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ddba:	f2a3 6374 	subw	r3, r3, #1652	; 0x674
 801ddbe:	681b      	ldr	r3, [r3, #0]
 801ddc0:	fa2f f283 	sxtb16	r2, r3
 801ddc4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ddc8:	f5a3 63cf 	sub.w	r3, r3, #1656	; 0x678
 801ddcc:	601a      	str	r2, [r3, #0]
  return(result);
 801ddce:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ddd2:	f5a3 63cf 	sub.w	r3, r3, #1656	; 0x678
 801ddd6:	681b      	ldr	r3, [r3, #0]
 801ddd8:	f8c7 3a64 	str.w	r3, [r7, #2660]	; 0xa64
                val4 = __SXTB16(val1);
 801dddc:	f8d7 2a70 	ldr.w	r2, [r7, #2672]	; 0xa70
 801dde0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801dde4:	f2a3 636c 	subw	r3, r3, #1644	; 0x66c
 801dde8:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801ddea:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ddee:	f2a3 636c 	subw	r3, r3, #1644	; 0x66c
 801ddf2:	681b      	ldr	r3, [r3, #0]
 801ddf4:	fa2f f283 	sxtb16	r2, r3
 801ddf8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ddfc:	f5a3 63ce 	sub.w	r3, r3, #1648	; 0x670
 801de00:	601a      	str	r2, [r3, #0]
  return(result);
 801de02:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801de06:	f5a3 63ce 	sub.w	r3, r3, #1648	; 0x670
 801de0a:	681b      	ldr	r3, [r3, #0]
 801de0c:	f8c7 3a60 	str.w	r3, [r7, #2656]	; 0xa60
                val0 = __SXTB16_RORn(val0, 8);
 801de10:	f8d7 2a74 	ldr.w	r2, [r7, #2676]	; 0xa74
 801de14:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801de18:	f5a3 63ca 	sub.w	r3, r3, #1616	; 0x650
 801de1c:	601a      	str	r2, [r3, #0]
 801de1e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801de22:	f2a3 6254 	subw	r2, r3, #1620	; 0x654
 801de26:	2308      	movs	r3, #8
 801de28:	6013      	str	r3, [r2, #0]
 801de2a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801de2e:	f5a3 62cb 	sub.w	r2, r3, #1624	; 0x658
 801de32:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801de36:	f5a3 63ca 	sub.w	r3, r3, #1616	; 0x650
 801de3a:	681b      	ldr	r3, [r3, #0]
 801de3c:	6013      	str	r3, [r2, #0]
 801de3e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801de42:	f2a3 625c 	subw	r2, r3, #1628	; 0x65c
 801de46:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801de4a:	f2a3 6354 	subw	r3, r3, #1620	; 0x654
 801de4e:	681b      	ldr	r3, [r3, #0]
 801de50:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801de52:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801de56:	f2a3 625c 	subw	r2, r3, #1628	; 0x65c
 801de5a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801de5e:	f2a3 635c 	subw	r3, r3, #1628	; 0x65c
 801de62:	681b      	ldr	r3, [r3, #0]
 801de64:	f003 031f 	and.w	r3, r3, #31
 801de68:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801de6a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801de6e:	f2a3 635c 	subw	r3, r3, #1628	; 0x65c
 801de72:	681b      	ldr	r3, [r3, #0]
 801de74:	2b00      	cmp	r3, #0
 801de76:	d105      	bne.n	801de84 <arm_nn_mat_mult_nt_t_s8+0x3f90>
    return op1;
 801de78:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801de7c:	f5a3 63cb 	sub.w	r3, r3, #1624	; 0x658
 801de80:	681a      	ldr	r2, [r3, #0]
 801de82:	e00a      	b.n	801de9a <arm_nn_mat_mult_nt_t_s8+0x3fa6>
  return (op1 >> op2) | (op1 << (32U - op2));
 801de84:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801de88:	f5a3 62cb 	sub.w	r2, r3, #1624	; 0x658
 801de8c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801de90:	f2a3 635c 	subw	r3, r3, #1628	; 0x65c
 801de94:	6812      	ldr	r2, [r2, #0]
 801de96:	681b      	ldr	r3, [r3, #0]
 801de98:	41da      	rors	r2, r3
 801de9a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801de9e:	f5a3 63cc 	sub.w	r3, r3, #1632	; 0x660
 801dea2:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801dea4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801dea8:	f5a3 63cc 	sub.w	r3, r3, #1632	; 0x660
 801deac:	681b      	ldr	r3, [r3, #0]
 801deae:	fa2f f283 	sxtb16	r2, r3
 801deb2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801deb6:	f2a3 6364 	subw	r3, r3, #1636	; 0x664
 801deba:	601a      	str	r2, [r3, #0]
  return(result);
 801debc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801dec0:	f2a3 6364 	subw	r3, r3, #1636	; 0x664
 801dec4:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801dec6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801deca:	f5a3 63cd 	sub.w	r3, r3, #1640	; 0x668
 801dece:	601a      	str	r2, [r3, #0]
  return result;
 801ded0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ded4:	f5a3 63cd 	sub.w	r3, r3, #1640	; 0x668
 801ded8:	681b      	ldr	r3, [r3, #0]
 801deda:	f8c7 3a74 	str.w	r3, [r7, #2676]	; 0xa74
                val2 = __SXTB16_RORn(val2, 8);
 801dede:	f8d7 2a6c 	ldr.w	r2, [r7, #2668]	; 0xa6c
 801dee2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801dee6:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 801deea:	601a      	str	r2, [r3, #0]
 801deec:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801def0:	f5a3 62c7 	sub.w	r2, r3, #1592	; 0x638
 801def4:	2308      	movs	r3, #8
 801def6:	6013      	str	r3, [r2, #0]
 801def8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801defc:	f2a3 623c 	subw	r2, r3, #1596	; 0x63c
 801df00:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801df04:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 801df08:	681b      	ldr	r3, [r3, #0]
 801df0a:	6013      	str	r3, [r2, #0]
 801df0c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801df10:	f5a3 62c8 	sub.w	r2, r3, #1600	; 0x640
 801df14:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801df18:	f5a3 63c7 	sub.w	r3, r3, #1592	; 0x638
 801df1c:	681b      	ldr	r3, [r3, #0]
 801df1e:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801df20:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801df24:	f5a3 62c8 	sub.w	r2, r3, #1600	; 0x640
 801df28:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801df2c:	f5a3 63c8 	sub.w	r3, r3, #1600	; 0x640
 801df30:	681b      	ldr	r3, [r3, #0]
 801df32:	f003 031f 	and.w	r3, r3, #31
 801df36:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801df38:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801df3c:	f5a3 63c8 	sub.w	r3, r3, #1600	; 0x640
 801df40:	681b      	ldr	r3, [r3, #0]
 801df42:	2b00      	cmp	r3, #0
 801df44:	d105      	bne.n	801df52 <arm_nn_mat_mult_nt_t_s8+0x405e>
    return op1;
 801df46:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801df4a:	f2a3 633c 	subw	r3, r3, #1596	; 0x63c
 801df4e:	681a      	ldr	r2, [r3, #0]
 801df50:	e00a      	b.n	801df68 <arm_nn_mat_mult_nt_t_s8+0x4074>
  return (op1 >> op2) | (op1 << (32U - op2));
 801df52:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801df56:	f2a3 623c 	subw	r2, r3, #1596	; 0x63c
 801df5a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801df5e:	f5a3 63c8 	sub.w	r3, r3, #1600	; 0x640
 801df62:	6812      	ldr	r2, [r2, #0]
 801df64:	681b      	ldr	r3, [r3, #0]
 801df66:	41da      	rors	r2, r3
 801df68:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801df6c:	f2a3 6344 	subw	r3, r3, #1604	; 0x644
 801df70:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801df72:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801df76:	f2a3 6344 	subw	r3, r3, #1604	; 0x644
 801df7a:	681b      	ldr	r3, [r3, #0]
 801df7c:	fa2f f283 	sxtb16	r2, r3
 801df80:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801df84:	f5a3 63c9 	sub.w	r3, r3, #1608	; 0x648
 801df88:	601a      	str	r2, [r3, #0]
  return(result);
 801df8a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801df8e:	f5a3 63c9 	sub.w	r3, r3, #1608	; 0x648
 801df92:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801df94:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801df98:	f2a3 634c 	subw	r3, r3, #1612	; 0x64c
 801df9c:	601a      	str	r2, [r3, #0]
  return result;
 801df9e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801dfa2:	f2a3 634c 	subw	r3, r3, #1612	; 0x64c
 801dfa6:	681b      	ldr	r3, [r3, #0]
 801dfa8:	f8c7 3a6c 	str.w	r3, [r7, #2668]	; 0xa6c
                val1 = __SXTB16_RORn(val1, 8);
 801dfac:	f8d7 2a70 	ldr.w	r2, [r7, #2672]	; 0xa70
 801dfb0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801dfb4:	f5a3 63c3 	sub.w	r3, r3, #1560	; 0x618
 801dfb8:	601a      	str	r2, [r3, #0]
 801dfba:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801dfbe:	f2a3 621c 	subw	r2, r3, #1564	; 0x61c
 801dfc2:	2308      	movs	r3, #8
 801dfc4:	6013      	str	r3, [r2, #0]
 801dfc6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801dfca:	f5a3 62c4 	sub.w	r2, r3, #1568	; 0x620
 801dfce:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801dfd2:	f5a3 63c3 	sub.w	r3, r3, #1560	; 0x618
 801dfd6:	681b      	ldr	r3, [r3, #0]
 801dfd8:	6013      	str	r3, [r2, #0]
 801dfda:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801dfde:	f2a3 6224 	subw	r2, r3, #1572	; 0x624
 801dfe2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801dfe6:	f2a3 631c 	subw	r3, r3, #1564	; 0x61c
 801dfea:	681b      	ldr	r3, [r3, #0]
 801dfec:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801dfee:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801dff2:	f2a3 6224 	subw	r2, r3, #1572	; 0x624
 801dff6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801dffa:	f2a3 6324 	subw	r3, r3, #1572	; 0x624
 801dffe:	681b      	ldr	r3, [r3, #0]
 801e000:	f003 031f 	and.w	r3, r3, #31
 801e004:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801e006:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e00a:	f2a3 6324 	subw	r3, r3, #1572	; 0x624
 801e00e:	681b      	ldr	r3, [r3, #0]
 801e010:	2b00      	cmp	r3, #0
 801e012:	d105      	bne.n	801e020 <arm_nn_mat_mult_nt_t_s8+0x412c>
    return op1;
 801e014:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e018:	f5a3 63c4 	sub.w	r3, r3, #1568	; 0x620
 801e01c:	681a      	ldr	r2, [r3, #0]
 801e01e:	e00a      	b.n	801e036 <arm_nn_mat_mult_nt_t_s8+0x4142>
  return (op1 >> op2) | (op1 << (32U - op2));
 801e020:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e024:	f5a3 62c4 	sub.w	r2, r3, #1568	; 0x620
 801e028:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e02c:	f2a3 6324 	subw	r3, r3, #1572	; 0x624
 801e030:	6812      	ldr	r2, [r2, #0]
 801e032:	681b      	ldr	r3, [r3, #0]
 801e034:	41da      	rors	r2, r3
 801e036:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e03a:	f5a3 63c5 	sub.w	r3, r3, #1576	; 0x628
 801e03e:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801e040:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e044:	f5a3 63c5 	sub.w	r3, r3, #1576	; 0x628
 801e048:	681b      	ldr	r3, [r3, #0]
 801e04a:	fa2f f283 	sxtb16	r2, r3
 801e04e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e052:	f2a3 632c 	subw	r3, r3, #1580	; 0x62c
 801e056:	601a      	str	r2, [r3, #0]
  return(result);
 801e058:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e05c:	f2a3 632c 	subw	r3, r3, #1580	; 0x62c
 801e060:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801e062:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e066:	f5a3 63c6 	sub.w	r3, r3, #1584	; 0x630
 801e06a:	601a      	str	r2, [r3, #0]
  return result;
 801e06c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e070:	f5a3 63c6 	sub.w	r3, r3, #1584	; 0x630
 801e074:	681b      	ldr	r3, [r3, #0]
 801e076:	f8c7 3a70 	str.w	r3, [r7, #2672]	; 0xa70

                // 4 x MAC res00, res01
                res00 = __SMLAD(val5, val3, res00);
 801e07a:	f8d7 2a64 	ldr.w	r2, [r7, #2660]	; 0xa64
 801e07e:	f8d7 1a68 	ldr.w	r1, [r7, #2664]	; 0xa68
 801e082:	f8d7 0aa8 	ldr.w	r0, [r7, #2728]	; 0xaa8
 801e086:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e08a:	f5a3 63c1 	sub.w	r3, r3, #1544	; 0x608
 801e08e:	601a      	str	r2, [r3, #0]
 801e090:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e094:	f2a3 630c 	subw	r3, r3, #1548	; 0x60c
 801e098:	6019      	str	r1, [r3, #0]
 801e09a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e09e:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 801e0a2:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801e0a4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e0a8:	f5a3 63c1 	sub.w	r3, r3, #1544	; 0x608
 801e0ac:	6819      	ldr	r1, [r3, #0]
 801e0ae:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e0b2:	f2a3 630c 	subw	r3, r3, #1548	; 0x60c
 801e0b6:	681a      	ldr	r2, [r3, #0]
 801e0b8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e0bc:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 801e0c0:	681b      	ldr	r3, [r3, #0]
 801e0c2:	fb21 3202 	smlad	r2, r1, r2, r3
 801e0c6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e0ca:	f2a3 6314 	subw	r3, r3, #1556	; 0x614
 801e0ce:	601a      	str	r2, [r3, #0]
  return(result);
 801e0d0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e0d4:	f2a3 6314 	subw	r3, r3, #1556	; 0x614
 801e0d8:	681b      	ldr	r3, [r3, #0]
 801e0da:	f8c7 3aa8 	str.w	r3, [r7, #2728]	; 0xaa8
                res00 = __SMLAD(val2, val0, res00);
 801e0de:	f8d7 2a6c 	ldr.w	r2, [r7, #2668]	; 0xa6c
 801e0e2:	f8d7 1a74 	ldr.w	r1, [r7, #2676]	; 0xa74
 801e0e6:	f8d7 0aa8 	ldr.w	r0, [r7, #2728]	; 0xaa8
 801e0ea:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e0ee:	f5a3 63bf 	sub.w	r3, r3, #1528	; 0x5f8
 801e0f2:	601a      	str	r2, [r3, #0]
 801e0f4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e0f8:	f2a3 53fc 	subw	r3, r3, #1532	; 0x5fc
 801e0fc:	6019      	str	r1, [r3, #0]
 801e0fe:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e102:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
 801e106:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801e108:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e10c:	f5a3 63bf 	sub.w	r3, r3, #1528	; 0x5f8
 801e110:	6819      	ldr	r1, [r3, #0]
 801e112:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e116:	f2a3 53fc 	subw	r3, r3, #1532	; 0x5fc
 801e11a:	681a      	ldr	r2, [r3, #0]
 801e11c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e120:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
 801e124:	681b      	ldr	r3, [r3, #0]
 801e126:	fb21 3202 	smlad	r2, r1, r2, r3
 801e12a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e12e:	f2a3 6304 	subw	r3, r3, #1540	; 0x604
 801e132:	601a      	str	r2, [r3, #0]
  return(result);
 801e134:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e138:	f2a3 6304 	subw	r3, r3, #1540	; 0x604
 801e13c:	681b      	ldr	r3, [r3, #0]
 801e13e:	f8c7 3aa8 	str.w	r3, [r7, #2728]	; 0xaa8
                res01 = __SMLAD(val5, val4, res01);
 801e142:	f8d7 2a64 	ldr.w	r2, [r7, #2660]	; 0xa64
 801e146:	f8d7 1a60 	ldr.w	r1, [r7, #2656]	; 0xa60
 801e14a:	f8d7 0aa4 	ldr.w	r0, [r7, #2724]	; 0xaa4
 801e14e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e152:	f5a3 63bd 	sub.w	r3, r3, #1512	; 0x5e8
 801e156:	601a      	str	r2, [r3, #0]
 801e158:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e15c:	f2a3 53ec 	subw	r3, r3, #1516	; 0x5ec
 801e160:	6019      	str	r1, [r3, #0]
 801e162:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e166:	f5a3 63be 	sub.w	r3, r3, #1520	; 0x5f0
 801e16a:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801e16c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e170:	f5a3 63bd 	sub.w	r3, r3, #1512	; 0x5e8
 801e174:	6819      	ldr	r1, [r3, #0]
 801e176:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e17a:	f2a3 53ec 	subw	r3, r3, #1516	; 0x5ec
 801e17e:	681a      	ldr	r2, [r3, #0]
 801e180:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e184:	f5a3 63be 	sub.w	r3, r3, #1520	; 0x5f0
 801e188:	681b      	ldr	r3, [r3, #0]
 801e18a:	fb21 3202 	smlad	r2, r1, r2, r3
 801e18e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e192:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 801e196:	601a      	str	r2, [r3, #0]
  return(result);
 801e198:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e19c:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 801e1a0:	681b      	ldr	r3, [r3, #0]
 801e1a2:	f8c7 3aa4 	str.w	r3, [r7, #2724]	; 0xaa4
                res01 = __SMLAD(val2, val1, res01);
 801e1a6:	f8d7 2a6c 	ldr.w	r2, [r7, #2668]	; 0xa6c
 801e1aa:	f8d7 1a70 	ldr.w	r1, [r7, #2672]	; 0xa70
 801e1ae:	f8d7 0aa4 	ldr.w	r0, [r7, #2724]	; 0xaa4
 801e1b2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e1b6:	f5a3 63bb 	sub.w	r3, r3, #1496	; 0x5d8
 801e1ba:	601a      	str	r2, [r3, #0]
 801e1bc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e1c0:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 801e1c4:	6019      	str	r1, [r3, #0]
 801e1c6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e1ca:	f5a3 63bc 	sub.w	r3, r3, #1504	; 0x5e0
 801e1ce:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801e1d0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e1d4:	f5a3 63bb 	sub.w	r3, r3, #1496	; 0x5d8
 801e1d8:	6819      	ldr	r1, [r3, #0]
 801e1da:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e1de:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 801e1e2:	681a      	ldr	r2, [r3, #0]
 801e1e4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e1e8:	f5a3 63bc 	sub.w	r3, r3, #1504	; 0x5e0
 801e1ec:	681b      	ldr	r3, [r3, #0]
 801e1ee:	fb21 3202 	smlad	r2, r1, r2, r3
 801e1f2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e1f6:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 801e1fa:	601a      	str	r2, [r3, #0]
  return(result);
 801e1fc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e200:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 801e204:	681b      	ldr	r3, [r3, #0]
 801e206:	f8c7 3aa4 	str.w	r3, [r7, #2724]	; 0xaa4
            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 801e20a:	f8d7 3aa0 	ldr.w	r3, [r7, #2720]	; 0xaa0
 801e20e:	3310      	adds	r3, #16
 801e210:	f8c7 3aa0 	str.w	r3, [r7, #2720]	; 0xaa0
 801e214:	f8d7 3b08 	ldr.w	r3, [r7, #2824]	; 0xb08
 801e218:	f1a3 020f 	sub.w	r2, r3, #15
 801e21c:	f8d7 3aa0 	ldr.w	r3, [r7, #2720]	; 0xaa0
 801e220:	4293      	cmp	r3, r2
 801e222:	f6fe ad06 	blt.w	801cc32 <arm_nn_mat_mult_nt_t_s8+0x2d3e>
            }

            // Left-over accumulations
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 801e226:	e04b      	b.n	801e2c0 <arm_nn_mat_mult_nt_t_s8+0x43cc>
            {
                q7_t rhs_value0 = rhs_ptr[0];
 801e228:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e22c:	f6a3 13b4 	subw	r3, r3, #2484	; 0x9b4
 801e230:	681b      	ldr	r3, [r3, #0]
 801e232:	781b      	ldrb	r3, [r3, #0]
 801e234:	f887 3a7b 	strb.w	r3, [r7, #2683]	; 0xa7b
                q7_t rhs_value1 = rhs_ptr[rhs_cols];
 801e238:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e23c:	f6a3 13b4 	subw	r3, r3, #2484	; 0x9b4
 801e240:	681a      	ldr	r2, [r3, #0]
 801e242:	f8d7 3b08 	ldr.w	r3, [r7, #2824]	; 0xb08
 801e246:	4413      	add	r3, r2
 801e248:	781b      	ldrb	r3, [r3, #0]
 801e24a:	f887 3a7a 	strb.w	r3, [r7, #2682]	; 0xa7a
                q7_t lhs_value = lhs_ptr[0];
 801e24e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e252:	f6a3 1348 	subw	r3, r3, #2376	; 0x948
 801e256:	681b      	ldr	r3, [r3, #0]
 801e258:	781b      	ldrb	r3, [r3, #0]
 801e25a:	f887 3a79 	strb.w	r3, [r7, #2681]	; 0xa79

                res00 += lhs_value * rhs_value0;
 801e25e:	f997 2a79 	ldrsb.w	r2, [r7, #2681]	; 0xa79
 801e262:	f997 3a7b 	ldrsb.w	r3, [r7, #2683]	; 0xa7b
 801e266:	fb03 f202 	mul.w	r2, r3, r2
 801e26a:	f8d7 3aa8 	ldr.w	r3, [r7, #2728]	; 0xaa8
 801e26e:	4413      	add	r3, r2
 801e270:	f8c7 3aa8 	str.w	r3, [r7, #2728]	; 0xaa8
                res01 += lhs_value * rhs_value1;
 801e274:	f997 2a79 	ldrsb.w	r2, [r7, #2681]	; 0xa79
 801e278:	f997 3a7a 	ldrsb.w	r3, [r7, #2682]	; 0xa7a
 801e27c:	fb03 f202 	mul.w	r2, r3, r2
 801e280:	f8d7 3aa4 	ldr.w	r3, [r7, #2724]	; 0xaa4
 801e284:	4413      	add	r3, r2
 801e286:	f8c7 3aa4 	str.w	r3, [r7, #2724]	; 0xaa4

                ++rhs_ptr;
 801e28a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e28e:	f6a3 13b4 	subw	r3, r3, #2484	; 0x9b4
 801e292:	681b      	ldr	r3, [r3, #0]
 801e294:	1c5a      	adds	r2, r3, #1
 801e296:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e29a:	f6a3 13b4 	subw	r3, r3, #2484	; 0x9b4
 801e29e:	601a      	str	r2, [r3, #0]
                ++lhs_ptr;
 801e2a0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e2a4:	f6a3 1348 	subw	r3, r3, #2376	; 0x948
 801e2a8:	681b      	ldr	r3, [r3, #0]
 801e2aa:	1c5a      	adds	r2, r3, #1
 801e2ac:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e2b0:	f6a3 1348 	subw	r3, r3, #2376	; 0x948
 801e2b4:	601a      	str	r2, [r3, #0]
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 801e2b6:	f8d7 3aa0 	ldr.w	r3, [r7, #2720]	; 0xaa0
 801e2ba:	3301      	adds	r3, #1
 801e2bc:	f8c7 3aa0 	str.w	r3, [r7, #2720]	; 0xaa0
 801e2c0:	f8d7 2aa0 	ldr.w	r2, [r7, #2720]	; 0xaa0
 801e2c4:	f8d7 3b08 	ldr.w	r3, [r7, #2824]	; 0xb08
 801e2c8:	429a      	cmp	r2, r3
 801e2ca:	dbad      	blt.n	801e228 <arm_nn_mat_mult_nt_t_s8+0x4334>
            }

            // Quantize down
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows_idx], dst_shifts[rhs_rows_idx]);
 801e2cc:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	; 0xad4
 801e2d0:	009a      	lsls	r2, r3, #2
 801e2d2:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	; 0xaf8
 801e2d6:	4413      	add	r3, r2
 801e2d8:	6818      	ldr	r0, [r3, #0]
 801e2da:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	; 0xad4
 801e2de:	009a      	lsls	r2, r3, #2
 801e2e0:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 801e2e4:	4413      	add	r3, r2
 801e2e6:	6819      	ldr	r1, [r3, #0]
 801e2e8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e2ec:	f6a3 02e8 	subw	r2, r3, #2280	; 0x8e8
 801e2f0:	f8d7 3aa8 	ldr.w	r3, [r7, #2728]	; 0xaa8
 801e2f4:	6013      	str	r3, [r2, #0]
 801e2f6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e2fa:	f6a3 03ec 	subw	r3, r3, #2284	; 0x8ec
 801e2fe:	6018      	str	r0, [r3, #0]
 801e300:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e304:	f5a3 630f 	sub.w	r3, r3, #2288	; 0x8f0
 801e308:	6019      	str	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801e30a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e30e:	f5a3 630f 	sub.w	r3, r3, #2288	; 0x8f0
 801e312:	681b      	ldr	r3, [r3, #0]
 801e314:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 801e318:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e31c:	f6a3 03e8 	subw	r3, r3, #2280	; 0x8e8
 801e320:	681b      	ldr	r3, [r3, #0]
 801e322:	fa03 f202 	lsl.w	r2, r3, r2
 801e326:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e32a:	f6a3 03f4 	subw	r3, r3, #2292	; 0x8f4
 801e32e:	601a      	str	r2, [r3, #0]
 801e330:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e334:	f6a3 02f8 	subw	r2, r3, #2296	; 0x8f8
 801e338:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e33c:	f6a3 03ec 	subw	r3, r3, #2284	; 0x8ec
 801e340:	681b      	ldr	r3, [r3, #0]
 801e342:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801e344:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e348:	f6a3 02fc 	subw	r2, r3, #2300	; 0x8fc
 801e34c:	2300      	movs	r3, #0
 801e34e:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 801e350:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801e354:	461a      	mov	r2, r3
 801e356:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801e35a:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 801e35c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801e360:	461a      	mov	r2, r3
 801e362:	2300      	movs	r3, #0
 801e364:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801e366:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801e36a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801e36e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e372:	f6a3 03f4 	subw	r3, r3, #2292	; 0x8f4
 801e376:	681b      	ldr	r3, [r3, #0]
 801e378:	17da      	asrs	r2, r3, #31
 801e37a:	653b      	str	r3, [r7, #80]	; 0x50
 801e37c:	657a      	str	r2, [r7, #84]	; 0x54
 801e37e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e382:	f6a3 03f8 	subw	r3, r3, #2296	; 0x8f8
 801e386:	681b      	ldr	r3, [r3, #0]
 801e388:	17da      	asrs	r2, r3, #31
 801e38a:	64bb      	str	r3, [r7, #72]	; 0x48
 801e38c:	64fa      	str	r2, [r7, #76]	; 0x4c
 801e38e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e390:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801e392:	fb02 f203 	mul.w	r2, r2, r3
 801e396:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e398:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 801e39a:	fb04 f303 	mul.w	r3, r4, r3
 801e39e:	4413      	add	r3, r2
 801e3a0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801e3a2:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 801e3a4:	fba2 4204 	umull	r4, r2, r2, r4
 801e3a8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 801e3ac:	4622      	mov	r2, r4
 801e3ae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 801e3b2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 801e3b6:	4413      	add	r3, r2
 801e3b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801e3bc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801e3c0:	18c3      	adds	r3, r0, r3
 801e3c2:	61bb      	str	r3, [r7, #24]
 801e3c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801e3c8:	eb41 0303 	adc.w	r3, r1, r3
 801e3cc:	61fb      	str	r3, [r7, #28]
 801e3ce:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801e3d2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 801e3d6:	e9c3 1200 	strd	r1, r2, [r3]
    result = (int32_t)(mult.long_long >> 31);
 801e3da:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801e3de:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e3e2:	f04f 0000 	mov.w	r0, #0
 801e3e6:	f04f 0100 	mov.w	r1, #0
 801e3ea:	0fd0      	lsrs	r0, r2, #31
 801e3ec:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801e3f0:	17d9      	asrs	r1, r3, #31
 801e3f2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e3f6:	f6a3 02fc 	subw	r2, r3, #2300	; 0x8fc
 801e3fa:	4603      	mov	r3, r0
 801e3fc:	6013      	str	r3, [r2, #0]
    return result;
 801e3fe:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e402:	f6a3 03fc 	subw	r3, r3, #2300	; 0x8fc
 801e406:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801e408:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e40c:	f5a3 630f 	sub.w	r3, r3, #2288	; 0x8f0
 801e410:	681b      	ldr	r3, [r3, #0]
 801e412:	2b00      	cmp	r3, #0
 801e414:	dc06      	bgt.n	801e424 <arm_nn_mat_mult_nt_t_s8+0x4530>
 801e416:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e41a:	f5a3 630f 	sub.w	r3, r3, #2288	; 0x8f0
 801e41e:	681b      	ldr	r3, [r3, #0]
 801e420:	425a      	negs	r2, r3
 801e422:	e000      	b.n	801e426 <arm_nn_mat_mult_nt_t_s8+0x4532>
 801e424:	2200      	movs	r2, #0
 801e426:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e42a:	f5a3 6310 	sub.w	r3, r3, #2304	; 0x900
 801e42e:	6019      	str	r1, [r3, #0]
 801e430:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e434:	f6a3 1304 	subw	r3, r3, #2308	; 0x904
 801e438:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801e43a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e43e:	f6a3 1208 	subw	r2, r3, #2312	; 0x908
 801e442:	2300      	movs	r3, #0
 801e444:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801e446:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e44a:	f6a3 1304 	subw	r3, r3, #2308	; 0x904
 801e44e:	2201      	movs	r2, #1
 801e450:	681b      	ldr	r3, [r3, #0]
 801e452:	fa02 f103 	lsl.w	r1, r2, r3
 801e456:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e45a:	f6a3 120c 	subw	r2, r3, #2316	; 0x90c
 801e45e:	1e4b      	subs	r3, r1, #1
 801e460:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 801e462:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e466:	f5a3 6111 	sub.w	r1, r3, #2320	; 0x910
 801e46a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e46e:	f5a3 6210 	sub.w	r2, r3, #2304	; 0x900
 801e472:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e476:	f6a3 130c 	subw	r3, r3, #2316	; 0x90c
 801e47a:	6812      	ldr	r2, [r2, #0]
 801e47c:	681b      	ldr	r3, [r3, #0]
 801e47e:	4013      	ands	r3, r2
 801e480:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 801e482:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e486:	f6a3 1108 	subw	r1, r3, #2312	; 0x908
 801e48a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e48e:	f5a3 6210 	sub.w	r2, r3, #2304	; 0x900
 801e492:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e496:	f6a3 1304 	subw	r3, r3, #2308	; 0x904
 801e49a:	6812      	ldr	r2, [r2, #0]
 801e49c:	681b      	ldr	r3, [r3, #0]
 801e49e:	fa42 f303 	asr.w	r3, r2, r3
 801e4a2:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 801e4a4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e4a8:	f6a3 1214 	subw	r2, r3, #2324	; 0x914
 801e4ac:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e4b0:	f6a3 130c 	subw	r3, r3, #2316	; 0x90c
 801e4b4:	681b      	ldr	r3, [r3, #0]
 801e4b6:	105b      	asrs	r3, r3, #1
 801e4b8:	6013      	str	r3, [r2, #0]
    if (result < 0)
 801e4ba:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e4be:	f6a3 1308 	subw	r3, r3, #2312	; 0x908
 801e4c2:	681b      	ldr	r3, [r3, #0]
 801e4c4:	2b00      	cmp	r3, #0
 801e4c6:	da0a      	bge.n	801e4de <arm_nn_mat_mult_nt_t_s8+0x45ea>
        threshold++;
 801e4c8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e4cc:	f6a3 1214 	subw	r2, r3, #2324	; 0x914
 801e4d0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e4d4:	f6a3 1314 	subw	r3, r3, #2324	; 0x914
 801e4d8:	681b      	ldr	r3, [r3, #0]
 801e4da:	3301      	adds	r3, #1
 801e4dc:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 801e4de:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e4e2:	f5a3 6211 	sub.w	r2, r3, #2320	; 0x910
 801e4e6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e4ea:	f6a3 1314 	subw	r3, r3, #2324	; 0x914
 801e4ee:	6812      	ldr	r2, [r2, #0]
 801e4f0:	681b      	ldr	r3, [r3, #0]
 801e4f2:	429a      	cmp	r2, r3
 801e4f4:	dd0a      	ble.n	801e50c <arm_nn_mat_mult_nt_t_s8+0x4618>
        result++;
 801e4f6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e4fa:	f6a3 1208 	subw	r2, r3, #2312	; 0x908
 801e4fe:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e502:	f6a3 1308 	subw	r3, r3, #2312	; 0x908
 801e506:	681b      	ldr	r3, [r3, #0]
 801e508:	3301      	adds	r3, #1
 801e50a:	6013      	str	r3, [r2, #0]
    return result;
 801e50c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e510:	f6a3 1308 	subw	r3, r3, #2312	; 0x908
 801e514:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801e516:	bf00      	nop
 801e518:	f8c7 3aa8 	str.w	r3, [r7, #2728]	; 0xaa8
            res01 = arm_nn_requantize(res01, dst_multipliers[rhs_rows_idx + 1], dst_shifts[rhs_rows_idx + 1]);
 801e51c:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	; 0xad4
 801e520:	3301      	adds	r3, #1
 801e522:	009a      	lsls	r2, r3, #2
 801e524:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	; 0xaf8
 801e528:	4413      	add	r3, r2
 801e52a:	6818      	ldr	r0, [r3, #0]
 801e52c:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	; 0xad4
 801e530:	3301      	adds	r3, #1
 801e532:	009a      	lsls	r2, r3, #2
 801e534:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 801e538:	4413      	add	r3, r2
 801e53a:	6819      	ldr	r1, [r3, #0]
 801e53c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e540:	f6a3 02b8 	subw	r2, r3, #2232	; 0x8b8
 801e544:	f8d7 3aa4 	ldr.w	r3, [r7, #2724]	; 0xaa4
 801e548:	6013      	str	r3, [r2, #0]
 801e54a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e54e:	f6a3 03bc 	subw	r3, r3, #2236	; 0x8bc
 801e552:	6018      	str	r0, [r3, #0]
 801e554:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e558:	f5a3 630c 	sub.w	r3, r3, #2240	; 0x8c0
 801e55c:	6019      	str	r1, [r3, #0]
 801e55e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e562:	f5a3 630c 	sub.w	r3, r3, #2240	; 0x8c0
 801e566:	681b      	ldr	r3, [r3, #0]
 801e568:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 801e56c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e570:	f6a3 03b8 	subw	r3, r3, #2232	; 0x8b8
 801e574:	681b      	ldr	r3, [r3, #0]
 801e576:	fa03 f202 	lsl.w	r2, r3, r2
 801e57a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e57e:	f6a3 03c4 	subw	r3, r3, #2244	; 0x8c4
 801e582:	601a      	str	r2, [r3, #0]
 801e584:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e588:	f6a3 02c8 	subw	r2, r3, #2248	; 0x8c8
 801e58c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e590:	f6a3 03bc 	subw	r3, r3, #2236	; 0x8bc
 801e594:	681b      	ldr	r3, [r3, #0]
 801e596:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801e598:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e59c:	f6a3 02cc 	subw	r2, r3, #2252	; 0x8cc
 801e5a0:	2300      	movs	r3, #0
 801e5a2:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 801e5a4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801e5a8:	461a      	mov	r2, r3
 801e5aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801e5ae:	f842 3c08 	str.w	r3, [r2, #-8]
    mult.word.high = 0;
 801e5b2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801e5b6:	461a      	mov	r2, r3
 801e5b8:	2300      	movs	r3, #0
 801e5ba:	f842 3c04 	str.w	r3, [r2, #-4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801e5be:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801e5c2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 801e5c6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e5ca:	f6a3 03c4 	subw	r3, r3, #2244	; 0x8c4
 801e5ce:	681b      	ldr	r3, [r3, #0]
 801e5d0:	17da      	asrs	r2, r3, #31
 801e5d2:	663b      	str	r3, [r7, #96]	; 0x60
 801e5d4:	667a      	str	r2, [r7, #100]	; 0x64
 801e5d6:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e5da:	f6a3 03c8 	subw	r3, r3, #2248	; 0x8c8
 801e5de:	681b      	ldr	r3, [r3, #0]
 801e5e0:	17da      	asrs	r2, r3, #31
 801e5e2:	65bb      	str	r3, [r7, #88]	; 0x58
 801e5e4:	65fa      	str	r2, [r7, #92]	; 0x5c
 801e5e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801e5e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801e5ea:	fb02 f203 	mul.w	r2, r2, r3
 801e5ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801e5f0:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 801e5f2:	fb04 f303 	mul.w	r3, r4, r3
 801e5f6:	4413      	add	r3, r2
 801e5f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801e5fa:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 801e5fc:	fba2 4204 	umull	r4, r2, r2, r4
 801e600:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 801e604:	4622      	mov	r2, r4
 801e606:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 801e60a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801e60e:	4413      	add	r3, r2
 801e610:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801e614:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801e618:	18c3      	adds	r3, r0, r3
 801e61a:	623b      	str	r3, [r7, #32]
 801e61c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801e620:	eb41 0303 	adc.w	r3, r1, r3
 801e624:	627b      	str	r3, [r7, #36]	; 0x24
 801e626:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801e62a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 801e62e:	e943 1202 	strd	r1, r2, [r3, #-8]
    result = (int32_t)(mult.long_long >> 31);
 801e632:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801e636:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801e63a:	f04f 0000 	mov.w	r0, #0
 801e63e:	f04f 0100 	mov.w	r1, #0
 801e642:	0fd0      	lsrs	r0, r2, #31
 801e644:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801e648:	17d9      	asrs	r1, r3, #31
 801e64a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e64e:	f6a3 02cc 	subw	r2, r3, #2252	; 0x8cc
 801e652:	4603      	mov	r3, r0
 801e654:	6013      	str	r3, [r2, #0]
    return result;
 801e656:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e65a:	f6a3 03cc 	subw	r3, r3, #2252	; 0x8cc
 801e65e:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801e660:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e664:	f5a3 630c 	sub.w	r3, r3, #2240	; 0x8c0
 801e668:	681b      	ldr	r3, [r3, #0]
 801e66a:	2b00      	cmp	r3, #0
 801e66c:	dc06      	bgt.n	801e67c <arm_nn_mat_mult_nt_t_s8+0x4788>
 801e66e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e672:	f5a3 630c 	sub.w	r3, r3, #2240	; 0x8c0
 801e676:	681b      	ldr	r3, [r3, #0]
 801e678:	425a      	negs	r2, r3
 801e67a:	e000      	b.n	801e67e <arm_nn_mat_mult_nt_t_s8+0x478a>
 801e67c:	2200      	movs	r2, #0
 801e67e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e682:	f5a3 630d 	sub.w	r3, r3, #2256	; 0x8d0
 801e686:	6019      	str	r1, [r3, #0]
 801e688:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e68c:	f6a3 03d4 	subw	r3, r3, #2260	; 0x8d4
 801e690:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801e692:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e696:	f6a3 02d8 	subw	r2, r3, #2264	; 0x8d8
 801e69a:	2300      	movs	r3, #0
 801e69c:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801e69e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e6a2:	f6a3 03d4 	subw	r3, r3, #2260	; 0x8d4
 801e6a6:	2201      	movs	r2, #1
 801e6a8:	681b      	ldr	r3, [r3, #0]
 801e6aa:	fa02 f103 	lsl.w	r1, r2, r3
 801e6ae:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e6b2:	f6a3 02dc 	subw	r2, r3, #2268	; 0x8dc
 801e6b6:	1e4b      	subs	r3, r1, #1
 801e6b8:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 801e6ba:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e6be:	f5a3 610e 	sub.w	r1, r3, #2272	; 0x8e0
 801e6c2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e6c6:	f5a3 620d 	sub.w	r2, r3, #2256	; 0x8d0
 801e6ca:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e6ce:	f6a3 03dc 	subw	r3, r3, #2268	; 0x8dc
 801e6d2:	6812      	ldr	r2, [r2, #0]
 801e6d4:	681b      	ldr	r3, [r3, #0]
 801e6d6:	4013      	ands	r3, r2
 801e6d8:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 801e6da:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e6de:	f6a3 01d8 	subw	r1, r3, #2264	; 0x8d8
 801e6e2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e6e6:	f5a3 620d 	sub.w	r2, r3, #2256	; 0x8d0
 801e6ea:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e6ee:	f6a3 03d4 	subw	r3, r3, #2260	; 0x8d4
 801e6f2:	6812      	ldr	r2, [r2, #0]
 801e6f4:	681b      	ldr	r3, [r3, #0]
 801e6f6:	fa42 f303 	asr.w	r3, r2, r3
 801e6fa:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 801e6fc:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e700:	f6a3 02e4 	subw	r2, r3, #2276	; 0x8e4
 801e704:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e708:	f6a3 03dc 	subw	r3, r3, #2268	; 0x8dc
 801e70c:	681b      	ldr	r3, [r3, #0]
 801e70e:	105b      	asrs	r3, r3, #1
 801e710:	6013      	str	r3, [r2, #0]
    if (result < 0)
 801e712:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e716:	f6a3 03d8 	subw	r3, r3, #2264	; 0x8d8
 801e71a:	681b      	ldr	r3, [r3, #0]
 801e71c:	2b00      	cmp	r3, #0
 801e71e:	da0a      	bge.n	801e736 <arm_nn_mat_mult_nt_t_s8+0x4842>
        threshold++;
 801e720:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e724:	f6a3 02e4 	subw	r2, r3, #2276	; 0x8e4
 801e728:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e72c:	f6a3 03e4 	subw	r3, r3, #2276	; 0x8e4
 801e730:	681b      	ldr	r3, [r3, #0]
 801e732:	3301      	adds	r3, #1
 801e734:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 801e736:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e73a:	f5a3 620e 	sub.w	r2, r3, #2272	; 0x8e0
 801e73e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e742:	f6a3 03e4 	subw	r3, r3, #2276	; 0x8e4
 801e746:	6812      	ldr	r2, [r2, #0]
 801e748:	681b      	ldr	r3, [r3, #0]
 801e74a:	429a      	cmp	r2, r3
 801e74c:	dd0a      	ble.n	801e764 <arm_nn_mat_mult_nt_t_s8+0x4870>
        result++;
 801e74e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e752:	f6a3 02d8 	subw	r2, r3, #2264	; 0x8d8
 801e756:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e75a:	f6a3 03d8 	subw	r3, r3, #2264	; 0x8d8
 801e75e:	681b      	ldr	r3, [r3, #0]
 801e760:	3301      	adds	r3, #1
 801e762:	6013      	str	r3, [r2, #0]
    return result;
 801e764:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e768:	f6a3 03d8 	subw	r3, r3, #2264	; 0x8d8
 801e76c:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801e76e:	bf00      	nop
 801e770:	f8c7 3aa4 	str.w	r3, [r7, #2724]	; 0xaa4

            // Add offset
            res00 += dst_offset;
 801e774:	f8d7 2aa8 	ldr.w	r2, [r7, #2728]	; 0xaa8
 801e778:	f8d7 3b10 	ldr.w	r3, [r7, #2832]	; 0xb10
 801e77c:	4413      	add	r3, r2
 801e77e:	f8c7 3aa8 	str.w	r3, [r7, #2728]	; 0xaa8
            res01 += dst_offset;
 801e782:	f8d7 2aa4 	ldr.w	r2, [r7, #2724]	; 0xaa4
 801e786:	f8d7 3b10 	ldr.w	r3, [r7, #2832]	; 0xb10
 801e78a:	4413      	add	r3, r2
 801e78c:	f8c7 3aa4 	str.w	r3, [r7, #2724]	; 0xaa4

            // Clamp the result
            res00 = MAX(res00, activation_min);
 801e790:	f8d7 2aa8 	ldr.w	r2, [r7, #2728]	; 0xaa8
 801e794:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	; 0xb14
 801e798:	4293      	cmp	r3, r2
 801e79a:	bfb8      	it	lt
 801e79c:	4613      	movlt	r3, r2
 801e79e:	f8c7 3aa8 	str.w	r3, [r7, #2728]	; 0xaa8
            res00 = MIN(res00, activation_max);
 801e7a2:	f8d7 2aa8 	ldr.w	r2, [r7, #2728]	; 0xaa8
 801e7a6:	f8d7 3b18 	ldr.w	r3, [r7, #2840]	; 0xb18
 801e7aa:	4293      	cmp	r3, r2
 801e7ac:	bfa8      	it	ge
 801e7ae:	4613      	movge	r3, r2
 801e7b0:	f8c7 3aa8 	str.w	r3, [r7, #2728]	; 0xaa8
            res01 = MAX(res01, activation_min);
 801e7b4:	f8d7 2aa4 	ldr.w	r2, [r7, #2724]	; 0xaa4
 801e7b8:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	; 0xb14
 801e7bc:	4293      	cmp	r3, r2
 801e7be:	bfb8      	it	lt
 801e7c0:	4613      	movlt	r3, r2
 801e7c2:	f8c7 3aa4 	str.w	r3, [r7, #2724]	; 0xaa4
            res01 = MIN(res01, activation_max);
 801e7c6:	f8d7 2aa4 	ldr.w	r2, [r7, #2724]	; 0xaa4
 801e7ca:	f8d7 3b18 	ldr.w	r3, [r7, #2840]	; 0xb18
 801e7ce:	4293      	cmp	r3, r2
 801e7d0:	bfa8      	it	ge
 801e7d2:	4613      	movge	r3, r2
 801e7d4:	f8c7 3aa4 	str.w	r3, [r7, #2724]	; 0xaa4

            dst_ptr[0] = (q7_t)res00;
 801e7d8:	f8d7 3aa8 	ldr.w	r3, [r7, #2728]	; 0xaa8
 801e7dc:	b25b      	sxtb	r3, r3
 801e7de:	f8d7 2ad0 	ldr.w	r2, [r7, #2768]	; 0xad0
 801e7e2:	7013      	strb	r3, [r2, #0]
            dst_ptr[1] = (q7_t)res01;
 801e7e4:	f8d7 3ad0 	ldr.w	r3, [r7, #2768]	; 0xad0
 801e7e8:	1c5a      	adds	r2, r3, #1
 801e7ea:	f8d7 3aa4 	ldr.w	r3, [r7, #2724]	; 0xaa4
 801e7ee:	b25b      	sxtb	r3, r3
 801e7f0:	7013      	strb	r3, [r2, #0]
        }

        rhs += 2 * rhs_cols;
 801e7f2:	f8d7 3b08 	ldr.w	r3, [r7, #2824]	; 0xb08
 801e7f6:	005b      	lsls	r3, r3, #1
 801e7f8:	4619      	mov	r1, r3
 801e7fa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e7fe:	f6a3 2208 	subw	r2, r3, #2568	; 0xa08
 801e802:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e806:	f6a3 2308 	subw	r3, r3, #2568	; 0xa08
 801e80a:	681b      	ldr	r3, [r3, #0]
 801e80c:	440b      	add	r3, r1
 801e80e:	6013      	str	r3, [r2, #0]
        dst += 2;
 801e810:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e814:	f5a3 6221 	sub.w	r2, r3, #2576	; 0xa10
 801e818:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e81c:	f5a3 6321 	sub.w	r3, r3, #2576	; 0xa10
 801e820:	681b      	ldr	r3, [r3, #0]
 801e822:	3302      	adds	r3, #2
 801e824:	6013      	str	r3, [r2, #0]
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 801e826:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	; 0xad4
 801e82a:	3302      	adds	r3, #2
 801e82c:	f8c7 3ad4 	str.w	r3, [r7, #2772]	; 0xad4
 801e830:	f8d7 3b04 	ldr.w	r3, [r7, #2820]	; 0xb04
 801e834:	1e5a      	subs	r2, r3, #1
 801e836:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	; 0xad4
 801e83a:	4293      	cmp	r3, r2
 801e83c:	f6fb ab7d 	blt.w	8019f3a <arm_nn_mat_mult_nt_t_s8+0x46>
    }

    if (rhs_rows % 2)
 801e840:	f8d7 3b04 	ldr.w	r3, [r7, #2820]	; 0xb04
 801e844:	f003 0301 	and.w	r3, r3, #1
 801e848:	2b00      	cmp	r3, #0
 801e84a:	f000 81bd 	beq.w	801ebc8 <arm_nn_mat_mult_nt_t_s8+0x4cd4>
    {
        const q7_t *lhs_ptr = &lhs[0];
 801e84e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e852:	f6a3 2304 	subw	r3, r3, #2564	; 0xa04
 801e856:	681b      	ldr	r3, [r3, #0]
 801e858:	f8c7 3a9c 	str.w	r3, [r7, #2716]	; 0xa9c
        q7_t *dst_ptr = &dst[0];
 801e85c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e860:	f5a3 6321 	sub.w	r3, r3, #2576	; 0xa10
 801e864:	681b      	ldr	r3, [r3, #0]
 801e866:	f8c7 3a98 	str.w	r3, [r7, #2712]	; 0xa98

        for (int32_t lhs_rows_idx = 0; lhs_rows_idx < lhs_rows; ++lhs_rows_idx)
 801e86a:	2300      	movs	r3, #0
 801e86c:	f8c7 3a94 	str.w	r3, [r7, #2708]	; 0xa94
 801e870:	e1a3      	b.n	801ebba <arm_nn_mat_mult_nt_t_s8+0x4cc6>
        {
            const q7_t *rhs_ptr = &rhs[0];
 801e872:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e876:	f6a3 2308 	subw	r3, r3, #2568	; 0xa08
 801e87a:	681b      	ldr	r3, [r3, #0]
 801e87c:	f8c7 3a90 	str.w	r3, [r7, #2704]	; 0xa90
            q31_t res00 = 0;
 801e880:	2300      	movs	r3, #0
 801e882:	f8c7 3a8c 	str.w	r3, [r7, #2700]	; 0xa8c
            if (bias)
 801e886:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e88a:	f6a3 230c 	subw	r3, r3, #2572	; 0xa0c
 801e88e:	681b      	ldr	r3, [r3, #0]
 801e890:	2b00      	cmp	r3, #0
 801e892:	d00e      	beq.n	801e8b2 <arm_nn_mat_mult_nt_t_s8+0x49be>
            {
                res00 = bias[rhs_rows - 1];
 801e894:	f8d7 3b04 	ldr.w	r3, [r7, #2820]	; 0xb04
 801e898:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801e89c:	3b01      	subs	r3, #1
 801e89e:	009b      	lsls	r3, r3, #2
 801e8a0:	f607 22d8 	addw	r2, r7, #2776	; 0xad8
 801e8a4:	f6a2 220c 	subw	r2, r2, #2572	; 0xa0c
 801e8a8:	6812      	ldr	r2, [r2, #0]
 801e8aa:	4413      	add	r3, r2
 801e8ac:	681b      	ldr	r3, [r3, #0]
 801e8ae:	f8c7 3a8c 	str.w	r3, [r7, #2700]	; 0xa8c
            }

            for (int32_t rhs_cols_idx = 0; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 801e8b2:	2300      	movs	r3, #0
 801e8b4:	f8c7 3a88 	str.w	r3, [r7, #2696]	; 0xa88
 801e8b8:	e029      	b.n	801e90e <arm_nn_mat_mult_nt_t_s8+0x4a1a>
            {
                q31_t rhs_value = rhs_ptr[0];
 801e8ba:	f8d7 3a90 	ldr.w	r3, [r7, #2704]	; 0xa90
 801e8be:	f993 3000 	ldrsb.w	r3, [r3]
 801e8c2:	f8c7 3a80 	str.w	r3, [r7, #2688]	; 0xa80
                q31_t lhs_value = lhs_ptr[0] + lhs_offset;
 801e8c6:	f8d7 3a9c 	ldr.w	r3, [r7, #2716]	; 0xa9c
 801e8ca:	f993 3000 	ldrsb.w	r3, [r3]
 801e8ce:	461a      	mov	r2, r3
 801e8d0:	f8d7 3b0c 	ldr.w	r3, [r7, #2828]	; 0xb0c
 801e8d4:	4413      	add	r3, r2
 801e8d6:	f8c7 3a7c 	str.w	r3, [r7, #2684]	; 0xa7c

                res00 += lhs_value * rhs_value;
 801e8da:	f8d7 3a7c 	ldr.w	r3, [r7, #2684]	; 0xa7c
 801e8de:	f8d7 2a80 	ldr.w	r2, [r7, #2688]	; 0xa80
 801e8e2:	fb02 f303 	mul.w	r3, r2, r3
 801e8e6:	f8d7 2a8c 	ldr.w	r2, [r7, #2700]	; 0xa8c
 801e8ea:	4413      	add	r3, r2
 801e8ec:	f8c7 3a8c 	str.w	r3, [r7, #2700]	; 0xa8c

                ++rhs_ptr;
 801e8f0:	f8d7 3a90 	ldr.w	r3, [r7, #2704]	; 0xa90
 801e8f4:	3301      	adds	r3, #1
 801e8f6:	f8c7 3a90 	str.w	r3, [r7, #2704]	; 0xa90
                ++lhs_ptr;
 801e8fa:	f8d7 3a9c 	ldr.w	r3, [r7, #2716]	; 0xa9c
 801e8fe:	3301      	adds	r3, #1
 801e900:	f8c7 3a9c 	str.w	r3, [r7, #2716]	; 0xa9c
            for (int32_t rhs_cols_idx = 0; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 801e904:	f8d7 3a88 	ldr.w	r3, [r7, #2696]	; 0xa88
 801e908:	3301      	adds	r3, #1
 801e90a:	f8c7 3a88 	str.w	r3, [r7, #2696]	; 0xa88
 801e90e:	f8d7 2a88 	ldr.w	r2, [r7, #2696]	; 0xa88
 801e912:	f8d7 3b08 	ldr.w	r3, [r7, #2824]	; 0xb08
 801e916:	429a      	cmp	r2, r3
 801e918:	dbcf      	blt.n	801e8ba <arm_nn_mat_mult_nt_t_s8+0x49c6>
            }

            // Quantize down
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows - 1], dst_shifts[rhs_rows - 1]);
 801e91a:	f8d7 3b04 	ldr.w	r3, [r7, #2820]	; 0xb04
 801e91e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801e922:	3b01      	subs	r3, #1
 801e924:	009b      	lsls	r3, r3, #2
 801e926:	f8d7 2af8 	ldr.w	r2, [r7, #2808]	; 0xaf8
 801e92a:	4413      	add	r3, r2
 801e92c:	6819      	ldr	r1, [r3, #0]
 801e92e:	f8d7 3b04 	ldr.w	r3, [r7, #2820]	; 0xb04
 801e932:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801e936:	3b01      	subs	r3, #1
 801e938:	009b      	lsls	r3, r3, #2
 801e93a:	f8d7 2afc 	ldr.w	r2, [r7, #2812]	; 0xafc
 801e93e:	4413      	add	r3, r2
 801e940:	681a      	ldr	r2, [r3, #0]
 801e942:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e946:	f6a3 1318 	subw	r3, r3, #2328	; 0x918
 801e94a:	f8d7 0a8c 	ldr.w	r0, [r7, #2700]	; 0xa8c
 801e94e:	6018      	str	r0, [r3, #0]
 801e950:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e954:	f6a3 131c 	subw	r3, r3, #2332	; 0x91c
 801e958:	6019      	str	r1, [r3, #0]
 801e95a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e95e:	f5a3 6312 	sub.w	r3, r3, #2336	; 0x920
 801e962:	601a      	str	r2, [r3, #0]
 801e964:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e968:	f5a3 6312 	sub.w	r3, r3, #2336	; 0x920
 801e96c:	681b      	ldr	r3, [r3, #0]
 801e96e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e972:	f607 22d8 	addw	r2, r7, #2776	; 0xad8
 801e976:	f6a2 1218 	subw	r2, r2, #2328	; 0x918
 801e97a:	6812      	ldr	r2, [r2, #0]
 801e97c:	409a      	lsls	r2, r3
 801e97e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e982:	f6a3 1324 	subw	r3, r3, #2340	; 0x924
 801e986:	601a      	str	r2, [r3, #0]
 801e988:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e98c:	f6a3 1328 	subw	r3, r3, #2344	; 0x928
 801e990:	f607 22d8 	addw	r2, r7, #2776	; 0xad8
 801e994:	f6a2 121c 	subw	r2, r2, #2332	; 0x91c
 801e998:	6812      	ldr	r2, [r2, #0]
 801e99a:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801e99c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801e9a0:	f6a3 132c 	subw	r3, r3, #2348	; 0x92c
 801e9a4:	2200      	movs	r2, #0
 801e9a6:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 801e9a8:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801e9ac:	461a      	mov	r2, r3
 801e9ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801e9b2:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 801e9b4:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801e9b8:	461a      	mov	r2, r3
 801e9ba:	2300      	movs	r3, #0
 801e9bc:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801e9be:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801e9c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e9c6:	f607 21d8 	addw	r1, r7, #2776	; 0xad8
 801e9ca:	f6a1 1124 	subw	r1, r1, #2340	; 0x924
 801e9ce:	6809      	ldr	r1, [r1, #0]
 801e9d0:	17c8      	asrs	r0, r1, #31
 801e9d2:	6139      	str	r1, [r7, #16]
 801e9d4:	6178      	str	r0, [r7, #20]
 801e9d6:	f607 21d8 	addw	r1, r7, #2776	; 0xad8
 801e9da:	f6a1 1128 	subw	r1, r1, #2344	; 0x928
 801e9de:	6809      	ldr	r1, [r1, #0]
 801e9e0:	17c8      	asrs	r0, r1, #31
 801e9e2:	60b9      	str	r1, [r7, #8]
 801e9e4:	60f8      	str	r0, [r7, #12]
 801e9e6:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 801e9ea:	4631      	mov	r1, r6
 801e9ec:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 801e9f0:	4650      	mov	r0, sl
 801e9f2:	fb00 f001 	mul.w	r0, r0, r1
 801e9f6:	4659      	mov	r1, fp
 801e9f8:	462c      	mov	r4, r5
 801e9fa:	fb04 f101 	mul.w	r1, r4, r1
 801e9fe:	4401      	add	r1, r0
 801ea00:	4628      	mov	r0, r5
 801ea02:	4654      	mov	r4, sl
 801ea04:	fba0 8904 	umull	r8, r9, r0, r4
 801ea08:	4449      	add	r1, r9
 801ea0a:	4689      	mov	r9, r1
 801ea0c:	eb12 0108 	adds.w	r1, r2, r8
 801ea10:	6039      	str	r1, [r7, #0]
 801ea12:	eb43 0309 	adc.w	r3, r3, r9
 801ea16:	607b      	str	r3, [r7, #4]
 801ea18:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801ea1c:	e9d7 1200 	ldrd	r1, r2, [r7]
 801ea20:	e9c3 1200 	strd	r1, r2, [r3]
    result = (int32_t)(mult.long_long >> 31);
 801ea24:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801ea28:	e9d3 0100 	ldrd	r0, r1, [r3]
 801ea2c:	f04f 0200 	mov.w	r2, #0
 801ea30:	f04f 0300 	mov.w	r3, #0
 801ea34:	0fc2      	lsrs	r2, r0, #31
 801ea36:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 801ea3a:	17cb      	asrs	r3, r1, #31
 801ea3c:	f607 21d8 	addw	r1, r7, #2776	; 0xad8
 801ea40:	f6a1 112c 	subw	r1, r1, #2348	; 0x92c
 801ea44:	4613      	mov	r3, r2
 801ea46:	600b      	str	r3, [r1, #0]
    return result;
 801ea48:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ea4c:	f6a3 132c 	subw	r3, r3, #2348	; 0x92c
 801ea50:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801ea52:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ea56:	f5a3 6312 	sub.w	r3, r3, #2336	; 0x920
 801ea5a:	681b      	ldr	r3, [r3, #0]
 801ea5c:	2b00      	cmp	r3, #0
 801ea5e:	dc06      	bgt.n	801ea6e <arm_nn_mat_mult_nt_t_s8+0x4b7a>
 801ea60:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ea64:	f5a3 6312 	sub.w	r3, r3, #2336	; 0x920
 801ea68:	681b      	ldr	r3, [r3, #0]
 801ea6a:	425b      	negs	r3, r3
 801ea6c:	e000      	b.n	801ea70 <arm_nn_mat_mult_nt_t_s8+0x4b7c>
 801ea6e:	2300      	movs	r3, #0
 801ea70:	f607 22d8 	addw	r2, r7, #2776	; 0xad8
 801ea74:	f5a2 6213 	sub.w	r2, r2, #2352	; 0x930
 801ea78:	6011      	str	r1, [r2, #0]
 801ea7a:	f607 22d8 	addw	r2, r7, #2776	; 0xad8
 801ea7e:	f6a2 1234 	subw	r2, r2, #2356	; 0x934
 801ea82:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801ea84:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ea88:	f6a3 1338 	subw	r3, r3, #2360	; 0x938
 801ea8c:	2200      	movs	r2, #0
 801ea8e:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801ea90:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801ea94:	f6a3 1334 	subw	r3, r3, #2356	; 0x934
 801ea98:	2201      	movs	r2, #1
 801ea9a:	681b      	ldr	r3, [r3, #0]
 801ea9c:	409a      	lsls	r2, r3
 801ea9e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801eaa2:	f6a3 133c 	subw	r3, r3, #2364	; 0x93c
 801eaa6:	3a01      	subs	r2, #1
 801eaa8:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 801eaaa:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801eaae:	f5a3 6314 	sub.w	r3, r3, #2368	; 0x940
 801eab2:	f607 22d8 	addw	r2, r7, #2776	; 0xad8
 801eab6:	f5a2 6113 	sub.w	r1, r2, #2352	; 0x930
 801eaba:	f607 22d8 	addw	r2, r7, #2776	; 0xad8
 801eabe:	f6a2 123c 	subw	r2, r2, #2364	; 0x93c
 801eac2:	6809      	ldr	r1, [r1, #0]
 801eac4:	6812      	ldr	r2, [r2, #0]
 801eac6:	400a      	ands	r2, r1
 801eac8:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 801eaca:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801eace:	f6a3 1338 	subw	r3, r3, #2360	; 0x938
 801ead2:	f607 22d8 	addw	r2, r7, #2776	; 0xad8
 801ead6:	f5a2 6113 	sub.w	r1, r2, #2352	; 0x930
 801eada:	f607 22d8 	addw	r2, r7, #2776	; 0xad8
 801eade:	f6a2 1234 	subw	r2, r2, #2356	; 0x934
 801eae2:	6809      	ldr	r1, [r1, #0]
 801eae4:	6812      	ldr	r2, [r2, #0]
 801eae6:	fa41 f202 	asr.w	r2, r1, r2
 801eaea:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 801eaec:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801eaf0:	f6a3 1344 	subw	r3, r3, #2372	; 0x944
 801eaf4:	f607 22d8 	addw	r2, r7, #2776	; 0xad8
 801eaf8:	f6a2 123c 	subw	r2, r2, #2364	; 0x93c
 801eafc:	6812      	ldr	r2, [r2, #0]
 801eafe:	1052      	asrs	r2, r2, #1
 801eb00:	601a      	str	r2, [r3, #0]
    if (result < 0)
 801eb02:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801eb06:	f6a3 1338 	subw	r3, r3, #2360	; 0x938
 801eb0a:	681b      	ldr	r3, [r3, #0]
 801eb0c:	2b00      	cmp	r3, #0
 801eb0e:	da0a      	bge.n	801eb26 <arm_nn_mat_mult_nt_t_s8+0x4c32>
        threshold++;
 801eb10:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801eb14:	f6a3 1344 	subw	r3, r3, #2372	; 0x944
 801eb18:	f607 22d8 	addw	r2, r7, #2776	; 0xad8
 801eb1c:	f6a2 1244 	subw	r2, r2, #2372	; 0x944
 801eb20:	6812      	ldr	r2, [r2, #0]
 801eb22:	3201      	adds	r2, #1
 801eb24:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 801eb26:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801eb2a:	f5a3 6214 	sub.w	r2, r3, #2368	; 0x940
 801eb2e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801eb32:	f6a3 1344 	subw	r3, r3, #2372	; 0x944
 801eb36:	6812      	ldr	r2, [r2, #0]
 801eb38:	681b      	ldr	r3, [r3, #0]
 801eb3a:	429a      	cmp	r2, r3
 801eb3c:	dd0a      	ble.n	801eb54 <arm_nn_mat_mult_nt_t_s8+0x4c60>
        result++;
 801eb3e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801eb42:	f6a3 1338 	subw	r3, r3, #2360	; 0x938
 801eb46:	f607 22d8 	addw	r2, r7, #2776	; 0xad8
 801eb4a:	f6a2 1238 	subw	r2, r2, #2360	; 0x938
 801eb4e:	6812      	ldr	r2, [r2, #0]
 801eb50:	3201      	adds	r2, #1
 801eb52:	601a      	str	r2, [r3, #0]
    return result;
 801eb54:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 801eb58:	f6a3 1338 	subw	r3, r3, #2360	; 0x938
 801eb5c:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801eb5e:	bf00      	nop
 801eb60:	f8c7 3a8c 	str.w	r3, [r7, #2700]	; 0xa8c

            // Add offset
            res00 += dst_offset;
 801eb64:	f8d7 2a8c 	ldr.w	r2, [r7, #2700]	; 0xa8c
 801eb68:	f8d7 3b10 	ldr.w	r3, [r7, #2832]	; 0xb10
 801eb6c:	4413      	add	r3, r2
 801eb6e:	f8c7 3a8c 	str.w	r3, [r7, #2700]	; 0xa8c

            // Clamp the result
            res00 = MAX(res00, activation_min);
 801eb72:	f8d7 2a8c 	ldr.w	r2, [r7, #2700]	; 0xa8c
 801eb76:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	; 0xb14
 801eb7a:	4293      	cmp	r3, r2
 801eb7c:	bfb8      	it	lt
 801eb7e:	4613      	movlt	r3, r2
 801eb80:	f8c7 3a8c 	str.w	r3, [r7, #2700]	; 0xa8c
            res00 = MIN(res00, activation_max);
 801eb84:	f8d7 2a8c 	ldr.w	r2, [r7, #2700]	; 0xa8c
 801eb88:	f8d7 3b18 	ldr.w	r3, [r7, #2840]	; 0xb18
 801eb8c:	4293      	cmp	r3, r2
 801eb8e:	bfa8      	it	ge
 801eb90:	4613      	movge	r3, r2
 801eb92:	f8c7 3a8c 	str.w	r3, [r7, #2700]	; 0xa8c

            dst_ptr[0] = (q7_t)res00;
 801eb96:	f8d7 3a8c 	ldr.w	r3, [r7, #2700]	; 0xa8c
 801eb9a:	b25a      	sxtb	r2, r3
 801eb9c:	f8d7 3a98 	ldr.w	r3, [r7, #2712]	; 0xa98
 801eba0:	701a      	strb	r2, [r3, #0]
            dst_ptr += rhs_rows;
 801eba2:	f8d7 3b04 	ldr.w	r3, [r7, #2820]	; 0xb04
 801eba6:	f8d7 2a98 	ldr.w	r2, [r7, #2712]	; 0xa98
 801ebaa:	4413      	add	r3, r2
 801ebac:	f8c7 3a98 	str.w	r3, [r7, #2712]	; 0xa98
        for (int32_t lhs_rows_idx = 0; lhs_rows_idx < lhs_rows; ++lhs_rows_idx)
 801ebb0:	f8d7 3a94 	ldr.w	r3, [r7, #2708]	; 0xa94
 801ebb4:	3301      	adds	r3, #1
 801ebb6:	f8c7 3a94 	str.w	r3, [r7, #2708]	; 0xa94
 801ebba:	f8d7 2a94 	ldr.w	r2, [r7, #2708]	; 0xa94
 801ebbe:	f8d7 3b00 	ldr.w	r3, [r7, #2816]	; 0xb00
 801ebc2:	429a      	cmp	r2, r3
 801ebc4:	f6ff ae55 	blt.w	801e872 <arm_nn_mat_mult_nt_t_s8+0x497e>
            dst_ptr[0] = (q7_t)res00;
            dst_ptr += rhs_rows;
        }
    }
#endif
    return ARM_MATH_SUCCESS;
 801ebc8:	2300      	movs	r3, #0
}
 801ebca:	4618      	mov	r0, r3
 801ebcc:	f607 27d8 	addw	r7, r7, #2776	; 0xad8
 801ebd0:	46bd      	mov	sp, r7
 801ebd2:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 801ebd6:	4770      	bx	lr

0801ebd8 <arm_nn_vec_mat_mult_t_s8>:
                                    const int32_t dst_shift,
                                    const int32_t rhs_cols,
                                    const int32_t rhs_rows,
                                    const int32_t activation_min,
                                    const int32_t activation_max)
{
 801ebd8:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 801ebdc:	f5ad 6dc6 	sub.w	sp, sp, #1584	; 0x630
 801ebe0:	af00      	add	r7, sp, #0
 801ebe2:	f507 64c6 	add.w	r4, r7, #1584	; 0x630
 801ebe6:	f2a4 54dc 	subw	r4, r4, #1500	; 0x5dc
 801ebea:	6020      	str	r0, [r4, #0]
 801ebec:	f507 60c6 	add.w	r0, r7, #1584	; 0x630
 801ebf0:	f5a0 60bc 	sub.w	r0, r0, #1504	; 0x5e0
 801ebf4:	6001      	str	r1, [r0, #0]
 801ebf6:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 801ebfa:	f2a1 51e4 	subw	r1, r1, #1508	; 0x5e4
 801ebfe:	600a      	str	r2, [r1, #0]
 801ec00:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 801ec04:	f5a2 62bd 	sub.w	r2, r2, #1512	; 0x5e8
 801ec08:	6013      	str	r3, [r2, #0]
        *dst = MIN(acc_0, activation_max);
        dst++;
    }

#elif defined(ARM_MATH_DSP)
    const int32_t off0 = rhs_cols - 4;
 801ec0a:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 801ec0e:	3b04      	subs	r3, #4
 801ec10:	f8c7 3614 	str.w	r3, [r7, #1556]	; 0x614
    const int16_t lhs_offset_s16 = lhs_offset;
 801ec14:	f8d7 3650 	ldr.w	r3, [r7, #1616]	; 0x650
 801ec18:	f8a7 3612 	strh.w	r3, [r7, #1554]	; 0x612
    const int16_t rhs_offset_s16 = rhs_offset;
 801ec1c:	f8d7 3654 	ldr.w	r3, [r7, #1620]	; 0x654
 801ec20:	f8a7 3610 	strh.w	r3, [r7, #1552]	; 0x610

    const uint32_t lhs_offset_s16x2 = __PKHBT(lhs_offset_s16, lhs_offset_s16, 16);
 801ec24:	f9b7 3612 	ldrsh.w	r3, [r7, #1554]	; 0x612
 801ec28:	f8c7 360c 	str.w	r3, [r7, #1548]	; 0x60c
 801ec2c:	f9b7 3612 	ldrsh.w	r3, [r7, #1554]	; 0x612
 801ec30:	f8c7 3608 	str.w	r3, [r7, #1544]	; 0x608
 801ec34:	f8d7 260c 	ldr.w	r2, [r7, #1548]	; 0x60c
 801ec38:	f8d7 3608 	ldr.w	r3, [r7, #1544]	; 0x608
 801ec3c:	eac2 4303 	pkhbt	r3, r2, r3, lsl #16
 801ec40:	f8c7 3604 	str.w	r3, [r7, #1540]	; 0x604
 801ec44:	f8d7 3604 	ldr.w	r3, [r7, #1540]	; 0x604
 801ec48:	f8c7 3600 	str.w	r3, [r7, #1536]	; 0x600
    const uint32_t rhs_offset_s16x2 = __PKHBT(rhs_offset_s16, rhs_offset_s16, 16);
 801ec4c:	f9b7 3610 	ldrsh.w	r3, [r7, #1552]	; 0x610
 801ec50:	f8c7 35fc 	str.w	r3, [r7, #1532]	; 0x5fc
 801ec54:	f9b7 3610 	ldrsh.w	r3, [r7, #1552]	; 0x610
 801ec58:	f8c7 35f8 	str.w	r3, [r7, #1528]	; 0x5f8
 801ec5c:	f8d7 25fc 	ldr.w	r2, [r7, #1532]	; 0x5fc
 801ec60:	f8d7 35f8 	ldr.w	r3, [r7, #1528]	; 0x5f8
 801ec64:	eac2 4303 	pkhbt	r3, r2, r3, lsl #16
 801ec68:	f8c7 35f4 	str.w	r3, [r7, #1524]	; 0x5f4
 801ec6c:	f8d7 35f4 	ldr.w	r3, [r7, #1524]	; 0x5f4
 801ec70:	f8c7 35f0 	str.w	r3, [r7, #1520]	; 0x5f0

    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 801ec74:	2300      	movs	r3, #0
 801ec76:	f8c7 362c 	str.w	r3, [r7, #1580]	; 0x62c
 801ec7a:	f001 bd13 	b.w	80206a4 <arm_nn_vec_mat_mult_t_s8+0x1acc>
    {
        const q7_t *lhs_ptr = &lhs[0];
 801ec7e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ec82:	f5a3 62ac 	sub.w	r2, r3, #1376	; 0x560
 801ec86:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ec8a:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 801ec8e:	681b      	ldr	r3, [r3, #0]
 801ec90:	6013      	str	r3, [r2, #0]
        const q7_t *rhs_ptr = &rhs[0];
 801ec92:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ec96:	f2a3 5264 	subw	r2, r3, #1380	; 0x564
 801ec9a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ec9e:	f5a3 63bc 	sub.w	r3, r3, #1504	; 0x5e0
 801eca2:	681b      	ldr	r3, [r3, #0]
 801eca4:	6013      	str	r3, [r2, #0]

        q31_t res00 = 0;
 801eca6:	2300      	movs	r3, #0
 801eca8:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
        q31_t res01 = 0;
 801ecac:	2300      	movs	r3, #0
 801ecae:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
        if (bias)
 801ecb2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ecb6:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 801ecba:	681b      	ldr	r3, [r3, #0]
 801ecbc:	2b00      	cmp	r3, #0
 801ecbe:	d01b      	beq.n	801ecf8 <arm_nn_vec_mat_mult_t_s8+0x120>
        {
            res00 = *bias++;
 801ecc0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ecc4:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 801ecc8:	6819      	ldr	r1, [r3, #0]
 801ecca:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ecce:	f2a3 52e4 	subw	r2, r3, #1508	; 0x5e4
 801ecd2:	1d0b      	adds	r3, r1, #4
 801ecd4:	6013      	str	r3, [r2, #0]
 801ecd6:	680b      	ldr	r3, [r1, #0]
 801ecd8:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            res01 = *bias++;
 801ecdc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ece0:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 801ece4:	6819      	ldr	r1, [r3, #0]
 801ece6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ecea:	f2a3 52e4 	subw	r2, r3, #1508	; 0x5e4
 801ecee:	1d0b      	adds	r3, r1, #4
 801ecf0:	6013      	str	r3, [r2, #0]
 801ecf2:	680b      	ldr	r3, [r1, #0]
 801ecf4:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
        }

        int32_t rhs_cols_idx = 0;
 801ecf8:	2300      	movs	r3, #0
 801ecfa:	f8c7 3620 	str.w	r3, [r7, #1568]	; 0x620

        q31_t val0, val1, val2, val3, val4, val5;
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 801ecfe:	f001 b9db 	b.w	80200b8 <arm_nn_vec_mat_mult_t_s8+0x14e0>
 801ed02:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ed06:	f5a3 724b 	sub.w	r2, r3, #812	; 0x32c
 801ed0a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 801ed0e:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801ed10:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ed14:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 801ed18:	681b      	ldr	r3, [r3, #0]
 801ed1a:	681b      	ldr	r3, [r3, #0]
 801ed1c:	681b      	ldr	r3, [r3, #0]
 801ed1e:	461a      	mov	r2, r3
 801ed20:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ed24:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 801ed28:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801ed2a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ed2e:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 801ed32:	681b      	ldr	r3, [r3, #0]
 801ed34:	681b      	ldr	r3, [r3, #0]
 801ed36:	1d1a      	adds	r2, r3, #4
 801ed38:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ed3c:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 801ed40:	681b      	ldr	r3, [r3, #0]
 801ed42:	601a      	str	r2, [r3, #0]
    return (val);
 801ed44:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ed48:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 801ed4c:	681b      	ldr	r3, [r3, #0]
        {
            // Read 4 x int8 values from the RHS matrix
            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 801ed4e:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            val2 = __SXTAB16(rhs_offset_s16x2, val0);
 801ed52:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 801ed56:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ed5a:	f5a3 7248 	sub.w	r2, r3, #800	; 0x320
 801ed5e:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 801ed62:	6013      	str	r3, [r2, #0]
 801ed64:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ed68:	f5a3 7349 	sub.w	r3, r3, #804	; 0x324
 801ed6c:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801ed6e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ed72:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 801ed76:	681a      	ldr	r2, [r3, #0]
 801ed78:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ed7c:	f5a3 7349 	sub.w	r3, r3, #804	; 0x324
 801ed80:	681b      	ldr	r3, [r3, #0]
 801ed82:	fa22 f283 	sxtab16	r2, r2, r3
 801ed86:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ed8a:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 801ed8e:	601a      	str	r2, [r3, #0]
  return(result);
 801ed90:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ed94:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 801ed98:	681b      	ldr	r3, [r3, #0]
 801ed9a:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 801ed9e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801eda2:	f5a3 7247 	sub.w	r2, r3, #796	; 0x31c
 801eda6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801edaa:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801edac:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801edb0:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 801edb4:	681b      	ldr	r3, [r3, #0]
 801edb6:	681b      	ldr	r3, [r3, #0]
 801edb8:	681b      	ldr	r3, [r3, #0]
 801edba:	461a      	mov	r2, r3
 801edbc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801edc0:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 801edc4:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801edc6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801edca:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 801edce:	681b      	ldr	r3, [r3, #0]
 801edd0:	681b      	ldr	r3, [r3, #0]
 801edd2:	1d1a      	adds	r2, r3, #4
 801edd4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801edd8:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 801eddc:	681b      	ldr	r3, [r3, #0]
 801edde:	601a      	str	r2, [r3, #0]
    return (val);
 801ede0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ede4:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 801ede8:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the LHS vector
            val1 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 801edea:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 801edee:	f8d7 25c8 	ldr.w	r2, [r7, #1480]	; 0x5c8
 801edf2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801edf6:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 801edfa:	601a      	str	r2, [r3, #0]
 801edfc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ee00:	f5a3 7246 	sub.w	r2, r3, #792	; 0x318
 801ee04:	2308      	movs	r3, #8
 801ee06:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801ee08:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ee0c:	f5a3 7246 	sub.w	r2, r3, #792	; 0x318
 801ee10:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ee14:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 801ee18:	681b      	ldr	r3, [r3, #0]
 801ee1a:	f003 031f 	and.w	r3, r3, #31
 801ee1e:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801ee20:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ee24:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 801ee28:	681b      	ldr	r3, [r3, #0]
 801ee2a:	2b00      	cmp	r3, #0
 801ee2c:	d105      	bne.n	801ee3a <arm_nn_vec_mat_mult_t_s8+0x262>
    return op1;
 801ee2e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ee32:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 801ee36:	6819      	ldr	r1, [r3, #0]
 801ee38:	e00b      	b.n	801ee52 <arm_nn_vec_mat_mult_t_s8+0x27a>
  return (op1 >> op2) | (op1 << (32U - op2));
 801ee3a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ee3e:	f5a3 7245 	sub.w	r2, r3, #788	; 0x314
 801ee42:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ee46:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 801ee4a:	6812      	ldr	r2, [r2, #0]
 801ee4c:	681b      	ldr	r3, [r3, #0]
 801ee4e:	fa62 f103 	ror.w	r1, r2, r3
 801ee52:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ee56:	f5a3 7242 	sub.w	r2, r3, #776	; 0x308
 801ee5a:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 801ee5e:	6013      	str	r3, [r2, #0]
 801ee60:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ee64:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 801ee68:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801ee6a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ee6e:	f5a3 7342 	sub.w	r3, r3, #776	; 0x308
 801ee72:	681a      	ldr	r2, [r3, #0]
 801ee74:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ee78:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 801ee7c:	681b      	ldr	r3, [r3, #0]
 801ee7e:	fa22 f283 	sxtab16	r2, r2, r3
 801ee82:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ee86:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 801ee8a:	601a      	str	r2, [r3, #0]
  return(result);
 801ee8c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ee90:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 801ee94:	681b      	ldr	r3, [r3, #0]
 801ee96:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            val3 = __SXTAB16(lhs_offset_s16x2, val1);
 801ee9a:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 801ee9e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801eea2:	f5a3 723f 	sub.w	r2, r3, #764	; 0x2fc
 801eea6:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 801eeaa:	6013      	str	r3, [r2, #0]
 801eeac:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801eeb0:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 801eeb4:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801eeb6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801eeba:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 801eebe:	681a      	ldr	r2, [r3, #0]
 801eec0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801eec4:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 801eec8:	681b      	ldr	r3, [r3, #0]
 801eeca:	fa22 f283 	sxtab16	r2, r2, r3
 801eece:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801eed2:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 801eed6:	601a      	str	r2, [r3, #0]
  return(result);
 801eed8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801eedc:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 801eee0:	681b      	ldr	r3, [r3, #0]
 801eee2:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
            // Read 4 x int8 values from the RHS matrix
            val4 = arm_nn_read_q7x4((const q7_t *)rhs_ptr + off0);
 801eee6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801eeea:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 801eeee:	681a      	ldr	r2, [r3, #0]
 801eef0:	f8d7 3614 	ldr.w	r3, [r7, #1556]	; 0x614
 801eef4:	441a      	add	r2, r3
 801eef6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801eefa:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 801eefe:	601a      	str	r2, [r3, #0]
 801ef00:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ef04:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 801ef08:	681b      	ldr	r3, [r3, #0]
 801ef0a:	681b      	ldr	r3, [r3, #0]
 801ef0c:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801ef0e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ef12:	f2a3 5384 	subw	r3, r3, #1412	; 0x584
 801ef16:	601a      	str	r2, [r3, #0]
    return (val);
 801ef18:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ef1c:	f2a3 5384 	subw	r3, r3, #1412	; 0x584
 801ef20:	681b      	ldr	r3, [r3, #0]
 801ef22:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
            val1 = __SXTAB16(lhs_offset_s16x2, __ROR(val1, 8));
 801ef26:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 801ef2a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ef2e:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 801ef32:	601a      	str	r2, [r3, #0]
 801ef34:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ef38:	f5a3 723d 	sub.w	r2, r3, #756	; 0x2f4
 801ef3c:	2308      	movs	r3, #8
 801ef3e:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801ef40:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ef44:	f5a3 723d 	sub.w	r2, r3, #756	; 0x2f4
 801ef48:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ef4c:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 801ef50:	681b      	ldr	r3, [r3, #0]
 801ef52:	f003 031f 	and.w	r3, r3, #31
 801ef56:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801ef58:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ef5c:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 801ef60:	681b      	ldr	r3, [r3, #0]
 801ef62:	2b00      	cmp	r3, #0
 801ef64:	d105      	bne.n	801ef72 <arm_nn_vec_mat_mult_t_s8+0x39a>
    return op1;
 801ef66:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ef6a:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 801ef6e:	6819      	ldr	r1, [r3, #0]
 801ef70:	e00b      	b.n	801ef8a <arm_nn_vec_mat_mult_t_s8+0x3b2>
  return (op1 >> op2) | (op1 << (32U - op2));
 801ef72:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ef76:	f5a3 723c 	sub.w	r2, r3, #752	; 0x2f0
 801ef7a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ef7e:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 801ef82:	6812      	ldr	r2, [r2, #0]
 801ef84:	681b      	ldr	r3, [r3, #0]
 801ef86:	fa62 f103 	ror.w	r1, r2, r3
 801ef8a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ef8e:	f5a3 7239 	sub.w	r2, r3, #740	; 0x2e4
 801ef92:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 801ef96:	6013      	str	r3, [r2, #0]
 801ef98:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ef9c:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 801efa0:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801efa2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801efa6:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 801efaa:	681a      	ldr	r2, [r3, #0]
 801efac:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801efb0:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 801efb4:	681b      	ldr	r3, [r3, #0]
 801efb6:	fa22 f283 	sxtab16	r2, r2, r3
 801efba:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801efbe:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 801efc2:	601a      	str	r2, [r3, #0]
  return(result);
 801efc4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801efc8:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 801efcc:	681b      	ldr	r3, [r3, #0]
 801efce:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0

            // Perform the accumulations
            res00 = __SMLAD(val3, val2, res00);
 801efd2:	f8d7 25bc 	ldr.w	r2, [r7, #1468]	; 0x5bc
 801efd6:	f8d7 15c4 	ldr.w	r1, [r7, #1476]	; 0x5c4
 801efda:	f8d7 0628 	ldr.w	r0, [r7, #1576]	; 0x628
 801efde:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801efe2:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 801efe6:	601a      	str	r2, [r3, #0]
 801efe8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801efec:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 801eff0:	6019      	str	r1, [r3, #0]
 801eff2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801eff6:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 801effa:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801effc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f000:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 801f004:	6819      	ldr	r1, [r3, #0]
 801f006:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f00a:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 801f00e:	681a      	ldr	r2, [r3, #0]
 801f010:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f014:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 801f018:	681b      	ldr	r3, [r3, #0]
 801f01a:	fb21 3202 	smlad	r2, r1, r2, r3
 801f01e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f022:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 801f026:	601a      	str	r2, [r3, #0]
  return(result);
 801f028:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f02c:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 801f030:	681b      	ldr	r3, [r3, #0]
 801f032:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val5 = __SXTAB16(rhs_offset_s16x2, val4);
 801f036:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 801f03a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f03e:	f5a3 7232 	sub.w	r2, r3, #712	; 0x2c8
 801f042:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 801f046:	6013      	str	r3, [r2, #0]
 801f048:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f04c:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 801f050:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801f052:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f056:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 801f05a:	681a      	ldr	r2, [r3, #0]
 801f05c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f060:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 801f064:	681b      	ldr	r3, [r3, #0]
 801f066:	fa22 f283 	sxtab16	r2, r2, r3
 801f06a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f06e:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 801f072:	601a      	str	r2, [r3, #0]
  return(result);
 801f074:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f078:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 801f07c:	681b      	ldr	r3, [r3, #0]
 801f07e:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
            res00 = __SMLAD(val1, val0, res00);
 801f082:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 801f086:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 801f08a:	f8d7 0628 	ldr.w	r0, [r7, #1576]	; 0x628
 801f08e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f092:	f5a3 732e 	sub.w	r3, r3, #696	; 0x2b8
 801f096:	601a      	str	r2, [r3, #0]
 801f098:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f09c:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 801f0a0:	6019      	str	r1, [r3, #0]
 801f0a2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f0a6:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 801f0aa:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801f0ac:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f0b0:	f5a3 732e 	sub.w	r3, r3, #696	; 0x2b8
 801f0b4:	6819      	ldr	r1, [r3, #0]
 801f0b6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f0ba:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 801f0be:	681a      	ldr	r2, [r3, #0]
 801f0c0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f0c4:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 801f0c8:	681b      	ldr	r3, [r3, #0]
 801f0ca:	fb21 3202 	smlad	r2, r1, r2, r3
 801f0ce:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f0d2:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 801f0d6:	601a      	str	r2, [r3, #0]
  return(result);
 801f0d8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f0dc:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 801f0e0:	681b      	ldr	r3, [r3, #0]
 801f0e2:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val4 = __SXTAB16(rhs_offset_s16x2, __ROR(val4, 8));
 801f0e6:	f8d7 25b8 	ldr.w	r2, [r7, #1464]	; 0x5b8
 801f0ea:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f0ee:	f5a3 732c 	sub.w	r3, r3, #688	; 0x2b0
 801f0f2:	601a      	str	r2, [r3, #0]
 801f0f4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f0f8:	f5a3 722d 	sub.w	r2, r3, #692	; 0x2b4
 801f0fc:	2308      	movs	r3, #8
 801f0fe:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801f100:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f104:	f5a3 722d 	sub.w	r2, r3, #692	; 0x2b4
 801f108:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f10c:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 801f110:	681b      	ldr	r3, [r3, #0]
 801f112:	f003 031f 	and.w	r3, r3, #31
 801f116:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801f118:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f11c:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 801f120:	681b      	ldr	r3, [r3, #0]
 801f122:	2b00      	cmp	r3, #0
 801f124:	d105      	bne.n	801f132 <arm_nn_vec_mat_mult_t_s8+0x55a>
    return op1;
 801f126:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f12a:	f5a3 732c 	sub.w	r3, r3, #688	; 0x2b0
 801f12e:	6819      	ldr	r1, [r3, #0]
 801f130:	e00b      	b.n	801f14a <arm_nn_vec_mat_mult_t_s8+0x572>
  return (op1 >> op2) | (op1 << (32U - op2));
 801f132:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f136:	f5a3 722c 	sub.w	r2, r3, #688	; 0x2b0
 801f13a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f13e:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 801f142:	6812      	ldr	r2, [r2, #0]
 801f144:	681b      	ldr	r3, [r3, #0]
 801f146:	fa62 f103 	ror.w	r1, r2, r3
 801f14a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f14e:	f5a3 7229 	sub.w	r2, r3, #676	; 0x2a4
 801f152:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 801f156:	6013      	str	r3, [r2, #0]
 801f158:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f15c:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 801f160:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801f162:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f166:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 801f16a:	681a      	ldr	r2, [r3, #0]
 801f16c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f170:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 801f174:	681b      	ldr	r3, [r3, #0]
 801f176:	fa22 f283 	sxtab16	r2, r2, r3
 801f17a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f17e:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 801f182:	601a      	str	r2, [r3, #0]
  return(result);
 801f184:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f188:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 801f18c:	681b      	ldr	r3, [r3, #0]
 801f18e:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
 801f192:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f196:	f5a3 7228 	sub.w	r2, r3, #672	; 0x2a0
 801f19a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 801f19e:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801f1a0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f1a4:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 801f1a8:	681b      	ldr	r3, [r3, #0]
 801f1aa:	681b      	ldr	r3, [r3, #0]
 801f1ac:	681b      	ldr	r3, [r3, #0]
 801f1ae:	461a      	mov	r2, r3
 801f1b0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f1b4:	f5a3 63b1 	sub.w	r3, r3, #1416	; 0x588
 801f1b8:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801f1ba:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f1be:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 801f1c2:	681b      	ldr	r3, [r3, #0]
 801f1c4:	681b      	ldr	r3, [r3, #0]
 801f1c6:	1d1a      	adds	r2, r3, #4
 801f1c8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f1cc:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 801f1d0:	681b      	ldr	r3, [r3, #0]
 801f1d2:	601a      	str	r2, [r3, #0]
    return (val);
 801f1d4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f1d8:	f5a3 63b1 	sub.w	r3, r3, #1416	; 0x588
 801f1dc:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the RHS matrix
            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 801f1de:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            res01 = __SMLAD(val3, val5, res01);
 801f1e2:	f8d7 25bc 	ldr.w	r2, [r7, #1468]	; 0x5bc
 801f1e6:	f8d7 15b4 	ldr.w	r1, [r7, #1460]	; 0x5b4
 801f1ea:	f8d7 0624 	ldr.w	r0, [r7, #1572]	; 0x624
 801f1ee:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f1f2:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 801f1f6:	601a      	str	r2, [r3, #0]
 801f1f8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f1fc:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 801f200:	6019      	str	r1, [r3, #0]
 801f202:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f206:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 801f20a:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801f20c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f210:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 801f214:	6819      	ldr	r1, [r3, #0]
 801f216:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f21a:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 801f21e:	681a      	ldr	r2, [r3, #0]
 801f220:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f224:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 801f228:	681b      	ldr	r3, [r3, #0]
 801f22a:	fb21 3202 	smlad	r2, r1, r2, r3
 801f22e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f232:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 801f236:	601a      	str	r2, [r3, #0]
  return(result);
 801f238:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f23c:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 801f240:	681b      	ldr	r3, [r3, #0]
 801f242:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
            res01 = __SMLAD(val1, val4, res01);
 801f246:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 801f24a:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 801f24e:	f8d7 0624 	ldr.w	r0, [r7, #1572]	; 0x624
 801f252:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f256:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 801f25a:	601a      	str	r2, [r3, #0]
 801f25c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f260:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 801f264:	6019      	str	r1, [r3, #0]
 801f266:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f26a:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 801f26e:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801f270:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f274:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 801f278:	6819      	ldr	r1, [r3, #0]
 801f27a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f27e:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 801f282:	681a      	ldr	r2, [r3, #0]
 801f284:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f288:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 801f28c:	681b      	ldr	r3, [r3, #0]
 801f28e:	fb21 3202 	smlad	r2, r1, r2, r3
 801f292:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f296:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 801f29a:	601a      	str	r2, [r3, #0]
  return(result);
 801f29c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f2a0:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 801f2a4:	681b      	ldr	r3, [r3, #0]
 801f2a6:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

            val2 = __SXTAB16(rhs_offset_s16x2, val0);
 801f2aa:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 801f2ae:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f2b2:	f5a3 721d 	sub.w	r2, r3, #628	; 0x274
 801f2b6:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 801f2ba:	6013      	str	r3, [r2, #0]
 801f2bc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f2c0:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 801f2c4:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801f2c6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f2ca:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 801f2ce:	681a      	ldr	r2, [r3, #0]
 801f2d0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f2d4:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 801f2d8:	681b      	ldr	r3, [r3, #0]
 801f2da:	fa22 f283 	sxtab16	r2, r2, r3
 801f2de:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f2e2:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 801f2e6:	601a      	str	r2, [r3, #0]
  return(result);
 801f2e8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f2ec:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 801f2f0:	681b      	ldr	r3, [r3, #0]
 801f2f2:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 801f2f6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f2fa:	f5a3 721c 	sub.w	r2, r3, #624	; 0x270
 801f2fe:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801f302:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801f304:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f308:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 801f30c:	681b      	ldr	r3, [r3, #0]
 801f30e:	681b      	ldr	r3, [r3, #0]
 801f310:	681b      	ldr	r3, [r3, #0]
 801f312:	461a      	mov	r2, r3
 801f314:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f318:	f2a3 538c 	subw	r3, r3, #1420	; 0x58c
 801f31c:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801f31e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f322:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 801f326:	681b      	ldr	r3, [r3, #0]
 801f328:	681b      	ldr	r3, [r3, #0]
 801f32a:	1d1a      	adds	r2, r3, #4
 801f32c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f330:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 801f334:	681b      	ldr	r3, [r3, #0]
 801f336:	601a      	str	r2, [r3, #0]
    return (val);
 801f338:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f33c:	f2a3 538c 	subw	r3, r3, #1420	; 0x58c
 801f340:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the LHS vector
            val1 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 801f342:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 801f346:	f8d7 25c8 	ldr.w	r2, [r7, #1480]	; 0x5c8
 801f34a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f34e:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 801f352:	601a      	str	r2, [r3, #0]
 801f354:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f358:	f5a3 721b 	sub.w	r2, r3, #620	; 0x26c
 801f35c:	2308      	movs	r3, #8
 801f35e:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801f360:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f364:	f5a3 721b 	sub.w	r2, r3, #620	; 0x26c
 801f368:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f36c:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 801f370:	681b      	ldr	r3, [r3, #0]
 801f372:	f003 031f 	and.w	r3, r3, #31
 801f376:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801f378:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f37c:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 801f380:	681b      	ldr	r3, [r3, #0]
 801f382:	2b00      	cmp	r3, #0
 801f384:	d105      	bne.n	801f392 <arm_nn_vec_mat_mult_t_s8+0x7ba>
    return op1;
 801f386:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f38a:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 801f38e:	6819      	ldr	r1, [r3, #0]
 801f390:	e00b      	b.n	801f3aa <arm_nn_vec_mat_mult_t_s8+0x7d2>
  return (op1 >> op2) | (op1 << (32U - op2));
 801f392:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f396:	f5a3 721a 	sub.w	r2, r3, #616	; 0x268
 801f39a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f39e:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 801f3a2:	6812      	ldr	r2, [r2, #0]
 801f3a4:	681b      	ldr	r3, [r3, #0]
 801f3a6:	fa62 f103 	ror.w	r1, r2, r3
 801f3aa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f3ae:	f5a3 7217 	sub.w	r2, r3, #604	; 0x25c
 801f3b2:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 801f3b6:	6013      	str	r3, [r2, #0]
 801f3b8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f3bc:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 801f3c0:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801f3c2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f3c6:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 801f3ca:	681a      	ldr	r2, [r3, #0]
 801f3cc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f3d0:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 801f3d4:	681b      	ldr	r3, [r3, #0]
 801f3d6:	fa22 f283 	sxtab16	r2, r2, r3
 801f3da:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f3de:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 801f3e2:	601a      	str	r2, [r3, #0]
  return(result);
 801f3e4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f3e8:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 801f3ec:	681b      	ldr	r3, [r3, #0]
 801f3ee:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            val3 = __SXTAB16(lhs_offset_s16x2, val1);
 801f3f2:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 801f3f6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f3fa:	f5a3 7214 	sub.w	r2, r3, #592	; 0x250
 801f3fe:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 801f402:	6013      	str	r3, [r2, #0]
 801f404:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f408:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 801f40c:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801f40e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f412:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 801f416:	681a      	ldr	r2, [r3, #0]
 801f418:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f41c:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 801f420:	681b      	ldr	r3, [r3, #0]
 801f422:	fa22 f283 	sxtab16	r2, r2, r3
 801f426:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f42a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 801f42e:	601a      	str	r2, [r3, #0]
  return(result);
 801f430:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f434:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 801f438:	681b      	ldr	r3, [r3, #0]
 801f43a:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
            // Read 4 x int8 values from the RHS matrix
            val4 = arm_nn_read_q7x4((const q7_t *)rhs_ptr + off0);
 801f43e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f442:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 801f446:	681a      	ldr	r2, [r3, #0]
 801f448:	f8d7 3614 	ldr.w	r3, [r7, #1556]	; 0x614
 801f44c:	441a      	add	r2, r3
 801f44e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f452:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 801f456:	601a      	str	r2, [r3, #0]
 801f458:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f45c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 801f460:	681b      	ldr	r3, [r3, #0]
 801f462:	681b      	ldr	r3, [r3, #0]
 801f464:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801f466:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f46a:	f5a3 63b2 	sub.w	r3, r3, #1424	; 0x590
 801f46e:	601a      	str	r2, [r3, #0]
    return (val);
 801f470:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f474:	f5a3 63b2 	sub.w	r3, r3, #1424	; 0x590
 801f478:	681b      	ldr	r3, [r3, #0]
 801f47a:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
            val1 = __SXTAB16(lhs_offset_s16x2, __ROR(val1, 8));
 801f47e:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 801f482:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f486:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 801f48a:	601a      	str	r2, [r3, #0]
 801f48c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f490:	f5a3 7212 	sub.w	r2, r3, #584	; 0x248
 801f494:	2308      	movs	r3, #8
 801f496:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801f498:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f49c:	f5a3 7212 	sub.w	r2, r3, #584	; 0x248
 801f4a0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f4a4:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 801f4a8:	681b      	ldr	r3, [r3, #0]
 801f4aa:	f003 031f 	and.w	r3, r3, #31
 801f4ae:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801f4b0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f4b4:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 801f4b8:	681b      	ldr	r3, [r3, #0]
 801f4ba:	2b00      	cmp	r3, #0
 801f4bc:	d105      	bne.n	801f4ca <arm_nn_vec_mat_mult_t_s8+0x8f2>
    return op1;
 801f4be:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f4c2:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 801f4c6:	6819      	ldr	r1, [r3, #0]
 801f4c8:	e00b      	b.n	801f4e2 <arm_nn_vec_mat_mult_t_s8+0x90a>
  return (op1 >> op2) | (op1 << (32U - op2));
 801f4ca:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f4ce:	f5a3 7211 	sub.w	r2, r3, #580	; 0x244
 801f4d2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f4d6:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 801f4da:	6812      	ldr	r2, [r2, #0]
 801f4dc:	681b      	ldr	r3, [r3, #0]
 801f4de:	fa62 f103 	ror.w	r1, r2, r3
 801f4e2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f4e6:	f5a3 720e 	sub.w	r2, r3, #568	; 0x238
 801f4ea:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 801f4ee:	6013      	str	r3, [r2, #0]
 801f4f0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f4f4:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 801f4f8:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801f4fa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f4fe:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 801f502:	681a      	ldr	r2, [r3, #0]
 801f504:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f508:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 801f50c:	681b      	ldr	r3, [r3, #0]
 801f50e:	fa22 f283 	sxtab16	r2, r2, r3
 801f512:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f516:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 801f51a:	601a      	str	r2, [r3, #0]
  return(result);
 801f51c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f520:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 801f524:	681b      	ldr	r3, [r3, #0]
 801f526:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0

            // Perform the accumulations
            res00 = __SMLAD(val3, val2, res00);
 801f52a:	f8d7 25bc 	ldr.w	r2, [r7, #1468]	; 0x5bc
 801f52e:	f8d7 15c4 	ldr.w	r1, [r7, #1476]	; 0x5c4
 801f532:	f8d7 0628 	ldr.w	r0, [r7, #1576]	; 0x628
 801f536:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f53a:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 801f53e:	601a      	str	r2, [r3, #0]
 801f540:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f544:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 801f548:	6019      	str	r1, [r3, #0]
 801f54a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f54e:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 801f552:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801f554:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f558:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 801f55c:	6819      	ldr	r1, [r3, #0]
 801f55e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f562:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 801f566:	681a      	ldr	r2, [r3, #0]
 801f568:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f56c:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 801f570:	681b      	ldr	r3, [r3, #0]
 801f572:	fb21 3202 	smlad	r2, r1, r2, r3
 801f576:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f57a:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 801f57e:	601a      	str	r2, [r3, #0]
  return(result);
 801f580:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f584:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 801f588:	681b      	ldr	r3, [r3, #0]
 801f58a:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val5 = __SXTAB16(rhs_offset_s16x2, val4);
 801f58e:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 801f592:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f596:	f5a3 7207 	sub.w	r2, r3, #540	; 0x21c
 801f59a:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 801f59e:	6013      	str	r3, [r2, #0]
 801f5a0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f5a4:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 801f5a8:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801f5aa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f5ae:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 801f5b2:	681a      	ldr	r2, [r3, #0]
 801f5b4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f5b8:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 801f5bc:	681b      	ldr	r3, [r3, #0]
 801f5be:	fa22 f283 	sxtab16	r2, r2, r3
 801f5c2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f5c6:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 801f5ca:	601a      	str	r2, [r3, #0]
  return(result);
 801f5cc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f5d0:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 801f5d4:	681b      	ldr	r3, [r3, #0]
 801f5d6:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
            res00 = __SMLAD(val1, val0, res00);
 801f5da:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 801f5de:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 801f5e2:	f8d7 0628 	ldr.w	r0, [r7, #1576]	; 0x628
 801f5e6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f5ea:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 801f5ee:	601a      	str	r2, [r3, #0]
 801f5f0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f5f4:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 801f5f8:	6019      	str	r1, [r3, #0]
 801f5fa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f5fe:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 801f602:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801f604:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f608:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 801f60c:	6819      	ldr	r1, [r3, #0]
 801f60e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f612:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 801f616:	681a      	ldr	r2, [r3, #0]
 801f618:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f61c:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 801f620:	681b      	ldr	r3, [r3, #0]
 801f622:	fb21 3202 	smlad	r2, r1, r2, r3
 801f626:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f62a:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 801f62e:	601a      	str	r2, [r3, #0]
  return(result);
 801f630:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f634:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 801f638:	681b      	ldr	r3, [r3, #0]
 801f63a:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val4 = __SXTAB16(rhs_offset_s16x2, __ROR(val4, 8));
 801f63e:	f8d7 25b8 	ldr.w	r2, [r7, #1464]	; 0x5b8
 801f642:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f646:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 801f64a:	601a      	str	r2, [r3, #0]
 801f64c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f650:	f5a3 7202 	sub.w	r2, r3, #520	; 0x208
 801f654:	2308      	movs	r3, #8
 801f656:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801f658:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f65c:	f5a3 7202 	sub.w	r2, r3, #520	; 0x208
 801f660:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f664:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 801f668:	681b      	ldr	r3, [r3, #0]
 801f66a:	f003 031f 	and.w	r3, r3, #31
 801f66e:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801f670:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f674:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 801f678:	681b      	ldr	r3, [r3, #0]
 801f67a:	2b00      	cmp	r3, #0
 801f67c:	d105      	bne.n	801f68a <arm_nn_vec_mat_mult_t_s8+0xab2>
    return op1;
 801f67e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f682:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 801f686:	6819      	ldr	r1, [r3, #0]
 801f688:	e00b      	b.n	801f6a2 <arm_nn_vec_mat_mult_t_s8+0xaca>
  return (op1 >> op2) | (op1 << (32U - op2));
 801f68a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f68e:	f5a3 7201 	sub.w	r2, r3, #516	; 0x204
 801f692:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f696:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 801f69a:	6812      	ldr	r2, [r2, #0]
 801f69c:	681b      	ldr	r3, [r3, #0]
 801f69e:	fa62 f103 	ror.w	r1, r2, r3
 801f6a2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f6a6:	f5a3 72fc 	sub.w	r2, r3, #504	; 0x1f8
 801f6aa:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 801f6ae:	6013      	str	r3, [r2, #0]
 801f6b0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f6b4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 801f6b8:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801f6ba:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f6be:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 801f6c2:	681a      	ldr	r2, [r3, #0]
 801f6c4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f6c8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 801f6cc:	681b      	ldr	r3, [r3, #0]
 801f6ce:	fa22 f283 	sxtab16	r2, r2, r3
 801f6d2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f6d6:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 801f6da:	601a      	str	r2, [r3, #0]
  return(result);
 801f6dc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f6e0:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 801f6e4:	681b      	ldr	r3, [r3, #0]
 801f6e6:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
 801f6ea:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f6ee:	f5a3 72fa 	sub.w	r2, r3, #500	; 0x1f4
 801f6f2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 801f6f6:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801f6f8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f6fc:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 801f700:	681b      	ldr	r3, [r3, #0]
 801f702:	681b      	ldr	r3, [r3, #0]
 801f704:	681b      	ldr	r3, [r3, #0]
 801f706:	461a      	mov	r2, r3
 801f708:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f70c:	f2a3 5394 	subw	r3, r3, #1428	; 0x594
 801f710:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801f712:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f716:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 801f71a:	681b      	ldr	r3, [r3, #0]
 801f71c:	681b      	ldr	r3, [r3, #0]
 801f71e:	1d1a      	adds	r2, r3, #4
 801f720:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f724:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 801f728:	681b      	ldr	r3, [r3, #0]
 801f72a:	601a      	str	r2, [r3, #0]
    return (val);
 801f72c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f730:	f2a3 5394 	subw	r3, r3, #1428	; 0x594
 801f734:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the RHS matrix
            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 801f736:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            res01 = __SMLAD(val3, val5, res01);
 801f73a:	f8d7 25bc 	ldr.w	r2, [r7, #1468]	; 0x5bc
 801f73e:	f8d7 15b4 	ldr.w	r1, [r7, #1460]	; 0x5b4
 801f742:	f8d7 0624 	ldr.w	r0, [r7, #1572]	; 0x624
 801f746:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f74a:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 801f74e:	601a      	str	r2, [r3, #0]
 801f750:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f754:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 801f758:	6019      	str	r1, [r3, #0]
 801f75a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f75e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 801f762:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801f764:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f768:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 801f76c:	6819      	ldr	r1, [r3, #0]
 801f76e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f772:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 801f776:	681a      	ldr	r2, [r3, #0]
 801f778:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f77c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 801f780:	681b      	ldr	r3, [r3, #0]
 801f782:	fb21 3202 	smlad	r2, r1, r2, r3
 801f786:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f78a:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 801f78e:	601a      	str	r2, [r3, #0]
  return(result);
 801f790:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f794:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 801f798:	681b      	ldr	r3, [r3, #0]
 801f79a:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
            res01 = __SMLAD(val1, val4, res01);
 801f79e:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 801f7a2:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 801f7a6:	f8d7 0624 	ldr.w	r0, [r7, #1572]	; 0x624
 801f7aa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f7ae:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 801f7b2:	601a      	str	r2, [r3, #0]
 801f7b4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f7b8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 801f7bc:	6019      	str	r1, [r3, #0]
 801f7be:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f7c2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 801f7c6:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801f7c8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f7cc:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 801f7d0:	6819      	ldr	r1, [r3, #0]
 801f7d2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f7d6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 801f7da:	681a      	ldr	r2, [r3, #0]
 801f7dc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f7e0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 801f7e4:	681b      	ldr	r3, [r3, #0]
 801f7e6:	fb21 3202 	smlad	r2, r1, r2, r3
 801f7ea:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f7ee:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 801f7f2:	601a      	str	r2, [r3, #0]
  return(result);
 801f7f4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f7f8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 801f7fc:	681b      	ldr	r3, [r3, #0]
 801f7fe:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

            val2 = __SXTAB16(rhs_offset_s16x2, val0);
 801f802:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 801f806:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f80a:	f5a3 72e4 	sub.w	r2, r3, #456	; 0x1c8
 801f80e:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 801f812:	6013      	str	r3, [r2, #0]
 801f814:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f818:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 801f81c:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801f81e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f822:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 801f826:	681a      	ldr	r2, [r3, #0]
 801f828:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f82c:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 801f830:	681b      	ldr	r3, [r3, #0]
 801f832:	fa22 f283 	sxtab16	r2, r2, r3
 801f836:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f83a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 801f83e:	601a      	str	r2, [r3, #0]
  return(result);
 801f840:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f844:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 801f848:	681b      	ldr	r3, [r3, #0]
 801f84a:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 801f84e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f852:	f5a3 72e2 	sub.w	r2, r3, #452	; 0x1c4
 801f856:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801f85a:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801f85c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f860:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 801f864:	681b      	ldr	r3, [r3, #0]
 801f866:	681b      	ldr	r3, [r3, #0]
 801f868:	681b      	ldr	r3, [r3, #0]
 801f86a:	461a      	mov	r2, r3
 801f86c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f870:	f5a3 63b3 	sub.w	r3, r3, #1432	; 0x598
 801f874:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801f876:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f87a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 801f87e:	681b      	ldr	r3, [r3, #0]
 801f880:	681b      	ldr	r3, [r3, #0]
 801f882:	1d1a      	adds	r2, r3, #4
 801f884:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f888:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 801f88c:	681b      	ldr	r3, [r3, #0]
 801f88e:	601a      	str	r2, [r3, #0]
    return (val);
 801f890:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f894:	f5a3 63b3 	sub.w	r3, r3, #1432	; 0x598
 801f898:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the LHS vector
            val1 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 801f89a:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 801f89e:	f8d7 25c8 	ldr.w	r2, [r7, #1480]	; 0x5c8
 801f8a2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f8a6:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 801f8aa:	601a      	str	r2, [r3, #0]
 801f8ac:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f8b0:	f5a3 72e0 	sub.w	r2, r3, #448	; 0x1c0
 801f8b4:	2308      	movs	r3, #8
 801f8b6:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801f8b8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f8bc:	f5a3 72e0 	sub.w	r2, r3, #448	; 0x1c0
 801f8c0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f8c4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 801f8c8:	681b      	ldr	r3, [r3, #0]
 801f8ca:	f003 031f 	and.w	r3, r3, #31
 801f8ce:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801f8d0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f8d4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 801f8d8:	681b      	ldr	r3, [r3, #0]
 801f8da:	2b00      	cmp	r3, #0
 801f8dc:	d105      	bne.n	801f8ea <arm_nn_vec_mat_mult_t_s8+0xd12>
    return op1;
 801f8de:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f8e2:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 801f8e6:	6819      	ldr	r1, [r3, #0]
 801f8e8:	e00b      	b.n	801f902 <arm_nn_vec_mat_mult_t_s8+0xd2a>
  return (op1 >> op2) | (op1 << (32U - op2));
 801f8ea:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f8ee:	f5a3 72de 	sub.w	r2, r3, #444	; 0x1bc
 801f8f2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f8f6:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 801f8fa:	6812      	ldr	r2, [r2, #0]
 801f8fc:	681b      	ldr	r3, [r3, #0]
 801f8fe:	fa62 f103 	ror.w	r1, r2, r3
 801f902:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f906:	f5a3 72d8 	sub.w	r2, r3, #432	; 0x1b0
 801f90a:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 801f90e:	6013      	str	r3, [r2, #0]
 801f910:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f914:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 801f918:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801f91a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f91e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 801f922:	681a      	ldr	r2, [r3, #0]
 801f924:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f928:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 801f92c:	681b      	ldr	r3, [r3, #0]
 801f92e:	fa22 f283 	sxtab16	r2, r2, r3
 801f932:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f936:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 801f93a:	601a      	str	r2, [r3, #0]
  return(result);
 801f93c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f940:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 801f944:	681b      	ldr	r3, [r3, #0]
 801f946:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            val3 = __SXTAB16(lhs_offset_s16x2, val1);
 801f94a:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 801f94e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f952:	f5a3 72d2 	sub.w	r2, r3, #420	; 0x1a4
 801f956:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 801f95a:	6013      	str	r3, [r2, #0]
 801f95c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f960:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 801f964:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801f966:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f96a:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 801f96e:	681a      	ldr	r2, [r3, #0]
 801f970:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f974:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 801f978:	681b      	ldr	r3, [r3, #0]
 801f97a:	fa22 f283 	sxtab16	r2, r2, r3
 801f97e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f982:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 801f986:	601a      	str	r2, [r3, #0]
  return(result);
 801f988:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f98c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 801f990:	681b      	ldr	r3, [r3, #0]
 801f992:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
            // Read 4 x int8 values from the RHS matrix
            val4 = arm_nn_read_q7x4((const q7_t *)rhs_ptr + off0);
 801f996:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f99a:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 801f99e:	681a      	ldr	r2, [r3, #0]
 801f9a0:	f8d7 3614 	ldr.w	r3, [r7, #1556]	; 0x614
 801f9a4:	441a      	add	r2, r3
 801f9a6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f9aa:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 801f9ae:	601a      	str	r2, [r3, #0]
 801f9b0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f9b4:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 801f9b8:	681b      	ldr	r3, [r3, #0]
 801f9ba:	681b      	ldr	r3, [r3, #0]
 801f9bc:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801f9be:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f9c2:	f2a3 539c 	subw	r3, r3, #1436	; 0x59c
 801f9c6:	601a      	str	r2, [r3, #0]
    return (val);
 801f9c8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f9cc:	f2a3 539c 	subw	r3, r3, #1436	; 0x59c
 801f9d0:	681b      	ldr	r3, [r3, #0]
 801f9d2:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
            val1 = __SXTAB16(lhs_offset_s16x2, __ROR(val1, 8));
 801f9d6:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 801f9da:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f9de:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 801f9e2:	601a      	str	r2, [r3, #0]
 801f9e4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f9e8:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 801f9ec:	2308      	movs	r3, #8
 801f9ee:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801f9f0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f9f4:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 801f9f8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801f9fc:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 801fa00:	681b      	ldr	r3, [r3, #0]
 801fa02:	f003 031f 	and.w	r3, r3, #31
 801fa06:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801fa08:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fa0c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 801fa10:	681b      	ldr	r3, [r3, #0]
 801fa12:	2b00      	cmp	r3, #0
 801fa14:	d105      	bne.n	801fa22 <arm_nn_vec_mat_mult_t_s8+0xe4a>
    return op1;
 801fa16:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fa1a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 801fa1e:	6819      	ldr	r1, [r3, #0]
 801fa20:	e00b      	b.n	801fa3a <arm_nn_vec_mat_mult_t_s8+0xe62>
  return (op1 >> op2) | (op1 << (32U - op2));
 801fa22:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fa26:	f5a3 72cc 	sub.w	r2, r3, #408	; 0x198
 801fa2a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fa2e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 801fa32:	6812      	ldr	r2, [r2, #0]
 801fa34:	681b      	ldr	r3, [r3, #0]
 801fa36:	fa62 f103 	ror.w	r1, r2, r3
 801fa3a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fa3e:	f5a3 72c6 	sub.w	r2, r3, #396	; 0x18c
 801fa42:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 801fa46:	6013      	str	r3, [r2, #0]
 801fa48:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fa4c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 801fa50:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801fa52:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fa56:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 801fa5a:	681a      	ldr	r2, [r3, #0]
 801fa5c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fa60:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 801fa64:	681b      	ldr	r3, [r3, #0]
 801fa66:	fa22 f283 	sxtab16	r2, r2, r3
 801fa6a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fa6e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 801fa72:	601a      	str	r2, [r3, #0]
  return(result);
 801fa74:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fa78:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 801fa7c:	681b      	ldr	r3, [r3, #0]
 801fa7e:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0

            // Perform the accumulations
            res00 = __SMLAD(val3, val2, res00);
 801fa82:	f8d7 25bc 	ldr.w	r2, [r7, #1468]	; 0x5bc
 801fa86:	f8d7 15c4 	ldr.w	r1, [r7, #1476]	; 0x5c4
 801fa8a:	f8d7 0628 	ldr.w	r0, [r7, #1576]	; 0x628
 801fa8e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fa92:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 801fa96:	601a      	str	r2, [r3, #0]
 801fa98:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fa9c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 801faa0:	6019      	str	r1, [r3, #0]
 801faa2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801faa6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 801faaa:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801faac:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fab0:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 801fab4:	6819      	ldr	r1, [r3, #0]
 801fab6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801faba:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 801fabe:	681a      	ldr	r2, [r3, #0]
 801fac0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fac4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 801fac8:	681b      	ldr	r3, [r3, #0]
 801faca:	fb21 3202 	smlad	r2, r1, r2, r3
 801face:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fad2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 801fad6:	601a      	str	r2, [r3, #0]
  return(result);
 801fad8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fadc:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 801fae0:	681b      	ldr	r3, [r3, #0]
 801fae2:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val5 = __SXTAB16(rhs_offset_s16x2, val4);
 801fae6:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 801faea:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801faee:	f5a3 72b8 	sub.w	r2, r3, #368	; 0x170
 801faf2:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 801faf6:	6013      	str	r3, [r2, #0]
 801faf8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fafc:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 801fb00:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801fb02:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fb06:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 801fb0a:	681a      	ldr	r2, [r3, #0]
 801fb0c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fb10:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 801fb14:	681b      	ldr	r3, [r3, #0]
 801fb16:	fa22 f283 	sxtab16	r2, r2, r3
 801fb1a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fb1e:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 801fb22:	601a      	str	r2, [r3, #0]
  return(result);
 801fb24:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fb28:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 801fb2c:	681b      	ldr	r3, [r3, #0]
 801fb2e:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
            res00 = __SMLAD(val1, val0, res00);
 801fb32:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 801fb36:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 801fb3a:	f8d7 0628 	ldr.w	r0, [r7, #1576]	; 0x628
 801fb3e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fb42:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 801fb46:	601a      	str	r2, [r3, #0]
 801fb48:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fb4c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 801fb50:	6019      	str	r1, [r3, #0]
 801fb52:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fb56:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 801fb5a:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801fb5c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fb60:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 801fb64:	6819      	ldr	r1, [r3, #0]
 801fb66:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fb6a:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 801fb6e:	681a      	ldr	r2, [r3, #0]
 801fb70:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fb74:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 801fb78:	681b      	ldr	r3, [r3, #0]
 801fb7a:	fb21 3202 	smlad	r2, r1, r2, r3
 801fb7e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fb82:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 801fb86:	601a      	str	r2, [r3, #0]
  return(result);
 801fb88:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fb8c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 801fb90:	681b      	ldr	r3, [r3, #0]
 801fb92:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val4 = __SXTAB16(rhs_offset_s16x2, __ROR(val4, 8));
 801fb96:	f8d7 25b8 	ldr.w	r2, [r7, #1464]	; 0x5b8
 801fb9a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fb9e:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 801fba2:	601a      	str	r2, [r3, #0]
 801fba4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fba8:	f5a3 72ae 	sub.w	r2, r3, #348	; 0x15c
 801fbac:	2308      	movs	r3, #8
 801fbae:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801fbb0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fbb4:	f5a3 72ae 	sub.w	r2, r3, #348	; 0x15c
 801fbb8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fbbc:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 801fbc0:	681b      	ldr	r3, [r3, #0]
 801fbc2:	f003 031f 	and.w	r3, r3, #31
 801fbc6:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801fbc8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fbcc:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 801fbd0:	681b      	ldr	r3, [r3, #0]
 801fbd2:	2b00      	cmp	r3, #0
 801fbd4:	d105      	bne.n	801fbe2 <arm_nn_vec_mat_mult_t_s8+0x100a>
    return op1;
 801fbd6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fbda:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 801fbde:	6819      	ldr	r1, [r3, #0]
 801fbe0:	e00b      	b.n	801fbfa <arm_nn_vec_mat_mult_t_s8+0x1022>
  return (op1 >> op2) | (op1 << (32U - op2));
 801fbe2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fbe6:	f5a3 72ac 	sub.w	r2, r3, #344	; 0x158
 801fbea:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fbee:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 801fbf2:	6812      	ldr	r2, [r2, #0]
 801fbf4:	681b      	ldr	r3, [r3, #0]
 801fbf6:	fa62 f103 	ror.w	r1, r2, r3
 801fbfa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fbfe:	f5a3 72a6 	sub.w	r2, r3, #332	; 0x14c
 801fc02:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 801fc06:	6013      	str	r3, [r2, #0]
 801fc08:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fc0c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 801fc10:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801fc12:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fc16:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 801fc1a:	681a      	ldr	r2, [r3, #0]
 801fc1c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fc20:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 801fc24:	681b      	ldr	r3, [r3, #0]
 801fc26:	fa22 f283 	sxtab16	r2, r2, r3
 801fc2a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fc2e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 801fc32:	601a      	str	r2, [r3, #0]
  return(result);
 801fc34:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fc38:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 801fc3c:	681b      	ldr	r3, [r3, #0]
 801fc3e:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
 801fc42:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fc46:	f5a3 72a4 	sub.w	r2, r3, #328	; 0x148
 801fc4a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 801fc4e:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801fc50:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fc54:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 801fc58:	681b      	ldr	r3, [r3, #0]
 801fc5a:	681b      	ldr	r3, [r3, #0]
 801fc5c:	681b      	ldr	r3, [r3, #0]
 801fc5e:	461a      	mov	r2, r3
 801fc60:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fc64:	f5a3 63b4 	sub.w	r3, r3, #1440	; 0x5a0
 801fc68:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801fc6a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fc6e:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 801fc72:	681b      	ldr	r3, [r3, #0]
 801fc74:	681b      	ldr	r3, [r3, #0]
 801fc76:	1d1a      	adds	r2, r3, #4
 801fc78:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fc7c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 801fc80:	681b      	ldr	r3, [r3, #0]
 801fc82:	601a      	str	r2, [r3, #0]
    return (val);
 801fc84:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fc88:	f5a3 63b4 	sub.w	r3, r3, #1440	; 0x5a0
 801fc8c:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the RHS matrix
            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 801fc8e:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            res01 = __SMLAD(val3, val5, res01);
 801fc92:	f8d7 25bc 	ldr.w	r2, [r7, #1468]	; 0x5bc
 801fc96:	f8d7 15b4 	ldr.w	r1, [r7, #1460]	; 0x5b4
 801fc9a:	f8d7 0624 	ldr.w	r0, [r7, #1572]	; 0x624
 801fc9e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fca2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 801fca6:	601a      	str	r2, [r3, #0]
 801fca8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fcac:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 801fcb0:	6019      	str	r1, [r3, #0]
 801fcb2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fcb6:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 801fcba:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801fcbc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fcc0:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 801fcc4:	6819      	ldr	r1, [r3, #0]
 801fcc6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fcca:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 801fcce:	681a      	ldr	r2, [r3, #0]
 801fcd0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fcd4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 801fcd8:	681b      	ldr	r3, [r3, #0]
 801fcda:	fb21 3202 	smlad	r2, r1, r2, r3
 801fcde:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fce2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 801fce6:	601a      	str	r2, [r3, #0]
  return(result);
 801fce8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fcec:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 801fcf0:	681b      	ldr	r3, [r3, #0]
 801fcf2:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
            res01 = __SMLAD(val1, val4, res01);
 801fcf6:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 801fcfa:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 801fcfe:	f8d7 0624 	ldr.w	r0, [r7, #1572]	; 0x624
 801fd02:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fd06:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 801fd0a:	601a      	str	r2, [r3, #0]
 801fd0c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fd10:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801fd14:	6019      	str	r1, [r3, #0]
 801fd16:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fd1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801fd1e:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801fd20:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fd24:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 801fd28:	6819      	ldr	r1, [r3, #0]
 801fd2a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fd2e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801fd32:	681a      	ldr	r2, [r3, #0]
 801fd34:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fd38:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801fd3c:	681b      	ldr	r3, [r3, #0]
 801fd3e:	fb21 3202 	smlad	r2, r1, r2, r3
 801fd42:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fd46:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 801fd4a:	601a      	str	r2, [r3, #0]
  return(result);
 801fd4c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fd50:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 801fd54:	681b      	ldr	r3, [r3, #0]
 801fd56:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

            val2 = __SXTAB16(rhs_offset_s16x2, val0);
 801fd5a:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 801fd5e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fd62:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 801fd66:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 801fd6a:	6013      	str	r3, [r2, #0]
 801fd6c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fd70:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 801fd74:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801fd76:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fd7a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 801fd7e:	681a      	ldr	r2, [r3, #0]
 801fd80:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fd84:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 801fd88:	681b      	ldr	r3, [r3, #0]
 801fd8a:	fa22 f283 	sxtab16	r2, r2, r3
 801fd8e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fd92:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 801fd96:	601a      	str	r2, [r3, #0]
  return(result);
 801fd98:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fd9c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 801fda0:	681b      	ldr	r3, [r3, #0]
 801fda2:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 801fda6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fdaa:	f5a3 728c 	sub.w	r2, r3, #280	; 0x118
 801fdae:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801fdb2:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801fdb4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fdb8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 801fdbc:	681b      	ldr	r3, [r3, #0]
 801fdbe:	681b      	ldr	r3, [r3, #0]
 801fdc0:	681b      	ldr	r3, [r3, #0]
 801fdc2:	461a      	mov	r2, r3
 801fdc4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fdc8:	f2a3 53a4 	subw	r3, r3, #1444	; 0x5a4
 801fdcc:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801fdce:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fdd2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 801fdd6:	681b      	ldr	r3, [r3, #0]
 801fdd8:	681b      	ldr	r3, [r3, #0]
 801fdda:	1d1a      	adds	r2, r3, #4
 801fddc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fde0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 801fde4:	681b      	ldr	r3, [r3, #0]
 801fde6:	601a      	str	r2, [r3, #0]
    return (val);
 801fde8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fdec:	f2a3 53a4 	subw	r3, r3, #1444	; 0x5a4
 801fdf0:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the LHS vector
            val1 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 801fdf2:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 801fdf6:	f8d7 25c8 	ldr.w	r2, [r7, #1480]	; 0x5c8
 801fdfa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fdfe:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 801fe02:	601a      	str	r2, [r3, #0]
 801fe04:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fe08:	f5a3 728a 	sub.w	r2, r3, #276	; 0x114
 801fe0c:	2308      	movs	r3, #8
 801fe0e:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801fe10:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fe14:	f5a3 728a 	sub.w	r2, r3, #276	; 0x114
 801fe18:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fe1c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 801fe20:	681b      	ldr	r3, [r3, #0]
 801fe22:	f003 031f 	and.w	r3, r3, #31
 801fe26:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801fe28:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fe2c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 801fe30:	681b      	ldr	r3, [r3, #0]
 801fe32:	2b00      	cmp	r3, #0
 801fe34:	d105      	bne.n	801fe42 <arm_nn_vec_mat_mult_t_s8+0x126a>
    return op1;
 801fe36:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fe3a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 801fe3e:	6819      	ldr	r1, [r3, #0]
 801fe40:	e00b      	b.n	801fe5a <arm_nn_vec_mat_mult_t_s8+0x1282>
  return (op1 >> op2) | (op1 << (32U - op2));
 801fe42:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fe46:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 801fe4a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fe4e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 801fe52:	6812      	ldr	r2, [r2, #0]
 801fe54:	681b      	ldr	r3, [r3, #0]
 801fe56:	fa62 f103 	ror.w	r1, r2, r3
 801fe5a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fe5e:	f5a3 7282 	sub.w	r2, r3, #260	; 0x104
 801fe62:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 801fe66:	6013      	str	r3, [r2, #0]
 801fe68:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fe6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801fe70:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801fe72:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fe76:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801fe7a:	681a      	ldr	r2, [r3, #0]
 801fe7c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fe80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801fe84:	681b      	ldr	r3, [r3, #0]
 801fe86:	fa22 f283 	sxtab16	r2, r2, r3
 801fe8a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fe8e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801fe92:	601a      	str	r2, [r3, #0]
  return(result);
 801fe94:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fe98:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801fe9c:	681b      	ldr	r3, [r3, #0]
 801fe9e:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            val3 = __SXTAB16(lhs_offset_s16x2, val1);
 801fea2:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 801fea6:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 801feaa:	f8c7 3538 	str.w	r3, [r7, #1336]	; 0x538
 801feae:	f8c7 2534 	str.w	r2, [r7, #1332]	; 0x534
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801feb2:	f8d7 2538 	ldr.w	r2, [r7, #1336]	; 0x538
 801feb6:	f8d7 3534 	ldr.w	r3, [r7, #1332]	; 0x534
 801feba:	fa22 f283 	sxtab16	r2, r2, r3
 801febe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fec2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 801fec6:	601a      	str	r2, [r3, #0]
  return(result);
 801fec8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fecc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 801fed0:	681b      	ldr	r3, [r3, #0]
 801fed2:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
            // Read 4 x int8 values from the RHS matrix
            val4 = arm_nn_read_q7x4((const q7_t *)rhs_ptr + off0);
 801fed6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801feda:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 801fede:	681a      	ldr	r2, [r3, #0]
 801fee0:	f8d7 3614 	ldr.w	r3, [r7, #1556]	; 0x614
 801fee4:	4413      	add	r3, r2
 801fee6:	f8c7 353c 	str.w	r3, [r7, #1340]	; 0x53c
 801feea:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 801feee:	681b      	ldr	r3, [r3, #0]
 801fef0:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801fef2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801fef6:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 801fefa:	601a      	str	r2, [r3, #0]
    return (val);
 801fefc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801ff00:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 801ff04:	681b      	ldr	r3, [r3, #0]
 801ff06:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
            val1 = __SXTAB16(lhs_offset_s16x2, __ROR(val1, 8));
 801ff0a:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	; 0x5c0
 801ff0e:	f8c7 3544 	str.w	r3, [r7, #1348]	; 0x544
 801ff12:	2308      	movs	r3, #8
 801ff14:	f8c7 3540 	str.w	r3, [r7, #1344]	; 0x540
  op2 %= 32U;
 801ff18:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 801ff1c:	f003 031f 	and.w	r3, r3, #31
 801ff20:	f8c7 3540 	str.w	r3, [r7, #1344]	; 0x540
  if (op2 == 0U)
 801ff24:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 801ff28:	2b00      	cmp	r3, #0
 801ff2a:	d102      	bne.n	801ff32 <arm_nn_vec_mat_mult_t_s8+0x135a>
    return op1;
 801ff2c:	f8d7 2544 	ldr.w	r2, [r7, #1348]	; 0x544
 801ff30:	e004      	b.n	801ff3c <arm_nn_vec_mat_mult_t_s8+0x1364>
  return (op1 >> op2) | (op1 << (32U - op2));
 801ff32:	f8d7 2544 	ldr.w	r2, [r7, #1348]	; 0x544
 801ff36:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 801ff3a:	41da      	rors	r2, r3
 801ff3c:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 801ff40:	f8c7 3550 	str.w	r3, [r7, #1360]	; 0x550
 801ff44:	f8c7 254c 	str.w	r2, [r7, #1356]	; 0x54c
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801ff48:	f8d7 2550 	ldr.w	r2, [r7, #1360]	; 0x550
 801ff4c:	f8d7 354c 	ldr.w	r3, [r7, #1356]	; 0x54c
 801ff50:	fa22 f383 	sxtab16	r3, r2, r3
 801ff54:	f8c7 3548 	str.w	r3, [r7, #1352]	; 0x548
  return(result);
 801ff58:	f8d7 3548 	ldr.w	r3, [r7, #1352]	; 0x548
 801ff5c:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0

            // Perform the accumulations
            res00 = __SMLAD(val3, val2, res00);
 801ff60:	f8d7 15bc 	ldr.w	r1, [r7, #1468]	; 0x5bc
 801ff64:	f8d7 25c4 	ldr.w	r2, [r7, #1476]	; 0x5c4
 801ff68:	f8d7 3628 	ldr.w	r3, [r7, #1576]	; 0x628
 801ff6c:	f8c7 1560 	str.w	r1, [r7, #1376]	; 0x560
 801ff70:	f8c7 255c 	str.w	r2, [r7, #1372]	; 0x55c
 801ff74:	f8c7 3558 	str.w	r3, [r7, #1368]	; 0x558
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801ff78:	f8d7 1560 	ldr.w	r1, [r7, #1376]	; 0x560
 801ff7c:	f8d7 255c 	ldr.w	r2, [r7, #1372]	; 0x55c
 801ff80:	f8d7 3558 	ldr.w	r3, [r7, #1368]	; 0x558
 801ff84:	fb21 3302 	smlad	r3, r1, r2, r3
 801ff88:	f8c7 3554 	str.w	r3, [r7, #1364]	; 0x554
  return(result);
 801ff8c:	f8d7 3554 	ldr.w	r3, [r7, #1364]	; 0x554
 801ff90:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val5 = __SXTAB16(rhs_offset_s16x2, val4);
 801ff94:	f8d7 25b8 	ldr.w	r2, [r7, #1464]	; 0x5b8
 801ff98:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 801ff9c:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 801ffa0:	f8c7 2568 	str.w	r2, [r7, #1384]	; 0x568
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801ffa4:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 801ffa8:	f8d7 3568 	ldr.w	r3, [r7, #1384]	; 0x568
 801ffac:	fa22 f383 	sxtab16	r3, r2, r3
 801ffb0:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
  return(result);
 801ffb4:	f8d7 3564 	ldr.w	r3, [r7, #1380]	; 0x564
 801ffb8:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
            res00 = __SMLAD(val1, val0, res00);
 801ffbc:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 801ffc0:	f8d7 25c8 	ldr.w	r2, [r7, #1480]	; 0x5c8
 801ffc4:	f8d7 3628 	ldr.w	r3, [r7, #1576]	; 0x628
 801ffc8:	f8c7 157c 	str.w	r1, [r7, #1404]	; 0x57c
 801ffcc:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 801ffd0:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801ffd4:	f8d7 157c 	ldr.w	r1, [r7, #1404]	; 0x57c
 801ffd8:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 801ffdc:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 801ffe0:	fb21 3302 	smlad	r3, r1, r2, r3
 801ffe4:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
  return(result);
 801ffe8:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 801ffec:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val4 = __SXTAB16(rhs_offset_s16x2, __ROR(val4, 8));
 801fff0:	f8d7 35b8 	ldr.w	r3, [r7, #1464]	; 0x5b8
 801fff4:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
 801fff8:	2308      	movs	r3, #8
 801fffa:	f8c7 3580 	str.w	r3, [r7, #1408]	; 0x580
  op2 %= 32U;
 801fffe:	f8d7 3580 	ldr.w	r3, [r7, #1408]	; 0x580
 8020002:	f003 031f 	and.w	r3, r3, #31
 8020006:	f8c7 3580 	str.w	r3, [r7, #1408]	; 0x580
  if (op2 == 0U)
 802000a:	f8d7 3580 	ldr.w	r3, [r7, #1408]	; 0x580
 802000e:	2b00      	cmp	r3, #0
 8020010:	d102      	bne.n	8020018 <arm_nn_vec_mat_mult_t_s8+0x1440>
    return op1;
 8020012:	f8d7 2584 	ldr.w	r2, [r7, #1412]	; 0x584
 8020016:	e004      	b.n	8020022 <arm_nn_vec_mat_mult_t_s8+0x144a>
  return (op1 >> op2) | (op1 << (32U - op2));
 8020018:	f8d7 2584 	ldr.w	r2, [r7, #1412]	; 0x584
 802001c:	f8d7 3580 	ldr.w	r3, [r7, #1408]	; 0x580
 8020020:	41da      	rors	r2, r3
 8020022:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 8020026:	f8c7 3590 	str.w	r3, [r7, #1424]	; 0x590
 802002a:	f8c7 258c 	str.w	r2, [r7, #1420]	; 0x58c
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 802002e:	f8d7 2590 	ldr.w	r2, [r7, #1424]	; 0x590
 8020032:	f8d7 358c 	ldr.w	r3, [r7, #1420]	; 0x58c
 8020036:	fa22 f383 	sxtab16	r3, r2, r3
 802003a:	f8c7 3588 	str.w	r3, [r7, #1416]	; 0x588
  return(result);
 802003e:	f8d7 3588 	ldr.w	r3, [r7, #1416]	; 0x588
 8020042:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
            res01 = __SMLAD(val3, val5, res01);
 8020046:	f8d7 15bc 	ldr.w	r1, [r7, #1468]	; 0x5bc
 802004a:	f8d7 25b4 	ldr.w	r2, [r7, #1460]	; 0x5b4
 802004e:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 8020052:	f8c7 15a0 	str.w	r1, [r7, #1440]	; 0x5a0
 8020056:	f8c7 259c 	str.w	r2, [r7, #1436]	; 0x59c
 802005a:	f8c7 3598 	str.w	r3, [r7, #1432]	; 0x598
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 802005e:	f8d7 15a0 	ldr.w	r1, [r7, #1440]	; 0x5a0
 8020062:	f8d7 259c 	ldr.w	r2, [r7, #1436]	; 0x59c
 8020066:	f8d7 3598 	ldr.w	r3, [r7, #1432]	; 0x598
 802006a:	fb21 3302 	smlad	r3, r1, r2, r3
 802006e:	f8c7 3594 	str.w	r3, [r7, #1428]	; 0x594
  return(result);
 8020072:	f8d7 3594 	ldr.w	r3, [r7, #1428]	; 0x594
 8020076:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
            res01 = __SMLAD(val1, val4, res01);
 802007a:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 802007e:	f8d7 25b8 	ldr.w	r2, [r7, #1464]	; 0x5b8
 8020082:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 8020086:	f8c7 15b0 	str.w	r1, [r7, #1456]	; 0x5b0
 802008a:	f8c7 25ac 	str.w	r2, [r7, #1452]	; 0x5ac
 802008e:	f8c7 35a8 	str.w	r3, [r7, #1448]	; 0x5a8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8020092:	f8d7 15b0 	ldr.w	r1, [r7, #1456]	; 0x5b0
 8020096:	f8d7 25ac 	ldr.w	r2, [r7, #1452]	; 0x5ac
 802009a:	f8d7 35a8 	ldr.w	r3, [r7, #1448]	; 0x5a8
 802009e:	fb21 3302 	smlad	r3, r1, r2, r3
 80200a2:	f8c7 35a4 	str.w	r3, [r7, #1444]	; 0x5a4
  return(result);
 80200a6:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	; 0x5a4
 80200aa:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 80200ae:	f8d7 3620 	ldr.w	r3, [r7, #1568]	; 0x620
 80200b2:	3310      	adds	r3, #16
 80200b4:	f8c7 3620 	str.w	r3, [r7, #1568]	; 0x620
 80200b8:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 80200bc:	f1a3 020f 	sub.w	r2, r3, #15
 80200c0:	f8d7 3620 	ldr.w	r3, [r7, #1568]	; 0x620
 80200c4:	4293      	cmp	r3, r2
 80200c6:	f6fe ae1c 	blt.w	801ed02 <arm_nn_vec_mat_mult_t_s8+0x12a>
        }

        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 80200ca:	e05a      	b.n	8020182 <arm_nn_vec_mat_mult_t_s8+0x15aa>
        {
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 80200cc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80200d0:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 80200d4:	681b      	ldr	r3, [r3, #0]
 80200d6:	f993 3000 	ldrsb.w	r3, [r3]
 80200da:	461a      	mov	r2, r3
 80200dc:	f8d7 3654 	ldr.w	r3, [r7, #1620]	; 0x654
 80200e0:	4413      	add	r3, r2
 80200e2:	f8c7 35d4 	str.w	r3, [r7, #1492]	; 0x5d4
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
 80200e6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80200ea:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 80200ee:	681a      	ldr	r2, [r3, #0]
 80200f0:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 80200f4:	4413      	add	r3, r2
 80200f6:	f993 3000 	ldrsb.w	r3, [r3]
 80200fa:	461a      	mov	r2, r3
 80200fc:	f8d7 3654 	ldr.w	r3, [r7, #1620]	; 0x654
 8020100:	4413      	add	r3, r2
 8020102:	f8c7 35d0 	str.w	r3, [r7, #1488]	; 0x5d0
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
 8020106:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 802010a:	f5a3 63ac 	sub.w	r3, r3, #1376	; 0x560
 802010e:	681b      	ldr	r3, [r3, #0]
 8020110:	f993 3000 	ldrsb.w	r3, [r3]
 8020114:	461a      	mov	r2, r3
 8020116:	f8d7 3650 	ldr.w	r3, [r7, #1616]	; 0x650
 802011a:	4413      	add	r3, r2
 802011c:	f8c7 35cc 	str.w	r3, [r7, #1484]	; 0x5cc

            res00 += lhs_value * rhs_value0;
 8020120:	f8d7 25cc 	ldr.w	r2, [r7, #1484]	; 0x5cc
 8020124:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	; 0x5d4
 8020128:	fb03 f202 	mul.w	r2, r3, r2
 802012c:	f8d7 3628 	ldr.w	r3, [r7, #1576]	; 0x628
 8020130:	4413      	add	r3, r2
 8020132:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            res01 += lhs_value * rhs_value1;
 8020136:	f8d7 25cc 	ldr.w	r2, [r7, #1484]	; 0x5cc
 802013a:	f8d7 35d0 	ldr.w	r3, [r7, #1488]	; 0x5d0
 802013e:	fb03 f202 	mul.w	r2, r3, r2
 8020142:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 8020146:	4413      	add	r3, r2
 8020148:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

            ++rhs_ptr;
 802014c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020150:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 8020154:	681b      	ldr	r3, [r3, #0]
 8020156:	1c5a      	adds	r2, r3, #1
 8020158:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 802015c:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 8020160:	601a      	str	r2, [r3, #0]
            ++lhs_ptr;
 8020162:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020166:	f5a3 63ac 	sub.w	r3, r3, #1376	; 0x560
 802016a:	681b      	ldr	r3, [r3, #0]
 802016c:	1c5a      	adds	r2, r3, #1
 802016e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020172:	f5a3 63ac 	sub.w	r3, r3, #1376	; 0x560
 8020176:	601a      	str	r2, [r3, #0]
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 8020178:	f8d7 3620 	ldr.w	r3, [r7, #1568]	; 0x620
 802017c:	3301      	adds	r3, #1
 802017e:	f8c7 3620 	str.w	r3, [r7, #1568]	; 0x620
 8020182:	f8d7 2620 	ldr.w	r2, [r7, #1568]	; 0x620
 8020186:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 802018a:	429a      	cmp	r2, r3
 802018c:	db9e      	blt.n	80200cc <arm_nn_vec_mat_mult_t_s8+0x14f4>
 802018e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020192:	f5a3 7258 	sub.w	r2, r3, #864	; 0x360
 8020196:	f8d7 3628 	ldr.w	r3, [r7, #1576]	; 0x628
 802019a:	6013      	str	r3, [r2, #0]
 802019c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80201a0:	f5a3 7259 	sub.w	r2, r3, #868	; 0x364
 80201a4:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 80201a8:	6013      	str	r3, [r2, #0]
 80201aa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80201ae:	f5a3 725a 	sub.w	r2, r3, #872	; 0x368
 80201b2:	f8d7 3660 	ldr.w	r3, [r7, #1632]	; 0x660
 80201b6:	6013      	str	r3, [r2, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80201b8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80201bc:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 80201c0:	681b      	ldr	r3, [r3, #0]
 80201c2:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 80201c6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80201ca:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 80201ce:	681b      	ldr	r3, [r3, #0]
 80201d0:	fa03 f202 	lsl.w	r2, r3, r2
 80201d4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80201d8:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 80201dc:	601a      	str	r2, [r3, #0]
 80201de:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80201e2:	f5a3 725c 	sub.w	r2, r3, #880	; 0x370
 80201e6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80201ea:	f5a3 7359 	sub.w	r3, r3, #868	; 0x364
 80201ee:	681b      	ldr	r3, [r3, #0]
 80201f0:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80201f2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80201f6:	f5a3 725d 	sub.w	r2, r3, #884	; 0x374
 80201fa:	2300      	movs	r3, #0
 80201fc:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 80201fe:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8020202:	461a      	mov	r2, r3
 8020204:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8020208:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 802020a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 802020e:	461a      	mov	r2, r3
 8020210:	2300      	movs	r3, #0
 8020212:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8020214:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8020218:	e9d3 0100 	ldrd	r0, r1, [r3]
 802021c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020220:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 8020224:	681b      	ldr	r3, [r3, #0]
 8020226:	17da      	asrs	r2, r3, #31
 8020228:	633b      	str	r3, [r7, #48]	; 0x30
 802022a:	637a      	str	r2, [r7, #52]	; 0x34
 802022c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020230:	f5a3 735c 	sub.w	r3, r3, #880	; 0x370
 8020234:	681b      	ldr	r3, [r3, #0]
 8020236:	17da      	asrs	r2, r3, #31
 8020238:	62bb      	str	r3, [r7, #40]	; 0x28
 802023a:	62fa      	str	r2, [r7, #44]	; 0x2c
 802023c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802023e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8020240:	fb02 f203 	mul.w	r2, r2, r3
 8020244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020246:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 8020248:	fb04 f303 	mul.w	r3, r4, r3
 802024c:	4413      	add	r3, r2
 802024e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8020250:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8020252:	fba2 5604 	umull	r5, r6, r2, r4
 8020256:	4433      	add	r3, r6
 8020258:	461e      	mov	r6, r3
 802025a:	1943      	adds	r3, r0, r5
 802025c:	61bb      	str	r3, [r7, #24]
 802025e:	eb41 0306 	adc.w	r3, r1, r6
 8020262:	61fb      	str	r3, [r7, #28]
 8020264:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8020268:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 802026c:	e9c3 1200 	strd	r1, r2, [r3]
    result = (int32_t)(mult.long_long >> 31);
 8020270:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8020274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020278:	f04f 0000 	mov.w	r0, #0
 802027c:	f04f 0100 	mov.w	r1, #0
 8020280:	0fd0      	lsrs	r0, r2, #31
 8020282:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8020286:	17d9      	asrs	r1, r3, #31
 8020288:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 802028c:	f5a3 725d 	sub.w	r2, r3, #884	; 0x374
 8020290:	4603      	mov	r3, r0
 8020292:	6013      	str	r3, [r2, #0]
    return result;
 8020294:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020298:	f5a3 735d 	sub.w	r3, r3, #884	; 0x374
 802029c:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 802029e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80202a2:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 80202a6:	681b      	ldr	r3, [r3, #0]
 80202a8:	2b00      	cmp	r3, #0
 80202aa:	dc06      	bgt.n	80202ba <arm_nn_vec_mat_mult_t_s8+0x16e2>
 80202ac:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80202b0:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 80202b4:	681b      	ldr	r3, [r3, #0]
 80202b6:	425a      	negs	r2, r3
 80202b8:	e000      	b.n	80202bc <arm_nn_vec_mat_mult_t_s8+0x16e4>
 80202ba:	2200      	movs	r2, #0
 80202bc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80202c0:	f5a3 735e 	sub.w	r3, r3, #888	; 0x378
 80202c4:	6019      	str	r1, [r3, #0]
 80202c6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80202ca:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 80202ce:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 80202d0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80202d4:	f5a3 7260 	sub.w	r2, r3, #896	; 0x380
 80202d8:	2300      	movs	r3, #0
 80202da:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 80202dc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80202e0:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 80202e4:	2201      	movs	r2, #1
 80202e6:	681b      	ldr	r3, [r3, #0]
 80202e8:	fa02 f103 	lsl.w	r1, r2, r3
 80202ec:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80202f0:	f5a3 7261 	sub.w	r2, r3, #900	; 0x384
 80202f4:	1e4b      	subs	r3, r1, #1
 80202f6:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 80202f8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80202fc:	f5a3 7162 	sub.w	r1, r3, #904	; 0x388
 8020300:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020304:	f5a3 725e 	sub.w	r2, r3, #888	; 0x378
 8020308:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 802030c:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 8020310:	6812      	ldr	r2, [r2, #0]
 8020312:	681b      	ldr	r3, [r3, #0]
 8020314:	4013      	ands	r3, r2
 8020316:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 8020318:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 802031c:	f5a3 7160 	sub.w	r1, r3, #896	; 0x380
 8020320:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020324:	f5a3 725e 	sub.w	r2, r3, #888	; 0x378
 8020328:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 802032c:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8020330:	6812      	ldr	r2, [r2, #0]
 8020332:	681b      	ldr	r3, [r3, #0]
 8020334:	fa42 f303 	asr.w	r3, r2, r3
 8020338:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 802033a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 802033e:	f5a3 7263 	sub.w	r2, r3, #908	; 0x38c
 8020342:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020346:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 802034a:	681b      	ldr	r3, [r3, #0]
 802034c:	105b      	asrs	r3, r3, #1
 802034e:	6013      	str	r3, [r2, #0]
    if (result < 0)
 8020350:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020354:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 8020358:	681b      	ldr	r3, [r3, #0]
 802035a:	2b00      	cmp	r3, #0
 802035c:	da0a      	bge.n	8020374 <arm_nn_vec_mat_mult_t_s8+0x179c>
        threshold++;
 802035e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020362:	f5a3 7263 	sub.w	r2, r3, #908	; 0x38c
 8020366:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 802036a:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 802036e:	681b      	ldr	r3, [r3, #0]
 8020370:	3301      	adds	r3, #1
 8020372:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 8020374:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020378:	f5a3 7262 	sub.w	r2, r3, #904	; 0x388
 802037c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020380:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 8020384:	6812      	ldr	r2, [r2, #0]
 8020386:	681b      	ldr	r3, [r3, #0]
 8020388:	429a      	cmp	r2, r3
 802038a:	dd0a      	ble.n	80203a2 <arm_nn_vec_mat_mult_t_s8+0x17ca>
        result++;
 802038c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020390:	f5a3 7260 	sub.w	r2, r3, #896	; 0x380
 8020394:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020398:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 802039c:	681b      	ldr	r3, [r3, #0]
 802039e:	3301      	adds	r3, #1
 80203a0:	6013      	str	r3, [r2, #0]
    return result;
 80203a2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80203a6:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 80203aa:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80203ac:	bf00      	nop
        }

        // Quantize down
        res00 = arm_nn_requantize(res00, dst_multiplier, dst_shift);
 80203ae:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
 80203b2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80203b6:	f5a3 724c 	sub.w	r2, r3, #816	; 0x330
 80203ba:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 80203be:	6013      	str	r3, [r2, #0]
 80203c0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80203c4:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 80203c8:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 80203cc:	6013      	str	r3, [r2, #0]
 80203ce:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80203d2:	f5a3 724e 	sub.w	r2, r3, #824	; 0x338
 80203d6:	f8d7 3660 	ldr.w	r3, [r7, #1632]	; 0x660
 80203da:	6013      	str	r3, [r2, #0]
 80203dc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80203e0:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 80203e4:	681b      	ldr	r3, [r3, #0]
 80203e6:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 80203ea:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80203ee:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 80203f2:	681b      	ldr	r3, [r3, #0]
 80203f4:	fa03 f202 	lsl.w	r2, r3, r2
 80203f8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80203fc:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 8020400:	601a      	str	r2, [r3, #0]
 8020402:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020406:	f5a3 7250 	sub.w	r2, r3, #832	; 0x340
 802040a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 802040e:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8020412:	681b      	ldr	r3, [r3, #0]
 8020414:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8020416:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 802041a:	f5a3 7251 	sub.w	r2, r3, #836	; 0x344
 802041e:	2300      	movs	r3, #0
 8020420:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 8020422:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8020426:	461a      	mov	r2, r3
 8020428:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 802042c:	f842 3c08 	str.w	r3, [r2, #-8]
    mult.word.high = 0;
 8020430:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8020434:	461a      	mov	r2, r3
 8020436:	2300      	movs	r3, #0
 8020438:	f842 3c04 	str.w	r3, [r2, #-4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 802043c:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8020440:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8020444:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020448:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 802044c:	681b      	ldr	r3, [r3, #0]
 802044e:	17da      	asrs	r2, r3, #31
 8020450:	643b      	str	r3, [r7, #64]	; 0x40
 8020452:	647a      	str	r2, [r7, #68]	; 0x44
 8020454:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020458:	f5a3 7350 	sub.w	r3, r3, #832	; 0x340
 802045c:	681b      	ldr	r3, [r3, #0]
 802045e:	17da      	asrs	r2, r3, #31
 8020460:	63bb      	str	r3, [r7, #56]	; 0x38
 8020462:	63fa      	str	r2, [r7, #60]	; 0x3c
 8020464:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8020466:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8020468:	fb02 f203 	mul.w	r2, r2, r3
 802046c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802046e:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 8020470:	fb04 f303 	mul.w	r3, r4, r3
 8020474:	4413      	add	r3, r2
 8020476:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8020478:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 802047a:	fba2 ab04 	umull	sl, fp, r2, r4
 802047e:	445b      	add	r3, fp
 8020480:	469b      	mov	fp, r3
 8020482:	eb10 030a 	adds.w	r3, r0, sl
 8020486:	623b      	str	r3, [r7, #32]
 8020488:	eb41 030b 	adc.w	r3, r1, fp
 802048c:	627b      	str	r3, [r7, #36]	; 0x24
 802048e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8020492:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8020496:	e943 1202 	strd	r1, r2, [r3, #-8]
    result = (int32_t)(mult.long_long >> 31);
 802049a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 802049e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80204a2:	f04f 0000 	mov.w	r0, #0
 80204a6:	f04f 0100 	mov.w	r1, #0
 80204aa:	0fd0      	lsrs	r0, r2, #31
 80204ac:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80204b0:	17d9      	asrs	r1, r3, #31
 80204b2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80204b6:	f5a3 7251 	sub.w	r2, r3, #836	; 0x344
 80204ba:	4603      	mov	r3, r0
 80204bc:	6013      	str	r3, [r2, #0]
    return result;
 80204be:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80204c2:	f5a3 7351 	sub.w	r3, r3, #836	; 0x344
 80204c6:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80204c8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80204cc:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 80204d0:	681b      	ldr	r3, [r3, #0]
 80204d2:	2b00      	cmp	r3, #0
 80204d4:	dc06      	bgt.n	80204e4 <arm_nn_vec_mat_mult_t_s8+0x190c>
 80204d6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80204da:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 80204de:	681b      	ldr	r3, [r3, #0]
 80204e0:	425a      	negs	r2, r3
 80204e2:	e000      	b.n	80204e6 <arm_nn_vec_mat_mult_t_s8+0x190e>
 80204e4:	2200      	movs	r2, #0
 80204e6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80204ea:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 80204ee:	6019      	str	r1, [r3, #0]
 80204f0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80204f4:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 80204f8:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 80204fa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80204fe:	f5a3 7254 	sub.w	r2, r3, #848	; 0x350
 8020502:	2300      	movs	r3, #0
 8020504:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8020506:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 802050a:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 802050e:	2201      	movs	r2, #1
 8020510:	681b      	ldr	r3, [r3, #0]
 8020512:	fa02 f103 	lsl.w	r1, r2, r3
 8020516:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 802051a:	f5a3 7255 	sub.w	r2, r3, #852	; 0x354
 802051e:	1e4b      	subs	r3, r1, #1
 8020520:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 8020522:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020526:	f5a3 7156 	sub.w	r1, r3, #856	; 0x358
 802052a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 802052e:	f5a3 7252 	sub.w	r2, r3, #840	; 0x348
 8020532:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020536:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 802053a:	6812      	ldr	r2, [r2, #0]
 802053c:	681b      	ldr	r3, [r3, #0]
 802053e:	4013      	ands	r3, r2
 8020540:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 8020542:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020546:	f5a3 7154 	sub.w	r1, r3, #848	; 0x350
 802054a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 802054e:	f5a3 7252 	sub.w	r2, r3, #840	; 0x348
 8020552:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020556:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 802055a:	6812      	ldr	r2, [r2, #0]
 802055c:	681b      	ldr	r3, [r3, #0]
 802055e:	fa42 f303 	asr.w	r3, r2, r3
 8020562:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 8020564:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020568:	f5a3 7257 	sub.w	r2, r3, #860	; 0x35c
 802056c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020570:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 8020574:	681b      	ldr	r3, [r3, #0]
 8020576:	105b      	asrs	r3, r3, #1
 8020578:	6013      	str	r3, [r2, #0]
    if (result < 0)
 802057a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 802057e:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 8020582:	681b      	ldr	r3, [r3, #0]
 8020584:	2b00      	cmp	r3, #0
 8020586:	da0a      	bge.n	802059e <arm_nn_vec_mat_mult_t_s8+0x19c6>
        threshold++;
 8020588:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 802058c:	f5a3 7257 	sub.w	r2, r3, #860	; 0x35c
 8020590:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020594:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 8020598:	681b      	ldr	r3, [r3, #0]
 802059a:	3301      	adds	r3, #1
 802059c:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 802059e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80205a2:	f5a3 7256 	sub.w	r2, r3, #856	; 0x358
 80205a6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80205aa:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 80205ae:	6812      	ldr	r2, [r2, #0]
 80205b0:	681b      	ldr	r3, [r3, #0]
 80205b2:	429a      	cmp	r2, r3
 80205b4:	dd0a      	ble.n	80205cc <arm_nn_vec_mat_mult_t_s8+0x19f4>
        result++;
 80205b6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80205ba:	f5a3 7254 	sub.w	r2, r3, #848	; 0x350
 80205be:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80205c2:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 80205c6:	681b      	ldr	r3, [r3, #0]
 80205c8:	3301      	adds	r3, #1
 80205ca:	6013      	str	r3, [r2, #0]
    return result;
 80205cc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80205d0:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 80205d4:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80205d6:	bf00      	nop
        res01 = arm_nn_requantize(res01, dst_multiplier, dst_shift);
 80205d8:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

        // Add offset
        res00 += dst_offset;
 80205dc:	f8d7 2628 	ldr.w	r2, [r7, #1576]	; 0x628
 80205e0:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 80205e4:	4413      	add	r3, r2
 80205e6:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
        res01 += dst_offset;
 80205ea:	f8d7 2624 	ldr.w	r2, [r7, #1572]	; 0x624
 80205ee:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 80205f2:	4413      	add	r3, r2
 80205f4:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

        // Clamp the result
        res00 = MAX(res00, activation_min);
 80205f8:	f8d7 2628 	ldr.w	r2, [r7, #1576]	; 0x628
 80205fc:	f8d7 366c 	ldr.w	r3, [r7, #1644]	; 0x66c
 8020600:	4293      	cmp	r3, r2
 8020602:	bfb8      	it	lt
 8020604:	4613      	movlt	r3, r2
 8020606:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
        res00 = MIN(res00, activation_max);
 802060a:	f8d7 2628 	ldr.w	r2, [r7, #1576]	; 0x628
 802060e:	f8d7 3670 	ldr.w	r3, [r7, #1648]	; 0x670
 8020612:	4293      	cmp	r3, r2
 8020614:	bfa8      	it	ge
 8020616:	4613      	movge	r3, r2
 8020618:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
        res01 = MAX(res01, activation_min);
 802061c:	f8d7 2624 	ldr.w	r2, [r7, #1572]	; 0x624
 8020620:	f8d7 366c 	ldr.w	r3, [r7, #1644]	; 0x66c
 8020624:	4293      	cmp	r3, r2
 8020626:	bfb8      	it	lt
 8020628:	4613      	movlt	r3, r2
 802062a:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
        res01 = MIN(res01, activation_max);
 802062e:	f8d7 2624 	ldr.w	r2, [r7, #1572]	; 0x624
 8020632:	f8d7 3670 	ldr.w	r3, [r7, #1648]	; 0x670
 8020636:	4293      	cmp	r3, r2
 8020638:	bfa8      	it	ge
 802063a:	4613      	movge	r3, r2
 802063c:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

        *dst++ = (q7_t)res00;
 8020640:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020644:	f5a3 63bd 	sub.w	r3, r3, #1512	; 0x5e8
 8020648:	6819      	ldr	r1, [r3, #0]
 802064a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 802064e:	f5a3 62bd 	sub.w	r2, r3, #1512	; 0x5e8
 8020652:	1c4b      	adds	r3, r1, #1
 8020654:	6013      	str	r3, [r2, #0]
 8020656:	f8d7 3628 	ldr.w	r3, [r7, #1576]	; 0x628
 802065a:	b25b      	sxtb	r3, r3
 802065c:	700b      	strb	r3, [r1, #0]
        *dst++ = (q7_t)res01;
 802065e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020662:	f5a3 63bd 	sub.w	r3, r3, #1512	; 0x5e8
 8020666:	6819      	ldr	r1, [r3, #0]
 8020668:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 802066c:	f5a3 62bd 	sub.w	r2, r3, #1512	; 0x5e8
 8020670:	1c4b      	adds	r3, r1, #1
 8020672:	6013      	str	r3, [r2, #0]
 8020674:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 8020678:	b25b      	sxtb	r3, r3
 802067a:	700b      	strb	r3, [r1, #0]

        rhs += 2 * rhs_cols;
 802067c:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8020680:	005b      	lsls	r3, r3, #1
 8020682:	4619      	mov	r1, r3
 8020684:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020688:	f5a3 62bc 	sub.w	r2, r3, #1504	; 0x5e0
 802068c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020690:	f5a3 63bc 	sub.w	r3, r3, #1504	; 0x5e0
 8020694:	681b      	ldr	r3, [r3, #0]
 8020696:	440b      	add	r3, r1
 8020698:	6013      	str	r3, [r2, #0]
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 802069a:	f8d7 362c 	ldr.w	r3, [r7, #1580]	; 0x62c
 802069e:	3302      	adds	r3, #2
 80206a0:	f8c7 362c 	str.w	r3, [r7, #1580]	; 0x62c
 80206a4:	f8d7 3668 	ldr.w	r3, [r7, #1640]	; 0x668
 80206a8:	1e5a      	subs	r2, r3, #1
 80206aa:	f8d7 362c 	ldr.w	r3, [r7, #1580]	; 0x62c
 80206ae:	4293      	cmp	r3, r2
 80206b0:	f6fe aae5 	blt.w	801ec7e <arm_nn_vec_mat_mult_t_s8+0xa6>
    }

    if (rhs_rows % 2)
 80206b4:	f8d7 3668 	ldr.w	r3, [r7, #1640]	; 0x668
 80206b8:	f003 0301 	and.w	r3, r3, #1
 80206bc:	2b00      	cmp	r3, #0
 80206be:	f001 806e 	beq.w	802179e <arm_nn_vec_mat_mult_t_s8+0x2bc6>
    {
        const q7_t *lhs_ptr = &lhs[0];
 80206c2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80206c6:	f2a3 53ac 	subw	r3, r3, #1452	; 0x5ac
 80206ca:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80206ce:	f2a2 52dc 	subw	r2, r2, #1500	; 0x5dc
 80206d2:	6812      	ldr	r2, [r2, #0]
 80206d4:	601a      	str	r2, [r3, #0]
        const q7_t *rhs_ptr = &rhs[0];
 80206d6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80206da:	f5a3 63b6 	sub.w	r3, r3, #1456	; 0x5b0
 80206de:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80206e2:	f5a2 62bc 	sub.w	r2, r2, #1504	; 0x5e0
 80206e6:	6812      	ldr	r2, [r2, #0]
 80206e8:	601a      	str	r2, [r3, #0]

        q31_t res00 = 0;
 80206ea:	2300      	movs	r3, #0
 80206ec:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
        if (bias)
 80206f0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80206f4:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 80206f8:	681b      	ldr	r3, [r3, #0]
 80206fa:	2b00      	cmp	r3, #0
 80206fc:	d00d      	beq.n	802071a <arm_nn_vec_mat_mult_t_s8+0x1b42>
        {
            res00 = *bias++;
 80206fe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020702:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 8020706:	681b      	ldr	r3, [r3, #0]
 8020708:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 802070c:	f2a2 52e4 	subw	r2, r2, #1508	; 0x5e4
 8020710:	1d19      	adds	r1, r3, #4
 8020712:	6011      	str	r1, [r2, #0]
 8020714:	681b      	ldr	r3, [r3, #0]
 8020716:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
        }

        int32_t rhs_cols_idx = 0;
 802071a:	2300      	movs	r3, #0
 802071c:	f8c7 3618 	str.w	r3, [r7, #1560]	; 0x618

        q31_t val0, val1, val2, val3;
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 8020720:	f000 beb5 	b.w	802148e <arm_nn_vec_mat_mult_t_s8+0x28b6>
 8020724:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020728:	f2a3 532c 	subw	r3, r3, #1324	; 0x52c
 802072c:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8020730:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 8020732:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020736:	f2a3 532c 	subw	r3, r3, #1324	; 0x52c
 802073a:	681b      	ldr	r3, [r3, #0]
 802073c:	681b      	ldr	r3, [r3, #0]
 802073e:	681b      	ldr	r3, [r3, #0]
 8020740:	461a      	mov	r2, r3
 8020742:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020746:	f2a3 53bc 	subw	r3, r3, #1468	; 0x5bc
 802074a:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 802074c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020750:	f2a3 532c 	subw	r3, r3, #1324	; 0x52c
 8020754:	681b      	ldr	r3, [r3, #0]
 8020756:	681b      	ldr	r3, [r3, #0]
 8020758:	1d1a      	adds	r2, r3, #4
 802075a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 802075e:	f2a3 532c 	subw	r3, r3, #1324	; 0x52c
 8020762:	681b      	ldr	r3, [r3, #0]
 8020764:	601a      	str	r2, [r3, #0]
    return (val);
 8020766:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 802076a:	f2a3 53bc 	subw	r3, r3, #1468	; 0x5bc
 802076e:	681b      	ldr	r3, [r3, #0]
        {
            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 8020770:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val1 = __SXTAB16(rhs_offset_s16x2, val0);
 8020774:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 8020778:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 802077c:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 8020780:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 8020784:	6019      	str	r1, [r3, #0]
 8020786:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 802078a:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 802078e:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8020790:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020794:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 8020798:	681b      	ldr	r3, [r3, #0]
 802079a:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 802079e:	f2a2 5224 	subw	r2, r2, #1316	; 0x524
 80207a2:	6812      	ldr	r2, [r2, #0]
 80207a4:	fa23 f282 	sxtab16	r2, r3, r2
 80207a8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80207ac:	f5a3 63a5 	sub.w	r3, r3, #1320	; 0x528
 80207b0:	601a      	str	r2, [r3, #0]
  return(result);
 80207b2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80207b6:	f5a3 63a5 	sub.w	r3, r3, #1320	; 0x528
 80207ba:	681b      	ldr	r3, [r3, #0]
 80207bc:	f8c7 35e0 	str.w	r3, [r7, #1504]	; 0x5e0
 80207c0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80207c4:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 80207c8:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80207cc:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 80207ce:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80207d2:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 80207d6:	681b      	ldr	r3, [r3, #0]
 80207d8:	681b      	ldr	r3, [r3, #0]
 80207da:	681b      	ldr	r3, [r3, #0]
 80207dc:	461a      	mov	r2, r3
 80207de:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80207e2:	f5a3 63b8 	sub.w	r3, r3, #1472	; 0x5c0
 80207e6:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 80207e8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80207ec:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 80207f0:	681b      	ldr	r3, [r3, #0]
 80207f2:	681b      	ldr	r3, [r3, #0]
 80207f4:	1d1a      	adds	r2, r3, #4
 80207f6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80207fa:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 80207fe:	681b      	ldr	r3, [r3, #0]
 8020800:	601a      	str	r2, [r3, #0]
    return (val);
 8020802:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020806:	f5a3 63b8 	sub.w	r3, r3, #1472	; 0x5c0
 802080a:	681b      	ldr	r3, [r3, #0]
            val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 802080c:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 8020810:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 8020814:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020818:	f2a3 5314 	subw	r3, r3, #1300	; 0x514
 802081c:	601a      	str	r2, [r3, #0]
 802081e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020822:	f5a3 63a3 	sub.w	r3, r3, #1304	; 0x518
 8020826:	2208      	movs	r2, #8
 8020828:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 802082a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 802082e:	f5a3 63a3 	sub.w	r3, r3, #1304	; 0x518
 8020832:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8020836:	f5a2 62a3 	sub.w	r2, r2, #1304	; 0x518
 802083a:	6812      	ldr	r2, [r2, #0]
 802083c:	f002 021f 	and.w	r2, r2, #31
 8020840:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 8020842:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020846:	f5a3 63a3 	sub.w	r3, r3, #1304	; 0x518
 802084a:	681b      	ldr	r3, [r3, #0]
 802084c:	2b00      	cmp	r3, #0
 802084e:	d105      	bne.n	802085c <arm_nn_vec_mat_mult_t_s8+0x1c84>
    return op1;
 8020850:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020854:	f2a3 5314 	subw	r3, r3, #1300	; 0x514
 8020858:	681b      	ldr	r3, [r3, #0]
 802085a:	e00b      	b.n	8020874 <arm_nn_vec_mat_mult_t_s8+0x1c9c>
  return (op1 >> op2) | (op1 << (32U - op2));
 802085c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020860:	f2a3 5214 	subw	r2, r3, #1300	; 0x514
 8020864:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020868:	f5a3 63a3 	sub.w	r3, r3, #1304	; 0x518
 802086c:	6812      	ldr	r2, [r2, #0]
 802086e:	681b      	ldr	r3, [r3, #0]
 8020870:	fa62 f303 	ror.w	r3, r2, r3
 8020874:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8020878:	f5a2 62a1 	sub.w	r2, r2, #1288	; 0x508
 802087c:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 8020880:	6011      	str	r1, [r2, #0]
 8020882:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8020886:	f2a2 520c 	subw	r2, r2, #1292	; 0x50c
 802088a:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 802088c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020890:	f5a3 63a1 	sub.w	r3, r3, #1288	; 0x508
 8020894:	681b      	ldr	r3, [r3, #0]
 8020896:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 802089a:	f2a2 520c 	subw	r2, r2, #1292	; 0x50c
 802089e:	6812      	ldr	r2, [r2, #0]
 80208a0:	fa23 f282 	sxtab16	r2, r3, r2
 80208a4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80208a8:	f5a3 63a2 	sub.w	r3, r3, #1296	; 0x510
 80208ac:	601a      	str	r2, [r3, #0]
  return(result);
 80208ae:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80208b2:	f5a3 63a2 	sub.w	r3, r3, #1296	; 0x510
 80208b6:	681b      	ldr	r3, [r3, #0]
 80208b8:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val3 = __SXTAB16(lhs_offset_s16x2, val2);
 80208bc:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 80208c0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80208c4:	f2a3 43fc 	subw	r3, r3, #1276	; 0x4fc
 80208c8:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 80208cc:	6019      	str	r1, [r3, #0]
 80208ce:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80208d2:	f5a3 63a0 	sub.w	r3, r3, #1280	; 0x500
 80208d6:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80208d8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80208dc:	f2a3 43fc 	subw	r3, r3, #1276	; 0x4fc
 80208e0:	681b      	ldr	r3, [r3, #0]
 80208e2:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80208e6:	f5a2 62a0 	sub.w	r2, r2, #1280	; 0x500
 80208ea:	6812      	ldr	r2, [r2, #0]
 80208ec:	fa23 f282 	sxtab16	r2, r3, r2
 80208f0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80208f4:	f2a3 5304 	subw	r3, r3, #1284	; 0x504
 80208f8:	601a      	str	r2, [r3, #0]
  return(result);
 80208fa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80208fe:	f2a3 5304 	subw	r3, r3, #1284	; 0x504
 8020902:	681b      	ldr	r3, [r3, #0]
 8020904:	f8c7 35d8 	str.w	r3, [r7, #1496]	; 0x5d8
            val2 = __SXTAB16(lhs_offset_s16x2, __ROR(val2, 8));
 8020908:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 802090c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020910:	f2a3 43f4 	subw	r3, r3, #1268	; 0x4f4
 8020914:	601a      	str	r2, [r3, #0]
 8020916:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 802091a:	f5a3 639f 	sub.w	r3, r3, #1272	; 0x4f8
 802091e:	2208      	movs	r2, #8
 8020920:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 8020922:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020926:	f5a3 639f 	sub.w	r3, r3, #1272	; 0x4f8
 802092a:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 802092e:	f5a2 629f 	sub.w	r2, r2, #1272	; 0x4f8
 8020932:	6812      	ldr	r2, [r2, #0]
 8020934:	f002 021f 	and.w	r2, r2, #31
 8020938:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 802093a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 802093e:	f5a3 639f 	sub.w	r3, r3, #1272	; 0x4f8
 8020942:	681b      	ldr	r3, [r3, #0]
 8020944:	2b00      	cmp	r3, #0
 8020946:	d105      	bne.n	8020954 <arm_nn_vec_mat_mult_t_s8+0x1d7c>
    return op1;
 8020948:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 802094c:	f2a3 43f4 	subw	r3, r3, #1268	; 0x4f4
 8020950:	681b      	ldr	r3, [r3, #0]
 8020952:	e00b      	b.n	802096c <arm_nn_vec_mat_mult_t_s8+0x1d94>
  return (op1 >> op2) | (op1 << (32U - op2));
 8020954:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020958:	f2a3 42f4 	subw	r2, r3, #1268	; 0x4f4
 802095c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020960:	f5a3 639f 	sub.w	r3, r3, #1272	; 0x4f8
 8020964:	6812      	ldr	r2, [r2, #0]
 8020966:	681b      	ldr	r3, [r3, #0]
 8020968:	fa62 f303 	ror.w	r3, r2, r3
 802096c:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8020970:	f5a2 629d 	sub.w	r2, r2, #1256	; 0x4e8
 8020974:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 8020978:	6011      	str	r1, [r2, #0]
 802097a:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 802097e:	f2a2 42ec 	subw	r2, r2, #1260	; 0x4ec
 8020982:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8020984:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020988:	f5a3 639d 	sub.w	r3, r3, #1256	; 0x4e8
 802098c:	681b      	ldr	r3, [r3, #0]
 802098e:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8020992:	f2a2 42ec 	subw	r2, r2, #1260	; 0x4ec
 8020996:	6812      	ldr	r2, [r2, #0]
 8020998:	fa23 f282 	sxtab16	r2, r3, r2
 802099c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80209a0:	f5a3 639e 	sub.w	r3, r3, #1264	; 0x4f0
 80209a4:	601a      	str	r2, [r3, #0]
  return(result);
 80209a6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80209aa:	f5a3 639e 	sub.w	r3, r3, #1264	; 0x4f0
 80209ae:	681b      	ldr	r3, [r3, #0]
 80209b0:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc

            // Partial accumulations
            res00 = __SMLAD(val3, val1, res00);
 80209b4:	f8d7 05d8 	ldr.w	r0, [r7, #1496]	; 0x5d8
 80209b8:	f8d7 15e0 	ldr.w	r1, [r7, #1504]	; 0x5e0
 80209bc:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 80209c0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80209c4:	f5a3 639b 	sub.w	r3, r3, #1240	; 0x4d8
 80209c8:	6018      	str	r0, [r3, #0]
 80209ca:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80209ce:	f2a3 43dc 	subw	r3, r3, #1244	; 0x4dc
 80209d2:	6019      	str	r1, [r3, #0]
 80209d4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80209d8:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 80209dc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80209de:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80209e2:	f5a3 639b 	sub.w	r3, r3, #1240	; 0x4d8
 80209e6:	681b      	ldr	r3, [r3, #0]
 80209e8:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80209ec:	f2a2 42dc 	subw	r2, r2, #1244	; 0x4dc
 80209f0:	6812      	ldr	r2, [r2, #0]
 80209f2:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 80209f6:	f5a1 619c 	sub.w	r1, r1, #1248	; 0x4e0
 80209fa:	6809      	ldr	r1, [r1, #0]
 80209fc:	fb23 1202 	smlad	r2, r3, r2, r1
 8020a00:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020a04:	f2a3 43e4 	subw	r3, r3, #1252	; 0x4e4
 8020a08:	601a      	str	r2, [r3, #0]
  return(result);
 8020a0a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020a0e:	f2a3 43e4 	subw	r3, r3, #1252	; 0x4e4
 8020a12:	681b      	ldr	r3, [r3, #0]
 8020a14:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
            res00 = __SMLAD(val2, val0, res00);
 8020a18:	f8d7 05dc 	ldr.w	r0, [r7, #1500]	; 0x5dc
 8020a1c:	f8d7 15e4 	ldr.w	r1, [r7, #1508]	; 0x5e4
 8020a20:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 8020a24:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020a28:	f5a3 6399 	sub.w	r3, r3, #1224	; 0x4c8
 8020a2c:	6018      	str	r0, [r3, #0]
 8020a2e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020a32:	f2a3 43cc 	subw	r3, r3, #1228	; 0x4cc
 8020a36:	6019      	str	r1, [r3, #0]
 8020a38:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020a3c:	f5a3 639a 	sub.w	r3, r3, #1232	; 0x4d0
 8020a40:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8020a42:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020a46:	f5a3 6399 	sub.w	r3, r3, #1224	; 0x4c8
 8020a4a:	681b      	ldr	r3, [r3, #0]
 8020a4c:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8020a50:	f2a2 42cc 	subw	r2, r2, #1228	; 0x4cc
 8020a54:	6812      	ldr	r2, [r2, #0]
 8020a56:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 8020a5a:	f5a1 619a 	sub.w	r1, r1, #1232	; 0x4d0
 8020a5e:	6809      	ldr	r1, [r1, #0]
 8020a60:	fb23 1202 	smlad	r2, r3, r2, r1
 8020a64:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020a68:	f2a3 43d4 	subw	r3, r3, #1236	; 0x4d4
 8020a6c:	601a      	str	r2, [r3, #0]
  return(result);
 8020a6e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020a72:	f2a3 43d4 	subw	r3, r3, #1236	; 0x4d4
 8020a76:	681b      	ldr	r3, [r3, #0]
 8020a78:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
 8020a7c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020a80:	f2a3 43c4 	subw	r3, r3, #1220	; 0x4c4
 8020a84:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8020a88:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 8020a8a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020a8e:	f2a3 43c4 	subw	r3, r3, #1220	; 0x4c4
 8020a92:	681b      	ldr	r3, [r3, #0]
 8020a94:	681b      	ldr	r3, [r3, #0]
 8020a96:	681b      	ldr	r3, [r3, #0]
 8020a98:	461a      	mov	r2, r3
 8020a9a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020a9e:	f2a3 53c4 	subw	r3, r3, #1476	; 0x5c4
 8020aa2:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8020aa4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020aa8:	f2a3 43c4 	subw	r3, r3, #1220	; 0x4c4
 8020aac:	681b      	ldr	r3, [r3, #0]
 8020aae:	681b      	ldr	r3, [r3, #0]
 8020ab0:	1d1a      	adds	r2, r3, #4
 8020ab2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020ab6:	f2a3 43c4 	subw	r3, r3, #1220	; 0x4c4
 8020aba:	681b      	ldr	r3, [r3, #0]
 8020abc:	601a      	str	r2, [r3, #0]
    return (val);
 8020abe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020ac2:	f2a3 53c4 	subw	r3, r3, #1476	; 0x5c4
 8020ac6:	681b      	ldr	r3, [r3, #0]

            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 8020ac8:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val1 = __SXTAB16(rhs_offset_s16x2, val0);
 8020acc:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 8020ad0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020ad4:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 8020ad8:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 8020adc:	6019      	str	r1, [r3, #0]
 8020ade:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020ae2:	f2a3 43bc 	subw	r3, r3, #1212	; 0x4bc
 8020ae6:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8020ae8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020aec:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 8020af0:	681b      	ldr	r3, [r3, #0]
 8020af2:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8020af6:	f2a2 42bc 	subw	r2, r2, #1212	; 0x4bc
 8020afa:	6812      	ldr	r2, [r2, #0]
 8020afc:	fa23 f282 	sxtab16	r2, r3, r2
 8020b00:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020b04:	f5a3 6398 	sub.w	r3, r3, #1216	; 0x4c0
 8020b08:	601a      	str	r2, [r3, #0]
  return(result);
 8020b0a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020b0e:	f5a3 6398 	sub.w	r3, r3, #1216	; 0x4c0
 8020b12:	681b      	ldr	r3, [r3, #0]
 8020b14:	f8c7 35e0 	str.w	r3, [r7, #1504]	; 0x5e0
 8020b18:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020b1c:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 8020b20:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8020b24:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 8020b26:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020b2a:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 8020b2e:	681b      	ldr	r3, [r3, #0]
 8020b30:	681b      	ldr	r3, [r3, #0]
 8020b32:	681b      	ldr	r3, [r3, #0]
 8020b34:	461a      	mov	r2, r3
 8020b36:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020b3a:	f5a3 63b9 	sub.w	r3, r3, #1480	; 0x5c8
 8020b3e:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8020b40:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020b44:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 8020b48:	681b      	ldr	r3, [r3, #0]
 8020b4a:	681b      	ldr	r3, [r3, #0]
 8020b4c:	1d1a      	adds	r2, r3, #4
 8020b4e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020b52:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 8020b56:	681b      	ldr	r3, [r3, #0]
 8020b58:	601a      	str	r2, [r3, #0]
    return (val);
 8020b5a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020b5e:	f5a3 63b9 	sub.w	r3, r3, #1480	; 0x5c8
 8020b62:	681b      	ldr	r3, [r3, #0]
            val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 8020b64:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 8020b68:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 8020b6c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020b70:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 8020b74:	601a      	str	r2, [r3, #0]
 8020b76:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020b7a:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 8020b7e:	2208      	movs	r2, #8
 8020b80:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 8020b82:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020b86:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 8020b8a:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8020b8e:	f5a2 6296 	sub.w	r2, r2, #1200	; 0x4b0
 8020b92:	6812      	ldr	r2, [r2, #0]
 8020b94:	f002 021f 	and.w	r2, r2, #31
 8020b98:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 8020b9a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020b9e:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 8020ba2:	681b      	ldr	r3, [r3, #0]
 8020ba4:	2b00      	cmp	r3, #0
 8020ba6:	d105      	bne.n	8020bb4 <arm_nn_vec_mat_mult_t_s8+0x1fdc>
    return op1;
 8020ba8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020bac:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 8020bb0:	681b      	ldr	r3, [r3, #0]
 8020bb2:	e00b      	b.n	8020bcc <arm_nn_vec_mat_mult_t_s8+0x1ff4>
  return (op1 >> op2) | (op1 << (32U - op2));
 8020bb4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020bb8:	f2a3 42ac 	subw	r2, r3, #1196	; 0x4ac
 8020bbc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020bc0:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 8020bc4:	6812      	ldr	r2, [r2, #0]
 8020bc6:	681b      	ldr	r3, [r3, #0]
 8020bc8:	fa62 f303 	ror.w	r3, r2, r3
 8020bcc:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8020bd0:	f5a2 6294 	sub.w	r2, r2, #1184	; 0x4a0
 8020bd4:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 8020bd8:	6011      	str	r1, [r2, #0]
 8020bda:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8020bde:	f2a2 42a4 	subw	r2, r2, #1188	; 0x4a4
 8020be2:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8020be4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020be8:	f5a3 6394 	sub.w	r3, r3, #1184	; 0x4a0
 8020bec:	681b      	ldr	r3, [r3, #0]
 8020bee:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8020bf2:	f2a2 42a4 	subw	r2, r2, #1188	; 0x4a4
 8020bf6:	6812      	ldr	r2, [r2, #0]
 8020bf8:	fa23 f282 	sxtab16	r2, r3, r2
 8020bfc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020c00:	f5a3 6395 	sub.w	r3, r3, #1192	; 0x4a8
 8020c04:	601a      	str	r2, [r3, #0]
  return(result);
 8020c06:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020c0a:	f5a3 6395 	sub.w	r3, r3, #1192	; 0x4a8
 8020c0e:	681b      	ldr	r3, [r3, #0]
 8020c10:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val3 = __SXTAB16(lhs_offset_s16x2, val2);
 8020c14:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 8020c18:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020c1c:	f2a3 4394 	subw	r3, r3, #1172	; 0x494
 8020c20:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 8020c24:	6019      	str	r1, [r3, #0]
 8020c26:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020c2a:	f5a3 6393 	sub.w	r3, r3, #1176	; 0x498
 8020c2e:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8020c30:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020c34:	f2a3 4394 	subw	r3, r3, #1172	; 0x494
 8020c38:	681b      	ldr	r3, [r3, #0]
 8020c3a:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8020c3e:	f5a2 6293 	sub.w	r2, r2, #1176	; 0x498
 8020c42:	6812      	ldr	r2, [r2, #0]
 8020c44:	fa23 f282 	sxtab16	r2, r3, r2
 8020c48:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020c4c:	f2a3 439c 	subw	r3, r3, #1180	; 0x49c
 8020c50:	601a      	str	r2, [r3, #0]
  return(result);
 8020c52:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020c56:	f2a3 439c 	subw	r3, r3, #1180	; 0x49c
 8020c5a:	681b      	ldr	r3, [r3, #0]
 8020c5c:	f8c7 35d8 	str.w	r3, [r7, #1496]	; 0x5d8
            val2 = __SXTAB16(lhs_offset_s16x2, __ROR(val2, 8));
 8020c60:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 8020c64:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020c68:	f2a3 438c 	subw	r3, r3, #1164	; 0x48c
 8020c6c:	601a      	str	r2, [r3, #0]
 8020c6e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020c72:	f5a3 6392 	sub.w	r3, r3, #1168	; 0x490
 8020c76:	2208      	movs	r2, #8
 8020c78:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 8020c7a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020c7e:	f5a3 6392 	sub.w	r3, r3, #1168	; 0x490
 8020c82:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8020c86:	f5a2 6292 	sub.w	r2, r2, #1168	; 0x490
 8020c8a:	6812      	ldr	r2, [r2, #0]
 8020c8c:	f002 021f 	and.w	r2, r2, #31
 8020c90:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 8020c92:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020c96:	f5a3 6392 	sub.w	r3, r3, #1168	; 0x490
 8020c9a:	681b      	ldr	r3, [r3, #0]
 8020c9c:	2b00      	cmp	r3, #0
 8020c9e:	d105      	bne.n	8020cac <arm_nn_vec_mat_mult_t_s8+0x20d4>
    return op1;
 8020ca0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020ca4:	f2a3 438c 	subw	r3, r3, #1164	; 0x48c
 8020ca8:	681b      	ldr	r3, [r3, #0]
 8020caa:	e00b      	b.n	8020cc4 <arm_nn_vec_mat_mult_t_s8+0x20ec>
  return (op1 >> op2) | (op1 << (32U - op2));
 8020cac:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020cb0:	f2a3 428c 	subw	r2, r3, #1164	; 0x48c
 8020cb4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020cb8:	f5a3 6392 	sub.w	r3, r3, #1168	; 0x490
 8020cbc:	6812      	ldr	r2, [r2, #0]
 8020cbe:	681b      	ldr	r3, [r3, #0]
 8020cc0:	fa62 f303 	ror.w	r3, r2, r3
 8020cc4:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8020cc8:	f5a2 6290 	sub.w	r2, r2, #1152	; 0x480
 8020ccc:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 8020cd0:	6011      	str	r1, [r2, #0]
 8020cd2:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8020cd6:	f2a2 4284 	subw	r2, r2, #1156	; 0x484
 8020cda:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8020cdc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020ce0:	f5a3 6390 	sub.w	r3, r3, #1152	; 0x480
 8020ce4:	681b      	ldr	r3, [r3, #0]
 8020ce6:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8020cea:	f2a2 4284 	subw	r2, r2, #1156	; 0x484
 8020cee:	6812      	ldr	r2, [r2, #0]
 8020cf0:	fa23 f282 	sxtab16	r2, r3, r2
 8020cf4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020cf8:	f5a3 6391 	sub.w	r3, r3, #1160	; 0x488
 8020cfc:	601a      	str	r2, [r3, #0]
  return(result);
 8020cfe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020d02:	f5a3 6391 	sub.w	r3, r3, #1160	; 0x488
 8020d06:	681b      	ldr	r3, [r3, #0]
 8020d08:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc

            // Partial accumulations
            res00 = __SMLAD(val3, val1, res00);
 8020d0c:	f8d7 05d8 	ldr.w	r0, [r7, #1496]	; 0x5d8
 8020d10:	f8d7 15e0 	ldr.w	r1, [r7, #1504]	; 0x5e0
 8020d14:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 8020d18:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020d1c:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 8020d20:	6018      	str	r0, [r3, #0]
 8020d22:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020d26:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 8020d2a:	6019      	str	r1, [r3, #0]
 8020d2c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020d30:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 8020d34:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8020d36:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020d3a:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 8020d3e:	681b      	ldr	r3, [r3, #0]
 8020d40:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8020d44:	f2a2 4274 	subw	r2, r2, #1140	; 0x474
 8020d48:	6812      	ldr	r2, [r2, #0]
 8020d4a:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 8020d4e:	f5a1 618f 	sub.w	r1, r1, #1144	; 0x478
 8020d52:	6809      	ldr	r1, [r1, #0]
 8020d54:	fb23 1202 	smlad	r2, r3, r2, r1
 8020d58:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020d5c:	f2a3 437c 	subw	r3, r3, #1148	; 0x47c
 8020d60:	601a      	str	r2, [r3, #0]
  return(result);
 8020d62:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020d66:	f2a3 437c 	subw	r3, r3, #1148	; 0x47c
 8020d6a:	681b      	ldr	r3, [r3, #0]
 8020d6c:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
            res00 = __SMLAD(val2, val0, res00);
 8020d70:	f8d7 05dc 	ldr.w	r0, [r7, #1500]	; 0x5dc
 8020d74:	f8d7 15e4 	ldr.w	r1, [r7, #1508]	; 0x5e4
 8020d78:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 8020d7c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020d80:	f5a3 638c 	sub.w	r3, r3, #1120	; 0x460
 8020d84:	6018      	str	r0, [r3, #0]
 8020d86:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020d8a:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8020d8e:	6019      	str	r1, [r3, #0]
 8020d90:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020d94:	f5a3 638d 	sub.w	r3, r3, #1128	; 0x468
 8020d98:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8020d9a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020d9e:	f5a3 638c 	sub.w	r3, r3, #1120	; 0x460
 8020da2:	681b      	ldr	r3, [r3, #0]
 8020da4:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8020da8:	f2a2 4264 	subw	r2, r2, #1124	; 0x464
 8020dac:	6812      	ldr	r2, [r2, #0]
 8020dae:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 8020db2:	f5a1 618d 	sub.w	r1, r1, #1128	; 0x468
 8020db6:	6809      	ldr	r1, [r1, #0]
 8020db8:	fb23 1202 	smlad	r2, r3, r2, r1
 8020dbc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020dc0:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 8020dc4:	601a      	str	r2, [r3, #0]
  return(result);
 8020dc6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020dca:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 8020dce:	681b      	ldr	r3, [r3, #0]
 8020dd0:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
 8020dd4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020dd8:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 8020ddc:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8020de0:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 8020de2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020de6:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 8020dea:	681b      	ldr	r3, [r3, #0]
 8020dec:	681b      	ldr	r3, [r3, #0]
 8020dee:	681b      	ldr	r3, [r3, #0]
 8020df0:	461a      	mov	r2, r3
 8020df2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020df6:	f2a3 53cc 	subw	r3, r3, #1484	; 0x5cc
 8020dfa:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8020dfc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020e00:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 8020e04:	681b      	ldr	r3, [r3, #0]
 8020e06:	681b      	ldr	r3, [r3, #0]
 8020e08:	1d1a      	adds	r2, r3, #4
 8020e0a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020e0e:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 8020e12:	681b      	ldr	r3, [r3, #0]
 8020e14:	601a      	str	r2, [r3, #0]
    return (val);
 8020e16:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020e1a:	f2a3 53cc 	subw	r3, r3, #1484	; 0x5cc
 8020e1e:	681b      	ldr	r3, [r3, #0]

            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 8020e20:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val1 = __SXTAB16(rhs_offset_s16x2, val0);
 8020e24:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 8020e28:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020e2c:	f5a3 638a 	sub.w	r3, r3, #1104	; 0x450
 8020e30:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 8020e34:	6019      	str	r1, [r3, #0]
 8020e36:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020e3a:	f2a3 4354 	subw	r3, r3, #1108	; 0x454
 8020e3e:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8020e40:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020e44:	f5a3 638a 	sub.w	r3, r3, #1104	; 0x450
 8020e48:	681b      	ldr	r3, [r3, #0]
 8020e4a:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8020e4e:	f2a2 4254 	subw	r2, r2, #1108	; 0x454
 8020e52:	6812      	ldr	r2, [r2, #0]
 8020e54:	fa23 f282 	sxtab16	r2, r3, r2
 8020e58:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020e5c:	f5a3 638b 	sub.w	r3, r3, #1112	; 0x458
 8020e60:	601a      	str	r2, [r3, #0]
  return(result);
 8020e62:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020e66:	f5a3 638b 	sub.w	r3, r3, #1112	; 0x458
 8020e6a:	681b      	ldr	r3, [r3, #0]
 8020e6c:	f8c7 35e0 	str.w	r3, [r7, #1504]	; 0x5e0
 8020e70:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020e74:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 8020e78:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8020e7c:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 8020e7e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020e82:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 8020e86:	681b      	ldr	r3, [r3, #0]
 8020e88:	681b      	ldr	r3, [r3, #0]
 8020e8a:	681b      	ldr	r3, [r3, #0]
 8020e8c:	461a      	mov	r2, r3
 8020e8e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020e92:	f5a3 63ba 	sub.w	r3, r3, #1488	; 0x5d0
 8020e96:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8020e98:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020e9c:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 8020ea0:	681b      	ldr	r3, [r3, #0]
 8020ea2:	681b      	ldr	r3, [r3, #0]
 8020ea4:	1d1a      	adds	r2, r3, #4
 8020ea6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020eaa:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 8020eae:	681b      	ldr	r3, [r3, #0]
 8020eb0:	601a      	str	r2, [r3, #0]
    return (val);
 8020eb2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020eb6:	f5a3 63ba 	sub.w	r3, r3, #1488	; 0x5d0
 8020eba:	681b      	ldr	r3, [r3, #0]
            val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 8020ebc:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 8020ec0:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 8020ec4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020ec8:	f2a3 4344 	subw	r3, r3, #1092	; 0x444
 8020ecc:	601a      	str	r2, [r3, #0]
 8020ece:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020ed2:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 8020ed6:	2208      	movs	r2, #8
 8020ed8:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 8020eda:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020ede:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 8020ee2:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8020ee6:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 8020eea:	6812      	ldr	r2, [r2, #0]
 8020eec:	f002 021f 	and.w	r2, r2, #31
 8020ef0:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 8020ef2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020ef6:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 8020efa:	681b      	ldr	r3, [r3, #0]
 8020efc:	2b00      	cmp	r3, #0
 8020efe:	d105      	bne.n	8020f0c <arm_nn_vec_mat_mult_t_s8+0x2334>
    return op1;
 8020f00:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020f04:	f2a3 4344 	subw	r3, r3, #1092	; 0x444
 8020f08:	681b      	ldr	r3, [r3, #0]
 8020f0a:	e00b      	b.n	8020f24 <arm_nn_vec_mat_mult_t_s8+0x234c>
  return (op1 >> op2) | (op1 << (32U - op2));
 8020f0c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020f10:	f2a3 4244 	subw	r2, r3, #1092	; 0x444
 8020f14:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020f18:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 8020f1c:	6812      	ldr	r2, [r2, #0]
 8020f1e:	681b      	ldr	r3, [r3, #0]
 8020f20:	fa62 f303 	ror.w	r3, r2, r3
 8020f24:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8020f28:	f5a2 6287 	sub.w	r2, r2, #1080	; 0x438
 8020f2c:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 8020f30:	6011      	str	r1, [r2, #0]
 8020f32:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8020f36:	f2a2 423c 	subw	r2, r2, #1084	; 0x43c
 8020f3a:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8020f3c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020f40:	f5a3 6387 	sub.w	r3, r3, #1080	; 0x438
 8020f44:	681b      	ldr	r3, [r3, #0]
 8020f46:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8020f4a:	f2a2 423c 	subw	r2, r2, #1084	; 0x43c
 8020f4e:	6812      	ldr	r2, [r2, #0]
 8020f50:	fa23 f282 	sxtab16	r2, r3, r2
 8020f54:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020f58:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 8020f5c:	601a      	str	r2, [r3, #0]
  return(result);
 8020f5e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020f62:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 8020f66:	681b      	ldr	r3, [r3, #0]
 8020f68:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val3 = __SXTAB16(lhs_offset_s16x2, val2);
 8020f6c:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 8020f70:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020f74:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 8020f78:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 8020f7c:	6019      	str	r1, [r3, #0]
 8020f7e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020f82:	f5a3 6386 	sub.w	r3, r3, #1072	; 0x430
 8020f86:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8020f88:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020f8c:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 8020f90:	681b      	ldr	r3, [r3, #0]
 8020f92:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8020f96:	f5a2 6286 	sub.w	r2, r2, #1072	; 0x430
 8020f9a:	6812      	ldr	r2, [r2, #0]
 8020f9c:	fa23 f282 	sxtab16	r2, r3, r2
 8020fa0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020fa4:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 8020fa8:	601a      	str	r2, [r3, #0]
  return(result);
 8020faa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020fae:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 8020fb2:	681b      	ldr	r3, [r3, #0]
 8020fb4:	f8c7 35d8 	str.w	r3, [r7, #1496]	; 0x5d8
            val2 = __SXTAB16(lhs_offset_s16x2, __ROR(val2, 8));
 8020fb8:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 8020fbc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020fc0:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 8020fc4:	601a      	str	r2, [r3, #0]
 8020fc6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020fca:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 8020fce:	2208      	movs	r2, #8
 8020fd0:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 8020fd2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020fd6:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 8020fda:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8020fde:	f5a2 6285 	sub.w	r2, r2, #1064	; 0x428
 8020fe2:	6812      	ldr	r2, [r2, #0]
 8020fe4:	f002 021f 	and.w	r2, r2, #31
 8020fe8:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 8020fea:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020fee:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 8020ff2:	681b      	ldr	r3, [r3, #0]
 8020ff4:	2b00      	cmp	r3, #0
 8020ff6:	d105      	bne.n	8021004 <arm_nn_vec_mat_mult_t_s8+0x242c>
    return op1;
 8020ff8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8020ffc:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 8021000:	681b      	ldr	r3, [r3, #0]
 8021002:	e00b      	b.n	802101c <arm_nn_vec_mat_mult_t_s8+0x2444>
  return (op1 >> op2) | (op1 << (32U - op2));
 8021004:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8021008:	f2a3 4224 	subw	r2, r3, #1060	; 0x424
 802100c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8021010:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 8021014:	6812      	ldr	r2, [r2, #0]
 8021016:	681b      	ldr	r3, [r3, #0]
 8021018:	fa62 f303 	ror.w	r3, r2, r3
 802101c:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8021020:	f5a2 6283 	sub.w	r2, r2, #1048	; 0x418
 8021024:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 8021028:	6011      	str	r1, [r2, #0]
 802102a:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 802102e:	f2a2 421c 	subw	r2, r2, #1052	; 0x41c
 8021032:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8021034:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8021038:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 802103c:	681b      	ldr	r3, [r3, #0]
 802103e:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8021042:	f2a2 421c 	subw	r2, r2, #1052	; 0x41c
 8021046:	6812      	ldr	r2, [r2, #0]
 8021048:	fa23 f282 	sxtab16	r2, r3, r2
 802104c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8021050:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 8021054:	601a      	str	r2, [r3, #0]
  return(result);
 8021056:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 802105a:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 802105e:	681b      	ldr	r3, [r3, #0]
 8021060:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc

            // Partial accumulations
            res00 = __SMLAD(val3, val1, res00);
 8021064:	f8d7 05d8 	ldr.w	r0, [r7, #1496]	; 0x5d8
 8021068:	f8d7 15e0 	ldr.w	r1, [r7, #1504]	; 0x5e0
 802106c:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 8021070:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8021074:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8021078:	6018      	str	r0, [r3, #0]
 802107a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 802107e:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8021082:	6019      	str	r1, [r3, #0]
 8021084:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8021088:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 802108c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 802108e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8021092:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8021096:	681b      	ldr	r3, [r3, #0]
 8021098:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 802109c:	f2a2 420c 	subw	r2, r2, #1036	; 0x40c
 80210a0:	6812      	ldr	r2, [r2, #0]
 80210a2:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 80210a6:	f5a1 6182 	sub.w	r1, r1, #1040	; 0x410
 80210aa:	6809      	ldr	r1, [r1, #0]
 80210ac:	fb23 1202 	smlad	r2, r3, r2, r1
 80210b0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80210b4:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 80210b8:	601a      	str	r2, [r3, #0]
  return(result);
 80210ba:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80210be:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 80210c2:	681b      	ldr	r3, [r3, #0]
 80210c4:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
            res00 = __SMLAD(val2, val0, res00);
 80210c8:	f8d7 05dc 	ldr.w	r0, [r7, #1500]	; 0x5dc
 80210cc:	f8d7 15e4 	ldr.w	r1, [r7, #1508]	; 0x5e4
 80210d0:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 80210d4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80210d8:	f5a3 737e 	sub.w	r3, r3, #1016	; 0x3f8
 80210dc:	6018      	str	r0, [r3, #0]
 80210de:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80210e2:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 80210e6:	6019      	str	r1, [r3, #0]
 80210e8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80210ec:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80210f0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80210f2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80210f6:	f5a3 737e 	sub.w	r3, r3, #1016	; 0x3f8
 80210fa:	681b      	ldr	r3, [r3, #0]
 80210fc:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8021100:	f5a2 727f 	sub.w	r2, r2, #1020	; 0x3fc
 8021104:	6812      	ldr	r2, [r2, #0]
 8021106:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 802110a:	f5a1 6180 	sub.w	r1, r1, #1024	; 0x400
 802110e:	6809      	ldr	r1, [r1, #0]
 8021110:	fb23 1202 	smlad	r2, r3, r2, r1
 8021114:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8021118:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 802111c:	601a      	str	r2, [r3, #0]
  return(result);
 802111e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8021122:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8021126:	681b      	ldr	r3, [r3, #0]
 8021128:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
 802112c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8021130:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 8021134:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8021138:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 802113a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 802113e:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 8021142:	681b      	ldr	r3, [r3, #0]
 8021144:	681b      	ldr	r3, [r3, #0]
 8021146:	681b      	ldr	r3, [r3, #0]
 8021148:	461a      	mov	r2, r3
 802114a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 802114e:	f2a3 53d4 	subw	r3, r3, #1492	; 0x5d4
 8021152:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8021154:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8021158:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 802115c:	681b      	ldr	r3, [r3, #0]
 802115e:	681b      	ldr	r3, [r3, #0]
 8021160:	1d1a      	adds	r2, r3, #4
 8021162:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8021166:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 802116a:	681b      	ldr	r3, [r3, #0]
 802116c:	601a      	str	r2, [r3, #0]
    return (val);
 802116e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8021172:	f2a3 53d4 	subw	r3, r3, #1492	; 0x5d4
 8021176:	681b      	ldr	r3, [r3, #0]

            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 8021178:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val1 = __SXTAB16(rhs_offset_s16x2, val0);
 802117c:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 8021180:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8021184:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8021188:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 802118c:	6019      	str	r1, [r3, #0]
 802118e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8021192:	f5a3 737b 	sub.w	r3, r3, #1004	; 0x3ec
 8021196:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8021198:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 802119c:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80211a0:	681b      	ldr	r3, [r3, #0]
 80211a2:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80211a6:	f5a2 727b 	sub.w	r2, r2, #1004	; 0x3ec
 80211aa:	6812      	ldr	r2, [r2, #0]
 80211ac:	fa23 f282 	sxtab16	r2, r3, r2
 80211b0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80211b4:	f5a3 737c 	sub.w	r3, r3, #1008	; 0x3f0
 80211b8:	601a      	str	r2, [r3, #0]
  return(result);
 80211ba:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80211be:	f5a3 737c 	sub.w	r3, r3, #1008	; 0x3f0
 80211c2:	681b      	ldr	r3, [r3, #0]
 80211c4:	f8c7 35e0 	str.w	r3, [r7, #1504]	; 0x5e0
 80211c8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80211cc:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 80211d0:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80211d4:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 80211d6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80211da:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 80211de:	681b      	ldr	r3, [r3, #0]
 80211e0:	681b      	ldr	r3, [r3, #0]
 80211e2:	681b      	ldr	r3, [r3, #0]
 80211e4:	461a      	mov	r2, r3
 80211e6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80211ea:	f5a3 63bb 	sub.w	r3, r3, #1496	; 0x5d8
 80211ee:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 80211f0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80211f4:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 80211f8:	681b      	ldr	r3, [r3, #0]
 80211fa:	681b      	ldr	r3, [r3, #0]
 80211fc:	1d1a      	adds	r2, r3, #4
 80211fe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8021202:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8021206:	681b      	ldr	r3, [r3, #0]
 8021208:	601a      	str	r2, [r3, #0]
    return (val);
 802120a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 802120e:	f5a3 63bb 	sub.w	r3, r3, #1496	; 0x5d8
 8021212:	681b      	ldr	r3, [r3, #0]
            val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 8021214:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 8021218:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 802121c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8021220:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8021224:	601a      	str	r2, [r3, #0]
 8021226:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 802122a:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 802122e:	2208      	movs	r2, #8
 8021230:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 8021232:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8021236:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 802123a:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 802123e:	f5a2 7278 	sub.w	r2, r2, #992	; 0x3e0
 8021242:	6812      	ldr	r2, [r2, #0]
 8021244:	f002 021f 	and.w	r2, r2, #31
 8021248:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 802124a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 802124e:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8021252:	681b      	ldr	r3, [r3, #0]
 8021254:	2b00      	cmp	r3, #0
 8021256:	d105      	bne.n	8021264 <arm_nn_vec_mat_mult_t_s8+0x268c>
    return op1;
 8021258:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 802125c:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8021260:	681b      	ldr	r3, [r3, #0]
 8021262:	e00b      	b.n	802127c <arm_nn_vec_mat_mult_t_s8+0x26a4>
  return (op1 >> op2) | (op1 << (32U - op2));
 8021264:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8021268:	f5a3 7277 	sub.w	r2, r3, #988	; 0x3dc
 802126c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8021270:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8021274:	6812      	ldr	r2, [r2, #0]
 8021276:	681b      	ldr	r3, [r3, #0]
 8021278:	fa62 f303 	ror.w	r3, r2, r3
 802127c:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8021280:	f5a2 7274 	sub.w	r2, r2, #976	; 0x3d0
 8021284:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 8021288:	6011      	str	r1, [r2, #0]
 802128a:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 802128e:	f5a2 7275 	sub.w	r2, r2, #980	; 0x3d4
 8021292:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8021294:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8021298:	f5a3 7374 	sub.w	r3, r3, #976	; 0x3d0
 802129c:	681b      	ldr	r3, [r3, #0]
 802129e:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80212a2:	f5a2 7275 	sub.w	r2, r2, #980	; 0x3d4
 80212a6:	6812      	ldr	r2, [r2, #0]
 80212a8:	fa23 f282 	sxtab16	r2, r3, r2
 80212ac:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80212b0:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 80212b4:	601a      	str	r2, [r3, #0]
  return(result);
 80212b6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80212ba:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 80212be:	681b      	ldr	r3, [r3, #0]
 80212c0:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val3 = __SXTAB16(lhs_offset_s16x2, val2);
 80212c4:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 80212c8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80212cc:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 80212d0:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 80212d4:	6019      	str	r1, [r3, #0]
 80212d6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80212da:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 80212de:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80212e0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80212e4:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 80212e8:	681b      	ldr	r3, [r3, #0]
 80212ea:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80212ee:	f5a2 7272 	sub.w	r2, r2, #968	; 0x3c8
 80212f2:	6812      	ldr	r2, [r2, #0]
 80212f4:	fa23 f282 	sxtab16	r2, r3, r2
 80212f8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80212fc:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8021300:	601a      	str	r2, [r3, #0]
  return(result);
 8021302:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8021306:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 802130a:	681b      	ldr	r3, [r3, #0]
 802130c:	f8c7 35d8 	str.w	r3, [r7, #1496]	; 0x5d8
            val2 = __SXTAB16(lhs_offset_s16x2, __ROR(val2, 8));
 8021310:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 8021314:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8021318:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 802131c:	601a      	str	r2, [r3, #0]
 802131e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8021322:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 8021326:	2208      	movs	r2, #8
 8021328:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 802132a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 802132e:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 8021332:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8021336:	f5a2 7270 	sub.w	r2, r2, #960	; 0x3c0
 802133a:	6812      	ldr	r2, [r2, #0]
 802133c:	f002 021f 	and.w	r2, r2, #31
 8021340:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 8021342:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8021346:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 802134a:	681b      	ldr	r3, [r3, #0]
 802134c:	2b00      	cmp	r3, #0
 802134e:	d105      	bne.n	802135c <arm_nn_vec_mat_mult_t_s8+0x2784>
    return op1;
 8021350:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8021354:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 8021358:	681b      	ldr	r3, [r3, #0]
 802135a:	e00b      	b.n	8021374 <arm_nn_vec_mat_mult_t_s8+0x279c>
  return (op1 >> op2) | (op1 << (32U - op2));
 802135c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8021360:	f5a3 726f 	sub.w	r2, r3, #956	; 0x3bc
 8021364:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8021368:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 802136c:	6812      	ldr	r2, [r2, #0]
 802136e:	681b      	ldr	r3, [r3, #0]
 8021370:	fa62 f303 	ror.w	r3, r2, r3
 8021374:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8021378:	f5a2 726c 	sub.w	r2, r2, #944	; 0x3b0
 802137c:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 8021380:	6011      	str	r1, [r2, #0]
 8021382:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8021386:	f5a2 726d 	sub.w	r2, r2, #948	; 0x3b4
 802138a:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 802138c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8021390:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 8021394:	681b      	ldr	r3, [r3, #0]
 8021396:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 802139a:	f5a2 726d 	sub.w	r2, r2, #948	; 0x3b4
 802139e:	6812      	ldr	r2, [r2, #0]
 80213a0:	fa23 f282 	sxtab16	r2, r3, r2
 80213a4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80213a8:	f5a3 736e 	sub.w	r3, r3, #952	; 0x3b8
 80213ac:	601a      	str	r2, [r3, #0]
  return(result);
 80213ae:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80213b2:	f5a3 736e 	sub.w	r3, r3, #952	; 0x3b8
 80213b6:	681b      	ldr	r3, [r3, #0]
 80213b8:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc

            // Partial accumulations
            res00 = __SMLAD(val3, val1, res00);
 80213bc:	f8d7 05d8 	ldr.w	r0, [r7, #1496]	; 0x5d8
 80213c0:	f8d7 15e0 	ldr.w	r1, [r7, #1504]	; 0x5e0
 80213c4:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 80213c8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80213cc:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 80213d0:	6018      	str	r0, [r3, #0]
 80213d2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80213d6:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 80213da:	6019      	str	r1, [r3, #0]
 80213dc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80213e0:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 80213e4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80213e6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80213ea:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 80213ee:	681b      	ldr	r3, [r3, #0]
 80213f0:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80213f4:	f5a2 7269 	sub.w	r2, r2, #932	; 0x3a4
 80213f8:	6812      	ldr	r2, [r2, #0]
 80213fa:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 80213fe:	f5a1 716a 	sub.w	r1, r1, #936	; 0x3a8
 8021402:	6809      	ldr	r1, [r1, #0]
 8021404:	fb23 1202 	smlad	r2, r3, r2, r1
 8021408:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 802140c:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 8021410:	601a      	str	r2, [r3, #0]
  return(result);
 8021412:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8021416:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 802141a:	681b      	ldr	r3, [r3, #0]
 802141c:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
            res00 = __SMLAD(val2, val0, res00);
 8021420:	f8d7 05dc 	ldr.w	r0, [r7, #1500]	; 0x5dc
 8021424:	f8d7 15e4 	ldr.w	r1, [r7, #1508]	; 0x5e4
 8021428:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 802142c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8021430:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 8021434:	6018      	str	r0, [r3, #0]
 8021436:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 802143a:	f5a3 7365 	sub.w	r3, r3, #916	; 0x394
 802143e:	6019      	str	r1, [r3, #0]
 8021440:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8021444:	f5a3 7366 	sub.w	r3, r3, #920	; 0x398
 8021448:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 802144a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 802144e:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 8021452:	681b      	ldr	r3, [r3, #0]
 8021454:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8021458:	f5a2 7265 	sub.w	r2, r2, #916	; 0x394
 802145c:	6812      	ldr	r2, [r2, #0]
 802145e:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 8021462:	f5a1 7166 	sub.w	r1, r1, #920	; 0x398
 8021466:	6809      	ldr	r1, [r1, #0]
 8021468:	fb23 1202 	smlad	r2, r3, r2, r1
 802146c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8021470:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 8021474:	601a      	str	r2, [r3, #0]
  return(result);
 8021476:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 802147a:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 802147e:	681b      	ldr	r3, [r3, #0]
 8021480:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 8021484:	f8d7 3618 	ldr.w	r3, [r7, #1560]	; 0x618
 8021488:	3310      	adds	r3, #16
 802148a:	f8c7 3618 	str.w	r3, [r7, #1560]	; 0x618
 802148e:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8021492:	3b0f      	subs	r3, #15
 8021494:	f8d7 2618 	ldr.w	r2, [r7, #1560]	; 0x618
 8021498:	429a      	cmp	r2, r3
 802149a:	f6ff a943 	blt.w	8020724 <arm_nn_vec_mat_mult_t_s8+0x1b4c>
        }

        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 802149e:	e03f      	b.n	8021520 <arm_nn_vec_mat_mult_t_s8+0x2948>
        {
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 80214a0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80214a4:	f5a3 63b6 	sub.w	r3, r3, #1456	; 0x5b0
 80214a8:	681b      	ldr	r3, [r3, #0]
 80214aa:	f993 3000 	ldrsb.w	r3, [r3]
 80214ae:	461a      	mov	r2, r3
 80214b0:	f8d7 3654 	ldr.w	r3, [r7, #1620]	; 0x654
 80214b4:	4413      	add	r3, r2
 80214b6:	f8c7 35ec 	str.w	r3, [r7, #1516]	; 0x5ec
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
 80214ba:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80214be:	f2a3 53ac 	subw	r3, r3, #1452	; 0x5ac
 80214c2:	681b      	ldr	r3, [r3, #0]
 80214c4:	f993 3000 	ldrsb.w	r3, [r3]
 80214c8:	461a      	mov	r2, r3
 80214ca:	f8d7 3650 	ldr.w	r3, [r7, #1616]	; 0x650
 80214ce:	4413      	add	r3, r2
 80214d0:	f8c7 35e8 	str.w	r3, [r7, #1512]	; 0x5e8

            res00 += lhs_value * rhs_value0;
 80214d4:	f8d7 35e8 	ldr.w	r3, [r7, #1512]	; 0x5e8
 80214d8:	f8d7 25ec 	ldr.w	r2, [r7, #1516]	; 0x5ec
 80214dc:	fb02 f303 	mul.w	r3, r2, r3
 80214e0:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 80214e4:	4413      	add	r3, r2
 80214e6:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c

            ++rhs_ptr;
 80214ea:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80214ee:	f5a3 63b6 	sub.w	r3, r3, #1456	; 0x5b0
 80214f2:	681b      	ldr	r3, [r3, #0]
 80214f4:	1c5a      	adds	r2, r3, #1
 80214f6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80214fa:	f5a3 63b6 	sub.w	r3, r3, #1456	; 0x5b0
 80214fe:	601a      	str	r2, [r3, #0]
            ++lhs_ptr;
 8021500:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8021504:	f2a3 53ac 	subw	r3, r3, #1452	; 0x5ac
 8021508:	681b      	ldr	r3, [r3, #0]
 802150a:	1c5a      	adds	r2, r3, #1
 802150c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8021510:	f2a3 53ac 	subw	r3, r3, #1452	; 0x5ac
 8021514:	601a      	str	r2, [r3, #0]
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 8021516:	f8d7 3618 	ldr.w	r3, [r7, #1560]	; 0x618
 802151a:	3301      	adds	r3, #1
 802151c:	f8c7 3618 	str.w	r3, [r7, #1560]	; 0x618
 8021520:	f8d7 2618 	ldr.w	r2, [r7, #1560]	; 0x618
 8021524:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8021528:	429a      	cmp	r2, r3
 802152a:	dbb9      	blt.n	80214a0 <arm_nn_vec_mat_mult_t_s8+0x28c8>
 802152c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8021530:	f5a3 63a6 	sub.w	r3, r3, #1328	; 0x530
 8021534:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 8021538:	601a      	str	r2, [r3, #0]
 802153a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 802153e:	f2a3 5334 	subw	r3, r3, #1332	; 0x534
 8021542:	f8d7 265c 	ldr.w	r2, [r7, #1628]	; 0x65c
 8021546:	601a      	str	r2, [r3, #0]
 8021548:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 802154c:	f5a3 63a7 	sub.w	r3, r3, #1336	; 0x538
 8021550:	f8d7 2660 	ldr.w	r2, [r7, #1632]	; 0x660
 8021554:	601a      	str	r2, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8021556:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 802155a:	f5a3 63a7 	sub.w	r3, r3, #1336	; 0x538
 802155e:	681b      	ldr	r3, [r3, #0]
 8021560:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8021564:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8021568:	f5a2 62a6 	sub.w	r2, r2, #1328	; 0x530
 802156c:	6812      	ldr	r2, [r2, #0]
 802156e:	409a      	lsls	r2, r3
 8021570:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8021574:	f2a3 533c 	subw	r3, r3, #1340	; 0x53c
 8021578:	601a      	str	r2, [r3, #0]
 802157a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 802157e:	f5a3 63a8 	sub.w	r3, r3, #1344	; 0x540
 8021582:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8021586:	f2a2 5234 	subw	r2, r2, #1332	; 0x534
 802158a:	6812      	ldr	r2, [r2, #0]
 802158c:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 802158e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8021592:	f2a3 5344 	subw	r3, r3, #1348	; 0x544
 8021596:	2200      	movs	r2, #0
 8021598:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 802159a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 802159e:	461a      	mov	r2, r3
 80215a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80215a4:	f842 3c08 	str.w	r3, [r2, #-8]
    mult.word.high = 0;
 80215a8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80215ac:	461a      	mov	r2, r3
 80215ae:	2300      	movs	r3, #0
 80215b0:	f842 3c04 	str.w	r3, [r2, #-4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 80215b4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80215b8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80215bc:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 80215c0:	f2a1 513c 	subw	r1, r1, #1340	; 0x53c
 80215c4:	6809      	ldr	r1, [r1, #0]
 80215c6:	17c8      	asrs	r0, r1, #31
 80215c8:	6139      	str	r1, [r7, #16]
 80215ca:	6178      	str	r0, [r7, #20]
 80215cc:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 80215d0:	f5a1 61a8 	sub.w	r1, r1, #1344	; 0x540
 80215d4:	6809      	ldr	r1, [r1, #0]
 80215d6:	17c8      	asrs	r0, r1, #31
 80215d8:	60b9      	str	r1, [r7, #8]
 80215da:	60f8      	str	r0, [r7, #12]
 80215dc:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 80215e0:	4631      	mov	r1, r6
 80215e2:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80215e6:	4650      	mov	r0, sl
 80215e8:	fb00 f001 	mul.w	r0, r0, r1
 80215ec:	4659      	mov	r1, fp
 80215ee:	462c      	mov	r4, r5
 80215f0:	fb04 f101 	mul.w	r1, r4, r1
 80215f4:	4401      	add	r1, r0
 80215f6:	4628      	mov	r0, r5
 80215f8:	4654      	mov	r4, sl
 80215fa:	fba0 8904 	umull	r8, r9, r0, r4
 80215fe:	4449      	add	r1, r9
 8021600:	4689      	mov	r9, r1
 8021602:	eb12 0108 	adds.w	r1, r2, r8
 8021606:	6039      	str	r1, [r7, #0]
 8021608:	eb43 0309 	adc.w	r3, r3, r9
 802160c:	607b      	str	r3, [r7, #4]
 802160e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8021612:	e9d7 1200 	ldrd	r1, r2, [r7]
 8021616:	e943 1202 	strd	r1, r2, [r3, #-8]
    result = (int32_t)(mult.long_long >> 31);
 802161a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 802161e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8021622:	f04f 0200 	mov.w	r2, #0
 8021626:	f04f 0300 	mov.w	r3, #0
 802162a:	0fc2      	lsrs	r2, r0, #31
 802162c:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8021630:	17cb      	asrs	r3, r1, #31
 8021632:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 8021636:	f2a1 5144 	subw	r1, r1, #1348	; 0x544
 802163a:	4613      	mov	r3, r2
 802163c:	600b      	str	r3, [r1, #0]
    return result;
 802163e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8021642:	f2a3 5344 	subw	r3, r3, #1348	; 0x544
 8021646:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8021648:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 802164c:	f5a3 63a7 	sub.w	r3, r3, #1336	; 0x538
 8021650:	681b      	ldr	r3, [r3, #0]
 8021652:	2b00      	cmp	r3, #0
 8021654:	dc06      	bgt.n	8021664 <arm_nn_vec_mat_mult_t_s8+0x2a8c>
 8021656:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 802165a:	f5a3 63a7 	sub.w	r3, r3, #1336	; 0x538
 802165e:	681b      	ldr	r3, [r3, #0]
 8021660:	425b      	negs	r3, r3
 8021662:	e000      	b.n	8021666 <arm_nn_vec_mat_mult_t_s8+0x2a8e>
 8021664:	2300      	movs	r3, #0
 8021666:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 802166a:	f5a2 62a9 	sub.w	r2, r2, #1352	; 0x548
 802166e:	6011      	str	r1, [r2, #0]
 8021670:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8021674:	f2a2 524c 	subw	r2, r2, #1356	; 0x54c
 8021678:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 802167a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 802167e:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8021682:	2200      	movs	r2, #0
 8021684:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8021686:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 802168a:	f2a3 534c 	subw	r3, r3, #1356	; 0x54c
 802168e:	2201      	movs	r2, #1
 8021690:	681b      	ldr	r3, [r3, #0]
 8021692:	409a      	lsls	r2, r3
 8021694:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8021698:	f2a3 5354 	subw	r3, r3, #1364	; 0x554
 802169c:	3a01      	subs	r2, #1
 802169e:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 80216a0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80216a4:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 80216a8:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80216ac:	f5a2 61a9 	sub.w	r1, r2, #1352	; 0x548
 80216b0:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80216b4:	f2a2 5254 	subw	r2, r2, #1364	; 0x554
 80216b8:	6809      	ldr	r1, [r1, #0]
 80216ba:	6812      	ldr	r2, [r2, #0]
 80216bc:	400a      	ands	r2, r1
 80216be:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 80216c0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80216c4:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 80216c8:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80216cc:	f5a2 61a9 	sub.w	r1, r2, #1352	; 0x548
 80216d0:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80216d4:	f2a2 524c 	subw	r2, r2, #1356	; 0x54c
 80216d8:	6809      	ldr	r1, [r1, #0]
 80216da:	6812      	ldr	r2, [r2, #0]
 80216dc:	fa41 f202 	asr.w	r2, r1, r2
 80216e0:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 80216e2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80216e6:	f2a3 535c 	subw	r3, r3, #1372	; 0x55c
 80216ea:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80216ee:	f2a2 5254 	subw	r2, r2, #1364	; 0x554
 80216f2:	6812      	ldr	r2, [r2, #0]
 80216f4:	1052      	asrs	r2, r2, #1
 80216f6:	601a      	str	r2, [r3, #0]
    if (result < 0)
 80216f8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80216fc:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8021700:	681b      	ldr	r3, [r3, #0]
 8021702:	2b00      	cmp	r3, #0
 8021704:	da0a      	bge.n	802171c <arm_nn_vec_mat_mult_t_s8+0x2b44>
        threshold++;
 8021706:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 802170a:	f2a3 535c 	subw	r3, r3, #1372	; 0x55c
 802170e:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8021712:	f2a2 525c 	subw	r2, r2, #1372	; 0x55c
 8021716:	6812      	ldr	r2, [r2, #0]
 8021718:	3201      	adds	r2, #1
 802171a:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 802171c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8021720:	f5a3 62ab 	sub.w	r2, r3, #1368	; 0x558
 8021724:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8021728:	f2a3 535c 	subw	r3, r3, #1372	; 0x55c
 802172c:	6812      	ldr	r2, [r2, #0]
 802172e:	681b      	ldr	r3, [r3, #0]
 8021730:	429a      	cmp	r2, r3
 8021732:	dd0a      	ble.n	802174a <arm_nn_vec_mat_mult_t_s8+0x2b72>
        result++;
 8021734:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8021738:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 802173c:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8021740:	f5a2 62aa 	sub.w	r2, r2, #1360	; 0x550
 8021744:	6812      	ldr	r2, [r2, #0]
 8021746:	3201      	adds	r2, #1
 8021748:	601a      	str	r2, [r3, #0]
    return result;
 802174a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 802174e:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8021752:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8021754:	bf00      	nop
        }

        // Quantize down
        res00 = arm_nn_requantize(res00, dst_multiplier, dst_shift);
 8021756:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c

        // Add offset
        res00 += dst_offset;
 802175a:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 802175e:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 8021762:	4413      	add	r3, r2
 8021764:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c

        // Clamp the result
        res00 = MAX(res00, activation_min);
 8021768:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 802176c:	f8d7 366c 	ldr.w	r3, [r7, #1644]	; 0x66c
 8021770:	4293      	cmp	r3, r2
 8021772:	bfb8      	it	lt
 8021774:	4613      	movlt	r3, r2
 8021776:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
        res00 = MIN(res00, activation_max);
 802177a:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 802177e:	f8d7 3670 	ldr.w	r3, [r7, #1648]	; 0x670
 8021782:	4293      	cmp	r3, r2
 8021784:	bfa8      	it	ge
 8021786:	4613      	movge	r3, r2
 8021788:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c

        *dst = (q7_t)res00;
 802178c:	f8d7 361c 	ldr.w	r3, [r7, #1564]	; 0x61c
 8021790:	b25a      	sxtb	r2, r3
 8021792:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8021796:	f5a3 63bd 	sub.w	r3, r3, #1512	; 0x5e8
 802179a:	681b      	ldr	r3, [r3, #0]
 802179c:	701a      	strb	r2, [r3, #0]

        *dst = (q7_t)res00;
    }
#endif

    return ARM_MATH_SUCCESS;
 802179e:	2300      	movs	r3, #0
}
 80217a0:	4618      	mov	r0, r3
 80217a2:	f507 67c6 	add.w	r7, r7, #1584	; 0x630
 80217a6:	46bd      	mov	sp, r7
 80217a8:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80217ac:	4770      	bx	lr

080217ae <arm_q7_to_q15_with_offset>:
 * @addtogroup nndata_convert
 * @{
 */

void arm_q7_to_q15_with_offset(const q7_t *src, q15_t *dst, uint32_t block_size, q15_t offset)
{
 80217ae:	b480      	push	{r7}
 80217b0:	b0a5      	sub	sp, #148	; 0x94
 80217b2:	af00      	add	r7, sp, #0
 80217b4:	60f8      	str	r0, [r7, #12]
 80217b6:	60b9      	str	r1, [r7, #8]
 80217b8:	607a      	str	r2, [r7, #4]
 80217ba:	807b      	strh	r3, [r7, #2]
    q31_t in_q15x2_2;
    q31_t out_q15x2_1;
    q31_t out_q15x2_2;

    /*loop unrolling */
    block_cnt = block_size >> 2;
 80217bc:	687b      	ldr	r3, [r7, #4]
 80217be:	089b      	lsrs	r3, r3, #2
 80217c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

    /* First part of the processing with loop unrolling.  Compute 4 outputs at a time. */
    const q31_t offset_q15x2 = __PKHBT(offset, offset, 16);
 80217c4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80217c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80217cc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80217d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80217d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80217d8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80217dc:	eac3 4302 	pkhbt	r3, r3, r2, lsl #16
 80217e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80217e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80217e8:	67fb      	str	r3, [r7, #124]	; 0x7c
    while (block_cnt > 0)
 80217ea:	e070      	b.n	80218ce <arm_q7_to_q15_with_offset+0x120>
 80217ec:	f107 030c 	add.w	r3, r7, #12
 80217f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    memcpy(&val, *in_q7, 4);
 80217f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80217f4:	681b      	ldr	r3, [r3, #0]
 80217f6:	681b      	ldr	r3, [r3, #0]
 80217f8:	613b      	str	r3, [r7, #16]
    *in_q7 += 4;
 80217fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80217fc:	681b      	ldr	r3, [r3, #0]
 80217fe:	1d1a      	adds	r2, r3, #4
 8021800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021802:	601a      	str	r2, [r3, #0]
    return (val);
 8021804:	693b      	ldr	r3, [r7, #16]
    {
        /* convert from q7 to q15 and then store the results in the destination buffer */
        in_q7x4 = arm_nn_read_q7x4_ia(&src);
 8021806:	67bb      	str	r3, [r7, #120]	; 0x78

        /* Extract and sign extend each of the four q7 values to q15 */
        in_q15x2_1 = __SXTAB16(offset_q15x2, __ROR(in_q7x4, 8));
 8021808:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 802180a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 802180c:	637b      	str	r3, [r7, #52]	; 0x34
 802180e:	2308      	movs	r3, #8
 8021810:	633b      	str	r3, [r7, #48]	; 0x30
  op2 %= 32U;
 8021812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021814:	f003 031f 	and.w	r3, r3, #31
 8021818:	633b      	str	r3, [r7, #48]	; 0x30
  if (op2 == 0U)
 802181a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802181c:	2b00      	cmp	r3, #0
 802181e:	d101      	bne.n	8021824 <arm_q7_to_q15_with_offset+0x76>
    return op1;
 8021820:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8021822:	e003      	b.n	802182c <arm_q7_to_q15_with_offset+0x7e>
  return (op1 >> op2) | (op1 << (32U - op2));
 8021824:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8021826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021828:	fa61 f303 	ror.w	r3, r1, r3
 802182c:	643a      	str	r2, [r7, #64]	; 0x40
 802182e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8021830:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8021832:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8021834:	fa23 f382 	sxtab16	r3, r3, r2
 8021838:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 802183a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802183c:	677b      	str	r3, [r7, #116]	; 0x74
        in_q15x2_2 = __SXTAB16(offset_q15x2, in_q7x4);
 802183e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8021840:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8021842:	64fa      	str	r2, [r7, #76]	; 0x4c
 8021844:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8021846:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8021848:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802184a:	fa23 f382 	sxtab16	r3, r3, r2
 802184e:	647b      	str	r3, [r7, #68]	; 0x44
  return(result);
 8021850:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8021852:	673b      	str	r3, [r7, #112]	; 0x70

        out_q15x2_2 = __PKHTB(in_q15x2_1, in_q15x2_2, 16);
 8021854:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8021856:	66fb      	str	r3, [r7, #108]	; 0x6c
 8021858:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 802185a:	66bb      	str	r3, [r7, #104]	; 0x68
 802185c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 802185e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8021860:	eac3 4322 	pkhtb	r3, r3, r2, asr #16
 8021864:	667b      	str	r3, [r7, #100]	; 0x64
 8021866:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8021868:	663b      	str	r3, [r7, #96]	; 0x60
        out_q15x2_1 = __PKHBT(in_q15x2_2, in_q15x2_1, 16);
 802186a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 802186c:	65fb      	str	r3, [r7, #92]	; 0x5c
 802186e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8021870:	65bb      	str	r3, [r7, #88]	; 0x58
 8021872:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8021874:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8021876:	eac3 4302 	pkhbt	r3, r3, r2, lsl #16
 802187a:	657b      	str	r3, [r7, #84]	; 0x54
 802187c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802187e:	653b      	str	r3, [r7, #80]	; 0x50
 8021880:	f107 0308 	add.w	r3, r7, #8
 8021884:	623b      	str	r3, [r7, #32]
 8021886:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8021888:	61fb      	str	r3, [r7, #28]
  @param[in]     src_q31   Input value to be written.
  @return        none
 */
__STATIC_FORCEINLINE void arm_nn_write_q15x2_ia(q15_t **dest_q15, q31_t src_q31)
{
    q31_t val = src_q31;
 802188a:	69fb      	ldr	r3, [r7, #28]
 802188c:	61bb      	str	r3, [r7, #24]

    memcpy(*dest_q15, &val, 4);
 802188e:	6a3b      	ldr	r3, [r7, #32]
 8021890:	681b      	ldr	r3, [r3, #0]
 8021892:	69ba      	ldr	r2, [r7, #24]
 8021894:	601a      	str	r2, [r3, #0]
    *dest_q15 += 2;
 8021896:	6a3b      	ldr	r3, [r7, #32]
 8021898:	681b      	ldr	r3, [r3, #0]
 802189a:	1d1a      	adds	r2, r3, #4
 802189c:	6a3b      	ldr	r3, [r7, #32]
 802189e:	601a      	str	r2, [r3, #0]
}
 80218a0:	bf00      	nop
 80218a2:	f107 0308 	add.w	r3, r7, #8
 80218a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80218a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80218aa:	627b      	str	r3, [r7, #36]	; 0x24
    q31_t val = src_q31;
 80218ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80218ae:	617b      	str	r3, [r7, #20]
    memcpy(*dest_q15, &val, 4);
 80218b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80218b2:	681b      	ldr	r3, [r3, #0]
 80218b4:	697a      	ldr	r2, [r7, #20]
 80218b6:	601a      	str	r2, [r3, #0]
    *dest_q15 += 2;
 80218b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80218ba:	681b      	ldr	r3, [r3, #0]
 80218bc:	1d1a      	adds	r2, r3, #4
 80218be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80218c0:	601a      	str	r2, [r3, #0]
}
 80218c2:	bf00      	nop

        arm_nn_write_q15x2_ia(&dst, out_q15x2_1);
        arm_nn_write_q15x2_ia(&dst, out_q15x2_2);

        block_cnt--;
 80218c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80218c8:	3b01      	subs	r3, #1
 80218ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    while (block_cnt > 0)
 80218ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80218d2:	2b00      	cmp	r3, #0
 80218d4:	dc8a      	bgt.n	80217ec <arm_q7_to_q15_with_offset+0x3e>
    }
    /* Handle left over samples */
    block_cnt = block_size % 0x4;
 80218d6:	687b      	ldr	r3, [r7, #4]
 80218d8:	f003 0303 	and.w	r3, r3, #3
 80218dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    /* Run the below code for Cortex-M0 */
    /* Loop over block_size number of values */
    block_cnt = block_size;
#endif

    while (block_cnt > 0)
 80218e0:	e012      	b.n	8021908 <arm_q7_to_q15_with_offset+0x15a>
    {
        *dst++ = (q15_t)*src++ + offset;
 80218e2:	68fb      	ldr	r3, [r7, #12]
 80218e4:	1c5a      	adds	r2, r3, #1
 80218e6:	60fa      	str	r2, [r7, #12]
 80218e8:	f993 3000 	ldrsb.w	r3, [r3]
 80218ec:	b29a      	uxth	r2, r3
 80218ee:	887b      	ldrh	r3, [r7, #2]
 80218f0:	4413      	add	r3, r2
 80218f2:	b299      	uxth	r1, r3
 80218f4:	68bb      	ldr	r3, [r7, #8]
 80218f6:	1c9a      	adds	r2, r3, #2
 80218f8:	60ba      	str	r2, [r7, #8]
 80218fa:	b20a      	sxth	r2, r1
 80218fc:	801a      	strh	r2, [r3, #0]

        /* Decrement the loop counter */
        block_cnt--;
 80218fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8021902:	3b01      	subs	r3, #1
 8021904:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    while (block_cnt > 0)
 8021908:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 802190c:	2b00      	cmp	r3, #0
 802190e:	dce8      	bgt.n	80218e2 <arm_q7_to_q15_with_offset+0x134>
    }
}
 8021910:	bf00      	nop
 8021912:	bf00      	nop
 8021914:	3794      	adds	r7, #148	; 0x94
 8021916:	46bd      	mov	sp, r7
 8021918:	f85d 7b04 	ldr.w	r7, [sp], #4
 802191c:	4770      	bx	lr

0802191e <arm_avgpool_s8_get_buffer_size>:
}

#endif /* ARM_MATH_MVEI */

int32_t arm_avgpool_s8_get_buffer_size(const int output_x, const int ch_src)
{
 802191e:	b480      	push	{r7}
 8021920:	b083      	sub	sp, #12
 8021922:	af00      	add	r7, sp, #0
 8021924:	6078      	str	r0, [r7, #4]
 8021926:	6039      	str	r1, [r7, #0]
    (void)output_x;

#if defined(ARM_MATH_DSP) && !defined(ARM_MATH_MVEI)
    return (ch_src * sizeof(int32_t));
 8021928:	683b      	ldr	r3, [r7, #0]
 802192a:	009b      	lsls	r3, r3, #2
#else
    (void)ch_src;
    return 0;
#endif
}
 802192c:	4618      	mov	r0, r3
 802192e:	370c      	adds	r7, #12
 8021930:	46bd      	mov	sp, r7
 8021932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021936:	4770      	bx	lr

08021938 <compare_and_replace_if_larger_q7>:

#include "edge-impulse-sdk/CMSIS/NN/Include/arm_nnfunctions.h"
#include "edge-impulse-sdk/CMSIS/NN/Include/arm_nnsupportfunctions.h"

static void compare_and_replace_if_larger_q7(q7_t *base, const q7_t *target, int32_t length)
{
 8021938:	b480      	push	{r7}
 802193a:	b091      	sub	sp, #68	; 0x44
 802193c:	af00      	add	r7, sp, #0
 802193e:	60f8      	str	r0, [r7, #12]
 8021940:	60b9      	str	r1, [r7, #8]
 8021942:	607a      	str	r2, [r7, #4]
        base += 16;
        target += 16;
        length -= 16;
    }
#else
    q7_t *dst = base;
 8021944:	68fb      	ldr	r3, [r7, #12]
 8021946:	62bb      	str	r3, [r7, #40]	; 0x28
    const q7_t *src = target;
 8021948:	68bb      	ldr	r3, [r7, #8]
 802194a:	627b      	str	r3, [r7, #36]	; 0x24
    union arm_nnword ref_max;
    union arm_nnword comp_max;
    int32_t cnt = length >> 2;
 802194c:	687b      	ldr	r3, [r7, #4]
 802194e:	109b      	asrs	r3, r3, #2
 8021950:	63fb      	str	r3, [r7, #60]	; 0x3c

    while (cnt > 0l)
 8021952:	e050      	b.n	80219f6 <compare_and_replace_if_larger_q7+0xbe>
    {
        ref_max.word = arm_nn_read_q7x4(dst);
 8021954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021956:	637b      	str	r3, [r7, #52]	; 0x34
 8021958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802195a:	681b      	ldr	r3, [r3, #0]
    memcpy(&val, in_q7, 4);
 802195c:	617b      	str	r3, [r7, #20]
    return (val);
 802195e:	697b      	ldr	r3, [r7, #20]
 8021960:	623b      	str	r3, [r7, #32]
 8021962:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8021966:	63bb      	str	r3, [r7, #56]	; 0x38
    memcpy(&val, *in_q7, 4);
 8021968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802196a:	681b      	ldr	r3, [r3, #0]
 802196c:	681b      	ldr	r3, [r3, #0]
 802196e:	613b      	str	r3, [r7, #16]
    *in_q7 += 4;
 8021970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8021972:	681b      	ldr	r3, [r3, #0]
 8021974:	1d1a      	adds	r2, r3, #4
 8021976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8021978:	601a      	str	r2, [r3, #0]
    return (val);
 802197a:	693b      	ldr	r3, [r7, #16]
        comp_max.word = arm_nn_read_q7x4_ia(&src);
 802197c:	61fb      	str	r3, [r7, #28]

        if (comp_max.bytes[0] > ref_max.bytes[0])
 802197e:	f997 201c 	ldrsb.w	r2, [r7, #28]
 8021982:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8021986:	429a      	cmp	r2, r3
 8021988:	dd03      	ble.n	8021992 <compare_and_replace_if_larger_q7+0x5a>
        {
            ref_max.bytes[0] = comp_max.bytes[0];
 802198a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 802198e:	f887 3020 	strb.w	r3, [r7, #32]
        }
        if (comp_max.bytes[1] > ref_max.bytes[1])
 8021992:	f997 201d 	ldrsb.w	r2, [r7, #29]
 8021996:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 802199a:	429a      	cmp	r2, r3
 802199c:	dd03      	ble.n	80219a6 <compare_and_replace_if_larger_q7+0x6e>
        {
            ref_max.bytes[1] = comp_max.bytes[1];
 802199e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80219a2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        }
        if (comp_max.bytes[2] > ref_max.bytes[2])
 80219a6:	f997 201e 	ldrsb.w	r2, [r7, #30]
 80219aa:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 80219ae:	429a      	cmp	r2, r3
 80219b0:	dd03      	ble.n	80219ba <compare_and_replace_if_larger_q7+0x82>
        {
            ref_max.bytes[2] = comp_max.bytes[2];
 80219b2:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80219b6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        }
        if (comp_max.bytes[3] > ref_max.bytes[3])
 80219ba:	f997 201f 	ldrsb.w	r2, [r7, #31]
 80219be:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80219c2:	429a      	cmp	r2, r3
 80219c4:	dd03      	ble.n	80219ce <compare_and_replace_if_larger_q7+0x96>
        {
            ref_max.bytes[3] = comp_max.bytes[3];
 80219c6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80219ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        }

        write_q7x4_ia(&dst, ref_max.word);
 80219ce:	6a3b      	ldr	r3, [r7, #32]
 80219d0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80219d4:	633a      	str	r2, [r7, #48]	; 0x30
 80219d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 */
__STATIC_FORCEINLINE void write_q7x4_ia (
  q7_t ** pQ7,
  q31_t   value)
{
  q31_t val = value;
 80219d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80219da:	61bb      	str	r3, [r7, #24]
#ifdef __ARM_FEATURE_UNALIGNED
  memcpy (*pQ7, &val, 4);
 80219dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80219de:	681b      	ldr	r3, [r3, #0]
 80219e0:	69ba      	ldr	r2, [r7, #24]
 80219e2:	601a      	str	r2, [r3, #0]
  (*pQ7)[1] = (val >> 8) & 0x0FF;
  (*pQ7)[2] = (val >> 16) & 0x0FF;
  (*pQ7)[3] = (val >> 24) & 0x0FF;

#endif
  *pQ7 += 4;
 80219e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80219e6:	681b      	ldr	r3, [r3, #0]
 80219e8:	1d1a      	adds	r2, r3, #4
 80219ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80219ec:	601a      	str	r2, [r3, #0]
}
 80219ee:	bf00      	nop

        cnt--;
 80219f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80219f2:	3b01      	subs	r3, #1
 80219f4:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (cnt > 0l)
 80219f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80219f8:	2b00      	cmp	r3, #0
 80219fa:	dcab      	bgt.n	8021954 <compare_and_replace_if_larger_q7+0x1c>
    }

    cnt = length & 0x3;
 80219fc:	687b      	ldr	r3, [r7, #4]
 80219fe:	f003 0303 	and.w	r3, r3, #3
 8021a02:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (cnt > 0l)
 8021a04:	e015      	b.n	8021a32 <compare_and_replace_if_larger_q7+0xfa>
    {
        if (*src > *dst)
 8021a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021a08:	f993 2000 	ldrsb.w	r2, [r3]
 8021a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021a0e:	f993 3000 	ldrsb.w	r3, [r3]
 8021a12:	429a      	cmp	r2, r3
 8021a14:	dd04      	ble.n	8021a20 <compare_and_replace_if_larger_q7+0xe8>
        {
            *dst = *src;
 8021a16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8021a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021a1a:	f992 2000 	ldrsb.w	r2, [r2]
 8021a1e:	701a      	strb	r2, [r3, #0]
        }
        dst++;
 8021a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021a22:	3301      	adds	r3, #1
 8021a24:	62bb      	str	r3, [r7, #40]	; 0x28
        src++;
 8021a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021a28:	3301      	adds	r3, #1
 8021a2a:	627b      	str	r3, [r7, #36]	; 0x24
        cnt--;
 8021a2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8021a2e:	3b01      	subs	r3, #1
 8021a30:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (cnt > 0l)
 8021a32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8021a34:	2b00      	cmp	r3, #0
 8021a36:	dce6      	bgt.n	8021a06 <compare_and_replace_if_larger_q7+0xce>
    }
#endif
}
 8021a38:	bf00      	nop
 8021a3a:	bf00      	nop
 8021a3c:	3744      	adds	r7, #68	; 0x44
 8021a3e:	46bd      	mov	sp, r7
 8021a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021a44:	4770      	bx	lr

08021a46 <clamp_output>:

static void clamp_output(q7_t *source, int32_t length, const int32_t act_min, const int32_t act_max)
{
 8021a46:	b480      	push	{r7}
 8021a48:	b08d      	sub	sp, #52	; 0x34
 8021a4a:	af00      	add	r7, sp, #0
 8021a4c:	60f8      	str	r0, [r7, #12]
 8021a4e:	60b9      	str	r1, [r7, #8]
 8021a50:	607a      	str	r2, [r7, #4]
 8021a52:	603b      	str	r3, [r7, #0]
        vstrbq_p_s8(source, res, p);
        source += 16;
    }
#else
    union arm_nnword in;
    int32_t cnt = length >> 2;
 8021a54:	68bb      	ldr	r3, [r7, #8]
 8021a56:	109b      	asrs	r3, r3, #2
 8021a58:	62fb      	str	r3, [r7, #44]	; 0x2c

    while (cnt > 0l)
 8021a5a:	e062      	b.n	8021b22 <clamp_output+0xdc>
    {
        in.word = arm_nn_read_q7x4(source);
 8021a5c:	68fb      	ldr	r3, [r7, #12]
 8021a5e:	61fb      	str	r3, [r7, #28]
 8021a60:	69fb      	ldr	r3, [r7, #28]
 8021a62:	681b      	ldr	r3, [r3, #0]
    memcpy(&val, in_q7, 4);
 8021a64:	617b      	str	r3, [r7, #20]
    return (val);
 8021a66:	697b      	ldr	r3, [r7, #20]
 8021a68:	61bb      	str	r3, [r7, #24]

        in.bytes[0] = MAX(in.bytes[0], act_min);
 8021a6a:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8021a6e:	461a      	mov	r2, r3
 8021a70:	687b      	ldr	r3, [r7, #4]
 8021a72:	4293      	cmp	r3, r2
 8021a74:	bfb8      	it	lt
 8021a76:	4613      	movlt	r3, r2
 8021a78:	b25b      	sxtb	r3, r3
 8021a7a:	763b      	strb	r3, [r7, #24]
        in.bytes[0] = MIN(in.bytes[0], act_max);
 8021a7c:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8021a80:	461a      	mov	r2, r3
 8021a82:	683b      	ldr	r3, [r7, #0]
 8021a84:	4293      	cmp	r3, r2
 8021a86:	bfa8      	it	ge
 8021a88:	4613      	movge	r3, r2
 8021a8a:	b25b      	sxtb	r3, r3
 8021a8c:	763b      	strb	r3, [r7, #24]
        in.bytes[1] = MAX(in.bytes[1], act_min);
 8021a8e:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8021a92:	461a      	mov	r2, r3
 8021a94:	687b      	ldr	r3, [r7, #4]
 8021a96:	4293      	cmp	r3, r2
 8021a98:	bfb8      	it	lt
 8021a9a:	4613      	movlt	r3, r2
 8021a9c:	b25b      	sxtb	r3, r3
 8021a9e:	767b      	strb	r3, [r7, #25]
        in.bytes[1] = MIN(in.bytes[1], act_max);
 8021aa0:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8021aa4:	461a      	mov	r2, r3
 8021aa6:	683b      	ldr	r3, [r7, #0]
 8021aa8:	4293      	cmp	r3, r2
 8021aaa:	bfa8      	it	ge
 8021aac:	4613      	movge	r3, r2
 8021aae:	b25b      	sxtb	r3, r3
 8021ab0:	767b      	strb	r3, [r7, #25]
        in.bytes[2] = MAX(in.bytes[2], act_min);
 8021ab2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8021ab6:	461a      	mov	r2, r3
 8021ab8:	687b      	ldr	r3, [r7, #4]
 8021aba:	4293      	cmp	r3, r2
 8021abc:	bfb8      	it	lt
 8021abe:	4613      	movlt	r3, r2
 8021ac0:	b25b      	sxtb	r3, r3
 8021ac2:	76bb      	strb	r3, [r7, #26]
        in.bytes[2] = MIN(in.bytes[2], act_max);
 8021ac4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8021ac8:	461a      	mov	r2, r3
 8021aca:	683b      	ldr	r3, [r7, #0]
 8021acc:	4293      	cmp	r3, r2
 8021ace:	bfa8      	it	ge
 8021ad0:	4613      	movge	r3, r2
 8021ad2:	b25b      	sxtb	r3, r3
 8021ad4:	76bb      	strb	r3, [r7, #26]
        in.bytes[3] = MAX(in.bytes[3], act_min);
 8021ad6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8021ada:	461a      	mov	r2, r3
 8021adc:	687b      	ldr	r3, [r7, #4]
 8021ade:	4293      	cmp	r3, r2
 8021ae0:	bfb8      	it	lt
 8021ae2:	4613      	movlt	r3, r2
 8021ae4:	b25b      	sxtb	r3, r3
 8021ae6:	76fb      	strb	r3, [r7, #27]
        in.bytes[3] = MIN(in.bytes[3], act_max);
 8021ae8:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8021aec:	461a      	mov	r2, r3
 8021aee:	683b      	ldr	r3, [r7, #0]
 8021af0:	4293      	cmp	r3, r2
 8021af2:	bfa8      	it	ge
 8021af4:	4613      	movge	r3, r2
 8021af6:	b25b      	sxtb	r3, r3
 8021af8:	76fb      	strb	r3, [r7, #27]

        write_q7x4_ia(&source, in.word);
 8021afa:	69bb      	ldr	r3, [r7, #24]
 8021afc:	f107 020c 	add.w	r2, r7, #12
 8021b00:	627a      	str	r2, [r7, #36]	; 0x24
 8021b02:	623b      	str	r3, [r7, #32]
  q31_t val = value;
 8021b04:	6a3b      	ldr	r3, [r7, #32]
 8021b06:	613b      	str	r3, [r7, #16]
  memcpy (*pQ7, &val, 4);
 8021b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021b0a:	681b      	ldr	r3, [r3, #0]
 8021b0c:	693a      	ldr	r2, [r7, #16]
 8021b0e:	601a      	str	r2, [r3, #0]
  *pQ7 += 4;
 8021b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021b12:	681b      	ldr	r3, [r3, #0]
 8021b14:	1d1a      	adds	r2, r3, #4
 8021b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021b18:	601a      	str	r2, [r3, #0]
}
 8021b1a:	bf00      	nop
        cnt--;
 8021b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021b1e:	3b01      	subs	r3, #1
 8021b20:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (cnt > 0l)
 8021b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021b24:	2b00      	cmp	r3, #0
 8021b26:	dc99      	bgt.n	8021a5c <clamp_output+0x16>
    }

    cnt = length & 0x3;
 8021b28:	68bb      	ldr	r3, [r7, #8]
 8021b2a:	f003 0303 	and.w	r3, r3, #3
 8021b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (cnt > 0l)
 8021b30:	e018      	b.n	8021b64 <clamp_output+0x11e>
    {
        int32_t comp = *source;
 8021b32:	68fb      	ldr	r3, [r7, #12]
 8021b34:	f993 3000 	ldrsb.w	r3, [r3]
 8021b38:	62bb      	str	r3, [r7, #40]	; 0x28
        comp = MAX(comp, act_min);
 8021b3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8021b3c:	687b      	ldr	r3, [r7, #4]
 8021b3e:	4293      	cmp	r3, r2
 8021b40:	bfb8      	it	lt
 8021b42:	4613      	movlt	r3, r2
 8021b44:	62bb      	str	r3, [r7, #40]	; 0x28
        comp = MIN(comp, act_max);
 8021b46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8021b48:	683b      	ldr	r3, [r7, #0]
 8021b4a:	4293      	cmp	r3, r2
 8021b4c:	bfa8      	it	ge
 8021b4e:	4613      	movge	r3, r2
 8021b50:	62bb      	str	r3, [r7, #40]	; 0x28
        *source++ = (int8_t)comp;
 8021b52:	68fb      	ldr	r3, [r7, #12]
 8021b54:	1c5a      	adds	r2, r3, #1
 8021b56:	60fa      	str	r2, [r7, #12]
 8021b58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8021b5a:	b252      	sxtb	r2, r2
 8021b5c:	701a      	strb	r2, [r3, #0]
        cnt--;
 8021b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021b60:	3b01      	subs	r3, #1
 8021b62:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (cnt > 0l)
 8021b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021b66:	2b00      	cmp	r3, #0
 8021b68:	dce3      	bgt.n	8021b32 <clamp_output+0xec>
    }
#endif
}
 8021b6a:	bf00      	nop
 8021b6c:	bf00      	nop
 8021b6e:	3734      	adds	r7, #52	; 0x34
 8021b70:	46bd      	mov	sp, r7
 8021b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021b76:	4770      	bx	lr

08021b78 <arm_max_pool_s8>:
                           const cmsis_nn_dims *input_dims,
                           const q7_t *src,
                           const cmsis_nn_dims *filter_dims,
                           const cmsis_nn_dims *output_dims,
                           q7_t *dst)
{
 8021b78:	b580      	push	{r7, lr}
 8021b7a:	b09e      	sub	sp, #120	; 0x78
 8021b7c:	af00      	add	r7, sp, #0
 8021b7e:	60f8      	str	r0, [r7, #12]
 8021b80:	60b9      	str	r1, [r7, #8]
 8021b82:	607a      	str	r2, [r7, #4]
 8021b84:	603b      	str	r3, [r7, #0]
    const int32_t input_y = input_dims->h;
 8021b86:	687b      	ldr	r3, [r7, #4]
 8021b88:	685b      	ldr	r3, [r3, #4]
 8021b8a:	65bb      	str	r3, [r7, #88]	; 0x58
    const int32_t input_x = input_dims->w;
 8021b8c:	687b      	ldr	r3, [r7, #4]
 8021b8e:	689b      	ldr	r3, [r3, #8]
 8021b90:	657b      	str	r3, [r7, #84]	; 0x54
    const int32_t output_y = output_dims->h;
 8021b92:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8021b96:	685b      	ldr	r3, [r3, #4]
 8021b98:	653b      	str	r3, [r7, #80]	; 0x50
    const int32_t output_x = output_dims->w;
 8021b9a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8021b9e:	689b      	ldr	r3, [r3, #8]
 8021ba0:	64fb      	str	r3, [r7, #76]	; 0x4c
    const int32_t stride_y = pool_params->stride.h;
 8021ba2:	68bb      	ldr	r3, [r7, #8]
 8021ba4:	685b      	ldr	r3, [r3, #4]
 8021ba6:	64bb      	str	r3, [r7, #72]	; 0x48
    const int32_t stride_x = pool_params->stride.w;
 8021ba8:	68bb      	ldr	r3, [r7, #8]
 8021baa:	681b      	ldr	r3, [r3, #0]
 8021bac:	647b      	str	r3, [r7, #68]	; 0x44
    const int32_t kernel_y = filter_dims->h;
 8021bae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8021bb2:	685b      	ldr	r3, [r3, #4]
 8021bb4:	643b      	str	r3, [r7, #64]	; 0x40
    const int32_t kernel_x = filter_dims->w;
 8021bb6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8021bba:	689b      	ldr	r3, [r3, #8]
 8021bbc:	63fb      	str	r3, [r7, #60]	; 0x3c
    const int32_t pad_y = pool_params->padding.h;
 8021bbe:	68bb      	ldr	r3, [r7, #8]
 8021bc0:	68db      	ldr	r3, [r3, #12]
 8021bc2:	63bb      	str	r3, [r7, #56]	; 0x38
    const int32_t pad_x = pool_params->padding.w;
 8021bc4:	68bb      	ldr	r3, [r7, #8]
 8021bc6:	689b      	ldr	r3, [r3, #8]
 8021bc8:	637b      	str	r3, [r7, #52]	; 0x34
    const int32_t act_min = pool_params->activation.min;
 8021bca:	68bb      	ldr	r3, [r7, #8]
 8021bcc:	691b      	ldr	r3, [r3, #16]
 8021bce:	633b      	str	r3, [r7, #48]	; 0x30
    const int32_t act_max = pool_params->activation.max;
 8021bd0:	68bb      	ldr	r3, [r7, #8]
 8021bd2:	695b      	ldr	r3, [r3, #20]
 8021bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const int32_t channel_in = input_dims->c;
 8021bd6:	687b      	ldr	r3, [r7, #4]
 8021bd8:	68db      	ldr	r3, [r3, #12]
 8021bda:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)ctx;
    q7_t *dst_base = dst;
 8021bdc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8021be0:	627b      	str	r3, [r7, #36]	; 0x24

    for (int i_y = 0, base_idx_y = -pad_y; i_y < output_y; base_idx_y += stride_y, i_y++)
 8021be2:	2300      	movs	r3, #0
 8021be4:	677b      	str	r3, [r7, #116]	; 0x74
 8021be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8021be8:	425b      	negs	r3, r3
 8021bea:	673b      	str	r3, [r7, #112]	; 0x70
 8021bec:	e078      	b.n	8021ce0 <arm_max_pool_s8+0x168>
    {
        for (int i_x = 0, base_idx_x = -pad_x; i_x < output_x; base_idx_x += stride_x, i_x++)
 8021bee:	2300      	movs	r3, #0
 8021bf0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8021bf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8021bf4:	425b      	negs	r3, r3
 8021bf6:	66bb      	str	r3, [r7, #104]	; 0x68
 8021bf8:	e067      	b.n	8021cca <arm_max_pool_s8+0x152>
        {
            /* Condition for kernel start dimension: (base_idx_<x,y> + kernel_<x,y>_start) >= 0 */
            const int32_t ker_y_start = MAX(0, -base_idx_y);
 8021bfa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8021bfc:	2b00      	cmp	r3, #0
 8021bfe:	dc02      	bgt.n	8021c06 <arm_max_pool_s8+0x8e>
 8021c00:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8021c02:	425b      	negs	r3, r3
 8021c04:	e000      	b.n	8021c08 <arm_max_pool_s8+0x90>
 8021c06:	2300      	movs	r3, #0
 8021c08:	623b      	str	r3, [r7, #32]
            const int32_t ker_x_start = MAX(0, -base_idx_x);
 8021c0a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8021c0c:	2b00      	cmp	r3, #0
 8021c0e:	dc02      	bgt.n	8021c16 <arm_max_pool_s8+0x9e>
 8021c10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8021c12:	425b      	negs	r3, r3
 8021c14:	e000      	b.n	8021c18 <arm_max_pool_s8+0xa0>
 8021c16:	2300      	movs	r3, #0
 8021c18:	61fb      	str	r3, [r7, #28]

            /* Condition for kernel end dimension: (base_idx_<x,y> + kernel_<x,y>_end) < dim_src_<width,height> */
            const int32_t kernel_y_end = MIN(kernel_y, input_y - base_idx_y);
 8021c1a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8021c1c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8021c1e:	1ad3      	subs	r3, r2, r3
 8021c20:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8021c22:	4293      	cmp	r3, r2
 8021c24:	bfa8      	it	ge
 8021c26:	4613      	movge	r3, r2
 8021c28:	61bb      	str	r3, [r7, #24]
            const int32_t kernel_x_end = MIN(kernel_x, input_x - base_idx_x);
 8021c2a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8021c2c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8021c2e:	1ad3      	subs	r3, r2, r3
 8021c30:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8021c32:	4293      	cmp	r3, r2
 8021c34:	bfa8      	it	ge
 8021c36:	4613      	movge	r3, r2
 8021c38:	617b      	str	r3, [r7, #20]

            int count = 0;
 8021c3a:	2300      	movs	r3, #0
 8021c3c:	667b      	str	r3, [r7, #100]	; 0x64

            for (int k_y = ker_y_start; k_y < kernel_y_end; k_y++)
 8021c3e:	6a3b      	ldr	r3, [r7, #32]
 8021c40:	663b      	str	r3, [r7, #96]	; 0x60
 8021c42:	e031      	b.n	8021ca8 <arm_max_pool_s8+0x130>
            {
                for (int k_x = ker_x_start; k_x < kernel_x_end; k_x++)
 8021c44:	69fb      	ldr	r3, [r7, #28]
 8021c46:	65fb      	str	r3, [r7, #92]	; 0x5c
 8021c48:	e027      	b.n	8021c9a <arm_max_pool_s8+0x122>
                {
                    const q7_t *start = src + channel_in * (k_x + base_idx_x + (k_y + base_idx_y) * input_x);
 8021c4a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8021c4c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8021c4e:	441a      	add	r2, r3
 8021c50:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8021c52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8021c54:	440b      	add	r3, r1
 8021c56:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8021c58:	fb01 f303 	mul.w	r3, r1, r3
 8021c5c:	4413      	add	r3, r2
 8021c5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8021c60:	fb02 f303 	mul.w	r3, r2, r3
 8021c64:	461a      	mov	r2, r3
 8021c66:	683b      	ldr	r3, [r7, #0]
 8021c68:	4413      	add	r3, r2
 8021c6a:	613b      	str	r3, [r7, #16]

                    if (count == 0)
 8021c6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8021c6e:	2b00      	cmp	r3, #0
 8021c70:	d10a      	bne.n	8021c88 <arm_max_pool_s8+0x110>
                    {
                        memcpy(dst, start, channel_in);
 8021c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021c74:	461a      	mov	r2, r3
 8021c76:	6939      	ldr	r1, [r7, #16]
 8021c78:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8021c7c:	f010 fa6c 	bl	8032158 <memcpy>
                        count++;
 8021c80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8021c82:	3301      	adds	r3, #1
 8021c84:	667b      	str	r3, [r7, #100]	; 0x64
 8021c86:	e005      	b.n	8021c94 <arm_max_pool_s8+0x11c>
                    }
                    else
                    {
                        compare_and_replace_if_larger_q7(dst, start, channel_in);
 8021c88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8021c8a:	6939      	ldr	r1, [r7, #16]
 8021c8c:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8021c90:	f7ff fe52 	bl	8021938 <compare_and_replace_if_larger_q7>
                for (int k_x = ker_x_start; k_x < kernel_x_end; k_x++)
 8021c94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8021c96:	3301      	adds	r3, #1
 8021c98:	65fb      	str	r3, [r7, #92]	; 0x5c
 8021c9a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8021c9c:	697b      	ldr	r3, [r7, #20]
 8021c9e:	429a      	cmp	r2, r3
 8021ca0:	dbd3      	blt.n	8021c4a <arm_max_pool_s8+0xd2>
            for (int k_y = ker_y_start; k_y < kernel_y_end; k_y++)
 8021ca2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8021ca4:	3301      	adds	r3, #1
 8021ca6:	663b      	str	r3, [r7, #96]	; 0x60
 8021ca8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8021caa:	69bb      	ldr	r3, [r7, #24]
 8021cac:	429a      	cmp	r2, r3
 8021cae:	dbc9      	blt.n	8021c44 <arm_max_pool_s8+0xcc>
                    }
                }
            }
            /* 'count' is expected to be non-zero here. */
            dst += channel_in;
 8021cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021cb2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8021cb6:	4413      	add	r3, r2
 8021cb8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (int i_x = 0, base_idx_x = -pad_x; i_x < output_x; base_idx_x += stride_x, i_x++)
 8021cbc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8021cbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8021cc0:	4413      	add	r3, r2
 8021cc2:	66bb      	str	r3, [r7, #104]	; 0x68
 8021cc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8021cc6:	3301      	adds	r3, #1
 8021cc8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8021cca:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8021ccc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8021cce:	429a      	cmp	r2, r3
 8021cd0:	db93      	blt.n	8021bfa <arm_max_pool_s8+0x82>
    for (int i_y = 0, base_idx_y = -pad_y; i_y < output_y; base_idx_y += stride_y, i_y++)
 8021cd2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8021cd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8021cd6:	4413      	add	r3, r2
 8021cd8:	673b      	str	r3, [r7, #112]	; 0x70
 8021cda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8021cdc:	3301      	adds	r3, #1
 8021cde:	677b      	str	r3, [r7, #116]	; 0x74
 8021ce0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8021ce2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8021ce4:	429a      	cmp	r2, r3
 8021ce6:	db82      	blt.n	8021bee <arm_max_pool_s8+0x76>
        }
    }

    clamp_output(dst_base, output_x * output_y * channel_in, act_min, act_max);
 8021ce8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8021cea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8021cec:	fb02 f303 	mul.w	r3, r2, r3
 8021cf0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8021cf2:	fb02 f103 	mul.w	r1, r2, r3
 8021cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021cf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8021cfa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8021cfc:	f7ff fea3 	bl	8021a46 <clamp_output>

    return ARM_MATH_SUCCESS;
 8021d00:	2300      	movs	r3, #0
}
 8021d02:	4618      	mov	r0, r3
 8021d04:	3778      	adds	r7, #120	; 0x78
 8021d06:	46bd      	mov	sp, r7
 8021d08:	bd80      	pop	{r7, pc}
 8021d0a:	0000      	movs	r0, r0
 8021d0c:	0000      	movs	r0, r0
	...

08021d10 <arm_softmax_s8>:
                    const int32_t row_size,
                    const int32_t mult,
                    const int32_t shift,
                    const int32_t diff_min,
                    int8_t *output)
{
 8021d10:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8021d14:	f6ad 1da8 	subw	sp, sp, #2472	; 0x9a8
 8021d18:	af00      	add	r7, sp, #0
 8021d1a:	f607 14a8 	addw	r4, r7, #2472	; 0x9a8
 8021d1e:	f5a4 7471 	sub.w	r4, r4, #964	; 0x3c4
 8021d22:	6020      	str	r0, [r4, #0]
 8021d24:	f607 10a8 	addw	r0, r7, #2472	; 0x9a8
 8021d28:	f5a0 7072 	sub.w	r0, r0, #968	; 0x3c8
 8021d2c:	6001      	str	r1, [r0, #0]
 8021d2e:	f607 11a8 	addw	r1, r7, #2472	; 0x9a8
 8021d32:	f5a1 7173 	sub.w	r1, r1, #972	; 0x3cc
 8021d36:	600a      	str	r2, [r1, #0]
 8021d38:	f607 12a8 	addw	r2, r7, #2472	; 0x9a8
 8021d3c:	f5a2 7274 	sub.w	r2, r2, #976	; 0x3d0
 8021d40:	6013      	str	r3, [r2, #0]

        input += row_size;
        output += row_size;
    }
#else
    const int32_t mask = (1 << shift);
 8021d42:	2201      	movs	r2, #1
 8021d44:	f8d7 39c8 	ldr.w	r3, [r7, #2504]	; 0x9c8
 8021d48:	fa02 f303 	lsl.w	r3, r2, r3
 8021d4c:	f8c7 3994 	str.w	r3, [r7, #2452]	; 0x994

    int32_t col = 0;
 8021d50:	2300      	movs	r3, #0
 8021d52:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
    int32_t row_idx;

    for (row_idx = 0; row_idx < num_rows; ++row_idx)
 8021d56:	2300      	movs	r3, #0
 8021d58:	f8c7 39a0 	str.w	r3, [r7, #2464]	; 0x9a0
 8021d5c:	f004 b863 	b.w	8025e26 <arm_softmax_s8+0x4116>
    {
        // Find the maximum value in order to ensure numerical stability
        int8_t max = *input;
 8021d60:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8021d64:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 8021d68:	681b      	ldr	r3, [r3, #0]
 8021d6a:	781b      	ldrb	r3, [r3, #0]
 8021d6c:	f887 399f 	strb.w	r3, [r7, #2463]	; 0x99f

        for (col = 1; col < row_size; ++col)
 8021d70:	2301      	movs	r3, #1
 8021d72:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
 8021d76:	e015      	b.n	8021da4 <arm_softmax_s8+0x94>
        {
            max = MAX(max, input[col]);
 8021d78:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 8021d7c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8021d80:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 8021d84:	681b      	ldr	r3, [r3, #0]
 8021d86:	4413      	add	r3, r2
 8021d88:	f993 2000 	ldrsb.w	r2, [r3]
 8021d8c:	f997 399f 	ldrsb.w	r3, [r7, #2463]	; 0x99f
 8021d90:	4293      	cmp	r3, r2
 8021d92:	bfb8      	it	lt
 8021d94:	4613      	movlt	r3, r2
 8021d96:	f887 399f 	strb.w	r3, [r7, #2463]	; 0x99f
        for (col = 1; col < row_size; ++col)
 8021d9a:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	; 0x9a4
 8021d9e:	3301      	adds	r3, #1
 8021da0:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
 8021da4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8021da8:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8021dac:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 8021db0:	681b      	ldr	r3, [r3, #0]
 8021db2:	429a      	cmp	r2, r3
 8021db4:	dbe0      	blt.n	8021d78 <arm_softmax_s8+0x68>
        }

        int32_t diff = 0;
 8021db6:	2300      	movs	r3, #0
 8021db8:	f8c7 3990 	str.w	r3, [r7, #2448]	; 0x990
        int32_t sum = 0;
 8021dbc:	2300      	movs	r3, #0
 8021dbe:	f8c7 3998 	str.w	r3, [r7, #2456]	; 0x998

        for (col = 0; col < row_size; ++col)
 8021dc2:	2300      	movs	r3, #0
 8021dc4:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
 8021dc8:	f001 ba24 	b.w	8023214 <arm_softmax_s8+0x1504>
        {
            diff = input[col] - max;
 8021dcc:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 8021dd0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8021dd4:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 8021dd8:	681b      	ldr	r3, [r3, #0]
 8021dda:	4413      	add	r3, r2
 8021ddc:	f993 3000 	ldrsb.w	r3, [r3]
 8021de0:	461a      	mov	r2, r3
 8021de2:	f997 399f 	ldrsb.w	r3, [r7, #2463]	; 0x99f
 8021de6:	1ad3      	subs	r3, r2, r3
 8021de8:	f8c7 3990 	str.w	r3, [r7, #2448]	; 0x990
            if (diff >= diff_min)
 8021dec:	f8d7 2990 	ldr.w	r2, [r7, #2448]	; 0x990
 8021df0:	f8d7 39cc 	ldr.w	r3, [r7, #2508]	; 0x9cc
 8021df4:	429a      	cmp	r2, r3
 8021df6:	f2c1 8208 	blt.w	802320a <arm_softmax_s8+0x14fa>
            {
                sum += DIV_POW2(EXP_ON_NEG(MUL_SAT(diff * mask, mult)), ACCUM_BITS);
 8021dfa:	f8d7 2990 	ldr.w	r2, [r7, #2448]	; 0x990
 8021dfe:	f8d7 3994 	ldr.w	r3, [r7, #2452]	; 0x994
 8021e02:	fb03 f202 	mul.w	r2, r3, r2
 8021e06:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8021e0a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8021e0e:	601a      	str	r2, [r3, #0]
 8021e10:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8021e14:	f5a3 72b0 	sub.w	r2, r3, #352	; 0x160
 8021e18:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8021e1c:	f5a3 7374 	sub.w	r3, r3, #976	; 0x3d0
 8021e20:	681b      	ldr	r3, [r3, #0]
 8021e22:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8021e24:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8021e28:	f5a3 72b2 	sub.w	r2, r3, #356	; 0x164
 8021e2c:	2300      	movs	r3, #0
 8021e2e:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8021e30:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8021e34:	f04f 0300 	mov.w	r3, #0
 8021e38:	f607 0138 	addw	r1, r7, #2104	; 0x838
 8021e3c:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8021e40:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8021e44:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8021e48:	681b      	ldr	r3, [r3, #0]
 8021e4a:	0fdb      	lsrs	r3, r3, #31
 8021e4c:	b2da      	uxtb	r2, r3
 8021e4e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8021e52:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8021e56:	681b      	ldr	r3, [r3, #0]
 8021e58:	0fdb      	lsrs	r3, r3, #31
 8021e5a:	b2db      	uxtb	r3, r3
 8021e5c:	4053      	eors	r3, r2
 8021e5e:	b2db      	uxtb	r3, r3
 8021e60:	2b00      	cmp	r3, #0
 8021e62:	d012      	beq.n	8021e8a <arm_softmax_s8+0x17a>
        mult = 1 - mult;
 8021e64:	f607 0338 	addw	r3, r7, #2104	; 0x838
 8021e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021e6c:	2100      	movs	r1, #0
 8021e6e:	f1d2 0001 	rsbs	r0, r2, #1
 8021e72:	f8c7 0330 	str.w	r0, [r7, #816]	; 0x330
 8021e76:	eb61 0303 	sbc.w	r3, r1, r3
 8021e7a:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
 8021e7e:	e9d7 34cc 	ldrd	r3, r4, [r7, #816]	; 0x330
 8021e82:	f607 0238 	addw	r2, r7, #2104	; 0x838
 8021e86:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8021e8a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8021e8e:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8021e92:	681b      	ldr	r3, [r3, #0]
 8021e94:	17da      	asrs	r2, r3, #31
 8021e96:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
 8021e9a:	f8c7 2464 	str.w	r2, [r7, #1124]	; 0x464
 8021e9e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8021ea2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8021ea6:	681b      	ldr	r3, [r3, #0]
 8021ea8:	17da      	asrs	r2, r3, #31
 8021eaa:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
 8021eae:	f8c7 245c 	str.w	r2, [r7, #1116]	; 0x45c
 8021eb2:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8021eb6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8021eba:	460b      	mov	r3, r1
 8021ebc:	f8d7 2458 	ldr.w	r2, [r7, #1112]	; 0x458
 8021ec0:	fb02 f203 	mul.w	r2, r2, r3
 8021ec4:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 8021ec8:	f507 648c 	add.w	r4, r7, #1120	; 0x460
 8021ecc:	e9c4 0100 	strd	r0, r1, [r4]
 8021ed0:	4601      	mov	r1, r0
 8021ed2:	fb01 f303 	mul.w	r3, r1, r3
 8021ed6:	4413      	add	r3, r2
 8021ed8:	f8d7 2460 	ldr.w	r2, [r7, #1120]	; 0x460
 8021edc:	f8d7 1458 	ldr.w	r1, [r7, #1112]	; 0x458
 8021ee0:	fba2 1201 	umull	r1, r2, r2, r1
 8021ee4:	f8c7 258c 	str.w	r2, [r7, #1420]	; 0x58c
 8021ee8:	460a      	mov	r2, r1
 8021eea:	f8c7 2588 	str.w	r2, [r7, #1416]	; 0x588
 8021eee:	f8d7 258c 	ldr.w	r2, [r7, #1420]	; 0x58c
 8021ef2:	4413      	add	r3, r2
 8021ef4:	f8c7 358c 	str.w	r3, [r7, #1420]	; 0x58c
 8021ef8:	f607 0338 	addw	r3, r7, #2104	; 0x838
 8021efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021f00:	f8d7 1588 	ldr.w	r1, [r7, #1416]	; 0x588
 8021f04:	1851      	adds	r1, r2, r1
 8021f06:	f8c7 1328 	str.w	r1, [r7, #808]	; 0x328
 8021f0a:	f8d7 158c 	ldr.w	r1, [r7, #1420]	; 0x58c
 8021f0e:	414b      	adcs	r3, r1
 8021f10:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
 8021f14:	e9d7 34ca 	ldrd	r3, r4, [r7, #808]	; 0x328
 8021f18:	f607 0238 	addw	r2, r7, #2104	; 0x838
 8021f1c:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8021f20:	f607 0338 	addw	r3, r7, #2104	; 0x838
 8021f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021f28:	2b00      	cmp	r3, #0
 8021f2a:	da0a      	bge.n	8021f42 <arm_softmax_s8+0x232>
 8021f2c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8021f30:	1851      	adds	r1, r2, r1
 8021f32:	f8c7 1320 	str.w	r1, [r7, #800]	; 0x320
 8021f36:	f143 0300 	adc.w	r3, r3, #0
 8021f3a:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
 8021f3e:	e9d7 23c8 	ldrd	r2, r3, [r7, #800]	; 0x320
 8021f42:	f04f 0000 	mov.w	r0, #0
 8021f46:	f04f 0100 	mov.w	r1, #0
 8021f4a:	0fd0      	lsrs	r0, r2, #31
 8021f4c:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8021f50:	17d9      	asrs	r1, r3, #31
 8021f52:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8021f56:	f5a3 72b2 	sub.w	r2, r3, #356	; 0x164
 8021f5a:	4603      	mov	r3, r0
 8021f5c:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8021f5e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8021f62:	f5a3 72ae 	sub.w	r2, r3, #348	; 0x15c
 8021f66:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8021f6a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8021f6e:	6812      	ldr	r2, [r2, #0]
 8021f70:	681b      	ldr	r3, [r3, #0]
 8021f72:	429a      	cmp	r2, r3
 8021f74:	d10e      	bne.n	8021f94 <arm_softmax_s8+0x284>
 8021f76:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8021f7a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8021f7e:	681b      	ldr	r3, [r3, #0]
 8021f80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8021f84:	d106      	bne.n	8021f94 <arm_softmax_s8+0x284>
        result = Q31_MAX;
 8021f86:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8021f8a:	f5a3 72b2 	sub.w	r2, r3, #356	; 0x164
 8021f8e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8021f92:	6013      	str	r3, [r2, #0]
    return result;
 8021f94:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8021f98:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8021f9c:	681b      	ldr	r3, [r3, #0]
 8021f9e:	f8c7 3968 	str.w	r3, [r7, #2408]	; 0x968
    int32_t mask = 0;
 8021fa2:	2300      	movs	r3, #0
 8021fa4:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
    int32_t shift = 24;
 8021fa8:	2318      	movs	r3, #24
 8021faa:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
    const int32_t val_mod_minus_quarter = (val & ((1 << shift) - 1)) - (1 << shift);
 8021fae:	2201      	movs	r2, #1
 8021fb0:	f8d7 3960 	ldr.w	r3, [r7, #2400]	; 0x960
 8021fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8021fb8:	1e5a      	subs	r2, r3, #1
 8021fba:	f8d7 3968 	ldr.w	r3, [r7, #2408]	; 0x968
 8021fbe:	ea02 0103 	and.w	r1, r2, r3
 8021fc2:	2201      	movs	r2, #1
 8021fc4:	f8d7 3960 	ldr.w	r3, [r7, #2400]	; 0x960
 8021fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8021fcc:	1acb      	subs	r3, r1, r3
 8021fce:	f8c7 395c 	str.w	r3, [r7, #2396]	; 0x95c
    const int32_t remainder = val_mod_minus_quarter - val;
 8021fd2:	f8d7 295c 	ldr.w	r2, [r7, #2396]	; 0x95c
 8021fd6:	f8d7 3968 	ldr.w	r3, [r7, #2408]	; 0x968
 8021fda:	1ad3      	subs	r3, r2, r3
 8021fdc:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
    const int32_t x = (val_mod_minus_quarter << 5) + (1 << 28);
 8021fe0:	f8d7 395c 	ldr.w	r3, [r7, #2396]	; 0x95c
 8021fe4:	015b      	lsls	r3, r3, #5
 8021fe6:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 8021fea:	f8c7 3954 	str.w	r3, [r7, #2388]	; 0x954
 8021fee:	f8d7 3954 	ldr.w	r3, [r7, #2388]	; 0x954
 8021ff2:	f8c7 3950 	str.w	r3, [r7, #2384]	; 0x950
 8021ff6:	f8d7 3954 	ldr.w	r3, [r7, #2388]	; 0x954
 8021ffa:	f8c7 394c 	str.w	r3, [r7, #2380]	; 0x94c
    q31_t result = 0;
 8021ffe:	2300      	movs	r3, #0
 8022000:	f8c7 3948 	str.w	r3, [r7, #2376]	; 0x948
    q63_t mult = 1 << 30;
 8022004:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8022008:	f04f 0300 	mov.w	r3, #0
 802200c:	f507 6114 	add.w	r1, r7, #2368	; 0x940
 8022010:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8022014:	f8d7 3950 	ldr.w	r3, [r7, #2384]	; 0x950
 8022018:	0fdb      	lsrs	r3, r3, #31
 802201a:	b2da      	uxtb	r2, r3
 802201c:	f8d7 394c 	ldr.w	r3, [r7, #2380]	; 0x94c
 8022020:	0fdb      	lsrs	r3, r3, #31
 8022022:	b2db      	uxtb	r3, r3
 8022024:	4053      	eors	r3, r2
 8022026:	b2db      	uxtb	r3, r3
 8022028:	2b00      	cmp	r3, #0
 802202a:	d012      	beq.n	8022052 <arm_softmax_s8+0x342>
        mult = 1 - mult;
 802202c:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8022030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022034:	2100      	movs	r1, #0
 8022036:	f1d2 0001 	rsbs	r0, r2, #1
 802203a:	f8c7 0318 	str.w	r0, [r7, #792]	; 0x318
 802203e:	eb61 0303 	sbc.w	r3, r1, r3
 8022042:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c
 8022046:	e9d7 34c6 	ldrd	r3, r4, [r7, #792]	; 0x318
 802204a:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 802204e:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8022052:	f8d7 3950 	ldr.w	r3, [r7, #2384]	; 0x950
 8022056:	17da      	asrs	r2, r3, #31
 8022058:	f8c7 34d8 	str.w	r3, [r7, #1240]	; 0x4d8
 802205c:	f8c7 24dc 	str.w	r2, [r7, #1244]	; 0x4dc
 8022060:	f8d7 394c 	ldr.w	r3, [r7, #2380]	; 0x94c
 8022064:	17da      	asrs	r2, r3, #31
 8022066:	f8c7 34d0 	str.w	r3, [r7, #1232]	; 0x4d0
 802206a:	f8c7 24d4 	str.w	r2, [r7, #1236]	; 0x4d4
 802206e:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 8022072:	e9d3 0100 	ldrd	r0, r1, [r3]
 8022076:	460b      	mov	r3, r1
 8022078:	f8d7 24d0 	ldr.w	r2, [r7, #1232]	; 0x4d0
 802207c:	fb02 f203 	mul.w	r2, r2, r3
 8022080:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	; 0x4d4
 8022084:	f507 649b 	add.w	r4, r7, #1240	; 0x4d8
 8022088:	e9c4 0100 	strd	r0, r1, [r4]
 802208c:	4601      	mov	r1, r0
 802208e:	fb01 f303 	mul.w	r3, r1, r3
 8022092:	4413      	add	r3, r2
 8022094:	f8d7 24d8 	ldr.w	r2, [r7, #1240]	; 0x4d8
 8022098:	f8d7 14d0 	ldr.w	r1, [r7, #1232]	; 0x4d0
 802209c:	fba2 8901 	umull	r8, r9, r2, r1
 80220a0:	444b      	add	r3, r9
 80220a2:	4699      	mov	r9, r3
 80220a4:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 80220a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80220ac:	eb12 0108 	adds.w	r1, r2, r8
 80220b0:	f8c7 1310 	str.w	r1, [r7, #784]	; 0x310
 80220b4:	eb43 0309 	adc.w	r3, r3, r9
 80220b8:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
 80220bc:	e9d7 34c4 	ldrd	r3, r4, [r7, #784]	; 0x310
 80220c0:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 80220c4:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 80220c8:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 80220cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80220d0:	2b00      	cmp	r3, #0
 80220d2:	da0a      	bge.n	80220ea <arm_softmax_s8+0x3da>
 80220d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80220d8:	1851      	adds	r1, r2, r1
 80220da:	f8c7 1308 	str.w	r1, [r7, #776]	; 0x308
 80220de:	f143 0300 	adc.w	r3, r3, #0
 80220e2:	f8c7 330c 	str.w	r3, [r7, #780]	; 0x30c
 80220e6:	e9d7 23c2 	ldrd	r2, r3, [r7, #776]	; 0x308
 80220ea:	f04f 0000 	mov.w	r0, #0
 80220ee:	f04f 0100 	mov.w	r1, #0
 80220f2:	0fd0      	lsrs	r0, r2, #31
 80220f4:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80220f8:	17d9      	asrs	r1, r3, #31
 80220fa:	4602      	mov	r2, r0
 80220fc:	460b      	mov	r3, r1
 80220fe:	4613      	mov	r3, r2
 8022100:	f8c7 3948 	str.w	r3, [r7, #2376]	; 0x948
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8022104:	f8d7 2950 	ldr.w	r2, [r7, #2384]	; 0x950
 8022108:	f8d7 394c 	ldr.w	r3, [r7, #2380]	; 0x94c
 802210c:	429a      	cmp	r2, r3
 802210e:	d108      	bne.n	8022122 <arm_softmax_s8+0x412>
 8022110:	f8d7 3950 	ldr.w	r3, [r7, #2384]	; 0x950
 8022114:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8022118:	d103      	bne.n	8022122 <arm_softmax_s8+0x412>
        result = Q31_MAX;
 802211a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 802211e:	f8c7 3948 	str.w	r3, [r7, #2376]	; 0x948
    return result;
 8022122:	f8d7 3948 	ldr.w	r3, [r7, #2376]	; 0x948
    const int32_t x2 = MUL_SAT(x, x);
 8022126:	f8c7 393c 	str.w	r3, [r7, #2364]	; 0x93c
 802212a:	f8d7 393c 	ldr.w	r3, [r7, #2364]	; 0x93c
 802212e:	f8c7 3938 	str.w	r3, [r7, #2360]	; 0x938
 8022132:	f8d7 393c 	ldr.w	r3, [r7, #2364]	; 0x93c
 8022136:	f8c7 3934 	str.w	r3, [r7, #2356]	; 0x934
    q31_t result = 0;
 802213a:	2300      	movs	r3, #0
 802213c:	f8c7 3930 	str.w	r3, [r7, #2352]	; 0x930
    q63_t mult = 1 << 30;
 8022140:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8022144:	f04f 0300 	mov.w	r3, #0
 8022148:	f607 1128 	addw	r1, r7, #2344	; 0x928
 802214c:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8022150:	f8d7 3938 	ldr.w	r3, [r7, #2360]	; 0x938
 8022154:	0fdb      	lsrs	r3, r3, #31
 8022156:	b2da      	uxtb	r2, r3
 8022158:	f8d7 3934 	ldr.w	r3, [r7, #2356]	; 0x934
 802215c:	0fdb      	lsrs	r3, r3, #31
 802215e:	b2db      	uxtb	r3, r3
 8022160:	4053      	eors	r3, r2
 8022162:	b2db      	uxtb	r3, r3
 8022164:	2b00      	cmp	r3, #0
 8022166:	d012      	beq.n	802218e <arm_softmax_s8+0x47e>
        mult = 1 - mult;
 8022168:	f607 1328 	addw	r3, r7, #2344	; 0x928
 802216c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022170:	2100      	movs	r1, #0
 8022172:	f1d2 0001 	rsbs	r0, r2, #1
 8022176:	f8c7 0300 	str.w	r0, [r7, #768]	; 0x300
 802217a:	eb61 0303 	sbc.w	r3, r1, r3
 802217e:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
 8022182:	e9d7 34c0 	ldrd	r3, r4, [r7, #768]	; 0x300
 8022186:	f607 1228 	addw	r2, r7, #2344	; 0x928
 802218a:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 802218e:	f8d7 3938 	ldr.w	r3, [r7, #2360]	; 0x938
 8022192:	17da      	asrs	r2, r3, #31
 8022194:	f8c7 34c8 	str.w	r3, [r7, #1224]	; 0x4c8
 8022198:	f8c7 24cc 	str.w	r2, [r7, #1228]	; 0x4cc
 802219c:	f8d7 3934 	ldr.w	r3, [r7, #2356]	; 0x934
 80221a0:	17da      	asrs	r2, r3, #31
 80221a2:	f8c7 34c0 	str.w	r3, [r7, #1216]	; 0x4c0
 80221a6:	f8c7 24c4 	str.w	r2, [r7, #1220]	; 0x4c4
 80221aa:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 80221ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80221b2:	460b      	mov	r3, r1
 80221b4:	f8d7 24c0 	ldr.w	r2, [r7, #1216]	; 0x4c0
 80221b8:	fb02 f203 	mul.w	r2, r2, r3
 80221bc:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	; 0x4c4
 80221c0:	f507 6499 	add.w	r4, r7, #1224	; 0x4c8
 80221c4:	e9c4 0100 	strd	r0, r1, [r4]
 80221c8:	4601      	mov	r1, r0
 80221ca:	fb01 f303 	mul.w	r3, r1, r3
 80221ce:	4413      	add	r3, r2
 80221d0:	f8d7 24c8 	ldr.w	r2, [r7, #1224]	; 0x4c8
 80221d4:	f8d7 14c0 	ldr.w	r1, [r7, #1216]	; 0x4c0
 80221d8:	fba2 ab01 	umull	sl, fp, r2, r1
 80221dc:	445b      	add	r3, fp
 80221de:	469b      	mov	fp, r3
 80221e0:	f607 1328 	addw	r3, r7, #2344	; 0x928
 80221e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80221e8:	eb12 010a 	adds.w	r1, r2, sl
 80221ec:	f8c7 12f8 	str.w	r1, [r7, #760]	; 0x2f8
 80221f0:	eb43 030b 	adc.w	r3, r3, fp
 80221f4:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
 80221f8:	e9d7 34be 	ldrd	r3, r4, [r7, #760]	; 0x2f8
 80221fc:	f607 1228 	addw	r2, r7, #2344	; 0x928
 8022200:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8022204:	f607 1328 	addw	r3, r7, #2344	; 0x928
 8022208:	e9d3 2300 	ldrd	r2, r3, [r3]
 802220c:	2b00      	cmp	r3, #0
 802220e:	da0a      	bge.n	8022226 <arm_softmax_s8+0x516>
 8022210:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8022214:	1851      	adds	r1, r2, r1
 8022216:	f8c7 12f0 	str.w	r1, [r7, #752]	; 0x2f0
 802221a:	f143 0300 	adc.w	r3, r3, #0
 802221e:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
 8022222:	e9d7 23bc 	ldrd	r2, r3, [r7, #752]	; 0x2f0
 8022226:	f04f 0000 	mov.w	r0, #0
 802222a:	f04f 0100 	mov.w	r1, #0
 802222e:	0fd0      	lsrs	r0, r2, #31
 8022230:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8022234:	17d9      	asrs	r1, r3, #31
 8022236:	4602      	mov	r2, r0
 8022238:	460b      	mov	r3, r1
 802223a:	4613      	mov	r3, r2
 802223c:	f8c7 3930 	str.w	r3, [r7, #2352]	; 0x930
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8022240:	f8d7 2938 	ldr.w	r2, [r7, #2360]	; 0x938
 8022244:	f8d7 3934 	ldr.w	r3, [r7, #2356]	; 0x934
 8022248:	429a      	cmp	r2, r3
 802224a:	d108      	bne.n	802225e <arm_softmax_s8+0x54e>
 802224c:	f8d7 3938 	ldr.w	r3, [r7, #2360]	; 0x938
 8022250:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8022254:	d103      	bne.n	802225e <arm_softmax_s8+0x54e>
        result = Q31_MAX;
 8022256:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 802225a:	f8c7 3930 	str.w	r3, [r7, #2352]	; 0x930
    return result;
 802225e:	f8d7 3930 	ldr.w	r3, [r7, #2352]	; 0x930
 8022262:	f8c7 3924 	str.w	r3, [r7, #2340]	; 0x924
    q31_t result = 0;
 8022266:	2300      	movs	r3, #0
 8022268:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
    const q31_t remainder_mask = (1 << exponent) - 1;
 802226c:	2304      	movs	r3, #4
 802226e:	3b01      	subs	r3, #1
 8022270:	f8c7 391c 	str.w	r3, [r7, #2332]	; 0x91c
    int32_t remainder = remainder_mask & dividend;
 8022274:	f8d7 2924 	ldr.w	r2, [r7, #2340]	; 0x924
 8022278:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 802227c:	4013      	ands	r3, r2
 802227e:	f8c7 3918 	str.w	r3, [r7, #2328]	; 0x918
    result = dividend >> exponent;
 8022282:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 8022286:	109b      	asrs	r3, r3, #2
 8022288:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
    q31_t threshold = remainder_mask >> 1;
 802228c:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 8022290:	105b      	asrs	r3, r3, #1
 8022292:	f8c7 3914 	str.w	r3, [r7, #2324]	; 0x914
    if (result < 0)
 8022296:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 802229a:	2b00      	cmp	r3, #0
 802229c:	da04      	bge.n	80222a8 <arm_softmax_s8+0x598>
        threshold++;
 802229e:	f8d7 3914 	ldr.w	r3, [r7, #2324]	; 0x914
 80222a2:	3301      	adds	r3, #1
 80222a4:	f8c7 3914 	str.w	r3, [r7, #2324]	; 0x914
    if (remainder > threshold)
 80222a8:	f8d7 2918 	ldr.w	r2, [r7, #2328]	; 0x918
 80222ac:	f8d7 3914 	ldr.w	r3, [r7, #2324]	; 0x914
 80222b0:	429a      	cmp	r2, r3
 80222b2:	dd04      	ble.n	80222be <arm_softmax_s8+0x5ae>
        result++;
 80222b4:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 80222b8:	3301      	adds	r3, #1
 80222ba:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
    return result;
 80222be:	f8d7 4920 	ldr.w	r4, [r7, #2336]	; 0x920
 80222c2:	f8d7 393c 	ldr.w	r3, [r7, #2364]	; 0x93c
 80222c6:	f8c7 3910 	str.w	r3, [r7, #2320]	; 0x910
 80222ca:	f8d7 3954 	ldr.w	r3, [r7, #2388]	; 0x954
 80222ce:	f8c7 390c 	str.w	r3, [r7, #2316]	; 0x90c
    q31_t result = 0;
 80222d2:	2300      	movs	r3, #0
 80222d4:	f8c7 3908 	str.w	r3, [r7, #2312]	; 0x908
    q63_t mult = 1 << 30;
 80222d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80222dc:	f04f 0300 	mov.w	r3, #0
 80222e0:	f507 6110 	add.w	r1, r7, #2304	; 0x900
 80222e4:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80222e8:	f8d7 3910 	ldr.w	r3, [r7, #2320]	; 0x910
 80222ec:	0fdb      	lsrs	r3, r3, #31
 80222ee:	b2da      	uxtb	r2, r3
 80222f0:	f8d7 390c 	ldr.w	r3, [r7, #2316]	; 0x90c
 80222f4:	0fdb      	lsrs	r3, r3, #31
 80222f6:	b2db      	uxtb	r3, r3
 80222f8:	4053      	eors	r3, r2
 80222fa:	b2db      	uxtb	r3, r3
 80222fc:	2b00      	cmp	r3, #0
 80222fe:	d012      	beq.n	8022326 <arm_softmax_s8+0x616>
        mult = 1 - mult;
 8022300:	f507 6310 	add.w	r3, r7, #2304	; 0x900
 8022304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022308:	2100      	movs	r1, #0
 802230a:	f1d2 0001 	rsbs	r0, r2, #1
 802230e:	f8c7 02e8 	str.w	r0, [r7, #744]	; 0x2e8
 8022312:	eb61 0303 	sbc.w	r3, r1, r3
 8022316:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 802231a:	e9d7 23ba 	ldrd	r2, r3, [r7, #744]	; 0x2e8
 802231e:	f507 6110 	add.w	r1, r7, #2304	; 0x900
 8022322:	e9c1 2300 	strd	r2, r3, [r1]
    mult = mult + (q63_t)m1 * m2;
 8022326:	f8d7 3910 	ldr.w	r3, [r7, #2320]	; 0x910
 802232a:	17da      	asrs	r2, r3, #31
 802232c:	f8c7 34b8 	str.w	r3, [r7, #1208]	; 0x4b8
 8022330:	f8c7 24bc 	str.w	r2, [r7, #1212]	; 0x4bc
 8022334:	f8d7 390c 	ldr.w	r3, [r7, #2316]	; 0x90c
 8022338:	17da      	asrs	r2, r3, #31
 802233a:	f8c7 34b0 	str.w	r3, [r7, #1200]	; 0x4b0
 802233e:	f8c7 24b4 	str.w	r2, [r7, #1204]	; 0x4b4
 8022342:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 8022346:	e9d3 0100 	ldrd	r0, r1, [r3]
 802234a:	460b      	mov	r3, r1
 802234c:	f8d7 24b0 	ldr.w	r2, [r7, #1200]	; 0x4b0
 8022350:	fb02 f203 	mul.w	r2, r2, r3
 8022354:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	; 0x4b4
 8022358:	f507 6c97 	add.w	ip, r7, #1208	; 0x4b8
 802235c:	e9cc 0100 	strd	r0, r1, [ip]
 8022360:	4601      	mov	r1, r0
 8022362:	fb01 f303 	mul.w	r3, r1, r3
 8022366:	4413      	add	r3, r2
 8022368:	f8d7 24b8 	ldr.w	r2, [r7, #1208]	; 0x4b8
 802236c:	f8d7 14b0 	ldr.w	r1, [r7, #1200]	; 0x4b0
 8022370:	fba2 5601 	umull	r5, r6, r2, r1
 8022374:	4433      	add	r3, r6
 8022376:	461e      	mov	r6, r3
 8022378:	f507 6310 	add.w	r3, r7, #2304	; 0x900
 802237c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022380:	1951      	adds	r1, r2, r5
 8022382:	f8c7 12e0 	str.w	r1, [r7, #736]	; 0x2e0
 8022386:	4173      	adcs	r3, r6
 8022388:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 802238c:	e9d7 23b8 	ldrd	r2, r3, [r7, #736]	; 0x2e0
 8022390:	f507 6110 	add.w	r1, r7, #2304	; 0x900
 8022394:	e9c1 2300 	strd	r2, r3, [r1]
    result = (int32_t)(mult / (1ll << 31));
 8022398:	f507 6310 	add.w	r3, r7, #2304	; 0x900
 802239c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80223a0:	2b00      	cmp	r3, #0
 80223a2:	da0a      	bge.n	80223ba <arm_softmax_s8+0x6aa>
 80223a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80223a8:	1851      	adds	r1, r2, r1
 80223aa:	f8c7 12d8 	str.w	r1, [r7, #728]	; 0x2d8
 80223ae:	f143 0300 	adc.w	r3, r3, #0
 80223b2:	f8c7 32dc 	str.w	r3, [r7, #732]	; 0x2dc
 80223b6:	e9d7 23b6 	ldrd	r2, r3, [r7, #728]	; 0x2d8
 80223ba:	f04f 0000 	mov.w	r0, #0
 80223be:	f04f 0100 	mov.w	r1, #0
 80223c2:	0fd0      	lsrs	r0, r2, #31
 80223c4:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80223c8:	17d9      	asrs	r1, r3, #31
 80223ca:	4602      	mov	r2, r0
 80223cc:	460b      	mov	r3, r1
 80223ce:	4613      	mov	r3, r2
 80223d0:	f8c7 3908 	str.w	r3, [r7, #2312]	; 0x908
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80223d4:	f8d7 2910 	ldr.w	r2, [r7, #2320]	; 0x910
 80223d8:	f8d7 390c 	ldr.w	r3, [r7, #2316]	; 0x90c
 80223dc:	429a      	cmp	r2, r3
 80223de:	d108      	bne.n	80223f2 <arm_softmax_s8+0x6e2>
 80223e0:	f8d7 3910 	ldr.w	r3, [r7, #2320]	; 0x910
 80223e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80223e8:	d103      	bne.n	80223f2 <arm_softmax_s8+0x6e2>
        result = Q31_MAX;
 80223ea:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80223ee:	f8c7 3908 	str.w	r3, [r7, #2312]	; 0x908
    return result;
 80223f2:	f8d7 3908 	ldr.w	r3, [r7, #2312]	; 0x908
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 80223f6:	4423      	add	r3, r4
 80223f8:	f8c7 38fc 	str.w	r3, [r7, #2300]	; 0x8fc
    q31_t result = 0;
 80223fc:	2300      	movs	r3, #0
 80223fe:	f8c7 38f8 	str.w	r3, [r7, #2296]	; 0x8f8
    q63_t mult = 1 << 30;
 8022402:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8022406:	f04f 0300 	mov.w	r3, #0
 802240a:	f507 610f 	add.w	r1, r7, #2288	; 0x8f0
 802240e:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8022412:	f8d7 38fc 	ldr.w	r3, [r7, #2300]	; 0x8fc
 8022416:	0fdb      	lsrs	r3, r3, #31
 8022418:	b2da      	uxtb	r2, r3
 802241a:	2300      	movs	r3, #0
 802241c:	4053      	eors	r3, r2
 802241e:	b2db      	uxtb	r3, r3
 8022420:	2b00      	cmp	r3, #0
 8022422:	d012      	beq.n	802244a <arm_softmax_s8+0x73a>
        mult = 1 - mult;
 8022424:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 8022428:	e9d3 2300 	ldrd	r2, r3, [r3]
 802242c:	2100      	movs	r1, #0
 802242e:	f1d2 0001 	rsbs	r0, r2, #1
 8022432:	f8c7 02d0 	str.w	r0, [r7, #720]	; 0x2d0
 8022436:	eb61 0303 	sbc.w	r3, r1, r3
 802243a:	f8c7 32d4 	str.w	r3, [r7, #724]	; 0x2d4
 802243e:	e9d7 34b4 	ldrd	r3, r4, [r7, #720]	; 0x2d0
 8022442:	f507 620f 	add.w	r2, r7, #2288	; 0x8f0
 8022446:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 802244a:	f8d7 38fc 	ldr.w	r3, [r7, #2300]	; 0x8fc
 802244e:	17da      	asrs	r2, r3, #31
 8022450:	f8c7 34a8 	str.w	r3, [r7, #1192]	; 0x4a8
 8022454:	f8c7 24ac 	str.w	r2, [r7, #1196]	; 0x4ac
 8022458:	a3f0      	add	r3, pc, #960	; (adr r3, 802281c <arm_softmax_s8+0xb0c>)
 802245a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802245e:	f8d7 14ac 	ldr.w	r1, [r7, #1196]	; 0x4ac
 8022462:	fb02 f001 	mul.w	r0, r2, r1
 8022466:	f8d7 14a8 	ldr.w	r1, [r7, #1192]	; 0x4a8
 802246a:	fb01 f103 	mul.w	r1, r1, r3
 802246e:	4401      	add	r1, r0
 8022470:	f8d7 04a8 	ldr.w	r0, [r7, #1192]	; 0x4a8
 8022474:	fba0 2302 	umull	r2, r3, r0, r2
 8022478:	f8c7 35d4 	str.w	r3, [r7, #1492]	; 0x5d4
 802247c:	4613      	mov	r3, r2
 802247e:	f8c7 35d0 	str.w	r3, [r7, #1488]	; 0x5d0
 8022482:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	; 0x5d4
 8022486:	18cb      	adds	r3, r1, r3
 8022488:	f8c7 35d4 	str.w	r3, [r7, #1492]	; 0x5d4
 802248c:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 8022490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022494:	f8d7 15d0 	ldr.w	r1, [r7, #1488]	; 0x5d0
 8022498:	1851      	adds	r1, r2, r1
 802249a:	f8c7 12c8 	str.w	r1, [r7, #712]	; 0x2c8
 802249e:	f8d7 15d4 	ldr.w	r1, [r7, #1492]	; 0x5d4
 80224a2:	414b      	adcs	r3, r1
 80224a4:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
 80224a8:	e9d7 34b2 	ldrd	r3, r4, [r7, #712]	; 0x2c8
 80224ac:	f507 620f 	add.w	r2, r7, #2288	; 0x8f0
 80224b0:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 80224b4:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 80224b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80224bc:	2b00      	cmp	r3, #0
 80224be:	da0a      	bge.n	80224d6 <arm_softmax_s8+0x7c6>
 80224c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80224c4:	1851      	adds	r1, r2, r1
 80224c6:	f8c7 12c0 	str.w	r1, [r7, #704]	; 0x2c0
 80224ca:	f143 0300 	adc.w	r3, r3, #0
 80224ce:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
 80224d2:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	; 0x2c0
 80224d6:	f04f 0000 	mov.w	r0, #0
 80224da:	f04f 0100 	mov.w	r1, #0
 80224de:	0fd0      	lsrs	r0, r2, #31
 80224e0:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80224e4:	17d9      	asrs	r1, r3, #31
 80224e6:	4602      	mov	r2, r0
 80224e8:	460b      	mov	r3, r1
 80224ea:	4613      	mov	r3, r2
 80224ec:	f8c7 38f8 	str.w	r3, [r7, #2296]	; 0x8f8
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80224f0:	f8d7 28fc 	ldr.w	r2, [r7, #2300]	; 0x8fc
 80224f4:	4bc6      	ldr	r3, [pc, #792]	; (8022810 <arm_softmax_s8+0xb00>)
 80224f6:	429a      	cmp	r2, r3
 80224f8:	d108      	bne.n	802250c <arm_softmax_s8+0x7fc>
 80224fa:	f8d7 38fc 	ldr.w	r3, [r7, #2300]	; 0x8fc
 80224fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8022502:	d103      	bne.n	802250c <arm_softmax_s8+0x7fc>
        result = Q31_MAX;
 8022504:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8022508:	f8c7 38f8 	str.w	r3, [r7, #2296]	; 0x8f8
    return result;
 802250c:	f8d7 28f8 	ldr.w	r2, [r7, #2296]	; 0x8f8
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 8022510:	f8d7 393c 	ldr.w	r3, [r7, #2364]	; 0x93c
 8022514:	4413      	add	r3, r2
 8022516:	f8c7 38ec 	str.w	r3, [r7, #2284]	; 0x8ec
    q31_t result = 0;
 802251a:	2300      	movs	r3, #0
 802251c:	f8c7 38e8 	str.w	r3, [r7, #2280]	; 0x8e8
    const q31_t remainder_mask = (1 << exponent) - 1;
 8022520:	2302      	movs	r3, #2
 8022522:	3b01      	subs	r3, #1
 8022524:	f8c7 38e4 	str.w	r3, [r7, #2276]	; 0x8e4
    int32_t remainder = remainder_mask & dividend;
 8022528:	f8d7 28ec 	ldr.w	r2, [r7, #2284]	; 0x8ec
 802252c:	f8d7 38e4 	ldr.w	r3, [r7, #2276]	; 0x8e4
 8022530:	4013      	ands	r3, r2
 8022532:	f8c7 38e0 	str.w	r3, [r7, #2272]	; 0x8e0
    result = dividend >> exponent;
 8022536:	f8d7 38ec 	ldr.w	r3, [r7, #2284]	; 0x8ec
 802253a:	105b      	asrs	r3, r3, #1
 802253c:	f8c7 38e8 	str.w	r3, [r7, #2280]	; 0x8e8
    q31_t threshold = remainder_mask >> 1;
 8022540:	f8d7 38e4 	ldr.w	r3, [r7, #2276]	; 0x8e4
 8022544:	105b      	asrs	r3, r3, #1
 8022546:	f8c7 38dc 	str.w	r3, [r7, #2268]	; 0x8dc
    if (result < 0)
 802254a:	f8d7 38e8 	ldr.w	r3, [r7, #2280]	; 0x8e8
 802254e:	2b00      	cmp	r3, #0
 8022550:	da04      	bge.n	802255c <arm_softmax_s8+0x84c>
        threshold++;
 8022552:	f8d7 38dc 	ldr.w	r3, [r7, #2268]	; 0x8dc
 8022556:	3301      	adds	r3, #1
 8022558:	f8c7 38dc 	str.w	r3, [r7, #2268]	; 0x8dc
    if (remainder > threshold)
 802255c:	f8d7 28e0 	ldr.w	r2, [r7, #2272]	; 0x8e0
 8022560:	f8d7 38dc 	ldr.w	r3, [r7, #2268]	; 0x8dc
 8022564:	429a      	cmp	r2, r3
 8022566:	dd04      	ble.n	8022572 <arm_softmax_s8+0x862>
        result++;
 8022568:	f8d7 38e8 	ldr.w	r3, [r7, #2280]	; 0x8e8
 802256c:	3301      	adds	r3, #1
 802256e:	f8c7 38e8 	str.w	r3, [r7, #2280]	; 0x8e8
    return result;
 8022572:	f8d7 28e8 	ldr.w	r2, [r7, #2280]	; 0x8e8
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 8022576:	f8d7 3954 	ldr.w	r3, [r7, #2388]	; 0x954
 802257a:	4413      	add	r3, r2
 802257c:	f8c7 38d8 	str.w	r3, [r7, #2264]	; 0x8d8
    q31_t result = 0;
 8022580:	2300      	movs	r3, #0
 8022582:	f8c7 38d4 	str.w	r3, [r7, #2260]	; 0x8d4
    q63_t mult = 1 << 30;
 8022586:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 802258a:	f04f 0300 	mov.w	r3, #0
 802258e:	f607 01c8 	addw	r1, r7, #2248	; 0x8c8
 8022592:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8022596:	2200      	movs	r2, #0
 8022598:	f8d7 38d8 	ldr.w	r3, [r7, #2264]	; 0x8d8
 802259c:	0fdb      	lsrs	r3, r3, #31
 802259e:	b2db      	uxtb	r3, r3
 80225a0:	4053      	eors	r3, r2
 80225a2:	b2db      	uxtb	r3, r3
 80225a4:	2b00      	cmp	r3, #0
 80225a6:	d012      	beq.n	80225ce <arm_softmax_s8+0x8be>
        mult = 1 - mult;
 80225a8:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 80225ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80225b0:	2100      	movs	r1, #0
 80225b2:	f1d2 0001 	rsbs	r0, r2, #1
 80225b6:	f8c7 02b8 	str.w	r0, [r7, #696]	; 0x2b8
 80225ba:	eb61 0303 	sbc.w	r3, r1, r3
 80225be:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
 80225c2:	e9d7 34ae 	ldrd	r3, r4, [r7, #696]	; 0x2b8
 80225c6:	f607 02c8 	addw	r2, r7, #2248	; 0x8c8
 80225ca:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80225ce:	a18c      	add	r1, pc, #560	; (adr r1, 8022800 <arm_softmax_s8+0xaf0>)
 80225d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80225d4:	f8d7 38d8 	ldr.w	r3, [r7, #2264]	; 0x8d8
 80225d8:	17da      	asrs	r2, r3, #31
 80225da:	f8c7 34a0 	str.w	r3, [r7, #1184]	; 0x4a0
 80225de:	f8c7 24a4 	str.w	r2, [r7, #1188]	; 0x4a4
 80225e2:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	; 0x4a0
 80225e6:	fb03 f201 	mul.w	r2, r3, r1
 80225ea:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	; 0x4a4
 80225ee:	fb00 f303 	mul.w	r3, r0, r3
 80225f2:	4413      	add	r3, r2
 80225f4:	f8d7 24a0 	ldr.w	r2, [r7, #1184]	; 0x4a0
 80225f8:	fba0 1202 	umull	r1, r2, r0, r2
 80225fc:	f8c7 25cc 	str.w	r2, [r7, #1484]	; 0x5cc
 8022600:	460a      	mov	r2, r1
 8022602:	f8c7 25c8 	str.w	r2, [r7, #1480]	; 0x5c8
 8022606:	f8d7 25cc 	ldr.w	r2, [r7, #1484]	; 0x5cc
 802260a:	4413      	add	r3, r2
 802260c:	f8c7 35cc 	str.w	r3, [r7, #1484]	; 0x5cc
 8022610:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8022614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022618:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 802261c:	1851      	adds	r1, r2, r1
 802261e:	f8c7 12b0 	str.w	r1, [r7, #688]	; 0x2b0
 8022622:	f8d7 15cc 	ldr.w	r1, [r7, #1484]	; 0x5cc
 8022626:	414b      	adcs	r3, r1
 8022628:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
 802262c:	e9d7 34ac 	ldrd	r3, r4, [r7, #688]	; 0x2b0
 8022630:	f607 02c8 	addw	r2, r7, #2248	; 0x8c8
 8022634:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8022638:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 802263c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022640:	2b00      	cmp	r3, #0
 8022642:	da0a      	bge.n	802265a <arm_softmax_s8+0x94a>
 8022644:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8022648:	1851      	adds	r1, r2, r1
 802264a:	f8c7 12a8 	str.w	r1, [r7, #680]	; 0x2a8
 802264e:	f143 0300 	adc.w	r3, r3, #0
 8022652:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 8022656:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 802265a:	f04f 0000 	mov.w	r0, #0
 802265e:	f04f 0100 	mov.w	r1, #0
 8022662:	0fd0      	lsrs	r0, r2, #31
 8022664:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8022668:	17d9      	asrs	r1, r3, #31
 802266a:	4602      	mov	r2, r0
 802266c:	460b      	mov	r3, r1
 802266e:	4613      	mov	r3, r2
 8022670:	f8c7 38d4 	str.w	r3, [r7, #2260]	; 0x8d4
    return result;
 8022674:	f8d7 28d4 	ldr.w	r2, [r7, #2260]	; 0x8d4
    int32_t result = 1895147668 +
 8022678:	4b66      	ldr	r3, [pc, #408]	; (8022814 <arm_softmax_s8+0xb04>)
 802267a:	4413      	add	r3, r2
 802267c:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    SELECT_IF_NON_ZERO(1672461947)
 8022680:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 8022684:	1c53      	adds	r3, r2, #1
 8022686:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 802268a:	2301      	movs	r3, #1
 802268c:	fa03 f202 	lsl.w	r2, r3, r2
 8022690:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8022694:	4013      	ands	r3, r2
 8022696:	2b00      	cmp	r3, #0
 8022698:	d002      	beq.n	80226a0 <arm_softmax_s8+0x990>
 802269a:	f04f 33ff 	mov.w	r3, #4294967295
 802269e:	e000      	b.n	80226a2 <arm_softmax_s8+0x992>
 80226a0:	2300      	movs	r3, #0
 80226a2:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 80226a6:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80226aa:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
    q31_t result = 0;
 80226ae:	2300      	movs	r3, #0
 80226b0:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
    q63_t mult = 1 << 30;
 80226b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80226b8:	f04f 0300 	mov.w	r3, #0
 80226bc:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 80226c0:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80226c4:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 80226c8:	0fdb      	lsrs	r3, r3, #31
 80226ca:	b2da      	uxtb	r2, r3
 80226cc:	2300      	movs	r3, #0
 80226ce:	4053      	eors	r3, r2
 80226d0:	b2db      	uxtb	r3, r3
 80226d2:	2b00      	cmp	r3, #0
 80226d4:	d012      	beq.n	80226fc <arm_softmax_s8+0x9ec>
        mult = 1 - mult;
 80226d6:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 80226da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80226de:	2100      	movs	r1, #0
 80226e0:	f1d2 0001 	rsbs	r0, r2, #1
 80226e4:	f8c7 02a0 	str.w	r0, [r7, #672]	; 0x2a0
 80226e8:	eb61 0303 	sbc.w	r3, r1, r3
 80226ec:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
 80226f0:	e9d7 34a8 	ldrd	r3, r4, [r7, #672]	; 0x2a0
 80226f4:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 80226f8:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80226fc:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8022700:	17da      	asrs	r2, r3, #31
 8022702:	f8c7 3498 	str.w	r3, [r7, #1176]	; 0x498
 8022706:	f8c7 249c 	str.w	r2, [r7, #1180]	; 0x49c
 802270a:	a33f      	add	r3, pc, #252	; (adr r3, 8022808 <arm_softmax_s8+0xaf8>)
 802270c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022710:	f8d7 149c 	ldr.w	r1, [r7, #1180]	; 0x49c
 8022714:	fb02 f001 	mul.w	r0, r2, r1
 8022718:	f8d7 1498 	ldr.w	r1, [r7, #1176]	; 0x498
 802271c:	fb01 f103 	mul.w	r1, r1, r3
 8022720:	4401      	add	r1, r0
 8022722:	f8d7 0498 	ldr.w	r0, [r7, #1176]	; 0x498
 8022726:	fba0 2302 	umull	r2, r3, r0, r2
 802272a:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 802272e:	4613      	mov	r3, r2
 8022730:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
 8022734:	f8d7 35c4 	ldr.w	r3, [r7, #1476]	; 0x5c4
 8022738:	18cb      	adds	r3, r1, r3
 802273a:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 802273e:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8022742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022746:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 802274a:	1851      	adds	r1, r2, r1
 802274c:	f8c7 1298 	str.w	r1, [r7, #664]	; 0x298
 8022750:	f8d7 15c4 	ldr.w	r1, [r7, #1476]	; 0x5c4
 8022754:	414b      	adcs	r3, r1
 8022756:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 802275a:	e9d7 34a6 	ldrd	r3, r4, [r7, #664]	; 0x298
 802275e:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 8022762:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8022766:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 802276a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802276e:	2b00      	cmp	r3, #0
 8022770:	da0a      	bge.n	8022788 <arm_softmax_s8+0xa78>
 8022772:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8022776:	1851      	adds	r1, r2, r1
 8022778:	f8c7 1290 	str.w	r1, [r7, #656]	; 0x290
 802277c:	f143 0300 	adc.w	r3, r3, #0
 8022780:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 8022784:	e9d7 23a4 	ldrd	r2, r3, [r7, #656]	; 0x290
 8022788:	f04f 0000 	mov.w	r0, #0
 802278c:	f04f 0100 	mov.w	r1, #0
 8022790:	0fd0      	lsrs	r0, r2, #31
 8022792:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8022796:	17d9      	asrs	r1, r3, #31
 8022798:	4602      	mov	r2, r0
 802279a:	460b      	mov	r3, r1
 802279c:	4613      	mov	r3, r2
 802279e:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80227a2:	f8d7 28c0 	ldr.w	r2, [r7, #2240]	; 0x8c0
 80227a6:	4b1c      	ldr	r3, [pc, #112]	; (8022818 <arm_softmax_s8+0xb08>)
 80227a8:	429a      	cmp	r2, r3
 80227aa:	d108      	bne.n	80227be <arm_softmax_s8+0xaae>
 80227ac:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 80227b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80227b4:	d103      	bne.n	80227be <arm_softmax_s8+0xaae>
        result = Q31_MAX;
 80227b6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80227ba:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
    return result;
 80227be:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
    SELECT_IF_NON_ZERO(1672461947)
 80227c2:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 80227c6:	ea02 0103 	and.w	r1, r2, r3
 80227ca:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 80227ce:	43da      	mvns	r2, r3
 80227d0:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80227d4:	4013      	ands	r3, r2
 80227d6:	404b      	eors	r3, r1
 80227d8:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    SELECT_IF_NON_ZERO(1302514674)
 80227dc:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 80227e0:	1c53      	adds	r3, r2, #1
 80227e2:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 80227e6:	2301      	movs	r3, #1
 80227e8:	fa03 f202 	lsl.w	r2, r3, r2
 80227ec:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 80227f0:	4013      	ands	r3, r2
 80227f2:	2b00      	cmp	r3, #0
 80227f4:	d016      	beq.n	8022824 <arm_softmax_s8+0xb14>
 80227f6:	f04f 33ff 	mov.w	r3, #4294967295
 80227fa:	e014      	b.n	8022826 <arm_softmax_s8+0xb16>
 80227fc:	f3af 8000 	nop.w
 8022800:	70f5a894 	.word	0x70f5a894
 8022804:	00000000 	.word	0x00000000
 8022808:	63afbe7b 	.word	0x63afbe7b
 802280c:	00000000 	.word	0x00000000
 8022810:	2aaaaaab 	.word	0x2aaaaaab
 8022814:	70f5a894 	.word	0x70f5a894
 8022818:	63afbe7b 	.word	0x63afbe7b
 802281c:	2aaaaaab 	.word	0x2aaaaaab
 8022820:	00000000 	.word	0x00000000
 8022824:	2300      	movs	r3, #0
 8022826:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 802282a:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 802282e:	f8c7 38ac 	str.w	r3, [r7, #2220]	; 0x8ac
    q31_t result = 0;
 8022832:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022836:	f5a3 7280 	sub.w	r2, r3, #256	; 0x100
 802283a:	2300      	movs	r3, #0
 802283c:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 802283e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8022842:	f04f 0300 	mov.w	r3, #0
 8022846:	f507 610a 	add.w	r1, r7, #2208	; 0x8a0
 802284a:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 802284e:	f8d7 38ac 	ldr.w	r3, [r7, #2220]	; 0x8ac
 8022852:	0fdb      	lsrs	r3, r3, #31
 8022854:	b2da      	uxtb	r2, r3
 8022856:	2300      	movs	r3, #0
 8022858:	4053      	eors	r3, r2
 802285a:	b2db      	uxtb	r3, r3
 802285c:	2b00      	cmp	r3, #0
 802285e:	d012      	beq.n	8022886 <arm_softmax_s8+0xb76>
        mult = 1 - mult;
 8022860:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 8022864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022868:	2100      	movs	r1, #0
 802286a:	f1d2 0001 	rsbs	r0, r2, #1
 802286e:	f8c7 0288 	str.w	r0, [r7, #648]	; 0x288
 8022872:	eb61 0303 	sbc.w	r3, r1, r3
 8022876:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 802287a:	e9d7 34a2 	ldrd	r3, r4, [r7, #648]	; 0x288
 802287e:	f507 620a 	add.w	r2, r7, #2208	; 0x8a0
 8022882:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8022886:	f8d7 38ac 	ldr.w	r3, [r7, #2220]	; 0x8ac
 802288a:	17da      	asrs	r2, r3, #31
 802288c:	f8c7 3490 	str.w	r3, [r7, #1168]	; 0x490
 8022890:	f8c7 2494 	str.w	r2, [r7, #1172]	; 0x494
 8022894:	a3a8      	add	r3, pc, #672	; (adr r3, 8022b38 <arm_softmax_s8+0xe28>)
 8022896:	e9d3 2300 	ldrd	r2, r3, [r3]
 802289a:	f8d7 1494 	ldr.w	r1, [r7, #1172]	; 0x494
 802289e:	fb02 f001 	mul.w	r0, r2, r1
 80228a2:	f8d7 1490 	ldr.w	r1, [r7, #1168]	; 0x490
 80228a6:	fb01 f103 	mul.w	r1, r1, r3
 80228aa:	4401      	add	r1, r0
 80228ac:	f8d7 0490 	ldr.w	r0, [r7, #1168]	; 0x490
 80228b0:	fba0 2302 	umull	r2, r3, r0, r2
 80228b4:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
 80228b8:	4613      	mov	r3, r2
 80228ba:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
 80228be:	f8d7 35bc 	ldr.w	r3, [r7, #1468]	; 0x5bc
 80228c2:	18cb      	adds	r3, r1, r3
 80228c4:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
 80228c8:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 80228cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80228d0:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 80228d4:	1851      	adds	r1, r2, r1
 80228d6:	f8c7 1280 	str.w	r1, [r7, #640]	; 0x280
 80228da:	f8d7 15bc 	ldr.w	r1, [r7, #1468]	; 0x5bc
 80228de:	414b      	adcs	r3, r1
 80228e0:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 80228e4:	e9d7 34a0 	ldrd	r3, r4, [r7, #640]	; 0x280
 80228e8:	f507 620a 	add.w	r2, r7, #2208	; 0x8a0
 80228ec:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 80228f0:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 80228f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80228f8:	2b00      	cmp	r3, #0
 80228fa:	da0a      	bge.n	8022912 <arm_softmax_s8+0xc02>
 80228fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8022900:	1851      	adds	r1, r2, r1
 8022902:	f8c7 1278 	str.w	r1, [r7, #632]	; 0x278
 8022906:	f143 0300 	adc.w	r3, r3, #0
 802290a:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
 802290e:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 8022912:	f04f 0000 	mov.w	r0, #0
 8022916:	f04f 0100 	mov.w	r1, #0
 802291a:	0fd0      	lsrs	r0, r2, #31
 802291c:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8022920:	17d9      	asrs	r1, r3, #31
 8022922:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022926:	f5a3 7280 	sub.w	r2, r3, #256	; 0x100
 802292a:	4603      	mov	r3, r0
 802292c:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 802292e:	f8d7 28ac 	ldr.w	r2, [r7, #2220]	; 0x8ac
 8022932:	4b7f      	ldr	r3, [pc, #508]	; (8022b30 <arm_softmax_s8+0xe20>)
 8022934:	429a      	cmp	r2, r3
 8022936:	d10b      	bne.n	8022950 <arm_softmax_s8+0xc40>
 8022938:	f8d7 38ac 	ldr.w	r3, [r7, #2220]	; 0x8ac
 802293c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8022940:	d106      	bne.n	8022950 <arm_softmax_s8+0xc40>
        result = Q31_MAX;
 8022942:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022946:	f5a3 7280 	sub.w	r2, r3, #256	; 0x100
 802294a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 802294e:	6013      	str	r3, [r2, #0]
    return result;
 8022950:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022954:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8022958:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(1302514674)
 802295a:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 802295e:	ea02 0103 	and.w	r1, r2, r3
 8022962:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 8022966:	43da      	mvns	r2, r3
 8022968:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 802296c:	4013      	ands	r3, r2
 802296e:	404b      	eors	r3, r1
 8022970:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    SELECT_IF_NON_ZERO(790015084)
 8022974:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 8022978:	1c53      	adds	r3, r2, #1
 802297a:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 802297e:	2301      	movs	r3, #1
 8022980:	fa03 f202 	lsl.w	r2, r3, r2
 8022984:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8022988:	4013      	ands	r3, r2
 802298a:	2b00      	cmp	r3, #0
 802298c:	d002      	beq.n	8022994 <arm_softmax_s8+0xc84>
 802298e:	f04f 33ff 	mov.w	r3, #4294967295
 8022992:	e000      	b.n	8022996 <arm_softmax_s8+0xc86>
 8022994:	2300      	movs	r3, #0
 8022996:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 802299a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802299e:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 80229a2:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80229a6:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80229a8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80229ac:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 80229b0:	2300      	movs	r3, #0
 80229b2:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80229b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80229b8:	f04f 0300 	mov.w	r3, #0
 80229bc:	f507 6109 	add.w	r1, r7, #2192	; 0x890
 80229c0:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80229c4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80229c8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80229cc:	681b      	ldr	r3, [r3, #0]
 80229ce:	0fdb      	lsrs	r3, r3, #31
 80229d0:	b2da      	uxtb	r2, r3
 80229d2:	2300      	movs	r3, #0
 80229d4:	4053      	eors	r3, r2
 80229d6:	b2db      	uxtb	r3, r3
 80229d8:	2b00      	cmp	r3, #0
 80229da:	d012      	beq.n	8022a02 <arm_softmax_s8+0xcf2>
        mult = 1 - mult;
 80229dc:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 80229e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80229e4:	2100      	movs	r1, #0
 80229e6:	f1d2 0001 	rsbs	r0, r2, #1
 80229ea:	f8c7 0270 	str.w	r0, [r7, #624]	; 0x270
 80229ee:	eb61 0303 	sbc.w	r3, r1, r3
 80229f2:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
 80229f6:	e9d7 349c 	ldrd	r3, r4, [r7, #624]	; 0x270
 80229fa:	f507 6209 	add.w	r2, r7, #2192	; 0x890
 80229fe:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8022a02:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022a06:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8022a0a:	681b      	ldr	r3, [r3, #0]
 8022a0c:	17da      	asrs	r2, r3, #31
 8022a0e:	f8c7 3488 	str.w	r3, [r7, #1160]	; 0x488
 8022a12:	f8c7 248c 	str.w	r2, [r7, #1164]	; 0x48c
 8022a16:	a344      	add	r3, pc, #272	; (adr r3, 8022b28 <arm_softmax_s8+0xe18>)
 8022a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022a1c:	f8d7 148c 	ldr.w	r1, [r7, #1164]	; 0x48c
 8022a20:	fb02 f001 	mul.w	r0, r2, r1
 8022a24:	f8d7 1488 	ldr.w	r1, [r7, #1160]	; 0x488
 8022a28:	fb01 f103 	mul.w	r1, r1, r3
 8022a2c:	4401      	add	r1, r0
 8022a2e:	f8d7 0488 	ldr.w	r0, [r7, #1160]	; 0x488
 8022a32:	fba0 2302 	umull	r2, r3, r0, r2
 8022a36:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
 8022a3a:	4613      	mov	r3, r2
 8022a3c:	f8c7 35b0 	str.w	r3, [r7, #1456]	; 0x5b0
 8022a40:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 8022a44:	18cb      	adds	r3, r1, r3
 8022a46:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
 8022a4a:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 8022a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022a52:	f8d7 15b0 	ldr.w	r1, [r7, #1456]	; 0x5b0
 8022a56:	1851      	adds	r1, r2, r1
 8022a58:	f8c7 1268 	str.w	r1, [r7, #616]	; 0x268
 8022a5c:	f8d7 15b4 	ldr.w	r1, [r7, #1460]	; 0x5b4
 8022a60:	414b      	adcs	r3, r1
 8022a62:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
 8022a66:	e9d7 349a 	ldrd	r3, r4, [r7, #616]	; 0x268
 8022a6a:	f507 6209 	add.w	r2, r7, #2192	; 0x890
 8022a6e:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8022a72:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 8022a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022a7a:	2b00      	cmp	r3, #0
 8022a7c:	da0a      	bge.n	8022a94 <arm_softmax_s8+0xd84>
 8022a7e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8022a82:	1851      	adds	r1, r2, r1
 8022a84:	f8c7 1260 	str.w	r1, [r7, #608]	; 0x260
 8022a88:	f143 0300 	adc.w	r3, r3, #0
 8022a8c:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 8022a90:	e9d7 2398 	ldrd	r2, r3, [r7, #608]	; 0x260
 8022a94:	f04f 0000 	mov.w	r0, #0
 8022a98:	f04f 0100 	mov.w	r1, #0
 8022a9c:	0fd0      	lsrs	r0, r2, #31
 8022a9e:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8022aa2:	17d9      	asrs	r1, r3, #31
 8022aa4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022aa8:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 8022aac:	4603      	mov	r3, r0
 8022aae:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8022ab0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022ab4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8022ab8:	681a      	ldr	r2, [r3, #0]
 8022aba:	4b1e      	ldr	r3, [pc, #120]	; (8022b34 <arm_softmax_s8+0xe24>)
 8022abc:	429a      	cmp	r2, r3
 8022abe:	d10e      	bne.n	8022ade <arm_softmax_s8+0xdce>
 8022ac0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022ac4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8022ac8:	681b      	ldr	r3, [r3, #0]
 8022aca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8022ace:	d106      	bne.n	8022ade <arm_softmax_s8+0xdce>
        result = Q31_MAX;
 8022ad0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022ad4:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 8022ad8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8022adc:	6013      	str	r3, [r2, #0]
    return result;
 8022ade:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022ae2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8022ae6:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(790015084)
 8022ae8:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 8022aec:	ea02 0103 	and.w	r1, r2, r3
 8022af0:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 8022af4:	43da      	mvns	r2, r3
 8022af6:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8022afa:	4013      	ands	r3, r2
 8022afc:	404b      	eors	r3, r1
 8022afe:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    SELECT_IF_NON_ZERO(290630308)
 8022b02:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 8022b06:	1c53      	adds	r3, r2, #1
 8022b08:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 8022b0c:	2301      	movs	r3, #1
 8022b0e:	fa03 f202 	lsl.w	r2, r3, r2
 8022b12:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8022b16:	4013      	ands	r3, r2
 8022b18:	2b00      	cmp	r3, #0
 8022b1a:	d011      	beq.n	8022b40 <arm_softmax_s8+0xe30>
 8022b1c:	f04f 33ff 	mov.w	r3, #4294967295
 8022b20:	e00f      	b.n	8022b42 <arm_softmax_s8+0xe32>
 8022b22:	bf00      	nop
 8022b24:	f3af 8000 	nop.w
 8022b28:	2f16ac6c 	.word	0x2f16ac6c
 8022b2c:	00000000 	.word	0x00000000
 8022b30:	4da2cbf2 	.word	0x4da2cbf2
 8022b34:	2f16ac6c 	.word	0x2f16ac6c
 8022b38:	4da2cbf2 	.word	0x4da2cbf2
 8022b3c:	00000000 	.word	0x00000000
 8022b40:	2300      	movs	r3, #0
 8022b42:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 8022b46:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022b4a:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 8022b4e:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8022b52:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8022b54:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022b58:	f5a3 7290 	sub.w	r2, r3, #288	; 0x120
 8022b5c:	2300      	movs	r3, #0
 8022b5e:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8022b60:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8022b64:	f04f 0300 	mov.w	r3, #0
 8022b68:	f507 6108 	add.w	r1, r7, #2176	; 0x880
 8022b6c:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8022b70:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022b74:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8022b78:	681b      	ldr	r3, [r3, #0]
 8022b7a:	0fdb      	lsrs	r3, r3, #31
 8022b7c:	b2da      	uxtb	r2, r3
 8022b7e:	2300      	movs	r3, #0
 8022b80:	4053      	eors	r3, r2
 8022b82:	b2db      	uxtb	r3, r3
 8022b84:	2b00      	cmp	r3, #0
 8022b86:	d012      	beq.n	8022bae <arm_softmax_s8+0xe9e>
        mult = 1 - mult;
 8022b88:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8022b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022b90:	2100      	movs	r1, #0
 8022b92:	f1d2 0001 	rsbs	r0, r2, #1
 8022b96:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
 8022b9a:	eb61 0303 	sbc.w	r3, r1, r3
 8022b9e:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 8022ba2:	e9d7 3496 	ldrd	r3, r4, [r7, #600]	; 0x258
 8022ba6:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 8022baa:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8022bae:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022bb2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8022bb6:	681b      	ldr	r3, [r3, #0]
 8022bb8:	17da      	asrs	r2, r3, #31
 8022bba:	f8c7 3480 	str.w	r3, [r7, #1152]	; 0x480
 8022bbe:	f8c7 2484 	str.w	r2, [r7, #1156]	; 0x484
 8022bc2:	a3ab      	add	r3, pc, #684	; (adr r3, 8022e70 <arm_softmax_s8+0x1160>)
 8022bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022bc8:	f8d7 1484 	ldr.w	r1, [r7, #1156]	; 0x484
 8022bcc:	fb02 f001 	mul.w	r0, r2, r1
 8022bd0:	f8d7 1480 	ldr.w	r1, [r7, #1152]	; 0x480
 8022bd4:	fb01 f103 	mul.w	r1, r1, r3
 8022bd8:	4401      	add	r1, r0
 8022bda:	f8d7 0480 	ldr.w	r0, [r7, #1152]	; 0x480
 8022bde:	fba0 2302 	umull	r2, r3, r0, r2
 8022be2:	f8c7 35ac 	str.w	r3, [r7, #1452]	; 0x5ac
 8022be6:	4613      	mov	r3, r2
 8022be8:	f8c7 35a8 	str.w	r3, [r7, #1448]	; 0x5a8
 8022bec:	f8d7 35ac 	ldr.w	r3, [r7, #1452]	; 0x5ac
 8022bf0:	18cb      	adds	r3, r1, r3
 8022bf2:	f8c7 35ac 	str.w	r3, [r7, #1452]	; 0x5ac
 8022bf6:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8022bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022bfe:	f8d7 15a8 	ldr.w	r1, [r7, #1448]	; 0x5a8
 8022c02:	1851      	adds	r1, r2, r1
 8022c04:	f8c7 1250 	str.w	r1, [r7, #592]	; 0x250
 8022c08:	f8d7 15ac 	ldr.w	r1, [r7, #1452]	; 0x5ac
 8022c0c:	414b      	adcs	r3, r1
 8022c0e:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 8022c12:	e9d7 3494 	ldrd	r3, r4, [r7, #592]	; 0x250
 8022c16:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 8022c1a:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8022c1e:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8022c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022c26:	2b00      	cmp	r3, #0
 8022c28:	da0a      	bge.n	8022c40 <arm_softmax_s8+0xf30>
 8022c2a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8022c2e:	1851      	adds	r1, r2, r1
 8022c30:	f8c7 1248 	str.w	r1, [r7, #584]	; 0x248
 8022c34:	f143 0300 	adc.w	r3, r3, #0
 8022c38:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8022c3c:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 8022c40:	f04f 0000 	mov.w	r0, #0
 8022c44:	f04f 0100 	mov.w	r1, #0
 8022c48:	0fd0      	lsrs	r0, r2, #31
 8022c4a:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8022c4e:	17d9      	asrs	r1, r3, #31
 8022c50:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022c54:	f5a3 7290 	sub.w	r2, r3, #288	; 0x120
 8022c58:	4603      	mov	r3, r0
 8022c5a:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8022c5c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022c60:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8022c64:	681a      	ldr	r2, [r3, #0]
 8022c66:	4b80      	ldr	r3, [pc, #512]	; (8022e68 <arm_softmax_s8+0x1158>)
 8022c68:	429a      	cmp	r2, r3
 8022c6a:	d10e      	bne.n	8022c8a <arm_softmax_s8+0xf7a>
 8022c6c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022c70:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8022c74:	681b      	ldr	r3, [r3, #0]
 8022c76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8022c7a:	d106      	bne.n	8022c8a <arm_softmax_s8+0xf7a>
        result = Q31_MAX;
 8022c7c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022c80:	f5a3 7290 	sub.w	r2, r3, #288	; 0x120
 8022c84:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8022c88:	6013      	str	r3, [r2, #0]
    return result;
 8022c8a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022c8e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8022c92:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(290630308)
 8022c94:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 8022c98:	ea02 0103 	and.w	r1, r2, r3
 8022c9c:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 8022ca0:	43da      	mvns	r2, r3
 8022ca2:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8022ca6:	4013      	ands	r3, r2
 8022ca8:	404b      	eors	r3, r1
 8022caa:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    SELECT_IF_NON_ZERO(39332535)
 8022cae:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 8022cb2:	1c53      	adds	r3, r2, #1
 8022cb4:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 8022cb8:	2301      	movs	r3, #1
 8022cba:	fa03 f202 	lsl.w	r2, r3, r2
 8022cbe:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8022cc2:	4013      	ands	r3, r2
 8022cc4:	2b00      	cmp	r3, #0
 8022cc6:	d002      	beq.n	8022cce <arm_softmax_s8+0xfbe>
 8022cc8:	f04f 33ff 	mov.w	r3, #4294967295
 8022ccc:	e000      	b.n	8022cd0 <arm_softmax_s8+0xfc0>
 8022cce:	2300      	movs	r3, #0
 8022cd0:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 8022cd4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022cd8:	f5a3 7296 	sub.w	r2, r3, #300	; 0x12c
 8022cdc:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8022ce0:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8022ce2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022ce6:	f5a3 7298 	sub.w	r2, r3, #304	; 0x130
 8022cea:	2300      	movs	r3, #0
 8022cec:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8022cee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8022cf2:	f04f 0300 	mov.w	r3, #0
 8022cf6:	f507 6107 	add.w	r1, r7, #2160	; 0x870
 8022cfa:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8022cfe:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022d02:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8022d06:	681b      	ldr	r3, [r3, #0]
 8022d08:	0fdb      	lsrs	r3, r3, #31
 8022d0a:	b2da      	uxtb	r2, r3
 8022d0c:	2300      	movs	r3, #0
 8022d0e:	4053      	eors	r3, r2
 8022d10:	b2db      	uxtb	r3, r3
 8022d12:	2b00      	cmp	r3, #0
 8022d14:	d012      	beq.n	8022d3c <arm_softmax_s8+0x102c>
        mult = 1 - mult;
 8022d16:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 8022d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022d1e:	2100      	movs	r1, #0
 8022d20:	f1d2 0001 	rsbs	r0, r2, #1
 8022d24:	f8c7 0240 	str.w	r0, [r7, #576]	; 0x240
 8022d28:	eb61 0303 	sbc.w	r3, r1, r3
 8022d2c:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 8022d30:	e9d7 3490 	ldrd	r3, r4, [r7, #576]	; 0x240
 8022d34:	f507 6207 	add.w	r2, r7, #2160	; 0x870
 8022d38:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8022d3c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022d40:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8022d44:	681b      	ldr	r3, [r3, #0]
 8022d46:	17da      	asrs	r2, r3, #31
 8022d48:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
 8022d4c:	f8c7 247c 	str.w	r2, [r7, #1148]	; 0x47c
 8022d50:	a343      	add	r3, pc, #268	; (adr r3, 8022e60 <arm_softmax_s8+0x1150>)
 8022d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022d56:	f8d7 147c 	ldr.w	r1, [r7, #1148]	; 0x47c
 8022d5a:	fb02 f001 	mul.w	r0, r2, r1
 8022d5e:	f8d7 1478 	ldr.w	r1, [r7, #1144]	; 0x478
 8022d62:	fb01 f103 	mul.w	r1, r1, r3
 8022d66:	4401      	add	r1, r0
 8022d68:	f8d7 0478 	ldr.w	r0, [r7, #1144]	; 0x478
 8022d6c:	fba0 2302 	umull	r2, r3, r0, r2
 8022d70:	f8c7 35a4 	str.w	r3, [r7, #1444]	; 0x5a4
 8022d74:	4613      	mov	r3, r2
 8022d76:	f8c7 35a0 	str.w	r3, [r7, #1440]	; 0x5a0
 8022d7a:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	; 0x5a4
 8022d7e:	18cb      	adds	r3, r1, r3
 8022d80:	f8c7 35a4 	str.w	r3, [r7, #1444]	; 0x5a4
 8022d84:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 8022d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022d8c:	f8d7 15a0 	ldr.w	r1, [r7, #1440]	; 0x5a0
 8022d90:	1851      	adds	r1, r2, r1
 8022d92:	f8c7 1238 	str.w	r1, [r7, #568]	; 0x238
 8022d96:	f8d7 15a4 	ldr.w	r1, [r7, #1444]	; 0x5a4
 8022d9a:	414b      	adcs	r3, r1
 8022d9c:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 8022da0:	e9d7 348e 	ldrd	r3, r4, [r7, #568]	; 0x238
 8022da4:	f507 6207 	add.w	r2, r7, #2160	; 0x870
 8022da8:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8022dac:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 8022db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022db4:	2b00      	cmp	r3, #0
 8022db6:	da0a      	bge.n	8022dce <arm_softmax_s8+0x10be>
 8022db8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8022dbc:	1851      	adds	r1, r2, r1
 8022dbe:	f8c7 1230 	str.w	r1, [r7, #560]	; 0x230
 8022dc2:	f143 0300 	adc.w	r3, r3, #0
 8022dc6:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
 8022dca:	e9d7 238c 	ldrd	r2, r3, [r7, #560]	; 0x230
 8022dce:	f04f 0000 	mov.w	r0, #0
 8022dd2:	f04f 0100 	mov.w	r1, #0
 8022dd6:	0fd0      	lsrs	r0, r2, #31
 8022dd8:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8022ddc:	17d9      	asrs	r1, r3, #31
 8022dde:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022de2:	f5a3 7298 	sub.w	r2, r3, #304	; 0x130
 8022de6:	4603      	mov	r3, r0
 8022de8:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8022dea:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022dee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8022df2:	681a      	ldr	r2, [r3, #0]
 8022df4:	4b1d      	ldr	r3, [pc, #116]	; (8022e6c <arm_softmax_s8+0x115c>)
 8022df6:	429a      	cmp	r2, r3
 8022df8:	d10e      	bne.n	8022e18 <arm_softmax_s8+0x1108>
 8022dfa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022dfe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8022e02:	681b      	ldr	r3, [r3, #0]
 8022e04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8022e08:	d106      	bne.n	8022e18 <arm_softmax_s8+0x1108>
        result = Q31_MAX;
 8022e0a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022e0e:	f5a3 7298 	sub.w	r2, r3, #304	; 0x130
 8022e12:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8022e16:	6013      	str	r3, [r2, #0]
    return result;
 8022e18:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022e1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8022e20:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(39332535)
 8022e22:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 8022e26:	ea02 0103 	and.w	r1, r2, r3
 8022e2a:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 8022e2e:	43da      	mvns	r2, r3
 8022e30:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8022e34:	4013      	ands	r3, r2
 8022e36:	404b      	eors	r3, r1
 8022e38:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    SELECT_IF_NON_ZERO(720401)
 8022e3c:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 8022e40:	1c53      	adds	r3, r2, #1
 8022e42:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 8022e46:	2301      	movs	r3, #1
 8022e48:	fa03 f202 	lsl.w	r2, r3, r2
 8022e4c:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8022e50:	4013      	ands	r3, r2
 8022e52:	2b00      	cmp	r3, #0
 8022e54:	d010      	beq.n	8022e78 <arm_softmax_s8+0x1168>
 8022e56:	f04f 33ff 	mov.w	r3, #4294967295
 8022e5a:	e00e      	b.n	8022e7a <arm_softmax_s8+0x116a>
 8022e5c:	f3af 8000 	nop.w
 8022e60:	02582ab7 	.word	0x02582ab7
 8022e64:	00000000 	.word	0x00000000
 8022e68:	1152aaa4 	.word	0x1152aaa4
 8022e6c:	02582ab7 	.word	0x02582ab7
 8022e70:	1152aaa4 	.word	0x1152aaa4
 8022e74:	00000000 	.word	0x00000000
 8022e78:	2300      	movs	r3, #0
 8022e7a:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 8022e7e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022e82:	f5a3 729e 	sub.w	r2, r3, #316	; 0x13c
 8022e86:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8022e8a:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8022e8c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022e90:	f5a3 72a0 	sub.w	r2, r3, #320	; 0x140
 8022e94:	2300      	movs	r3, #0
 8022e96:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8022e98:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8022e9c:	f04f 0300 	mov.w	r3, #0
 8022ea0:	f507 6106 	add.w	r1, r7, #2144	; 0x860
 8022ea4:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8022ea8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022eac:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8022eb0:	681b      	ldr	r3, [r3, #0]
 8022eb2:	0fdb      	lsrs	r3, r3, #31
 8022eb4:	b2da      	uxtb	r2, r3
 8022eb6:	2300      	movs	r3, #0
 8022eb8:	4053      	eors	r3, r2
 8022eba:	b2db      	uxtb	r3, r3
 8022ebc:	2b00      	cmp	r3, #0
 8022ebe:	d012      	beq.n	8022ee6 <arm_softmax_s8+0x11d6>
        mult = 1 - mult;
 8022ec0:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 8022ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022ec8:	2100      	movs	r1, #0
 8022eca:	f1d2 0001 	rsbs	r0, r2, #1
 8022ece:	f8c7 0228 	str.w	r0, [r7, #552]	; 0x228
 8022ed2:	eb61 0303 	sbc.w	r3, r1, r3
 8022ed6:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 8022eda:	e9d7 348a 	ldrd	r3, r4, [r7, #552]	; 0x228
 8022ede:	f507 6206 	add.w	r2, r7, #2144	; 0x860
 8022ee2:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8022ee6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022eea:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8022eee:	681b      	ldr	r3, [r3, #0]
 8022ef0:	17da      	asrs	r2, r3, #31
 8022ef2:	f8c7 3470 	str.w	r3, [r7, #1136]	; 0x470
 8022ef6:	f8c7 2474 	str.w	r2, [r7, #1140]	; 0x474
 8022efa:	4ad3      	ldr	r2, [pc, #844]	; (8023248 <arm_softmax_s8+0x1538>)
 8022efc:	f04f 0300 	mov.w	r3, #0
 8022f00:	f8d7 1474 	ldr.w	r1, [r7, #1140]	; 0x474
 8022f04:	fb02 f001 	mul.w	r0, r2, r1
 8022f08:	f8d7 1470 	ldr.w	r1, [r7, #1136]	; 0x470
 8022f0c:	fb01 f103 	mul.w	r1, r1, r3
 8022f10:	4401      	add	r1, r0
 8022f12:	f8d7 0470 	ldr.w	r0, [r7, #1136]	; 0x470
 8022f16:	fba0 2302 	umull	r2, r3, r0, r2
 8022f1a:	f8c7 359c 	str.w	r3, [r7, #1436]	; 0x59c
 8022f1e:	4613      	mov	r3, r2
 8022f20:	f8c7 3598 	str.w	r3, [r7, #1432]	; 0x598
 8022f24:	f8d7 359c 	ldr.w	r3, [r7, #1436]	; 0x59c
 8022f28:	18cb      	adds	r3, r1, r3
 8022f2a:	f8c7 359c 	str.w	r3, [r7, #1436]	; 0x59c
 8022f2e:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 8022f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022f36:	f8d7 1598 	ldr.w	r1, [r7, #1432]	; 0x598
 8022f3a:	1851      	adds	r1, r2, r1
 8022f3c:	f8c7 1220 	str.w	r1, [r7, #544]	; 0x220
 8022f40:	f8d7 159c 	ldr.w	r1, [r7, #1436]	; 0x59c
 8022f44:	414b      	adcs	r3, r1
 8022f46:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 8022f4a:	e9d7 3488 	ldrd	r3, r4, [r7, #544]	; 0x220
 8022f4e:	f507 6206 	add.w	r2, r7, #2144	; 0x860
 8022f52:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8022f56:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 8022f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022f5e:	2b00      	cmp	r3, #0
 8022f60:	da0a      	bge.n	8022f78 <arm_softmax_s8+0x1268>
 8022f62:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8022f66:	1851      	adds	r1, r2, r1
 8022f68:	f8c7 1218 	str.w	r1, [r7, #536]	; 0x218
 8022f6c:	f143 0300 	adc.w	r3, r3, #0
 8022f70:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8022f74:	e9d7 2386 	ldrd	r2, r3, [r7, #536]	; 0x218
 8022f78:	f04f 0000 	mov.w	r0, #0
 8022f7c:	f04f 0100 	mov.w	r1, #0
 8022f80:	0fd0      	lsrs	r0, r2, #31
 8022f82:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8022f86:	17d9      	asrs	r1, r3, #31
 8022f88:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022f8c:	f5a3 72a0 	sub.w	r2, r3, #320	; 0x140
 8022f90:	4603      	mov	r3, r0
 8022f92:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8022f94:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022f98:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8022f9c:	681a      	ldr	r2, [r3, #0]
 8022f9e:	4baa      	ldr	r3, [pc, #680]	; (8023248 <arm_softmax_s8+0x1538>)
 8022fa0:	429a      	cmp	r2, r3
 8022fa2:	d10e      	bne.n	8022fc2 <arm_softmax_s8+0x12b2>
 8022fa4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022fa8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8022fac:	681b      	ldr	r3, [r3, #0]
 8022fae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8022fb2:	d106      	bne.n	8022fc2 <arm_softmax_s8+0x12b2>
        result = Q31_MAX;
 8022fb4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022fb8:	f5a3 72a0 	sub.w	r2, r3, #320	; 0x140
 8022fbc:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8022fc0:	6013      	str	r3, [r2, #0]
    return result;
 8022fc2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022fc6:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8022fca:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(720401)
 8022fcc:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 8022fd0:	ea02 0103 	and.w	r1, r2, r3
 8022fd4:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 8022fd8:	43da      	mvns	r2, r3
 8022fda:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8022fde:	4013      	ands	r3, r2
 8022fe0:	404b      	eors	r3, r1
 8022fe2:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    SELECT_IF_NON_ZERO(242)
 8022fe6:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 8022fea:	1c53      	adds	r3, r2, #1
 8022fec:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 8022ff0:	2301      	movs	r3, #1
 8022ff2:	fa03 f202 	lsl.w	r2, r3, r2
 8022ff6:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8022ffa:	4013      	ands	r3, r2
 8022ffc:	2b00      	cmp	r3, #0
 8022ffe:	d002      	beq.n	8023006 <arm_softmax_s8+0x12f6>
 8023000:	f04f 33ff 	mov.w	r3, #4294967295
 8023004:	e000      	b.n	8023008 <arm_softmax_s8+0x12f8>
 8023006:	2300      	movs	r3, #0
 8023008:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 802300c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023010:	f5a3 72a6 	sub.w	r2, r3, #332	; 0x14c
 8023014:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8023018:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 802301a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802301e:	f5a3 72a8 	sub.w	r2, r3, #336	; 0x150
 8023022:	2300      	movs	r3, #0
 8023024:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8023026:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 802302a:	f04f 0300 	mov.w	r3, #0
 802302e:	f507 6105 	add.w	r1, r7, #2128	; 0x850
 8023032:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8023036:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802303a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 802303e:	681b      	ldr	r3, [r3, #0]
 8023040:	0fdb      	lsrs	r3, r3, #31
 8023042:	b2da      	uxtb	r2, r3
 8023044:	2300      	movs	r3, #0
 8023046:	4053      	eors	r3, r2
 8023048:	b2db      	uxtb	r3, r3
 802304a:	2b00      	cmp	r3, #0
 802304c:	d012      	beq.n	8023074 <arm_softmax_s8+0x1364>
        mult = 1 - mult;
 802304e:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 8023052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023056:	2100      	movs	r1, #0
 8023058:	f1d2 0001 	rsbs	r0, r2, #1
 802305c:	f8c7 0210 	str.w	r0, [r7, #528]	; 0x210
 8023060:	eb61 0303 	sbc.w	r3, r1, r3
 8023064:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 8023068:	e9d7 3484 	ldrd	r3, r4, [r7, #528]	; 0x210
 802306c:	f507 6205 	add.w	r2, r7, #2128	; 0x850
 8023070:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8023074:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023078:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 802307c:	681b      	ldr	r3, [r3, #0]
 802307e:	17da      	asrs	r2, r3, #31
 8023080:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
 8023084:	f8c7 246c 	str.w	r2, [r7, #1132]	; 0x46c
 8023088:	f04f 02f2 	mov.w	r2, #242	; 0xf2
 802308c:	f04f 0300 	mov.w	r3, #0
 8023090:	f8d7 146c 	ldr.w	r1, [r7, #1132]	; 0x46c
 8023094:	fb02 f001 	mul.w	r0, r2, r1
 8023098:	f8d7 1468 	ldr.w	r1, [r7, #1128]	; 0x468
 802309c:	fb01 f103 	mul.w	r1, r1, r3
 80230a0:	4401      	add	r1, r0
 80230a2:	f8d7 0468 	ldr.w	r0, [r7, #1128]	; 0x468
 80230a6:	fba0 2302 	umull	r2, r3, r0, r2
 80230aa:	f8c7 3594 	str.w	r3, [r7, #1428]	; 0x594
 80230ae:	4613      	mov	r3, r2
 80230b0:	f8c7 3590 	str.w	r3, [r7, #1424]	; 0x590
 80230b4:	f8d7 3594 	ldr.w	r3, [r7, #1428]	; 0x594
 80230b8:	18cb      	adds	r3, r1, r3
 80230ba:	f8c7 3594 	str.w	r3, [r7, #1428]	; 0x594
 80230be:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 80230c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80230c6:	f8d7 1590 	ldr.w	r1, [r7, #1424]	; 0x590
 80230ca:	1851      	adds	r1, r2, r1
 80230cc:	f8c7 1208 	str.w	r1, [r7, #520]	; 0x208
 80230d0:	f8d7 1594 	ldr.w	r1, [r7, #1428]	; 0x594
 80230d4:	414b      	adcs	r3, r1
 80230d6:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 80230da:	e9d7 3482 	ldrd	r3, r4, [r7, #520]	; 0x208
 80230de:	f507 6205 	add.w	r2, r7, #2128	; 0x850
 80230e2:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 80230e6:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 80230ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80230ee:	2b00      	cmp	r3, #0
 80230f0:	da0a      	bge.n	8023108 <arm_softmax_s8+0x13f8>
 80230f2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80230f6:	1851      	adds	r1, r2, r1
 80230f8:	f8c7 1200 	str.w	r1, [r7, #512]	; 0x200
 80230fc:	f143 0300 	adc.w	r3, r3, #0
 8023100:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8023104:	e9d7 2380 	ldrd	r2, r3, [r7, #512]	; 0x200
 8023108:	f04f 0000 	mov.w	r0, #0
 802310c:	f04f 0100 	mov.w	r1, #0
 8023110:	0fd0      	lsrs	r0, r2, #31
 8023112:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8023116:	17d9      	asrs	r1, r3, #31
 8023118:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802311c:	f5a3 72a8 	sub.w	r2, r3, #336	; 0x150
 8023120:	4603      	mov	r3, r0
 8023122:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8023124:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023128:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 802312c:	681b      	ldr	r3, [r3, #0]
 802312e:	2bf2      	cmp	r3, #242	; 0xf2
 8023130:	d10e      	bne.n	8023150 <arm_softmax_s8+0x1440>
 8023132:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023136:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 802313a:	681b      	ldr	r3, [r3, #0]
 802313c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8023140:	d106      	bne.n	8023150 <arm_softmax_s8+0x1440>
        result = Q31_MAX;
 8023142:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023146:	f5a3 72a8 	sub.w	r2, r3, #336	; 0x150
 802314a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 802314e:	6013      	str	r3, [r2, #0]
    return result;
 8023150:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023154:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8023158:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(242)
 802315a:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 802315e:	ea02 0103 	and.w	r1, r2, r3
 8023162:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 8023166:	43da      	mvns	r2, r3
 8023168:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 802316c:	4013      	ands	r3, r2
 802316e:	404b      	eors	r3, r1
 8023170:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    mask = MASK_IF_ZERO(val);
 8023174:	f8d7 3968 	ldr.w	r3, [r7, #2408]	; 0x968
 8023178:	2b00      	cmp	r3, #0
 802317a:	d102      	bne.n	8023182 <arm_softmax_s8+0x1472>
 802317c:	f04f 33ff 	mov.w	r3, #4294967295
 8023180:	e000      	b.n	8023184 <arm_softmax_s8+0x1474>
 8023182:	2300      	movs	r3, #0
 8023184:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
    return SELECT_USING_MASK(mask, Q31_MAX, result);
 8023188:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 802318c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8023190:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 8023194:	43da      	mvns	r2, r3
 8023196:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 802319a:	4013      	ands	r3, r2
 802319c:	404b      	eors	r3, r1
 802319e:	f8c7 397c 	str.w	r3, [r7, #2428]	; 0x97c
    q31_t result = 0;
 80231a2:	2300      	movs	r3, #0
 80231a4:	f8c7 3978 	str.w	r3, [r7, #2424]	; 0x978
    const q31_t remainder_mask = (1 << exponent) - 1;
 80231a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80231ac:	3b01      	subs	r3, #1
 80231ae:	f8c7 3974 	str.w	r3, [r7, #2420]	; 0x974
    int32_t remainder = remainder_mask & dividend;
 80231b2:	f8d7 297c 	ldr.w	r2, [r7, #2428]	; 0x97c
 80231b6:	f8d7 3974 	ldr.w	r3, [r7, #2420]	; 0x974
 80231ba:	4013      	ands	r3, r2
 80231bc:	f8c7 3970 	str.w	r3, [r7, #2416]	; 0x970
    result = dividend >> exponent;
 80231c0:	f8d7 397c 	ldr.w	r3, [r7, #2428]	; 0x97c
 80231c4:	131b      	asrs	r3, r3, #12
 80231c6:	f8c7 3978 	str.w	r3, [r7, #2424]	; 0x978
    q31_t threshold = remainder_mask >> 1;
 80231ca:	f8d7 3974 	ldr.w	r3, [r7, #2420]	; 0x974
 80231ce:	105b      	asrs	r3, r3, #1
 80231d0:	f8c7 396c 	str.w	r3, [r7, #2412]	; 0x96c
    if (result < 0)
 80231d4:	f8d7 3978 	ldr.w	r3, [r7, #2424]	; 0x978
 80231d8:	2b00      	cmp	r3, #0
 80231da:	da04      	bge.n	80231e6 <arm_softmax_s8+0x14d6>
        threshold++;
 80231dc:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 80231e0:	3301      	adds	r3, #1
 80231e2:	f8c7 396c 	str.w	r3, [r7, #2412]	; 0x96c
    if (remainder > threshold)
 80231e6:	f8d7 2970 	ldr.w	r2, [r7, #2416]	; 0x970
 80231ea:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 80231ee:	429a      	cmp	r2, r3
 80231f0:	dd04      	ble.n	80231fc <arm_softmax_s8+0x14ec>
        result++;
 80231f2:	f8d7 3978 	ldr.w	r3, [r7, #2424]	; 0x978
 80231f6:	3301      	adds	r3, #1
 80231f8:	f8c7 3978 	str.w	r3, [r7, #2424]	; 0x978
    return result;
 80231fc:	f8d7 2978 	ldr.w	r2, [r7, #2424]	; 0x978
 8023200:	f8d7 3998 	ldr.w	r3, [r7, #2456]	; 0x998
 8023204:	4413      	add	r3, r2
 8023206:	f8c7 3998 	str.w	r3, [r7, #2456]	; 0x998
        for (col = 0; col < row_size; ++col)
 802320a:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	; 0x9a4
 802320e:	3301      	adds	r3, #1
 8023210:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
 8023214:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023218:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 802321c:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 8023220:	681b      	ldr	r3, [r3, #0]
 8023222:	429a      	cmp	r2, r3
 8023224:	f6fe add2 	blt.w	8021dcc <arm_softmax_s8+0xbc>
            }
        }

        const int32_t headroom = __CLZ(sum);
 8023228:	f8d7 2998 	ldr.w	r2, [r7, #2456]	; 0x998
 802322c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023230:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8023234:	601a      	str	r2, [r3, #0]
  if (value == 0U)
 8023236:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802323a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 802323e:	681b      	ldr	r3, [r3, #0]
 8023240:	2b00      	cmp	r3, #0
 8023242:	d103      	bne.n	802324c <arm_softmax_s8+0x153c>
    return 32U;
 8023244:	2320      	movs	r3, #32
 8023246:	e009      	b.n	802325c <arm_softmax_s8+0x154c>
 8023248:	000afe11 	.word	0x000afe11
  return __builtin_clz(value);
 802324c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023250:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8023254:	681b      	ldr	r3, [r3, #0]
 8023256:	fab3 f383 	clz	r3, r3
 802325a:	b2db      	uxtb	r3, r3
 802325c:	f8c7 398c 	str.w	r3, [r7, #2444]	; 0x98c
        const int32_t bits_over_unit = ACCUM_BITS - headroom + 23;
 8023260:	f8d7 398c 	ldr.w	r3, [r7, #2444]	; 0x98c
 8023264:	f1c3 0323 	rsb	r3, r3, #35	; 0x23
 8023268:	f8c7 3988 	str.w	r3, [r7, #2440]	; 0x988
        const int32_t shifted_scale = ONE_OVER1((sum << headroom) - (1 << 31));
 802326c:	f8d7 2998 	ldr.w	r2, [r7, #2456]	; 0x998
 8023270:	f8d7 398c 	ldr.w	r3, [r7, #2444]	; 0x98c
 8023274:	fa02 f303 	lsl.w	r3, r2, r3
 8023278:	f103 4200 	add.w	r2, r3, #2147483648	; 0x80000000
 802327c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023280:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8023284:	601a      	str	r2, [r3, #0]
    const int64_t sum = (int64_t)val + (int64_t)Q31_MAX;
 8023286:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802328a:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 802328e:	681b      	ldr	r3, [r3, #0]
 8023290:	17da      	asrs	r2, r3, #31
 8023292:	f8c7 3340 	str.w	r3, [r7, #832]	; 0x340
 8023296:	f8c7 2344 	str.w	r2, [r7, #836]	; 0x344
 802329a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 802329e:	e9d7 01d0 	ldrd	r0, r1, [r7, #832]	; 0x340
 80232a2:	4602      	mov	r2, r0
 80232a4:	18d3      	adds	r3, r2, r3
 80232a6:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 80232aa:	460b      	mov	r3, r1
 80232ac:	f143 0300 	adc.w	r3, r3, #0
 80232b0:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 80232b4:	e9d7 347e 	ldrd	r3, r4, [r7, #504]	; 0x1f8
 80232b8:	f607 0228 	addw	r2, r7, #2088	; 0x828
 80232bc:	e9c2 3400 	strd	r3, r4, [r2]
    const int32_t half_denominator = (int32_t)((sum + (sum >= 0 ? 1 : -1)) / 2L);
 80232c0:	f607 0328 	addw	r3, r7, #2088	; 0x828
 80232c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80232c8:	2b00      	cmp	r3, #0
 80232ca:	db04      	blt.n	80232d6 <arm_softmax_s8+0x15c6>
 80232cc:	f04f 0001 	mov.w	r0, #1
 80232d0:	f04f 0100 	mov.w	r1, #0
 80232d4:	e003      	b.n	80232de <arm_softmax_s8+0x15ce>
 80232d6:	f04f 30ff 	mov.w	r0, #4294967295
 80232da:	f04f 31ff 	mov.w	r1, #4294967295
 80232de:	f607 0328 	addw	r3, r7, #2088	; 0x828
 80232e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80232e6:	1884      	adds	r4, r0, r2
 80232e8:	f8c7 4338 	str.w	r4, [r7, #824]	; 0x338
 80232ec:	eb41 0303 	adc.w	r3, r1, r3
 80232f0:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
 80232f4:	e9d7 01ce 	ldrd	r0, r1, [r7, #824]	; 0x338
 80232f8:	460b      	mov	r3, r1
 80232fa:	0fdb      	lsrs	r3, r3, #31
 80232fc:	2200      	movs	r2, #0
 80232fe:	f8c7 3348 	str.w	r3, [r7, #840]	; 0x348
 8023302:	f8c7 234c 	str.w	r2, [r7, #844]	; 0x34c
 8023306:	f8d7 3348 	ldr.w	r3, [r7, #840]	; 0x348
 802330a:	4602      	mov	r2, r0
 802330c:	189b      	adds	r3, r3, r2
 802330e:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 8023312:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8023316:	460a      	mov	r2, r1
 8023318:	4153      	adcs	r3, r2
 802331a:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 802331e:	f04f 0200 	mov.w	r2, #0
 8023322:	f04f 0300 	mov.w	r3, #0
 8023326:	f8d7 1350 	ldr.w	r1, [r7, #848]	; 0x350
 802332a:	084a      	lsrs	r2, r1, #1
 802332c:	f8d7 1354 	ldr.w	r1, [r7, #852]	; 0x354
 8023330:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8023334:	f8d7 1354 	ldr.w	r1, [r7, #852]	; 0x354
 8023338:	104b      	asrs	r3, r1, #1
 802333a:	4610      	mov	r0, r2
 802333c:	4619      	mov	r1, r3
 802333e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023342:	f5a3 72c2 	sub.w	r2, r3, #388	; 0x184
 8023346:	4603      	mov	r3, r0
 8023348:	6013      	str	r3, [r2, #0]
 802334a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802334e:	f5a3 72c4 	sub.w	r2, r3, #392	; 0x188
 8023352:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023356:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 802335a:	681b      	ldr	r3, [r3, #0]
 802335c:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 802335e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023362:	f5a3 72c6 	sub.w	r2, r3, #396	; 0x18c
 8023366:	2300      	movs	r3, #0
 8023368:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 802336a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 802336e:	f04f 0300 	mov.w	r3, #0
 8023372:	f507 6101 	add.w	r1, r7, #2064	; 0x810
 8023376:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 802337a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802337e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8023382:	681b      	ldr	r3, [r3, #0]
 8023384:	0fdb      	lsrs	r3, r3, #31
 8023386:	b2da      	uxtb	r2, r3
 8023388:	2301      	movs	r3, #1
 802338a:	4053      	eors	r3, r2
 802338c:	b2db      	uxtb	r3, r3
 802338e:	2b00      	cmp	r3, #0
 8023390:	d012      	beq.n	80233b8 <arm_softmax_s8+0x16a8>
        mult = 1 - mult;
 8023392:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8023396:	e9d3 2300 	ldrd	r2, r3, [r3]
 802339a:	2100      	movs	r1, #0
 802339c:	f1d2 0001 	rsbs	r0, r2, #1
 80233a0:	f8c7 01f0 	str.w	r0, [r7, #496]	; 0x1f0
 80233a4:	eb61 0303 	sbc.w	r3, r1, r3
 80233a8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 80233ac:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 80233b0:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 80233b4:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80233b8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80233bc:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80233c0:	681b      	ldr	r3, [r3, #0]
 80233c2:	17da      	asrs	r2, r3, #31
 80233c4:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
 80233c8:	f8c7 2454 	str.w	r2, [r7, #1108]	; 0x454
 80233cc:	f60f 53a0 	addw	r3, pc, #3488	; 0xda0
 80233d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80233d4:	f8d7 1454 	ldr.w	r1, [r7, #1108]	; 0x454
 80233d8:	fb02 f001 	mul.w	r0, r2, r1
 80233dc:	f8d7 1450 	ldr.w	r1, [r7, #1104]	; 0x450
 80233e0:	fb01 f103 	mul.w	r1, r1, r3
 80233e4:	4401      	add	r1, r0
 80233e6:	f8d7 0450 	ldr.w	r0, [r7, #1104]	; 0x450
 80233ea:	fba0 2302 	umull	r2, r3, r0, r2
 80233ee:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
 80233f2:	4613      	mov	r3, r2
 80233f4:	f8c7 3580 	str.w	r3, [r7, #1408]	; 0x580
 80233f8:	f8d7 3584 	ldr.w	r3, [r7, #1412]	; 0x584
 80233fc:	18cb      	adds	r3, r1, r3
 80233fe:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
 8023402:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8023406:	e9d3 2300 	ldrd	r2, r3, [r3]
 802340a:	f8d7 1580 	ldr.w	r1, [r7, #1408]	; 0x580
 802340e:	1851      	adds	r1, r2, r1
 8023410:	f8c7 11e8 	str.w	r1, [r7, #488]	; 0x1e8
 8023414:	f8d7 1584 	ldr.w	r1, [r7, #1412]	; 0x584
 8023418:	414b      	adcs	r3, r1
 802341a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 802341e:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 8023422:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 8023426:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 802342a:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 802342e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023432:	2b00      	cmp	r3, #0
 8023434:	da0a      	bge.n	802344c <arm_softmax_s8+0x173c>
 8023436:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 802343a:	1851      	adds	r1, r2, r1
 802343c:	f8c7 11e0 	str.w	r1, [r7, #480]	; 0x1e0
 8023440:	f143 0300 	adc.w	r3, r3, #0
 8023444:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8023448:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	; 0x1e0
 802344c:	f04f 0000 	mov.w	r0, #0
 8023450:	f04f 0100 	mov.w	r1, #0
 8023454:	0fd0      	lsrs	r0, r2, #31
 8023456:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 802345a:	17d9      	asrs	r1, r3, #31
 802345c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023460:	f5a3 72c6 	sub.w	r2, r3, #396	; 0x18c
 8023464:	4603      	mov	r3, r0
 8023466:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8023468:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802346c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8023470:	681b      	ldr	r3, [r3, #0]
 8023472:	f113 3f3c 	cmn.w	r3, #1010580540	; 0x3c3c3c3c
 8023476:	d10e      	bne.n	8023496 <arm_softmax_s8+0x1786>
 8023478:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802347c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8023480:	681b      	ldr	r3, [r3, #0]
 8023482:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8023486:	d106      	bne.n	8023496 <arm_softmax_s8+0x1786>
        result = Q31_MAX;
 8023488:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802348c:	f5a3 72c6 	sub.w	r2, r3, #396	; 0x18c
 8023490:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8023494:	6013      	str	r3, [r2, #0]
    return result;
 8023496:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802349a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 802349e:	6819      	ldr	r1, [r3, #0]
    int32_t x = 1515870810 + MUL_SAT(half_denominator, -1010580540);
 80234a0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80234a4:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 80234a8:	f101 335a 	add.w	r3, r1, #1515870810	; 0x5a5a5a5a
 80234ac:	6013      	str	r3, [r2, #0]
    const int32_t shift = (1 << 29);
 80234ae:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80234b2:	f5a3 72d0 	sub.w	r2, r3, #416	; 0x1a0
 80234b6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80234ba:	6013      	str	r3, [r2, #0]
 80234bc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80234c0:	f5a3 72d2 	sub.w	r2, r3, #420	; 0x1a4
 80234c4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80234c8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80234cc:	681b      	ldr	r3, [r3, #0]
 80234ce:	6013      	str	r3, [r2, #0]
 80234d0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80234d4:	f5a3 72d4 	sub.w	r2, r3, #424	; 0x1a8
 80234d8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80234dc:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80234e0:	681b      	ldr	r3, [r3, #0]
 80234e2:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80234e4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80234e8:	f5a3 72d6 	sub.w	r2, r3, #428	; 0x1ac
 80234ec:	2300      	movs	r3, #0
 80234ee:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80234f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80234f4:	f04f 0300 	mov.w	r3, #0
 80234f8:	f507 61fe 	add.w	r1, r7, #2032	; 0x7f0
 80234fc:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8023500:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023504:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8023508:	681b      	ldr	r3, [r3, #0]
 802350a:	0fdb      	lsrs	r3, r3, #31
 802350c:	b2da      	uxtb	r2, r3
 802350e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023512:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8023516:	681b      	ldr	r3, [r3, #0]
 8023518:	0fdb      	lsrs	r3, r3, #31
 802351a:	b2db      	uxtb	r3, r3
 802351c:	4053      	eors	r3, r2
 802351e:	b2db      	uxtb	r3, r3
 8023520:	2b00      	cmp	r3, #0
 8023522:	d012      	beq.n	802354a <arm_softmax_s8+0x183a>
        mult = 1 - mult;
 8023524:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 8023528:	e9d3 2300 	ldrd	r2, r3, [r3]
 802352c:	2100      	movs	r1, #0
 802352e:	f1d2 0001 	rsbs	r0, r2, #1
 8023532:	f8c7 01d8 	str.w	r0, [r7, #472]	; 0x1d8
 8023536:	eb61 0303 	sbc.w	r3, r1, r3
 802353a:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 802353e:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 8023542:	f507 62fe 	add.w	r2, r7, #2032	; 0x7f0
 8023546:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 802354a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802354e:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8023552:	681b      	ldr	r3, [r3, #0]
 8023554:	17da      	asrs	r2, r3, #31
 8023556:	f8c7 3448 	str.w	r3, [r7, #1096]	; 0x448
 802355a:	f8c7 244c 	str.w	r2, [r7, #1100]	; 0x44c
 802355e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023562:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8023566:	681b      	ldr	r3, [r3, #0]
 8023568:	17da      	asrs	r2, r3, #31
 802356a:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
 802356e:	f8c7 2444 	str.w	r2, [r7, #1092]	; 0x444
 8023572:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8023576:	e9d3 0100 	ldrd	r0, r1, [r3]
 802357a:	460b      	mov	r3, r1
 802357c:	f8d7 2440 	ldr.w	r2, [r7, #1088]	; 0x440
 8023580:	fb02 f203 	mul.w	r2, r2, r3
 8023584:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 8023588:	f507 6489 	add.w	r4, r7, #1096	; 0x448
 802358c:	e9c4 0100 	strd	r0, r1, [r4]
 8023590:	4601      	mov	r1, r0
 8023592:	fb01 f303 	mul.w	r3, r1, r3
 8023596:	4413      	add	r3, r2
 8023598:	f8d7 2448 	ldr.w	r2, [r7, #1096]	; 0x448
 802359c:	f8d7 1440 	ldr.w	r1, [r7, #1088]	; 0x440
 80235a0:	fba2 1201 	umull	r1, r2, r2, r1
 80235a4:	f8c7 257c 	str.w	r2, [r7, #1404]	; 0x57c
 80235a8:	460a      	mov	r2, r1
 80235aa:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 80235ae:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 80235b2:	4413      	add	r3, r2
 80235b4:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 80235b8:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 80235bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80235c0:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 80235c4:	1851      	adds	r1, r2, r1
 80235c6:	f8c7 11d0 	str.w	r1, [r7, #464]	; 0x1d0
 80235ca:	f8d7 157c 	ldr.w	r1, [r7, #1404]	; 0x57c
 80235ce:	414b      	adcs	r3, r1
 80235d0:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 80235d4:	e9d7 3474 	ldrd	r3, r4, [r7, #464]	; 0x1d0
 80235d8:	f507 62fe 	add.w	r2, r7, #2032	; 0x7f0
 80235dc:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 80235e0:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 80235e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80235e8:	2b00      	cmp	r3, #0
 80235ea:	da0a      	bge.n	8023602 <arm_softmax_s8+0x18f2>
 80235ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80235f0:	1851      	adds	r1, r2, r1
 80235f2:	f8c7 11c8 	str.w	r1, [r7, #456]	; 0x1c8
 80235f6:	f143 0300 	adc.w	r3, r3, #0
 80235fa:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 80235fe:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 8023602:	f04f 0000 	mov.w	r0, #0
 8023606:	f04f 0100 	mov.w	r1, #0
 802360a:	0fd0      	lsrs	r0, r2, #31
 802360c:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8023610:	17d9      	asrs	r1, r3, #31
 8023612:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023616:	f5a3 72d6 	sub.w	r2, r3, #428	; 0x1ac
 802361a:	4603      	mov	r3, r0
 802361c:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 802361e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023622:	f5a3 72d2 	sub.w	r2, r3, #420	; 0x1a4
 8023626:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802362a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 802362e:	6812      	ldr	r2, [r2, #0]
 8023630:	681b      	ldr	r3, [r3, #0]
 8023632:	429a      	cmp	r2, r3
 8023634:	d10e      	bne.n	8023654 <arm_softmax_s8+0x1944>
 8023636:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802363a:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 802363e:	681b      	ldr	r3, [r3, #0]
 8023640:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8023644:	d106      	bne.n	8023654 <arm_softmax_s8+0x1944>
        result = Q31_MAX;
 8023646:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802364a:	f5a3 72d6 	sub.w	r2, r3, #428	; 0x1ac
 802364e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8023652:	6013      	str	r3, [r2, #0]
    return result;
 8023654:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023658:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 802365c:	681a      	ldr	r2, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 802365e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023662:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8023666:	681b      	ldr	r3, [r3, #0]
 8023668:	1a99      	subs	r1, r3, r2
 802366a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802366e:	f5a3 72de 	sub.w	r2, r3, #444	; 0x1bc
 8023672:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023676:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 802367a:	681b      	ldr	r3, [r3, #0]
 802367c:	6013      	str	r3, [r2, #0]
 802367e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023682:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8023686:	6019      	str	r1, [r3, #0]
    q31_t result = 0;
 8023688:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802368c:	f5a3 72e2 	sub.w	r2, r3, #452	; 0x1c4
 8023690:	2300      	movs	r3, #0
 8023692:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8023694:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8023698:	f04f 0300 	mov.w	r3, #0
 802369c:	f507 61fb 	add.w	r1, r7, #2008	; 0x7d8
 80236a0:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80236a4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80236a8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80236ac:	681b      	ldr	r3, [r3, #0]
 80236ae:	0fdb      	lsrs	r3, r3, #31
 80236b0:	b2da      	uxtb	r2, r3
 80236b2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80236b6:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80236ba:	681b      	ldr	r3, [r3, #0]
 80236bc:	0fdb      	lsrs	r3, r3, #31
 80236be:	b2db      	uxtb	r3, r3
 80236c0:	4053      	eors	r3, r2
 80236c2:	b2db      	uxtb	r3, r3
 80236c4:	2b00      	cmp	r3, #0
 80236c6:	d012      	beq.n	80236ee <arm_softmax_s8+0x19de>
        mult = 1 - mult;
 80236c8:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 80236cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80236d0:	2100      	movs	r1, #0
 80236d2:	f1d2 0001 	rsbs	r0, r2, #1
 80236d6:	f8c7 01c0 	str.w	r0, [r7, #448]	; 0x1c0
 80236da:	eb61 0303 	sbc.w	r3, r1, r3
 80236de:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80236e2:	e9d7 3470 	ldrd	r3, r4, [r7, #448]	; 0x1c0
 80236e6:	f507 62fb 	add.w	r2, r7, #2008	; 0x7d8
 80236ea:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80236ee:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80236f2:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80236f6:	681b      	ldr	r3, [r3, #0]
 80236f8:	17da      	asrs	r2, r3, #31
 80236fa:	f8c7 3438 	str.w	r3, [r7, #1080]	; 0x438
 80236fe:	f8c7 243c 	str.w	r2, [r7, #1084]	; 0x43c
 8023702:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023706:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 802370a:	681b      	ldr	r3, [r3, #0]
 802370c:	17da      	asrs	r2, r3, #31
 802370e:	f8c7 3430 	str.w	r3, [r7, #1072]	; 0x430
 8023712:	f8c7 2434 	str.w	r2, [r7, #1076]	; 0x434
 8023716:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 802371a:	e9d3 0100 	ldrd	r0, r1, [r3]
 802371e:	460b      	mov	r3, r1
 8023720:	f8d7 2430 	ldr.w	r2, [r7, #1072]	; 0x430
 8023724:	fb02 f203 	mul.w	r2, r2, r3
 8023728:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 802372c:	f507 6487 	add.w	r4, r7, #1080	; 0x438
 8023730:	e9c4 0100 	strd	r0, r1, [r4]
 8023734:	4601      	mov	r1, r0
 8023736:	fb01 f303 	mul.w	r3, r1, r3
 802373a:	4413      	add	r3, r2
 802373c:	f8d7 2438 	ldr.w	r2, [r7, #1080]	; 0x438
 8023740:	f8d7 1430 	ldr.w	r1, [r7, #1072]	; 0x430
 8023744:	fba2 1201 	umull	r1, r2, r2, r1
 8023748:	f8c7 2574 	str.w	r2, [r7, #1396]	; 0x574
 802374c:	460a      	mov	r2, r1
 802374e:	f8c7 2570 	str.w	r2, [r7, #1392]	; 0x570
 8023752:	f8d7 2574 	ldr.w	r2, [r7, #1396]	; 0x574
 8023756:	4413      	add	r3, r2
 8023758:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
 802375c:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 8023760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023764:	f8d7 1570 	ldr.w	r1, [r7, #1392]	; 0x570
 8023768:	1851      	adds	r1, r2, r1
 802376a:	f8c7 11b8 	str.w	r1, [r7, #440]	; 0x1b8
 802376e:	f8d7 1574 	ldr.w	r1, [r7, #1396]	; 0x574
 8023772:	414b      	adcs	r3, r1
 8023774:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8023778:	e9d7 346e 	ldrd	r3, r4, [r7, #440]	; 0x1b8
 802377c:	f507 62fb 	add.w	r2, r7, #2008	; 0x7d8
 8023780:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8023784:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 8023788:	e9d3 2300 	ldrd	r2, r3, [r3]
 802378c:	2b00      	cmp	r3, #0
 802378e:	da0a      	bge.n	80237a6 <arm_softmax_s8+0x1a96>
 8023790:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8023794:	1851      	adds	r1, r2, r1
 8023796:	f8c7 11b0 	str.w	r1, [r7, #432]	; 0x1b0
 802379a:	f143 0300 	adc.w	r3, r3, #0
 802379e:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 80237a2:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	; 0x1b0
 80237a6:	f04f 0000 	mov.w	r0, #0
 80237aa:	f04f 0100 	mov.w	r1, #0
 80237ae:	0fd0      	lsrs	r0, r2, #31
 80237b0:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80237b4:	17d9      	asrs	r1, r3, #31
 80237b6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80237ba:	f5a3 72e2 	sub.w	r2, r3, #452	; 0x1c4
 80237be:	4603      	mov	r3, r0
 80237c0:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80237c2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80237c6:	f5a3 72de 	sub.w	r2, r3, #444	; 0x1bc
 80237ca:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80237ce:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80237d2:	6812      	ldr	r2, [r2, #0]
 80237d4:	681b      	ldr	r3, [r3, #0]
 80237d6:	429a      	cmp	r2, r3
 80237d8:	d10e      	bne.n	80237f8 <arm_softmax_s8+0x1ae8>
 80237da:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80237de:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80237e2:	681b      	ldr	r3, [r3, #0]
 80237e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80237e8:	d106      	bne.n	80237f8 <arm_softmax_s8+0x1ae8>
        result = Q31_MAX;
 80237ea:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80237ee:	f5a3 72e2 	sub.w	r2, r3, #452	; 0x1c4
 80237f2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80237f6:	6013      	str	r3, [r2, #0]
    return result;
 80237f8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80237fc:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8023800:	681a      	ldr	r2, [r3, #0]
 8023802:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023806:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 802380a:	601a      	str	r2, [r3, #0]
    const int32_t thresh = ((1 << (31 - exp)) - 1);
 802380c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8023810:	4619      	mov	r1, r3
 8023812:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023816:	f5a3 72ec 	sub.w	r2, r3, #472	; 0x1d8
 802381a:	1e4b      	subs	r3, r1, #1
 802381c:	6013      	str	r3, [r2, #0]
    int32_t result = val << exp;
 802381e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023822:	f5a3 72ee 	sub.w	r2, r3, #476	; 0x1dc
 8023826:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802382a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 802382e:	681b      	ldr	r3, [r3, #0]
 8023830:	009b      	lsls	r3, r3, #2
 8023832:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 8023834:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023838:	f5a3 72ea 	sub.w	r2, r3, #468	; 0x1d4
 802383c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023840:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8023844:	6812      	ldr	r2, [r2, #0]
 8023846:	681b      	ldr	r3, [r3, #0]
 8023848:	429a      	cmp	r2, r3
 802384a:	dd02      	ble.n	8023852 <arm_softmax_s8+0x1b42>
 802384c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8023850:	e000      	b.n	8023854 <arm_softmax_s8+0x1b44>
 8023852:	2000      	movs	r0, #0
 8023854:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023858:	f5a3 72ea 	sub.w	r2, r3, #468	; 0x1d4
 802385c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023860:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8023864:	6812      	ldr	r2, [r2, #0]
 8023866:	681b      	ldr	r3, [r3, #0]
 8023868:	429a      	cmp	r2, r3
 802386a:	dd01      	ble.n	8023870 <arm_softmax_s8+0x1b60>
 802386c:	2200      	movs	r2, #0
 802386e:	e001      	b.n	8023874 <arm_softmax_s8+0x1b64>
 8023870:	f04f 32ff 	mov.w	r2, #4294967295
 8023874:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023878:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 802387c:	681b      	ldr	r3, [r3, #0]
 802387e:	ea02 0103 	and.w	r1, r2, r3
 8023882:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023886:	f5a3 72ee 	sub.w	r2, r3, #476	; 0x1dc
 802388a:	ea81 0300 	eor.w	r3, r1, r0
 802388e:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 8023890:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023894:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8023898:	681b      	ldr	r3, [r3, #0]
 802389a:	425a      	negs	r2, r3
 802389c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80238a0:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80238a4:	681b      	ldr	r3, [r3, #0]
 80238a6:	4293      	cmp	r3, r2
 80238a8:	da02      	bge.n	80238b0 <arm_softmax_s8+0x1ba0>
 80238aa:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80238ae:	e000      	b.n	80238b2 <arm_softmax_s8+0x1ba2>
 80238b0:	2000      	movs	r0, #0
 80238b2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80238b6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80238ba:	681b      	ldr	r3, [r3, #0]
 80238bc:	425a      	negs	r2, r3
 80238be:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80238c2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80238c6:	681b      	ldr	r3, [r3, #0]
 80238c8:	4293      	cmp	r3, r2
 80238ca:	da01      	bge.n	80238d0 <arm_softmax_s8+0x1bc0>
 80238cc:	2200      	movs	r2, #0
 80238ce:	e001      	b.n	80238d4 <arm_softmax_s8+0x1bc4>
 80238d0:	f04f 32ff 	mov.w	r2, #4294967295
 80238d4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80238d8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80238dc:	681b      	ldr	r3, [r3, #0]
 80238de:	ea02 0103 	and.w	r1, r2, r3
 80238e2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80238e6:	f5a3 72ee 	sub.w	r2, r3, #476	; 0x1dc
 80238ea:	ea81 0300 	eor.w	r3, r1, r0
 80238ee:	6013      	str	r3, [r2, #0]
    return result;
 80238f0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80238f4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80238f8:	6819      	ldr	r1, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 80238fa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80238fe:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 8023902:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023906:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 802390a:	681b      	ldr	r3, [r3, #0]
 802390c:	440b      	add	r3, r1
 802390e:	6013      	str	r3, [r2, #0]
 8023910:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023914:	f5a3 72f0 	sub.w	r2, r3, #480	; 0x1e0
 8023918:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802391c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8023920:	681b      	ldr	r3, [r3, #0]
 8023922:	6013      	str	r3, [r2, #0]
 8023924:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023928:	f5a3 72f2 	sub.w	r2, r3, #484	; 0x1e4
 802392c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023930:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8023934:	681b      	ldr	r3, [r3, #0]
 8023936:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8023938:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802393c:	f5a3 72f4 	sub.w	r2, r3, #488	; 0x1e8
 8023940:	2300      	movs	r3, #0
 8023942:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8023944:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8023948:	f04f 0300 	mov.w	r3, #0
 802394c:	f507 61f7 	add.w	r1, r7, #1976	; 0x7b8
 8023950:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8023954:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023958:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 802395c:	681b      	ldr	r3, [r3, #0]
 802395e:	0fdb      	lsrs	r3, r3, #31
 8023960:	b2da      	uxtb	r2, r3
 8023962:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023966:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 802396a:	681b      	ldr	r3, [r3, #0]
 802396c:	0fdb      	lsrs	r3, r3, #31
 802396e:	b2db      	uxtb	r3, r3
 8023970:	4053      	eors	r3, r2
 8023972:	b2db      	uxtb	r3, r3
 8023974:	2b00      	cmp	r3, #0
 8023976:	d012      	beq.n	802399e <arm_softmax_s8+0x1c8e>
        mult = 1 - mult;
 8023978:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 802397c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023980:	2100      	movs	r1, #0
 8023982:	f1d2 0001 	rsbs	r0, r2, #1
 8023986:	f8c7 01a8 	str.w	r0, [r7, #424]	; 0x1a8
 802398a:	eb61 0303 	sbc.w	r3, r1, r3
 802398e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8023992:	e9d7 346a 	ldrd	r3, r4, [r7, #424]	; 0x1a8
 8023996:	f507 62f7 	add.w	r2, r7, #1976	; 0x7b8
 802399a:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 802399e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80239a2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80239a6:	681b      	ldr	r3, [r3, #0]
 80239a8:	17da      	asrs	r2, r3, #31
 80239aa:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
 80239ae:	f8c7 242c 	str.w	r2, [r7, #1068]	; 0x42c
 80239b2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80239b6:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80239ba:	681b      	ldr	r3, [r3, #0]
 80239bc:	17da      	asrs	r2, r3, #31
 80239be:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
 80239c2:	f8c7 2424 	str.w	r2, [r7, #1060]	; 0x424
 80239c6:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80239ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80239ce:	460b      	mov	r3, r1
 80239d0:	f8d7 2420 	ldr.w	r2, [r7, #1056]	; 0x420
 80239d4:	fb02 f203 	mul.w	r2, r2, r3
 80239d8:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 80239dc:	f507 6485 	add.w	r4, r7, #1064	; 0x428
 80239e0:	e9c4 0100 	strd	r0, r1, [r4]
 80239e4:	4601      	mov	r1, r0
 80239e6:	fb01 f303 	mul.w	r3, r1, r3
 80239ea:	4413      	add	r3, r2
 80239ec:	f8d7 2428 	ldr.w	r2, [r7, #1064]	; 0x428
 80239f0:	f8d7 1420 	ldr.w	r1, [r7, #1056]	; 0x420
 80239f4:	fba2 1201 	umull	r1, r2, r2, r1
 80239f8:	f8c7 256c 	str.w	r2, [r7, #1388]	; 0x56c
 80239fc:	460a      	mov	r2, r1
 80239fe:	f8c7 2568 	str.w	r2, [r7, #1384]	; 0x568
 8023a02:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 8023a06:	4413      	add	r3, r2
 8023a08:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 8023a0c:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 8023a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023a14:	f8d7 1568 	ldr.w	r1, [r7, #1384]	; 0x568
 8023a18:	1851      	adds	r1, r2, r1
 8023a1a:	f8c7 11a0 	str.w	r1, [r7, #416]	; 0x1a0
 8023a1e:	f8d7 156c 	ldr.w	r1, [r7, #1388]	; 0x56c
 8023a22:	414b      	adcs	r3, r1
 8023a24:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8023a28:	e9d7 3468 	ldrd	r3, r4, [r7, #416]	; 0x1a0
 8023a2c:	f507 62f7 	add.w	r2, r7, #1976	; 0x7b8
 8023a30:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8023a34:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 8023a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023a3c:	2b00      	cmp	r3, #0
 8023a3e:	da0a      	bge.n	8023a56 <arm_softmax_s8+0x1d46>
 8023a40:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8023a44:	1851      	adds	r1, r2, r1
 8023a46:	f8c7 1198 	str.w	r1, [r7, #408]	; 0x198
 8023a4a:	f143 0300 	adc.w	r3, r3, #0
 8023a4e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8023a52:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 8023a56:	f04f 0000 	mov.w	r0, #0
 8023a5a:	f04f 0100 	mov.w	r1, #0
 8023a5e:	0fd0      	lsrs	r0, r2, #31
 8023a60:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8023a64:	17d9      	asrs	r1, r3, #31
 8023a66:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023a6a:	f5a3 72f4 	sub.w	r2, r3, #488	; 0x1e8
 8023a6e:	4603      	mov	r3, r0
 8023a70:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8023a72:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023a76:	f5a3 72f0 	sub.w	r2, r3, #480	; 0x1e0
 8023a7a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023a7e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8023a82:	6812      	ldr	r2, [r2, #0]
 8023a84:	681b      	ldr	r3, [r3, #0]
 8023a86:	429a      	cmp	r2, r3
 8023a88:	d10e      	bne.n	8023aa8 <arm_softmax_s8+0x1d98>
 8023a8a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023a8e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8023a92:	681b      	ldr	r3, [r3, #0]
 8023a94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8023a98:	d106      	bne.n	8023aa8 <arm_softmax_s8+0x1d98>
        result = Q31_MAX;
 8023a9a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023a9e:	f5a3 72f4 	sub.w	r2, r3, #488	; 0x1e8
 8023aa2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8023aa6:	6013      	str	r3, [r2, #0]
    return result;
 8023aa8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023aac:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8023ab0:	681a      	ldr	r2, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 8023ab2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023ab6:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8023aba:	681b      	ldr	r3, [r3, #0]
 8023abc:	1a99      	subs	r1, r3, r2
 8023abe:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023ac2:	f5a3 72fa 	sub.w	r2, r3, #500	; 0x1f4
 8023ac6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023aca:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8023ace:	681b      	ldr	r3, [r3, #0]
 8023ad0:	6013      	str	r3, [r2, #0]
 8023ad2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023ad6:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8023ada:	6019      	str	r1, [r3, #0]
    q31_t result = 0;
 8023adc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023ae0:	f5a3 72fe 	sub.w	r2, r3, #508	; 0x1fc
 8023ae4:	2300      	movs	r3, #0
 8023ae6:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8023ae8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8023aec:	f04f 0300 	mov.w	r3, #0
 8023af0:	f507 61f4 	add.w	r1, r7, #1952	; 0x7a0
 8023af4:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8023af8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023afc:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8023b00:	681b      	ldr	r3, [r3, #0]
 8023b02:	0fdb      	lsrs	r3, r3, #31
 8023b04:	b2da      	uxtb	r2, r3
 8023b06:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023b0a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8023b0e:	681b      	ldr	r3, [r3, #0]
 8023b10:	0fdb      	lsrs	r3, r3, #31
 8023b12:	b2db      	uxtb	r3, r3
 8023b14:	4053      	eors	r3, r2
 8023b16:	b2db      	uxtb	r3, r3
 8023b18:	2b00      	cmp	r3, #0
 8023b1a:	d012      	beq.n	8023b42 <arm_softmax_s8+0x1e32>
        mult = 1 - mult;
 8023b1c:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 8023b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023b24:	2100      	movs	r1, #0
 8023b26:	f1d2 0001 	rsbs	r0, r2, #1
 8023b2a:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190
 8023b2e:	eb61 0303 	sbc.w	r3, r1, r3
 8023b32:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 8023b36:	e9d7 3464 	ldrd	r3, r4, [r7, #400]	; 0x190
 8023b3a:	f507 62f4 	add.w	r2, r7, #1952	; 0x7a0
 8023b3e:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8023b42:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023b46:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8023b4a:	681b      	ldr	r3, [r3, #0]
 8023b4c:	17da      	asrs	r2, r3, #31
 8023b4e:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
 8023b52:	f8c7 241c 	str.w	r2, [r7, #1052]	; 0x41c
 8023b56:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023b5a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8023b5e:	681b      	ldr	r3, [r3, #0]
 8023b60:	17da      	asrs	r2, r3, #31
 8023b62:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
 8023b66:	f8c7 2414 	str.w	r2, [r7, #1044]	; 0x414
 8023b6a:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8023b6e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8023b72:	460b      	mov	r3, r1
 8023b74:	f8d7 2410 	ldr.w	r2, [r7, #1040]	; 0x410
 8023b78:	fb02 f203 	mul.w	r2, r2, r3
 8023b7c:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8023b80:	f507 6483 	add.w	r4, r7, #1048	; 0x418
 8023b84:	e9c4 0100 	strd	r0, r1, [r4]
 8023b88:	4601      	mov	r1, r0
 8023b8a:	fb01 f303 	mul.w	r3, r1, r3
 8023b8e:	4413      	add	r3, r2
 8023b90:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
 8023b94:	f8d7 1410 	ldr.w	r1, [r7, #1040]	; 0x410
 8023b98:	fba2 1201 	umull	r1, r2, r2, r1
 8023b9c:	f8c7 2564 	str.w	r2, [r7, #1380]	; 0x564
 8023ba0:	460a      	mov	r2, r1
 8023ba2:	f8c7 2560 	str.w	r2, [r7, #1376]	; 0x560
 8023ba6:	f8d7 2564 	ldr.w	r2, [r7, #1380]	; 0x564
 8023baa:	4413      	add	r3, r2
 8023bac:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
 8023bb0:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 8023bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023bb8:	f8d7 1560 	ldr.w	r1, [r7, #1376]	; 0x560
 8023bbc:	1851      	adds	r1, r2, r1
 8023bbe:	f8c7 1188 	str.w	r1, [r7, #392]	; 0x188
 8023bc2:	f8d7 1564 	ldr.w	r1, [r7, #1380]	; 0x564
 8023bc6:	414b      	adcs	r3, r1
 8023bc8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8023bcc:	e9d7 3462 	ldrd	r3, r4, [r7, #392]	; 0x188
 8023bd0:	f507 62f4 	add.w	r2, r7, #1952	; 0x7a0
 8023bd4:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8023bd8:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 8023bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023be0:	2b00      	cmp	r3, #0
 8023be2:	da0a      	bge.n	8023bfa <arm_softmax_s8+0x1eea>
 8023be4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8023be8:	1851      	adds	r1, r2, r1
 8023bea:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
 8023bee:	f143 0300 	adc.w	r3, r3, #0
 8023bf2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8023bf6:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	; 0x180
 8023bfa:	f04f 0000 	mov.w	r0, #0
 8023bfe:	f04f 0100 	mov.w	r1, #0
 8023c02:	0fd0      	lsrs	r0, r2, #31
 8023c04:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8023c08:	17d9      	asrs	r1, r3, #31
 8023c0a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023c0e:	f5a3 72fe 	sub.w	r2, r3, #508	; 0x1fc
 8023c12:	4603      	mov	r3, r0
 8023c14:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8023c16:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023c1a:	f5a3 72fa 	sub.w	r2, r3, #500	; 0x1f4
 8023c1e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023c22:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8023c26:	6812      	ldr	r2, [r2, #0]
 8023c28:	681b      	ldr	r3, [r3, #0]
 8023c2a:	429a      	cmp	r2, r3
 8023c2c:	d10e      	bne.n	8023c4c <arm_softmax_s8+0x1f3c>
 8023c2e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023c32:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8023c36:	681b      	ldr	r3, [r3, #0]
 8023c38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8023c3c:	d106      	bne.n	8023c4c <arm_softmax_s8+0x1f3c>
        result = Q31_MAX;
 8023c3e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023c42:	f5a3 72fe 	sub.w	r2, r3, #508	; 0x1fc
 8023c46:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8023c4a:	6013      	str	r3, [r2, #0]
    return result;
 8023c4c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023c50:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8023c54:	681a      	ldr	r2, [r3, #0]
 8023c56:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023c5a:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8023c5e:	601a      	str	r2, [r3, #0]
    const int32_t thresh = ((1 << (31 - exp)) - 1);
 8023c60:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8023c64:	4619      	mov	r1, r3
 8023c66:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023c6a:	f5a3 7204 	sub.w	r2, r3, #528	; 0x210
 8023c6e:	1e4b      	subs	r3, r1, #1
 8023c70:	6013      	str	r3, [r2, #0]
    int32_t result = val << exp;
 8023c72:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023c76:	f5a3 7205 	sub.w	r2, r3, #532	; 0x214
 8023c7a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023c7e:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8023c82:	681b      	ldr	r3, [r3, #0]
 8023c84:	009b      	lsls	r3, r3, #2
 8023c86:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 8023c88:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023c8c:	f5a3 7203 	sub.w	r2, r3, #524	; 0x20c
 8023c90:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023c94:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8023c98:	6812      	ldr	r2, [r2, #0]
 8023c9a:	681b      	ldr	r3, [r3, #0]
 8023c9c:	429a      	cmp	r2, r3
 8023c9e:	dd02      	ble.n	8023ca6 <arm_softmax_s8+0x1f96>
 8023ca0:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8023ca4:	e000      	b.n	8023ca8 <arm_softmax_s8+0x1f98>
 8023ca6:	2000      	movs	r0, #0
 8023ca8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023cac:	f5a3 7203 	sub.w	r2, r3, #524	; 0x20c
 8023cb0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023cb4:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8023cb8:	6812      	ldr	r2, [r2, #0]
 8023cba:	681b      	ldr	r3, [r3, #0]
 8023cbc:	429a      	cmp	r2, r3
 8023cbe:	dd01      	ble.n	8023cc4 <arm_softmax_s8+0x1fb4>
 8023cc0:	2200      	movs	r2, #0
 8023cc2:	e001      	b.n	8023cc8 <arm_softmax_s8+0x1fb8>
 8023cc4:	f04f 32ff 	mov.w	r2, #4294967295
 8023cc8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023ccc:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8023cd0:	681b      	ldr	r3, [r3, #0]
 8023cd2:	ea02 0103 	and.w	r1, r2, r3
 8023cd6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023cda:	f5a3 7205 	sub.w	r2, r3, #532	; 0x214
 8023cde:	ea81 0300 	eor.w	r3, r1, r0
 8023ce2:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 8023ce4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023ce8:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8023cec:	681b      	ldr	r3, [r3, #0]
 8023cee:	425a      	negs	r2, r3
 8023cf0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023cf4:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8023cf8:	681b      	ldr	r3, [r3, #0]
 8023cfa:	4293      	cmp	r3, r2
 8023cfc:	da02      	bge.n	8023d04 <arm_softmax_s8+0x1ff4>
 8023cfe:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8023d02:	e000      	b.n	8023d06 <arm_softmax_s8+0x1ff6>
 8023d04:	2000      	movs	r0, #0
 8023d06:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023d0a:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8023d0e:	681b      	ldr	r3, [r3, #0]
 8023d10:	425a      	negs	r2, r3
 8023d12:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023d16:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8023d1a:	681b      	ldr	r3, [r3, #0]
 8023d1c:	4293      	cmp	r3, r2
 8023d1e:	da01      	bge.n	8023d24 <arm_softmax_s8+0x2014>
 8023d20:	2200      	movs	r2, #0
 8023d22:	e001      	b.n	8023d28 <arm_softmax_s8+0x2018>
 8023d24:	f04f 32ff 	mov.w	r2, #4294967295
 8023d28:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023d2c:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8023d30:	681b      	ldr	r3, [r3, #0]
 8023d32:	ea02 0103 	and.w	r1, r2, r3
 8023d36:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023d3a:	f5a3 7205 	sub.w	r2, r3, #532	; 0x214
 8023d3e:	ea81 0300 	eor.w	r3, r1, r0
 8023d42:	6013      	str	r3, [r2, #0]
    return result;
 8023d44:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023d48:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8023d4c:	6819      	ldr	r1, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 8023d4e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023d52:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 8023d56:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023d5a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8023d5e:	681b      	ldr	r3, [r3, #0]
 8023d60:	440b      	add	r3, r1
 8023d62:	6013      	str	r3, [r2, #0]
 8023d64:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023d68:	f5a3 7206 	sub.w	r2, r3, #536	; 0x218
 8023d6c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023d70:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8023d74:	681b      	ldr	r3, [r3, #0]
 8023d76:	6013      	str	r3, [r2, #0]
 8023d78:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023d7c:	f5a3 7207 	sub.w	r2, r3, #540	; 0x21c
 8023d80:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023d84:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8023d88:	681b      	ldr	r3, [r3, #0]
 8023d8a:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8023d8c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023d90:	f5a3 7208 	sub.w	r2, r3, #544	; 0x220
 8023d94:	2300      	movs	r3, #0
 8023d96:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8023d98:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8023d9c:	f04f 0300 	mov.w	r3, #0
 8023da0:	f507 61f0 	add.w	r1, r7, #1920	; 0x780
 8023da4:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8023da8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023dac:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8023db0:	681b      	ldr	r3, [r3, #0]
 8023db2:	0fdb      	lsrs	r3, r3, #31
 8023db4:	b2da      	uxtb	r2, r3
 8023db6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023dba:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8023dbe:	681b      	ldr	r3, [r3, #0]
 8023dc0:	0fdb      	lsrs	r3, r3, #31
 8023dc2:	b2db      	uxtb	r3, r3
 8023dc4:	4053      	eors	r3, r2
 8023dc6:	b2db      	uxtb	r3, r3
 8023dc8:	2b00      	cmp	r3, #0
 8023dca:	d012      	beq.n	8023df2 <arm_softmax_s8+0x20e2>
        mult = 1 - mult;
 8023dcc:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 8023dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023dd4:	2100      	movs	r1, #0
 8023dd6:	f1d2 0001 	rsbs	r0, r2, #1
 8023dda:	f8c7 0178 	str.w	r0, [r7, #376]	; 0x178
 8023dde:	eb61 0303 	sbc.w	r3, r1, r3
 8023de2:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8023de6:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 8023dea:	f507 62f0 	add.w	r2, r7, #1920	; 0x780
 8023dee:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8023df2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023df6:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8023dfa:	681b      	ldr	r3, [r3, #0]
 8023dfc:	17da      	asrs	r2, r3, #31
 8023dfe:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
 8023e02:	f8c7 240c 	str.w	r2, [r7, #1036]	; 0x40c
 8023e06:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023e0a:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8023e0e:	681b      	ldr	r3, [r3, #0]
 8023e10:	17da      	asrs	r2, r3, #31
 8023e12:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
 8023e16:	f8c7 2404 	str.w	r2, [r7, #1028]	; 0x404
 8023e1a:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8023e1e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8023e22:	460b      	mov	r3, r1
 8023e24:	f8d7 2400 	ldr.w	r2, [r7, #1024]	; 0x400
 8023e28:	fb02 f203 	mul.w	r2, r2, r3
 8023e2c:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8023e30:	f507 6481 	add.w	r4, r7, #1032	; 0x408
 8023e34:	e9c4 0100 	strd	r0, r1, [r4]
 8023e38:	4601      	mov	r1, r0
 8023e3a:	fb01 f303 	mul.w	r3, r1, r3
 8023e3e:	4413      	add	r3, r2
 8023e40:	f8d7 2408 	ldr.w	r2, [r7, #1032]	; 0x408
 8023e44:	f8d7 1400 	ldr.w	r1, [r7, #1024]	; 0x400
 8023e48:	fba2 1201 	umull	r1, r2, r2, r1
 8023e4c:	f8c7 255c 	str.w	r2, [r7, #1372]	; 0x55c
 8023e50:	460a      	mov	r2, r1
 8023e52:	f8c7 2558 	str.w	r2, [r7, #1368]	; 0x558
 8023e56:	f8d7 255c 	ldr.w	r2, [r7, #1372]	; 0x55c
 8023e5a:	4413      	add	r3, r2
 8023e5c:	f8c7 355c 	str.w	r3, [r7, #1372]	; 0x55c
 8023e60:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 8023e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023e68:	f8d7 1558 	ldr.w	r1, [r7, #1368]	; 0x558
 8023e6c:	1851      	adds	r1, r2, r1
 8023e6e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
 8023e72:	f8d7 155c 	ldr.w	r1, [r7, #1372]	; 0x55c
 8023e76:	414b      	adcs	r3, r1
 8023e78:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8023e7c:	e9d7 345c 	ldrd	r3, r4, [r7, #368]	; 0x170
 8023e80:	f507 62f0 	add.w	r2, r7, #1920	; 0x780
 8023e84:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8023e88:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 8023e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023e90:	2b00      	cmp	r3, #0
 8023e92:	da0a      	bge.n	8023eaa <arm_softmax_s8+0x219a>
 8023e94:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8023e98:	1851      	adds	r1, r2, r1
 8023e9a:	f8c7 1168 	str.w	r1, [r7, #360]	; 0x168
 8023e9e:	f143 0300 	adc.w	r3, r3, #0
 8023ea2:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8023ea6:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 8023eaa:	f04f 0000 	mov.w	r0, #0
 8023eae:	f04f 0100 	mov.w	r1, #0
 8023eb2:	0fd0      	lsrs	r0, r2, #31
 8023eb4:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8023eb8:	17d9      	asrs	r1, r3, #31
 8023eba:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023ebe:	f5a3 7208 	sub.w	r2, r3, #544	; 0x220
 8023ec2:	4603      	mov	r3, r0
 8023ec4:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8023ec6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023eca:	f5a3 7206 	sub.w	r2, r3, #536	; 0x218
 8023ece:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023ed2:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8023ed6:	6812      	ldr	r2, [r2, #0]
 8023ed8:	681b      	ldr	r3, [r3, #0]
 8023eda:	429a      	cmp	r2, r3
 8023edc:	d10e      	bne.n	8023efc <arm_softmax_s8+0x21ec>
 8023ede:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023ee2:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8023ee6:	681b      	ldr	r3, [r3, #0]
 8023ee8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8023eec:	d106      	bne.n	8023efc <arm_softmax_s8+0x21ec>
        result = Q31_MAX;
 8023eee:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023ef2:	f5a3 7208 	sub.w	r2, r3, #544	; 0x220
 8023ef6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8023efa:	6013      	str	r3, [r2, #0]
    return result;
 8023efc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023f00:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8023f04:	681a      	ldr	r2, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 8023f06:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023f0a:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8023f0e:	681b      	ldr	r3, [r3, #0]
 8023f10:	1a99      	subs	r1, r3, r2
 8023f12:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023f16:	f5a3 720b 	sub.w	r2, r3, #556	; 0x22c
 8023f1a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023f1e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8023f22:	681b      	ldr	r3, [r3, #0]
 8023f24:	6013      	str	r3, [r2, #0]
 8023f26:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023f2a:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8023f2e:	6019      	str	r1, [r3, #0]
    q31_t result = 0;
 8023f30:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023f34:	f5a3 720d 	sub.w	r2, r3, #564	; 0x234
 8023f38:	2300      	movs	r3, #0
 8023f3a:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8023f3c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8023f40:	f04f 0300 	mov.w	r3, #0
 8023f44:	f507 61ed 	add.w	r1, r7, #1896	; 0x768
 8023f48:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8023f4c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023f50:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8023f54:	681b      	ldr	r3, [r3, #0]
 8023f56:	0fdb      	lsrs	r3, r3, #31
 8023f58:	b2da      	uxtb	r2, r3
 8023f5a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023f5e:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8023f62:	681b      	ldr	r3, [r3, #0]
 8023f64:	0fdb      	lsrs	r3, r3, #31
 8023f66:	b2db      	uxtb	r3, r3
 8023f68:	4053      	eors	r3, r2
 8023f6a:	b2db      	uxtb	r3, r3
 8023f6c:	2b00      	cmp	r3, #0
 8023f6e:	d012      	beq.n	8023f96 <arm_softmax_s8+0x2286>
        mult = 1 - mult;
 8023f70:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 8023f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023f78:	2100      	movs	r1, #0
 8023f7a:	f1d2 0001 	rsbs	r0, r2, #1
 8023f7e:	f8c7 0160 	str.w	r0, [r7, #352]	; 0x160
 8023f82:	eb61 0303 	sbc.w	r3, r1, r3
 8023f86:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8023f8a:	e9d7 3458 	ldrd	r3, r4, [r7, #352]	; 0x160
 8023f8e:	f507 62ed 	add.w	r2, r7, #1896	; 0x768
 8023f92:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8023f96:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023f9a:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8023f9e:	681b      	ldr	r3, [r3, #0]
 8023fa0:	17da      	asrs	r2, r3, #31
 8023fa2:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
 8023fa6:	f8c7 23fc 	str.w	r2, [r7, #1020]	; 0x3fc
 8023faa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023fae:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8023fb2:	681b      	ldr	r3, [r3, #0]
 8023fb4:	17da      	asrs	r2, r3, #31
 8023fb6:	f8c7 33f0 	str.w	r3, [r7, #1008]	; 0x3f0
 8023fba:	f8c7 23f4 	str.w	r2, [r7, #1012]	; 0x3f4
 8023fbe:	e9d7 01fe 	ldrd	r0, r1, [r7, #1016]	; 0x3f8
 8023fc2:	460b      	mov	r3, r1
 8023fc4:	f8d7 23f0 	ldr.w	r2, [r7, #1008]	; 0x3f0
 8023fc8:	fb02 f203 	mul.w	r2, r2, r3
 8023fcc:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 8023fd0:	e9c7 01fe 	strd	r0, r1, [r7, #1016]	; 0x3f8
 8023fd4:	4601      	mov	r1, r0
 8023fd6:	fb01 f303 	mul.w	r3, r1, r3
 8023fda:	4413      	add	r3, r2
 8023fdc:	f8d7 23f8 	ldr.w	r2, [r7, #1016]	; 0x3f8
 8023fe0:	f8d7 13f0 	ldr.w	r1, [r7, #1008]	; 0x3f0
 8023fe4:	fba2 1201 	umull	r1, r2, r2, r1
 8023fe8:	f8c7 2554 	str.w	r2, [r7, #1364]	; 0x554
 8023fec:	460a      	mov	r2, r1
 8023fee:	f8c7 2550 	str.w	r2, [r7, #1360]	; 0x550
 8023ff2:	f8d7 2554 	ldr.w	r2, [r7, #1364]	; 0x554
 8023ff6:	4413      	add	r3, r2
 8023ff8:	f8c7 3554 	str.w	r3, [r7, #1364]	; 0x554
 8023ffc:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 8024000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024004:	f8d7 1550 	ldr.w	r1, [r7, #1360]	; 0x550
 8024008:	1851      	adds	r1, r2, r1
 802400a:	f8c7 1158 	str.w	r1, [r7, #344]	; 0x158
 802400e:	f8d7 1554 	ldr.w	r1, [r7, #1364]	; 0x554
 8024012:	414b      	adcs	r3, r1
 8024014:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8024018:	e9d7 3456 	ldrd	r3, r4, [r7, #344]	; 0x158
 802401c:	f507 62ed 	add.w	r2, r7, #1896	; 0x768
 8024020:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8024024:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 8024028:	e9d3 2300 	ldrd	r2, r3, [r3]
 802402c:	2b00      	cmp	r3, #0
 802402e:	da0a      	bge.n	8024046 <arm_softmax_s8+0x2336>
 8024030:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8024034:	1851      	adds	r1, r2, r1
 8024036:	f8c7 1150 	str.w	r1, [r7, #336]	; 0x150
 802403a:	f143 0300 	adc.w	r3, r3, #0
 802403e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8024042:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8024046:	f04f 0000 	mov.w	r0, #0
 802404a:	f04f 0100 	mov.w	r1, #0
 802404e:	0fd0      	lsrs	r0, r2, #31
 8024050:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8024054:	17d9      	asrs	r1, r3, #31
 8024056:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802405a:	f5a3 720d 	sub.w	r2, r3, #564	; 0x234
 802405e:	4603      	mov	r3, r0
 8024060:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8024062:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024066:	f5a3 720b 	sub.w	r2, r3, #556	; 0x22c
 802406a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802406e:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8024072:	6812      	ldr	r2, [r2, #0]
 8024074:	681b      	ldr	r3, [r3, #0]
 8024076:	429a      	cmp	r2, r3
 8024078:	d10e      	bne.n	8024098 <arm_softmax_s8+0x2388>
 802407a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802407e:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8024082:	681b      	ldr	r3, [r3, #0]
 8024084:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8024088:	d106      	bne.n	8024098 <arm_softmax_s8+0x2388>
        result = Q31_MAX;
 802408a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802408e:	f5a3 720d 	sub.w	r2, r3, #564	; 0x234
 8024092:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8024096:	6013      	str	r3, [r2, #0]
    return result;
 8024098:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802409c:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 80240a0:	681a      	ldr	r2, [r3, #0]
 80240a2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80240a6:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80240aa:	601a      	str	r2, [r3, #0]
    const int32_t thresh = ((1 << (31 - exp)) - 1);
 80240ac:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80240b0:	4619      	mov	r1, r3
 80240b2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80240b6:	f5a3 7212 	sub.w	r2, r3, #584	; 0x248
 80240ba:	1e4b      	subs	r3, r1, #1
 80240bc:	6013      	str	r3, [r2, #0]
    int32_t result = val << exp;
 80240be:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80240c2:	f5a3 7213 	sub.w	r2, r3, #588	; 0x24c
 80240c6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80240ca:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80240ce:	681b      	ldr	r3, [r3, #0]
 80240d0:	009b      	lsls	r3, r3, #2
 80240d2:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 80240d4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80240d8:	f5a3 7211 	sub.w	r2, r3, #580	; 0x244
 80240dc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80240e0:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 80240e4:	6812      	ldr	r2, [r2, #0]
 80240e6:	681b      	ldr	r3, [r3, #0]
 80240e8:	429a      	cmp	r2, r3
 80240ea:	dd02      	ble.n	80240f2 <arm_softmax_s8+0x23e2>
 80240ec:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 80240f0:	e000      	b.n	80240f4 <arm_softmax_s8+0x23e4>
 80240f2:	2000      	movs	r0, #0
 80240f4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80240f8:	f5a3 7211 	sub.w	r2, r3, #580	; 0x244
 80240fc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024100:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8024104:	6812      	ldr	r2, [r2, #0]
 8024106:	681b      	ldr	r3, [r3, #0]
 8024108:	429a      	cmp	r2, r3
 802410a:	dd01      	ble.n	8024110 <arm_softmax_s8+0x2400>
 802410c:	2200      	movs	r2, #0
 802410e:	e001      	b.n	8024114 <arm_softmax_s8+0x2404>
 8024110:	f04f 32ff 	mov.w	r2, #4294967295
 8024114:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024118:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 802411c:	681b      	ldr	r3, [r3, #0]
 802411e:	ea02 0103 	and.w	r1, r2, r3
 8024122:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024126:	f5a3 7213 	sub.w	r2, r3, #588	; 0x24c
 802412a:	ea81 0300 	eor.w	r3, r1, r0
 802412e:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 8024130:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024134:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8024138:	681b      	ldr	r3, [r3, #0]
 802413a:	425a      	negs	r2, r3
 802413c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024140:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8024144:	681b      	ldr	r3, [r3, #0]
 8024146:	4293      	cmp	r3, r2
 8024148:	da02      	bge.n	8024150 <arm_softmax_s8+0x2440>
 802414a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 802414e:	e000      	b.n	8024152 <arm_softmax_s8+0x2442>
 8024150:	2000      	movs	r0, #0
 8024152:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024156:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 802415a:	681b      	ldr	r3, [r3, #0]
 802415c:	425a      	negs	r2, r3
 802415e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024162:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8024166:	681b      	ldr	r3, [r3, #0]
 8024168:	4293      	cmp	r3, r2
 802416a:	da05      	bge.n	8024178 <arm_softmax_s8+0x2468>
 802416c:	2200      	movs	r2, #0
 802416e:	e005      	b.n	802417c <arm_softmax_s8+0x246c>
 8024170:	c3c3c3c4 	.word	0xc3c3c3c4
 8024174:	ffffffff 	.word	0xffffffff
 8024178:	f04f 32ff 	mov.w	r2, #4294967295
 802417c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024180:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8024184:	681b      	ldr	r3, [r3, #0]
 8024186:	ea02 0103 	and.w	r1, r2, r3
 802418a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802418e:	f5a3 7213 	sub.w	r2, r3, #588	; 0x24c
 8024192:	ea81 0300 	eor.w	r3, r1, r0
 8024196:	6013      	str	r3, [r2, #0]
    return result;
 8024198:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802419c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80241a0:	6819      	ldr	r1, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 80241a2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80241a6:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 80241aa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80241ae:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80241b2:	681b      	ldr	r3, [r3, #0]
 80241b4:	440b      	add	r3, r1
 80241b6:	6013      	str	r3, [r2, #0]
 80241b8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80241bc:	f5a3 7214 	sub.w	r2, r3, #592	; 0x250
 80241c0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80241c4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80241c8:	681b      	ldr	r3, [r3, #0]
 80241ca:	6013      	str	r3, [r2, #0]
    const int32_t thresh = ((1 << (31 - exp)) - 1);
 80241cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80241d0:	4619      	mov	r1, r3
 80241d2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80241d6:	f5a3 7215 	sub.w	r2, r3, #596	; 0x254
 80241da:	1e4b      	subs	r3, r1, #1
 80241dc:	6013      	str	r3, [r2, #0]
    int32_t result = val << exp;
 80241de:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80241e2:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 80241e6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80241ea:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 80241ee:	681b      	ldr	r3, [r3, #0]
 80241f0:	005b      	lsls	r3, r3, #1
 80241f2:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 80241f4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80241f8:	f5a3 7214 	sub.w	r2, r3, #592	; 0x250
 80241fc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024200:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8024204:	6812      	ldr	r2, [r2, #0]
 8024206:	681b      	ldr	r3, [r3, #0]
 8024208:	429a      	cmp	r2, r3
 802420a:	dd02      	ble.n	8024212 <arm_softmax_s8+0x2502>
 802420c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8024210:	e000      	b.n	8024214 <arm_softmax_s8+0x2504>
 8024212:	2000      	movs	r0, #0
 8024214:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024218:	f5a3 7214 	sub.w	r2, r3, #592	; 0x250
 802421c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024220:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8024224:	6812      	ldr	r2, [r2, #0]
 8024226:	681b      	ldr	r3, [r3, #0]
 8024228:	429a      	cmp	r2, r3
 802422a:	dd01      	ble.n	8024230 <arm_softmax_s8+0x2520>
 802422c:	2200      	movs	r2, #0
 802422e:	e001      	b.n	8024234 <arm_softmax_s8+0x2524>
 8024230:	f04f 32ff 	mov.w	r2, #4294967295
 8024234:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024238:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 802423c:	681b      	ldr	r3, [r3, #0]
 802423e:	ea02 0103 	and.w	r1, r2, r3
 8024242:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024246:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 802424a:	ea81 0300 	eor.w	r3, r1, r0
 802424e:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 8024250:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024254:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8024258:	681b      	ldr	r3, [r3, #0]
 802425a:	425a      	negs	r2, r3
 802425c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024260:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8024264:	681b      	ldr	r3, [r3, #0]
 8024266:	4293      	cmp	r3, r2
 8024268:	da02      	bge.n	8024270 <arm_softmax_s8+0x2560>
 802426a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 802426e:	e000      	b.n	8024272 <arm_softmax_s8+0x2562>
 8024270:	2000      	movs	r0, #0
 8024272:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024276:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 802427a:	681b      	ldr	r3, [r3, #0]
 802427c:	425a      	negs	r2, r3
 802427e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024282:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8024286:	681b      	ldr	r3, [r3, #0]
 8024288:	4293      	cmp	r3, r2
 802428a:	da01      	bge.n	8024290 <arm_softmax_s8+0x2580>
 802428c:	2200      	movs	r2, #0
 802428e:	e001      	b.n	8024294 <arm_softmax_s8+0x2584>
 8024290:	f04f 32ff 	mov.w	r2, #4294967295
 8024294:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024298:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 802429c:	681b      	ldr	r3, [r3, #0]
 802429e:	ea02 0103 	and.w	r1, r2, r3
 80242a2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80242a6:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 80242aa:	ea81 0300 	eor.w	r3, r1, r0
 80242ae:	6013      	str	r3, [r2, #0]
    return result;
 80242b0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80242b4:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80242b8:	681b      	ldr	r3, [r3, #0]
    return MUL_POW2(x, 1);
 80242ba:	bf00      	nop
 80242bc:	f8c7 3984 	str.w	r3, [r7, #2436]	; 0x984

        for (col = 0; col < row_size; ++col)
 80242c0:	2300      	movs	r3, #0
 80242c2:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
 80242c6:	f001 bd85 	b.w	8025dd4 <arm_softmax_s8+0x40c4>
        {
            diff = input[col] - max;
 80242ca:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 80242ce:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80242d2:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 80242d6:	681b      	ldr	r3, [r3, #0]
 80242d8:	4413      	add	r3, r2
 80242da:	f993 3000 	ldrsb.w	r3, [r3]
 80242de:	461a      	mov	r2, r3
 80242e0:	f997 399f 	ldrsb.w	r3, [r7, #2463]	; 0x99f
 80242e4:	1ad3      	subs	r3, r2, r3
 80242e6:	f8c7 3990 	str.w	r3, [r7, #2448]	; 0x990
            if (diff >= diff_min)
 80242ea:	f8d7 2990 	ldr.w	r2, [r7, #2448]	; 0x990
 80242ee:	f8d7 39cc 	ldr.w	r3, [r7, #2508]	; 0x9cc
 80242f2:	429a      	cmp	r2, r3
 80242f4:	f2c1 8562 	blt.w	8025dbc <arm_softmax_s8+0x40ac>
            {
                const int32_t res =
                    DIV_POW2(MUL_SAT(shifted_scale, EXP_ON_NEG(MUL_SAT(diff * mask, mult))), bits_over_unit) - 128;
 80242f8:	f8d7 2990 	ldr.w	r2, [r7, #2448]	; 0x990
 80242fc:	f8d7 3994 	ldr.w	r3, [r7, #2452]	; 0x994
 8024300:	fb03 f202 	mul.w	r2, r3, r2
 8024304:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024308:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 802430c:	601a      	str	r2, [r3, #0]
 802430e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024312:	f5a3 726c 	sub.w	r2, r3, #944	; 0x3b0
 8024316:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802431a:	f5a3 7374 	sub.w	r3, r3, #976	; 0x3d0
 802431e:	681b      	ldr	r3, [r3, #0]
 8024320:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8024322:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024326:	f5a3 726d 	sub.w	r2, r3, #948	; 0x3b4
 802432a:	2300      	movs	r3, #0
 802432c:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 802432e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8024332:	f04f 0300 	mov.w	r3, #0
 8024336:	f507 61bd 	add.w	r1, r7, #1512	; 0x5e8
 802433a:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 802433e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024342:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 8024346:	681b      	ldr	r3, [r3, #0]
 8024348:	0fdb      	lsrs	r3, r3, #31
 802434a:	b2da      	uxtb	r2, r3
 802434c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024350:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 8024354:	681b      	ldr	r3, [r3, #0]
 8024356:	0fdb      	lsrs	r3, r3, #31
 8024358:	b2db      	uxtb	r3, r3
 802435a:	4053      	eors	r3, r2
 802435c:	b2db      	uxtb	r3, r3
 802435e:	2b00      	cmp	r3, #0
 8024360:	d012      	beq.n	8024388 <arm_softmax_s8+0x2678>
        mult = 1 - mult;
 8024362:	f507 63bd 	add.w	r3, r7, #1512	; 0x5e8
 8024366:	e9d3 2300 	ldrd	r2, r3, [r3]
 802436a:	2100      	movs	r1, #0
 802436c:	f1d2 0001 	rsbs	r0, r2, #1
 8024370:	f8c7 0148 	str.w	r0, [r7, #328]	; 0x148
 8024374:	eb61 0303 	sbc.w	r3, r1, r3
 8024378:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 802437c:	e9d7 3452 	ldrd	r3, r4, [r7, #328]	; 0x148
 8024380:	f507 62bd 	add.w	r2, r7, #1512	; 0x5e8
 8024384:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8024388:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802438c:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 8024390:	681b      	ldr	r3, [r3, #0]
 8024392:	17da      	asrs	r2, r3, #31
 8024394:	f8c7 3360 	str.w	r3, [r7, #864]	; 0x360
 8024398:	f8c7 2364 	str.w	r2, [r7, #868]	; 0x364
 802439c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80243a0:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 80243a4:	681b      	ldr	r3, [r3, #0]
 80243a6:	17da      	asrs	r2, r3, #31
 80243a8:	f8c7 3358 	str.w	r3, [r7, #856]	; 0x358
 80243ac:	f8c7 235c 	str.w	r2, [r7, #860]	; 0x35c
 80243b0:	e9d7 01d8 	ldrd	r0, r1, [r7, #864]	; 0x360
 80243b4:	460b      	mov	r3, r1
 80243b6:	f8d7 2358 	ldr.w	r2, [r7, #856]	; 0x358
 80243ba:	fb02 f203 	mul.w	r2, r2, r3
 80243be:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 80243c2:	e9c7 01d8 	strd	r0, r1, [r7, #864]	; 0x360
 80243c6:	4601      	mov	r1, r0
 80243c8:	fb01 f303 	mul.w	r3, r1, r3
 80243cc:	4413      	add	r3, r2
 80243ce:	f8d7 2360 	ldr.w	r2, [r7, #864]	; 0x360
 80243d2:	f8d7 1358 	ldr.w	r1, [r7, #856]	; 0x358
 80243d6:	fba2 1201 	umull	r1, r2, r2, r1
 80243da:	f8c7 24e4 	str.w	r2, [r7, #1252]	; 0x4e4
 80243de:	460a      	mov	r2, r1
 80243e0:	f8c7 24e0 	str.w	r2, [r7, #1248]	; 0x4e0
 80243e4:	f8d7 24e4 	ldr.w	r2, [r7, #1252]	; 0x4e4
 80243e8:	4413      	add	r3, r2
 80243ea:	f8c7 34e4 	str.w	r3, [r7, #1252]	; 0x4e4
 80243ee:	f507 63bd 	add.w	r3, r7, #1512	; 0x5e8
 80243f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80243f6:	f8d7 14e0 	ldr.w	r1, [r7, #1248]	; 0x4e0
 80243fa:	1851      	adds	r1, r2, r1
 80243fc:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
 8024400:	f8d7 14e4 	ldr.w	r1, [r7, #1252]	; 0x4e4
 8024404:	414b      	adcs	r3, r1
 8024406:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 802440a:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 802440e:	f507 62bd 	add.w	r2, r7, #1512	; 0x5e8
 8024412:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8024416:	f507 63bd 	add.w	r3, r7, #1512	; 0x5e8
 802441a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802441e:	2b00      	cmp	r3, #0
 8024420:	da0a      	bge.n	8024438 <arm_softmax_s8+0x2728>
 8024422:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8024426:	1851      	adds	r1, r2, r1
 8024428:	f8c7 1138 	str.w	r1, [r7, #312]	; 0x138
 802442c:	f143 0300 	adc.w	r3, r3, #0
 8024430:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8024434:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8024438:	f04f 0000 	mov.w	r0, #0
 802443c:	f04f 0100 	mov.w	r1, #0
 8024440:	0fd0      	lsrs	r0, r2, #31
 8024442:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8024446:	17d9      	asrs	r1, r3, #31
 8024448:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802444c:	f5a3 726d 	sub.w	r2, r3, #948	; 0x3b4
 8024450:	4603      	mov	r3, r0
 8024452:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8024454:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024458:	f5a3 726b 	sub.w	r2, r3, #940	; 0x3ac
 802445c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024460:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 8024464:	6812      	ldr	r2, [r2, #0]
 8024466:	681b      	ldr	r3, [r3, #0]
 8024468:	429a      	cmp	r2, r3
 802446a:	d10e      	bne.n	802448a <arm_softmax_s8+0x277a>
 802446c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024470:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 8024474:	681b      	ldr	r3, [r3, #0]
 8024476:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802447a:	d106      	bne.n	802448a <arm_softmax_s8+0x277a>
        result = Q31_MAX;
 802447c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024480:	f5a3 726d 	sub.w	r2, r3, #948	; 0x3b4
 8024484:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8024488:	6013      	str	r3, [r2, #0]
    return result;
 802448a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802448e:	f5a3 736d 	sub.w	r3, r3, #948	; 0x3b4
 8024492:	681a      	ldr	r2, [r3, #0]
 8024494:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024498:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 802449c:	601a      	str	r2, [r3, #0]
    int32_t mask = 0;
 802449e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80244a2:	f5a3 7224 	sub.w	r2, r3, #656	; 0x290
 80244a6:	2300      	movs	r3, #0
 80244a8:	6013      	str	r3, [r2, #0]
    int32_t shift = 24;
 80244aa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80244ae:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 80244b2:	2318      	movs	r3, #24
 80244b4:	6013      	str	r3, [r2, #0]
    const int32_t val_mod_minus_quarter = (val & ((1 << shift) - 1)) - (1 << shift);
 80244b6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80244ba:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 80244be:	2201      	movs	r2, #1
 80244c0:	681b      	ldr	r3, [r3, #0]
 80244c2:	fa02 f303 	lsl.w	r3, r2, r3
 80244c6:	1e5a      	subs	r2, r3, #1
 80244c8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80244cc:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 80244d0:	681b      	ldr	r3, [r3, #0]
 80244d2:	ea02 0003 	and.w	r0, r2, r3
 80244d6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80244da:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 80244de:	2201      	movs	r2, #1
 80244e0:	681b      	ldr	r3, [r3, #0]
 80244e2:	fa02 f103 	lsl.w	r1, r2, r3
 80244e6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80244ea:	f5a3 7226 	sub.w	r2, r3, #664	; 0x298
 80244ee:	1a43      	subs	r3, r0, r1
 80244f0:	6013      	str	r3, [r2, #0]
    const int32_t remainder = val_mod_minus_quarter - val;
 80244f2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80244f6:	f5a3 7127 	sub.w	r1, r3, #668	; 0x29c
 80244fa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80244fe:	f5a3 7226 	sub.w	r2, r3, #664	; 0x298
 8024502:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024506:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 802450a:	6812      	ldr	r2, [r2, #0]
 802450c:	681b      	ldr	r3, [r3, #0]
 802450e:	1ad3      	subs	r3, r2, r3
 8024510:	600b      	str	r3, [r1, #0]
    const int32_t x = (val_mod_minus_quarter << 5) + (1 << 28);
 8024512:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024516:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 802451a:	681b      	ldr	r3, [r3, #0]
 802451c:	0159      	lsls	r1, r3, #5
 802451e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024522:	f5a3 7228 	sub.w	r2, r3, #672	; 0x2a0
 8024526:	f101 5380 	add.w	r3, r1, #268435456	; 0x10000000
 802452a:	6013      	str	r3, [r2, #0]
 802452c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024530:	f5a3 7229 	sub.w	r2, r3, #676	; 0x2a4
 8024534:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024538:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 802453c:	681b      	ldr	r3, [r3, #0]
 802453e:	6013      	str	r3, [r2, #0]
 8024540:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024544:	f5a3 722a 	sub.w	r2, r3, #680	; 0x2a8
 8024548:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802454c:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8024550:	681b      	ldr	r3, [r3, #0]
 8024552:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8024554:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024558:	f5a3 722b 	sub.w	r2, r3, #684	; 0x2ac
 802455c:	2300      	movs	r3, #0
 802455e:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8024560:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8024564:	f04f 0300 	mov.w	r3, #0
 8024568:	f507 61de 	add.w	r1, r7, #1776	; 0x6f0
 802456c:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8024570:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024574:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 8024578:	681b      	ldr	r3, [r3, #0]
 802457a:	0fdb      	lsrs	r3, r3, #31
 802457c:	b2da      	uxtb	r2, r3
 802457e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024582:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 8024586:	681b      	ldr	r3, [r3, #0]
 8024588:	0fdb      	lsrs	r3, r3, #31
 802458a:	b2db      	uxtb	r3, r3
 802458c:	4053      	eors	r3, r2
 802458e:	b2db      	uxtb	r3, r3
 8024590:	2b00      	cmp	r3, #0
 8024592:	d012      	beq.n	80245ba <arm_softmax_s8+0x28aa>
        mult = 1 - mult;
 8024594:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 8024598:	e9d3 2300 	ldrd	r2, r3, [r3]
 802459c:	2100      	movs	r1, #0
 802459e:	f1d2 0001 	rsbs	r0, r2, #1
 80245a2:	f8c7 0130 	str.w	r0, [r7, #304]	; 0x130
 80245a6:	eb61 0303 	sbc.w	r3, r1, r3
 80245aa:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80245ae:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 80245b2:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 80245b6:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80245ba:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80245be:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 80245c2:	681b      	ldr	r3, [r3, #0]
 80245c4:	17da      	asrs	r2, r3, #31
 80245c6:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
 80245ca:	f8c7 23dc 	str.w	r2, [r7, #988]	; 0x3dc
 80245ce:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80245d2:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 80245d6:	681b      	ldr	r3, [r3, #0]
 80245d8:	17da      	asrs	r2, r3, #31
 80245da:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
 80245de:	f8c7 23d4 	str.w	r2, [r7, #980]	; 0x3d4
 80245e2:	e9d7 01f6 	ldrd	r0, r1, [r7, #984]	; 0x3d8
 80245e6:	460b      	mov	r3, r1
 80245e8:	f8d7 23d0 	ldr.w	r2, [r7, #976]	; 0x3d0
 80245ec:	fb02 f203 	mul.w	r2, r2, r3
 80245f0:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 80245f4:	e9c7 01f6 	strd	r0, r1, [r7, #984]	; 0x3d8
 80245f8:	4601      	mov	r1, r0
 80245fa:	fb01 f303 	mul.w	r3, r1, r3
 80245fe:	4413      	add	r3, r2
 8024600:	f8d7 23d8 	ldr.w	r2, [r7, #984]	; 0x3d8
 8024604:	f8d7 13d0 	ldr.w	r1, [r7, #976]	; 0x3d0
 8024608:	fba2 1201 	umull	r1, r2, r2, r1
 802460c:	f8c7 2544 	str.w	r2, [r7, #1348]	; 0x544
 8024610:	460a      	mov	r2, r1
 8024612:	f8c7 2540 	str.w	r2, [r7, #1344]	; 0x540
 8024616:	f8d7 2544 	ldr.w	r2, [r7, #1348]	; 0x544
 802461a:	4413      	add	r3, r2
 802461c:	f8c7 3544 	str.w	r3, [r7, #1348]	; 0x544
 8024620:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 8024624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024628:	f8d7 1540 	ldr.w	r1, [r7, #1344]	; 0x540
 802462c:	1851      	adds	r1, r2, r1
 802462e:	f8c7 1128 	str.w	r1, [r7, #296]	; 0x128
 8024632:	f8d7 1544 	ldr.w	r1, [r7, #1348]	; 0x544
 8024636:	414b      	adcs	r3, r1
 8024638:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 802463c:	e9d7 344a 	ldrd	r3, r4, [r7, #296]	; 0x128
 8024640:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 8024644:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8024648:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 802464c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024650:	2b00      	cmp	r3, #0
 8024652:	da0a      	bge.n	802466a <arm_softmax_s8+0x295a>
 8024654:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8024658:	1851      	adds	r1, r2, r1
 802465a:	f8c7 1120 	str.w	r1, [r7, #288]	; 0x120
 802465e:	f143 0300 	adc.w	r3, r3, #0
 8024662:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8024666:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 802466a:	f04f 0000 	mov.w	r0, #0
 802466e:	f04f 0100 	mov.w	r1, #0
 8024672:	0fd0      	lsrs	r0, r2, #31
 8024674:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8024678:	17d9      	asrs	r1, r3, #31
 802467a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802467e:	f5a3 722b 	sub.w	r2, r3, #684	; 0x2ac
 8024682:	4603      	mov	r3, r0
 8024684:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8024686:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802468a:	f5a3 7229 	sub.w	r2, r3, #676	; 0x2a4
 802468e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024692:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 8024696:	6812      	ldr	r2, [r2, #0]
 8024698:	681b      	ldr	r3, [r3, #0]
 802469a:	429a      	cmp	r2, r3
 802469c:	d10e      	bne.n	80246bc <arm_softmax_s8+0x29ac>
 802469e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80246a2:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 80246a6:	681b      	ldr	r3, [r3, #0]
 80246a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80246ac:	d106      	bne.n	80246bc <arm_softmax_s8+0x29ac>
        result = Q31_MAX;
 80246ae:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80246b2:	f5a3 722b 	sub.w	r2, r3, #684	; 0x2ac
 80246b6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80246ba:	6013      	str	r3, [r2, #0]
    return result;
 80246bc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80246c0:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 80246c4:	681a      	ldr	r2, [r3, #0]
    const int32_t x2 = MUL_SAT(x, x);
 80246c6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80246ca:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 80246ce:	601a      	str	r2, [r3, #0]
 80246d0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80246d4:	f5a3 7230 	sub.w	r2, r3, #704	; 0x2c0
 80246d8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80246dc:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 80246e0:	681b      	ldr	r3, [r3, #0]
 80246e2:	6013      	str	r3, [r2, #0]
 80246e4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80246e8:	f5a3 7231 	sub.w	r2, r3, #708	; 0x2c4
 80246ec:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80246f0:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 80246f4:	681b      	ldr	r3, [r3, #0]
 80246f6:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80246f8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80246fc:	f5a3 7232 	sub.w	r2, r3, #712	; 0x2c8
 8024700:	2300      	movs	r3, #0
 8024702:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8024704:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8024708:	f04f 0300 	mov.w	r3, #0
 802470c:	f507 61db 	add.w	r1, r7, #1752	; 0x6d8
 8024710:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8024714:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024718:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 802471c:	681b      	ldr	r3, [r3, #0]
 802471e:	0fdb      	lsrs	r3, r3, #31
 8024720:	b2da      	uxtb	r2, r3
 8024722:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024726:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 802472a:	681b      	ldr	r3, [r3, #0]
 802472c:	0fdb      	lsrs	r3, r3, #31
 802472e:	b2db      	uxtb	r3, r3
 8024730:	4053      	eors	r3, r2
 8024732:	b2db      	uxtb	r3, r3
 8024734:	2b00      	cmp	r3, #0
 8024736:	d012      	beq.n	802475e <arm_softmax_s8+0x2a4e>
        mult = 1 - mult;
 8024738:	f507 63db 	add.w	r3, r7, #1752	; 0x6d8
 802473c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024740:	2100      	movs	r1, #0
 8024742:	f1d2 0001 	rsbs	r0, r2, #1
 8024746:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118
 802474a:	eb61 0303 	sbc.w	r3, r1, r3
 802474e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8024752:	e9d7 3446 	ldrd	r3, r4, [r7, #280]	; 0x118
 8024756:	f507 62db 	add.w	r2, r7, #1752	; 0x6d8
 802475a:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 802475e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024762:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8024766:	681b      	ldr	r3, [r3, #0]
 8024768:	17da      	asrs	r2, r3, #31
 802476a:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
 802476e:	f8c7 23cc 	str.w	r2, [r7, #972]	; 0x3cc
 8024772:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024776:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 802477a:	681b      	ldr	r3, [r3, #0]
 802477c:	17da      	asrs	r2, r3, #31
 802477e:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0
 8024782:	f8c7 23c4 	str.w	r2, [r7, #964]	; 0x3c4
 8024786:	e9d7 01f2 	ldrd	r0, r1, [r7, #968]	; 0x3c8
 802478a:	460b      	mov	r3, r1
 802478c:	f8d7 23c0 	ldr.w	r2, [r7, #960]	; 0x3c0
 8024790:	fb02 f203 	mul.w	r2, r2, r3
 8024794:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 8024798:	e9c7 01f2 	strd	r0, r1, [r7, #968]	; 0x3c8
 802479c:	4601      	mov	r1, r0
 802479e:	fb01 f303 	mul.w	r3, r1, r3
 80247a2:	4413      	add	r3, r2
 80247a4:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 80247a8:	f8d7 13c0 	ldr.w	r1, [r7, #960]	; 0x3c0
 80247ac:	fba2 1201 	umull	r1, r2, r2, r1
 80247b0:	f8c7 253c 	str.w	r2, [r7, #1340]	; 0x53c
 80247b4:	460a      	mov	r2, r1
 80247b6:	f8c7 2538 	str.w	r2, [r7, #1336]	; 0x538
 80247ba:	f8d7 253c 	ldr.w	r2, [r7, #1340]	; 0x53c
 80247be:	4413      	add	r3, r2
 80247c0:	f8c7 353c 	str.w	r3, [r7, #1340]	; 0x53c
 80247c4:	f507 63db 	add.w	r3, r7, #1752	; 0x6d8
 80247c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80247cc:	f8d7 1538 	ldr.w	r1, [r7, #1336]	; 0x538
 80247d0:	1851      	adds	r1, r2, r1
 80247d2:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 80247d6:	f8d7 153c 	ldr.w	r1, [r7, #1340]	; 0x53c
 80247da:	414b      	adcs	r3, r1
 80247dc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80247e0:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 80247e4:	f507 62db 	add.w	r2, r7, #1752	; 0x6d8
 80247e8:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 80247ec:	f507 63db 	add.w	r3, r7, #1752	; 0x6d8
 80247f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80247f4:	2b00      	cmp	r3, #0
 80247f6:	da0a      	bge.n	802480e <arm_softmax_s8+0x2afe>
 80247f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80247fc:	1851      	adds	r1, r2, r1
 80247fe:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 8024802:	f143 0300 	adc.w	r3, r3, #0
 8024806:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 802480a:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 802480e:	f04f 0000 	mov.w	r0, #0
 8024812:	f04f 0100 	mov.w	r1, #0
 8024816:	0fd0      	lsrs	r0, r2, #31
 8024818:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 802481c:	17d9      	asrs	r1, r3, #31
 802481e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024822:	f5a3 7232 	sub.w	r2, r3, #712	; 0x2c8
 8024826:	4603      	mov	r3, r0
 8024828:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 802482a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802482e:	f5a3 7230 	sub.w	r2, r3, #704	; 0x2c0
 8024832:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024836:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 802483a:	6812      	ldr	r2, [r2, #0]
 802483c:	681b      	ldr	r3, [r3, #0]
 802483e:	429a      	cmp	r2, r3
 8024840:	d10e      	bne.n	8024860 <arm_softmax_s8+0x2b50>
 8024842:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024846:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 802484a:	681b      	ldr	r3, [r3, #0]
 802484c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8024850:	d106      	bne.n	8024860 <arm_softmax_s8+0x2b50>
        result = Q31_MAX;
 8024852:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024856:	f5a3 7232 	sub.w	r2, r3, #712	; 0x2c8
 802485a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 802485e:	6013      	str	r3, [r2, #0]
    return result;
 8024860:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024864:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 8024868:	681a      	ldr	r2, [r3, #0]
 802486a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802486e:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8024872:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8024874:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024878:	f5a3 7236 	sub.w	r2, r3, #728	; 0x2d8
 802487c:	2300      	movs	r3, #0
 802487e:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8024880:	2104      	movs	r1, #4
 8024882:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024886:	f5a3 7237 	sub.w	r2, r3, #732	; 0x2dc
 802488a:	1e4b      	subs	r3, r1, #1
 802488c:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 802488e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024892:	f5a3 7138 	sub.w	r1, r3, #736	; 0x2e0
 8024896:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802489a:	f5a3 7235 	sub.w	r2, r3, #724	; 0x2d4
 802489e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80248a2:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 80248a6:	6812      	ldr	r2, [r2, #0]
 80248a8:	681b      	ldr	r3, [r3, #0]
 80248aa:	4013      	ands	r3, r2
 80248ac:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 80248ae:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80248b2:	f5a3 7236 	sub.w	r2, r3, #728	; 0x2d8
 80248b6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80248ba:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 80248be:	681b      	ldr	r3, [r3, #0]
 80248c0:	109b      	asrs	r3, r3, #2
 80248c2:	6013      	str	r3, [r2, #0]
    q31_t threshold = remainder_mask >> 1;
 80248c4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80248c8:	f5a3 7239 	sub.w	r2, r3, #740	; 0x2e4
 80248cc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80248d0:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 80248d4:	681b      	ldr	r3, [r3, #0]
 80248d6:	105b      	asrs	r3, r3, #1
 80248d8:	6013      	str	r3, [r2, #0]
    if (result < 0)
 80248da:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80248de:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 80248e2:	681b      	ldr	r3, [r3, #0]
 80248e4:	2b00      	cmp	r3, #0
 80248e6:	da0a      	bge.n	80248fe <arm_softmax_s8+0x2bee>
        threshold++;
 80248e8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80248ec:	f5a3 7239 	sub.w	r2, r3, #740	; 0x2e4
 80248f0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80248f4:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 80248f8:	681b      	ldr	r3, [r3, #0]
 80248fa:	3301      	adds	r3, #1
 80248fc:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 80248fe:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024902:	f5a3 7238 	sub.w	r2, r3, #736	; 0x2e0
 8024906:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802490a:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 802490e:	6812      	ldr	r2, [r2, #0]
 8024910:	681b      	ldr	r3, [r3, #0]
 8024912:	429a      	cmp	r2, r3
 8024914:	dd0a      	ble.n	802492c <arm_softmax_s8+0x2c1c>
        result++;
 8024916:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802491a:	f5a3 7236 	sub.w	r2, r3, #728	; 0x2d8
 802491e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024922:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8024926:	681b      	ldr	r3, [r3, #0]
 8024928:	3301      	adds	r3, #1
 802492a:	6013      	str	r3, [r2, #0]
    return result;
 802492c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024930:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8024934:	681c      	ldr	r4, [r3, #0]
 8024936:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802493a:	f5a3 723a 	sub.w	r2, r3, #744	; 0x2e8
 802493e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024942:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 8024946:	681b      	ldr	r3, [r3, #0]
 8024948:	6013      	str	r3, [r2, #0]
 802494a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802494e:	f5a3 723b 	sub.w	r2, r3, #748	; 0x2ec
 8024952:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024956:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 802495a:	681b      	ldr	r3, [r3, #0]
 802495c:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 802495e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024962:	f5a3 723c 	sub.w	r2, r3, #752	; 0x2f0
 8024966:	2300      	movs	r3, #0
 8024968:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 802496a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 802496e:	f04f 0300 	mov.w	r3, #0
 8024972:	f507 61d6 	add.w	r1, r7, #1712	; 0x6b0
 8024976:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 802497a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802497e:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8024982:	681b      	ldr	r3, [r3, #0]
 8024984:	0fdb      	lsrs	r3, r3, #31
 8024986:	b2da      	uxtb	r2, r3
 8024988:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802498c:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8024990:	681b      	ldr	r3, [r3, #0]
 8024992:	0fdb      	lsrs	r3, r3, #31
 8024994:	b2db      	uxtb	r3, r3
 8024996:	4053      	eors	r3, r2
 8024998:	b2db      	uxtb	r3, r3
 802499a:	2b00      	cmp	r3, #0
 802499c:	d012      	beq.n	80249c4 <arm_softmax_s8+0x2cb4>
        mult = 1 - mult;
 802499e:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 80249a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80249a6:	2100      	movs	r1, #0
 80249a8:	f1d2 0001 	rsbs	r0, r2, #1
 80249ac:	f8c7 0100 	str.w	r0, [r7, #256]	; 0x100
 80249b0:	eb61 0303 	sbc.w	r3, r1, r3
 80249b4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80249b8:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 80249bc:	f507 61d6 	add.w	r1, r7, #1712	; 0x6b0
 80249c0:	e9c1 2300 	strd	r2, r3, [r1]
    mult = mult + (q63_t)m1 * m2;
 80249c4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80249c8:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 80249cc:	681b      	ldr	r3, [r3, #0]
 80249ce:	17da      	asrs	r2, r3, #31
 80249d0:	f8c7 33b8 	str.w	r3, [r7, #952]	; 0x3b8
 80249d4:	f8c7 23bc 	str.w	r2, [r7, #956]	; 0x3bc
 80249d8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80249dc:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 80249e0:	681b      	ldr	r3, [r3, #0]
 80249e2:	17da      	asrs	r2, r3, #31
 80249e4:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
 80249e8:	f8c7 23b4 	str.w	r2, [r7, #948]	; 0x3b4
 80249ec:	e9d7 01ee 	ldrd	r0, r1, [r7, #952]	; 0x3b8
 80249f0:	460b      	mov	r3, r1
 80249f2:	f8d7 23b0 	ldr.w	r2, [r7, #944]	; 0x3b0
 80249f6:	fb02 f203 	mul.w	r2, r2, r3
 80249fa:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 80249fe:	e9c7 01ee 	strd	r0, r1, [r7, #952]	; 0x3b8
 8024a02:	4601      	mov	r1, r0
 8024a04:	fb01 f303 	mul.w	r3, r1, r3
 8024a08:	4413      	add	r3, r2
 8024a0a:	f8d7 23b8 	ldr.w	r2, [r7, #952]	; 0x3b8
 8024a0e:	f8d7 13b0 	ldr.w	r1, [r7, #944]	; 0x3b0
 8024a12:	fba2 1201 	umull	r1, r2, r2, r1
 8024a16:	f8c7 2534 	str.w	r2, [r7, #1332]	; 0x534
 8024a1a:	460a      	mov	r2, r1
 8024a1c:	f8c7 2530 	str.w	r2, [r7, #1328]	; 0x530
 8024a20:	f8d7 2534 	ldr.w	r2, [r7, #1332]	; 0x534
 8024a24:	4413      	add	r3, r2
 8024a26:	f8c7 3534 	str.w	r3, [r7, #1332]	; 0x534
 8024a2a:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 8024a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024a32:	f8d7 1530 	ldr.w	r1, [r7, #1328]	; 0x530
 8024a36:	1851      	adds	r1, r2, r1
 8024a38:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8024a3c:	f8d7 1534 	ldr.w	r1, [r7, #1332]	; 0x534
 8024a40:	414b      	adcs	r3, r1
 8024a42:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8024a46:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 8024a4a:	f507 61d6 	add.w	r1, r7, #1712	; 0x6b0
 8024a4e:	e9c1 2300 	strd	r2, r3, [r1]
    result = (int32_t)(mult / (1ll << 31));
 8024a52:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 8024a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024a5a:	2b00      	cmp	r3, #0
 8024a5c:	da0a      	bge.n	8024a74 <arm_softmax_s8+0x2d64>
 8024a5e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8024a62:	1851      	adds	r1, r2, r1
 8024a64:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 8024a68:	f143 0300 	adc.w	r3, r3, #0
 8024a6c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8024a70:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 8024a74:	f04f 0000 	mov.w	r0, #0
 8024a78:	f04f 0100 	mov.w	r1, #0
 8024a7c:	0fd0      	lsrs	r0, r2, #31
 8024a7e:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8024a82:	17d9      	asrs	r1, r3, #31
 8024a84:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024a88:	f5a3 723c 	sub.w	r2, r3, #752	; 0x2f0
 8024a8c:	4603      	mov	r3, r0
 8024a8e:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8024a90:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024a94:	f5a3 723a 	sub.w	r2, r3, #744	; 0x2e8
 8024a98:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024a9c:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8024aa0:	6812      	ldr	r2, [r2, #0]
 8024aa2:	681b      	ldr	r3, [r3, #0]
 8024aa4:	429a      	cmp	r2, r3
 8024aa6:	d10e      	bne.n	8024ac6 <arm_softmax_s8+0x2db6>
 8024aa8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024aac:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8024ab0:	681b      	ldr	r3, [r3, #0]
 8024ab2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8024ab6:	d106      	bne.n	8024ac6 <arm_softmax_s8+0x2db6>
        result = Q31_MAX;
 8024ab8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024abc:	f5a3 723c 	sub.w	r2, r3, #752	; 0x2f0
 8024ac0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8024ac4:	6013      	str	r3, [r2, #0]
    return result;
 8024ac6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024aca:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 8024ace:	681b      	ldr	r3, [r3, #0]
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 8024ad0:	18e2      	adds	r2, r4, r3
 8024ad2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024ad6:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 8024ada:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8024adc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024ae0:	f5a3 7240 	sub.w	r2, r3, #768	; 0x300
 8024ae4:	2300      	movs	r3, #0
 8024ae6:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8024ae8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8024aec:	f04f 0300 	mov.w	r3, #0
 8024af0:	f507 61d4 	add.w	r1, r7, #1696	; 0x6a0
 8024af4:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8024af8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024afc:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 8024b00:	681b      	ldr	r3, [r3, #0]
 8024b02:	0fdb      	lsrs	r3, r3, #31
 8024b04:	b2da      	uxtb	r2, r3
 8024b06:	2300      	movs	r3, #0
 8024b08:	4053      	eors	r3, r2
 8024b0a:	b2db      	uxtb	r3, r3
 8024b0c:	2b00      	cmp	r3, #0
 8024b0e:	d012      	beq.n	8024b36 <arm_softmax_s8+0x2e26>
        mult = 1 - mult;
 8024b10:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 8024b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024b18:	2100      	movs	r1, #0
 8024b1a:	f1d2 0001 	rsbs	r0, r2, #1
 8024b1e:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
 8024b22:	eb61 0303 	sbc.w	r3, r1, r3
 8024b26:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8024b2a:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 8024b2e:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 8024b32:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8024b36:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024b3a:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 8024b3e:	681b      	ldr	r3, [r3, #0]
 8024b40:	17da      	asrs	r2, r3, #31
 8024b42:	f8c7 33a8 	str.w	r3, [r7, #936]	; 0x3a8
 8024b46:	f8c7 23ac 	str.w	r2, [r7, #940]	; 0x3ac
 8024b4a:	a3c9      	add	r3, pc, #804	; (adr r3, 8024e70 <arm_softmax_s8+0x3160>)
 8024b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024b50:	f8d7 13ac 	ldr.w	r1, [r7, #940]	; 0x3ac
 8024b54:	fb02 f001 	mul.w	r0, r2, r1
 8024b58:	f8d7 13a8 	ldr.w	r1, [r7, #936]	; 0x3a8
 8024b5c:	fb01 f103 	mul.w	r1, r1, r3
 8024b60:	4401      	add	r1, r0
 8024b62:	f8d7 03a8 	ldr.w	r0, [r7, #936]	; 0x3a8
 8024b66:	fba0 2302 	umull	r2, r3, r0, r2
 8024b6a:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
 8024b6e:	4613      	mov	r3, r2
 8024b70:	f8c7 3528 	str.w	r3, [r7, #1320]	; 0x528
 8024b74:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 8024b78:	18cb      	adds	r3, r1, r3
 8024b7a:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
 8024b7e:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 8024b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024b86:	f8d7 1528 	ldr.w	r1, [r7, #1320]	; 0x528
 8024b8a:	1851      	adds	r1, r2, r1
 8024b8c:	f8c7 10e0 	str.w	r1, [r7, #224]	; 0xe0
 8024b90:	f8d7 152c 	ldr.w	r1, [r7, #1324]	; 0x52c
 8024b94:	414b      	adcs	r3, r1
 8024b96:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8024b9a:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8024b9e:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 8024ba2:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8024ba6:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 8024baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024bae:	2b00      	cmp	r3, #0
 8024bb0:	da0a      	bge.n	8024bc8 <arm_softmax_s8+0x2eb8>
 8024bb2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8024bb6:	1851      	adds	r1, r2, r1
 8024bb8:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8024bbc:	f143 0300 	adc.w	r3, r3, #0
 8024bc0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8024bc4:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8024bc8:	f04f 0000 	mov.w	r0, #0
 8024bcc:	f04f 0100 	mov.w	r1, #0
 8024bd0:	0fd0      	lsrs	r0, r2, #31
 8024bd2:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8024bd6:	17d9      	asrs	r1, r3, #31
 8024bd8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024bdc:	f5a3 7240 	sub.w	r2, r3, #768	; 0x300
 8024be0:	4603      	mov	r3, r0
 8024be2:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8024be4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024be8:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 8024bec:	681a      	ldr	r2, [r3, #0]
 8024bee:	4b9e      	ldr	r3, [pc, #632]	; (8024e68 <arm_softmax_s8+0x3158>)
 8024bf0:	429a      	cmp	r2, r3
 8024bf2:	d10e      	bne.n	8024c12 <arm_softmax_s8+0x2f02>
 8024bf4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024bf8:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 8024bfc:	681b      	ldr	r3, [r3, #0]
 8024bfe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8024c02:	d106      	bne.n	8024c12 <arm_softmax_s8+0x2f02>
        result = Q31_MAX;
 8024c04:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024c08:	f5a3 7240 	sub.w	r2, r3, #768	; 0x300
 8024c0c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8024c10:	6013      	str	r3, [r2, #0]
    return result;
 8024c12:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024c16:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 8024c1a:	681a      	ldr	r2, [r3, #0]
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 8024c1c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024c20:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 8024c24:	681b      	ldr	r3, [r3, #0]
 8024c26:	441a      	add	r2, r3
 8024c28:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024c2c:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8024c30:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8024c32:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024c36:	f5a3 7244 	sub.w	r2, r3, #784	; 0x310
 8024c3a:	2300      	movs	r3, #0
 8024c3c:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8024c3e:	2102      	movs	r1, #2
 8024c40:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024c44:	f5a3 7245 	sub.w	r2, r3, #788	; 0x314
 8024c48:	1e4b      	subs	r3, r1, #1
 8024c4a:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 8024c4c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024c50:	f5a3 7146 	sub.w	r1, r3, #792	; 0x318
 8024c54:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024c58:	f5a3 7243 	sub.w	r2, r3, #780	; 0x30c
 8024c5c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024c60:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 8024c64:	6812      	ldr	r2, [r2, #0]
 8024c66:	681b      	ldr	r3, [r3, #0]
 8024c68:	4013      	ands	r3, r2
 8024c6a:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 8024c6c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024c70:	f5a3 7244 	sub.w	r2, r3, #784	; 0x310
 8024c74:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024c78:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8024c7c:	681b      	ldr	r3, [r3, #0]
 8024c7e:	105b      	asrs	r3, r3, #1
 8024c80:	6013      	str	r3, [r2, #0]
    q31_t threshold = remainder_mask >> 1;
 8024c82:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024c86:	f5a3 7247 	sub.w	r2, r3, #796	; 0x31c
 8024c8a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024c8e:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 8024c92:	681b      	ldr	r3, [r3, #0]
 8024c94:	105b      	asrs	r3, r3, #1
 8024c96:	6013      	str	r3, [r2, #0]
    if (result < 0)
 8024c98:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024c9c:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8024ca0:	681b      	ldr	r3, [r3, #0]
 8024ca2:	2b00      	cmp	r3, #0
 8024ca4:	da0a      	bge.n	8024cbc <arm_softmax_s8+0x2fac>
        threshold++;
 8024ca6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024caa:	f5a3 7247 	sub.w	r2, r3, #796	; 0x31c
 8024cae:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024cb2:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 8024cb6:	681b      	ldr	r3, [r3, #0]
 8024cb8:	3301      	adds	r3, #1
 8024cba:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 8024cbc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024cc0:	f5a3 7246 	sub.w	r2, r3, #792	; 0x318
 8024cc4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024cc8:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 8024ccc:	6812      	ldr	r2, [r2, #0]
 8024cce:	681b      	ldr	r3, [r3, #0]
 8024cd0:	429a      	cmp	r2, r3
 8024cd2:	dd0a      	ble.n	8024cea <arm_softmax_s8+0x2fda>
        result++;
 8024cd4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024cd8:	f5a3 7244 	sub.w	r2, r3, #784	; 0x310
 8024cdc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024ce0:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8024ce4:	681b      	ldr	r3, [r3, #0]
 8024ce6:	3301      	adds	r3, #1
 8024ce8:	6013      	str	r3, [r2, #0]
    return result;
 8024cea:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024cee:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8024cf2:	681a      	ldr	r2, [r3, #0]
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 8024cf4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024cf8:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8024cfc:	681b      	ldr	r3, [r3, #0]
 8024cfe:	441a      	add	r2, r3
 8024d00:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024d04:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 8024d08:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8024d0a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024d0e:	f5a3 7249 	sub.w	r2, r3, #804	; 0x324
 8024d12:	2300      	movs	r3, #0
 8024d14:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8024d16:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8024d1a:	f04f 0300 	mov.w	r3, #0
 8024d1e:	f507 61cf 	add.w	r1, r7, #1656	; 0x678
 8024d22:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8024d26:	2200      	movs	r2, #0
 8024d28:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024d2c:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 8024d30:	681b      	ldr	r3, [r3, #0]
 8024d32:	0fdb      	lsrs	r3, r3, #31
 8024d34:	b2db      	uxtb	r3, r3
 8024d36:	4053      	eors	r3, r2
 8024d38:	b2db      	uxtb	r3, r3
 8024d3a:	2b00      	cmp	r3, #0
 8024d3c:	d012      	beq.n	8024d64 <arm_softmax_s8+0x3054>
        mult = 1 - mult;
 8024d3e:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8024d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024d46:	2100      	movs	r1, #0
 8024d48:	f1d2 0001 	rsbs	r0, r2, #1
 8024d4c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
 8024d50:	eb61 0303 	sbc.w	r3, r1, r3
 8024d54:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8024d58:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 8024d5c:	f507 62cf 	add.w	r2, r7, #1656	; 0x678
 8024d60:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8024d64:	a13e      	add	r1, pc, #248	; (adr r1, 8024e60 <arm_softmax_s8+0x3150>)
 8024d66:	e9d1 0100 	ldrd	r0, r1, [r1]
 8024d6a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024d6e:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 8024d72:	681b      	ldr	r3, [r3, #0]
 8024d74:	17da      	asrs	r2, r3, #31
 8024d76:	f8c7 33a0 	str.w	r3, [r7, #928]	; 0x3a0
 8024d7a:	f8c7 23a4 	str.w	r2, [r7, #932]	; 0x3a4
 8024d7e:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 8024d82:	fb03 f201 	mul.w	r2, r3, r1
 8024d86:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 8024d8a:	fb00 f303 	mul.w	r3, r0, r3
 8024d8e:	4413      	add	r3, r2
 8024d90:	f8d7 23a0 	ldr.w	r2, [r7, #928]	; 0x3a0
 8024d94:	fba0 1202 	umull	r1, r2, r0, r2
 8024d98:	f8c7 2524 	str.w	r2, [r7, #1316]	; 0x524
 8024d9c:	460a      	mov	r2, r1
 8024d9e:	f8c7 2520 	str.w	r2, [r7, #1312]	; 0x520
 8024da2:	f8d7 2524 	ldr.w	r2, [r7, #1316]	; 0x524
 8024da6:	4413      	add	r3, r2
 8024da8:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
 8024dac:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8024db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024db4:	f8d7 1520 	ldr.w	r1, [r7, #1312]	; 0x520
 8024db8:	1851      	adds	r1, r2, r1
 8024dba:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8024dbe:	f8d7 1524 	ldr.w	r1, [r7, #1316]	; 0x524
 8024dc2:	414b      	adcs	r3, r1
 8024dc4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8024dc8:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8024dcc:	f507 62cf 	add.w	r2, r7, #1656	; 0x678
 8024dd0:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8024dd4:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8024dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024ddc:	2b00      	cmp	r3, #0
 8024dde:	da0a      	bge.n	8024df6 <arm_softmax_s8+0x30e6>
 8024de0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8024de4:	1851      	adds	r1, r2, r1
 8024de6:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8024dea:	f143 0300 	adc.w	r3, r3, #0
 8024dee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8024df2:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8024df6:	f04f 0000 	mov.w	r0, #0
 8024dfa:	f04f 0100 	mov.w	r1, #0
 8024dfe:	0fd0      	lsrs	r0, r2, #31
 8024e00:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8024e04:	17d9      	asrs	r1, r3, #31
 8024e06:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024e0a:	f5a3 7249 	sub.w	r2, r3, #804	; 0x324
 8024e0e:	4603      	mov	r3, r0
 8024e10:	6013      	str	r3, [r2, #0]
    return result;
 8024e12:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024e16:	f5a3 7349 	sub.w	r3, r3, #804	; 0x324
 8024e1a:	6819      	ldr	r1, [r3, #0]
    int32_t result = 1895147668 +
 8024e1c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024e20:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 8024e24:	4b11      	ldr	r3, [pc, #68]	; (8024e6c <arm_softmax_s8+0x315c>)
 8024e26:	440b      	add	r3, r1
 8024e28:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(1672461947)
 8024e2a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024e2e:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8024e32:	6819      	ldr	r1, [r3, #0]
 8024e34:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024e38:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 8024e3c:	1c4b      	adds	r3, r1, #1
 8024e3e:	6013      	str	r3, [r2, #0]
 8024e40:	2301      	movs	r3, #1
 8024e42:	fa03 f201 	lsl.w	r2, r3, r1
 8024e46:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024e4a:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8024e4e:	681b      	ldr	r3, [r3, #0]
 8024e50:	4013      	ands	r3, r2
 8024e52:	2b00      	cmp	r3, #0
 8024e54:	d010      	beq.n	8024e78 <arm_softmax_s8+0x3168>
 8024e56:	f04f 32ff 	mov.w	r2, #4294967295
 8024e5a:	e00e      	b.n	8024e7a <arm_softmax_s8+0x316a>
 8024e5c:	f3af 8000 	nop.w
 8024e60:	70f5a894 	.word	0x70f5a894
 8024e64:	00000000 	.word	0x00000000
 8024e68:	2aaaaaab 	.word	0x2aaaaaab
 8024e6c:	70f5a894 	.word	0x70f5a894
 8024e70:	2aaaaaab 	.word	0x2aaaaaab
 8024e74:	00000000 	.word	0x00000000
 8024e78:	2200      	movs	r2, #0
 8024e7a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024e7e:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8024e82:	601a      	str	r2, [r3, #0]
 8024e84:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024e88:	f5a3 724e 	sub.w	r2, r3, #824	; 0x338
 8024e8c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024e90:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8024e94:	681b      	ldr	r3, [r3, #0]
 8024e96:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8024e98:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024e9c:	f5a3 724f 	sub.w	r2, r3, #828	; 0x33c
 8024ea0:	2300      	movs	r3, #0
 8024ea2:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8024ea4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8024ea8:	f04f 0300 	mov.w	r3, #0
 8024eac:	f507 61cc 	add.w	r1, r7, #1632	; 0x660
 8024eb0:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8024eb4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024eb8:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 8024ebc:	681b      	ldr	r3, [r3, #0]
 8024ebe:	0fdb      	lsrs	r3, r3, #31
 8024ec0:	b2da      	uxtb	r2, r3
 8024ec2:	2300      	movs	r3, #0
 8024ec4:	4053      	eors	r3, r2
 8024ec6:	b2db      	uxtb	r3, r3
 8024ec8:	2b00      	cmp	r3, #0
 8024eca:	d012      	beq.n	8024ef2 <arm_softmax_s8+0x31e2>
        mult = 1 - mult;
 8024ecc:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 8024ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024ed4:	2100      	movs	r1, #0
 8024ed6:	f1d2 0001 	rsbs	r0, r2, #1
 8024eda:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
 8024ede:	eb61 0303 	sbc.w	r3, r1, r3
 8024ee2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8024ee6:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8024eea:	f507 62cc 	add.w	r2, r7, #1632	; 0x660
 8024eee:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8024ef2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024ef6:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 8024efa:	681b      	ldr	r3, [r3, #0]
 8024efc:	17da      	asrs	r2, r3, #31
 8024efe:	f8c7 3398 	str.w	r3, [r7, #920]	; 0x398
 8024f02:	f8c7 239c 	str.w	r2, [r7, #924]	; 0x39c
 8024f06:	a3c4      	add	r3, pc, #784	; (adr r3, 8025218 <arm_softmax_s8+0x3508>)
 8024f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024f0c:	f8d7 139c 	ldr.w	r1, [r7, #924]	; 0x39c
 8024f10:	fb02 f001 	mul.w	r0, r2, r1
 8024f14:	f8d7 1398 	ldr.w	r1, [r7, #920]	; 0x398
 8024f18:	fb01 f103 	mul.w	r1, r1, r3
 8024f1c:	4401      	add	r1, r0
 8024f1e:	f8d7 0398 	ldr.w	r0, [r7, #920]	; 0x398
 8024f22:	fba0 2302 	umull	r2, r3, r0, r2
 8024f26:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
 8024f2a:	4613      	mov	r3, r2
 8024f2c:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
 8024f30:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 8024f34:	18cb      	adds	r3, r1, r3
 8024f36:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
 8024f3a:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 8024f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024f42:	f8d7 1518 	ldr.w	r1, [r7, #1304]	; 0x518
 8024f46:	1851      	adds	r1, r2, r1
 8024f48:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8024f4c:	f8d7 151c 	ldr.w	r1, [r7, #1308]	; 0x51c
 8024f50:	414b      	adcs	r3, r1
 8024f52:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8024f56:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 8024f5a:	f507 62cc 	add.w	r2, r7, #1632	; 0x660
 8024f5e:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8024f62:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 8024f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024f6a:	2b00      	cmp	r3, #0
 8024f6c:	da0a      	bge.n	8024f84 <arm_softmax_s8+0x3274>
 8024f6e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8024f72:	1851      	adds	r1, r2, r1
 8024f74:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
 8024f78:	f143 0300 	adc.w	r3, r3, #0
 8024f7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8024f80:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8024f84:	f04f 0000 	mov.w	r0, #0
 8024f88:	f04f 0100 	mov.w	r1, #0
 8024f8c:	0fd0      	lsrs	r0, r2, #31
 8024f8e:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8024f92:	17d9      	asrs	r1, r3, #31
 8024f94:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024f98:	f5a3 724f 	sub.w	r2, r3, #828	; 0x33c
 8024f9c:	4603      	mov	r3, r0
 8024f9e:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8024fa0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024fa4:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 8024fa8:	681a      	ldr	r2, [r3, #0]
 8024faa:	4b99      	ldr	r3, [pc, #612]	; (8025210 <arm_softmax_s8+0x3500>)
 8024fac:	429a      	cmp	r2, r3
 8024fae:	d10e      	bne.n	8024fce <arm_softmax_s8+0x32be>
 8024fb0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024fb4:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 8024fb8:	681b      	ldr	r3, [r3, #0]
 8024fba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8024fbe:	d106      	bne.n	8024fce <arm_softmax_s8+0x32be>
        result = Q31_MAX;
 8024fc0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024fc4:	f5a3 724f 	sub.w	r2, r3, #828	; 0x33c
 8024fc8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8024fcc:	6013      	str	r3, [r2, #0]
    return result;
 8024fce:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024fd2:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 8024fd6:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(1672461947)
 8024fd8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024fdc:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8024fe0:	681b      	ldr	r3, [r3, #0]
 8024fe2:	ea02 0003 	and.w	r0, r2, r3
 8024fe6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024fea:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8024fee:	681b      	ldr	r3, [r3, #0]
 8024ff0:	43da      	mvns	r2, r3
 8024ff2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8024ff6:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8024ffa:	681b      	ldr	r3, [r3, #0]
 8024ffc:	ea02 0103 	and.w	r1, r2, r3
 8025000:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8025004:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 8025008:	ea80 0301 	eor.w	r3, r0, r1
 802500c:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(1302514674)
 802500e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8025012:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8025016:	6819      	ldr	r1, [r3, #0]
 8025018:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802501c:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 8025020:	1c4b      	adds	r3, r1, #1
 8025022:	6013      	str	r3, [r2, #0]
 8025024:	2301      	movs	r3, #1
 8025026:	fa03 f201 	lsl.w	r2, r3, r1
 802502a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802502e:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8025032:	681b      	ldr	r3, [r3, #0]
 8025034:	4013      	ands	r3, r2
 8025036:	2b00      	cmp	r3, #0
 8025038:	d002      	beq.n	8025040 <arm_softmax_s8+0x3330>
 802503a:	f04f 32ff 	mov.w	r2, #4294967295
 802503e:	e000      	b.n	8025042 <arm_softmax_s8+0x3332>
 8025040:	2200      	movs	r2, #0
 8025042:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8025046:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 802504a:	601a      	str	r2, [r3, #0]
 802504c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8025050:	f5a3 7253 	sub.w	r2, r3, #844	; 0x34c
 8025054:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8025058:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 802505c:	681b      	ldr	r3, [r3, #0]
 802505e:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8025060:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8025064:	f5a3 7254 	sub.w	r2, r3, #848	; 0x350
 8025068:	2300      	movs	r3, #0
 802506a:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 802506c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8025070:	f04f 0300 	mov.w	r3, #0
 8025074:	f507 61ca 	add.w	r1, r7, #1616	; 0x650
 8025078:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 802507c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8025080:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8025084:	681b      	ldr	r3, [r3, #0]
 8025086:	0fdb      	lsrs	r3, r3, #31
 8025088:	b2da      	uxtb	r2, r3
 802508a:	2300      	movs	r3, #0
 802508c:	4053      	eors	r3, r2
 802508e:	b2db      	uxtb	r3, r3
 8025090:	2b00      	cmp	r3, #0
 8025092:	d012      	beq.n	80250ba <arm_softmax_s8+0x33aa>
        mult = 1 - mult;
 8025094:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8025098:	e9d3 2300 	ldrd	r2, r3, [r3]
 802509c:	2100      	movs	r1, #0
 802509e:	f1d2 0001 	rsbs	r0, r2, #1
 80250a2:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
 80250a6:	eb61 0303 	sbc.w	r3, r1, r3
 80250aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80250ae:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 80250b2:	f507 62ca 	add.w	r2, r7, #1616	; 0x650
 80250b6:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80250ba:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80250be:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 80250c2:	681b      	ldr	r3, [r3, #0]
 80250c4:	17da      	asrs	r2, r3, #31
 80250c6:	f8c7 3390 	str.w	r3, [r7, #912]	; 0x390
 80250ca:	f8c7 2394 	str.w	r2, [r7, #916]	; 0x394
 80250ce:	a34e      	add	r3, pc, #312	; (adr r3, 8025208 <arm_softmax_s8+0x34f8>)
 80250d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80250d4:	f8d7 1394 	ldr.w	r1, [r7, #916]	; 0x394
 80250d8:	fb02 f001 	mul.w	r0, r2, r1
 80250dc:	f8d7 1390 	ldr.w	r1, [r7, #912]	; 0x390
 80250e0:	fb01 f103 	mul.w	r1, r1, r3
 80250e4:	4401      	add	r1, r0
 80250e6:	f8d7 0390 	ldr.w	r0, [r7, #912]	; 0x390
 80250ea:	fba0 2302 	umull	r2, r3, r0, r2
 80250ee:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
 80250f2:	4613      	mov	r3, r2
 80250f4:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
 80250f8:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 80250fc:	18cb      	adds	r3, r1, r3
 80250fe:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
 8025102:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8025106:	e9d3 2300 	ldrd	r2, r3, [r3]
 802510a:	f8d7 1510 	ldr.w	r1, [r7, #1296]	; 0x510
 802510e:	1851      	adds	r1, r2, r1
 8025110:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8025114:	f8d7 1514 	ldr.w	r1, [r7, #1300]	; 0x514
 8025118:	414b      	adcs	r3, r1
 802511a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 802511e:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8025122:	f507 62ca 	add.w	r2, r7, #1616	; 0x650
 8025126:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 802512a:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 802512e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025132:	2b00      	cmp	r3, #0
 8025134:	da0a      	bge.n	802514c <arm_softmax_s8+0x343c>
 8025136:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 802513a:	1851      	adds	r1, r2, r1
 802513c:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 8025140:	f143 0300 	adc.w	r3, r3, #0
 8025144:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8025148:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 802514c:	f04f 0000 	mov.w	r0, #0
 8025150:	f04f 0100 	mov.w	r1, #0
 8025154:	0fd0      	lsrs	r0, r2, #31
 8025156:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 802515a:	17d9      	asrs	r1, r3, #31
 802515c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8025160:	f5a3 7254 	sub.w	r2, r3, #848	; 0x350
 8025164:	4603      	mov	r3, r0
 8025166:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8025168:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802516c:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8025170:	681a      	ldr	r2, [r3, #0]
 8025172:	4b28      	ldr	r3, [pc, #160]	; (8025214 <arm_softmax_s8+0x3504>)
 8025174:	429a      	cmp	r2, r3
 8025176:	d10e      	bne.n	8025196 <arm_softmax_s8+0x3486>
 8025178:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802517c:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8025180:	681b      	ldr	r3, [r3, #0]
 8025182:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8025186:	d106      	bne.n	8025196 <arm_softmax_s8+0x3486>
        result = Q31_MAX;
 8025188:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802518c:	f5a3 7254 	sub.w	r2, r3, #848	; 0x350
 8025190:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8025194:	6013      	str	r3, [r2, #0]
    return result;
 8025196:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802519a:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 802519e:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(1302514674)
 80251a0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80251a4:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80251a8:	681b      	ldr	r3, [r3, #0]
 80251aa:	ea02 0003 	and.w	r0, r2, r3
 80251ae:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80251b2:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80251b6:	681b      	ldr	r3, [r3, #0]
 80251b8:	43da      	mvns	r2, r3
 80251ba:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80251be:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 80251c2:	681b      	ldr	r3, [r3, #0]
 80251c4:	ea02 0103 	and.w	r1, r2, r3
 80251c8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80251cc:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 80251d0:	ea80 0301 	eor.w	r3, r0, r1
 80251d4:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(790015084)
 80251d6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80251da:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 80251de:	6819      	ldr	r1, [r3, #0]
 80251e0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80251e4:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 80251e8:	1c4b      	adds	r3, r1, #1
 80251ea:	6013      	str	r3, [r2, #0]
 80251ec:	2301      	movs	r3, #1
 80251ee:	fa03 f201 	lsl.w	r2, r3, r1
 80251f2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80251f6:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80251fa:	681b      	ldr	r3, [r3, #0]
 80251fc:	4013      	ands	r3, r2
 80251fe:	2b00      	cmp	r3, #0
 8025200:	d00e      	beq.n	8025220 <arm_softmax_s8+0x3510>
 8025202:	f04f 32ff 	mov.w	r2, #4294967295
 8025206:	e00c      	b.n	8025222 <arm_softmax_s8+0x3512>
 8025208:	4da2cbf2 	.word	0x4da2cbf2
 802520c:	00000000 	.word	0x00000000
 8025210:	63afbe7b 	.word	0x63afbe7b
 8025214:	4da2cbf2 	.word	0x4da2cbf2
 8025218:	63afbe7b 	.word	0x63afbe7b
 802521c:	00000000 	.word	0x00000000
 8025220:	2200      	movs	r2, #0
 8025222:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8025226:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 802522a:	601a      	str	r2, [r3, #0]
 802522c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8025230:	f5a3 7257 	sub.w	r2, r3, #860	; 0x35c
 8025234:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8025238:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 802523c:	681b      	ldr	r3, [r3, #0]
 802523e:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8025240:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8025244:	f5a3 7258 	sub.w	r2, r3, #864	; 0x360
 8025248:	2300      	movs	r3, #0
 802524a:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 802524c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8025250:	f04f 0300 	mov.w	r3, #0
 8025254:	f507 61c8 	add.w	r1, r7, #1600	; 0x640
 8025258:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 802525c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8025260:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 8025264:	681b      	ldr	r3, [r3, #0]
 8025266:	0fdb      	lsrs	r3, r3, #31
 8025268:	b2da      	uxtb	r2, r3
 802526a:	2300      	movs	r3, #0
 802526c:	4053      	eors	r3, r2
 802526e:	b2db      	uxtb	r3, r3
 8025270:	2b00      	cmp	r3, #0
 8025272:	d012      	beq.n	802529a <arm_softmax_s8+0x358a>
        mult = 1 - mult;
 8025274:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 8025278:	e9d3 2300 	ldrd	r2, r3, [r3]
 802527c:	2100      	movs	r1, #0
 802527e:	f1d2 0001 	rsbs	r0, r2, #1
 8025282:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
 8025286:	eb61 0303 	sbc.w	r3, r1, r3
 802528a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 802528e:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8025292:	f507 62c8 	add.w	r2, r7, #1600	; 0x640
 8025296:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 802529a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802529e:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 80252a2:	681b      	ldr	r3, [r3, #0]
 80252a4:	17da      	asrs	r2, r3, #31
 80252a6:	f8c7 3388 	str.w	r3, [r7, #904]	; 0x388
 80252aa:	f8c7 238c 	str.w	r2, [r7, #908]	; 0x38c
 80252ae:	a3c0      	add	r3, pc, #768	; (adr r3, 80255b0 <arm_softmax_s8+0x38a0>)
 80252b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80252b4:	f8d7 138c 	ldr.w	r1, [r7, #908]	; 0x38c
 80252b8:	fb02 f001 	mul.w	r0, r2, r1
 80252bc:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 80252c0:	fb01 f103 	mul.w	r1, r1, r3
 80252c4:	4401      	add	r1, r0
 80252c6:	f8d7 0388 	ldr.w	r0, [r7, #904]	; 0x388
 80252ca:	fba0 2302 	umull	r2, r3, r0, r2
 80252ce:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
 80252d2:	4613      	mov	r3, r2
 80252d4:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
 80252d8:	f8d7 350c 	ldr.w	r3, [r7, #1292]	; 0x50c
 80252dc:	18cb      	adds	r3, r1, r3
 80252de:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
 80252e2:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 80252e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80252ea:	f8d7 1508 	ldr.w	r1, [r7, #1288]	; 0x508
 80252ee:	1851      	adds	r1, r2, r1
 80252f0:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 80252f4:	f8d7 150c 	ldr.w	r1, [r7, #1292]	; 0x50c
 80252f8:	414b      	adcs	r3, r1
 80252fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80252fe:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 8025302:	f507 62c8 	add.w	r2, r7, #1600	; 0x640
 8025306:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 802530a:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 802530e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025312:	2b00      	cmp	r3, #0
 8025314:	da08      	bge.n	8025328 <arm_softmax_s8+0x3618>
 8025316:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 802531a:	1851      	adds	r1, r2, r1
 802531c:	67b9      	str	r1, [r7, #120]	; 0x78
 802531e:	f143 0300 	adc.w	r3, r3, #0
 8025322:	67fb      	str	r3, [r7, #124]	; 0x7c
 8025324:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8025328:	f04f 0000 	mov.w	r0, #0
 802532c:	f04f 0100 	mov.w	r1, #0
 8025330:	0fd0      	lsrs	r0, r2, #31
 8025332:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8025336:	17d9      	asrs	r1, r3, #31
 8025338:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802533c:	f5a3 7258 	sub.w	r2, r3, #864	; 0x360
 8025340:	4603      	mov	r3, r0
 8025342:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8025344:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8025348:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 802534c:	681a      	ldr	r2, [r3, #0]
 802534e:	4b96      	ldr	r3, [pc, #600]	; (80255a8 <arm_softmax_s8+0x3898>)
 8025350:	429a      	cmp	r2, r3
 8025352:	d10e      	bne.n	8025372 <arm_softmax_s8+0x3662>
 8025354:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8025358:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 802535c:	681b      	ldr	r3, [r3, #0]
 802535e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8025362:	d106      	bne.n	8025372 <arm_softmax_s8+0x3662>
        result = Q31_MAX;
 8025364:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8025368:	f5a3 7258 	sub.w	r2, r3, #864	; 0x360
 802536c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8025370:	6013      	str	r3, [r2, #0]
    return result;
 8025372:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8025376:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 802537a:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(790015084)
 802537c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8025380:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8025384:	681b      	ldr	r3, [r3, #0]
 8025386:	ea02 0003 	and.w	r0, r2, r3
 802538a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802538e:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8025392:	681b      	ldr	r3, [r3, #0]
 8025394:	43da      	mvns	r2, r3
 8025396:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802539a:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 802539e:	681b      	ldr	r3, [r3, #0]
 80253a0:	ea02 0103 	and.w	r1, r2, r3
 80253a4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80253a8:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 80253ac:	ea80 0301 	eor.w	r3, r0, r1
 80253b0:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(290630308)
 80253b2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80253b6:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 80253ba:	6819      	ldr	r1, [r3, #0]
 80253bc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80253c0:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 80253c4:	1c4b      	adds	r3, r1, #1
 80253c6:	6013      	str	r3, [r2, #0]
 80253c8:	2301      	movs	r3, #1
 80253ca:	fa03 f201 	lsl.w	r2, r3, r1
 80253ce:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80253d2:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80253d6:	681b      	ldr	r3, [r3, #0]
 80253d8:	4013      	ands	r3, r2
 80253da:	2b00      	cmp	r3, #0
 80253dc:	d002      	beq.n	80253e4 <arm_softmax_s8+0x36d4>
 80253de:	f04f 32ff 	mov.w	r2, #4294967295
 80253e2:	e000      	b.n	80253e6 <arm_softmax_s8+0x36d6>
 80253e4:	2200      	movs	r2, #0
 80253e6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80253ea:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80253ee:	601a      	str	r2, [r3, #0]
 80253f0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80253f4:	f5a3 725b 	sub.w	r2, r3, #876	; 0x36c
 80253f8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80253fc:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8025400:	681b      	ldr	r3, [r3, #0]
 8025402:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8025404:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8025408:	f5a3 725c 	sub.w	r2, r3, #880	; 0x370
 802540c:	2300      	movs	r3, #0
 802540e:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8025410:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8025414:	f04f 0300 	mov.w	r3, #0
 8025418:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 802541c:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8025420:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8025424:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 8025428:	681b      	ldr	r3, [r3, #0]
 802542a:	0fdb      	lsrs	r3, r3, #31
 802542c:	b2da      	uxtb	r2, r3
 802542e:	2300      	movs	r3, #0
 8025430:	4053      	eors	r3, r2
 8025432:	b2db      	uxtb	r3, r3
 8025434:	2b00      	cmp	r3, #0
 8025436:	d010      	beq.n	802545a <arm_softmax_s8+0x374a>
        mult = 1 - mult;
 8025438:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 802543c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025440:	2100      	movs	r1, #0
 8025442:	f1d2 0001 	rsbs	r0, r2, #1
 8025446:	6738      	str	r0, [r7, #112]	; 0x70
 8025448:	eb61 0303 	sbc.w	r3, r1, r3
 802544c:	677b      	str	r3, [r7, #116]	; 0x74
 802544e:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 8025452:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8025456:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 802545a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802545e:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 8025462:	681b      	ldr	r3, [r3, #0]
 8025464:	17da      	asrs	r2, r3, #31
 8025466:	f8c7 3380 	str.w	r3, [r7, #896]	; 0x380
 802546a:	f8c7 2384 	str.w	r2, [r7, #900]	; 0x384
 802546e:	a34c      	add	r3, pc, #304	; (adr r3, 80255a0 <arm_softmax_s8+0x3890>)
 8025470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025474:	f8d7 1384 	ldr.w	r1, [r7, #900]	; 0x384
 8025478:	fb02 f001 	mul.w	r0, r2, r1
 802547c:	f8d7 1380 	ldr.w	r1, [r7, #896]	; 0x380
 8025480:	fb01 f103 	mul.w	r1, r1, r3
 8025484:	4401      	add	r1, r0
 8025486:	f8d7 0380 	ldr.w	r0, [r7, #896]	; 0x380
 802548a:	fba0 2302 	umull	r2, r3, r0, r2
 802548e:	f8c7 3504 	str.w	r3, [r7, #1284]	; 0x504
 8025492:	4613      	mov	r3, r2
 8025494:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
 8025498:	f8d7 3504 	ldr.w	r3, [r7, #1284]	; 0x504
 802549c:	18cb      	adds	r3, r1, r3
 802549e:	f8c7 3504 	str.w	r3, [r7, #1284]	; 0x504
 80254a2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80254a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80254aa:	f8d7 1500 	ldr.w	r1, [r7, #1280]	; 0x500
 80254ae:	1851      	adds	r1, r2, r1
 80254b0:	66b9      	str	r1, [r7, #104]	; 0x68
 80254b2:	f8d7 1504 	ldr.w	r1, [r7, #1284]	; 0x504
 80254b6:	414b      	adcs	r3, r1
 80254b8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80254ba:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 80254be:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80254c2:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 80254c6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80254ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80254ce:	2b00      	cmp	r3, #0
 80254d0:	da08      	bge.n	80254e4 <arm_softmax_s8+0x37d4>
 80254d2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80254d6:	1851      	adds	r1, r2, r1
 80254d8:	6639      	str	r1, [r7, #96]	; 0x60
 80254da:	f143 0300 	adc.w	r3, r3, #0
 80254de:	667b      	str	r3, [r7, #100]	; 0x64
 80254e0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80254e4:	f04f 0000 	mov.w	r0, #0
 80254e8:	f04f 0100 	mov.w	r1, #0
 80254ec:	0fd0      	lsrs	r0, r2, #31
 80254ee:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80254f2:	17d9      	asrs	r1, r3, #31
 80254f4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80254f8:	f5a3 725c 	sub.w	r2, r3, #880	; 0x370
 80254fc:	4603      	mov	r3, r0
 80254fe:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8025500:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8025504:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 8025508:	681a      	ldr	r2, [r3, #0]
 802550a:	4b28      	ldr	r3, [pc, #160]	; (80255ac <arm_softmax_s8+0x389c>)
 802550c:	429a      	cmp	r2, r3
 802550e:	d10e      	bne.n	802552e <arm_softmax_s8+0x381e>
 8025510:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8025514:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 8025518:	681b      	ldr	r3, [r3, #0]
 802551a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802551e:	d106      	bne.n	802552e <arm_softmax_s8+0x381e>
        result = Q31_MAX;
 8025520:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8025524:	f5a3 725c 	sub.w	r2, r3, #880	; 0x370
 8025528:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 802552c:	6013      	str	r3, [r2, #0]
    return result;
 802552e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8025532:	f5a3 735c 	sub.w	r3, r3, #880	; 0x370
 8025536:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(290630308)
 8025538:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802553c:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8025540:	681b      	ldr	r3, [r3, #0]
 8025542:	ea02 0003 	and.w	r0, r2, r3
 8025546:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802554a:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 802554e:	681b      	ldr	r3, [r3, #0]
 8025550:	43da      	mvns	r2, r3
 8025552:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8025556:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 802555a:	681b      	ldr	r3, [r3, #0]
 802555c:	ea02 0103 	and.w	r1, r2, r3
 8025560:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8025564:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 8025568:	ea80 0301 	eor.w	r3, r0, r1
 802556c:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(39332535)
 802556e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8025572:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8025576:	6819      	ldr	r1, [r3, #0]
 8025578:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802557c:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 8025580:	1c4b      	adds	r3, r1, #1
 8025582:	6013      	str	r3, [r2, #0]
 8025584:	2301      	movs	r3, #1
 8025586:	fa03 f201 	lsl.w	r2, r3, r1
 802558a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802558e:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8025592:	681b      	ldr	r3, [r3, #0]
 8025594:	4013      	ands	r3, r2
 8025596:	2b00      	cmp	r3, #0
 8025598:	d00e      	beq.n	80255b8 <arm_softmax_s8+0x38a8>
 802559a:	f04f 32ff 	mov.w	r2, #4294967295
 802559e:	e00c      	b.n	80255ba <arm_softmax_s8+0x38aa>
 80255a0:	1152aaa4 	.word	0x1152aaa4
 80255a4:	00000000 	.word	0x00000000
 80255a8:	2f16ac6c 	.word	0x2f16ac6c
 80255ac:	1152aaa4 	.word	0x1152aaa4
 80255b0:	2f16ac6c 	.word	0x2f16ac6c
 80255b4:	00000000 	.word	0x00000000
 80255b8:	2200      	movs	r2, #0
 80255ba:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80255be:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80255c2:	601a      	str	r2, [r3, #0]
 80255c4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80255c8:	f5a3 725f 	sub.w	r2, r3, #892	; 0x37c
 80255cc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80255d0:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 80255d4:	681b      	ldr	r3, [r3, #0]
 80255d6:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80255d8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80255dc:	f5a3 7260 	sub.w	r2, r3, #896	; 0x380
 80255e0:	2300      	movs	r3, #0
 80255e2:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80255e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80255e8:	f04f 0300 	mov.w	r3, #0
 80255ec:	f507 61c4 	add.w	r1, r7, #1568	; 0x620
 80255f0:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80255f4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80255f8:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 80255fc:	681b      	ldr	r3, [r3, #0]
 80255fe:	0fdb      	lsrs	r3, r3, #31
 8025600:	b2da      	uxtb	r2, r3
 8025602:	2300      	movs	r3, #0
 8025604:	4053      	eors	r3, r2
 8025606:	b2db      	uxtb	r3, r3
 8025608:	2b00      	cmp	r3, #0
 802560a:	d010      	beq.n	802562e <arm_softmax_s8+0x391e>
        mult = 1 - mult;
 802560c:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 8025610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025614:	2100      	movs	r1, #0
 8025616:	f1d2 0001 	rsbs	r0, r2, #1
 802561a:	65b8      	str	r0, [r7, #88]	; 0x58
 802561c:	eb61 0303 	sbc.w	r3, r1, r3
 8025620:	65fb      	str	r3, [r7, #92]	; 0x5c
 8025622:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8025626:	f507 62c4 	add.w	r2, r7, #1568	; 0x620
 802562a:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 802562e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8025632:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8025636:	681b      	ldr	r3, [r3, #0]
 8025638:	17da      	asrs	r2, r3, #31
 802563a:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
 802563e:	f8c7 237c 	str.w	r2, [r7, #892]	; 0x37c
 8025642:	a3bd      	add	r3, pc, #756	; (adr r3, 8025938 <arm_softmax_s8+0x3c28>)
 8025644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025648:	f8d7 137c 	ldr.w	r1, [r7, #892]	; 0x37c
 802564c:	fb02 f001 	mul.w	r0, r2, r1
 8025650:	f8d7 1378 	ldr.w	r1, [r7, #888]	; 0x378
 8025654:	fb01 f103 	mul.w	r1, r1, r3
 8025658:	4401      	add	r1, r0
 802565a:	f8d7 0378 	ldr.w	r0, [r7, #888]	; 0x378
 802565e:	fba0 2302 	umull	r2, r3, r0, r2
 8025662:	f8c7 34fc 	str.w	r3, [r7, #1276]	; 0x4fc
 8025666:	4613      	mov	r3, r2
 8025668:	f8c7 34f8 	str.w	r3, [r7, #1272]	; 0x4f8
 802566c:	f8d7 34fc 	ldr.w	r3, [r7, #1276]	; 0x4fc
 8025670:	18cb      	adds	r3, r1, r3
 8025672:	f8c7 34fc 	str.w	r3, [r7, #1276]	; 0x4fc
 8025676:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 802567a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802567e:	f8d7 14f8 	ldr.w	r1, [r7, #1272]	; 0x4f8
 8025682:	1851      	adds	r1, r2, r1
 8025684:	6539      	str	r1, [r7, #80]	; 0x50
 8025686:	f8d7 14fc 	ldr.w	r1, [r7, #1276]	; 0x4fc
 802568a:	414b      	adcs	r3, r1
 802568c:	657b      	str	r3, [r7, #84]	; 0x54
 802568e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8025692:	f507 62c4 	add.w	r2, r7, #1568	; 0x620
 8025696:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 802569a:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 802569e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80256a2:	2b00      	cmp	r3, #0
 80256a4:	da08      	bge.n	80256b8 <arm_softmax_s8+0x39a8>
 80256a6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80256aa:	1851      	adds	r1, r2, r1
 80256ac:	64b9      	str	r1, [r7, #72]	; 0x48
 80256ae:	f143 0300 	adc.w	r3, r3, #0
 80256b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80256b4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80256b8:	f04f 0000 	mov.w	r0, #0
 80256bc:	f04f 0100 	mov.w	r1, #0
 80256c0:	0fd0      	lsrs	r0, r2, #31
 80256c2:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80256c6:	17d9      	asrs	r1, r3, #31
 80256c8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80256cc:	f5a3 7260 	sub.w	r2, r3, #896	; 0x380
 80256d0:	4603      	mov	r3, r0
 80256d2:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80256d4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80256d8:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 80256dc:	681a      	ldr	r2, [r3, #0]
 80256de:	4b94      	ldr	r3, [pc, #592]	; (8025930 <arm_softmax_s8+0x3c20>)
 80256e0:	429a      	cmp	r2, r3
 80256e2:	d10e      	bne.n	8025702 <arm_softmax_s8+0x39f2>
 80256e4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80256e8:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 80256ec:	681b      	ldr	r3, [r3, #0]
 80256ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80256f2:	d106      	bne.n	8025702 <arm_softmax_s8+0x39f2>
        result = Q31_MAX;
 80256f4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80256f8:	f5a3 7260 	sub.w	r2, r3, #896	; 0x380
 80256fc:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8025700:	6013      	str	r3, [r2, #0]
    return result;
 8025702:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8025706:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 802570a:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(39332535)
 802570c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8025710:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8025714:	681b      	ldr	r3, [r3, #0]
 8025716:	ea02 0003 	and.w	r0, r2, r3
 802571a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802571e:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8025722:	681b      	ldr	r3, [r3, #0]
 8025724:	43da      	mvns	r2, r3
 8025726:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802572a:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 802572e:	681b      	ldr	r3, [r3, #0]
 8025730:	ea02 0103 	and.w	r1, r2, r3
 8025734:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8025738:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 802573c:	ea80 0301 	eor.w	r3, r0, r1
 8025740:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(720401)
 8025742:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8025746:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 802574a:	6819      	ldr	r1, [r3, #0]
 802574c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8025750:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 8025754:	1c4b      	adds	r3, r1, #1
 8025756:	6013      	str	r3, [r2, #0]
 8025758:	2301      	movs	r3, #1
 802575a:	fa03 f201 	lsl.w	r2, r3, r1
 802575e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8025762:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8025766:	681b      	ldr	r3, [r3, #0]
 8025768:	4013      	ands	r3, r2
 802576a:	2b00      	cmp	r3, #0
 802576c:	d002      	beq.n	8025774 <arm_softmax_s8+0x3a64>
 802576e:	f04f 32ff 	mov.w	r2, #4294967295
 8025772:	e000      	b.n	8025776 <arm_softmax_s8+0x3a66>
 8025774:	2200      	movs	r2, #0
 8025776:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802577a:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 802577e:	601a      	str	r2, [r3, #0]
 8025780:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8025784:	f5a3 7263 	sub.w	r2, r3, #908	; 0x38c
 8025788:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802578c:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8025790:	681b      	ldr	r3, [r3, #0]
 8025792:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8025794:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8025798:	f5a3 7264 	sub.w	r2, r3, #912	; 0x390
 802579c:	2300      	movs	r3, #0
 802579e:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80257a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80257a4:	f04f 0300 	mov.w	r3, #0
 80257a8:	f507 61c2 	add.w	r1, r7, #1552	; 0x610
 80257ac:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80257b0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80257b4:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 80257b8:	681b      	ldr	r3, [r3, #0]
 80257ba:	0fdb      	lsrs	r3, r3, #31
 80257bc:	b2da      	uxtb	r2, r3
 80257be:	2300      	movs	r3, #0
 80257c0:	4053      	eors	r3, r2
 80257c2:	b2db      	uxtb	r3, r3
 80257c4:	2b00      	cmp	r3, #0
 80257c6:	d010      	beq.n	80257ea <arm_softmax_s8+0x3ada>
        mult = 1 - mult;
 80257c8:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 80257cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80257d0:	2100      	movs	r1, #0
 80257d2:	f1d2 0001 	rsbs	r0, r2, #1
 80257d6:	6438      	str	r0, [r7, #64]	; 0x40
 80257d8:	eb61 0303 	sbc.w	r3, r1, r3
 80257dc:	647b      	str	r3, [r7, #68]	; 0x44
 80257de:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80257e2:	f507 62c2 	add.w	r2, r7, #1552	; 0x610
 80257e6:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80257ea:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80257ee:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 80257f2:	681b      	ldr	r3, [r3, #0]
 80257f4:	17da      	asrs	r2, r3, #31
 80257f6:	f8c7 3370 	str.w	r3, [r7, #880]	; 0x370
 80257fa:	f8c7 2374 	str.w	r2, [r7, #884]	; 0x374
 80257fe:	4a4d      	ldr	r2, [pc, #308]	; (8025934 <arm_softmax_s8+0x3c24>)
 8025800:	f04f 0300 	mov.w	r3, #0
 8025804:	f8d7 1374 	ldr.w	r1, [r7, #884]	; 0x374
 8025808:	fb02 f001 	mul.w	r0, r2, r1
 802580c:	f8d7 1370 	ldr.w	r1, [r7, #880]	; 0x370
 8025810:	fb01 f103 	mul.w	r1, r1, r3
 8025814:	4401      	add	r1, r0
 8025816:	f8d7 0370 	ldr.w	r0, [r7, #880]	; 0x370
 802581a:	fba0 2302 	umull	r2, r3, r0, r2
 802581e:	f8c7 34f4 	str.w	r3, [r7, #1268]	; 0x4f4
 8025822:	4613      	mov	r3, r2
 8025824:	f8c7 34f0 	str.w	r3, [r7, #1264]	; 0x4f0
 8025828:	f8d7 34f4 	ldr.w	r3, [r7, #1268]	; 0x4f4
 802582c:	18cb      	adds	r3, r1, r3
 802582e:	f8c7 34f4 	str.w	r3, [r7, #1268]	; 0x4f4
 8025832:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 8025836:	e9d3 2300 	ldrd	r2, r3, [r3]
 802583a:	f8d7 14f0 	ldr.w	r1, [r7, #1264]	; 0x4f0
 802583e:	1851      	adds	r1, r2, r1
 8025840:	63b9      	str	r1, [r7, #56]	; 0x38
 8025842:	f8d7 14f4 	ldr.w	r1, [r7, #1268]	; 0x4f4
 8025846:	414b      	adcs	r3, r1
 8025848:	63fb      	str	r3, [r7, #60]	; 0x3c
 802584a:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 802584e:	f507 62c2 	add.w	r2, r7, #1552	; 0x610
 8025852:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8025856:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 802585a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802585e:	2b00      	cmp	r3, #0
 8025860:	da08      	bge.n	8025874 <arm_softmax_s8+0x3b64>
 8025862:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8025866:	1851      	adds	r1, r2, r1
 8025868:	6339      	str	r1, [r7, #48]	; 0x30
 802586a:	f143 0300 	adc.w	r3, r3, #0
 802586e:	637b      	str	r3, [r7, #52]	; 0x34
 8025870:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8025874:	f04f 0000 	mov.w	r0, #0
 8025878:	f04f 0100 	mov.w	r1, #0
 802587c:	0fd0      	lsrs	r0, r2, #31
 802587e:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8025882:	17d9      	asrs	r1, r3, #31
 8025884:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8025888:	f5a3 7264 	sub.w	r2, r3, #912	; 0x390
 802588c:	4603      	mov	r3, r0
 802588e:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8025890:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8025894:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 8025898:	681a      	ldr	r2, [r3, #0]
 802589a:	4b26      	ldr	r3, [pc, #152]	; (8025934 <arm_softmax_s8+0x3c24>)
 802589c:	429a      	cmp	r2, r3
 802589e:	d10e      	bne.n	80258be <arm_softmax_s8+0x3bae>
 80258a0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80258a4:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 80258a8:	681b      	ldr	r3, [r3, #0]
 80258aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80258ae:	d106      	bne.n	80258be <arm_softmax_s8+0x3bae>
        result = Q31_MAX;
 80258b0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80258b4:	f5a3 7264 	sub.w	r2, r3, #912	; 0x390
 80258b8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80258bc:	6013      	str	r3, [r2, #0]
    return result;
 80258be:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80258c2:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 80258c6:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(720401)
 80258c8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80258cc:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80258d0:	681b      	ldr	r3, [r3, #0]
 80258d2:	ea02 0003 	and.w	r0, r2, r3
 80258d6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80258da:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80258de:	681b      	ldr	r3, [r3, #0]
 80258e0:	43da      	mvns	r2, r3
 80258e2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80258e6:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 80258ea:	681b      	ldr	r3, [r3, #0]
 80258ec:	ea02 0103 	and.w	r1, r2, r3
 80258f0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80258f4:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 80258f8:	ea80 0301 	eor.w	r3, r0, r1
 80258fc:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(242)
 80258fe:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8025902:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8025906:	6819      	ldr	r1, [r3, #0]
 8025908:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802590c:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 8025910:	1c4b      	adds	r3, r1, #1
 8025912:	6013      	str	r3, [r2, #0]
 8025914:	2301      	movs	r3, #1
 8025916:	fa03 f201 	lsl.w	r2, r3, r1
 802591a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802591e:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8025922:	681b      	ldr	r3, [r3, #0]
 8025924:	4013      	ands	r3, r2
 8025926:	2b00      	cmp	r3, #0
 8025928:	d00a      	beq.n	8025940 <arm_softmax_s8+0x3c30>
 802592a:	f04f 32ff 	mov.w	r2, #4294967295
 802592e:	e008      	b.n	8025942 <arm_softmax_s8+0x3c32>
 8025930:	02582ab7 	.word	0x02582ab7
 8025934:	000afe11 	.word	0x000afe11
 8025938:	02582ab7 	.word	0x02582ab7
 802593c:	00000000 	.word	0x00000000
 8025940:	2200      	movs	r2, #0
 8025942:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8025946:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 802594a:	601a      	str	r2, [r3, #0]
 802594c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8025950:	f5a3 7267 	sub.w	r2, r3, #924	; 0x39c
 8025954:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8025958:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 802595c:	681b      	ldr	r3, [r3, #0]
 802595e:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8025960:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8025964:	f5a3 7268 	sub.w	r2, r3, #928	; 0x3a0
 8025968:	2300      	movs	r3, #0
 802596a:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 802596c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8025970:	f04f 0300 	mov.w	r3, #0
 8025974:	f507 61c0 	add.w	r1, r7, #1536	; 0x600
 8025978:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 802597c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8025980:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 8025984:	681b      	ldr	r3, [r3, #0]
 8025986:	0fdb      	lsrs	r3, r3, #31
 8025988:	b2da      	uxtb	r2, r3
 802598a:	2300      	movs	r3, #0
 802598c:	4053      	eors	r3, r2
 802598e:	b2db      	uxtb	r3, r3
 8025990:	2b00      	cmp	r3, #0
 8025992:	d010      	beq.n	80259b6 <arm_softmax_s8+0x3ca6>
        mult = 1 - mult;
 8025994:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8025998:	e9d3 2300 	ldrd	r2, r3, [r3]
 802599c:	2100      	movs	r1, #0
 802599e:	f1d2 0001 	rsbs	r0, r2, #1
 80259a2:	62b8      	str	r0, [r7, #40]	; 0x28
 80259a4:	eb61 0303 	sbc.w	r3, r1, r3
 80259a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80259aa:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80259ae:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 80259b2:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80259b6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80259ba:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 80259be:	681b      	ldr	r3, [r3, #0]
 80259c0:	17da      	asrs	r2, r3, #31
 80259c2:	f8c7 3368 	str.w	r3, [r7, #872]	; 0x368
 80259c6:	f8c7 236c 	str.w	r2, [r7, #876]	; 0x36c
 80259ca:	f04f 02f2 	mov.w	r2, #242	; 0xf2
 80259ce:	f04f 0300 	mov.w	r3, #0
 80259d2:	f8d7 136c 	ldr.w	r1, [r7, #876]	; 0x36c
 80259d6:	fb02 f001 	mul.w	r0, r2, r1
 80259da:	f8d7 1368 	ldr.w	r1, [r7, #872]	; 0x368
 80259de:	fb01 f103 	mul.w	r1, r1, r3
 80259e2:	4401      	add	r1, r0
 80259e4:	f8d7 0368 	ldr.w	r0, [r7, #872]	; 0x368
 80259e8:	fba0 2302 	umull	r2, r3, r0, r2
 80259ec:	f8c7 34ec 	str.w	r3, [r7, #1260]	; 0x4ec
 80259f0:	4613      	mov	r3, r2
 80259f2:	f8c7 34e8 	str.w	r3, [r7, #1256]	; 0x4e8
 80259f6:	f8d7 34ec 	ldr.w	r3, [r7, #1260]	; 0x4ec
 80259fa:	18cb      	adds	r3, r1, r3
 80259fc:	f8c7 34ec 	str.w	r3, [r7, #1260]	; 0x4ec
 8025a00:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8025a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025a08:	f8d7 14e8 	ldr.w	r1, [r7, #1256]	; 0x4e8
 8025a0c:	1851      	adds	r1, r2, r1
 8025a0e:	6239      	str	r1, [r7, #32]
 8025a10:	f8d7 14ec 	ldr.w	r1, [r7, #1260]	; 0x4ec
 8025a14:	414b      	adcs	r3, r1
 8025a16:	627b      	str	r3, [r7, #36]	; 0x24
 8025a18:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8025a1c:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 8025a20:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8025a24:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8025a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025a2c:	2b00      	cmp	r3, #0
 8025a2e:	da08      	bge.n	8025a42 <arm_softmax_s8+0x3d32>
 8025a30:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8025a34:	1851      	adds	r1, r2, r1
 8025a36:	61b9      	str	r1, [r7, #24]
 8025a38:	f143 0300 	adc.w	r3, r3, #0
 8025a3c:	61fb      	str	r3, [r7, #28]
 8025a3e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8025a42:	f04f 0000 	mov.w	r0, #0
 8025a46:	f04f 0100 	mov.w	r1, #0
 8025a4a:	0fd0      	lsrs	r0, r2, #31
 8025a4c:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8025a50:	17d9      	asrs	r1, r3, #31
 8025a52:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8025a56:	f5a3 7268 	sub.w	r2, r3, #928	; 0x3a0
 8025a5a:	4603      	mov	r3, r0
 8025a5c:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8025a5e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8025a62:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 8025a66:	681b      	ldr	r3, [r3, #0]
 8025a68:	2bf2      	cmp	r3, #242	; 0xf2
 8025a6a:	d10e      	bne.n	8025a8a <arm_softmax_s8+0x3d7a>
 8025a6c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8025a70:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 8025a74:	681b      	ldr	r3, [r3, #0]
 8025a76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8025a7a:	d106      	bne.n	8025a8a <arm_softmax_s8+0x3d7a>
        result = Q31_MAX;
 8025a7c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8025a80:	f5a3 7268 	sub.w	r2, r3, #928	; 0x3a0
 8025a84:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8025a88:	6013      	str	r3, [r2, #0]
    return result;
 8025a8a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8025a8e:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 8025a92:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(242)
 8025a94:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8025a98:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8025a9c:	681b      	ldr	r3, [r3, #0]
 8025a9e:	ea02 0003 	and.w	r0, r2, r3
 8025aa2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8025aa6:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8025aaa:	681b      	ldr	r3, [r3, #0]
 8025aac:	43da      	mvns	r2, r3
 8025aae:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8025ab2:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8025ab6:	681b      	ldr	r3, [r3, #0]
 8025ab8:	ea02 0103 	and.w	r1, r2, r3
 8025abc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8025ac0:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 8025ac4:	ea80 0301 	eor.w	r3, r0, r1
 8025ac8:	6013      	str	r3, [r2, #0]
    mask = MASK_IF_ZERO(val);
 8025aca:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8025ace:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 8025ad2:	681b      	ldr	r3, [r3, #0]
 8025ad4:	2b00      	cmp	r3, #0
 8025ad6:	d102      	bne.n	8025ade <arm_softmax_s8+0x3dce>
 8025ad8:	f04f 32ff 	mov.w	r2, #4294967295
 8025adc:	e000      	b.n	8025ae0 <arm_softmax_s8+0x3dd0>
 8025ade:	2200      	movs	r2, #0
 8025ae0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8025ae4:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8025ae8:	601a      	str	r2, [r3, #0]
    return SELECT_USING_MASK(mask, Q31_MAX, result);
 8025aea:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8025aee:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8025af2:	681b      	ldr	r3, [r3, #0]
 8025af4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8025af8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8025afc:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8025b00:	681b      	ldr	r3, [r3, #0]
 8025b02:	43da      	mvns	r2, r3
 8025b04:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8025b08:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8025b0c:	681b      	ldr	r3, [r3, #0]
 8025b0e:	4013      	ands	r3, r2
 8025b10:	4059      	eors	r1, r3
 8025b12:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8025b16:	f5a3 721e 	sub.w	r2, r3, #632	; 0x278
 8025b1a:	f8d7 3984 	ldr.w	r3, [r7, #2436]	; 0x984
 8025b1e:	6013      	str	r3, [r2, #0]
 8025b20:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8025b24:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8025b28:	6019      	str	r1, [r3, #0]
    q31_t result = 0;
 8025b2a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8025b2e:	f5a3 7220 	sub.w	r2, r3, #640	; 0x280
 8025b32:	2300      	movs	r3, #0
 8025b34:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8025b36:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8025b3a:	f04f 0300 	mov.w	r3, #0
 8025b3e:	f507 61e4 	add.w	r1, r7, #1824	; 0x720
 8025b42:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8025b46:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8025b4a:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 8025b4e:	681b      	ldr	r3, [r3, #0]
 8025b50:	0fdb      	lsrs	r3, r3, #31
 8025b52:	b2da      	uxtb	r2, r3
 8025b54:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8025b58:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8025b5c:	681b      	ldr	r3, [r3, #0]
 8025b5e:	0fdb      	lsrs	r3, r3, #31
 8025b60:	b2db      	uxtb	r3, r3
 8025b62:	4053      	eors	r3, r2
 8025b64:	b2db      	uxtb	r3, r3
 8025b66:	2b00      	cmp	r3, #0
 8025b68:	d010      	beq.n	8025b8c <arm_softmax_s8+0x3e7c>
        mult = 1 - mult;
 8025b6a:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 8025b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025b72:	2100      	movs	r1, #0
 8025b74:	f1d2 0001 	rsbs	r0, r2, #1
 8025b78:	6138      	str	r0, [r7, #16]
 8025b7a:	eb61 0303 	sbc.w	r3, r1, r3
 8025b7e:	617b      	str	r3, [r7, #20]
 8025b80:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8025b84:	f507 62e4 	add.w	r2, r7, #1824	; 0x720
 8025b88:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8025b8c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8025b90:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 8025b94:	681b      	ldr	r3, [r3, #0]
 8025b96:	17da      	asrs	r2, r3, #31
 8025b98:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8
 8025b9c:	f8c7 23ec 	str.w	r2, [r7, #1004]	; 0x3ec
 8025ba0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8025ba4:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8025ba8:	681b      	ldr	r3, [r3, #0]
 8025baa:	17da      	asrs	r2, r3, #31
 8025bac:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
 8025bb0:	f8c7 23e4 	str.w	r2, [r7, #996]	; 0x3e4
 8025bb4:	e9d7 01fa 	ldrd	r0, r1, [r7, #1000]	; 0x3e8
 8025bb8:	460b      	mov	r3, r1
 8025bba:	f8d7 23e0 	ldr.w	r2, [r7, #992]	; 0x3e0
 8025bbe:	fb02 f203 	mul.w	r2, r2, r3
 8025bc2:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8025bc6:	e9c7 01fa 	strd	r0, r1, [r7, #1000]	; 0x3e8
 8025bca:	4601      	mov	r1, r0
 8025bcc:	fb01 f303 	mul.w	r3, r1, r3
 8025bd0:	4413      	add	r3, r2
 8025bd2:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 8025bd6:	f8d7 13e0 	ldr.w	r1, [r7, #992]	; 0x3e0
 8025bda:	fba2 1201 	umull	r1, r2, r2, r1
 8025bde:	f8c7 254c 	str.w	r2, [r7, #1356]	; 0x54c
 8025be2:	460a      	mov	r2, r1
 8025be4:	f8c7 2548 	str.w	r2, [r7, #1352]	; 0x548
 8025be8:	f8d7 254c 	ldr.w	r2, [r7, #1356]	; 0x54c
 8025bec:	4413      	add	r3, r2
 8025bee:	f8c7 354c 	str.w	r3, [r7, #1356]	; 0x54c
 8025bf2:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 8025bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025bfa:	f8d7 1548 	ldr.w	r1, [r7, #1352]	; 0x548
 8025bfe:	1851      	adds	r1, r2, r1
 8025c00:	60b9      	str	r1, [r7, #8]
 8025c02:	f8d7 154c 	ldr.w	r1, [r7, #1356]	; 0x54c
 8025c06:	414b      	adcs	r3, r1
 8025c08:	60fb      	str	r3, [r7, #12]
 8025c0a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8025c0e:	f507 62e4 	add.w	r2, r7, #1824	; 0x720
 8025c12:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8025c16:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 8025c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025c1e:	2b00      	cmp	r3, #0
 8025c20:	da08      	bge.n	8025c34 <arm_softmax_s8+0x3f24>
 8025c22:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8025c26:	1851      	adds	r1, r2, r1
 8025c28:	6039      	str	r1, [r7, #0]
 8025c2a:	f143 0300 	adc.w	r3, r3, #0
 8025c2e:	607b      	str	r3, [r7, #4]
 8025c30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8025c34:	f04f 0000 	mov.w	r0, #0
 8025c38:	f04f 0100 	mov.w	r1, #0
 8025c3c:	0fd0      	lsrs	r0, r2, #31
 8025c3e:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8025c42:	17d9      	asrs	r1, r3, #31
 8025c44:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8025c48:	f5a3 7220 	sub.w	r2, r3, #640	; 0x280
 8025c4c:	4603      	mov	r3, r0
 8025c4e:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8025c50:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8025c54:	f5a3 721e 	sub.w	r2, r3, #632	; 0x278
 8025c58:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8025c5c:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8025c60:	6812      	ldr	r2, [r2, #0]
 8025c62:	681b      	ldr	r3, [r3, #0]
 8025c64:	429a      	cmp	r2, r3
 8025c66:	d10e      	bne.n	8025c86 <arm_softmax_s8+0x3f76>
 8025c68:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8025c6c:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 8025c70:	681b      	ldr	r3, [r3, #0]
 8025c72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8025c76:	d106      	bne.n	8025c86 <arm_softmax_s8+0x3f76>
        result = Q31_MAX;
 8025c78:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8025c7c:	f5a3 7220 	sub.w	r2, r3, #640	; 0x280
 8025c80:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8025c84:	6013      	str	r3, [r2, #0]
    return result;
 8025c86:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8025c8a:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8025c8e:	681a      	ldr	r2, [r3, #0]
 8025c90:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8025c94:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8025c98:	601a      	str	r2, [r3, #0]
 8025c9a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8025c9e:	f5a3 7219 	sub.w	r2, r3, #612	; 0x264
 8025ca2:	f8d7 3988 	ldr.w	r3, [r7, #2440]	; 0x988
 8025ca6:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8025ca8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8025cac:	f5a3 721a 	sub.w	r2, r3, #616	; 0x268
 8025cb0:	2300      	movs	r3, #0
 8025cb2:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8025cb4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8025cb8:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8025cbc:	2201      	movs	r2, #1
 8025cbe:	681b      	ldr	r3, [r3, #0]
 8025cc0:	fa02 f103 	lsl.w	r1, r2, r3
 8025cc4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8025cc8:	f5a3 721b 	sub.w	r2, r3, #620	; 0x26c
 8025ccc:	1e4b      	subs	r3, r1, #1
 8025cce:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 8025cd0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8025cd4:	f5a3 711c 	sub.w	r1, r3, #624	; 0x270
 8025cd8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8025cdc:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 8025ce0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8025ce4:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8025ce8:	6812      	ldr	r2, [r2, #0]
 8025cea:	681b      	ldr	r3, [r3, #0]
 8025cec:	4013      	ands	r3, r2
 8025cee:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 8025cf0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8025cf4:	f5a3 711a 	sub.w	r1, r3, #616	; 0x268
 8025cf8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8025cfc:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 8025d00:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8025d04:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8025d08:	6812      	ldr	r2, [r2, #0]
 8025d0a:	681b      	ldr	r3, [r3, #0]
 8025d0c:	fa42 f303 	asr.w	r3, r2, r3
 8025d10:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 8025d12:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8025d16:	f5a3 721d 	sub.w	r2, r3, #628	; 0x274
 8025d1a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8025d1e:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8025d22:	681b      	ldr	r3, [r3, #0]
 8025d24:	105b      	asrs	r3, r3, #1
 8025d26:	6013      	str	r3, [r2, #0]
    if (result < 0)
 8025d28:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8025d2c:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8025d30:	681b      	ldr	r3, [r3, #0]
 8025d32:	2b00      	cmp	r3, #0
 8025d34:	da0a      	bge.n	8025d4c <arm_softmax_s8+0x403c>
        threshold++;
 8025d36:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8025d3a:	f5a3 721d 	sub.w	r2, r3, #628	; 0x274
 8025d3e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8025d42:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8025d46:	681b      	ldr	r3, [r3, #0]
 8025d48:	3301      	adds	r3, #1
 8025d4a:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 8025d4c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8025d50:	f5a3 721c 	sub.w	r2, r3, #624	; 0x270
 8025d54:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8025d58:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8025d5c:	6812      	ldr	r2, [r2, #0]
 8025d5e:	681b      	ldr	r3, [r3, #0]
 8025d60:	429a      	cmp	r2, r3
 8025d62:	dd0a      	ble.n	8025d7a <arm_softmax_s8+0x406a>
        result++;
 8025d64:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8025d68:	f5a3 721a 	sub.w	r2, r3, #616	; 0x268
 8025d6c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8025d70:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8025d74:	681b      	ldr	r3, [r3, #0]
 8025d76:	3301      	adds	r3, #1
 8025d78:	6013      	str	r3, [r2, #0]
    return result;
 8025d7a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8025d7e:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8025d82:	681b      	ldr	r3, [r3, #0]
                const int32_t res =
 8025d84:	3b80      	subs	r3, #128	; 0x80
 8025d86:	f8c7 3980 	str.w	r3, [r7, #2432]	; 0x980
                output[col] = (int8_t)CLAMP(res, (int32_t)127, (int32_t)-128);
 8025d8a:	f8d7 3980 	ldr.w	r3, [r7, #2432]	; 0x980
 8025d8e:	f113 0f7f 	cmn.w	r3, #127	; 0x7f
 8025d92:	db09      	blt.n	8025da8 <arm_softmax_s8+0x4098>
 8025d94:	f8d7 3980 	ldr.w	r3, [r7, #2432]	; 0x980
 8025d98:	2b7e      	cmp	r3, #126	; 0x7e
 8025d9a:	dc03      	bgt.n	8025da4 <arm_softmax_s8+0x4094>
 8025d9c:	f8d7 3980 	ldr.w	r3, [r7, #2432]	; 0x980
 8025da0:	b259      	sxtb	r1, r3
 8025da2:	e003      	b.n	8025dac <arm_softmax_s8+0x409c>
 8025da4:	217f      	movs	r1, #127	; 0x7f
 8025da6:	e001      	b.n	8025dac <arm_softmax_s8+0x409c>
 8025da8:	f06f 017f 	mvn.w	r1, #127	; 0x7f
 8025dac:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 8025db0:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	; 0x9d0
 8025db4:	441a      	add	r2, r3
 8025db6:	460b      	mov	r3, r1
 8025db8:	7013      	strb	r3, [r2, #0]
 8025dba:	e006      	b.n	8025dca <arm_softmax_s8+0x40ba>
            }
            else
            {
                output[col] = -128;
 8025dbc:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 8025dc0:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	; 0x9d0
 8025dc4:	441a      	add	r2, r3
 8025dc6:	2380      	movs	r3, #128	; 0x80
 8025dc8:	7013      	strb	r3, [r2, #0]
        for (col = 0; col < row_size; ++col)
 8025dca:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	; 0x9a4
 8025dce:	3301      	adds	r3, #1
 8025dd0:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
 8025dd4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8025dd8:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8025ddc:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 8025de0:	681b      	ldr	r3, [r3, #0]
 8025de2:	429a      	cmp	r2, r3
 8025de4:	f6fe aa71 	blt.w	80242ca <arm_softmax_s8+0x25ba>
            }
        }
        input += row_size;
 8025de8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8025dec:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8025df0:	6819      	ldr	r1, [r3, #0]
 8025df2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8025df6:	f5a3 7271 	sub.w	r2, r3, #964	; 0x3c4
 8025dfa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8025dfe:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 8025e02:	681b      	ldr	r3, [r3, #0]
 8025e04:	440b      	add	r3, r1
 8025e06:	6013      	str	r3, [r2, #0]
        output += row_size;
 8025e08:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8025e0c:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8025e10:	681a      	ldr	r2, [r3, #0]
 8025e12:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	; 0x9d0
 8025e16:	4413      	add	r3, r2
 8025e18:	f8c7 39d0 	str.w	r3, [r7, #2512]	; 0x9d0
    for (row_idx = 0; row_idx < num_rows; ++row_idx)
 8025e1c:	f8d7 39a0 	ldr.w	r3, [r7, #2464]	; 0x9a0
 8025e20:	3301      	adds	r3, #1
 8025e22:	f8c7 39a0 	str.w	r3, [r7, #2464]	; 0x9a0
 8025e26:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8025e2a:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 8025e2e:	f8d7 29a0 	ldr.w	r2, [r7, #2464]	; 0x9a0
 8025e32:	681b      	ldr	r3, [r3, #0]
 8025e34:	429a      	cmp	r2, r3
 8025e36:	f6fb af93 	blt.w	8021d60 <arm_softmax_s8+0x50>
    }

#endif
}
 8025e3a:	bf00      	nop
 8025e3c:	bf00      	nop
 8025e3e:	f607 17a8 	addw	r7, r7, #2472	; 0x9a8
 8025e42:	46bd      	mov	sp, r7
 8025e44:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8025e48:	4770      	bx	lr
 8025e4a:	bf00      	nop

08025e4c <_ZL8kf_bfly2P12kiss_fft_cpxjP14kiss_fft_statei>:
        kiss_fft_cpx * Fout,
        const size_t fstride,
        const kiss_fft_cfg st,
        int m
        )
{
 8025e4c:	b480      	push	{r7}
 8025e4e:	b089      	sub	sp, #36	; 0x24
 8025e50:	af00      	add	r7, sp, #0
 8025e52:	60f8      	str	r0, [r7, #12]
 8025e54:	60b9      	str	r1, [r7, #8]
 8025e56:	607a      	str	r2, [r7, #4]
 8025e58:	603b      	str	r3, [r7, #0]
    kiss_fft_cpx * Fout2;
    kiss_fft_cpx * tw1 = st->twiddles;
 8025e5a:	687b      	ldr	r3, [r7, #4]
 8025e5c:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8025e60:	61bb      	str	r3, [r7, #24]
    kiss_fft_cpx t;
    Fout2 = Fout + m;
 8025e62:	683b      	ldr	r3, [r7, #0]
 8025e64:	00db      	lsls	r3, r3, #3
 8025e66:	68fa      	ldr	r2, [r7, #12]
 8025e68:	4413      	add	r3, r2
 8025e6a:	61fb      	str	r3, [r7, #28]
    do{
        C_FIXDIV(*Fout,2); C_FIXDIV(*Fout2,2);

        C_MUL (t,  *Fout2 , *tw1);
 8025e6c:	69fb      	ldr	r3, [r7, #28]
 8025e6e:	ed93 7a00 	vldr	s14, [r3]
 8025e72:	69bb      	ldr	r3, [r7, #24]
 8025e74:	edd3 7a00 	vldr	s15, [r3]
 8025e78:	ee27 7a27 	vmul.f32	s14, s14, s15
 8025e7c:	69fb      	ldr	r3, [r7, #28]
 8025e7e:	edd3 6a01 	vldr	s13, [r3, #4]
 8025e82:	69bb      	ldr	r3, [r7, #24]
 8025e84:	edd3 7a01 	vldr	s15, [r3, #4]
 8025e88:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8025e8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8025e90:	edc7 7a04 	vstr	s15, [r7, #16]
 8025e94:	69fb      	ldr	r3, [r7, #28]
 8025e96:	ed93 7a00 	vldr	s14, [r3]
 8025e9a:	69bb      	ldr	r3, [r7, #24]
 8025e9c:	edd3 7a01 	vldr	s15, [r3, #4]
 8025ea0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8025ea4:	69fb      	ldr	r3, [r7, #28]
 8025ea6:	edd3 6a01 	vldr	s13, [r3, #4]
 8025eaa:	69bb      	ldr	r3, [r7, #24]
 8025eac:	edd3 7a00 	vldr	s15, [r3]
 8025eb0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8025eb4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8025eb8:	edc7 7a05 	vstr	s15, [r7, #20]
        tw1 += fstride;
 8025ebc:	68bb      	ldr	r3, [r7, #8]
 8025ebe:	00db      	lsls	r3, r3, #3
 8025ec0:	69ba      	ldr	r2, [r7, #24]
 8025ec2:	4413      	add	r3, r2
 8025ec4:	61bb      	str	r3, [r7, #24]
        C_SUB( *Fout2 ,  *Fout , t );
 8025ec6:	68fb      	ldr	r3, [r7, #12]
 8025ec8:	ed93 7a00 	vldr	s14, [r3]
 8025ecc:	edd7 7a04 	vldr	s15, [r7, #16]
 8025ed0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8025ed4:	69fb      	ldr	r3, [r7, #28]
 8025ed6:	edc3 7a00 	vstr	s15, [r3]
 8025eda:	68fb      	ldr	r3, [r7, #12]
 8025edc:	ed93 7a01 	vldr	s14, [r3, #4]
 8025ee0:	edd7 7a05 	vldr	s15, [r7, #20]
 8025ee4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8025ee8:	69fb      	ldr	r3, [r7, #28]
 8025eea:	edc3 7a01 	vstr	s15, [r3, #4]
        C_ADDTO( *Fout ,  t );
 8025eee:	68fb      	ldr	r3, [r7, #12]
 8025ef0:	ed93 7a00 	vldr	s14, [r3]
 8025ef4:	edd7 7a04 	vldr	s15, [r7, #16]
 8025ef8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8025efc:	68fb      	ldr	r3, [r7, #12]
 8025efe:	edc3 7a00 	vstr	s15, [r3]
 8025f02:	68fb      	ldr	r3, [r7, #12]
 8025f04:	ed93 7a01 	vldr	s14, [r3, #4]
 8025f08:	edd7 7a05 	vldr	s15, [r7, #20]
 8025f0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8025f10:	68fb      	ldr	r3, [r7, #12]
 8025f12:	edc3 7a01 	vstr	s15, [r3, #4]
        ++Fout2;
 8025f16:	69fb      	ldr	r3, [r7, #28]
 8025f18:	3308      	adds	r3, #8
 8025f1a:	61fb      	str	r3, [r7, #28]
        ++Fout;
 8025f1c:	68fb      	ldr	r3, [r7, #12]
 8025f1e:	3308      	adds	r3, #8
 8025f20:	60fb      	str	r3, [r7, #12]
    }while (--m);
 8025f22:	683b      	ldr	r3, [r7, #0]
 8025f24:	3b01      	subs	r3, #1
 8025f26:	603b      	str	r3, [r7, #0]
 8025f28:	683b      	ldr	r3, [r7, #0]
 8025f2a:	2b00      	cmp	r3, #0
 8025f2c:	bf14      	ite	ne
 8025f2e:	2301      	movne	r3, #1
 8025f30:	2300      	moveq	r3, #0
 8025f32:	b2db      	uxtb	r3, r3
 8025f34:	2b00      	cmp	r3, #0
 8025f36:	d000      	beq.n	8025f3a <_ZL8kf_bfly2P12kiss_fft_cpxjP14kiss_fft_statei+0xee>
    do{
 8025f38:	e798      	b.n	8025e6c <_ZL8kf_bfly2P12kiss_fft_cpxjP14kiss_fft_statei+0x20>
}
 8025f3a:	bf00      	nop
 8025f3c:	3724      	adds	r7, #36	; 0x24
 8025f3e:	46bd      	mov	sp, r7
 8025f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025f44:	4770      	bx	lr

08025f46 <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej>:
        kiss_fft_cpx * Fout,
        const size_t fstride,
        const kiss_fft_cfg st,
        const size_t m
        )
{
 8025f46:	b480      	push	{r7}
 8025f48:	b097      	sub	sp, #92	; 0x5c
 8025f4a:	af00      	add	r7, sp, #0
 8025f4c:	60f8      	str	r0, [r7, #12]
 8025f4e:	60b9      	str	r1, [r7, #8]
 8025f50:	607a      	str	r2, [r7, #4]
 8025f52:	603b      	str	r3, [r7, #0]
    kiss_fft_cpx *tw1,*tw2,*tw3;
    kiss_fft_cpx scratch[6];
    size_t k=m;
 8025f54:	683b      	ldr	r3, [r7, #0]
 8025f56:	64bb      	str	r3, [r7, #72]	; 0x48
    const size_t m2=2*m;
 8025f58:	683b      	ldr	r3, [r7, #0]
 8025f5a:	005b      	lsls	r3, r3, #1
 8025f5c:	647b      	str	r3, [r7, #68]	; 0x44
    const size_t m3=3*m;
 8025f5e:	683a      	ldr	r2, [r7, #0]
 8025f60:	4613      	mov	r3, r2
 8025f62:	005b      	lsls	r3, r3, #1
 8025f64:	4413      	add	r3, r2
 8025f66:	643b      	str	r3, [r7, #64]	; 0x40


    tw3 = tw2 = tw1 = st->twiddles;
 8025f68:	687b      	ldr	r3, [r7, #4]
 8025f6a:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8025f6e:	657b      	str	r3, [r7, #84]	; 0x54
 8025f70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8025f72:	653b      	str	r3, [r7, #80]	; 0x50
 8025f74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025f76:	64fb      	str	r3, [r7, #76]	; 0x4c

    do {
        C_FIXDIV(*Fout,4); C_FIXDIV(Fout[m],4); C_FIXDIV(Fout[m2],4); C_FIXDIV(Fout[m3],4);

        C_MUL(scratch[0],Fout[m] , *tw1 );
 8025f78:	683b      	ldr	r3, [r7, #0]
 8025f7a:	00db      	lsls	r3, r3, #3
 8025f7c:	68fa      	ldr	r2, [r7, #12]
 8025f7e:	4413      	add	r3, r2
 8025f80:	ed93 7a00 	vldr	s14, [r3]
 8025f84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8025f86:	edd3 7a00 	vldr	s15, [r3]
 8025f8a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8025f8e:	683b      	ldr	r3, [r7, #0]
 8025f90:	00db      	lsls	r3, r3, #3
 8025f92:	68fa      	ldr	r2, [r7, #12]
 8025f94:	4413      	add	r3, r2
 8025f96:	edd3 6a01 	vldr	s13, [r3, #4]
 8025f9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8025f9c:	edd3 7a01 	vldr	s15, [r3, #4]
 8025fa0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8025fa4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8025fa8:	edc7 7a04 	vstr	s15, [r7, #16]
 8025fac:	683b      	ldr	r3, [r7, #0]
 8025fae:	00db      	lsls	r3, r3, #3
 8025fb0:	68fa      	ldr	r2, [r7, #12]
 8025fb2:	4413      	add	r3, r2
 8025fb4:	ed93 7a00 	vldr	s14, [r3]
 8025fb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8025fba:	edd3 7a01 	vldr	s15, [r3, #4]
 8025fbe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8025fc2:	683b      	ldr	r3, [r7, #0]
 8025fc4:	00db      	lsls	r3, r3, #3
 8025fc6:	68fa      	ldr	r2, [r7, #12]
 8025fc8:	4413      	add	r3, r2
 8025fca:	edd3 6a01 	vldr	s13, [r3, #4]
 8025fce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8025fd0:	edd3 7a00 	vldr	s15, [r3]
 8025fd4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8025fd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8025fdc:	edc7 7a05 	vstr	s15, [r7, #20]
        C_MUL(scratch[1],Fout[m2] , *tw2 );
 8025fe0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8025fe2:	00db      	lsls	r3, r3, #3
 8025fe4:	68fa      	ldr	r2, [r7, #12]
 8025fe6:	4413      	add	r3, r2
 8025fe8:	ed93 7a00 	vldr	s14, [r3]
 8025fec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025fee:	edd3 7a00 	vldr	s15, [r3]
 8025ff2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8025ff6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8025ff8:	00db      	lsls	r3, r3, #3
 8025ffa:	68fa      	ldr	r2, [r7, #12]
 8025ffc:	4413      	add	r3, r2
 8025ffe:	edd3 6a01 	vldr	s13, [r3, #4]
 8026002:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8026004:	edd3 7a01 	vldr	s15, [r3, #4]
 8026008:	ee66 7aa7 	vmul.f32	s15, s13, s15
 802600c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8026010:	edc7 7a06 	vstr	s15, [r7, #24]
 8026014:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8026016:	00db      	lsls	r3, r3, #3
 8026018:	68fa      	ldr	r2, [r7, #12]
 802601a:	4413      	add	r3, r2
 802601c:	ed93 7a00 	vldr	s14, [r3]
 8026020:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8026022:	edd3 7a01 	vldr	s15, [r3, #4]
 8026026:	ee27 7a27 	vmul.f32	s14, s14, s15
 802602a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802602c:	00db      	lsls	r3, r3, #3
 802602e:	68fa      	ldr	r2, [r7, #12]
 8026030:	4413      	add	r3, r2
 8026032:	edd3 6a01 	vldr	s13, [r3, #4]
 8026036:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8026038:	edd3 7a00 	vldr	s15, [r3]
 802603c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8026040:	ee77 7a27 	vadd.f32	s15, s14, s15
 8026044:	edc7 7a07 	vstr	s15, [r7, #28]
        C_MUL(scratch[2],Fout[m3] , *tw3 );
 8026048:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802604a:	00db      	lsls	r3, r3, #3
 802604c:	68fa      	ldr	r2, [r7, #12]
 802604e:	4413      	add	r3, r2
 8026050:	ed93 7a00 	vldr	s14, [r3]
 8026054:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8026056:	edd3 7a00 	vldr	s15, [r3]
 802605a:	ee27 7a27 	vmul.f32	s14, s14, s15
 802605e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8026060:	00db      	lsls	r3, r3, #3
 8026062:	68fa      	ldr	r2, [r7, #12]
 8026064:	4413      	add	r3, r2
 8026066:	edd3 6a01 	vldr	s13, [r3, #4]
 802606a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802606c:	edd3 7a01 	vldr	s15, [r3, #4]
 8026070:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8026074:	ee77 7a67 	vsub.f32	s15, s14, s15
 8026078:	edc7 7a08 	vstr	s15, [r7, #32]
 802607c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802607e:	00db      	lsls	r3, r3, #3
 8026080:	68fa      	ldr	r2, [r7, #12]
 8026082:	4413      	add	r3, r2
 8026084:	ed93 7a00 	vldr	s14, [r3]
 8026088:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802608a:	edd3 7a01 	vldr	s15, [r3, #4]
 802608e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8026092:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8026094:	00db      	lsls	r3, r3, #3
 8026096:	68fa      	ldr	r2, [r7, #12]
 8026098:	4413      	add	r3, r2
 802609a:	edd3 6a01 	vldr	s13, [r3, #4]
 802609e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80260a0:	edd3 7a00 	vldr	s15, [r3]
 80260a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80260a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80260ac:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

        C_SUB( scratch[5] , *Fout, scratch[1] );
 80260b0:	68fb      	ldr	r3, [r7, #12]
 80260b2:	ed93 7a00 	vldr	s14, [r3]
 80260b6:	edd7 7a06 	vldr	s15, [r7, #24]
 80260ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80260be:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
 80260c2:	68fb      	ldr	r3, [r7, #12]
 80260c4:	ed93 7a01 	vldr	s14, [r3, #4]
 80260c8:	edd7 7a07 	vldr	s15, [r7, #28]
 80260cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80260d0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        C_ADDTO(*Fout, scratch[1]);
 80260d4:	68fb      	ldr	r3, [r7, #12]
 80260d6:	ed93 7a00 	vldr	s14, [r3]
 80260da:	edd7 7a06 	vldr	s15, [r7, #24]
 80260de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80260e2:	68fb      	ldr	r3, [r7, #12]
 80260e4:	edc3 7a00 	vstr	s15, [r3]
 80260e8:	68fb      	ldr	r3, [r7, #12]
 80260ea:	ed93 7a01 	vldr	s14, [r3, #4]
 80260ee:	edd7 7a07 	vldr	s15, [r7, #28]
 80260f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80260f6:	68fb      	ldr	r3, [r7, #12]
 80260f8:	edc3 7a01 	vstr	s15, [r3, #4]
        C_ADD( scratch[3] , scratch[0] , scratch[2] );
 80260fc:	ed97 7a04 	vldr	s14, [r7, #16]
 8026100:	edd7 7a08 	vldr	s15, [r7, #32]
 8026104:	ee77 7a27 	vadd.f32	s15, s14, s15
 8026108:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 802610c:	ed97 7a05 	vldr	s14, [r7, #20]
 8026110:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8026114:	ee77 7a27 	vadd.f32	s15, s14, s15
 8026118:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        C_SUB( scratch[4] , scratch[0] , scratch[2] );
 802611c:	ed97 7a04 	vldr	s14, [r7, #16]
 8026120:	edd7 7a08 	vldr	s15, [r7, #32]
 8026124:	ee77 7a67 	vsub.f32	s15, s14, s15
 8026128:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 802612c:	ed97 7a05 	vldr	s14, [r7, #20]
 8026130:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8026134:	ee77 7a67 	vsub.f32	s15, s14, s15
 8026138:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        C_SUB( Fout[m2], *Fout, scratch[3] );
 802613c:	68fb      	ldr	r3, [r7, #12]
 802613e:	ed93 7a00 	vldr	s14, [r3]
 8026142:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8026146:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8026148:	00db      	lsls	r3, r3, #3
 802614a:	68fa      	ldr	r2, [r7, #12]
 802614c:	4413      	add	r3, r2
 802614e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8026152:	edc3 7a00 	vstr	s15, [r3]
 8026156:	68fb      	ldr	r3, [r7, #12]
 8026158:	ed93 7a01 	vldr	s14, [r3, #4]
 802615c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8026160:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8026162:	00db      	lsls	r3, r3, #3
 8026164:	68fa      	ldr	r2, [r7, #12]
 8026166:	4413      	add	r3, r2
 8026168:	ee77 7a67 	vsub.f32	s15, s14, s15
 802616c:	edc3 7a01 	vstr	s15, [r3, #4]
        tw1 += fstride;
 8026170:	68bb      	ldr	r3, [r7, #8]
 8026172:	00db      	lsls	r3, r3, #3
 8026174:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8026176:	4413      	add	r3, r2
 8026178:	657b      	str	r3, [r7, #84]	; 0x54
        tw2 += fstride*2;
 802617a:	68bb      	ldr	r3, [r7, #8]
 802617c:	011b      	lsls	r3, r3, #4
 802617e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8026180:	4413      	add	r3, r2
 8026182:	653b      	str	r3, [r7, #80]	; 0x50
        tw3 += fstride*3;
 8026184:	68ba      	ldr	r2, [r7, #8]
 8026186:	4613      	mov	r3, r2
 8026188:	005b      	lsls	r3, r3, #1
 802618a:	4413      	add	r3, r2
 802618c:	00db      	lsls	r3, r3, #3
 802618e:	461a      	mov	r2, r3
 8026190:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8026192:	4413      	add	r3, r2
 8026194:	64fb      	str	r3, [r7, #76]	; 0x4c
        C_ADDTO( *Fout , scratch[3] );
 8026196:	68fb      	ldr	r3, [r7, #12]
 8026198:	ed93 7a00 	vldr	s14, [r3]
 802619c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80261a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80261a4:	68fb      	ldr	r3, [r7, #12]
 80261a6:	edc3 7a00 	vstr	s15, [r3]
 80261aa:	68fb      	ldr	r3, [r7, #12]
 80261ac:	ed93 7a01 	vldr	s14, [r3, #4]
 80261b0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80261b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80261b8:	68fb      	ldr	r3, [r7, #12]
 80261ba:	edc3 7a01 	vstr	s15, [r3, #4]

        if(st->inverse) {
 80261be:	687b      	ldr	r3, [r7, #4]
 80261c0:	685b      	ldr	r3, [r3, #4]
 80261c2:	2b00      	cmp	r3, #0
 80261c4:	d030      	beq.n	8026228 <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej+0x2e2>
            Fout[m].r = scratch[5].r - scratch[4].i;
 80261c6:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80261ca:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80261ce:	683b      	ldr	r3, [r7, #0]
 80261d0:	00db      	lsls	r3, r3, #3
 80261d2:	68fa      	ldr	r2, [r7, #12]
 80261d4:	4413      	add	r3, r2
 80261d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80261da:	edc3 7a00 	vstr	s15, [r3]
            Fout[m].i = scratch[5].i + scratch[4].r;
 80261de:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80261e2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80261e6:	683b      	ldr	r3, [r7, #0]
 80261e8:	00db      	lsls	r3, r3, #3
 80261ea:	68fa      	ldr	r2, [r7, #12]
 80261ec:	4413      	add	r3, r2
 80261ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80261f2:	edc3 7a01 	vstr	s15, [r3, #4]
            Fout[m3].r = scratch[5].r + scratch[4].i;
 80261f6:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80261fa:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80261fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8026200:	00db      	lsls	r3, r3, #3
 8026202:	68fa      	ldr	r2, [r7, #12]
 8026204:	4413      	add	r3, r2
 8026206:	ee77 7a27 	vadd.f32	s15, s14, s15
 802620a:	edc3 7a00 	vstr	s15, [r3]
            Fout[m3].i = scratch[5].i - scratch[4].r;
 802620e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8026212:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8026216:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8026218:	00db      	lsls	r3, r3, #3
 802621a:	68fa      	ldr	r2, [r7, #12]
 802621c:	4413      	add	r3, r2
 802621e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8026222:	edc3 7a01 	vstr	s15, [r3, #4]
 8026226:	e02f      	b.n	8026288 <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej+0x342>
        }else{
            Fout[m].r = scratch[5].r + scratch[4].i;
 8026228:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 802622c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8026230:	683b      	ldr	r3, [r7, #0]
 8026232:	00db      	lsls	r3, r3, #3
 8026234:	68fa      	ldr	r2, [r7, #12]
 8026236:	4413      	add	r3, r2
 8026238:	ee77 7a27 	vadd.f32	s15, s14, s15
 802623c:	edc3 7a00 	vstr	s15, [r3]
            Fout[m].i = scratch[5].i - scratch[4].r;
 8026240:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8026244:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8026248:	683b      	ldr	r3, [r7, #0]
 802624a:	00db      	lsls	r3, r3, #3
 802624c:	68fa      	ldr	r2, [r7, #12]
 802624e:	4413      	add	r3, r2
 8026250:	ee77 7a67 	vsub.f32	s15, s14, s15
 8026254:	edc3 7a01 	vstr	s15, [r3, #4]
            Fout[m3].r = scratch[5].r - scratch[4].i;
 8026258:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 802625c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8026260:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8026262:	00db      	lsls	r3, r3, #3
 8026264:	68fa      	ldr	r2, [r7, #12]
 8026266:	4413      	add	r3, r2
 8026268:	ee77 7a67 	vsub.f32	s15, s14, s15
 802626c:	edc3 7a00 	vstr	s15, [r3]
            Fout[m3].i = scratch[5].i + scratch[4].r;
 8026270:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8026274:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8026278:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802627a:	00db      	lsls	r3, r3, #3
 802627c:	68fa      	ldr	r2, [r7, #12]
 802627e:	4413      	add	r3, r2
 8026280:	ee77 7a27 	vadd.f32	s15, s14, s15
 8026284:	edc3 7a01 	vstr	s15, [r3, #4]
        }
        ++Fout;
 8026288:	68fb      	ldr	r3, [r7, #12]
 802628a:	3308      	adds	r3, #8
 802628c:	60fb      	str	r3, [r7, #12]
    }while(--k);
 802628e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8026290:	3b01      	subs	r3, #1
 8026292:	64bb      	str	r3, [r7, #72]	; 0x48
 8026294:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8026296:	2b00      	cmp	r3, #0
 8026298:	bf14      	ite	ne
 802629a:	2301      	movne	r3, #1
 802629c:	2300      	moveq	r3, #0
 802629e:	b2db      	uxtb	r3, r3
 80262a0:	2b00      	cmp	r3, #0
 80262a2:	d000      	beq.n	80262a6 <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej+0x360>
    do {
 80262a4:	e668      	b.n	8025f78 <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej+0x32>
}
 80262a6:	bf00      	nop
 80262a8:	375c      	adds	r7, #92	; 0x5c
 80262aa:	46bd      	mov	sp, r7
 80262ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80262b0:	4770      	bx	lr
	...

080262b4 <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej>:
         kiss_fft_cpx * Fout,
         const size_t fstride,
         const kiss_fft_cfg st,
         size_t m
         )
{
 80262b4:	b5b0      	push	{r4, r5, r7, lr}
 80262b6:	b094      	sub	sp, #80	; 0x50
 80262b8:	af00      	add	r7, sp, #0
 80262ba:	60f8      	str	r0, [r7, #12]
 80262bc:	60b9      	str	r1, [r7, #8]
 80262be:	607a      	str	r2, [r7, #4]
 80262c0:	603b      	str	r3, [r7, #0]
     size_t k=m;
 80262c2:	683b      	ldr	r3, [r7, #0]
 80262c4:	64fb      	str	r3, [r7, #76]	; 0x4c
     const size_t m2 = 2*m;
 80262c6:	683b      	ldr	r3, [r7, #0]
 80262c8:	005b      	lsls	r3, r3, #1
 80262ca:	643b      	str	r3, [r7, #64]	; 0x40
     kiss_fft_cpx *tw1,*tw2;
     kiss_fft_cpx scratch[5];
     kiss_fft_cpx epi3;
     epi3 = st->twiddles[fstride*m];
 80262cc:	68bb      	ldr	r3, [r7, #8]
 80262ce:	683a      	ldr	r2, [r7, #0]
 80262d0:	fb02 f303 	mul.w	r3, r2, r3
 80262d4:	6879      	ldr	r1, [r7, #4]
 80262d6:	3321      	adds	r3, #33	; 0x21
 80262d8:	f107 0210 	add.w	r2, r7, #16
 80262dc:	00db      	lsls	r3, r3, #3
 80262de:	440b      	add	r3, r1
 80262e0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80262e4:	e882 0003 	stmia.w	r2, {r0, r1}

     tw1=tw2=st->twiddles;
 80262e8:	687b      	ldr	r3, [r7, #4]
 80262ea:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80262ee:	647b      	str	r3, [r7, #68]	; 0x44
 80262f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80262f2:	64bb      	str	r3, [r7, #72]	; 0x48

     do{
         C_FIXDIV(*Fout,3); C_FIXDIV(Fout[m],3); C_FIXDIV(Fout[m2],3);

         C_MUL(scratch[1],Fout[m] , *tw1);
 80262f4:	683b      	ldr	r3, [r7, #0]
 80262f6:	00db      	lsls	r3, r3, #3
 80262f8:	68fa      	ldr	r2, [r7, #12]
 80262fa:	4413      	add	r3, r2
 80262fc:	ed93 7a00 	vldr	s14, [r3]
 8026300:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8026302:	edd3 7a00 	vldr	s15, [r3]
 8026306:	ee27 7a27 	vmul.f32	s14, s14, s15
 802630a:	683b      	ldr	r3, [r7, #0]
 802630c:	00db      	lsls	r3, r3, #3
 802630e:	68fa      	ldr	r2, [r7, #12]
 8026310:	4413      	add	r3, r2
 8026312:	edd3 6a01 	vldr	s13, [r3, #4]
 8026316:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8026318:	edd3 7a01 	vldr	s15, [r3, #4]
 802631c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8026320:	ee77 7a67 	vsub.f32	s15, s14, s15
 8026324:	edc7 7a08 	vstr	s15, [r7, #32]
 8026328:	683b      	ldr	r3, [r7, #0]
 802632a:	00db      	lsls	r3, r3, #3
 802632c:	68fa      	ldr	r2, [r7, #12]
 802632e:	4413      	add	r3, r2
 8026330:	ed93 7a00 	vldr	s14, [r3]
 8026334:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8026336:	edd3 7a01 	vldr	s15, [r3, #4]
 802633a:	ee27 7a27 	vmul.f32	s14, s14, s15
 802633e:	683b      	ldr	r3, [r7, #0]
 8026340:	00db      	lsls	r3, r3, #3
 8026342:	68fa      	ldr	r2, [r7, #12]
 8026344:	4413      	add	r3, r2
 8026346:	edd3 6a01 	vldr	s13, [r3, #4]
 802634a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802634c:	edd3 7a00 	vldr	s15, [r3]
 8026350:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8026354:	ee77 7a27 	vadd.f32	s15, s14, s15
 8026358:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
         C_MUL(scratch[2],Fout[m2] , *tw2);
 802635c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802635e:	00db      	lsls	r3, r3, #3
 8026360:	68fa      	ldr	r2, [r7, #12]
 8026362:	4413      	add	r3, r2
 8026364:	ed93 7a00 	vldr	s14, [r3]
 8026368:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802636a:	edd3 7a00 	vldr	s15, [r3]
 802636e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8026372:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8026374:	00db      	lsls	r3, r3, #3
 8026376:	68fa      	ldr	r2, [r7, #12]
 8026378:	4413      	add	r3, r2
 802637a:	edd3 6a01 	vldr	s13, [r3, #4]
 802637e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8026380:	edd3 7a01 	vldr	s15, [r3, #4]
 8026384:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8026388:	ee77 7a67 	vsub.f32	s15, s14, s15
 802638c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 8026390:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8026392:	00db      	lsls	r3, r3, #3
 8026394:	68fa      	ldr	r2, [r7, #12]
 8026396:	4413      	add	r3, r2
 8026398:	ed93 7a00 	vldr	s14, [r3]
 802639c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802639e:	edd3 7a01 	vldr	s15, [r3, #4]
 80263a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80263a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80263a8:	00db      	lsls	r3, r3, #3
 80263aa:	68fa      	ldr	r2, [r7, #12]
 80263ac:	4413      	add	r3, r2
 80263ae:	edd3 6a01 	vldr	s13, [r3, #4]
 80263b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80263b4:	edd3 7a00 	vldr	s15, [r3]
 80263b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80263bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80263c0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

         C_ADD(scratch[3],scratch[1],scratch[2]);
 80263c4:	ed97 7a08 	vldr	s14, [r7, #32]
 80263c8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80263cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80263d0:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 80263d4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80263d8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80263dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80263e0:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
         C_SUB(scratch[0],scratch[1],scratch[2]);
 80263e4:	ed97 7a08 	vldr	s14, [r7, #32]
 80263e8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80263ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80263f0:	edc7 7a06 	vstr	s15, [r7, #24]
 80263f4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80263f8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80263fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8026400:	edc7 7a07 	vstr	s15, [r7, #28]
         tw1 += fstride;
 8026404:	68bb      	ldr	r3, [r7, #8]
 8026406:	00db      	lsls	r3, r3, #3
 8026408:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802640a:	4413      	add	r3, r2
 802640c:	64bb      	str	r3, [r7, #72]	; 0x48
         tw2 += fstride*2;
 802640e:	68bb      	ldr	r3, [r7, #8]
 8026410:	011b      	lsls	r3, r3, #4
 8026412:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8026414:	4413      	add	r3, r2
 8026416:	647b      	str	r3, [r7, #68]	; 0x44

         Fout[m].r = Fout->r - HALF_OF(scratch[3].r);
 8026418:	68fb      	ldr	r3, [r7, #12]
 802641a:	681b      	ldr	r3, [r3, #0]
 802641c:	4618      	mov	r0, r3
 802641e:	f7da f89d 	bl	800055c <__aeabi_f2d>
 8026422:	4604      	mov	r4, r0
 8026424:	460d      	mov	r5, r1
 8026426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026428:	4618      	mov	r0, r3
 802642a:	f7da f897 	bl	800055c <__aeabi_f2d>
 802642e:	f04f 0200 	mov.w	r2, #0
 8026432:	4b57      	ldr	r3, [pc, #348]	; (8026590 <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej+0x2dc>)
 8026434:	f7da f8ea 	bl	800060c <__aeabi_dmul>
 8026438:	4602      	mov	r2, r0
 802643a:	460b      	mov	r3, r1
 802643c:	4620      	mov	r0, r4
 802643e:	4629      	mov	r1, r5
 8026440:	f7d9 ff2c 	bl	800029c <__aeabi_dsub>
 8026444:	4602      	mov	r2, r0
 8026446:	460b      	mov	r3, r1
 8026448:	4610      	mov	r0, r2
 802644a:	4619      	mov	r1, r3
 802644c:	683b      	ldr	r3, [r7, #0]
 802644e:	00db      	lsls	r3, r3, #3
 8026450:	68fa      	ldr	r2, [r7, #12]
 8026452:	18d4      	adds	r4, r2, r3
 8026454:	f7da fbd2 	bl	8000bfc <__aeabi_d2f>
 8026458:	4603      	mov	r3, r0
 802645a:	6023      	str	r3, [r4, #0]
         Fout[m].i = Fout->i - HALF_OF(scratch[3].i);
 802645c:	68fb      	ldr	r3, [r7, #12]
 802645e:	685b      	ldr	r3, [r3, #4]
 8026460:	4618      	mov	r0, r3
 8026462:	f7da f87b 	bl	800055c <__aeabi_f2d>
 8026466:	4604      	mov	r4, r0
 8026468:	460d      	mov	r5, r1
 802646a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802646c:	4618      	mov	r0, r3
 802646e:	f7da f875 	bl	800055c <__aeabi_f2d>
 8026472:	f04f 0200 	mov.w	r2, #0
 8026476:	4b46      	ldr	r3, [pc, #280]	; (8026590 <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej+0x2dc>)
 8026478:	f7da f8c8 	bl	800060c <__aeabi_dmul>
 802647c:	4602      	mov	r2, r0
 802647e:	460b      	mov	r3, r1
 8026480:	4620      	mov	r0, r4
 8026482:	4629      	mov	r1, r5
 8026484:	f7d9 ff0a 	bl	800029c <__aeabi_dsub>
 8026488:	4602      	mov	r2, r0
 802648a:	460b      	mov	r3, r1
 802648c:	4610      	mov	r0, r2
 802648e:	4619      	mov	r1, r3
 8026490:	683b      	ldr	r3, [r7, #0]
 8026492:	00db      	lsls	r3, r3, #3
 8026494:	68fa      	ldr	r2, [r7, #12]
 8026496:	18d4      	adds	r4, r2, r3
 8026498:	f7da fbb0 	bl	8000bfc <__aeabi_d2f>
 802649c:	4603      	mov	r3, r0
 802649e:	6063      	str	r3, [r4, #4]

         C_MULBYSCALAR( scratch[0] , epi3.i );
 80264a0:	ed97 7a06 	vldr	s14, [r7, #24]
 80264a4:	edd7 7a05 	vldr	s15, [r7, #20]
 80264a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80264ac:	edc7 7a06 	vstr	s15, [r7, #24]
 80264b0:	ed97 7a07 	vldr	s14, [r7, #28]
 80264b4:	edd7 7a05 	vldr	s15, [r7, #20]
 80264b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80264bc:	edc7 7a07 	vstr	s15, [r7, #28]

         C_ADDTO(*Fout,scratch[3]);
 80264c0:	68fb      	ldr	r3, [r7, #12]
 80264c2:	ed93 7a00 	vldr	s14, [r3]
 80264c6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80264ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80264ce:	68fb      	ldr	r3, [r7, #12]
 80264d0:	edc3 7a00 	vstr	s15, [r3]
 80264d4:	68fb      	ldr	r3, [r7, #12]
 80264d6:	ed93 7a01 	vldr	s14, [r3, #4]
 80264da:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80264de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80264e2:	68fb      	ldr	r3, [r7, #12]
 80264e4:	edc3 7a01 	vstr	s15, [r3, #4]

         Fout[m2].r = Fout[m].r + scratch[0].i;
 80264e8:	683b      	ldr	r3, [r7, #0]
 80264ea:	00db      	lsls	r3, r3, #3
 80264ec:	68fa      	ldr	r2, [r7, #12]
 80264ee:	4413      	add	r3, r2
 80264f0:	ed93 7a00 	vldr	s14, [r3]
 80264f4:	edd7 7a07 	vldr	s15, [r7, #28]
 80264f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80264fa:	00db      	lsls	r3, r3, #3
 80264fc:	68fa      	ldr	r2, [r7, #12]
 80264fe:	4413      	add	r3, r2
 8026500:	ee77 7a27 	vadd.f32	s15, s14, s15
 8026504:	edc3 7a00 	vstr	s15, [r3]
         Fout[m2].i = Fout[m].i - scratch[0].r;
 8026508:	683b      	ldr	r3, [r7, #0]
 802650a:	00db      	lsls	r3, r3, #3
 802650c:	68fa      	ldr	r2, [r7, #12]
 802650e:	4413      	add	r3, r2
 8026510:	ed93 7a01 	vldr	s14, [r3, #4]
 8026514:	edd7 7a06 	vldr	s15, [r7, #24]
 8026518:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802651a:	00db      	lsls	r3, r3, #3
 802651c:	68fa      	ldr	r2, [r7, #12]
 802651e:	4413      	add	r3, r2
 8026520:	ee77 7a67 	vsub.f32	s15, s14, s15
 8026524:	edc3 7a01 	vstr	s15, [r3, #4]

         Fout[m].r -= scratch[0].i;
 8026528:	683b      	ldr	r3, [r7, #0]
 802652a:	00db      	lsls	r3, r3, #3
 802652c:	68fa      	ldr	r2, [r7, #12]
 802652e:	4413      	add	r3, r2
 8026530:	ed93 7a00 	vldr	s14, [r3]
 8026534:	edd7 7a07 	vldr	s15, [r7, #28]
 8026538:	683b      	ldr	r3, [r7, #0]
 802653a:	00db      	lsls	r3, r3, #3
 802653c:	68fa      	ldr	r2, [r7, #12]
 802653e:	4413      	add	r3, r2
 8026540:	ee77 7a67 	vsub.f32	s15, s14, s15
 8026544:	edc3 7a00 	vstr	s15, [r3]
         Fout[m].i += scratch[0].r;
 8026548:	683b      	ldr	r3, [r7, #0]
 802654a:	00db      	lsls	r3, r3, #3
 802654c:	68fa      	ldr	r2, [r7, #12]
 802654e:	4413      	add	r3, r2
 8026550:	ed93 7a01 	vldr	s14, [r3, #4]
 8026554:	edd7 7a06 	vldr	s15, [r7, #24]
 8026558:	683b      	ldr	r3, [r7, #0]
 802655a:	00db      	lsls	r3, r3, #3
 802655c:	68fa      	ldr	r2, [r7, #12]
 802655e:	4413      	add	r3, r2
 8026560:	ee77 7a27 	vadd.f32	s15, s14, s15
 8026564:	edc3 7a01 	vstr	s15, [r3, #4]

         ++Fout;
 8026568:	68fb      	ldr	r3, [r7, #12]
 802656a:	3308      	adds	r3, #8
 802656c:	60fb      	str	r3, [r7, #12]
     }while(--k);
 802656e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8026570:	3b01      	subs	r3, #1
 8026572:	64fb      	str	r3, [r7, #76]	; 0x4c
 8026574:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8026576:	2b00      	cmp	r3, #0
 8026578:	bf14      	ite	ne
 802657a:	2301      	movne	r3, #1
 802657c:	2300      	moveq	r3, #0
 802657e:	b2db      	uxtb	r3, r3
 8026580:	2b00      	cmp	r3, #0
 8026582:	d000      	beq.n	8026586 <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej+0x2d2>
     do{
 8026584:	e6b6      	b.n	80262f4 <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej+0x40>
}
 8026586:	bf00      	nop
 8026588:	3750      	adds	r7, #80	; 0x50
 802658a:	46bd      	mov	sp, r7
 802658c:	bdb0      	pop	{r4, r5, r7, pc}
 802658e:	bf00      	nop
 8026590:	3fe00000 	.word	0x3fe00000

08026594 <_ZL8kf_bfly5P12kiss_fft_cpxjP14kiss_fft_statei>:
        kiss_fft_cpx * Fout,
        const size_t fstride,
        const kiss_fft_cfg st,
        int m
        )
{
 8026594:	b480      	push	{r7}
 8026596:	b0ab      	sub	sp, #172	; 0xac
 8026598:	af00      	add	r7, sp, #0
 802659a:	60f8      	str	r0, [r7, #12]
 802659c:	60b9      	str	r1, [r7, #8]
 802659e:	607a      	str	r2, [r7, #4]
 80265a0:	603b      	str	r3, [r7, #0]
    kiss_fft_cpx *Fout0,*Fout1,*Fout2,*Fout3,*Fout4;
    int u;
    kiss_fft_cpx scratch[13];
    kiss_fft_cpx * twiddles = st->twiddles;
 80265a2:	687b      	ldr	r3, [r7, #4]
 80265a4:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80265a8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    kiss_fft_cpx *tw;
    kiss_fft_cpx ya,yb;
    ya = twiddles[fstride*m];
 80265ac:	683b      	ldr	r3, [r7, #0]
 80265ae:	68ba      	ldr	r2, [r7, #8]
 80265b0:	fb02 f303 	mul.w	r3, r2, r3
 80265b4:	00db      	lsls	r3, r3, #3
 80265b6:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80265ba:	441a      	add	r2, r3
 80265bc:	f107 0318 	add.w	r3, r7, #24
 80265c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80265c4:	e883 0003 	stmia.w	r3, {r0, r1}
    yb = twiddles[fstride*2*m];
 80265c8:	683b      	ldr	r3, [r7, #0]
 80265ca:	68ba      	ldr	r2, [r7, #8]
 80265cc:	fb02 f303 	mul.w	r3, r2, r3
 80265d0:	011b      	lsls	r3, r3, #4
 80265d2:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80265d6:	441a      	add	r2, r3
 80265d8:	f107 0310 	add.w	r3, r7, #16
 80265dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80265e0:	e883 0003 	stmia.w	r3, {r0, r1}

    Fout0=Fout;
 80265e4:	68fb      	ldr	r3, [r7, #12]
 80265e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    Fout1=Fout0+m;
 80265ea:	683b      	ldr	r3, [r7, #0]
 80265ec:	00db      	lsls	r3, r3, #3
 80265ee:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80265f2:	4413      	add	r3, r2
 80265f4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    Fout2=Fout0+2*m;
 80265f8:	683b      	ldr	r3, [r7, #0]
 80265fa:	011b      	lsls	r3, r3, #4
 80265fc:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8026600:	4413      	add	r3, r2
 8026602:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    Fout3=Fout0+3*m;
 8026606:	683a      	ldr	r2, [r7, #0]
 8026608:	4613      	mov	r3, r2
 802660a:	005b      	lsls	r3, r3, #1
 802660c:	4413      	add	r3, r2
 802660e:	00db      	lsls	r3, r3, #3
 8026610:	461a      	mov	r2, r3
 8026612:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8026616:	4413      	add	r3, r2
 8026618:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    Fout4=Fout0+4*m;
 802661c:	683b      	ldr	r3, [r7, #0]
 802661e:	015b      	lsls	r3, r3, #5
 8026620:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8026624:	4413      	add	r3, r2
 8026626:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    tw=st->twiddles;
 802662a:	687b      	ldr	r3, [r7, #4]
 802662c:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8026630:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    for ( u=0; u<m; ++u ) {
 8026634:	2300      	movs	r3, #0
 8026636:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 802663a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 802663e:	683b      	ldr	r3, [r7, #0]
 8026640:	429a      	cmp	r2, r3
 8026642:	f280 82a9 	bge.w	8026b98 <_ZL8kf_bfly5P12kiss_fft_cpxjP14kiss_fft_statei+0x604>
        C_FIXDIV( *Fout0,5); C_FIXDIV( *Fout1,5); C_FIXDIV( *Fout2,5); C_FIXDIV( *Fout3,5); C_FIXDIV( *Fout4,5);
        scratch[0] = *Fout0;
 8026646:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 802664a:	f107 0320 	add.w	r3, r7, #32
 802664e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8026652:	e883 0003 	stmia.w	r3, {r0, r1}

        C_MUL(scratch[1] ,*Fout1, tw[u*fstride]);
 8026656:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 802665a:	ed93 7a00 	vldr	s14, [r3]
 802665e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8026662:	68ba      	ldr	r2, [r7, #8]
 8026664:	fb02 f303 	mul.w	r3, r2, r3
 8026668:	00db      	lsls	r3, r3, #3
 802666a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 802666e:	4413      	add	r3, r2
 8026670:	edd3 7a00 	vldr	s15, [r3]
 8026674:	ee27 7a27 	vmul.f32	s14, s14, s15
 8026678:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 802667c:	edd3 6a01 	vldr	s13, [r3, #4]
 8026680:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8026684:	68ba      	ldr	r2, [r7, #8]
 8026686:	fb02 f303 	mul.w	r3, r2, r3
 802668a:	00db      	lsls	r3, r3, #3
 802668c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8026690:	4413      	add	r3, r2
 8026692:	edd3 7a01 	vldr	s15, [r3, #4]
 8026696:	ee66 7aa7 	vmul.f32	s15, s13, s15
 802669a:	ee77 7a67 	vsub.f32	s15, s14, s15
 802669e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 80266a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80266a6:	ed93 7a00 	vldr	s14, [r3]
 80266aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80266ae:	68ba      	ldr	r2, [r7, #8]
 80266b0:	fb02 f303 	mul.w	r3, r2, r3
 80266b4:	00db      	lsls	r3, r3, #3
 80266b6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80266ba:	4413      	add	r3, r2
 80266bc:	edd3 7a01 	vldr	s15, [r3, #4]
 80266c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80266c4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80266c8:	edd3 6a01 	vldr	s13, [r3, #4]
 80266cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80266d0:	68ba      	ldr	r2, [r7, #8]
 80266d2:	fb02 f303 	mul.w	r3, r2, r3
 80266d6:	00db      	lsls	r3, r3, #3
 80266d8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80266dc:	4413      	add	r3, r2
 80266de:	edd3 7a00 	vldr	s15, [r3]
 80266e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80266e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80266ea:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        C_MUL(scratch[2] ,*Fout2, tw[2*u*fstride]);
 80266ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80266f2:	ed93 7a00 	vldr	s14, [r3]
 80266f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80266fa:	68ba      	ldr	r2, [r7, #8]
 80266fc:	fb02 f303 	mul.w	r3, r2, r3
 8026700:	011b      	lsls	r3, r3, #4
 8026702:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8026706:	4413      	add	r3, r2
 8026708:	edd3 7a00 	vldr	s15, [r3]
 802670c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8026710:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8026714:	edd3 6a01 	vldr	s13, [r3, #4]
 8026718:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 802671c:	68ba      	ldr	r2, [r7, #8]
 802671e:	fb02 f303 	mul.w	r3, r2, r3
 8026722:	011b      	lsls	r3, r3, #4
 8026724:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8026728:	4413      	add	r3, r2
 802672a:	edd3 7a01 	vldr	s15, [r3, #4]
 802672e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8026732:	ee77 7a67 	vsub.f32	s15, s14, s15
 8026736:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 802673a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 802673e:	ed93 7a00 	vldr	s14, [r3]
 8026742:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8026746:	68ba      	ldr	r2, [r7, #8]
 8026748:	fb02 f303 	mul.w	r3, r2, r3
 802674c:	011b      	lsls	r3, r3, #4
 802674e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8026752:	4413      	add	r3, r2
 8026754:	edd3 7a01 	vldr	s15, [r3, #4]
 8026758:	ee27 7a27 	vmul.f32	s14, s14, s15
 802675c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8026760:	edd3 6a01 	vldr	s13, [r3, #4]
 8026764:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8026768:	68ba      	ldr	r2, [r7, #8]
 802676a:	fb02 f303 	mul.w	r3, r2, r3
 802676e:	011b      	lsls	r3, r3, #4
 8026770:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8026774:	4413      	add	r3, r2
 8026776:	edd3 7a00 	vldr	s15, [r3]
 802677a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 802677e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8026782:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        C_MUL(scratch[3] ,*Fout3, tw[3*u*fstride]);
 8026786:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 802678a:	ed93 7a00 	vldr	s14, [r3]
 802678e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8026792:	68ba      	ldr	r2, [r7, #8]
 8026794:	fb03 f202 	mul.w	r2, r3, r2
 8026798:	4613      	mov	r3, r2
 802679a:	005b      	lsls	r3, r3, #1
 802679c:	4413      	add	r3, r2
 802679e:	00db      	lsls	r3, r3, #3
 80267a0:	461a      	mov	r2, r3
 80267a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80267a6:	4413      	add	r3, r2
 80267a8:	edd3 7a00 	vldr	s15, [r3]
 80267ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80267b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80267b4:	edd3 6a01 	vldr	s13, [r3, #4]
 80267b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80267bc:	68ba      	ldr	r2, [r7, #8]
 80267be:	fb03 f202 	mul.w	r2, r3, r2
 80267c2:	4613      	mov	r3, r2
 80267c4:	005b      	lsls	r3, r3, #1
 80267c6:	4413      	add	r3, r2
 80267c8:	00db      	lsls	r3, r3, #3
 80267ca:	461a      	mov	r2, r3
 80267cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80267d0:	4413      	add	r3, r2
 80267d2:	edd3 7a01 	vldr	s15, [r3, #4]
 80267d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80267da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80267de:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
 80267e2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80267e6:	ed93 7a00 	vldr	s14, [r3]
 80267ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80267ee:	68ba      	ldr	r2, [r7, #8]
 80267f0:	fb03 f202 	mul.w	r2, r3, r2
 80267f4:	4613      	mov	r3, r2
 80267f6:	005b      	lsls	r3, r3, #1
 80267f8:	4413      	add	r3, r2
 80267fa:	00db      	lsls	r3, r3, #3
 80267fc:	461a      	mov	r2, r3
 80267fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8026802:	4413      	add	r3, r2
 8026804:	edd3 7a01 	vldr	s15, [r3, #4]
 8026808:	ee27 7a27 	vmul.f32	s14, s14, s15
 802680c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8026810:	edd3 6a01 	vldr	s13, [r3, #4]
 8026814:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8026818:	68ba      	ldr	r2, [r7, #8]
 802681a:	fb03 f202 	mul.w	r2, r3, r2
 802681e:	4613      	mov	r3, r2
 8026820:	005b      	lsls	r3, r3, #1
 8026822:	4413      	add	r3, r2
 8026824:	00db      	lsls	r3, r3, #3
 8026826:	461a      	mov	r2, r3
 8026828:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 802682c:	4413      	add	r3, r2
 802682e:	edd3 7a00 	vldr	s15, [r3]
 8026832:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8026836:	ee77 7a27 	vadd.f32	s15, s14, s15
 802683a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        C_MUL(scratch[4] ,*Fout4, tw[4*u*fstride]);
 802683e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8026842:	ed93 7a00 	vldr	s14, [r3]
 8026846:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 802684a:	68ba      	ldr	r2, [r7, #8]
 802684c:	fb02 f303 	mul.w	r3, r2, r3
 8026850:	015b      	lsls	r3, r3, #5
 8026852:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8026856:	4413      	add	r3, r2
 8026858:	edd3 7a00 	vldr	s15, [r3]
 802685c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8026860:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8026864:	edd3 6a01 	vldr	s13, [r3, #4]
 8026868:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 802686c:	68ba      	ldr	r2, [r7, #8]
 802686e:	fb02 f303 	mul.w	r3, r2, r3
 8026872:	015b      	lsls	r3, r3, #5
 8026874:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8026878:	4413      	add	r3, r2
 802687a:	edd3 7a01 	vldr	s15, [r3, #4]
 802687e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8026882:	ee77 7a67 	vsub.f32	s15, s14, s15
 8026886:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
 802688a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 802688e:	ed93 7a00 	vldr	s14, [r3]
 8026892:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8026896:	68ba      	ldr	r2, [r7, #8]
 8026898:	fb02 f303 	mul.w	r3, r2, r3
 802689c:	015b      	lsls	r3, r3, #5
 802689e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80268a2:	4413      	add	r3, r2
 80268a4:	edd3 7a01 	vldr	s15, [r3, #4]
 80268a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80268ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80268b0:	edd3 6a01 	vldr	s13, [r3, #4]
 80268b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80268b8:	68ba      	ldr	r2, [r7, #8]
 80268ba:	fb02 f303 	mul.w	r3, r2, r3
 80268be:	015b      	lsls	r3, r3, #5
 80268c0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80268c4:	4413      	add	r3, r2
 80268c6:	edd3 7a00 	vldr	s15, [r3]
 80268ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80268ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80268d2:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44

        C_ADD( scratch[7],scratch[1],scratch[4]);
 80268d6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80268da:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80268de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80268e2:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
 80268e6:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80268ea:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80268ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80268f2:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        C_SUB( scratch[10],scratch[1],scratch[4]);
 80268f6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80268fa:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80268fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8026902:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
 8026906:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 802690a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 802690e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8026912:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
        C_ADD( scratch[8],scratch[2],scratch[3]);
 8026916:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 802691a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 802691e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8026922:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
 8026926:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 802692a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 802692e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8026932:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
        C_SUB( scratch[9],scratch[2],scratch[3]);
 8026936:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 802693a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 802693e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8026942:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
 8026946:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 802694a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 802694e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8026952:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c

        Fout0->r += scratch[7].r + scratch[8].r;
 8026956:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 802695a:	ed93 7a00 	vldr	s14, [r3]
 802695e:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8026962:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8026966:	ee76 7aa7 	vadd.f32	s15, s13, s15
 802696a:	ee77 7a27 	vadd.f32	s15, s14, s15
 802696e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8026972:	edc3 7a00 	vstr	s15, [r3]
        Fout0->i += scratch[7].i + scratch[8].i;
 8026976:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 802697a:	ed93 7a01 	vldr	s14, [r3, #4]
 802697e:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8026982:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8026986:	ee76 7aa7 	vadd.f32	s15, s13, s15
 802698a:	ee77 7a27 	vadd.f32	s15, s14, s15
 802698e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8026992:	edc3 7a01 	vstr	s15, [r3, #4]

        scratch[5].r = scratch[0].r + S_MUL(scratch[7].r,ya.r) + S_MUL(scratch[8].r,yb.r);
 8026996:	ed97 7a08 	vldr	s14, [r7, #32]
 802699a:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 802699e:	edd7 7a06 	vldr	s15, [r7, #24]
 80269a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80269a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80269aa:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 80269ae:	edd7 7a04 	vldr	s15, [r7, #16]
 80269b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80269b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80269ba:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        scratch[5].i = scratch[0].i + S_MUL(scratch[7].i,ya.r) + S_MUL(scratch[8].i,yb.r);
 80269be:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80269c2:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 80269c6:	edd7 7a06 	vldr	s15, [r7, #24]
 80269ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80269ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80269d2:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 80269d6:	edd7 7a04 	vldr	s15, [r7, #16]
 80269da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80269de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80269e2:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c

        scratch[6].r =  S_MUL(scratch[10].i,ya.i) + S_MUL(scratch[9].i,yb.i);
 80269e6:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 80269ea:	edd7 7a07 	vldr	s15, [r7, #28]
 80269ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80269f2:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 80269f6:	edd7 7a05 	vldr	s15, [r7, #20]
 80269fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80269fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8026a02:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        scratch[6].i = -S_MUL(scratch[10].r,ya.i) - S_MUL(scratch[9].r,yb.i);
 8026a06:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8026a0a:	edd7 7a07 	vldr	s15, [r7, #28]
 8026a0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8026a12:	eeb1 7a67 	vneg.f32	s14, s15
 8026a16:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 8026a1a:	edd7 7a05 	vldr	s15, [r7, #20]
 8026a1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8026a22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8026a26:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

        C_SUB(*Fout1,scratch[5],scratch[6]);
 8026a2a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8026a2e:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8026a32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8026a36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8026a3a:	edc3 7a00 	vstr	s15, [r3]
 8026a3e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8026a42:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8026a46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8026a4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8026a4e:	edc3 7a01 	vstr	s15, [r3, #4]
        C_ADD(*Fout4,scratch[5],scratch[6]);
 8026a52:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8026a56:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8026a5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8026a5e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8026a62:	edc3 7a00 	vstr	s15, [r3]
 8026a66:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8026a6a:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8026a6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8026a72:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8026a76:	edc3 7a01 	vstr	s15, [r3, #4]

        scratch[11].r = scratch[0].r + S_MUL(scratch[7].r,yb.r) + S_MUL(scratch[8].r,ya.r);
 8026a7a:	ed97 7a08 	vldr	s14, [r7, #32]
 8026a7e:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8026a82:	edd7 7a04 	vldr	s15, [r7, #16]
 8026a86:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8026a8a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8026a8e:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 8026a92:	edd7 7a06 	vldr	s15, [r7, #24]
 8026a96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8026a9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8026a9e:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
        scratch[11].i = scratch[0].i + S_MUL(scratch[7].i,yb.r) + S_MUL(scratch[8].i,ya.r);
 8026aa2:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8026aa6:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8026aaa:	edd7 7a04 	vldr	s15, [r7, #16]
 8026aae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8026ab2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8026ab6:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 8026aba:	edd7 7a06 	vldr	s15, [r7, #24]
 8026abe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8026ac2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8026ac6:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
        scratch[12].r = - S_MUL(scratch[10].i,yb.i) + S_MUL(scratch[9].i,ya.i);
 8026aca:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 8026ace:	edd7 7a07 	vldr	s15, [r7, #28]
 8026ad2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8026ad6:	edd7 6a1d 	vldr	s13, [r7, #116]	; 0x74
 8026ada:	edd7 7a05 	vldr	s15, [r7, #20]
 8026ade:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8026ae2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8026ae6:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
        scratch[12].i = S_MUL(scratch[10].r,yb.i) - S_MUL(scratch[9].r,ya.i);
 8026aea:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8026aee:	edd7 7a05 	vldr	s15, [r7, #20]
 8026af2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8026af6:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 8026afa:	edd7 7a07 	vldr	s15, [r7, #28]
 8026afe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8026b02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8026b06:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84

        C_ADD(*Fout2,scratch[11],scratch[12]);
 8026b0a:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8026b0e:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8026b12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8026b16:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8026b1a:	edc3 7a00 	vstr	s15, [r3]
 8026b1e:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8026b22:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8026b26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8026b2a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8026b2e:	edc3 7a01 	vstr	s15, [r3, #4]
        C_SUB(*Fout3,scratch[11],scratch[12]);
 8026b32:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8026b36:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8026b3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8026b3e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8026b42:	edc3 7a00 	vstr	s15, [r3]
 8026b46:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8026b4a:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8026b4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8026b52:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8026b56:	edc3 7a01 	vstr	s15, [r3, #4]

        ++Fout0;++Fout1;++Fout2;++Fout3;++Fout4;
 8026b5a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8026b5e:	3308      	adds	r3, #8
 8026b60:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8026b64:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8026b68:	3308      	adds	r3, #8
 8026b6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8026b6e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8026b72:	3308      	adds	r3, #8
 8026b74:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8026b78:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8026b7c:	3308      	adds	r3, #8
 8026b7e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8026b82:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8026b86:	3308      	adds	r3, #8
 8026b88:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    for ( u=0; u<m; ++u ) {
 8026b8c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8026b90:	3301      	adds	r3, #1
 8026b92:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8026b96:	e550      	b.n	802663a <_ZL8kf_bfly5P12kiss_fft_cpxjP14kiss_fft_statei+0xa6>
    }
}
 8026b98:	bf00      	nop
 8026b9a:	37ac      	adds	r7, #172	; 0xac
 8026b9c:	46bd      	mov	sp, r7
 8026b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026ba2:	4770      	bx	lr

08026ba4 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii>:
        const size_t fstride,
        const kiss_fft_cfg st,
        int m,
        int p
        )
{
 8026ba4:	b580      	push	{r7, lr}
 8026ba6:	b08e      	sub	sp, #56	; 0x38
 8026ba8:	af00      	add	r7, sp, #0
 8026baa:	60f8      	str	r0, [r7, #12]
 8026bac:	60b9      	str	r1, [r7, #8]
 8026bae:	607a      	str	r2, [r7, #4]
 8026bb0:	603b      	str	r3, [r7, #0]
    int u,k,q1,q;
    kiss_fft_cpx * twiddles = st->twiddles;
 8026bb2:	687b      	ldr	r3, [r7, #4]
 8026bb4:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8026bb8:	623b      	str	r3, [r7, #32]
    kiss_fft_cpx t;
    int Norig = st->nfft;
 8026bba:	687b      	ldr	r3, [r7, #4]
 8026bbc:	681b      	ldr	r3, [r3, #0]
 8026bbe:	61fb      	str	r3, [r7, #28]

    kiss_fft_cpx * scratch = (kiss_fft_cpx*)KISS_FFT_TMP_ALLOC(sizeof(kiss_fft_cpx)*p);
 8026bc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8026bc2:	00db      	lsls	r3, r3, #3
 8026bc4:	4618      	mov	r0, r3
 8026bc6:	f000 fe8b 	bl	80278e0 <_Z9ei_mallocj>
 8026bca:	61b8      	str	r0, [r7, #24]

    for ( u=0; u<m; ++u ) {
 8026bcc:	2300      	movs	r3, #0
 8026bce:	637b      	str	r3, [r7, #52]	; 0x34
 8026bd0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8026bd2:	683b      	ldr	r3, [r7, #0]
 8026bd4:	429a      	cmp	r2, r3
 8026bd6:	f280 80b6 	bge.w	8026d46 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x1a2>
        k=u;
 8026bda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8026bdc:	633b      	str	r3, [r7, #48]	; 0x30
        for ( q1=0 ; q1<p ; ++q1 ) {
 8026bde:	2300      	movs	r3, #0
 8026be0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8026be2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8026be4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8026be6:	429a      	cmp	r2, r3
 8026be8:	da14      	bge.n	8026c14 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x70>
            scratch[q1] = Fout[ k  ];
 8026bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026bec:	00db      	lsls	r3, r3, #3
 8026bee:	68fa      	ldr	r2, [r7, #12]
 8026bf0:	18d1      	adds	r1, r2, r3
 8026bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026bf4:	00db      	lsls	r3, r3, #3
 8026bf6:	69ba      	ldr	r2, [r7, #24]
 8026bf8:	4413      	add	r3, r2
 8026bfa:	460a      	mov	r2, r1
 8026bfc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8026c00:	e883 0003 	stmia.w	r3, {r0, r1}
            C_FIXDIV(scratch[q1],p);
            k += m;
 8026c04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8026c06:	683b      	ldr	r3, [r7, #0]
 8026c08:	4413      	add	r3, r2
 8026c0a:	633b      	str	r3, [r7, #48]	; 0x30
        for ( q1=0 ; q1<p ; ++q1 ) {
 8026c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026c0e:	3301      	adds	r3, #1
 8026c10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8026c12:	e7e6      	b.n	8026be2 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x3e>
        }

        k=u;
 8026c14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8026c16:	633b      	str	r3, [r7, #48]	; 0x30
        for ( q1=0 ; q1<p ; ++q1 ) {
 8026c18:	2300      	movs	r3, #0
 8026c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8026c1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8026c1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8026c20:	429a      	cmp	r2, r3
 8026c22:	f280 808c 	bge.w	8026d3e <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x19a>
            int twidx=0;
 8026c26:	2300      	movs	r3, #0
 8026c28:	627b      	str	r3, [r7, #36]	; 0x24
            Fout[ k ] = scratch[0];
 8026c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026c2c:	00db      	lsls	r3, r3, #3
 8026c2e:	68fa      	ldr	r2, [r7, #12]
 8026c30:	4413      	add	r3, r2
 8026c32:	69ba      	ldr	r2, [r7, #24]
 8026c34:	e892 0003 	ldmia.w	r2, {r0, r1}
 8026c38:	e883 0003 	stmia.w	r3, {r0, r1}
            for (q=1;q<p;++q ) {
 8026c3c:	2301      	movs	r3, #1
 8026c3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8026c40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8026c42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8026c44:	429a      	cmp	r2, r3
 8026c46:	da72      	bge.n	8026d2e <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x18a>
                twidx += fstride * k;
 8026c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026c4a:	68ba      	ldr	r2, [r7, #8]
 8026c4c:	fb03 f202 	mul.w	r2, r3, r2
 8026c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026c52:	4413      	add	r3, r2
 8026c54:	627b      	str	r3, [r7, #36]	; 0x24
                if (twidx>=Norig) twidx-=Norig;
 8026c56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8026c58:	69fb      	ldr	r3, [r7, #28]
 8026c5a:	429a      	cmp	r2, r3
 8026c5c:	db03      	blt.n	8026c66 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0xc2>
 8026c5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8026c60:	69fb      	ldr	r3, [r7, #28]
 8026c62:	1ad3      	subs	r3, r2, r3
 8026c64:	627b      	str	r3, [r7, #36]	; 0x24
                C_MUL(t,scratch[q] , twiddles[twidx] );
 8026c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026c68:	00db      	lsls	r3, r3, #3
 8026c6a:	69ba      	ldr	r2, [r7, #24]
 8026c6c:	4413      	add	r3, r2
 8026c6e:	ed93 7a00 	vldr	s14, [r3]
 8026c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026c74:	00db      	lsls	r3, r3, #3
 8026c76:	6a3a      	ldr	r2, [r7, #32]
 8026c78:	4413      	add	r3, r2
 8026c7a:	edd3 7a00 	vldr	s15, [r3]
 8026c7e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8026c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026c84:	00db      	lsls	r3, r3, #3
 8026c86:	69ba      	ldr	r2, [r7, #24]
 8026c88:	4413      	add	r3, r2
 8026c8a:	edd3 6a01 	vldr	s13, [r3, #4]
 8026c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026c90:	00db      	lsls	r3, r3, #3
 8026c92:	6a3a      	ldr	r2, [r7, #32]
 8026c94:	4413      	add	r3, r2
 8026c96:	edd3 7a01 	vldr	s15, [r3, #4]
 8026c9a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8026c9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8026ca2:	edc7 7a04 	vstr	s15, [r7, #16]
 8026ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026ca8:	00db      	lsls	r3, r3, #3
 8026caa:	69ba      	ldr	r2, [r7, #24]
 8026cac:	4413      	add	r3, r2
 8026cae:	ed93 7a00 	vldr	s14, [r3]
 8026cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026cb4:	00db      	lsls	r3, r3, #3
 8026cb6:	6a3a      	ldr	r2, [r7, #32]
 8026cb8:	4413      	add	r3, r2
 8026cba:	edd3 7a01 	vldr	s15, [r3, #4]
 8026cbe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8026cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026cc4:	00db      	lsls	r3, r3, #3
 8026cc6:	69ba      	ldr	r2, [r7, #24]
 8026cc8:	4413      	add	r3, r2
 8026cca:	edd3 6a01 	vldr	s13, [r3, #4]
 8026cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026cd0:	00db      	lsls	r3, r3, #3
 8026cd2:	6a3a      	ldr	r2, [r7, #32]
 8026cd4:	4413      	add	r3, r2
 8026cd6:	edd3 7a00 	vldr	s15, [r3]
 8026cda:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8026cde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8026ce2:	edc7 7a05 	vstr	s15, [r7, #20]
                C_ADDTO( Fout[ k ] ,t);
 8026ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026ce8:	00db      	lsls	r3, r3, #3
 8026cea:	68fa      	ldr	r2, [r7, #12]
 8026cec:	4413      	add	r3, r2
 8026cee:	ed93 7a00 	vldr	s14, [r3]
 8026cf2:	edd7 7a04 	vldr	s15, [r7, #16]
 8026cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026cf8:	00db      	lsls	r3, r3, #3
 8026cfa:	68fa      	ldr	r2, [r7, #12]
 8026cfc:	4413      	add	r3, r2
 8026cfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8026d02:	edc3 7a00 	vstr	s15, [r3]
 8026d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026d08:	00db      	lsls	r3, r3, #3
 8026d0a:	68fa      	ldr	r2, [r7, #12]
 8026d0c:	4413      	add	r3, r2
 8026d0e:	ed93 7a01 	vldr	s14, [r3, #4]
 8026d12:	edd7 7a05 	vldr	s15, [r7, #20]
 8026d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026d18:	00db      	lsls	r3, r3, #3
 8026d1a:	68fa      	ldr	r2, [r7, #12]
 8026d1c:	4413      	add	r3, r2
 8026d1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8026d22:	edc3 7a01 	vstr	s15, [r3, #4]
            for (q=1;q<p;++q ) {
 8026d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026d28:	3301      	adds	r3, #1
 8026d2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8026d2c:	e788      	b.n	8026c40 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x9c>
            }
            k += m;
 8026d2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8026d30:	683b      	ldr	r3, [r7, #0]
 8026d32:	4413      	add	r3, r2
 8026d34:	633b      	str	r3, [r7, #48]	; 0x30
        for ( q1=0 ; q1<p ; ++q1 ) {
 8026d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026d38:	3301      	adds	r3, #1
 8026d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8026d3c:	e76e      	b.n	8026c1c <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x78>
    for ( u=0; u<m; ++u ) {
 8026d3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8026d40:	3301      	adds	r3, #1
 8026d42:	637b      	str	r3, [r7, #52]	; 0x34
 8026d44:	e744      	b.n	8026bd0 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x2c>
        }
    }
    KISS_FFT_TMP_FREE(scratch);
 8026d46:	69b8      	ldr	r0, [r7, #24]
 8026d48:	f000 fde4 	bl	8027914 <_Z7ei_freePv>
}
 8026d4c:	bf00      	nop
 8026d4e:	3738      	adds	r7, #56	; 0x38
 8026d50:	46bd      	mov	sp, r7
 8026d52:	bd80      	pop	{r7, pc}

08026d54 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>:
        const size_t fstride,
        int in_stride,
        int * factors,
        const kiss_fft_cfg st
        )
{
 8026d54:	b580      	push	{r7, lr}
 8026d56:	b08a      	sub	sp, #40	; 0x28
 8026d58:	af02      	add	r7, sp, #8
 8026d5a:	60f8      	str	r0, [r7, #12]
 8026d5c:	60b9      	str	r1, [r7, #8]
 8026d5e:	607a      	str	r2, [r7, #4]
 8026d60:	603b      	str	r3, [r7, #0]
    kiss_fft_cpx * Fout_beg=Fout;
 8026d62:	68fb      	ldr	r3, [r7, #12]
 8026d64:	61fb      	str	r3, [r7, #28]
    const int p=*factors++; /* the radix  */
 8026d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026d68:	1d1a      	adds	r2, r3, #4
 8026d6a:	62ba      	str	r2, [r7, #40]	; 0x28
 8026d6c:	681b      	ldr	r3, [r3, #0]
 8026d6e:	61bb      	str	r3, [r7, #24]
    const int m=*factors++; /* stage's fft length/p */
 8026d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026d72:	1d1a      	adds	r2, r3, #4
 8026d74:	62ba      	str	r2, [r7, #40]	; 0x28
 8026d76:	681b      	ldr	r3, [r3, #0]
 8026d78:	617b      	str	r3, [r7, #20]
    const kiss_fft_cpx * Fout_end = Fout + p*m;
 8026d7a:	69bb      	ldr	r3, [r7, #24]
 8026d7c:	697a      	ldr	r2, [r7, #20]
 8026d7e:	fb02 f303 	mul.w	r3, r2, r3
 8026d82:	00db      	lsls	r3, r3, #3
 8026d84:	68fa      	ldr	r2, [r7, #12]
 8026d86:	4413      	add	r3, r2
 8026d88:	613b      	str	r3, [r7, #16]
        }
        return;
    }
#endif

    if (m==1) {
 8026d8a:	697b      	ldr	r3, [r7, #20]
 8026d8c:	2b01      	cmp	r3, #1
 8026d8e:	d11a      	bne.n	8026dc6 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x72>
        do{
            *Fout = *f;
 8026d90:	68fb      	ldr	r3, [r7, #12]
 8026d92:	68ba      	ldr	r2, [r7, #8]
 8026d94:	e892 0003 	ldmia.w	r2, {r0, r1}
 8026d98:	e883 0003 	stmia.w	r3, {r0, r1}
            f += fstride*in_stride;
 8026d9c:	683b      	ldr	r3, [r7, #0]
 8026d9e:	687a      	ldr	r2, [r7, #4]
 8026da0:	fb02 f303 	mul.w	r3, r2, r3
 8026da4:	00db      	lsls	r3, r3, #3
 8026da6:	68ba      	ldr	r2, [r7, #8]
 8026da8:	4413      	add	r3, r2
 8026daa:	60bb      	str	r3, [r7, #8]
        }while(++Fout != Fout_end );
 8026dac:	68fb      	ldr	r3, [r7, #12]
 8026dae:	3308      	adds	r3, #8
 8026db0:	60fb      	str	r3, [r7, #12]
 8026db2:	68fa      	ldr	r2, [r7, #12]
 8026db4:	693b      	ldr	r3, [r7, #16]
 8026db6:	429a      	cmp	r2, r3
 8026db8:	bf14      	ite	ne
 8026dba:	2301      	movne	r3, #1
 8026dbc:	2300      	moveq	r3, #0
 8026dbe:	b2db      	uxtb	r3, r3
 8026dc0:	2b00      	cmp	r3, #0
 8026dc2:	d024      	beq.n	8026e0e <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0xba>
        do{
 8026dc4:	e7e4      	b.n	8026d90 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x3c>
        do{
            // recursive call:
            // DFT of size m*p performed by doing
            // p instances of smaller DFTs of size m,
            // each one takes a decimated version of the input
            kf_work( Fout , f, fstride*p, in_stride, factors,st);
 8026dc6:	69bb      	ldr	r3, [r7, #24]
 8026dc8:	687a      	ldr	r2, [r7, #4]
 8026dca:	fb03 f202 	mul.w	r2, r3, r2
 8026dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026dd0:	9301      	str	r3, [sp, #4]
 8026dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026dd4:	9300      	str	r3, [sp, #0]
 8026dd6:	683b      	ldr	r3, [r7, #0]
 8026dd8:	68b9      	ldr	r1, [r7, #8]
 8026dda:	68f8      	ldr	r0, [r7, #12]
 8026ddc:	f7ff ffba 	bl	8026d54 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>
            f += fstride*in_stride;
 8026de0:	683b      	ldr	r3, [r7, #0]
 8026de2:	687a      	ldr	r2, [r7, #4]
 8026de4:	fb02 f303 	mul.w	r3, r2, r3
 8026de8:	00db      	lsls	r3, r3, #3
 8026dea:	68ba      	ldr	r2, [r7, #8]
 8026dec:	4413      	add	r3, r2
 8026dee:	60bb      	str	r3, [r7, #8]
        }while( (Fout += m) != Fout_end );
 8026df0:	697b      	ldr	r3, [r7, #20]
 8026df2:	00db      	lsls	r3, r3, #3
 8026df4:	68fa      	ldr	r2, [r7, #12]
 8026df6:	4413      	add	r3, r2
 8026df8:	60fb      	str	r3, [r7, #12]
 8026dfa:	68fa      	ldr	r2, [r7, #12]
 8026dfc:	693b      	ldr	r3, [r7, #16]
 8026dfe:	429a      	cmp	r2, r3
 8026e00:	bf14      	ite	ne
 8026e02:	2301      	movne	r3, #1
 8026e04:	2300      	moveq	r3, #0
 8026e06:	b2db      	uxtb	r3, r3
 8026e08:	2b00      	cmp	r3, #0
 8026e0a:	d000      	beq.n	8026e0e <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0xba>
        do{
 8026e0c:	e7db      	b.n	8026dc6 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x72>
    }

    Fout=Fout_beg;
 8026e0e:	69fb      	ldr	r3, [r7, #28]
 8026e10:	60fb      	str	r3, [r7, #12]

    // recombine the p smaller DFTs
    switch (p) {
 8026e12:	69bb      	ldr	r3, [r7, #24]
 8026e14:	3b02      	subs	r3, #2
 8026e16:	2b03      	cmp	r3, #3
 8026e18:	d826      	bhi.n	8026e68 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x114>
 8026e1a:	a201      	add	r2, pc, #4	; (adr r2, 8026e20 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0xcc>)
 8026e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8026e20:	08026e31 	.word	0x08026e31
 8026e24:	08026e3f 	.word	0x08026e3f
 8026e28:	08026e4d 	.word	0x08026e4d
 8026e2c:	08026e5b 	.word	0x08026e5b
        case 2: kf_bfly2(Fout,fstride,st,m); break;
 8026e30:	697b      	ldr	r3, [r7, #20]
 8026e32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8026e34:	6879      	ldr	r1, [r7, #4]
 8026e36:	68f8      	ldr	r0, [r7, #12]
 8026e38:	f7ff f808 	bl	8025e4c <_ZL8kf_bfly2P12kiss_fft_cpxjP14kiss_fft_statei>
 8026e3c:	e01d      	b.n	8026e7a <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x126>
        case 3: kf_bfly3(Fout,fstride,st,m); break;
 8026e3e:	697b      	ldr	r3, [r7, #20]
 8026e40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8026e42:	6879      	ldr	r1, [r7, #4]
 8026e44:	68f8      	ldr	r0, [r7, #12]
 8026e46:	f7ff fa35 	bl	80262b4 <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej>
 8026e4a:	e016      	b.n	8026e7a <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x126>
        case 4: kf_bfly4(Fout,fstride,st,m); break;
 8026e4c:	697b      	ldr	r3, [r7, #20]
 8026e4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8026e50:	6879      	ldr	r1, [r7, #4]
 8026e52:	68f8      	ldr	r0, [r7, #12]
 8026e54:	f7ff f877 	bl	8025f46 <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej>
 8026e58:	e00f      	b.n	8026e7a <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x126>
        case 5: kf_bfly5(Fout,fstride,st,m); break;
 8026e5a:	697b      	ldr	r3, [r7, #20]
 8026e5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8026e5e:	6879      	ldr	r1, [r7, #4]
 8026e60:	68f8      	ldr	r0, [r7, #12]
 8026e62:	f7ff fb97 	bl	8026594 <_ZL8kf_bfly5P12kiss_fft_cpxjP14kiss_fft_statei>
 8026e66:	e008      	b.n	8026e7a <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x126>
        default: kf_bfly_generic(Fout,fstride,st,m,p); break;
 8026e68:	69bb      	ldr	r3, [r7, #24]
 8026e6a:	9300      	str	r3, [sp, #0]
 8026e6c:	697b      	ldr	r3, [r7, #20]
 8026e6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8026e70:	6879      	ldr	r1, [r7, #4]
 8026e72:	68f8      	ldr	r0, [r7, #12]
 8026e74:	f7ff fe96 	bl	8026ba4 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii>
 8026e78:	bf00      	nop
    }
}
 8026e7a:	bf00      	nop
 8026e7c:	3720      	adds	r7, #32
 8026e7e:	46bd      	mov	sp, r7
 8026e80:	bd80      	pop	{r7, pc}
 8026e82:	bf00      	nop

08026e84 <_ZL9kf_factoriPi>:
    where
    p[i] * m[i] = m[i-1]
    m0 = n                  */
static
void kf_factor(int n,int * facbuf)
{
 8026e84:	b580      	push	{r7, lr}
 8026e86:	b086      	sub	sp, #24
 8026e88:	af00      	add	r7, sp, #0
 8026e8a:	6078      	str	r0, [r7, #4]
 8026e8c:	6039      	str	r1, [r7, #0]
    int p=4;
 8026e8e:	2304      	movs	r3, #4
 8026e90:	617b      	str	r3, [r7, #20]
    double floor_sqrt;
    floor_sqrt = floor( sqrt((double)n) );
 8026e92:	6878      	ldr	r0, [r7, #4]
 8026e94:	f7d9 fb50 	bl	8000538 <__aeabi_i2d>
 8026e98:	4602      	mov	r2, r0
 8026e9a:	460b      	mov	r3, r1
 8026e9c:	ec43 2b10 	vmov	d0, r2, r3
 8026ea0:	f009 f850 	bl	802ff44 <sqrt>
 8026ea4:	eeb0 7a40 	vmov.f32	s14, s0
 8026ea8:	eef0 7a60 	vmov.f32	s15, s1
 8026eac:	eeb0 0a47 	vmov.f32	s0, s14
 8026eb0:	eef0 0a67 	vmov.f32	s1, s15
 8026eb4:	f008 fdac 	bl	802fa10 <floor>
 8026eb8:	ed87 0b02 	vstr	d0, [r7, #8]

    /*factor out powers of 4, powers of 2, then any remaining primes */
    do {
        while (n % p) {
 8026ebc:	687b      	ldr	r3, [r7, #4]
 8026ebe:	697a      	ldr	r2, [r7, #20]
 8026ec0:	fb93 f2f2 	sdiv	r2, r3, r2
 8026ec4:	6979      	ldr	r1, [r7, #20]
 8026ec6:	fb01 f202 	mul.w	r2, r1, r2
 8026eca:	1a9b      	subs	r3, r3, r2
 8026ecc:	2b00      	cmp	r3, #0
 8026ece:	d01e      	beq.n	8026f0e <_ZL9kf_factoriPi+0x8a>
            switch (p) {
 8026ed0:	697b      	ldr	r3, [r7, #20]
 8026ed2:	2b02      	cmp	r3, #2
 8026ed4:	d005      	beq.n	8026ee2 <_ZL9kf_factoriPi+0x5e>
 8026ed6:	697b      	ldr	r3, [r7, #20]
 8026ed8:	2b04      	cmp	r3, #4
 8026eda:	d105      	bne.n	8026ee8 <_ZL9kf_factoriPi+0x64>
                case 4: p = 2; break;
 8026edc:	2302      	movs	r3, #2
 8026ede:	617b      	str	r3, [r7, #20]
 8026ee0:	e006      	b.n	8026ef0 <_ZL9kf_factoriPi+0x6c>
                case 2: p = 3; break;
 8026ee2:	2303      	movs	r3, #3
 8026ee4:	617b      	str	r3, [r7, #20]
 8026ee6:	e003      	b.n	8026ef0 <_ZL9kf_factoriPi+0x6c>
                default: p += 2; break;
 8026ee8:	697b      	ldr	r3, [r7, #20]
 8026eea:	3302      	adds	r3, #2
 8026eec:	617b      	str	r3, [r7, #20]
 8026eee:	bf00      	nop
            }
            if (p > floor_sqrt)
 8026ef0:	6978      	ldr	r0, [r7, #20]
 8026ef2:	f7d9 fb21 	bl	8000538 <__aeabi_i2d>
 8026ef6:	4602      	mov	r2, r0
 8026ef8:	460b      	mov	r3, r1
 8026efa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8026efe:	f7d9 fdf7 	bl	8000af0 <__aeabi_dcmplt>
 8026f02:	4603      	mov	r3, r0
 8026f04:	2b00      	cmp	r3, #0
 8026f06:	d001      	beq.n	8026f0c <_ZL9kf_factoriPi+0x88>
                p = n;          /* no more factors, skip to end */
 8026f08:	687b      	ldr	r3, [r7, #4]
 8026f0a:	617b      	str	r3, [r7, #20]
        while (n % p) {
 8026f0c:	e7d6      	b.n	8026ebc <_ZL9kf_factoriPi+0x38>
        }
        n /= p;
 8026f0e:	687a      	ldr	r2, [r7, #4]
 8026f10:	697b      	ldr	r3, [r7, #20]
 8026f12:	fb92 f3f3 	sdiv	r3, r2, r3
 8026f16:	607b      	str	r3, [r7, #4]
        *facbuf++ = p;
 8026f18:	683b      	ldr	r3, [r7, #0]
 8026f1a:	1d1a      	adds	r2, r3, #4
 8026f1c:	603a      	str	r2, [r7, #0]
 8026f1e:	697a      	ldr	r2, [r7, #20]
 8026f20:	601a      	str	r2, [r3, #0]
        *facbuf++ = n;
 8026f22:	683b      	ldr	r3, [r7, #0]
 8026f24:	1d1a      	adds	r2, r3, #4
 8026f26:	603a      	str	r2, [r7, #0]
 8026f28:	687a      	ldr	r2, [r7, #4]
 8026f2a:	601a      	str	r2, [r3, #0]
    } while (n > 1);
 8026f2c:	687b      	ldr	r3, [r7, #4]
 8026f2e:	2b01      	cmp	r3, #1
 8026f30:	dd00      	ble.n	8026f34 <_ZL9kf_factoriPi+0xb0>
    do {
 8026f32:	e7c3      	b.n	8026ebc <_ZL9kf_factoriPi+0x38>
}
 8026f34:	bf00      	nop
 8026f36:	3718      	adds	r7, #24
 8026f38:	46bd      	mov	sp, r7
 8026f3a:	bd80      	pop	{r7, pc}
 8026f3c:	0000      	movs	r0, r0
	...

08026f40 <kiss_fft_alloc>:
 *
 * The return value is a contiguous block of memory, allocated with malloc.  As such,
 * It can be freed with free(), rather than a kiss_fft-specific function.
 * */
kiss_fft_cfg kiss_fft_alloc(int nfft,int inverse_fft,void * mem,size_t * lenmem,size_t * memallocated )
{
 8026f40:	b5b0      	push	{r4, r5, r7, lr}
 8026f42:	b090      	sub	sp, #64	; 0x40
 8026f44:	af00      	add	r7, sp, #0
 8026f46:	60f8      	str	r0, [r7, #12]
 8026f48:	60b9      	str	r1, [r7, #8]
 8026f4a:	607a      	str	r2, [r7, #4]
 8026f4c:	603b      	str	r3, [r7, #0]
    kiss_fft_cfg st=NULL;
 8026f4e:	2300      	movs	r3, #0
 8026f50:	63fb      	str	r3, [r7, #60]	; 0x3c
    size_t memneeded = sizeof(struct kiss_fft_state)
        + sizeof(kiss_fft_cpx)*(nfft-1); /* twiddle factors*/
 8026f52:	68fb      	ldr	r3, [r7, #12]
 8026f54:	3321      	adds	r3, #33	; 0x21
    size_t memneeded = sizeof(struct kiss_fft_state)
 8026f56:	00db      	lsls	r3, r3, #3
 8026f58:	637b      	str	r3, [r7, #52]	; 0x34

    if ( lenmem==NULL ) {
 8026f5a:	683b      	ldr	r3, [r7, #0]
 8026f5c:	2b00      	cmp	r3, #0
 8026f5e:	d104      	bne.n	8026f6a <kiss_fft_alloc+0x2a>
        st = ( kiss_fft_cfg)KISS_FFT_MALLOC( memneeded );
 8026f60:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8026f62:	f000 fcbd 	bl	80278e0 <_Z9ei_mallocj>
 8026f66:	63f8      	str	r0, [r7, #60]	; 0x3c
 8026f68:	e00c      	b.n	8026f84 <kiss_fft_alloc+0x44>
    }else{
        if (mem != NULL && *lenmem >= memneeded)
 8026f6a:	687b      	ldr	r3, [r7, #4]
 8026f6c:	2b00      	cmp	r3, #0
 8026f6e:	d006      	beq.n	8026f7e <kiss_fft_alloc+0x3e>
 8026f70:	683b      	ldr	r3, [r7, #0]
 8026f72:	681b      	ldr	r3, [r3, #0]
 8026f74:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8026f76:	429a      	cmp	r2, r3
 8026f78:	d801      	bhi.n	8026f7e <kiss_fft_alloc+0x3e>
            st = (kiss_fft_cfg)mem;
 8026f7a:	687b      	ldr	r3, [r7, #4]
 8026f7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        *lenmem = memneeded;
 8026f7e:	683b      	ldr	r3, [r7, #0]
 8026f80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8026f82:	601a      	str	r2, [r3, #0]
    }
    if (st) {
 8026f84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8026f86:	2b00      	cmp	r3, #0
 8026f88:	f000 80a0 	beq.w	80270cc <kiss_fft_alloc+0x18c>
        int i;
        st->nfft=nfft;
 8026f8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8026f8e:	68fa      	ldr	r2, [r7, #12]
 8026f90:	601a      	str	r2, [r3, #0]
        st->inverse = inverse_fft;
 8026f92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8026f94:	68ba      	ldr	r2, [r7, #8]
 8026f96:	605a      	str	r2, [r3, #4]
        if (inverse_fft)
 8026f98:	68bb      	ldr	r3, [r7, #8]
 8026f9a:	2b00      	cmp	r3, #0
 8026f9c:	d048      	beq.n	8027030 <kiss_fft_alloc+0xf0>
        {
            for (i=0;i<nfft;++i) {
 8026f9e:	2300      	movs	r3, #0
 8026fa0:	63bb      	str	r3, [r7, #56]	; 0x38
 8026fa2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8026fa4:	68fb      	ldr	r3, [r7, #12]
 8026fa6:	429a      	cmp	r2, r3
 8026fa8:	f280 808a 	bge.w	80270c0 <kiss_fft_alloc+0x180>
                const double pi=3.141592653589793238462643383279502884197169399375105820974944;
 8026fac:	a34e      	add	r3, pc, #312	; (adr r3, 80270e8 <kiss_fft_alloc+0x1a8>)
 8026fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026fb2:	e9c7 2306 	strd	r2, r3, [r7, #24]
                double phase = 2*pi*i / nfft;
 8026fb6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8026fb8:	f7d9 fabe 	bl	8000538 <__aeabi_i2d>
 8026fbc:	a34c      	add	r3, pc, #304	; (adr r3, 80270f0 <kiss_fft_alloc+0x1b0>)
 8026fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026fc2:	f7d9 fb23 	bl	800060c <__aeabi_dmul>
 8026fc6:	4602      	mov	r2, r0
 8026fc8:	460b      	mov	r3, r1
 8026fca:	4614      	mov	r4, r2
 8026fcc:	461d      	mov	r5, r3
 8026fce:	68f8      	ldr	r0, [r7, #12]
 8026fd0:	f7d9 fab2 	bl	8000538 <__aeabi_i2d>
 8026fd4:	4602      	mov	r2, r0
 8026fd6:	460b      	mov	r3, r1
 8026fd8:	4620      	mov	r0, r4
 8026fda:	4629      	mov	r1, r5
 8026fdc:	f7d9 fc40 	bl	8000860 <__aeabi_ddiv>
 8026fe0:	4602      	mov	r2, r0
 8026fe2:	460b      	mov	r3, r1
 8026fe4:	e9c7 2304 	strd	r2, r3, [r7, #16]
                kf_cexp(st->twiddles+i, phase );
 8026fe8:	ed97 0b04 	vldr	d0, [r7, #16]
 8026fec:	f008 fcbc 	bl	802f968 <cos>
 8026ff0:	ec51 0b10 	vmov	r0, r1, d0
 8026ff4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8026ff6:	f503 7284 	add.w	r2, r3, #264	; 0x108
 8026ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8026ffc:	00db      	lsls	r3, r3, #3
 8026ffe:	18d4      	adds	r4, r2, r3
 8027000:	f7d9 fdfc 	bl	8000bfc <__aeabi_d2f>
 8027004:	4603      	mov	r3, r0
 8027006:	6023      	str	r3, [r4, #0]
 8027008:	ed97 0b04 	vldr	d0, [r7, #16]
 802700c:	f008 fe00 	bl	802fc10 <sin>
 8027010:	ec51 0b10 	vmov	r0, r1, d0
 8027014:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8027016:	f503 7284 	add.w	r2, r3, #264	; 0x108
 802701a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802701c:	00db      	lsls	r3, r3, #3
 802701e:	18d4      	adds	r4, r2, r3
 8027020:	f7d9 fdec 	bl	8000bfc <__aeabi_d2f>
 8027024:	4603      	mov	r3, r0
 8027026:	6063      	str	r3, [r4, #4]
            for (i=0;i<nfft;++i) {
 8027028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802702a:	3301      	adds	r3, #1
 802702c:	63bb      	str	r3, [r7, #56]	; 0x38
 802702e:	e7b8      	b.n	8026fa2 <kiss_fft_alloc+0x62>
            }
        } else {
            for (i=0;i<nfft;++i) {
 8027030:	2300      	movs	r3, #0
 8027032:	63bb      	str	r3, [r7, #56]	; 0x38
 8027034:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8027036:	68fb      	ldr	r3, [r7, #12]
 8027038:	429a      	cmp	r2, r3
 802703a:	da41      	bge.n	80270c0 <kiss_fft_alloc+0x180>
                const double pi=3.141592653589793238462643383279502884197169399375105820974944;
 802703c:	a32a      	add	r3, pc, #168	; (adr r3, 80270e8 <kiss_fft_alloc+0x1a8>)
 802703e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027042:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
                double phase = -2*pi*i / nfft;
 8027046:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8027048:	f7d9 fa76 	bl	8000538 <__aeabi_i2d>
 802704c:	a32a      	add	r3, pc, #168	; (adr r3, 80270f8 <kiss_fft_alloc+0x1b8>)
 802704e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027052:	f7d9 fadb 	bl	800060c <__aeabi_dmul>
 8027056:	4602      	mov	r2, r0
 8027058:	460b      	mov	r3, r1
 802705a:	4614      	mov	r4, r2
 802705c:	461d      	mov	r5, r3
 802705e:	68f8      	ldr	r0, [r7, #12]
 8027060:	f7d9 fa6a 	bl	8000538 <__aeabi_i2d>
 8027064:	4602      	mov	r2, r0
 8027066:	460b      	mov	r3, r1
 8027068:	4620      	mov	r0, r4
 802706a:	4629      	mov	r1, r5
 802706c:	f7d9 fbf8 	bl	8000860 <__aeabi_ddiv>
 8027070:	4602      	mov	r2, r0
 8027072:	460b      	mov	r3, r1
 8027074:	e9c7 2308 	strd	r2, r3, [r7, #32]
                kf_cexp(st->twiddles+i, phase );
 8027078:	ed97 0b08 	vldr	d0, [r7, #32]
 802707c:	f008 fc74 	bl	802f968 <cos>
 8027080:	ec51 0b10 	vmov	r0, r1, d0
 8027084:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8027086:	f503 7284 	add.w	r2, r3, #264	; 0x108
 802708a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802708c:	00db      	lsls	r3, r3, #3
 802708e:	18d4      	adds	r4, r2, r3
 8027090:	f7d9 fdb4 	bl	8000bfc <__aeabi_d2f>
 8027094:	4603      	mov	r3, r0
 8027096:	6023      	str	r3, [r4, #0]
 8027098:	ed97 0b08 	vldr	d0, [r7, #32]
 802709c:	f008 fdb8 	bl	802fc10 <sin>
 80270a0:	ec51 0b10 	vmov	r0, r1, d0
 80270a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80270a6:	f503 7284 	add.w	r2, r3, #264	; 0x108
 80270aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80270ac:	00db      	lsls	r3, r3, #3
 80270ae:	18d4      	adds	r4, r2, r3
 80270b0:	f7d9 fda4 	bl	8000bfc <__aeabi_d2f>
 80270b4:	4603      	mov	r3, r0
 80270b6:	6063      	str	r3, [r4, #4]
            for (i=0;i<nfft;++i) {
 80270b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80270ba:	3301      	adds	r3, #1
 80270bc:	63bb      	str	r3, [r7, #56]	; 0x38
 80270be:	e7b9      	b.n	8027034 <kiss_fft_alloc+0xf4>
            }
        }

        kf_factor(nfft,st->factors);
 80270c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80270c2:	3308      	adds	r3, #8
 80270c4:	4619      	mov	r1, r3
 80270c6:	68f8      	ldr	r0, [r7, #12]
 80270c8:	f7ff fedc 	bl	8026e84 <_ZL9kf_factoriPi>
    }

    if (memallocated != NULL) {
 80270cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80270ce:	2b00      	cmp	r3, #0
 80270d0:	d002      	beq.n	80270d8 <kiss_fft_alloc+0x198>
        *memallocated = memneeded;
 80270d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80270d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80270d6:	601a      	str	r2, [r3, #0]
    }

    return st;
 80270d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80270da:	4618      	mov	r0, r3
 80270dc:	3740      	adds	r7, #64	; 0x40
 80270de:	46bd      	mov	sp, r7
 80270e0:	bdb0      	pop	{r4, r5, r7, pc}
 80270e2:	bf00      	nop
 80270e4:	f3af 8000 	nop.w
 80270e8:	54442d18 	.word	0x54442d18
 80270ec:	400921fb 	.word	0x400921fb
 80270f0:	54442d18 	.word	0x54442d18
 80270f4:	401921fb 	.word	0x401921fb
 80270f8:	54442d18 	.word	0x54442d18
 80270fc:	c01921fb 	.word	0xc01921fb

08027100 <kiss_fft_stride>:


void kiss_fft_stride(kiss_fft_cfg st,const kiss_fft_cpx *fin,kiss_fft_cpx *fout,int in_stride)
{
 8027100:	b580      	push	{r7, lr}
 8027102:	b088      	sub	sp, #32
 8027104:	af02      	add	r7, sp, #8
 8027106:	60f8      	str	r0, [r7, #12]
 8027108:	60b9      	str	r1, [r7, #8]
 802710a:	607a      	str	r2, [r7, #4]
 802710c:	603b      	str	r3, [r7, #0]
    if (fin == fout) {
 802710e:	68ba      	ldr	r2, [r7, #8]
 8027110:	687b      	ldr	r3, [r7, #4]
 8027112:	429a      	cmp	r2, r3
 8027114:	d11d      	bne.n	8027152 <kiss_fft_stride+0x52>
        //NOTE: this is not really an in-place FFT algorithm.
        //It just performs an out-of-place FFT into a temp buffer
        kiss_fft_cpx * tmpbuf = (kiss_fft_cpx*)KISS_FFT_TMP_ALLOC( sizeof(kiss_fft_cpx)*st->nfft);
 8027116:	68fb      	ldr	r3, [r7, #12]
 8027118:	681b      	ldr	r3, [r3, #0]
 802711a:	00db      	lsls	r3, r3, #3
 802711c:	4618      	mov	r0, r3
 802711e:	f000 fbdf 	bl	80278e0 <_Z9ei_mallocj>
 8027122:	6178      	str	r0, [r7, #20]
        kf_work(tmpbuf,fin,1,in_stride, st->factors,st);
 8027124:	68fb      	ldr	r3, [r7, #12]
 8027126:	3308      	adds	r3, #8
 8027128:	68fa      	ldr	r2, [r7, #12]
 802712a:	9201      	str	r2, [sp, #4]
 802712c:	9300      	str	r3, [sp, #0]
 802712e:	683b      	ldr	r3, [r7, #0]
 8027130:	2201      	movs	r2, #1
 8027132:	68b9      	ldr	r1, [r7, #8]
 8027134:	6978      	ldr	r0, [r7, #20]
 8027136:	f7ff fe0d 	bl	8026d54 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>
        memcpy(fout,tmpbuf,sizeof(kiss_fft_cpx)*st->nfft);
 802713a:	68fb      	ldr	r3, [r7, #12]
 802713c:	681b      	ldr	r3, [r3, #0]
 802713e:	00db      	lsls	r3, r3, #3
 8027140:	461a      	mov	r2, r3
 8027142:	6979      	ldr	r1, [r7, #20]
 8027144:	6878      	ldr	r0, [r7, #4]
 8027146:	f00b f807 	bl	8032158 <memcpy>
        KISS_FFT_TMP_FREE(tmpbuf);
 802714a:	6978      	ldr	r0, [r7, #20]
 802714c:	f000 fbe2 	bl	8027914 <_Z7ei_freePv>
    }else{
        kf_work( fout, fin, 1,in_stride, st->factors,st );
    }
}
 8027150:	e00a      	b.n	8027168 <kiss_fft_stride+0x68>
        kf_work( fout, fin, 1,in_stride, st->factors,st );
 8027152:	68fb      	ldr	r3, [r7, #12]
 8027154:	3308      	adds	r3, #8
 8027156:	68fa      	ldr	r2, [r7, #12]
 8027158:	9201      	str	r2, [sp, #4]
 802715a:	9300      	str	r3, [sp, #0]
 802715c:	683b      	ldr	r3, [r7, #0]
 802715e:	2201      	movs	r2, #1
 8027160:	68b9      	ldr	r1, [r7, #8]
 8027162:	6878      	ldr	r0, [r7, #4]
 8027164:	f7ff fdf6 	bl	8026d54 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>
}
 8027168:	bf00      	nop
 802716a:	3718      	adds	r7, #24
 802716c:	46bd      	mov	sp, r7
 802716e:	bd80      	pop	{r7, pc}

08027170 <kiss_fft>:

void kiss_fft(kiss_fft_cfg cfg,const kiss_fft_cpx *fin,kiss_fft_cpx *fout)
{
 8027170:	b580      	push	{r7, lr}
 8027172:	b084      	sub	sp, #16
 8027174:	af00      	add	r7, sp, #0
 8027176:	60f8      	str	r0, [r7, #12]
 8027178:	60b9      	str	r1, [r7, #8]
 802717a:	607a      	str	r2, [r7, #4]
    kiss_fft_stride(cfg,fin,fout,1);
 802717c:	2301      	movs	r3, #1
 802717e:	687a      	ldr	r2, [r7, #4]
 8027180:	68b9      	ldr	r1, [r7, #8]
 8027182:	68f8      	ldr	r0, [r7, #12]
 8027184:	f7ff ffbc 	bl	8027100 <kiss_fft_stride>
}
 8027188:	bf00      	nop
 802718a:	3710      	adds	r7, #16
 802718c:	46bd      	mov	sp, r7
 802718e:	bd80      	pop	{r7, pc}

08027190 <kiss_fftr_alloc>:
    void * pad;
#endif
};

kiss_fftr_cfg kiss_fftr_alloc(int nfft,int inverse_fft,void * mem,size_t * lenmem,size_t * memallocated)
{
 8027190:	b5b0      	push	{r4, r5, r7, lr}
 8027192:	b090      	sub	sp, #64	; 0x40
 8027194:	af02      	add	r7, sp, #8
 8027196:	60f8      	str	r0, [r7, #12]
 8027198:	60b9      	str	r1, [r7, #8]
 802719a:	607a      	str	r2, [r7, #4]
 802719c:	603b      	str	r3, [r7, #0]
    int i;
    kiss_fftr_cfg st = NULL;
 802719e:	2300      	movs	r3, #0
 80271a0:	633b      	str	r3, [r7, #48]	; 0x30
    size_t subsize = 0, memneeded;
 80271a2:	2300      	movs	r3, #0
 80271a4:	617b      	str	r3, [r7, #20]

    if (nfft & 1) {
 80271a6:	68fb      	ldr	r3, [r7, #12]
 80271a8:	f003 0301 	and.w	r3, r3, #1
 80271ac:	2b00      	cmp	r3, #0
 80271ae:	d004      	beq.n	80271ba <kiss_fftr_alloc+0x2a>
        ei_printf("FFT length must be even\n");
 80271b0:	4885      	ldr	r0, [pc, #532]	; (80273c8 <kiss_fftr_alloc+0x238>)
 80271b2:	f7de fb7b 	bl	80058ac <_Z9ei_printfPKcz>
        return NULL;
 80271b6:	2300      	movs	r3, #0
 80271b8:	e0f9      	b.n	80273ae <kiss_fftr_alloc+0x21e>
    }
    nfft >>= 1;
 80271ba:	68fb      	ldr	r3, [r7, #12]
 80271bc:	105b      	asrs	r3, r3, #1
 80271be:	60fb      	str	r3, [r7, #12]

    kiss_fft_alloc (nfft, inverse_fft, NULL, &subsize);
 80271c0:	f107 0314 	add.w	r3, r7, #20
 80271c4:	2200      	movs	r2, #0
 80271c6:	9200      	str	r2, [sp, #0]
 80271c8:	2200      	movs	r2, #0
 80271ca:	68b9      	ldr	r1, [r7, #8]
 80271cc:	68f8      	ldr	r0, [r7, #12]
 80271ce:	f7ff feb7 	bl	8026f40 <kiss_fft_alloc>
    memneeded = sizeof(struct kiss_fftr_state) + subsize + sizeof(kiss_fft_cpx) * ( nfft * 3 / 2);
 80271d2:	68fa      	ldr	r2, [r7, #12]
 80271d4:	4613      	mov	r3, r2
 80271d6:	005b      	lsls	r3, r3, #1
 80271d8:	4413      	add	r3, r2
 80271da:	0fda      	lsrs	r2, r3, #31
 80271dc:	4413      	add	r3, r2
 80271de:	105b      	asrs	r3, r3, #1
 80271e0:	00da      	lsls	r2, r3, #3
 80271e2:	697b      	ldr	r3, [r7, #20]
 80271e4:	4413      	add	r3, r2
 80271e6:	330c      	adds	r3, #12
 80271e8:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (lenmem == NULL) {
 80271ea:	683b      	ldr	r3, [r7, #0]
 80271ec:	2b00      	cmp	r3, #0
 80271ee:	d104      	bne.n	80271fa <kiss_fftr_alloc+0x6a>
        st = (kiss_fftr_cfg) KISS_FFT_MALLOC (memneeded);
 80271f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80271f2:	f000 fb75 	bl	80278e0 <_Z9ei_mallocj>
 80271f6:	6338      	str	r0, [r7, #48]	; 0x30
 80271f8:	e009      	b.n	802720e <kiss_fftr_alloc+0x7e>
    } else {
        if (*lenmem >= memneeded)
 80271fa:	683b      	ldr	r3, [r7, #0]
 80271fc:	681b      	ldr	r3, [r3, #0]
 80271fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8027200:	429a      	cmp	r2, r3
 8027202:	d801      	bhi.n	8027208 <kiss_fftr_alloc+0x78>
            st = (kiss_fftr_cfg) mem;
 8027204:	687b      	ldr	r3, [r7, #4]
 8027206:	633b      	str	r3, [r7, #48]	; 0x30
        *lenmem = memneeded;
 8027208:	683b      	ldr	r3, [r7, #0]
 802720a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802720c:	601a      	str	r2, [r3, #0]
    }
    if (!st)
 802720e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8027210:	2b00      	cmp	r3, #0
 8027212:	d101      	bne.n	8027218 <kiss_fftr_alloc+0x88>
        return NULL;
 8027214:	2300      	movs	r3, #0
 8027216:	e0ca      	b.n	80273ae <kiss_fftr_alloc+0x21e>

    st->substate = (kiss_fft_cfg) (st + 1); /*just beyond kiss_fftr_state struct */
 8027218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802721a:	f103 020c 	add.w	r2, r3, #12
 802721e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8027220:	601a      	str	r2, [r3, #0]
    st->tmpbuf = (kiss_fft_cpx *) (((char *) st->substate) + subsize);
 8027222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8027224:	681a      	ldr	r2, [r3, #0]
 8027226:	697b      	ldr	r3, [r7, #20]
 8027228:	441a      	add	r2, r3
 802722a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802722c:	605a      	str	r2, [r3, #4]
    st->super_twiddles = st->tmpbuf + nfft;
 802722e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8027230:	685a      	ldr	r2, [r3, #4]
 8027232:	68fb      	ldr	r3, [r7, #12]
 8027234:	00db      	lsls	r3, r3, #3
 8027236:	441a      	add	r2, r3
 8027238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802723a:	609a      	str	r2, [r3, #8]
    kiss_fft_alloc(nfft, inverse_fft, st->substate, &subsize);
 802723c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802723e:	681a      	ldr	r2, [r3, #0]
 8027240:	f107 0314 	add.w	r3, r7, #20
 8027244:	2100      	movs	r1, #0
 8027246:	9100      	str	r1, [sp, #0]
 8027248:	68b9      	ldr	r1, [r7, #8]
 802724a:	68f8      	ldr	r0, [r7, #12]
 802724c:	f7ff fe78 	bl	8026f40 <kiss_fft_alloc>

    if (inverse_fft) {
 8027250:	68bb      	ldr	r3, [r7, #8]
 8027252:	2b00      	cmp	r3, #0
 8027254:	d052      	beq.n	80272fc <kiss_fftr_alloc+0x16c>
        for (i = 0; i < nfft/2; ++i) {
 8027256:	2300      	movs	r3, #0
 8027258:	637b      	str	r3, [r7, #52]	; 0x34
 802725a:	68fb      	ldr	r3, [r7, #12]
 802725c:	0fda      	lsrs	r2, r3, #31
 802725e:	4413      	add	r3, r2
 8027260:	105b      	asrs	r3, r3, #1
 8027262:	461a      	mov	r2, r3
 8027264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8027266:	4293      	cmp	r3, r2
 8027268:	f280 809a 	bge.w	80273a0 <kiss_fftr_alloc+0x210>
            double phase =
                3.14159265358979323846264338327 * ((double) (i+1) / nfft + .5);
 802726c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802726e:	3301      	adds	r3, #1
 8027270:	4618      	mov	r0, r3
 8027272:	f7d9 f961 	bl	8000538 <__aeabi_i2d>
 8027276:	4604      	mov	r4, r0
 8027278:	460d      	mov	r5, r1
 802727a:	68f8      	ldr	r0, [r7, #12]
 802727c:	f7d9 f95c 	bl	8000538 <__aeabi_i2d>
 8027280:	4602      	mov	r2, r0
 8027282:	460b      	mov	r3, r1
 8027284:	4620      	mov	r0, r4
 8027286:	4629      	mov	r1, r5
 8027288:	f7d9 faea 	bl	8000860 <__aeabi_ddiv>
 802728c:	4602      	mov	r2, r0
 802728e:	460b      	mov	r3, r1
 8027290:	4610      	mov	r0, r2
 8027292:	4619      	mov	r1, r3
 8027294:	f04f 0200 	mov.w	r2, #0
 8027298:	4b4c      	ldr	r3, [pc, #304]	; (80273cc <kiss_fftr_alloc+0x23c>)
 802729a:	f7d9 f801 	bl	80002a0 <__adddf3>
 802729e:	4602      	mov	r2, r0
 80272a0:	460b      	mov	r3, r1
 80272a2:	4610      	mov	r0, r2
 80272a4:	4619      	mov	r1, r3
            double phase =
 80272a6:	a344      	add	r3, pc, #272	; (adr r3, 80273b8 <kiss_fftr_alloc+0x228>)
 80272a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80272ac:	f7d9 f9ae 	bl	800060c <__aeabi_dmul>
 80272b0:	4602      	mov	r2, r0
 80272b2:	460b      	mov	r3, r1
 80272b4:	e9c7 2306 	strd	r2, r3, [r7, #24]
            kf_cexp (st->super_twiddles+i,phase);
 80272b8:	ed97 0b06 	vldr	d0, [r7, #24]
 80272bc:	f008 fb54 	bl	802f968 <cos>
 80272c0:	ec51 0b10 	vmov	r0, r1, d0
 80272c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80272c6:	689a      	ldr	r2, [r3, #8]
 80272c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80272ca:	00db      	lsls	r3, r3, #3
 80272cc:	18d4      	adds	r4, r2, r3
 80272ce:	f7d9 fc95 	bl	8000bfc <__aeabi_d2f>
 80272d2:	4603      	mov	r3, r0
 80272d4:	6023      	str	r3, [r4, #0]
 80272d6:	ed97 0b06 	vldr	d0, [r7, #24]
 80272da:	f008 fc99 	bl	802fc10 <sin>
 80272de:	ec51 0b10 	vmov	r0, r1, d0
 80272e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80272e4:	689a      	ldr	r2, [r3, #8]
 80272e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80272e8:	00db      	lsls	r3, r3, #3
 80272ea:	18d4      	adds	r4, r2, r3
 80272ec:	f7d9 fc86 	bl	8000bfc <__aeabi_d2f>
 80272f0:	4603      	mov	r3, r0
 80272f2:	6063      	str	r3, [r4, #4]
        for (i = 0; i < nfft/2; ++i) {
 80272f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80272f6:	3301      	adds	r3, #1
 80272f8:	637b      	str	r3, [r7, #52]	; 0x34
 80272fa:	e7ae      	b.n	802725a <kiss_fftr_alloc+0xca>
        }
    } else  {
        for (i = 0; i < nfft/2; ++i) {
 80272fc:	2300      	movs	r3, #0
 80272fe:	637b      	str	r3, [r7, #52]	; 0x34
 8027300:	68fb      	ldr	r3, [r7, #12]
 8027302:	0fda      	lsrs	r2, r3, #31
 8027304:	4413      	add	r3, r2
 8027306:	105b      	asrs	r3, r3, #1
 8027308:	461a      	mov	r2, r3
 802730a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802730c:	4293      	cmp	r3, r2
 802730e:	da47      	bge.n	80273a0 <kiss_fftr_alloc+0x210>
            double phase =
                -3.14159265358979323846264338327 * ((double) (i+1) / nfft + .5);
 8027310:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8027312:	3301      	adds	r3, #1
 8027314:	4618      	mov	r0, r3
 8027316:	f7d9 f90f 	bl	8000538 <__aeabi_i2d>
 802731a:	4604      	mov	r4, r0
 802731c:	460d      	mov	r5, r1
 802731e:	68f8      	ldr	r0, [r7, #12]
 8027320:	f7d9 f90a 	bl	8000538 <__aeabi_i2d>
 8027324:	4602      	mov	r2, r0
 8027326:	460b      	mov	r3, r1
 8027328:	4620      	mov	r0, r4
 802732a:	4629      	mov	r1, r5
 802732c:	f7d9 fa98 	bl	8000860 <__aeabi_ddiv>
 8027330:	4602      	mov	r2, r0
 8027332:	460b      	mov	r3, r1
 8027334:	4610      	mov	r0, r2
 8027336:	4619      	mov	r1, r3
 8027338:	f04f 0200 	mov.w	r2, #0
 802733c:	4b23      	ldr	r3, [pc, #140]	; (80273cc <kiss_fftr_alloc+0x23c>)
 802733e:	f7d8 ffaf 	bl	80002a0 <__adddf3>
 8027342:	4602      	mov	r2, r0
 8027344:	460b      	mov	r3, r1
 8027346:	4610      	mov	r0, r2
 8027348:	4619      	mov	r1, r3
            double phase =
 802734a:	a31d      	add	r3, pc, #116	; (adr r3, 80273c0 <kiss_fftr_alloc+0x230>)
 802734c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027350:	f7d9 f95c 	bl	800060c <__aeabi_dmul>
 8027354:	4602      	mov	r2, r0
 8027356:	460b      	mov	r3, r1
 8027358:	e9c7 2308 	strd	r2, r3, [r7, #32]
            kf_cexp (st->super_twiddles+i,phase);
 802735c:	ed97 0b08 	vldr	d0, [r7, #32]
 8027360:	f008 fb02 	bl	802f968 <cos>
 8027364:	ec51 0b10 	vmov	r0, r1, d0
 8027368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802736a:	689a      	ldr	r2, [r3, #8]
 802736c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802736e:	00db      	lsls	r3, r3, #3
 8027370:	18d4      	adds	r4, r2, r3
 8027372:	f7d9 fc43 	bl	8000bfc <__aeabi_d2f>
 8027376:	4603      	mov	r3, r0
 8027378:	6023      	str	r3, [r4, #0]
 802737a:	ed97 0b08 	vldr	d0, [r7, #32]
 802737e:	f008 fc47 	bl	802fc10 <sin>
 8027382:	ec51 0b10 	vmov	r0, r1, d0
 8027386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8027388:	689a      	ldr	r2, [r3, #8]
 802738a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802738c:	00db      	lsls	r3, r3, #3
 802738e:	18d4      	adds	r4, r2, r3
 8027390:	f7d9 fc34 	bl	8000bfc <__aeabi_d2f>
 8027394:	4603      	mov	r3, r0
 8027396:	6063      	str	r3, [r4, #4]
        for (i = 0; i < nfft/2; ++i) {
 8027398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802739a:	3301      	adds	r3, #1
 802739c:	637b      	str	r3, [r7, #52]	; 0x34
 802739e:	e7af      	b.n	8027300 <kiss_fftr_alloc+0x170>
        }
    }

    if (memallocated != NULL) {
 80273a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80273a2:	2b00      	cmp	r3, #0
 80273a4:	d002      	beq.n	80273ac <kiss_fftr_alloc+0x21c>
        *memallocated = memneeded;
 80273a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80273a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80273aa:	601a      	str	r2, [r3, #0]
    }

    return st;
 80273ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80273ae:	4618      	mov	r0, r3
 80273b0:	3738      	adds	r7, #56	; 0x38
 80273b2:	46bd      	mov	sp, r7
 80273b4:	bdb0      	pop	{r4, r5, r7, pc}
 80273b6:	bf00      	nop
 80273b8:	54442d18 	.word	0x54442d18
 80273bc:	400921fb 	.word	0x400921fb
 80273c0:	54442d18 	.word	0x54442d18
 80273c4:	c00921fb 	.word	0xc00921fb
 80273c8:	08034560 	.word	0x08034560
 80273cc:	3fe00000 	.word	0x3fe00000

080273d0 <kiss_fftr>:

void kiss_fftr(kiss_fftr_cfg st,const kiss_fft_scalar *timedata,kiss_fft_cpx *freqdata)
{
 80273d0:	b580      	push	{r7, lr}
 80273d2:	b092      	sub	sp, #72	; 0x48
 80273d4:	af00      	add	r7, sp, #0
 80273d6:	60f8      	str	r0, [r7, #12]
 80273d8:	60b9      	str	r1, [r7, #8]
 80273da:	607a      	str	r2, [r7, #4]
    /* input buffer timedata is stored row-wise */
    int k,ncfft;
    kiss_fft_cpx fpnk,fpk,f1k,f2k,tw,tdc;

    if ( st->substate->inverse) {
 80273dc:	68fb      	ldr	r3, [r7, #12]
 80273de:	681b      	ldr	r3, [r3, #0]
 80273e0:	685b      	ldr	r3, [r3, #4]
 80273e2:	2b00      	cmp	r3, #0
 80273e4:	d002      	beq.n	80273ec <kiss_fftr+0x1c>
        ei_printf("kiss fft usage error: improper alloc\n");
 80273e6:	4887      	ldr	r0, [pc, #540]	; (8027604 <kiss_fftr+0x234>)
 80273e8:	f7de fa60 	bl	80058ac <_Z9ei_printfPKcz>
    }

    ncfft = st->substate->nfft;
 80273ec:	68fb      	ldr	r3, [r7, #12]
 80273ee:	681b      	ldr	r3, [r3, #0]
 80273f0:	681b      	ldr	r3, [r3, #0]
 80273f2:	643b      	str	r3, [r7, #64]	; 0x40

    /*perform the parallel fft of two real signals packed in real,imag*/
    kiss_fft( st->substate , (const kiss_fft_cpx*)timedata, st->tmpbuf );
 80273f4:	68fb      	ldr	r3, [r7, #12]
 80273f6:	6818      	ldr	r0, [r3, #0]
 80273f8:	68fb      	ldr	r3, [r7, #12]
 80273fa:	685b      	ldr	r3, [r3, #4]
 80273fc:	461a      	mov	r2, r3
 80273fe:	68b9      	ldr	r1, [r7, #8]
 8027400:	f7ff feb6 	bl	8027170 <kiss_fft>
     *      yielding DC of input time sequence
     * The difference of tdc.r - tdc.i is the sum of the input (dot product) [1,-1,1,-1...
     *      yielding Nyquist bin of input time sequence
     */

    tdc.r = st->tmpbuf[0].r;
 8027404:	68fb      	ldr	r3, [r7, #12]
 8027406:	685b      	ldr	r3, [r3, #4]
 8027408:	681b      	ldr	r3, [r3, #0]
 802740a:	613b      	str	r3, [r7, #16]
    tdc.i = st->tmpbuf[0].i;
 802740c:	68fb      	ldr	r3, [r7, #12]
 802740e:	685b      	ldr	r3, [r3, #4]
 8027410:	685b      	ldr	r3, [r3, #4]
 8027412:	617b      	str	r3, [r7, #20]
    C_FIXDIV(tdc,2);
    CHECK_OVERFLOW_OP(tdc.r ,+, tdc.i);
    CHECK_OVERFLOW_OP(tdc.r ,-, tdc.i);
    freqdata[0].r = tdc.r + tdc.i;
 8027414:	ed97 7a04 	vldr	s14, [r7, #16]
 8027418:	edd7 7a05 	vldr	s15, [r7, #20]
 802741c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8027420:	687b      	ldr	r3, [r7, #4]
 8027422:	edc3 7a00 	vstr	s15, [r3]
    freqdata[ncfft].r = tdc.r - tdc.i;
 8027426:	ed97 7a04 	vldr	s14, [r7, #16]
 802742a:	edd7 7a05 	vldr	s15, [r7, #20]
 802742e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8027430:	00db      	lsls	r3, r3, #3
 8027432:	687a      	ldr	r2, [r7, #4]
 8027434:	4413      	add	r3, r2
 8027436:	ee77 7a67 	vsub.f32	s15, s14, s15
 802743a:	edc3 7a00 	vstr	s15, [r3]
#ifdef USE_SIMD
    freqdata[ncfft].i = freqdata[0].i = _mm_set1_ps(0);
#else
    freqdata[ncfft].i = freqdata[0].i = 0;
 802743e:	687b      	ldr	r3, [r7, #4]
 8027440:	f04f 0200 	mov.w	r2, #0
 8027444:	605a      	str	r2, [r3, #4]
 8027446:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8027448:	00db      	lsls	r3, r3, #3
 802744a:	687a      	ldr	r2, [r7, #4]
 802744c:	4413      	add	r3, r2
 802744e:	687a      	ldr	r2, [r7, #4]
 8027450:	6852      	ldr	r2, [r2, #4]
 8027452:	605a      	str	r2, [r3, #4]
#endif

    for ( k=1;k <= ncfft/2 ; ++k ) {
 8027454:	2301      	movs	r3, #1
 8027456:	647b      	str	r3, [r7, #68]	; 0x44
 8027458:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802745a:	0fda      	lsrs	r2, r3, #31
 802745c:	4413      	add	r3, r2
 802745e:	105b      	asrs	r3, r3, #1
 8027460:	461a      	mov	r2, r3
 8027462:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8027464:	4293      	cmp	r3, r2
 8027466:	f300 80c9 	bgt.w	80275fc <kiss_fftr+0x22c>
        fpk    = st->tmpbuf[k];
 802746a:	68fb      	ldr	r3, [r7, #12]
 802746c:	685a      	ldr	r2, [r3, #4]
 802746e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8027470:	00db      	lsls	r3, r3, #3
 8027472:	441a      	add	r2, r3
 8027474:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8027478:	e892 0003 	ldmia.w	r2, {r0, r1}
 802747c:	e883 0003 	stmia.w	r3, {r0, r1}
        fpnk.r =   st->tmpbuf[ncfft-k].r;
 8027480:	68fb      	ldr	r3, [r7, #12]
 8027482:	685a      	ldr	r2, [r3, #4]
 8027484:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8027486:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8027488:	1acb      	subs	r3, r1, r3
 802748a:	00db      	lsls	r3, r3, #3
 802748c:	4413      	add	r3, r2
 802748e:	681b      	ldr	r3, [r3, #0]
 8027490:	63bb      	str	r3, [r7, #56]	; 0x38
        fpnk.i = - st->tmpbuf[ncfft-k].i;
 8027492:	68fb      	ldr	r3, [r7, #12]
 8027494:	685a      	ldr	r2, [r3, #4]
 8027496:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8027498:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802749a:	1acb      	subs	r3, r1, r3
 802749c:	00db      	lsls	r3, r3, #3
 802749e:	4413      	add	r3, r2
 80274a0:	edd3 7a01 	vldr	s15, [r3, #4]
 80274a4:	eef1 7a67 	vneg.f32	s15, s15
 80274a8:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        C_FIXDIV(fpk,2);
        C_FIXDIV(fpnk,2);

        C_ADD( f1k, fpk , fpnk );
 80274ac:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80274b0:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80274b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80274b8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 80274bc:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80274c0:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80274c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80274c8:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        C_SUB( f2k, fpk , fpnk );
 80274cc:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80274d0:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80274d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80274d8:	edc7 7a08 	vstr	s15, [r7, #32]
 80274dc:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80274e0:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80274e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80274e8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        C_MUL( tw , f2k , st->super_twiddles[k-1]);
 80274ec:	ed97 7a08 	vldr	s14, [r7, #32]
 80274f0:	68fb      	ldr	r3, [r7, #12]
 80274f2:	689a      	ldr	r2, [r3, #8]
 80274f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80274f6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80274fa:	3b01      	subs	r3, #1
 80274fc:	00db      	lsls	r3, r3, #3
 80274fe:	4413      	add	r3, r2
 8027500:	edd3 7a00 	vldr	s15, [r3]
 8027504:	ee27 7a27 	vmul.f32	s14, s14, s15
 8027508:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 802750c:	68fb      	ldr	r3, [r7, #12]
 802750e:	689a      	ldr	r2, [r3, #8]
 8027510:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8027512:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8027516:	3b01      	subs	r3, #1
 8027518:	00db      	lsls	r3, r3, #3
 802751a:	4413      	add	r3, r2
 802751c:	edd3 7a01 	vldr	s15, [r3, #4]
 8027520:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8027524:	ee77 7a67 	vsub.f32	s15, s14, s15
 8027528:	edc7 7a06 	vstr	s15, [r7, #24]
 802752c:	ed97 7a08 	vldr	s14, [r7, #32]
 8027530:	68fb      	ldr	r3, [r7, #12]
 8027532:	689a      	ldr	r2, [r3, #8]
 8027534:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8027536:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 802753a:	3b01      	subs	r3, #1
 802753c:	00db      	lsls	r3, r3, #3
 802753e:	4413      	add	r3, r2
 8027540:	edd3 7a01 	vldr	s15, [r3, #4]
 8027544:	ee27 7a27 	vmul.f32	s14, s14, s15
 8027548:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 802754c:	68fb      	ldr	r3, [r7, #12]
 802754e:	689a      	ldr	r2, [r3, #8]
 8027550:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8027552:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8027556:	3b01      	subs	r3, #1
 8027558:	00db      	lsls	r3, r3, #3
 802755a:	4413      	add	r3, r2
 802755c:	edd3 7a00 	vldr	s15, [r3]
 8027560:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8027564:	ee77 7a27 	vadd.f32	s15, s14, s15
 8027568:	edc7 7a07 	vstr	s15, [r7, #28]

        freqdata[k].r = HALF_OF(f1k.r + tw.r);
 802756c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8027570:	edd7 7a06 	vldr	s15, [r7, #24]
 8027574:	ee77 7a27 	vadd.f32	s15, s14, s15
 8027578:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802757a:	00db      	lsls	r3, r3, #3
 802757c:	687a      	ldr	r2, [r7, #4]
 802757e:	4413      	add	r3, r2
 8027580:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8027584:	ee67 7a87 	vmul.f32	s15, s15, s14
 8027588:	edc3 7a00 	vstr	s15, [r3]
        freqdata[k].i = HALF_OF(f1k.i + tw.i);
 802758c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8027590:	edd7 7a07 	vldr	s15, [r7, #28]
 8027594:	ee77 7a27 	vadd.f32	s15, s14, s15
 8027598:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802759a:	00db      	lsls	r3, r3, #3
 802759c:	687a      	ldr	r2, [r7, #4]
 802759e:	4413      	add	r3, r2
 80275a0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80275a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80275a8:	edc3 7a01 	vstr	s15, [r3, #4]
        freqdata[ncfft-k].r = HALF_OF(f1k.r - tw.r);
 80275ac:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80275b0:	edd7 7a06 	vldr	s15, [r7, #24]
 80275b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80275b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80275ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80275bc:	1ad3      	subs	r3, r2, r3
 80275be:	00db      	lsls	r3, r3, #3
 80275c0:	687a      	ldr	r2, [r7, #4]
 80275c2:	4413      	add	r3, r2
 80275c4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80275c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80275cc:	edc3 7a00 	vstr	s15, [r3]
        freqdata[ncfft-k].i = HALF_OF(tw.i - f1k.i);
 80275d0:	ed97 7a07 	vldr	s14, [r7, #28]
 80275d4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80275d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80275dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80275de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80275e0:	1ad3      	subs	r3, r2, r3
 80275e2:	00db      	lsls	r3, r3, #3
 80275e4:	687a      	ldr	r2, [r7, #4]
 80275e6:	4413      	add	r3, r2
 80275e8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80275ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80275f0:	edc3 7a01 	vstr	s15, [r3, #4]
    for ( k=1;k <= ncfft/2 ; ++k ) {
 80275f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80275f6:	3301      	adds	r3, #1
 80275f8:	647b      	str	r3, [r7, #68]	; 0x44
 80275fa:	e72d      	b.n	8027458 <kiss_fftr+0x88>
    }
}
 80275fc:	bf00      	nop
 80275fe:	3748      	adds	r7, #72	; 0x48
 8027600:	46bd      	mov	sp, r7
 8027602:	bd80      	pop	{r7, pc}
 8027604:	0803457c 	.word	0x0803457c

08027608 <_ZSt5log10f>:
  { return __builtin_log10f(__x); }
 8027608:	b580      	push	{r7, lr}
 802760a:	b082      	sub	sp, #8
 802760c:	af00      	add	r7, sp, #0
 802760e:	ed87 0a01 	vstr	s0, [r7, #4]
 8027612:	ed97 0a01 	vldr	s0, [r7, #4]
 8027616:	f008 fcf7 	bl	8030008 <log10f>
 802761a:	eef0 7a40 	vmov.f32	s15, s0
 802761e:	eeb0 0a67 	vmov.f32	s0, s15
 8027622:	3708      	adds	r7, #8
 8027624:	46bd      	mov	sp, r7
 8027626:	bd80      	pop	{r7, pc}

08027628 <_ZSt5isinfd>:
  { return __builtin_isinf(__x); }
 8027628:	b5f0      	push	{r4, r5, r6, r7, lr}
 802762a:	b083      	sub	sp, #12
 802762c:	af00      	add	r7, sp, #0
 802762e:	ed87 0b00 	vstr	d0, [r7]
 8027632:	683c      	ldr	r4, [r7, #0]
 8027634:	687b      	ldr	r3, [r7, #4]
 8027636:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 802763a:	2301      	movs	r3, #1
 802763c:	461e      	mov	r6, r3
 802763e:	f04f 32ff 	mov.w	r2, #4294967295
 8027642:	4b10      	ldr	r3, [pc, #64]	; (8027684 <_ZSt5isinfd+0x5c>)
 8027644:	4620      	mov	r0, r4
 8027646:	4629      	mov	r1, r5
 8027648:	f7d9 fa7a 	bl	8000b40 <__aeabi_dcmpun>
 802764c:	4603      	mov	r3, r0
 802764e:	2b00      	cmp	r3, #0
 8027650:	d10b      	bne.n	802766a <_ZSt5isinfd+0x42>
 8027652:	f04f 32ff 	mov.w	r2, #4294967295
 8027656:	4b0b      	ldr	r3, [pc, #44]	; (8027684 <_ZSt5isinfd+0x5c>)
 8027658:	4620      	mov	r0, r4
 802765a:	4629      	mov	r1, r5
 802765c:	f7d9 fa52 	bl	8000b04 <__aeabi_dcmple>
 8027660:	4603      	mov	r3, r0
 8027662:	2b00      	cmp	r3, #0
 8027664:	d101      	bne.n	802766a <_ZSt5isinfd+0x42>
 8027666:	2300      	movs	r3, #0
 8027668:	461e      	mov	r6, r3
 802766a:	b2f3      	uxtb	r3, r6
 802766c:	f083 0301 	eor.w	r3, r3, #1
 8027670:	b2db      	uxtb	r3, r3
 8027672:	2b00      	cmp	r3, #0
 8027674:	bf14      	ite	ne
 8027676:	2301      	movne	r3, #1
 8027678:	2300      	moveq	r3, #0
 802767a:	b2db      	uxtb	r3, r3
 802767c:	4618      	mov	r0, r3
 802767e:	370c      	adds	r7, #12
 8027680:	46bd      	mov	sp, r7
 8027682:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8027684:	7fefffff 	.word	0x7fefffff

08027688 <_Z29ei_run_impulse_check_canceledv>:
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>

__attribute__((weak)) EI_IMPULSE_ERROR ei_run_impulse_check_canceled() {
 8027688:	b480      	push	{r7}
 802768a:	af00      	add	r7, sp, #0
    return EI_IMPULSE_OK;
 802768c:	2300      	movs	r3, #0
}
 802768e:	4618      	mov	r0, r3
 8027690:	46bd      	mov	sp, r7
 8027692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027696:	4770      	bx	lr

08027698 <_Z16ei_read_timer_usv>:

uint64_t ei_read_timer_ms() {
    return HAL_GetTick();
}

uint64_t ei_read_timer_us() {
 8027698:	b5b0      	push	{r4, r5, r7, lr}
 802769a:	af00      	add	r7, sp, #0
    return HAL_GetTick() * 1000;
 802769c:	f7e0 fa60 	bl	8007b60 <HAL_GetTick>
 80276a0:	4603      	mov	r3, r0
 80276a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80276a6:	fb02 f303 	mul.w	r3, r2, r3
 80276aa:	2200      	movs	r2, #0
 80276ac:	461c      	mov	r4, r3
 80276ae:	4615      	mov	r5, r2
 80276b0:	4622      	mov	r2, r4
 80276b2:	462b      	mov	r3, r5
}
 80276b4:	4610      	mov	r0, r2
 80276b6:	4619      	mov	r1, r3
 80276b8:	bdb0      	pop	{r4, r5, r7, pc}
 80276ba:	0000      	movs	r0, r0
 80276bc:	0000      	movs	r0, r0
	...

080276c0 <_Z15ei_printf_floatf>:
    va_start(myargs, format);
    vprintf(format, myargs);
    va_end(myargs);
}

__attribute__((weak)) void ei_printf_float(float f) {
 80276c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80276c4:	b08c      	sub	sp, #48	; 0x30
 80276c6:	af00      	add	r7, sp, #0
 80276c8:	ed87 0a01 	vstr	s0, [r7, #4]
        }
        *(c) = '\0';
    }


    ei_printf("%s", s);
 80276cc:	466b      	mov	r3, sp
 80276ce:	4698      	mov	r8, r3
    float n = f;
 80276d0:	687b      	ldr	r3, [r7, #4]
 80276d2:	627b      	str	r3, [r7, #36]	; 0x24
    char s[MAX_NUMBER_STRING_SIZE];
 80276d4:	4b7e      	ldr	r3, [pc, #504]	; (80278d0 <_Z15ei_printf_floatf+0x210>)
 80276d6:	681b      	ldr	r3, [r3, #0]
 80276d8:	1e5e      	subs	r6, r3, #1
 80276da:	623e      	str	r6, [r7, #32]
 80276dc:	4633      	mov	r3, r6
 80276de:	3301      	adds	r3, #1
 80276e0:	2200      	movs	r2, #0
 80276e2:	461c      	mov	r4, r3
 80276e4:	4615      	mov	r5, r2
 80276e6:	f04f 0200 	mov.w	r2, #0
 80276ea:	f04f 0300 	mov.w	r3, #0
 80276ee:	00eb      	lsls	r3, r5, #3
 80276f0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80276f4:	00e2      	lsls	r2, r4, #3
 80276f6:	4633      	mov	r3, r6
 80276f8:	3301      	adds	r3, #1
 80276fa:	2200      	movs	r2, #0
 80276fc:	4618      	mov	r0, r3
 80276fe:	4611      	mov	r1, r2
 8027700:	f04f 0200 	mov.w	r2, #0
 8027704:	f04f 0300 	mov.w	r3, #0
 8027708:	00cb      	lsls	r3, r1, #3
 802770a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 802770e:	00c2      	lsls	r2, r0, #3
 8027710:	4633      	mov	r3, r6
 8027712:	3301      	adds	r3, #1
 8027714:	3307      	adds	r3, #7
 8027716:	08db      	lsrs	r3, r3, #3
 8027718:	00db      	lsls	r3, r3, #3
 802771a:	ebad 0d03 	sub.w	sp, sp, r3
 802771e:	466b      	mov	r3, sp
 8027720:	3300      	adds	r3, #0
 8027722:	61fb      	str	r3, [r7, #28]
    if (n == 0.0) {
 8027724:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8027728:	eef5 7a40 	vcmp.f32	s15, #0.0
 802772c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027730:	d106      	bne.n	8027740 <_Z15ei_printf_floatf+0x80>
        strcpy(s, "0");
 8027732:	69fb      	ldr	r3, [r7, #28]
 8027734:	4967      	ldr	r1, [pc, #412]	; (80278d4 <_Z15ei_printf_floatf+0x214>)
 8027736:	461a      	mov	r2, r3
 8027738:	460b      	mov	r3, r1
 802773a:	881b      	ldrh	r3, [r3, #0]
 802773c:	8013      	strh	r3, [r2, #0]
 802773e:	e0b6      	b.n	80278ae <_Z15ei_printf_floatf+0x1ee>
        char *c = s;
 8027740:	69fb      	ldr	r3, [r7, #28]
 8027742:	62fb      	str	r3, [r7, #44]	; 0x2c
        int neg = (n < 0);
 8027744:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8027748:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 802774c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027750:	bf4c      	ite	mi
 8027752:	2301      	movmi	r3, #1
 8027754:	2300      	movpl	r3, #0
 8027756:	b2db      	uxtb	r3, r3
 8027758:	61bb      	str	r3, [r7, #24]
        if (neg) {
 802775a:	69bb      	ldr	r3, [r7, #24]
 802775c:	2b00      	cmp	r3, #0
 802775e:	d005      	beq.n	802776c <_Z15ei_printf_floatf+0xac>
            n = -n;
 8027760:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8027764:	eef1 7a67 	vneg.f32	s15, s15
 8027768:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        m = log10(n);
 802776c:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8027770:	f7ff ff4a 	bl	8027608 <_ZSt5log10f>
 8027774:	eef0 7a40 	vmov.f32	s15, s0
 8027778:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802777c:	ee17 3a90 	vmov	r3, s15
 8027780:	62bb      	str	r3, [r7, #40]	; 0x28
        if (neg) {
 8027782:	69bb      	ldr	r3, [r7, #24]
 8027784:	2b00      	cmp	r3, #0
 8027786:	d004      	beq.n	8027792 <_Z15ei_printf_floatf+0xd2>
            *(c++) = '-';
 8027788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802778a:	1c5a      	adds	r2, r3, #1
 802778c:	62fa      	str	r2, [r7, #44]	; 0x2c
 802778e:	222d      	movs	r2, #45	; 0x2d
 8027790:	701a      	strb	r2, [r3, #0]
        if (m < 1.0) {
 8027792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8027794:	2b00      	cmp	r3, #0
 8027796:	dc01      	bgt.n	802779c <_Z15ei_printf_floatf+0xdc>
            m = 0;
 8027798:	2300      	movs	r3, #0
 802779a:	62bb      	str	r3, [r7, #40]	; 0x28
        while (n > PRECISION || m >= 0) {
 802779c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802779e:	f7d8 fedd 	bl	800055c <__aeabi_f2d>
 80277a2:	4b4d      	ldr	r3, [pc, #308]	; (80278d8 <_Z15ei_printf_floatf+0x218>)
 80277a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80277a8:	2401      	movs	r4, #1
 80277aa:	f7d9 f9bf 	bl	8000b2c <__aeabi_dcmpgt>
 80277ae:	4603      	mov	r3, r0
 80277b0:	2b00      	cmp	r3, #0
 80277b2:	d101      	bne.n	80277b8 <_Z15ei_printf_floatf+0xf8>
 80277b4:	2300      	movs	r3, #0
 80277b6:	461c      	mov	r4, r3
 80277b8:	b2e3      	uxtb	r3, r4
 80277ba:	f083 0301 	eor.w	r3, r3, #1
 80277be:	b2db      	uxtb	r3, r3
 80277c0:	2b00      	cmp	r3, #0
 80277c2:	d002      	beq.n	80277ca <_Z15ei_printf_floatf+0x10a>
 80277c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80277c6:	2b00      	cmp	r3, #0
 80277c8:	db6e      	blt.n	80278a8 <_Z15ei_printf_floatf+0x1e8>
            double weight = pow(10.0, m);
 80277ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80277cc:	ed9f 0b3e 	vldr	d0, [pc, #248]	; 80278c8 <_Z15ei_printf_floatf+0x208>
 80277d0:	f000 f8ab 	bl	802792a <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80277d4:	ed87 0b04 	vstr	d0, [r7, #16]
            if (weight > 0 && !isinf(weight)) {
 80277d8:	f04f 0200 	mov.w	r2, #0
 80277dc:	f04f 0300 	mov.w	r3, #0
 80277e0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80277e4:	f7d9 f9a2 	bl	8000b2c <__aeabi_dcmpgt>
 80277e8:	4603      	mov	r3, r0
 80277ea:	2b00      	cmp	r3, #0
 80277ec:	d00b      	beq.n	8027806 <_Z15ei_printf_floatf+0x146>
 80277ee:	ed97 0b04 	vldr	d0, [r7, #16]
 80277f2:	f7ff ff19 	bl	8027628 <_ZSt5isinfd>
 80277f6:	4603      	mov	r3, r0
 80277f8:	f083 0301 	eor.w	r3, r3, #1
 80277fc:	b2db      	uxtb	r3, r3
 80277fe:	2b00      	cmp	r3, #0
 8027800:	d001      	beq.n	8027806 <_Z15ei_printf_floatf+0x146>
 8027802:	2301      	movs	r3, #1
 8027804:	e000      	b.n	8027808 <_Z15ei_printf_floatf+0x148>
 8027806:	2300      	movs	r3, #0
 8027808:	2b00      	cmp	r3, #0
 802780a:	d03a      	beq.n	8027882 <_Z15ei_printf_floatf+0x1c2>
                digit = floor(n / weight);
 802780c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802780e:	f7d8 fea5 	bl	800055c <__aeabi_f2d>
 8027812:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8027816:	f7d9 f823 	bl	8000860 <__aeabi_ddiv>
 802781a:	4602      	mov	r2, r0
 802781c:	460b      	mov	r3, r1
 802781e:	ec43 2b17 	vmov	d7, r2, r3
 8027822:	eeb0 0a47 	vmov.f32	s0, s14
 8027826:	eef0 0a67 	vmov.f32	s1, s15
 802782a:	f008 f8f1 	bl	802fa10 <floor>
 802782e:	ec53 2b10 	vmov	r2, r3, d0
 8027832:	4610      	mov	r0, r2
 8027834:	4619      	mov	r1, r3
 8027836:	f7d9 f999 	bl	8000b6c <__aeabi_d2iz>
 802783a:	4603      	mov	r3, r0
 802783c:	60fb      	str	r3, [r7, #12]
                n -= (digit * weight);
 802783e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8027840:	f7d8 fe8c 	bl	800055c <__aeabi_f2d>
 8027844:	4604      	mov	r4, r0
 8027846:	460d      	mov	r5, r1
 8027848:	68f8      	ldr	r0, [r7, #12]
 802784a:	f7d8 fe75 	bl	8000538 <__aeabi_i2d>
 802784e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8027852:	f7d8 fedb 	bl	800060c <__aeabi_dmul>
 8027856:	4602      	mov	r2, r0
 8027858:	460b      	mov	r3, r1
 802785a:	4620      	mov	r0, r4
 802785c:	4629      	mov	r1, r5
 802785e:	f7d8 fd1d 	bl	800029c <__aeabi_dsub>
 8027862:	4602      	mov	r2, r0
 8027864:	460b      	mov	r3, r1
 8027866:	4610      	mov	r0, r2
 8027868:	4619      	mov	r1, r3
 802786a:	f7d9 f9c7 	bl	8000bfc <__aeabi_d2f>
 802786e:	4603      	mov	r3, r0
 8027870:	627b      	str	r3, [r7, #36]	; 0x24
                *(c++) = '0' + digit;
 8027872:	68fb      	ldr	r3, [r7, #12]
 8027874:	b2da      	uxtb	r2, r3
 8027876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027878:	1c59      	adds	r1, r3, #1
 802787a:	62f9      	str	r1, [r7, #44]	; 0x2c
 802787c:	3230      	adds	r2, #48	; 0x30
 802787e:	b2d2      	uxtb	r2, r2
 8027880:	701a      	strb	r2, [r3, #0]
            if (m == 0 && n > 0) {
 8027882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8027884:	2b00      	cmp	r3, #0
 8027886:	d10b      	bne.n	80278a0 <_Z15ei_printf_floatf+0x1e0>
 8027888:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 802788c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8027890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027894:	dd04      	ble.n	80278a0 <_Z15ei_printf_floatf+0x1e0>
                *(c++) = '.';
 8027896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027898:	1c5a      	adds	r2, r3, #1
 802789a:	62fa      	str	r2, [r7, #44]	; 0x2c
 802789c:	222e      	movs	r2, #46	; 0x2e
 802789e:	701a      	strb	r2, [r3, #0]
            m--;
 80278a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80278a2:	3b01      	subs	r3, #1
 80278a4:	62bb      	str	r3, [r7, #40]	; 0x28
        while (n > PRECISION || m >= 0) {
 80278a6:	e779      	b.n	802779c <_Z15ei_printf_floatf+0xdc>
        *(c) = '\0';
 80278a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80278aa:	2200      	movs	r2, #0
 80278ac:	701a      	strb	r2, [r3, #0]
    ei_printf("%s", s);
 80278ae:	69f9      	ldr	r1, [r7, #28]
 80278b0:	480a      	ldr	r0, [pc, #40]	; (80278dc <_Z15ei_printf_floatf+0x21c>)
 80278b2:	f7dd fffb 	bl	80058ac <_Z9ei_printfPKcz>
 80278b6:	46c5      	mov	sp, r8
}
 80278b8:	bf00      	nop
 80278ba:	3730      	adds	r7, #48	; 0x30
 80278bc:	46bd      	mov	sp, r7
 80278be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80278c2:	bf00      	nop
 80278c4:	f3af 8000 	nop.w
 80278c8:	00000000 	.word	0x00000000
 80278cc:	40240000 	.word	0x40240000
 80278d0:	20000438 	.word	0x20000438
 80278d4:	080345a4 	.word	0x080345a4
 80278d8:	20000430 	.word	0x20000430
 80278dc:	080345a8 	.word	0x080345a8

080278e0 <_Z9ei_mallocj>:

__attribute__((weak)) void *ei_malloc(size_t size) {
 80278e0:	b580      	push	{r7, lr}
 80278e2:	b082      	sub	sp, #8
 80278e4:	af00      	add	r7, sp, #0
 80278e6:	6078      	str	r0, [r7, #4]
    return malloc(size);
 80278e8:	6878      	ldr	r0, [r7, #4]
 80278ea:	f00a fc25 	bl	8032138 <malloc>
 80278ee:	4603      	mov	r3, r0
}
 80278f0:	4618      	mov	r0, r3
 80278f2:	3708      	adds	r7, #8
 80278f4:	46bd      	mov	sp, r7
 80278f6:	bd80      	pop	{r7, pc}

080278f8 <_Z9ei_callocjj>:

__attribute__((weak)) void *ei_calloc(size_t nitems, size_t size) {
 80278f8:	b580      	push	{r7, lr}
 80278fa:	b082      	sub	sp, #8
 80278fc:	af00      	add	r7, sp, #0
 80278fe:	6078      	str	r0, [r7, #4]
 8027900:	6039      	str	r1, [r7, #0]
    return calloc(nitems, size);
 8027902:	6839      	ldr	r1, [r7, #0]
 8027904:	6878      	ldr	r0, [r7, #4]
 8027906:	f00a fbcf 	bl	80320a8 <calloc>
 802790a:	4603      	mov	r3, r0
}
 802790c:	4618      	mov	r0, r3
 802790e:	3708      	adds	r7, #8
 8027910:	46bd      	mov	sp, r7
 8027912:	bd80      	pop	{r7, pc}

08027914 <_Z7ei_freePv>:

__attribute__((weak)) void ei_free(void *ptr) {
 8027914:	b580      	push	{r7, lr}
 8027916:	b082      	sub	sp, #8
 8027918:	af00      	add	r7, sp, #0
 802791a:	6078      	str	r0, [r7, #4]
    free(ptr);
 802791c:	6878      	ldr	r0, [r7, #4]
 802791e:	f00a fc13 	bl	8032148 <free>
}
 8027922:	bf00      	nop
 8027924:	3708      	adds	r7, #8
 8027926:	46bd      	mov	sp, r7
 8027928:	bd80      	pop	{r7, pc}

0802792a <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 802792a:	b580      	push	{r7, lr}
 802792c:	b084      	sub	sp, #16
 802792e:	af00      	add	r7, sp, #0
 8027930:	ed87 0b02 	vstr	d0, [r7, #8]
 8027934:	6078      	str	r0, [r7, #4]
      return pow(__type(__x), __type(__y));
 8027936:	6878      	ldr	r0, [r7, #4]
 8027938:	f7d8 fdfe 	bl	8000538 <__aeabi_i2d>
 802793c:	4602      	mov	r2, r0
 802793e:	460b      	mov	r3, r1
 8027940:	ec43 2b11 	vmov	d1, r2, r3
 8027944:	ed97 0b02 	vldr	d0, [r7, #8]
 8027948:	f008 fa8c 	bl	802fe64 <pow>
 802794c:	eeb0 7a40 	vmov.f32	s14, s0
 8027950:	eef0 7a60 	vmov.f32	s15, s1
    }
 8027954:	eeb0 0a47 	vmov.f32	s0, s14
 8027958:	eef0 0a67 	vmov.f32	s1, s15
 802795c:	3710      	adds	r7, #16
 802795e:	46bd      	mov	sp, r7
 8027960:	bd80      	pop	{r7, pc}
	...

08027964 <TfLiteTypeGetName>:
  }
  tensor->bytes = num_bytes;
}
#endif  // TF_LITE_STATIC_MEMORY

const char* TfLiteTypeGetName(TfLiteType type) {
 8027964:	b480      	push	{r7}
 8027966:	b083      	sub	sp, #12
 8027968:	af00      	add	r7, sp, #0
 802796a:	4603      	mov	r3, r0
 802796c:	71fb      	strb	r3, [r7, #7]
  switch (type) {
 802796e:	79fb      	ldrb	r3, [r7, #7]
 8027970:	2b10      	cmp	r3, #16
 8027972:	d847      	bhi.n	8027a04 <TfLiteTypeGetName+0xa0>
 8027974:	a201      	add	r2, pc, #4	; (adr r2, 802797c <TfLiteTypeGetName+0x18>)
 8027976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802797a:	bf00      	nop
 802797c:	080279c1 	.word	0x080279c1
 8027980:	080279c5 	.word	0x080279c5
 8027984:	080279cd 	.word	0x080279cd
 8027988:	080279d5 	.word	0x080279d5
 802798c:	080279dd 	.word	0x080279dd
 8027990:	080279f1 	.word	0x080279f1
 8027994:	080279e5 	.word	0x080279e5
 8027998:	080279c9 	.word	0x080279c9
 802799c:	080279e9 	.word	0x080279e9
 80279a0:	080279d9 	.word	0x080279d9
 80279a4:	080279f5 	.word	0x080279f5
 80279a8:	080279f9 	.word	0x080279f9
 80279ac:	080279ed 	.word	0x080279ed
 80279b0:	080279e1 	.word	0x080279e1
 80279b4:	080279fd 	.word	0x080279fd
 80279b8:	08027a01 	.word	0x08027a01
 80279bc:	080279d1 	.word	0x080279d1
    case kTfLiteNoType:
      return "NOTYPE";
 80279c0:	4b14      	ldr	r3, [pc, #80]	; (8027a14 <TfLiteTypeGetName+0xb0>)
 80279c2:	e020      	b.n	8027a06 <TfLiteTypeGetName+0xa2>
    case kTfLiteFloat32:
      return "FLOAT32";
 80279c4:	4b14      	ldr	r3, [pc, #80]	; (8027a18 <TfLiteTypeGetName+0xb4>)
 80279c6:	e01e      	b.n	8027a06 <TfLiteTypeGetName+0xa2>
    case kTfLiteInt16:
      return "INT16";
 80279c8:	4b14      	ldr	r3, [pc, #80]	; (8027a1c <TfLiteTypeGetName+0xb8>)
 80279ca:	e01c      	b.n	8027a06 <TfLiteTypeGetName+0xa2>
    case kTfLiteInt32:
      return "INT32";
 80279cc:	4b14      	ldr	r3, [pc, #80]	; (8027a20 <TfLiteTypeGetName+0xbc>)
 80279ce:	e01a      	b.n	8027a06 <TfLiteTypeGetName+0xa2>
    case kTfLiteUInt32:
      return "UINT32";
 80279d0:	4b14      	ldr	r3, [pc, #80]	; (8027a24 <TfLiteTypeGetName+0xc0>)
 80279d2:	e018      	b.n	8027a06 <TfLiteTypeGetName+0xa2>
    case kTfLiteUInt8:
      return "UINT8";
 80279d4:	4b14      	ldr	r3, [pc, #80]	; (8027a28 <TfLiteTypeGetName+0xc4>)
 80279d6:	e016      	b.n	8027a06 <TfLiteTypeGetName+0xa2>
    case kTfLiteInt8:
      return "INT8";
 80279d8:	4b14      	ldr	r3, [pc, #80]	; (8027a2c <TfLiteTypeGetName+0xc8>)
 80279da:	e014      	b.n	8027a06 <TfLiteTypeGetName+0xa2>
    case kTfLiteInt64:
      return "INT64";
 80279dc:	4b14      	ldr	r3, [pc, #80]	; (8027a30 <TfLiteTypeGetName+0xcc>)
 80279de:	e012      	b.n	8027a06 <TfLiteTypeGetName+0xa2>
    case kTfLiteUInt64:
      return "UINT64";
 80279e0:	4b14      	ldr	r3, [pc, #80]	; (8027a34 <TfLiteTypeGetName+0xd0>)
 80279e2:	e010      	b.n	8027a06 <TfLiteTypeGetName+0xa2>
    case kTfLiteBool:
      return "BOOL";
 80279e4:	4b14      	ldr	r3, [pc, #80]	; (8027a38 <TfLiteTypeGetName+0xd4>)
 80279e6:	e00e      	b.n	8027a06 <TfLiteTypeGetName+0xa2>
    case kTfLiteComplex64:
      return "COMPLEX64";
 80279e8:	4b14      	ldr	r3, [pc, #80]	; (8027a3c <TfLiteTypeGetName+0xd8>)
 80279ea:	e00c      	b.n	8027a06 <TfLiteTypeGetName+0xa2>
    case kTfLiteComplex128:
      return "COMPLEX128";
 80279ec:	4b14      	ldr	r3, [pc, #80]	; (8027a40 <TfLiteTypeGetName+0xdc>)
 80279ee:	e00a      	b.n	8027a06 <TfLiteTypeGetName+0xa2>
    case kTfLiteString:
      return "STRING";
 80279f0:	4b14      	ldr	r3, [pc, #80]	; (8027a44 <TfLiteTypeGetName+0xe0>)
 80279f2:	e008      	b.n	8027a06 <TfLiteTypeGetName+0xa2>
    case kTfLiteFloat16:
      return "FLOAT16";
 80279f4:	4b14      	ldr	r3, [pc, #80]	; (8027a48 <TfLiteTypeGetName+0xe4>)
 80279f6:	e006      	b.n	8027a06 <TfLiteTypeGetName+0xa2>
    case kTfLiteFloat64:
      return "FLOAT64";
 80279f8:	4b14      	ldr	r3, [pc, #80]	; (8027a4c <TfLiteTypeGetName+0xe8>)
 80279fa:	e004      	b.n	8027a06 <TfLiteTypeGetName+0xa2>
    case kTfLiteResource:
      return "RESOURCE";
 80279fc:	4b14      	ldr	r3, [pc, #80]	; (8027a50 <TfLiteTypeGetName+0xec>)
 80279fe:	e002      	b.n	8027a06 <TfLiteTypeGetName+0xa2>
    case kTfLiteVariant:
      return "VARIANT";
 8027a00:	4b14      	ldr	r3, [pc, #80]	; (8027a54 <TfLiteTypeGetName+0xf0>)
 8027a02:	e000      	b.n	8027a06 <TfLiteTypeGetName+0xa2>
  }
  return "Unknown type";
 8027a04:	4b14      	ldr	r3, [pc, #80]	; (8027a58 <TfLiteTypeGetName+0xf4>)
}
 8027a06:	4618      	mov	r0, r3
 8027a08:	370c      	adds	r7, #12
 8027a0a:	46bd      	mov	sp, r7
 8027a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027a10:	4770      	bx	lr
 8027a12:	bf00      	nop
 8027a14:	080345ac 	.word	0x080345ac
 8027a18:	080345b4 	.word	0x080345b4
 8027a1c:	080345bc 	.word	0x080345bc
 8027a20:	080345c4 	.word	0x080345c4
 8027a24:	080345cc 	.word	0x080345cc
 8027a28:	080345d4 	.word	0x080345d4
 8027a2c:	080345dc 	.word	0x080345dc
 8027a30:	080345e4 	.word	0x080345e4
 8027a34:	080345ec 	.word	0x080345ec
 8027a38:	080345f4 	.word	0x080345f4
 8027a3c:	080345fc 	.word	0x080345fc
 8027a40:	08034608 	.word	0x08034608
 8027a44:	08034614 	.word	0x08034614
 8027a48:	0803461c 	.word	0x0803461c
 8027a4c:	08034624 	.word	0x08034624
 8027a50:	0803462c 	.word	0x0803462c
 8027a54:	08034638 	.word	0x08034638
 8027a58:	08034640 	.word	0x08034640

08027a5c <_ZNSt14numeric_limitsIlE3maxEv>:

      static _GLIBCXX_CONSTEXPR long
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_MAX__ - 1; }

      static _GLIBCXX_CONSTEXPR long
      max() _GLIBCXX_USE_NOEXCEPT { return __LONG_MAX__; }
 8027a5c:	b480      	push	{r7}
 8027a5e:	af00      	add	r7, sp, #0
 8027a60:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8027a64:	4618      	mov	r0, r3
 8027a66:	46bd      	mov	sp, r7
 8027a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027a6c:	4770      	bx	lr
	...

08027a70 <_ZN6tflite18QuantizeMultiplierEdPlPi>:
constexpr uint32_t kFractionRoundingMask = 0x003fffff;
constexpr uint32_t kFractionRoundingThreshold = 0x00200000;
}  // namespace

void QuantizeMultiplier(double double_multiplier, int32_t* quantized_multiplier,
                        int* shift) {
 8027a70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8027a74:	b088      	sub	sp, #32
 8027a76:	af00      	add	r7, sp, #0
 8027a78:	ed87 0b02 	vstr	d0, [r7, #8]
 8027a7c:	6078      	str	r0, [r7, #4]
 8027a7e:	6039      	str	r1, [r7, #0]
  if (double_multiplier == 0.) {
 8027a80:	f04f 0200 	mov.w	r2, #0
 8027a84:	f04f 0300 	mov.w	r3, #0
 8027a88:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8027a8c:	f7d9 f826 	bl	8000adc <__aeabi_dcmpeq>
 8027a90:	4603      	mov	r3, r0
 8027a92:	2b00      	cmp	r3, #0
 8027a94:	d006      	beq.n	8027aa4 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x34>
    *quantized_multiplier = 0;
 8027a96:	687b      	ldr	r3, [r7, #4]
 8027a98:	2200      	movs	r2, #0
 8027a9a:	601a      	str	r2, [r3, #0]
    *shift = 0;
 8027a9c:	683b      	ldr	r3, [r7, #0]
 8027a9e:	2200      	movs	r2, #0
 8027aa0:	601a      	str	r2, [r3, #0]
    return;
 8027aa2:	e068      	b.n	8027b76 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x106>
  // example on microcontrollers) then use an alternative implementation
  // that only requires integer and bitwise operations. To enable this, you
  // need to set the define during the build process for your platform.
  int64_t q_fixed = IntegerFrExp(double_multiplier, shift);
#else   // TFLITE_EMULATE_FLOAT
  const double q = std::frexp(double_multiplier, shift);
 8027aa4:	6838      	ldr	r0, [r7, #0]
 8027aa6:	ed97 0b02 	vldr	d0, [r7, #8]
 8027aaa:	f008 f831 	bl	802fb10 <frexp>
 8027aae:	ed87 0b04 	vstr	d0, [r7, #16]
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
 8027ab2:	f04f 0200 	mov.w	r2, #0
 8027ab6:	4b32      	ldr	r3, [pc, #200]	; (8027b80 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x110>)
 8027ab8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8027abc:	f7d8 fda6 	bl	800060c <__aeabi_dmul>
 8027ac0:	4602      	mov	r2, r0
 8027ac2:	460b      	mov	r3, r1
 8027ac4:	ec43 2b17 	vmov	d7, r2, r3
 8027ac8:	eeb0 0a47 	vmov.f32	s0, s14
 8027acc:	eef0 0a67 	vmov.f32	s1, s15
 8027ad0:	f000 f962 	bl	8027d98 <_ZN6tflite11TfLiteRoundIdEET_S1_>
 8027ad4:	ec53 2b10 	vmov	r2, r3, d0
 8027ad8:	4610      	mov	r0, r2
 8027ada:	4619      	mov	r1, r3
 8027adc:	f7d9 f92e 	bl	8000d3c <__aeabi_d2lz>
 8027ae0:	4602      	mov	r2, r0
 8027ae2:	460b      	mov	r3, r1
 8027ae4:	e9c7 2306 	strd	r2, r3, [r7, #24]
#endif  // TFLITE_EMULATE_FLOAT
  TFLITE_CHECK(q_fixed <= (1ll << 31));
 8027ae8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8027aec:	4925      	ldr	r1, [pc, #148]	; (8027b84 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x114>)
 8027aee:	428a      	cmp	r2, r1
 8027af0:	f173 0300 	sbcs.w	r3, r3, #0
 8027af4:	db01      	blt.n	8027afa <_ZN6tflite18QuantizeMultiplierEdPlPi+0x8a>
 8027af6:	f00a fab1 	bl	803205c <abort>
  if (q_fixed == (1ll << 31)) {
 8027afa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8027afe:	f102 4100 	add.w	r1, r2, #2147483648	; 0x80000000
 8027b02:	430b      	orrs	r3, r1
 8027b04:	d118      	bne.n	8027b38 <_ZN6tflite18QuantizeMultiplierEdPlPi+0xc8>
    q_fixed /= 2;
 8027b06:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8027b0a:	0fd9      	lsrs	r1, r3, #31
 8027b0c:	2000      	movs	r0, #0
 8027b0e:	468a      	mov	sl, r1
 8027b10:	4683      	mov	fp, r0
 8027b12:	eb1a 0402 	adds.w	r4, sl, r2
 8027b16:	eb4b 0503 	adc.w	r5, fp, r3
 8027b1a:	f04f 0200 	mov.w	r2, #0
 8027b1e:	f04f 0300 	mov.w	r3, #0
 8027b22:	0862      	lsrs	r2, r4, #1
 8027b24:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 8027b28:	106b      	asrs	r3, r5, #1
 8027b2a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    ++*shift;
 8027b2e:	683b      	ldr	r3, [r7, #0]
 8027b30:	681b      	ldr	r3, [r3, #0]
 8027b32:	1c5a      	adds	r2, r3, #1
 8027b34:	683b      	ldr	r3, [r7, #0]
 8027b36:	601a      	str	r2, [r3, #0]
  }
  TFLITE_CHECK_LE(q_fixed, std::numeric_limits<int32_t>::max());
 8027b38:	f7ff ff90 	bl	8027a5c <_ZNSt14numeric_limitsIlE3maxEv>
 8027b3c:	4603      	mov	r3, r0
 8027b3e:	17da      	asrs	r2, r3, #31
 8027b40:	4698      	mov	r8, r3
 8027b42:	4691      	mov	r9, r2
 8027b44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8027b48:	4590      	cmp	r8, r2
 8027b4a:	eb79 0303 	sbcs.w	r3, r9, r3
 8027b4e:	da01      	bge.n	8027b54 <_ZN6tflite18QuantizeMultiplierEdPlPi+0xe4>
 8027b50:	f00a fa84 	bl	803205c <abort>
  // that we're effectively flushing tiny double_multiplier's to zero.
  // We could conceivably handle values in the range (roughly) [32, 63]
  // as 'denormals' i.e. (shift==0, q_fixed < 2^30). In that point of view
  // the present handling is just doing 'flush denormals to zero'. We could
  // reconsider and actually generate nonzero denormals if a need arises.
  if (*shift < -31) {
 8027b54:	683b      	ldr	r3, [r7, #0]
 8027b56:	681b      	ldr	r3, [r3, #0]
 8027b58:	f113 0f1f 	cmn.w	r3, #31
 8027b5c:	da08      	bge.n	8027b70 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x100>
    *shift = 0;
 8027b5e:	683b      	ldr	r3, [r7, #0]
 8027b60:	2200      	movs	r2, #0
 8027b62:	601a      	str	r2, [r3, #0]
    q_fixed = 0;
 8027b64:	f04f 0200 	mov.w	r2, #0
 8027b68:	f04f 0300 	mov.w	r3, #0
 8027b6c:	e9c7 2306 	strd	r2, r3, [r7, #24]
  }
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
 8027b70:	69ba      	ldr	r2, [r7, #24]
 8027b72:	687b      	ldr	r3, [r7, #4]
 8027b74:	601a      	str	r2, [r3, #0]
}
 8027b76:	3720      	adds	r7, #32
 8027b78:	46bd      	mov	sp, r7
 8027b7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8027b7e:	bf00      	nop
 8027b80:	41e00000 	.word	0x41e00000
 8027b84:	80000001 	.word	0x80000001

08027b88 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi>:

void QuantizeMultiplierGreaterThanOne(double double_multiplier,
                                      int32_t* quantized_multiplier,
                                      int* left_shift) {
 8027b88:	b580      	push	{r7, lr}
 8027b8a:	b084      	sub	sp, #16
 8027b8c:	af00      	add	r7, sp, #0
 8027b8e:	ed87 0b02 	vstr	d0, [r7, #8]
 8027b92:	6078      	str	r0, [r7, #4]
 8027b94:	6039      	str	r1, [r7, #0]
  TFLITE_CHECK_GT(double_multiplier, 1.);
 8027b96:	f04f 0200 	mov.w	r2, #0
 8027b9a:	4b0d      	ldr	r3, [pc, #52]	; (8027bd0 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x48>)
 8027b9c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8027ba0:	f7d8 ffc4 	bl	8000b2c <__aeabi_dcmpgt>
 8027ba4:	4603      	mov	r3, r0
 8027ba6:	2b00      	cmp	r3, #0
 8027ba8:	d101      	bne.n	8027bae <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x26>
 8027baa:	f00a fa57 	bl	803205c <abort>
  QuantizeMultiplier(double_multiplier, quantized_multiplier, left_shift);
 8027bae:	6839      	ldr	r1, [r7, #0]
 8027bb0:	6878      	ldr	r0, [r7, #4]
 8027bb2:	ed97 0b02 	vldr	d0, [r7, #8]
 8027bb6:	f7ff ff5b 	bl	8027a70 <_ZN6tflite18QuantizeMultiplierEdPlPi>
  TFLITE_CHECK_GE(*left_shift, 0);
 8027bba:	683b      	ldr	r3, [r7, #0]
 8027bbc:	681b      	ldr	r3, [r3, #0]
 8027bbe:	2b00      	cmp	r3, #0
 8027bc0:	da01      	bge.n	8027bc6 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x3e>
 8027bc2:	f00a fa4b 	bl	803205c <abort>
}
 8027bc6:	bf00      	nop
 8027bc8:	3710      	adds	r7, #16
 8027bca:	46bd      	mov	sp, r7
 8027bcc:	bd80      	pop	{r7, pc}
 8027bce:	bf00      	nop
 8027bd0:	3ff00000 	.word	0x3ff00000

08027bd4 <_ZSt3minIdERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8027bd4:	b580      	push	{r7, lr}
 8027bd6:	b082      	sub	sp, #8
 8027bd8:	af00      	add	r7, sp, #0
 8027bda:	6078      	str	r0, [r7, #4]
 8027bdc:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8027bde:	683b      	ldr	r3, [r7, #0]
 8027be0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8027be4:	687b      	ldr	r3, [r7, #4]
 8027be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027bea:	f7d8 ff81 	bl	8000af0 <__aeabi_dcmplt>
 8027bee:	4603      	mov	r3, r0
 8027bf0:	2b00      	cmp	r3, #0
 8027bf2:	d001      	beq.n	8027bf8 <_ZSt3minIdERKT_S2_S2_+0x24>
	return __b;
 8027bf4:	683b      	ldr	r3, [r7, #0]
 8027bf6:	e000      	b.n	8027bfa <_ZSt3minIdERKT_S2_S2_+0x26>
      return __a;
 8027bf8:	687b      	ldr	r3, [r7, #4]
    }
 8027bfa:	4618      	mov	r0, r3
 8027bfc:	3708      	adds	r7, #8
 8027bfe:	46bd      	mov	sp, r7
 8027c00:	bd80      	pop	{r7, pc}
 8027c02:	0000      	movs	r0, r0
 8027c04:	0000      	movs	r0, r0
	...

08027c08 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>:
  }
}

void PreprocessSoftmaxScaling(double beta, double input_scale,
                              int input_integer_bits,
                              int32_t* quantized_multiplier, int* left_shift) {
 8027c08:	b5b0      	push	{r4, r5, r7, lr}
 8027c0a:	b08e      	sub	sp, #56	; 0x38
 8027c0c:	af00      	add	r7, sp, #0
 8027c0e:	ed87 0b06 	vstr	d0, [r7, #24]
 8027c12:	ed87 1b04 	vstr	d1, [r7, #16]
 8027c16:	60f8      	str	r0, [r7, #12]
 8027c18:	60b9      	str	r1, [r7, #8]
 8027c1a:	607a      	str	r2, [r7, #4]
  if (IntegerDoubleCompare(input_beta_real_multiplier, (1ll << 31) - 1.0) > 0) {
    input_beta_real_multiplier = (1ll << 31) - 1.0;
  }
#else   // TFLITE_EMULATE_FLOAT
  const double input_beta_real_multiplier = std::min<double>(
      beta * input_scale * (1 << (31 - input_integer_bits)), (1ll << 31) - 1.0);
 8027c1c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8027c20:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8027c24:	f7d8 fcf2 	bl	800060c <__aeabi_dmul>
 8027c28:	4602      	mov	r2, r0
 8027c2a:	460b      	mov	r3, r1
 8027c2c:	4614      	mov	r4, r2
 8027c2e:	461d      	mov	r5, r3
 8027c30:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8027c34:	68fb      	ldr	r3, [r7, #12]
 8027c36:	fa22 f303 	lsr.w	r3, r2, r3
 8027c3a:	4618      	mov	r0, r3
 8027c3c:	f7d8 fc7c 	bl	8000538 <__aeabi_i2d>
 8027c40:	4602      	mov	r2, r0
 8027c42:	460b      	mov	r3, r1
 8027c44:	4620      	mov	r0, r4
 8027c46:	4629      	mov	r1, r5
 8027c48:	f7d8 fce0 	bl	800060c <__aeabi_dmul>
 8027c4c:	4602      	mov	r2, r0
 8027c4e:	460b      	mov	r3, r1
 8027c50:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8027c54:	a30e      	add	r3, pc, #56	; (adr r3, 8027c90 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x88>)
 8027c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027c5a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8027c5e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8027c62:	f107 0320 	add.w	r3, r7, #32
 8027c66:	4611      	mov	r1, r2
 8027c68:	4618      	mov	r0, r3
 8027c6a:	f7ff ffb3 	bl	8027bd4 <_ZSt3minIdERKT_S2_S2_>
 8027c6e:	4603      	mov	r3, r0
 8027c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027c74:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
#endif  // TFLITE_EMULATE_FLOAT

  QuantizeMultiplierGreaterThanOne(input_beta_real_multiplier,
 8027c78:	6879      	ldr	r1, [r7, #4]
 8027c7a:	68b8      	ldr	r0, [r7, #8]
 8027c7c:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 8027c80:	f7ff ff82 	bl	8027b88 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi>
                                   quantized_multiplier, left_shift);
}
 8027c84:	bf00      	nop
 8027c86:	3738      	adds	r7, #56	; 0x38
 8027c88:	46bd      	mov	sp, r7
 8027c8a:	bdb0      	pop	{r4, r5, r7, pc}
 8027c8c:	f3af 8000 	nop.w
 8027c90:	ffc00000 	.word	0xffc00000
 8027c94:	41dfffff 	.word	0x41dfffff

08027c98 <_ZN6tflite20CalculateInputRadiusEiii>:
                                              reverse_scaling_divisor,
                                              reverse_scaling_left_shift);
}

int CalculateInputRadius(int input_integer_bits, int input_left_shift,
                         int total_signed_bits) {
 8027c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027c9c:	b087      	sub	sp, #28
 8027c9e:	af00      	add	r7, sp, #0
 8027ca0:	60f8      	str	r0, [r7, #12]
 8027ca2:	60b9      	str	r1, [r7, #8]
 8027ca4:	607a      	str	r2, [r7, #4]
  result <<= (total_signed_bits - input_integer_bits);
  result >>= input_left_shift;
  return result;
#else   // TFLITE_EMULATE_FLOAT
  const double max_input_rescaled =
      1.0 * ((1 << input_integer_bits) - 1) *
 8027ca6:	2201      	movs	r2, #1
 8027ca8:	68fb      	ldr	r3, [r7, #12]
 8027caa:	fa02 f303 	lsl.w	r3, r2, r3
 8027cae:	3b01      	subs	r3, #1
 8027cb0:	4618      	mov	r0, r3
 8027cb2:	f7d8 fc41 	bl	8000538 <__aeabi_i2d>
 8027cb6:	4682      	mov	sl, r0
 8027cb8:	468b      	mov	fp, r1
      (1ll << (total_signed_bits - input_integer_bits)) /
 8027cba:	687a      	ldr	r2, [r7, #4]
 8027cbc:	68fb      	ldr	r3, [r7, #12]
 8027cbe:	1ad1      	subs	r1, r2, r3
 8027cc0:	f04f 0201 	mov.w	r2, #1
 8027cc4:	f04f 0300 	mov.w	r3, #0
 8027cc8:	f1a1 0620 	sub.w	r6, r1, #32
 8027ccc:	f1c1 0020 	rsb	r0, r1, #32
 8027cd0:	fa03 f901 	lsl.w	r9, r3, r1
 8027cd4:	fa02 f606 	lsl.w	r6, r2, r6
 8027cd8:	ea49 0906 	orr.w	r9, r9, r6
 8027cdc:	fa22 f000 	lsr.w	r0, r2, r0
 8027ce0:	ea49 0900 	orr.w	r9, r9, r0
 8027ce4:	fa02 f801 	lsl.w	r8, r2, r1
      1.0 * ((1 << input_integer_bits) - 1) *
 8027ce8:	4640      	mov	r0, r8
 8027cea:	4649      	mov	r1, r9
 8027cec:	f7d8 fc60 	bl	80005b0 <__aeabi_l2d>
 8027cf0:	4602      	mov	r2, r0
 8027cf2:	460b      	mov	r3, r1
 8027cf4:	4650      	mov	r0, sl
 8027cf6:	4659      	mov	r1, fp
 8027cf8:	f7d8 fc88 	bl	800060c <__aeabi_dmul>
 8027cfc:	4602      	mov	r2, r0
 8027cfe:	460b      	mov	r3, r1
 8027d00:	4690      	mov	r8, r2
 8027d02:	4699      	mov	r9, r3
      (1ll << input_left_shift);
 8027d04:	f04f 0201 	mov.w	r2, #1
 8027d08:	f04f 0300 	mov.w	r3, #0
 8027d0c:	68b9      	ldr	r1, [r7, #8]
 8027d0e:	f1a1 0620 	sub.w	r6, r1, #32
 8027d12:	f1c1 0020 	rsb	r0, r1, #32
 8027d16:	fa03 f501 	lsl.w	r5, r3, r1
 8027d1a:	fa02 f606 	lsl.w	r6, r2, r6
 8027d1e:	4335      	orrs	r5, r6
 8027d20:	fa22 f000 	lsr.w	r0, r2, r0
 8027d24:	4305      	orrs	r5, r0
 8027d26:	fa02 f401 	lsl.w	r4, r2, r1
      (1ll << (total_signed_bits - input_integer_bits)) /
 8027d2a:	4620      	mov	r0, r4
 8027d2c:	4629      	mov	r1, r5
 8027d2e:	f7d8 fc3f 	bl	80005b0 <__aeabi_l2d>
 8027d32:	4602      	mov	r2, r0
 8027d34:	460b      	mov	r3, r1
  const double max_input_rescaled =
 8027d36:	4640      	mov	r0, r8
 8027d38:	4649      	mov	r1, r9
 8027d3a:	f7d8 fd91 	bl	8000860 <__aeabi_ddiv>
 8027d3e:	4602      	mov	r2, r0
 8027d40:	460b      	mov	r3, r1
 8027d42:	e9c7 2304 	strd	r2, r3, [r7, #16]
  // Tighten bound using floor.  Suppose that we could use the exact value.
  // After scaling the difference, the result would be at the maximum.  Thus we
  // must ensure that our value has lower magnitude.
  return static_cast<int>(std::floor(max_input_rescaled));
 8027d46:	ed97 0b04 	vldr	d0, [r7, #16]
 8027d4a:	f007 fe61 	bl	802fa10 <floor>
 8027d4e:	ec53 2b10 	vmov	r2, r3, d0
 8027d52:	4610      	mov	r0, r2
 8027d54:	4619      	mov	r1, r3
 8027d56:	f7d8 ff09 	bl	8000b6c <__aeabi_d2iz>
 8027d5a:	4603      	mov	r3, r0
#endif  // TFLITE_EMULATE_FLOAT
}
 8027d5c:	4618      	mov	r0, r3
 8027d5e:	371c      	adds	r7, #28
 8027d60:	46bd      	mov	sp, r7
 8027d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08027d66 <_ZSt3minIfERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8027d66:	b480      	push	{r7}
 8027d68:	b083      	sub	sp, #12
 8027d6a:	af00      	add	r7, sp, #0
 8027d6c:	6078      	str	r0, [r7, #4]
 8027d6e:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8027d70:	683b      	ldr	r3, [r7, #0]
 8027d72:	ed93 7a00 	vldr	s14, [r3]
 8027d76:	687b      	ldr	r3, [r7, #4]
 8027d78:	edd3 7a00 	vldr	s15, [r3]
 8027d7c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8027d80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027d84:	d501      	bpl.n	8027d8a <_ZSt3minIfERKT_S2_S2_+0x24>
	return __b;
 8027d86:	683b      	ldr	r3, [r7, #0]
 8027d88:	e000      	b.n	8027d8c <_ZSt3minIfERKT_S2_S2_+0x26>
      return __a;
 8027d8a:	687b      	ldr	r3, [r7, #4]
    }
 8027d8c:	4618      	mov	r0, r3
 8027d8e:	370c      	adds	r7, #12
 8027d90:	46bd      	mov	sp, r7
 8027d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027d96:	4770      	bx	lr

08027d98 <_ZN6tflite11TfLiteRoundIdEET_S1_>:
  template <class T>                                  \
  inline T tf_name(const T x) {                       \
    return TF_LITE_GLOBAL_STD_PREFIX::std_name(x);    \
  }

DECLARE_STD_GLOBAL_SWITCH1(TfLiteRound, round);
 8027d98:	b580      	push	{r7, lr}
 8027d9a:	b082      	sub	sp, #8
 8027d9c:	af00      	add	r7, sp, #0
 8027d9e:	ed87 0b00 	vstr	d0, [r7]
 8027da2:	ed97 0b00 	vldr	d0, [r7]
 8027da6:	f007 feeb 	bl	802fb80 <round>
 8027daa:	eeb0 7a40 	vmov.f32	s14, s0
 8027dae:	eef0 7a60 	vmov.f32	s15, s1
 8027db2:	eeb0 0a47 	vmov.f32	s0, s14
 8027db6:	eef0 0a67 	vmov.f32	s1, s15
 8027dba:	3708      	adds	r7, #8
 8027dbc:	46bd      	mov	sp, r7
 8027dbe:	bd80      	pop	{r7, pc}

08027dc0 <_ZN6tflite11TfLiteRoundIfEET_S1_>:
 8027dc0:	b580      	push	{r7, lr}
 8027dc2:	b082      	sub	sp, #8
 8027dc4:	af00      	add	r7, sp, #0
 8027dc6:	ed87 0a01 	vstr	s0, [r7, #4]
 8027dca:	ed97 0a01 	vldr	s0, [r7, #4]
 8027dce:	f7d9 fd24 	bl	800181a <_ZSt5roundf>
 8027dd2:	eef0 7a40 	vmov.f32	s15, s0
 8027dd6:	eeb0 0a67 	vmov.f32	s0, s15
 8027dda:	3708      	adds	r7, #8
 8027ddc:	46bd      	mov	sp, r7
 8027dde:	bd80      	pop	{r7, pc}

08027de0 <_ZNSt14numeric_limitsIaE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__SCHAR_MAX__ - 1; }
 8027de0:	b480      	push	{r7}
 8027de2:	af00      	add	r7, sp, #0
 8027de4:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8027de8:	4618      	mov	r0, r3
 8027dea:	46bd      	mov	sp, r7
 8027dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027df0:	4770      	bx	lr

08027df2 <_ZNSt14numeric_limitsIaE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__; }
 8027df2:	b480      	push	{r7}
 8027df4:	af00      	add	r7, sp, #0
 8027df6:	237f      	movs	r3, #127	; 0x7f
 8027df8:	4618      	mov	r0, r3
 8027dfa:	46bd      	mov	sp, r7
 8027dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027e00:	4770      	bx	lr

08027e02 <_ZNSt14numeric_limitsIhE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return 0; }
 8027e02:	b480      	push	{r7}
 8027e04:	af00      	add	r7, sp, #0
 8027e06:	2300      	movs	r3, #0
 8027e08:	4618      	mov	r0, r3
 8027e0a:	46bd      	mov	sp, r7
 8027e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027e10:	4770      	bx	lr

08027e12 <_ZNSt14numeric_limitsIhE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__ * 2U + 1; }
 8027e12:	b480      	push	{r7}
 8027e14:	af00      	add	r7, sp, #0
 8027e16:	23ff      	movs	r3, #255	; 0xff
 8027e18:	4618      	mov	r0, r3
 8027e1a:	46bd      	mov	sp, r7
 8027e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027e20:	4770      	bx	lr
	...

08027e24 <_ZNSt14numeric_limitsIsE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__SHRT_MAX__ - 1; }
 8027e24:	b480      	push	{r7}
 8027e26:	af00      	add	r7, sp, #0
 8027e28:	4b02      	ldr	r3, [pc, #8]	; (8027e34 <_ZNSt14numeric_limitsIsE3minEv+0x10>)
 8027e2a:	4618      	mov	r0, r3
 8027e2c:	46bd      	mov	sp, r7
 8027e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027e32:	4770      	bx	lr
 8027e34:	ffff8000 	.word	0xffff8000

08027e38 <_ZNSt14numeric_limitsIsE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SHRT_MAX__; }
 8027e38:	b480      	push	{r7}
 8027e3a:	af00      	add	r7, sp, #0
 8027e3c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8027e40:	4618      	mov	r0, r3
 8027e42:	46bd      	mov	sp, r7
 8027e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027e48:	4770      	bx	lr

08027e4a <_ZN6tflite13NumDimensionsEPK12TfLiteTensor>:
TfLiteStatus GetIntermediatesSafe(const TfLiteContext* context,
                                  const TfLiteNode* node, int index,
                                  TfLiteTensor** tensor);
#endif  // TF_LITE_STATIC_MEMORY

inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
 8027e4a:	b480      	push	{r7}
 8027e4c:	b083      	sub	sp, #12
 8027e4e:	af00      	add	r7, sp, #0
 8027e50:	6078      	str	r0, [r7, #4]
 8027e52:	687b      	ldr	r3, [r7, #4]
 8027e54:	689b      	ldr	r3, [r3, #8]
 8027e56:	681b      	ldr	r3, [r3, #0]
 8027e58:	4618      	mov	r0, r3
 8027e5a:	370c      	adds	r7, #12
 8027e5c:	46bd      	mov	sp, r7
 8027e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027e62:	4770      	bx	lr

08027e64 <_ZN6tflite15SizeOfDimensionEPK12TfLiteTensori>:
inline int SizeOfDimension(const TfLiteTensor* t, int dim) {
 8027e64:	b480      	push	{r7}
 8027e66:	b083      	sub	sp, #12
 8027e68:	af00      	add	r7, sp, #0
 8027e6a:	6078      	str	r0, [r7, #4]
 8027e6c:	6039      	str	r1, [r7, #0]
  return t->dims->data[dim];
 8027e6e:	687b      	ldr	r3, [r7, #4]
 8027e70:	689a      	ldr	r2, [r3, #8]
 8027e72:	683b      	ldr	r3, [r7, #0]
 8027e74:	009b      	lsls	r3, r3, #2
 8027e76:	4413      	add	r3, r2
 8027e78:	685b      	ldr	r3, [r3, #4]
}
 8027e7a:	4618      	mov	r0, r3
 8027e7c:	370c      	adds	r7, #12
 8027e7e:	46bd      	mov	sp, r7
 8027e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027e84:	4770      	bx	lr

08027e86 <_ZN6tflite11NumElementsEPK14TfLiteIntArray>:
inline int NumIntermediates(const TfLiteNode* node) {
  return node->intermediates->size;
}
#endif  // TF_LITE_STATIC_MEMORY

inline int64_t NumElements(const TfLiteIntArray* dims) {
 8027e86:	b4b0      	push	{r4, r5, r7}
 8027e88:	b087      	sub	sp, #28
 8027e8a:	af00      	add	r7, sp, #0
 8027e8c:	6078      	str	r0, [r7, #4]
  int64_t count = 1;
 8027e8e:	f04f 0001 	mov.w	r0, #1
 8027e92:	f04f 0100 	mov.w	r1, #0
 8027e96:	e9c7 0104 	strd	r0, r1, [r7, #16]
  for (int i = 0; i < dims->size; ++i) {
 8027e9a:	2100      	movs	r1, #0
 8027e9c:	60f9      	str	r1, [r7, #12]
 8027e9e:	6879      	ldr	r1, [r7, #4]
 8027ea0:	6809      	ldr	r1, [r1, #0]
 8027ea2:	68f8      	ldr	r0, [r7, #12]
 8027ea4:	4288      	cmp	r0, r1
 8027ea6:	da1b      	bge.n	8027ee0 <_ZN6tflite11NumElementsEPK14TfLiteIntArray+0x5a>
    count *= dims->data[i];
 8027ea8:	6878      	ldr	r0, [r7, #4]
 8027eaa:	68f9      	ldr	r1, [r7, #12]
 8027eac:	0089      	lsls	r1, r1, #2
 8027eae:	4401      	add	r1, r0
 8027eb0:	6849      	ldr	r1, [r1, #4]
 8027eb2:	17c8      	asrs	r0, r1, #31
 8027eb4:	460c      	mov	r4, r1
 8027eb6:	4605      	mov	r5, r0
 8027eb8:	6979      	ldr	r1, [r7, #20]
 8027eba:	fb04 f001 	mul.w	r0, r4, r1
 8027ebe:	6939      	ldr	r1, [r7, #16]
 8027ec0:	fb05 f101 	mul.w	r1, r5, r1
 8027ec4:	4401      	add	r1, r0
 8027ec6:	6938      	ldr	r0, [r7, #16]
 8027ec8:	fba0 2304 	umull	r2, r3, r0, r4
 8027ecc:	4419      	add	r1, r3
 8027ece:	460b      	mov	r3, r1
 8027ed0:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8027ed4:	e9c7 2304 	strd	r2, r3, [r7, #16]
  for (int i = 0; i < dims->size; ++i) {
 8027ed8:	68f9      	ldr	r1, [r7, #12]
 8027eda:	3101      	adds	r1, #1
 8027edc:	60f9      	str	r1, [r7, #12]
 8027ede:	e7de      	b.n	8027e9e <_ZN6tflite11NumElementsEPK14TfLiteIntArray+0x18>
  }
  return count;
 8027ee0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8027ee4:	4610      	mov	r0, r2
 8027ee6:	4619      	mov	r1, r3
 8027ee8:	371c      	adds	r7, #28
 8027eea:	46bd      	mov	sp, r7
 8027eec:	bcb0      	pop	{r4, r5, r7}
 8027eee:	4770      	bx	lr

08027ef0 <_ZN6tflite11NumElementsEPK12TfLiteTensor>:

inline int64_t NumElements(const TfLiteTensor* t) {
 8027ef0:	b580      	push	{r7, lr}
 8027ef2:	b082      	sub	sp, #8
 8027ef4:	af00      	add	r7, sp, #0
 8027ef6:	6078      	str	r0, [r7, #4]
  return NumElements(t->dims);
 8027ef8:	687b      	ldr	r3, [r7, #4]
 8027efa:	689b      	ldr	r3, [r3, #8]
 8027efc:	4618      	mov	r0, r3
 8027efe:	f7ff ffc2 	bl	8027e86 <_ZN6tflite11NumElementsEPK14TfLiteIntArray>
 8027f02:	4602      	mov	r2, r0
 8027f04:	460b      	mov	r3, r1
}
 8027f06:	4610      	mov	r0, r2
 8027f08:	4619      	mov	r1, r3
 8027f0a:	3708      	adds	r7, #8
 8027f0c:	46bd      	mov	sp, r7
 8027f0e:	bd80      	pop	{r7, pc}

08027f10 <_ZSt3absd>:
// 2735. std::abs(short), std::abs(signed char) and others should return int

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
 8027f10:	b480      	push	{r7}
 8027f12:	b083      	sub	sp, #12
 8027f14:	af00      	add	r7, sp, #0
 8027f16:	ed87 0b00 	vstr	d0, [r7]
 8027f1a:	683a      	ldr	r2, [r7, #0]
 8027f1c:	6879      	ldr	r1, [r7, #4]
 8027f1e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8027f22:	ec43 2b17 	vmov	d7, r2, r3
 8027f26:	eeb0 0a47 	vmov.f32	s0, s14
 8027f2a:	eef0 0a67 	vmov.f32	s1, s15
 8027f2e:	370c      	adds	r7, #12
 8027f30:	46bd      	mov	sp, r7
 8027f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027f36:	4770      	bx	lr

08027f38 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>:

namespace {

// Assumes tensor_index is a valid index (in bounds)
inline TfLiteTensor* GetTensorAtIndex(const TfLiteContext* context,
                                      int tensor_index) {
 8027f38:	b580      	push	{r7, lr}
 8027f3a:	b082      	sub	sp, #8
 8027f3c:	af00      	add	r7, sp, #0
 8027f3e:	6078      	str	r0, [r7, #4]
 8027f40:	6039      	str	r1, [r7, #0]
  if (context->tensors != nullptr) {
 8027f42:	687b      	ldr	r3, [r7, #4]
 8027f44:	689b      	ldr	r3, [r3, #8]
 8027f46:	2b00      	cmp	r3, #0
 8027f48:	d005      	beq.n	8027f56 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti+0x1e>
    return &context->tensors[tensor_index];
 8027f4a:	687b      	ldr	r3, [r7, #4]
 8027f4c:	689a      	ldr	r2, [r3, #8]
 8027f4e:	683b      	ldr	r3, [r7, #0]
 8027f50:	019b      	lsls	r3, r3, #6
 8027f52:	4413      	add	r3, r2
 8027f54:	e006      	b.n	8027f64 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti+0x2c>
  } else {
    return context->GetTensor(context, tensor_index);
 8027f56:	687b      	ldr	r3, [r7, #4]
 8027f58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8027f5a:	6839      	ldr	r1, [r7, #0]
 8027f5c:	6878      	ldr	r0, [r7, #4]
 8027f5e:	4798      	blx	r3
 8027f60:	4603      	mov	r3, r0
 8027f62:	bf00      	nop
  }
}
 8027f64:	4618      	mov	r0, r3
 8027f66:	3708      	adds	r7, #8
 8027f68:	46bd      	mov	sp, r7
 8027f6a:	bd80      	pop	{r7, pc}

08027f6c <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>:
}

// Same as above but returns -1 for invalid inputs instead of status + logging
// error.
inline int ValidateTensorIndexing(const TfLiteContext* context, int index,
                                  int max_size, const int* tensor_indices) {
 8027f6c:	b480      	push	{r7}
 8027f6e:	b087      	sub	sp, #28
 8027f70:	af00      	add	r7, sp, #0
 8027f72:	60f8      	str	r0, [r7, #12]
 8027f74:	60b9      	str	r1, [r7, #8]
 8027f76:	607a      	str	r2, [r7, #4]
 8027f78:	603b      	str	r3, [r7, #0]
  if (index >= 0 && index < max_size) {
 8027f7a:	68bb      	ldr	r3, [r7, #8]
 8027f7c:	2b00      	cmp	r3, #0
 8027f7e:	db0f      	blt.n	8027fa0 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
 8027f80:	68ba      	ldr	r2, [r7, #8]
 8027f82:	687b      	ldr	r3, [r7, #4]
 8027f84:	429a      	cmp	r2, r3
 8027f86:	da0b      	bge.n	8027fa0 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
    const int tensor_index = tensor_indices[index];
 8027f88:	68bb      	ldr	r3, [r7, #8]
 8027f8a:	009b      	lsls	r3, r3, #2
 8027f8c:	683a      	ldr	r2, [r7, #0]
 8027f8e:	4413      	add	r3, r2
 8027f90:	681b      	ldr	r3, [r3, #0]
 8027f92:	617b      	str	r3, [r7, #20]
    if (tensor_index != kTfLiteOptionalTensor) {
 8027f94:	697b      	ldr	r3, [r7, #20]
 8027f96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8027f9a:	d001      	beq.n	8027fa0 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
      return tensor_index;
 8027f9c:	697b      	ldr	r3, [r7, #20]
 8027f9e:	e001      	b.n	8027fa4 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x38>
    }
  }
  return -1;
 8027fa0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8027fa4:	4618      	mov	r0, r3
 8027fa6:	371c      	adds	r7, #28
 8027fa8:	46bd      	mov	sp, r7
 8027faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027fae:	4770      	bx	lr

08027fb0 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei>:

inline TfLiteTensor* GetMutableInput(const TfLiteContext* context,
                                     const TfLiteNode* node, int index) {
 8027fb0:	b580      	push	{r7, lr}
 8027fb2:	b086      	sub	sp, #24
 8027fb4:	af00      	add	r7, sp, #0
 8027fb6:	60f8      	str	r0, [r7, #12]
 8027fb8:	60b9      	str	r1, [r7, #8]
 8027fba:	607a      	str	r2, [r7, #4]
  const int tensor_index = ValidateTensorIndexing(
      context, index, node->inputs->size, node->inputs->data);
 8027fbc:	68bb      	ldr	r3, [r7, #8]
 8027fbe:	681b      	ldr	r3, [r3, #0]
  const int tensor_index = ValidateTensorIndexing(
 8027fc0:	681a      	ldr	r2, [r3, #0]
      context, index, node->inputs->size, node->inputs->data);
 8027fc2:	68bb      	ldr	r3, [r7, #8]
 8027fc4:	681b      	ldr	r3, [r3, #0]
 8027fc6:	3304      	adds	r3, #4
  const int tensor_index = ValidateTensorIndexing(
 8027fc8:	6879      	ldr	r1, [r7, #4]
 8027fca:	68f8      	ldr	r0, [r7, #12]
 8027fcc:	f7ff ffce 	bl	8027f6c <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>
 8027fd0:	6178      	str	r0, [r7, #20]
  if (tensor_index < 0) {
 8027fd2:	697b      	ldr	r3, [r7, #20]
 8027fd4:	2b00      	cmp	r3, #0
 8027fd6:	da01      	bge.n	8027fdc <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei+0x2c>
    return nullptr;
 8027fd8:	2300      	movs	r3, #0
 8027fda:	e005      	b.n	8027fe8 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei+0x38>
  }
  return GetTensorAtIndex(context, tensor_index);
 8027fdc:	6979      	ldr	r1, [r7, #20]
 8027fde:	68f8      	ldr	r0, [r7, #12]
 8027fe0:	f7ff ffaa 	bl	8027f38 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>
 8027fe4:	4603      	mov	r3, r0
 8027fe6:	bf00      	nop
}
 8027fe8:	4618      	mov	r0, r3
 8027fea:	3718      	adds	r7, #24
 8027fec:	46bd      	mov	sp, r7
 8027fee:	bd80      	pop	{r7, pc}

08027ff0 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>:
}

}  // anonymous namespace.

const TfLiteTensor* GetInput(const TfLiteContext* context,
                             const TfLiteNode* node, int index) {
 8027ff0:	b580      	push	{r7, lr}
 8027ff2:	b084      	sub	sp, #16
 8027ff4:	af00      	add	r7, sp, #0
 8027ff6:	60f8      	str	r0, [r7, #12]
 8027ff8:	60b9      	str	r1, [r7, #8]
 8027ffa:	607a      	str	r2, [r7, #4]
  return GetMutableInput(context, node, index);
 8027ffc:	687a      	ldr	r2, [r7, #4]
 8027ffe:	68b9      	ldr	r1, [r7, #8]
 8028000:	68f8      	ldr	r0, [r7, #12]
 8028002:	f7ff ffd5 	bl	8027fb0 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei>
 8028006:	4603      	mov	r3, r0
}
 8028008:	4618      	mov	r0, r3
 802800a:	3710      	adds	r7, #16
 802800c:	46bd      	mov	sp, r7
 802800e:	bd80      	pop	{r7, pc}

08028010 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>:
  TfLiteTensor* tensor = GetMutableInput(context, node, index);
  return tensor->is_variable ? tensor : nullptr;
}

TfLiteTensor* GetOutput(TfLiteContext* context, const TfLiteNode* node,
                        int index) {
 8028010:	b580      	push	{r7, lr}
 8028012:	b086      	sub	sp, #24
 8028014:	af00      	add	r7, sp, #0
 8028016:	60f8      	str	r0, [r7, #12]
 8028018:	60b9      	str	r1, [r7, #8]
 802801a:	607a      	str	r2, [r7, #4]
  const int tensor_index = ValidateTensorIndexing(
      context, index, node->outputs->size, node->outputs->data);
 802801c:	68bb      	ldr	r3, [r7, #8]
 802801e:	685b      	ldr	r3, [r3, #4]
  const int tensor_index = ValidateTensorIndexing(
 8028020:	681a      	ldr	r2, [r3, #0]
      context, index, node->outputs->size, node->outputs->data);
 8028022:	68bb      	ldr	r3, [r7, #8]
 8028024:	685b      	ldr	r3, [r3, #4]
 8028026:	3304      	adds	r3, #4
  const int tensor_index = ValidateTensorIndexing(
 8028028:	6879      	ldr	r1, [r7, #4]
 802802a:	68f8      	ldr	r0, [r7, #12]
 802802c:	f7ff ff9e 	bl	8027f6c <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>
 8028030:	6178      	str	r0, [r7, #20]
  if (tensor_index < 0) {
 8028032:	697b      	ldr	r3, [r7, #20]
 8028034:	2b00      	cmp	r3, #0
 8028036:	da01      	bge.n	802803c <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x2c>
    return nullptr;
 8028038:	2300      	movs	r3, #0
 802803a:	e005      	b.n	8028048 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x38>
  }
  return GetTensorAtIndex(context, tensor_index);
 802803c:	6979      	ldr	r1, [r7, #20]
 802803e:	68f8      	ldr	r0, [r7, #12]
 8028040:	f7ff ff7a 	bl	8027f38 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>
 8028044:	4603      	mov	r3, r0
 8028046:	bf00      	nop
}
 8028048:	4618      	mov	r0, r3
 802804a:	3718      	adds	r7, #24
 802804c:	46bd      	mov	sp, r7
 802804e:	bd80      	pop	{r7, pc}

08028050 <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>:
  *tensor = GetTensorAtIndex(context, tensor_index);
  return kTfLiteOk;
}

const TfLiteTensor* GetOptionalInputTensor(const TfLiteContext* context,
                                           const TfLiteNode* node, int index) {
 8028050:	b580      	push	{r7, lr}
 8028052:	b084      	sub	sp, #16
 8028054:	af00      	add	r7, sp, #0
 8028056:	60f8      	str	r0, [r7, #12]
 8028058:	60b9      	str	r1, [r7, #8]
 802805a:	607a      	str	r2, [r7, #4]
  return GetInput(context, node, index);
 802805c:	687a      	ldr	r2, [r7, #4]
 802805e:	68b9      	ldr	r1, [r7, #8]
 8028060:	68f8      	ldr	r0, [r7, #12]
 8028062:	f7ff ffc5 	bl	8027ff0 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8028066:	4603      	mov	r3, r0
}
 8028068:	4618      	mov	r0, r3
 802806a:	3710      	adds	r7, #16
 802806c:	46bd      	mov	sp, r7
 802806e:	bd80      	pop	{r7, pc}

08028070 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i>:
TfLiteStatus PopulateConvolutionQuantizationParams(
    TfLiteContext* context, const TfLiteTensor* input,
    const TfLiteTensor* filter, const TfLiteTensor* bias, TfLiteTensor* output,
    const TfLiteFusedActivation& activation, int32_t* multiplier, int* shift,
    int32_t* output_activation_min, int32_t* output_activation_max,
    int32_t* per_channel_multiplier, int* per_channel_shift, int num_channels) {
 8028070:	b5b0      	push	{r4, r5, r7, lr}
 8028072:	b09c      	sub	sp, #112	; 0x70
 8028074:	af04      	add	r7, sp, #16
 8028076:	60f8      	str	r0, [r7, #12]
 8028078:	60b9      	str	r1, [r7, #8]
 802807a:	607a      	str	r2, [r7, #4]
 802807c:	603b      	str	r3, [r7, #0]
  TF_LITE_ENSURE_EQ(context, input->quantization.type,
 802807e:	68bb      	ldr	r3, [r7, #8]
 8028080:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8028084:	2b01      	cmp	r3, #1
 8028086:	d013      	beq.n	80280b0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x40>
 8028088:	68fb      	ldr	r3, [r7, #12]
 802808a:	695c      	ldr	r4, [r3, #20]
 802808c:	68bb      	ldr	r3, [r7, #8]
 802808e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8028092:	461a      	mov	r2, r3
 8028094:	2301      	movs	r3, #1
 8028096:	9303      	str	r3, [sp, #12]
 8028098:	9202      	str	r2, [sp, #8]
 802809a:	4b98      	ldr	r3, [pc, #608]	; (80282fc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x28c>)
 802809c:	9301      	str	r3, [sp, #4]
 802809e:	4b98      	ldr	r3, [pc, #608]	; (8028300 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x290>)
 80280a0:	9300      	str	r3, [sp, #0]
 80280a2:	23e0      	movs	r3, #224	; 0xe0
 80280a4:	4a97      	ldr	r2, [pc, #604]	; (8028304 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 80280a6:	4998      	ldr	r1, [pc, #608]	; (8028308 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x298>)
 80280a8:	68f8      	ldr	r0, [r7, #12]
 80280aa:	47a0      	blx	r4
 80280ac:	2301      	movs	r3, #1
 80280ae:	e173      	b.n	8028398 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
                    kTfLiteAffineQuantization);
  TF_LITE_ENSURE_EQ(context, filter->quantization.type,
 80280b0:	687b      	ldr	r3, [r7, #4]
 80280b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80280b6:	2b01      	cmp	r3, #1
 80280b8:	d013      	beq.n	80280e2 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x72>
 80280ba:	68fb      	ldr	r3, [r7, #12]
 80280bc:	695c      	ldr	r4, [r3, #20]
 80280be:	687b      	ldr	r3, [r7, #4]
 80280c0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80280c4:	461a      	mov	r2, r3
 80280c6:	2301      	movs	r3, #1
 80280c8:	9303      	str	r3, [sp, #12]
 80280ca:	9202      	str	r2, [sp, #8]
 80280cc:	4b8b      	ldr	r3, [pc, #556]	; (80282fc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x28c>)
 80280ce:	9301      	str	r3, [sp, #4]
 80280d0:	4b8e      	ldr	r3, [pc, #568]	; (802830c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x29c>)
 80280d2:	9300      	str	r3, [sp, #0]
 80280d4:	23e2      	movs	r3, #226	; 0xe2
 80280d6:	4a8b      	ldr	r2, [pc, #556]	; (8028304 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 80280d8:	498b      	ldr	r1, [pc, #556]	; (8028308 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x298>)
 80280da:	68f8      	ldr	r0, [r7, #12]
 80280dc:	47a0      	blx	r4
 80280de:	2301      	movs	r3, #1
 80280e0:	e15a      	b.n	8028398 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
  // quantization is properly populated.
  // TF_LITE_ENSURE_EQ(context, bias->quantization.type,
  // kTfLiteAffineQuantization);

  // Check data type.
  const auto* affine_quantization =
 80280e2:	687b      	ldr	r3, [r7, #4]
 80280e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80280e6:	65bb      	str	r3, [r7, #88]	; 0x58
      reinterpret_cast<TfLiteAffineQuantization*>(filter->quantization.params);
  TF_LITE_ENSURE(context, affine_quantization);
 80280e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80280ea:	2b00      	cmp	r3, #0
 80280ec:	d10a      	bne.n	8028104 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x94>
 80280ee:	68fb      	ldr	r3, [r7, #12]
 80280f0:	695c      	ldr	r4, [r3, #20]
 80280f2:	4b87      	ldr	r3, [pc, #540]	; (8028310 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2a0>)
 80280f4:	9300      	str	r3, [sp, #0]
 80280f6:	23ed      	movs	r3, #237	; 0xed
 80280f8:	4a82      	ldr	r2, [pc, #520]	; (8028304 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 80280fa:	4986      	ldr	r1, [pc, #536]	; (8028314 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2a4>)
 80280fc:	68f8      	ldr	r0, [r7, #12]
 80280fe:	47a0      	blx	r4
 8028100:	2301      	movs	r3, #1
 8028102:	e149      	b.n	8028398 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
  TF_LITE_ENSURE(context, affine_quantization->scale);
 8028104:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8028106:	681b      	ldr	r3, [r3, #0]
 8028108:	2b00      	cmp	r3, #0
 802810a:	d10a      	bne.n	8028122 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0xb2>
 802810c:	68fb      	ldr	r3, [r7, #12]
 802810e:	695c      	ldr	r4, [r3, #20]
 8028110:	4b81      	ldr	r3, [pc, #516]	; (8028318 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2a8>)
 8028112:	9300      	str	r3, [sp, #0]
 8028114:	23ee      	movs	r3, #238	; 0xee
 8028116:	4a7b      	ldr	r2, [pc, #492]	; (8028304 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 8028118:	497e      	ldr	r1, [pc, #504]	; (8028314 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2a4>)
 802811a:	68f8      	ldr	r0, [r7, #12]
 802811c:	47a0      	blx	r4
 802811e:	2301      	movs	r3, #1
 8028120:	e13a      	b.n	8028398 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
  const bool is_per_channel = affine_quantization->scale->size > 1;
 8028122:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8028124:	681b      	ldr	r3, [r3, #0]
 8028126:	681b      	ldr	r3, [r3, #0]
 8028128:	2b01      	cmp	r3, #1
 802812a:	bfcc      	ite	gt
 802812c:	2301      	movgt	r3, #1
 802812e:	2300      	movle	r3, #0
 8028130:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  if (is_per_channel) {
 8028134:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8028138:	2b00      	cmp	r3, #0
 802813a:	d067      	beq.n	802820c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x19c>
    //  Currently only Int8/Int16 is supported for per channel quantization.
    TF_LITE_ENSURE(context,
 802813c:	68bb      	ldr	r3, [r7, #8]
 802813e:	781b      	ldrb	r3, [r3, #0]
 8028140:	2b09      	cmp	r3, #9
 8028142:	d00e      	beq.n	8028162 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0xf2>
 8028144:	68bb      	ldr	r3, [r7, #8]
 8028146:	781b      	ldrb	r3, [r3, #0]
 8028148:	2b07      	cmp	r3, #7
 802814a:	d00a      	beq.n	8028162 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0xf2>
 802814c:	68fb      	ldr	r3, [r7, #12]
 802814e:	695c      	ldr	r4, [r3, #20]
 8028150:	4b72      	ldr	r3, [pc, #456]	; (802831c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2ac>)
 8028152:	9300      	str	r3, [sp, #0]
 8028154:	23f2      	movs	r3, #242	; 0xf2
 8028156:	4a6b      	ldr	r2, [pc, #428]	; (8028304 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 8028158:	496e      	ldr	r1, [pc, #440]	; (8028314 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2a4>)
 802815a:	68f8      	ldr	r0, [r7, #12]
 802815c:	47a0      	blx	r4
 802815e:	2301      	movs	r3, #1
 8028160:	e11a      	b.n	8028398 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
                   input->type == kTfLiteInt8 || input->type == kTfLiteInt16);
    TF_LITE_ENSURE_EQ(context, filter->type, kTfLiteInt8);
 8028162:	687b      	ldr	r3, [r7, #4]
 8028164:	781b      	ldrb	r3, [r3, #0]
 8028166:	2b09      	cmp	r3, #9
 8028168:	d012      	beq.n	8028190 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x120>
 802816a:	68fb      	ldr	r3, [r7, #12]
 802816c:	695c      	ldr	r4, [r3, #20]
 802816e:	687b      	ldr	r3, [r7, #4]
 8028170:	781b      	ldrb	r3, [r3, #0]
 8028172:	461a      	mov	r2, r3
 8028174:	2309      	movs	r3, #9
 8028176:	9303      	str	r3, [sp, #12]
 8028178:	9202      	str	r2, [sp, #8]
 802817a:	4b69      	ldr	r3, [pc, #420]	; (8028320 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2b0>)
 802817c:	9301      	str	r3, [sp, #4]
 802817e:	4b69      	ldr	r3, [pc, #420]	; (8028324 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2b4>)
 8028180:	9300      	str	r3, [sp, #0]
 8028182:	23f4      	movs	r3, #244	; 0xf4
 8028184:	4a5f      	ldr	r2, [pc, #380]	; (8028304 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 8028186:	4960      	ldr	r1, [pc, #384]	; (8028308 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x298>)
 8028188:	68f8      	ldr	r0, [r7, #12]
 802818a:	47a0      	blx	r4
 802818c:	2301      	movs	r3, #1
 802818e:	e103      	b.n	8028398 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size, num_channels);
 8028190:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8028192:	681b      	ldr	r3, [r3, #0]
 8028194:	681b      	ldr	r3, [r3, #0]
 8028196:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 802819a:	429a      	cmp	r2, r3
 802819c:	d013      	beq.n	80281c6 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x156>
 802819e:	68fb      	ldr	r3, [r7, #12]
 80281a0:	695c      	ldr	r4, [r3, #20]
 80281a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80281a4:	681b      	ldr	r3, [r3, #0]
 80281a6:	681b      	ldr	r3, [r3, #0]
 80281a8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80281ac:	9203      	str	r2, [sp, #12]
 80281ae:	9302      	str	r3, [sp, #8]
 80281b0:	4b5d      	ldr	r3, [pc, #372]	; (8028328 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2b8>)
 80281b2:	9301      	str	r3, [sp, #4]
 80281b4:	4b5d      	ldr	r3, [pc, #372]	; (802832c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2bc>)
 80281b6:	9300      	str	r3, [sp, #0]
 80281b8:	23f5      	movs	r3, #245	; 0xf5
 80281ba:	4a52      	ldr	r2, [pc, #328]	; (8028304 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 80281bc:	4952      	ldr	r1, [pc, #328]	; (8028308 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x298>)
 80281be:	68f8      	ldr	r0, [r7, #12]
 80281c0:	47a0      	blx	r4
 80281c2:	2301      	movs	r3, #1
 80281c4:	e0e8      	b.n	8028398 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
    TF_LITE_ENSURE_EQ(
 80281c6:	687b      	ldr	r3, [r7, #4]
 80281c8:	689a      	ldr	r2, [r3, #8]
 80281ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80281cc:	689b      	ldr	r3, [r3, #8]
 80281ce:	009b      	lsls	r3, r3, #2
 80281d0:	4413      	add	r3, r2
 80281d2:	685b      	ldr	r3, [r3, #4]
 80281d4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80281d8:	429a      	cmp	r2, r3
 80281da:	d017      	beq.n	802820c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x19c>
 80281dc:	68fb      	ldr	r3, [r7, #12]
 80281de:	695c      	ldr	r4, [r3, #20]
 80281e0:	687b      	ldr	r3, [r7, #4]
 80281e2:	689a      	ldr	r2, [r3, #8]
 80281e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80281e6:	689b      	ldr	r3, [r3, #8]
 80281e8:	009b      	lsls	r3, r3, #2
 80281ea:	4413      	add	r3, r2
 80281ec:	685b      	ldr	r3, [r3, #4]
 80281ee:	9303      	str	r3, [sp, #12]
 80281f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80281f4:	9302      	str	r3, [sp, #8]
 80281f6:	4b4e      	ldr	r3, [pc, #312]	; (8028330 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2c0>)
 80281f8:	9301      	str	r3, [sp, #4]
 80281fa:	4b4b      	ldr	r3, [pc, #300]	; (8028328 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2b8>)
 80281fc:	9300      	str	r3, [sp, #0]
 80281fe:	23f6      	movs	r3, #246	; 0xf6
 8028200:	4a40      	ldr	r2, [pc, #256]	; (8028304 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 8028202:	4941      	ldr	r1, [pc, #260]	; (8028308 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x298>)
 8028204:	68f8      	ldr	r0, [r7, #12]
 8028206:	47a0      	blx	r4
 8028208:	2301      	movs	r3, #1
 802820a:	e0c5      	b.n	8028398 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
        context, num_channels,
        filter->dims->data[affine_quantization->quantized_dimension]);
  }

  // Populate multiplier and shift using affine quantization.
  const float input_scale = input->params.scale;
 802820c:	68bb      	ldr	r3, [r7, #8]
 802820e:	68db      	ldr	r3, [r3, #12]
 8028210:	653b      	str	r3, [r7, #80]	; 0x50
  const float output_scale = output->params.scale;
 8028212:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8028214:	68db      	ldr	r3, [r3, #12]
 8028216:	64fb      	str	r3, [r7, #76]	; 0x4c
  const float* filter_scales = affine_quantization->scale->data;
 8028218:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802821a:	681b      	ldr	r3, [r3, #0]
 802821c:	3304      	adds	r3, #4
 802821e:	64bb      	str	r3, [r7, #72]	; 0x48
  for (int i = 0; i < num_channels; ++i) {
 8028220:	2300      	movs	r3, #0
 8028222:	65fb      	str	r3, [r7, #92]	; 0x5c
 8028224:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8028226:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 802822a:	429a      	cmp	r2, r3
 802822c:	da47      	bge.n	80282be <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x24e>
    // If per-tensor quantization parameter is specified, broadcast it along the
    // quantization dimension (channels_out).
    const float scale = is_per_channel ? filter_scales[i] : filter_scales[0];
 802822e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8028232:	2b00      	cmp	r3, #0
 8028234:	d005      	beq.n	8028242 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x1d2>
 8028236:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8028238:	009b      	lsls	r3, r3, #2
 802823a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802823c:	4413      	add	r3, r2
 802823e:	681b      	ldr	r3, [r3, #0]
 8028240:	e001      	b.n	8028246 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x1d6>
 8028242:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8028244:	681b      	ldr	r3, [r3, #0]
 8028246:	647b      	str	r3, [r7, #68]	; 0x44
    const double filter_scale = static_cast<double>(scale);
 8028248:	6c78      	ldr	r0, [r7, #68]	; 0x44
 802824a:	f7d8 f987 	bl	800055c <__aeabi_f2d>
 802824e:	4602      	mov	r2, r0
 8028250:	460b      	mov	r3, r1
 8028252:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    const double effective_output_scale = static_cast<double>(input_scale) *
 8028256:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8028258:	f7d8 f980 	bl	800055c <__aeabi_f2d>
 802825c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8028260:	f7d8 f9d4 	bl	800060c <__aeabi_dmul>
 8028264:	4602      	mov	r2, r0
 8028266:	460b      	mov	r3, r1
 8028268:	4614      	mov	r4, r2
 802826a:	461d      	mov	r5, r3
                                          filter_scale /
                                          static_cast<double>(output_scale);
 802826c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 802826e:	f7d8 f975 	bl	800055c <__aeabi_f2d>
 8028272:	4602      	mov	r2, r0
 8028274:	460b      	mov	r3, r1
    const double effective_output_scale = static_cast<double>(input_scale) *
 8028276:	4620      	mov	r0, r4
 8028278:	4629      	mov	r1, r5
 802827a:	f7d8 faf1 	bl	8000860 <__aeabi_ddiv>
 802827e:	4602      	mov	r2, r0
 8028280:	460b      	mov	r3, r1
 8028282:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    int32_t significand;
    int channel_shift;
    QuantizeMultiplier(effective_output_scale, &significand, &channel_shift);
 8028286:	f107 0224 	add.w	r2, r7, #36	; 0x24
 802828a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 802828e:	4611      	mov	r1, r2
 8028290:	4618      	mov	r0, r3
 8028292:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 8028296:	f7ff fbeb 	bl	8027a70 <_ZN6tflite18QuantizeMultiplierEdPlPi>
    per_channel_multiplier[i] = significand;
 802829a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802829c:	009b      	lsls	r3, r3, #2
 802829e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80282a2:	4413      	add	r3, r2
 80282a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80282a6:	601a      	str	r2, [r3, #0]
    per_channel_shift[i] = channel_shift;
 80282a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80282aa:	009b      	lsls	r3, r3, #2
 80282ac:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80282b0:	4413      	add	r3, r2
 80282b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80282b4:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < num_channels; ++i) {
 80282b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80282b8:	3301      	adds	r3, #1
 80282ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80282bc:	e7b2      	b.n	8028224 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x1b4>
  }

  // Populate scalar quantization parameters.
  // This check on legacy quantization parameters is kept only for backward
  // compatibility.
  if (input->type == kTfLiteUInt8) {
 80282be:	68bb      	ldr	r3, [r7, #8]
 80282c0:	781b      	ldrb	r3, [r3, #0]
 80282c2:	2b03      	cmp	r3, #3
 80282c4:	d146      	bne.n	8028354 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2e4>
    // Check bias scale == input scale * filter scale.
    double real_multiplier = 0.0;
 80282c6:	f04f 0200 	mov.w	r2, #0
 80282ca:	f04f 0300 	mov.w	r3, #0
 80282ce:	e9c7 2306 	strd	r2, r3, [r7, #24]
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
 80282d2:	f107 0318 	add.w	r3, r7, #24
 80282d6:	9301      	str	r3, [sp, #4]
 80282d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80282da:	9300      	str	r3, [sp, #0]
 80282dc:	683b      	ldr	r3, [r7, #0]
 80282de:	687a      	ldr	r2, [r7, #4]
 80282e0:	68b9      	ldr	r1, [r7, #8]
 80282e2:	68f8      	ldr	r0, [r7, #12]
 80282e4:	f000 f85c 	bl	80283a0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
 80282e8:	4603      	mov	r3, r0
 80282ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80282ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80282f2:	2b00      	cmp	r3, #0
 80282f4:	d01e      	beq.n	8028334 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2c4>
 80282f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80282fa:	e04d      	b.n	8028398 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
 80282fc:	08034758 	.word	0x08034758
 8028300:	08034774 	.word	0x08034774
 8028304:	080346b0 	.word	0x080346b0
 8028308:	0803473c 	.word	0x0803473c
 802830c:	08034790 	.word	0x08034790
 8028310:	080347c4 	.word	0x080347c4
 8028314:	080347ac 	.word	0x080347ac
 8028318:	080347d8 	.word	0x080347d8
 802831c:	080347f4 	.word	0x080347f4
 8028320:	08034830 	.word	0x08034830
 8028324:	0803483c 	.word	0x0803483c
 8028328:	0803484c 	.word	0x0803484c
 802832c:	0803485c 	.word	0x0803485c
 8028330:	08034880 	.word	0x08034880
        context, input, filter, bias, output, &real_multiplier));
    int exponent;

    // Populate quantization parameters with multiplier and shift.
    QuantizeMultiplier(real_multiplier, multiplier, &exponent);
 8028334:	ed97 7b06 	vldr	d7, [r7, #24]
 8028338:	f107 0314 	add.w	r3, r7, #20
 802833c:	4619      	mov	r1, r3
 802833e:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8028340:	eeb0 0a47 	vmov.f32	s0, s14
 8028344:	eef0 0a67 	vmov.f32	s1, s15
 8028348:	f7ff fb92 	bl	8027a70 <_ZN6tflite18QuantizeMultiplierEdPlPi>
    *shift = -exponent;
 802834c:	697b      	ldr	r3, [r7, #20]
 802834e:	425a      	negs	r2, r3
 8028350:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8028352:	601a      	str	r2, [r3, #0]
  }
  if (input->type == kTfLiteInt8 || input->type == kTfLiteUInt8 ||
 8028354:	68bb      	ldr	r3, [r7, #8]
 8028356:	781b      	ldrb	r3, [r3, #0]
 8028358:	2b09      	cmp	r3, #9
 802835a:	d007      	beq.n	802836c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2fc>
 802835c:	68bb      	ldr	r3, [r7, #8]
 802835e:	781b      	ldrb	r3, [r3, #0]
 8028360:	2b03      	cmp	r3, #3
 8028362:	d003      	beq.n	802836c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2fc>
      input->type == kTfLiteInt16) {
 8028364:	68bb      	ldr	r3, [r7, #8]
 8028366:	781b      	ldrb	r3, [r3, #0]
  if (input->type == kTfLiteInt8 || input->type == kTfLiteUInt8 ||
 8028368:	2b07      	cmp	r3, #7
 802836a:	d114      	bne.n	8028396 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x326>
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
 802836c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802836e:	7819      	ldrb	r1, [r3, #0]
 8028370:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8028374:	9300      	str	r3, [sp, #0]
 8028376:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 802837a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 802837c:	68f8      	ldr	r0, [r7, #12]
 802837e:	f000 f99b 	bl	80286b8 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
 8028382:	4603      	mov	r3, r0
 8028384:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8028388:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 802838c:	2b00      	cmp	r3, #0
 802838e:	d002      	beq.n	8028396 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x326>
 8028390:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8028394:	e000      	b.n	8028398 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
        context, activation, output, output_activation_min,
        output_activation_max));
  }
  return kTfLiteOk;
 8028396:	2300      	movs	r3, #0
}
 8028398:	4618      	mov	r0, r3
 802839a:	3760      	adds	r7, #96	; 0x60
 802839c:	46bd      	mov	sp, r7
 802839e:	bdb0      	pop	{r4, r5, r7, pc}

080283a0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>:
TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              const TfLiteTensor* bias,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 80283a0:	b5b0      	push	{r4, r5, r7, lr}
 80283a2:	b08e      	sub	sp, #56	; 0x38
 80283a4:	af02      	add	r7, sp, #8
 80283a6:	60f8      	str	r0, [r7, #12]
 80283a8:	60b9      	str	r1, [r7, #8]
 80283aa:	607a      	str	r2, [r7, #4]
 80283ac:	603b      	str	r3, [r7, #0]
  const double input_product_scale = static_cast<double>(input->params.scale) *
 80283ae:	68bb      	ldr	r3, [r7, #8]
 80283b0:	68db      	ldr	r3, [r3, #12]
 80283b2:	4618      	mov	r0, r3
 80283b4:	f7d8 f8d2 	bl	800055c <__aeabi_f2d>
 80283b8:	4604      	mov	r4, r0
 80283ba:	460d      	mov	r5, r1
                                     static_cast<double>(filter->params.scale);
 80283bc:	687b      	ldr	r3, [r7, #4]
 80283be:	68db      	ldr	r3, [r3, #12]
 80283c0:	4618      	mov	r0, r3
 80283c2:	f7d8 f8cb 	bl	800055c <__aeabi_f2d>
 80283c6:	4602      	mov	r2, r0
 80283c8:	460b      	mov	r3, r1
  const double input_product_scale = static_cast<double>(input->params.scale) *
 80283ca:	4620      	mov	r0, r4
 80283cc:	4629      	mov	r1, r5
 80283ce:	f7d8 f91d 	bl	800060c <__aeabi_dmul>
 80283d2:	4602      	mov	r2, r0
 80283d4:	460b      	mov	r3, r1
 80283d6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // The following conditions must be guaranteed by the training pipeline.
  if (bias) {
 80283da:	683b      	ldr	r3, [r7, #0]
 80283dc:	2b00      	cmp	r3, #0
 80283de:	d04b      	beq.n	8028478 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd8>
    const double bias_scale = static_cast<double>(bias->params.scale);
 80283e0:	683b      	ldr	r3, [r7, #0]
 80283e2:	68db      	ldr	r3, [r3, #12]
 80283e4:	4618      	mov	r0, r3
 80283e6:	f7d8 f8b9 	bl	800055c <__aeabi_f2d>
 80283ea:	4602      	mov	r2, r0
 80283ec:	460b      	mov	r3, r1
 80283ee:	e9c7 2308 	strd	r2, r3, [r7, #32]
    // bias * (bias_scale - input_product_scale) / output_scale should be
    // a small number for an integer.
    // Since normally bias should be within a small range.
    // We should expect (bias_scale - input_product_scale) / output_scale to
    // be a small number like 0.02.
    const double scale_diff = std::abs(input_product_scale - bias_scale);
 80283f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80283f6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80283fa:	f7d7 ff4f 	bl	800029c <__aeabi_dsub>
 80283fe:	4602      	mov	r2, r0
 8028400:	460b      	mov	r3, r1
 8028402:	ec43 2b17 	vmov	d7, r2, r3
 8028406:	eeb0 0a47 	vmov.f32	s0, s14
 802840a:	eef0 0a67 	vmov.f32	s1, s15
 802840e:	f7ff fd7f 	bl	8027f10 <_ZSt3absd>
 8028412:	ed87 0b06 	vstr	d0, [r7, #24]
    const double output_scale = static_cast<double>(output->params.scale);
 8028416:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8028418:	68db      	ldr	r3, [r3, #12]
 802841a:	4618      	mov	r0, r3
 802841c:	f7d8 f89e 	bl	800055c <__aeabi_f2d>
 8028420:	4602      	mov	r2, r0
 8028422:	460b      	mov	r3, r1
 8028424:	e9c7 2304 	strd	r2, r3, [r7, #16]

    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
 8028428:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 802842c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8028430:	f7d8 fa16 	bl	8000860 <__aeabi_ddiv>
 8028434:	4602      	mov	r2, r0
 8028436:	460b      	mov	r3, r1
 8028438:	4610      	mov	r0, r2
 802843a:	4619      	mov	r1, r3
 802843c:	2301      	movs	r3, #1
 802843e:	461c      	mov	r4, r3
 8028440:	a318      	add	r3, pc, #96	; (adr r3, 80284a4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x104>)
 8028442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028446:	f7d8 fb5d 	bl	8000b04 <__aeabi_dcmple>
 802844a:	4603      	mov	r3, r0
 802844c:	2b00      	cmp	r3, #0
 802844e:	d101      	bne.n	8028454 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xb4>
 8028450:	2300      	movs	r3, #0
 8028452:	461c      	mov	r4, r3
 8028454:	b2e3      	uxtb	r3, r4
 8028456:	f083 0301 	eor.w	r3, r3, #1
 802845a:	b2db      	uxtb	r3, r3
 802845c:	2b00      	cmp	r3, #0
 802845e:	d00b      	beq.n	8028478 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd8>
 8028460:	68fb      	ldr	r3, [r7, #12]
 8028462:	695c      	ldr	r4, [r3, #20]
 8028464:	4b0c      	ldr	r3, [pc, #48]	; (8028498 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xf8>)
 8028466:	9300      	str	r3, [sp, #0]
 8028468:	f44f 73a2 	mov.w	r3, #324	; 0x144
 802846c:	4a0b      	ldr	r2, [pc, #44]	; (802849c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xfc>)
 802846e:	490c      	ldr	r1, [pc, #48]	; (80284a0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x100>)
 8028470:	68f8      	ldr	r0, [r7, #12]
 8028472:	47a0      	blx	r4
 8028474:	2301      	movs	r3, #1
 8028476:	e009      	b.n	802848c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xec>
  }
  return GetQuantizedConvolutionMultipler(context, input, filter, output,
 8028478:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802847a:	9300      	str	r3, [sp, #0]
 802847c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802847e:	687a      	ldr	r2, [r7, #4]
 8028480:	68b9      	ldr	r1, [r7, #8]
 8028482:	68f8      	ldr	r0, [r7, #12]
 8028484:	f000 f812 	bl	80284ac <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>
 8028488:	4603      	mov	r3, r0
                                          multiplier);
 802848a:	bf00      	nop
}
 802848c:	4618      	mov	r0, r3
 802848e:	3730      	adds	r7, #48	; 0x30
 8028490:	46bd      	mov	sp, r7
 8028492:	bdb0      	pop	{r4, r5, r7, pc}
 8028494:	f3af 8000 	nop.w
 8028498:	080348c0 	.word	0x080348c0
 802849c:	080346b0 	.word	0x080346b0
 80284a0:	080347ac 	.word	0x080347ac
 80284a4:	47ae147b 	.word	0x47ae147b
 80284a8:	3f947ae1 	.word	0x3f947ae1

080284ac <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>:

TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 80284ac:	b590      	push	{r4, r7, lr}
 80284ae:	b089      	sub	sp, #36	; 0x24
 80284b0:	af02      	add	r7, sp, #8
 80284b2:	60f8      	str	r0, [r7, #12]
 80284b4:	60b9      	str	r1, [r7, #8]
 80284b6:	607a      	str	r2, [r7, #4]
 80284b8:	603b      	str	r3, [r7, #0]
  const double input_product_scale =
      static_cast<double>(input->params.scale * filter->params.scale);
 80284ba:	68bb      	ldr	r3, [r7, #8]
 80284bc:	ed93 7a03 	vldr	s14, [r3, #12]
 80284c0:	687b      	ldr	r3, [r7, #4]
 80284c2:	edd3 7a03 	vldr	s15, [r3, #12]
 80284c6:	ee67 7a27 	vmul.f32	s15, s14, s15
  const double input_product_scale =
 80284ca:	ee17 0a90 	vmov	r0, s15
 80284ce:	f7d8 f845 	bl	800055c <__aeabi_f2d>
 80284d2:	4602      	mov	r2, r0
 80284d4:	460b      	mov	r3, r1
 80284d6:	e9c7 2304 	strd	r2, r3, [r7, #16]
  TF_LITE_ENSURE(context, input_product_scale >= 0);
 80284da:	2301      	movs	r3, #1
 80284dc:	461c      	mov	r4, r3
 80284de:	f04f 0200 	mov.w	r2, #0
 80284e2:	f04f 0300 	mov.w	r3, #0
 80284e6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80284ea:	f7d8 fb15 	bl	8000b18 <__aeabi_dcmpge>
 80284ee:	4603      	mov	r3, r0
 80284f0:	2b00      	cmp	r3, #0
 80284f2:	d101      	bne.n	80284f8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x4c>
 80284f4:	2300      	movs	r3, #0
 80284f6:	461c      	mov	r4, r3
 80284f8:	b2e3      	uxtb	r3, r4
 80284fa:	f083 0301 	eor.w	r3, r3, #1
 80284fe:	b2db      	uxtb	r3, r3
 8028500:	2b00      	cmp	r3, #0
 8028502:	d00b      	beq.n	802851c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x70>
 8028504:	68fb      	ldr	r3, [r7, #12]
 8028506:	695c      	ldr	r4, [r3, #20]
 8028508:	4b0f      	ldr	r3, [pc, #60]	; (8028548 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x9c>)
 802850a:	9300      	str	r3, [sp, #0]
 802850c:	f240 1351 	movw	r3, #337	; 0x151
 8028510:	4a0e      	ldr	r2, [pc, #56]	; (802854c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0xa0>)
 8028512:	490f      	ldr	r1, [pc, #60]	; (8028550 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0xa4>)
 8028514:	68f8      	ldr	r0, [r7, #12]
 8028516:	47a0      	blx	r4
 8028518:	2301      	movs	r3, #1
 802851a:	e010      	b.n	802853e <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x92>
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
 802851c:	683b      	ldr	r3, [r7, #0]
 802851e:	68db      	ldr	r3, [r3, #12]
 8028520:	4618      	mov	r0, r3
 8028522:	f7d8 f81b 	bl	800055c <__aeabi_f2d>
 8028526:	4602      	mov	r2, r0
 8028528:	460b      	mov	r3, r1
 802852a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 802852e:	f7d8 f997 	bl	8000860 <__aeabi_ddiv>
 8028532:	4602      	mov	r2, r0
 8028534:	460b      	mov	r3, r1
 8028536:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8028538:	e9c1 2300 	strd	r2, r3, [r1]

  return kTfLiteOk;
 802853c:	2300      	movs	r3, #0
}
 802853e:	4618      	mov	r0, r3
 8028540:	371c      	adds	r7, #28
 8028542:	46bd      	mov	sp, r7
 8028544:	bd90      	pop	{r4, r7, pc}
 8028546:	bf00      	nop
 8028548:	080348e4 	.word	0x080348e4
 802854c:	080346b0 	.word	0x080346b0
 8028550:	080347ac 	.word	0x080347ac

08028554 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>:
                                           TfLiteTensor* output,
                                           int32_t* act_min, int32_t* act_max) {
  const auto scale = output->params.scale;
  const auto zero_point = output->params.zero_point;

  auto quantize = [scale, zero_point](float f) {
 8028554:	b580      	push	{r7, lr}
 8028556:	b082      	sub	sp, #8
 8028558:	af00      	add	r7, sp, #0
 802855a:	6078      	str	r0, [r7, #4]
 802855c:	ed87 0a00 	vstr	s0, [r7]
 8028560:	687b      	ldr	r3, [r7, #4]
 8028562:	edd3 7a00 	vldr	s15, [r3]
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
 8028566:	ed97 7a00 	vldr	s14, [r7]
 802856a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 802856e:	eeb0 0a66 	vmov.f32	s0, s13
 8028572:	f7ff fc25 	bl	8027dc0 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 8028576:	eef0 7a40 	vmov.f32	s15, s0
 802857a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802857e:	ee17 2a90 	vmov	r2, s15
  auto quantize = [scale, zero_point](float f) {
 8028582:	687b      	ldr	r3, [r7, #4]
 8028584:	685b      	ldr	r3, [r3, #4]
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
 8028586:	4413      	add	r3, r2
  };
 8028588:	4618      	mov	r0, r3
 802858a:	3708      	adds	r7, #8
 802858c:	46bd      	mov	sp, r7
 802858e:	bd80      	pop	{r7, pc}

08028590 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_>:
                                           int32_t* act_min, int32_t* act_max) {
 8028590:	b580      	push	{r7, lr}
 8028592:	b08e      	sub	sp, #56	; 0x38
 8028594:	af00      	add	r7, sp, #0
 8028596:	60b9      	str	r1, [r7, #8]
 8028598:	607a      	str	r2, [r7, #4]
 802859a:	603b      	str	r3, [r7, #0]
 802859c:	4603      	mov	r3, r0
 802859e:	73fb      	strb	r3, [r7, #15]
  const auto scale = output->params.scale;
 80285a0:	683b      	ldr	r3, [r7, #0]
 80285a2:	68db      	ldr	r3, [r3, #12]
 80285a4:	637b      	str	r3, [r7, #52]	; 0x34
  const auto zero_point = output->params.zero_point;
 80285a6:	683b      	ldr	r3, [r7, #0]
 80285a8:	691b      	ldr	r3, [r3, #16]
 80285aa:	633b      	str	r3, [r7, #48]	; 0x30
  };
 80285ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80285ae:	617b      	str	r3, [r7, #20]
 80285b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80285b2:	61bb      	str	r3, [r7, #24]

  if (activation == kTfLiteActRelu) {
 80285b4:	7bfb      	ldrb	r3, [r7, #15]
 80285b6:	2b01      	cmp	r3, #1
 80285b8:	d118      	bne.n	80285ec <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x5c>
    *act_min = std::max(qmin, quantize(0.0));
 80285ba:	f107 0314 	add.w	r3, r7, #20
 80285be:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 80286b4 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x124>
 80285c2:	4618      	mov	r0, r3
 80285c4:	f7ff ffc6 	bl	8028554 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 80285c8:	4603      	mov	r3, r0
 80285ca:	61fb      	str	r3, [r7, #28]
 80285cc:	f107 021c 	add.w	r2, r7, #28
 80285d0:	f107 0308 	add.w	r3, r7, #8
 80285d4:	4611      	mov	r1, r2
 80285d6:	4618      	mov	r0, r3
 80285d8:	f000 f8d6 	bl	8028788 <_ZSt3maxIlERKT_S2_S2_>
 80285dc:	4603      	mov	r3, r0
 80285de:	681a      	ldr	r2, [r3, #0]
 80285e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80285e2:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 80285e4:	687a      	ldr	r2, [r7, #4]
 80285e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80285e8:	601a      	str	r2, [r3, #0]
    *act_max = std::min(qmax, quantize(1.0));
  } else {
    *act_min = qmin;
    *act_max = qmax;
  }
}
 80285ea:	e05f      	b.n	80286ac <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x11c>
  } else if (activation == kTfLiteActRelu6) {
 80285ec:	7bfb      	ldrb	r3, [r7, #15]
 80285ee:	2b03      	cmp	r3, #3
 80285f0:	d129      	bne.n	8028646 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0xb6>
    *act_min = std::max(qmin, quantize(0.0));
 80285f2:	f107 0314 	add.w	r3, r7, #20
 80285f6:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 80286b4 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x124>
 80285fa:	4618      	mov	r0, r3
 80285fc:	f7ff ffaa 	bl	8028554 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 8028600:	4603      	mov	r3, r0
 8028602:	623b      	str	r3, [r7, #32]
 8028604:	f107 0220 	add.w	r2, r7, #32
 8028608:	f107 0308 	add.w	r3, r7, #8
 802860c:	4611      	mov	r1, r2
 802860e:	4618      	mov	r0, r3
 8028610:	f000 f8ba 	bl	8028788 <_ZSt3maxIlERKT_S2_S2_>
 8028614:	4603      	mov	r3, r0
 8028616:	681a      	ldr	r2, [r3, #0]
 8028618:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802861a:	601a      	str	r2, [r3, #0]
    *act_max = std::min(qmax, quantize(6.0));
 802861c:	f107 0314 	add.w	r3, r7, #20
 8028620:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 8028624:	4618      	mov	r0, r3
 8028626:	f7ff ff95 	bl	8028554 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 802862a:	4603      	mov	r3, r0
 802862c:	627b      	str	r3, [r7, #36]	; 0x24
 802862e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8028632:	1d3b      	adds	r3, r7, #4
 8028634:	4611      	mov	r1, r2
 8028636:	4618      	mov	r0, r3
 8028638:	f000 f892 	bl	8028760 <_ZSt3minIlERKT_S2_S2_>
 802863c:	4603      	mov	r3, r0
 802863e:	681a      	ldr	r2, [r3, #0]
 8028640:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8028642:	601a      	str	r2, [r3, #0]
}
 8028644:	e032      	b.n	80286ac <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x11c>
  } else if (activation == kTfLiteActReluN1To1) {
 8028646:	7bfb      	ldrb	r3, [r7, #15]
 8028648:	2b02      	cmp	r3, #2
 802864a:	d129      	bne.n	80286a0 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x110>
    *act_min = std::max(qmin, quantize(-1.0));
 802864c:	f107 0314 	add.w	r3, r7, #20
 8028650:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8028654:	4618      	mov	r0, r3
 8028656:	f7ff ff7d 	bl	8028554 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 802865a:	4603      	mov	r3, r0
 802865c:	62bb      	str	r3, [r7, #40]	; 0x28
 802865e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8028662:	f107 0308 	add.w	r3, r7, #8
 8028666:	4611      	mov	r1, r2
 8028668:	4618      	mov	r0, r3
 802866a:	f000 f88d 	bl	8028788 <_ZSt3maxIlERKT_S2_S2_>
 802866e:	4603      	mov	r3, r0
 8028670:	681a      	ldr	r2, [r3, #0]
 8028672:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8028674:	601a      	str	r2, [r3, #0]
    *act_max = std::min(qmax, quantize(1.0));
 8028676:	f107 0314 	add.w	r3, r7, #20
 802867a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 802867e:	4618      	mov	r0, r3
 8028680:	f7ff ff68 	bl	8028554 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 8028684:	4603      	mov	r3, r0
 8028686:	62fb      	str	r3, [r7, #44]	; 0x2c
 8028688:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 802868c:	1d3b      	adds	r3, r7, #4
 802868e:	4611      	mov	r1, r2
 8028690:	4618      	mov	r0, r3
 8028692:	f000 f865 	bl	8028760 <_ZSt3minIlERKT_S2_S2_>
 8028696:	4603      	mov	r3, r0
 8028698:	681a      	ldr	r2, [r3, #0]
 802869a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802869c:	601a      	str	r2, [r3, #0]
}
 802869e:	e005      	b.n	80286ac <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x11c>
    *act_min = qmin;
 80286a0:	68ba      	ldr	r2, [r7, #8]
 80286a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80286a4:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 80286a6:	687a      	ldr	r2, [r7, #4]
 80286a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80286aa:	601a      	str	r2, [r3, #0]
}
 80286ac:	bf00      	nop
 80286ae:	3738      	adds	r7, #56	; 0x38
 80286b0:	46bd      	mov	sp, r7
 80286b2:	bd80      	pop	{r7, pc}
 80286b4:	00000000 	.word	0x00000000

080286b8 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>:

TfLiteStatus CalculateActivationRangeQuantized(TfLiteContext* context,
                                               TfLiteFusedActivation activation,
                                               TfLiteTensor* output,
                                               int32_t* act_min,
                                               int32_t* act_max) {
 80286b8:	b590      	push	{r4, r7, lr}
 80286ba:	b089      	sub	sp, #36	; 0x24
 80286bc:	af02      	add	r7, sp, #8
 80286be:	60f8      	str	r0, [r7, #12]
 80286c0:	607a      	str	r2, [r7, #4]
 80286c2:	603b      	str	r3, [r7, #0]
 80286c4:	460b      	mov	r3, r1
 80286c6:	72fb      	strb	r3, [r7, #11]
  int32_t qmin = 0;
 80286c8:	2300      	movs	r3, #0
 80286ca:	617b      	str	r3, [r7, #20]
  int32_t qmax = 0;
 80286cc:	2300      	movs	r3, #0
 80286ce:	613b      	str	r3, [r7, #16]
  if (output->type == kTfLiteUInt8) {
 80286d0:	687b      	ldr	r3, [r7, #4]
 80286d2:	781b      	ldrb	r3, [r3, #0]
 80286d4:	2b03      	cmp	r3, #3
 80286d6:	d108      	bne.n	80286ea <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x32>
    qmin = std::numeric_limits<uint8_t>::min();
 80286d8:	f7ff fb93 	bl	8027e02 <_ZNSt14numeric_limitsIhE3minEv>
 80286dc:	4603      	mov	r3, r0
 80286de:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<uint8_t>::max();
 80286e0:	f7ff fb97 	bl	8027e12 <_ZNSt14numeric_limitsIhE3maxEv>
 80286e4:	4603      	mov	r3, r0
 80286e6:	613b      	str	r3, [r7, #16]
 80286e8:	e025      	b.n	8028736 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else if (output->type == kTfLiteInt8) {
 80286ea:	687b      	ldr	r3, [r7, #4]
 80286ec:	781b      	ldrb	r3, [r3, #0]
 80286ee:	2b09      	cmp	r3, #9
 80286f0:	d108      	bne.n	8028704 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x4c>
    qmin = std::numeric_limits<int8_t>::min();
 80286f2:	f7ff fb75 	bl	8027de0 <_ZNSt14numeric_limitsIaE3minEv>
 80286f6:	4603      	mov	r3, r0
 80286f8:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int8_t>::max();
 80286fa:	f7ff fb7a 	bl	8027df2 <_ZNSt14numeric_limitsIaE3maxEv>
 80286fe:	4603      	mov	r3, r0
 8028700:	613b      	str	r3, [r7, #16]
 8028702:	e018      	b.n	8028736 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else if (output->type == kTfLiteInt16) {
 8028704:	687b      	ldr	r3, [r7, #4]
 8028706:	781b      	ldrb	r3, [r3, #0]
 8028708:	2b07      	cmp	r3, #7
 802870a:	d108      	bne.n	802871e <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x66>
    qmin = std::numeric_limits<int16_t>::min();
 802870c:	f7ff fb8a 	bl	8027e24 <_ZNSt14numeric_limitsIsE3minEv>
 8028710:	4603      	mov	r3, r0
 8028712:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int16_t>::max();
 8028714:	f7ff fb90 	bl	8027e38 <_ZNSt14numeric_limitsIsE3maxEv>
 8028718:	4603      	mov	r3, r0
 802871a:	613b      	str	r3, [r7, #16]
 802871c:	e00b      	b.n	8028736 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else {
    TF_LITE_ENSURE(context, false);
 802871e:	68fb      	ldr	r3, [r7, #12]
 8028720:	695c      	ldr	r4, [r3, #20]
 8028722:	4b0c      	ldr	r3, [pc, #48]	; (8028754 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x9c>)
 8028724:	9300      	str	r3, [sp, #0]
 8028726:	f44f 73c2 	mov.w	r3, #388	; 0x184
 802872a:	4a0b      	ldr	r2, [pc, #44]	; (8028758 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa0>)
 802872c:	490b      	ldr	r1, [pc, #44]	; (802875c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa4>)
 802872e:	68f8      	ldr	r0, [r7, #12]
 8028730:	47a0      	blx	r4
 8028732:	2301      	movs	r3, #1
 8028734:	e00a      	b.n	802874c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x94>
  }

  CalculateActivationRangeQuantizedImpl(activation, qmin, qmax, output, act_min,
 8028736:	7af8      	ldrb	r0, [r7, #11]
 8028738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802873a:	9301      	str	r3, [sp, #4]
 802873c:	683b      	ldr	r3, [r7, #0]
 802873e:	9300      	str	r3, [sp, #0]
 8028740:	687b      	ldr	r3, [r7, #4]
 8028742:	693a      	ldr	r2, [r7, #16]
 8028744:	6979      	ldr	r1, [r7, #20]
 8028746:	f7ff ff23 	bl	8028590 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_>
                                        act_max);
  return kTfLiteOk;
 802874a:	2300      	movs	r3, #0
}
 802874c:	4618      	mov	r0, r3
 802874e:	371c      	adds	r7, #28
 8028750:	46bd      	mov	sp, r7
 8028752:	bd90      	pop	{r4, r7, pc}
 8028754:	08034900 	.word	0x08034900
 8028758:	080346b0 	.word	0x080346b0
 802875c:	080347ac 	.word	0x080347ac

08028760 <_ZSt3minIlERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8028760:	b480      	push	{r7}
 8028762:	b083      	sub	sp, #12
 8028764:	af00      	add	r7, sp, #0
 8028766:	6078      	str	r0, [r7, #4]
 8028768:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 802876a:	683b      	ldr	r3, [r7, #0]
 802876c:	681a      	ldr	r2, [r3, #0]
 802876e:	687b      	ldr	r3, [r7, #4]
 8028770:	681b      	ldr	r3, [r3, #0]
 8028772:	429a      	cmp	r2, r3
 8028774:	da01      	bge.n	802877a <_ZSt3minIlERKT_S2_S2_+0x1a>
	return __b;
 8028776:	683b      	ldr	r3, [r7, #0]
 8028778:	e000      	b.n	802877c <_ZSt3minIlERKT_S2_S2_+0x1c>
      return __a;
 802877a:	687b      	ldr	r3, [r7, #4]
    }
 802877c:	4618      	mov	r0, r3
 802877e:	370c      	adds	r7, #12
 8028780:	46bd      	mov	sp, r7
 8028782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028786:	4770      	bx	lr

08028788 <_ZSt3maxIlERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8028788:	b480      	push	{r7}
 802878a:	b083      	sub	sp, #12
 802878c:	af00      	add	r7, sp, #0
 802878e:	6078      	str	r0, [r7, #4]
 8028790:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8028792:	687b      	ldr	r3, [r7, #4]
 8028794:	681a      	ldr	r2, [r3, #0]
 8028796:	683b      	ldr	r3, [r7, #0]
 8028798:	681b      	ldr	r3, [r3, #0]
 802879a:	429a      	cmp	r2, r3
 802879c:	da01      	bge.n	80287a2 <_ZSt3maxIlERKT_S2_S2_+0x1a>
	return __b;
 802879e:	683b      	ldr	r3, [r7, #0]
 80287a0:	e000      	b.n	80287a4 <_ZSt3maxIlERKT_S2_S2_+0x1c>
      return __a;
 80287a2:	687b      	ldr	r3, [r7, #4]
    }
 80287a4:	4618      	mov	r0, r3
 80287a6:	370c      	adds	r7, #12
 80287a8:	46bd      	mov	sp, r7
 80287aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80287ae:	4770      	bx	lr

080287b0 <_ZN6tflite12RuntimeShapeC1Ev>:
  // larger shapes are separately allocated.
  static constexpr int kMaxSmallSize = 5;

  RuntimeShape& operator=(RuntimeShape const&) = delete;

  RuntimeShape() : size_(0) {}
 80287b0:	b480      	push	{r7}
 80287b2:	b083      	sub	sp, #12
 80287b4:	af00      	add	r7, sp, #0
 80287b6:	6078      	str	r0, [r7, #4]
 80287b8:	687b      	ldr	r3, [r7, #4]
 80287ba:	2200      	movs	r2, #0
 80287bc:	601a      	str	r2, [r3, #0]
 80287be:	687b      	ldr	r3, [r7, #4]
 80287c0:	4618      	mov	r0, r3
 80287c2:	370c      	adds	r7, #12
 80287c4:	46bd      	mov	sp, r7
 80287c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80287ca:	4770      	bx	lr

080287cc <_ZN6tflite12RuntimeShapeC1EiPKl>:
    for (int i = 0; i < shape_size; ++i) {
      SetDim(i, value);
    }
  }

  RuntimeShape(int dimensions_count, const int32_t* dims_data) : size_(0) {
 80287cc:	b580      	push	{r7, lr}
 80287ce:	b084      	sub	sp, #16
 80287d0:	af00      	add	r7, sp, #0
 80287d2:	60f8      	str	r0, [r7, #12]
 80287d4:	60b9      	str	r1, [r7, #8]
 80287d6:	607a      	str	r2, [r7, #4]
 80287d8:	68fb      	ldr	r3, [r7, #12]
 80287da:	2200      	movs	r2, #0
 80287dc:	601a      	str	r2, [r3, #0]
    ReplaceWith(dimensions_count, dims_data);
 80287de:	687a      	ldr	r2, [r7, #4]
 80287e0:	68b9      	ldr	r1, [r7, #8]
 80287e2:	68f8      	ldr	r0, [r7, #12]
 80287e4:	f000 f866 	bl	80288b4 <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>
  }
 80287e8:	68fb      	ldr	r3, [r7, #12]
 80287ea:	4618      	mov	r0, r3
 80287ec:	3710      	adds	r7, #16
 80287ee:	46bd      	mov	sp, r7
 80287f0:	bd80      	pop	{r7, pc}

080287f2 <_ZN6tflite12RuntimeShapeD1Ev>:
    return this->size_ == comp.size_ &&
           std::memcmp(DimsData(), comp.DimsData(), size_ * sizeof(int32_t)) ==
               0;
  }

  ~RuntimeShape() {
 80287f2:	b580      	push	{r7, lr}
 80287f4:	b082      	sub	sp, #8
 80287f6:	af00      	add	r7, sp, #0
 80287f8:	6078      	str	r0, [r7, #4]
    if (size_ > kMaxSmallSize) {
 80287fa:	687b      	ldr	r3, [r7, #4]
 80287fc:	681b      	ldr	r3, [r3, #0]
 80287fe:	2b05      	cmp	r3, #5
 8028800:	dd08      	ble.n	8028814 <_ZN6tflite12RuntimeShapeD1Ev+0x22>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else  // TF_LITE_STATIC_MEMORY
      delete[] dims_pointer_;
 8028802:	687b      	ldr	r3, [r7, #4]
 8028804:	685b      	ldr	r3, [r3, #4]
 8028806:	2b00      	cmp	r3, #0
 8028808:	d004      	beq.n	8028814 <_ZN6tflite12RuntimeShapeD1Ev+0x22>
 802880a:	687b      	ldr	r3, [r7, #4]
 802880c:	685b      	ldr	r3, [r3, #4]
 802880e:	4618      	mov	r0, r3
 8028810:	f006 ffd2 	bl	802f7b8 <_ZdaPv>
#endif  // TF_LITE_STATIC_MEMORY
    }
  }
 8028814:	687b      	ldr	r3, [r7, #4]
 8028816:	4618      	mov	r0, r3
 8028818:	3708      	adds	r7, #8
 802881a:	46bd      	mov	sp, r7
 802881c:	bd80      	pop	{r7, pc}

0802881e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>:

  inline int32_t DimensionsCount() const { return size_; }
 802881e:	b480      	push	{r7}
 8028820:	b083      	sub	sp, #12
 8028822:	af00      	add	r7, sp, #0
 8028824:	6078      	str	r0, [r7, #4]
 8028826:	687b      	ldr	r3, [r7, #4]
 8028828:	681b      	ldr	r3, [r3, #0]
 802882a:	4618      	mov	r0, r3
 802882c:	370c      	adds	r7, #12
 802882e:	46bd      	mov	sp, r7
 8028830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028834:	4770      	bx	lr

08028836 <_ZN6tflite12RuntimeShape8DimsDataEv>:
    } else {
      dims_[i] = val;
    }
  }

  inline int32_t* DimsData() {
 8028836:	b480      	push	{r7}
 8028838:	b083      	sub	sp, #12
 802883a:	af00      	add	r7, sp, #0
 802883c:	6078      	str	r0, [r7, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 802883e:	687b      	ldr	r3, [r7, #4]
 8028840:	681b      	ldr	r3, [r3, #0]
 8028842:	2b05      	cmp	r3, #5
 8028844:	dd02      	ble.n	802884c <_ZN6tflite12RuntimeShape8DimsDataEv+0x16>
 8028846:	687b      	ldr	r3, [r7, #4]
 8028848:	685b      	ldr	r3, [r3, #4]
 802884a:	e001      	b.n	8028850 <_ZN6tflite12RuntimeShape8DimsDataEv+0x1a>
 802884c:	687b      	ldr	r3, [r7, #4]
 802884e:	3304      	adds	r3, #4
  }
 8028850:	4618      	mov	r0, r3
 8028852:	370c      	adds	r7, #12
 8028854:	46bd      	mov	sp, r7
 8028856:	f85d 7b04 	ldr.w	r7, [sp], #4
 802885a:	4770      	bx	lr

0802885c <_ZN6tflite12RuntimeShape6ResizeEi>:
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
  }
  // The caller must ensure that the shape is no bigger than 5-D.
  inline const int32_t* DimsDataUpTo5D() const { return dims_; }

  inline void Resize(int dimensions_count) {
 802885c:	b580      	push	{r7, lr}
 802885e:	b082      	sub	sp, #8
 8028860:	af00      	add	r7, sp, #0
 8028862:	6078      	str	r0, [r7, #4]
 8028864:	6039      	str	r1, [r7, #0]
    if (size_ > kMaxSmallSize) {
 8028866:	687b      	ldr	r3, [r7, #4]
 8028868:	681b      	ldr	r3, [r3, #0]
 802886a:	2b05      	cmp	r3, #5
 802886c:	dd08      	ble.n	8028880 <_ZN6tflite12RuntimeShape6ResizeEi+0x24>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else  // TF_LITE_STATIC_MEMORY
      delete[] dims_pointer_;
 802886e:	687b      	ldr	r3, [r7, #4]
 8028870:	685b      	ldr	r3, [r3, #4]
 8028872:	2b00      	cmp	r3, #0
 8028874:	d004      	beq.n	8028880 <_ZN6tflite12RuntimeShape6ResizeEi+0x24>
 8028876:	687b      	ldr	r3, [r7, #4]
 8028878:	685b      	ldr	r3, [r3, #4]
 802887a:	4618      	mov	r0, r3
 802887c:	f006 ff9c 	bl	802f7b8 <_ZdaPv>
#endif  // TF_LITE_STATIC_MEMORY
    }
    size_ = dimensions_count;
 8028880:	687b      	ldr	r3, [r7, #4]
 8028882:	683a      	ldr	r2, [r7, #0]
 8028884:	601a      	str	r2, [r3, #0]
    if (dimensions_count > kMaxSmallSize) {
 8028886:	683b      	ldr	r3, [r7, #0]
 8028888:	2b05      	cmp	r3, #5
 802888a:	dd0f      	ble.n	80288ac <_ZN6tflite12RuntimeShape6ResizeEi+0x50>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else  // TF_LITE_STATIC_MEMORY
      dims_pointer_ = new int32_t[dimensions_count];
 802888c:	683b      	ldr	r3, [r7, #0]
 802888e:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 8028892:	4293      	cmp	r3, r2
 8028894:	d201      	bcs.n	802889a <_ZN6tflite12RuntimeShape6ResizeEi+0x3e>
 8028896:	009b      	lsls	r3, r3, #2
 8028898:	e001      	b.n	802889e <_ZN6tflite12RuntimeShape6ResizeEi+0x42>
 802889a:	f04f 33ff 	mov.w	r3, #4294967295
 802889e:	4618      	mov	r0, r3
 80288a0:	f006 ff9d 	bl	802f7de <_Znaj>
 80288a4:	4603      	mov	r3, r0
 80288a6:	461a      	mov	r2, r3
 80288a8:	687b      	ldr	r3, [r7, #4]
 80288aa:	605a      	str	r2, [r3, #4]
#endif  // TF_LITE_STATIC_MEMORY
    }
  }
 80288ac:	bf00      	nop
 80288ae:	3708      	adds	r7, #8
 80288b0:	46bd      	mov	sp, r7
 80288b2:	bd80      	pop	{r7, pc}

080288b4 <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>:

  inline void ReplaceWith(int dimensions_count, const int32_t* dims_data) {
 80288b4:	b580      	push	{r7, lr}
 80288b6:	b086      	sub	sp, #24
 80288b8:	af00      	add	r7, sp, #0
 80288ba:	60f8      	str	r0, [r7, #12]
 80288bc:	60b9      	str	r1, [r7, #8]
 80288be:	607a      	str	r2, [r7, #4]
    Resize(dimensions_count);
 80288c0:	68b9      	ldr	r1, [r7, #8]
 80288c2:	68f8      	ldr	r0, [r7, #12]
 80288c4:	f7ff ffca 	bl	802885c <_ZN6tflite12RuntimeShape6ResizeEi>
    int32_t* dst_dims = DimsData();
 80288c8:	68f8      	ldr	r0, [r7, #12]
 80288ca:	f7ff ffb4 	bl	8028836 <_ZN6tflite12RuntimeShape8DimsDataEv>
 80288ce:	6178      	str	r0, [r7, #20]
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
 80288d0:	68bb      	ldr	r3, [r7, #8]
 80288d2:	009b      	lsls	r3, r3, #2
 80288d4:	461a      	mov	r2, r3
 80288d6:	6879      	ldr	r1, [r7, #4]
 80288d8:	6978      	ldr	r0, [r7, #20]
 80288da:	f009 fc3d 	bl	8032158 <memcpy>
  }
 80288de:	bf00      	nop
 80288e0:	3718      	adds	r7, #24
 80288e2:	46bd      	mov	sp, r7
 80288e4:	bd80      	pop	{r7, pc}

080288e6 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>:
inline const T* GetTensorData(const TfLiteTensor* tensor) {
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
                           : nullptr;
}

inline RuntimeShape GetTensorShape(const TfLiteTensor* tensor) {
 80288e6:	b580      	push	{r7, lr}
 80288e8:	b086      	sub	sp, #24
 80288ea:	af00      	add	r7, sp, #0
 80288ec:	6078      	str	r0, [r7, #4]
 80288ee:	6039      	str	r1, [r7, #0]
  if (tensor == nullptr) {
 80288f0:	683b      	ldr	r3, [r7, #0]
 80288f2:	2b00      	cmp	r3, #0
 80288f4:	d103      	bne.n	80288fe <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x18>
    return RuntimeShape();
 80288f6:	6878      	ldr	r0, [r7, #4]
 80288f8:	f7ff ff5a 	bl	80287b0 <_ZN6tflite12RuntimeShapeC1Ev>
 80288fc:	e00d      	b.n	802891a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x34>
  }

  TfLiteIntArray* dims = tensor->dims;
 80288fe:	683b      	ldr	r3, [r7, #0]
 8028900:	689b      	ldr	r3, [r3, #8]
 8028902:	617b      	str	r3, [r7, #20]
  const int dims_size = dims->size;
 8028904:	697b      	ldr	r3, [r7, #20]
 8028906:	681b      	ldr	r3, [r3, #0]
 8028908:	613b      	str	r3, [r7, #16]
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
 802890a:	697b      	ldr	r3, [r7, #20]
 802890c:	3304      	adds	r3, #4
 802890e:	60fb      	str	r3, [r7, #12]
  return RuntimeShape(dims_size, dims_data);
 8028910:	68fa      	ldr	r2, [r7, #12]
 8028912:	6939      	ldr	r1, [r7, #16]
 8028914:	6878      	ldr	r0, [r7, #4]
 8028916:	f7ff ff59 	bl	80287cc <_ZN6tflite12RuntimeShapeC1EiPKl>
}
 802891a:	6878      	ldr	r0, [r7, #4]
 802891c:	3718      	adds	r7, #24
 802891e:	46bd      	mov	sp, r7
 8028920:	bd80      	pop	{r7, pc}
	...

08028924 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>:
size_t AlignSizeUp(size_t size, size_t alignment) {
  size_t aligned_size = (((size + (alignment - 1)) / alignment) * alignment);
  return aligned_size;
}

TfLiteStatus TfLiteTypeSizeOf(TfLiteType type, size_t* size) {
 8028924:	b480      	push	{r7}
 8028926:	b083      	sub	sp, #12
 8028928:	af00      	add	r7, sp, #0
 802892a:	4603      	mov	r3, r0
 802892c:	6039      	str	r1, [r7, #0]
 802892e:	71fb      	strb	r3, [r7, #7]
  switch (type) {
 8028930:	79fb      	ldrb	r3, [r7, #7]
 8028932:	3b01      	subs	r3, #1
 8028934:	2b0f      	cmp	r3, #15
 8028936:	d857      	bhi.n	80289e8 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc4>
 8028938:	a201      	add	r2, pc, #4	; (adr r2, 8028940 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x1c>)
 802893a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802893e:	bf00      	nop
 8028940:	08028989 	.word	0x08028989
 8028944:	080289a1 	.word	0x080289a1
 8028948:	080289b1 	.word	0x080289b1
 802894c:	080289c1 	.word	0x080289c1
 8028950:	080289e9 	.word	0x080289e9
 8028954:	080289d1 	.word	0x080289d1
 8028958:	08028999 	.word	0x08028999
 802895c:	080289d9 	.word	0x080289d9
 8028960:	080289b9 	.word	0x080289b9
 8028964:	08028981 	.word	0x08028981
 8028968:	08028991 	.word	0x08028991
 802896c:	080289e1 	.word	0x080289e1
 8028970:	080289c9 	.word	0x080289c9
 8028974:	080289e9 	.word	0x080289e9
 8028978:	080289e9 	.word	0x080289e9
 802897c:	080289a9 	.word	0x080289a9
    case kTfLiteFloat16:
      *size = sizeof(int16_t);
 8028980:	683b      	ldr	r3, [r7, #0]
 8028982:	2202      	movs	r2, #2
 8028984:	601a      	str	r2, [r3, #0]
      break;
 8028986:	e031      	b.n	80289ec <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteFloat32:
      *size = sizeof(float);
 8028988:	683b      	ldr	r3, [r7, #0]
 802898a:	2204      	movs	r2, #4
 802898c:	601a      	str	r2, [r3, #0]
      break;
 802898e:	e02d      	b.n	80289ec <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteFloat64:
      *size = sizeof(double);
 8028990:	683b      	ldr	r3, [r7, #0]
 8028992:	2208      	movs	r2, #8
 8028994:	601a      	str	r2, [r3, #0]
      break;
 8028996:	e029      	b.n	80289ec <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteInt16:
      *size = sizeof(int16_t);
 8028998:	683b      	ldr	r3, [r7, #0]
 802899a:	2202      	movs	r2, #2
 802899c:	601a      	str	r2, [r3, #0]
      break;
 802899e:	e025      	b.n	80289ec <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteInt32:
      *size = sizeof(int32_t);
 80289a0:	683b      	ldr	r3, [r7, #0]
 80289a2:	2204      	movs	r2, #4
 80289a4:	601a      	str	r2, [r3, #0]
      break;
 80289a6:	e021      	b.n	80289ec <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteUInt32:
      *size = sizeof(uint32_t);
 80289a8:	683b      	ldr	r3, [r7, #0]
 80289aa:	2204      	movs	r2, #4
 80289ac:	601a      	str	r2, [r3, #0]
      break;
 80289ae:	e01d      	b.n	80289ec <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteUInt8:
      *size = sizeof(uint8_t);
 80289b0:	683b      	ldr	r3, [r7, #0]
 80289b2:	2201      	movs	r2, #1
 80289b4:	601a      	str	r2, [r3, #0]
      break;
 80289b6:	e019      	b.n	80289ec <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteInt8:
      *size = sizeof(int8_t);
 80289b8:	683b      	ldr	r3, [r7, #0]
 80289ba:	2201      	movs	r2, #1
 80289bc:	601a      	str	r2, [r3, #0]
      break;
 80289be:	e015      	b.n	80289ec <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteInt64:
      *size = sizeof(int64_t);
 80289c0:	683b      	ldr	r3, [r7, #0]
 80289c2:	2208      	movs	r2, #8
 80289c4:	601a      	str	r2, [r3, #0]
      break;
 80289c6:	e011      	b.n	80289ec <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteUInt64:
      *size = sizeof(uint64_t);
 80289c8:	683b      	ldr	r3, [r7, #0]
 80289ca:	2208      	movs	r2, #8
 80289cc:	601a      	str	r2, [r3, #0]
      break;
 80289ce:	e00d      	b.n	80289ec <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteBool:
      *size = sizeof(bool);
 80289d0:	683b      	ldr	r3, [r7, #0]
 80289d2:	2201      	movs	r2, #1
 80289d4:	601a      	str	r2, [r3, #0]
      break;
 80289d6:	e009      	b.n	80289ec <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteComplex64:
      *size = sizeof(float) * 2;
 80289d8:	683b      	ldr	r3, [r7, #0]
 80289da:	2208      	movs	r2, #8
 80289dc:	601a      	str	r2, [r3, #0]
      break;
 80289de:	e005      	b.n	80289ec <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteComplex128:
      *size = sizeof(double) * 2;
 80289e0:	683b      	ldr	r3, [r7, #0]
 80289e2:	2210      	movs	r2, #16
 80289e4:	601a      	str	r2, [r3, #0]
      break;
 80289e6:	e001      	b.n	80289ec <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    default:
      return kTfLiteError;
 80289e8:	2301      	movs	r3, #1
 80289ea:	e000      	b.n	80289ee <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xca>
  }
  return kTfLiteOk;
 80289ec:	2300      	movs	r3, #0
}
 80289ee:	4618      	mov	r0, r3
 80289f0:	370c      	adds	r7, #12
 80289f2:	46bd      	mov	sp, r7
 80289f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80289f8:	4770      	bx	lr
 80289fa:	bf00      	nop

080289fc <_ZN6tflite12ElementCountERK14TfLiteIntArray>:
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/kernels/op_macros.h"

namespace tflite {

int ElementCount(const TfLiteIntArray& dims) {
 80289fc:	b480      	push	{r7}
 80289fe:	b085      	sub	sp, #20
 8028a00:	af00      	add	r7, sp, #0
 8028a02:	6078      	str	r0, [r7, #4]
  int result = 1;
 8028a04:	2301      	movs	r3, #1
 8028a06:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < dims.size; ++i) {
 8028a08:	2300      	movs	r3, #0
 8028a0a:	60bb      	str	r3, [r7, #8]
 8028a0c:	687b      	ldr	r3, [r7, #4]
 8028a0e:	681b      	ldr	r3, [r3, #0]
 8028a10:	68ba      	ldr	r2, [r7, #8]
 8028a12:	429a      	cmp	r2, r3
 8028a14:	da0c      	bge.n	8028a30 <_ZN6tflite12ElementCountERK14TfLiteIntArray+0x34>
    result *= dims.data[i];
 8028a16:	687a      	ldr	r2, [r7, #4]
 8028a18:	68bb      	ldr	r3, [r7, #8]
 8028a1a:	009b      	lsls	r3, r3, #2
 8028a1c:	4413      	add	r3, r2
 8028a1e:	685a      	ldr	r2, [r3, #4]
 8028a20:	68fb      	ldr	r3, [r7, #12]
 8028a22:	fb02 f303 	mul.w	r3, r2, r3
 8028a26:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < dims.size; ++i) {
 8028a28:	68bb      	ldr	r3, [r7, #8]
 8028a2a:	3301      	adds	r3, #1
 8028a2c:	60bb      	str	r3, [r7, #8]
 8028a2e:	e7ed      	b.n	8028a0c <_ZN6tflite12ElementCountERK14TfLiteIntArray+0x10>
  }
  return result;
 8028a30:	68fb      	ldr	r3, [r7, #12]
}
 8028a32:	4618      	mov	r0, r3
 8028a34:	3714      	adds	r7, #20
 8028a36:	46bd      	mov	sp, r7
 8028a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028a3c:	4770      	bx	lr

08028a3e <_ZNSt14numeric_limitsIlE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_MAX__ - 1; }
 8028a3e:	b480      	push	{r7}
 8028a40:	af00      	add	r7, sp, #0
 8028a42:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8028a46:	4618      	mov	r0, r3
 8028a48:	46bd      	mov	sp, r7
 8028a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028a4e:	4770      	bx	lr

08028a50 <_ZNSt14numeric_limitsIfE8infinityEv>:
	= bool(__FLT_HAS_DENORM__) ? denorm_present : denorm_absent;
      static _GLIBCXX_USE_CONSTEXPR bool has_denorm_loss
       = __glibcxx_float_has_denorm_loss;

      static _GLIBCXX_CONSTEXPR float
      infinity() _GLIBCXX_USE_NOEXCEPT { return __builtin_huge_valf(); }
 8028a50:	b480      	push	{r7}
 8028a52:	af00      	add	r7, sp, #0
 8028a54:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 8028a58:	ee07 3a90 	vmov	s15, r3
 8028a5c:	eeb0 0a67 	vmov.f32	s0, s15
 8028a60:	46bd      	mov	sp, r7
 8028a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028a66:	4770      	bx	lr

08028a68 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>:

// This function implements the same computation as the ARMv7 NEON VQRDMULH
// instruction.
template <>
inline std::int32_t SaturatingRoundingDoublingHighMul(std::int32_t a,
                                                      std::int32_t b) {
 8028a68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8028a6c:	b092      	sub	sp, #72	; 0x48
 8028a6e:	af00      	add	r7, sp, #0
 8028a70:	61f8      	str	r0, [r7, #28]
 8028a72:	61b9      	str	r1, [r7, #24]
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 8028a74:	69fa      	ldr	r2, [r7, #28]
 8028a76:	69bb      	ldr	r3, [r7, #24]
 8028a78:	429a      	cmp	r2, r3
 8028a7a:	d107      	bne.n	8028a8c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x24>
 8028a7c:	f7ff ffdf 	bl	8028a3e <_ZNSt14numeric_limitsIlE3minEv>
 8028a80:	4602      	mov	r2, r0
 8028a82:	69fb      	ldr	r3, [r7, #28]
 8028a84:	4293      	cmp	r3, r2
 8028a86:	d101      	bne.n	8028a8c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x24>
 8028a88:	2301      	movs	r3, #1
 8028a8a:	e000      	b.n	8028a8e <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x26>
 8028a8c:	2300      	movs	r3, #0
 8028a8e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  std::int64_t a_64(a);
 8028a92:	69fb      	ldr	r3, [r7, #28]
 8028a94:	17da      	asrs	r2, r3, #31
 8028a96:	60bb      	str	r3, [r7, #8]
 8028a98:	60fa      	str	r2, [r7, #12]
 8028a9a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8028a9e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  std::int64_t b_64(b);
 8028aa2:	69bb      	ldr	r3, [r7, #24]
 8028aa4:	17da      	asrs	r2, r3, #31
 8028aa6:	603b      	str	r3, [r7, #0]
 8028aa8:	607a      	str	r2, [r7, #4]
 8028aaa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8028aae:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  std::int64_t ab_64 = a_64 * b_64;
 8028ab2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8028ab4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8028ab6:	fb03 f202 	mul.w	r2, r3, r2
 8028aba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8028abc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8028abe:	fb01 f303 	mul.w	r3, r1, r3
 8028ac2:	4413      	add	r3, r2
 8028ac4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8028ac6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8028ac8:	fba1 4502 	umull	r4, r5, r1, r2
 8028acc:	442b      	add	r3, r5
 8028ace:	461d      	mov	r5, r3
 8028ad0:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
 8028ad4:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 8028ad8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8028adc:	2b00      	cmp	r3, #0
 8028ade:	db02      	blt.n	8028ae6 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x7e>
 8028ae0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8028ae4:	e000      	b.n	8028ae8 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x80>
 8028ae6:	4b1a      	ldr	r3, [pc, #104]	; (8028b50 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xe8>)
 8028ae8:	627b      	str	r3, [r7, #36]	; 0x24
  std::int32_t ab_x2_high32 =
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 8028aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028aec:	17da      	asrs	r2, r3, #31
 8028aee:	4698      	mov	r8, r3
 8028af0:	4691      	mov	r9, r2
 8028af2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8028af6:	eb18 0102 	adds.w	r1, r8, r2
 8028afa:	6139      	str	r1, [r7, #16]
 8028afc:	eb49 0303 	adc.w	r3, r9, r3
 8028b00:	617b      	str	r3, [r7, #20]
 8028b02:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8028b06:	2b00      	cmp	r3, #0
 8028b08:	da07      	bge.n	8028b1a <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xb2>
 8028b0a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8028b0e:	eb12 0a01 	adds.w	sl, r2, r1
 8028b12:	f143 0b00 	adc.w	fp, r3, #0
 8028b16:	4652      	mov	r2, sl
 8028b18:	465b      	mov	r3, fp
 8028b1a:	f04f 0000 	mov.w	r0, #0
 8028b1e:	f04f 0100 	mov.w	r1, #0
 8028b22:	0fd0      	lsrs	r0, r2, #31
 8028b24:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8028b28:	17d9      	asrs	r1, r3, #31
 8028b2a:	4602      	mov	r2, r0
 8028b2c:	460b      	mov	r3, r1
  std::int32_t ab_x2_high32 =
 8028b2e:	4613      	mov	r3, r2
 8028b30:	623b      	str	r3, [r7, #32]
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 8028b32:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8028b36:	2b00      	cmp	r3, #0
 8028b38:	d003      	beq.n	8028b42 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xda>
 8028b3a:	f7fe ff8f 	bl	8027a5c <_ZNSt14numeric_limitsIlE3maxEv>
 8028b3e:	4603      	mov	r3, r0
 8028b40:	e000      	b.n	8028b44 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xdc>
 8028b42:	6a3b      	ldr	r3, [r7, #32]
}
 8028b44:	4618      	mov	r0, r3
 8028b46:	3748      	adds	r7, #72	; 0x48
 8028b48:	46bd      	mov	sp, r7
 8028b4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8028b4e:	bf00      	nop
 8028b50:	c0000001 	.word	0xc0000001

08028b54 <_ZNK6tflite12RuntimeShape4DimsEi>:
  inline int32_t Dims(int i) const {
 8028b54:	b580      	push	{r7, lr}
 8028b56:	b082      	sub	sp, #8
 8028b58:	af00      	add	r7, sp, #0
 8028b5a:	6078      	str	r0, [r7, #4]
 8028b5c:	6039      	str	r1, [r7, #0]
    TFLITE_DCHECK_GE(i, 0);
 8028b5e:	683b      	ldr	r3, [r7, #0]
 8028b60:	2b00      	cmp	r3, #0
 8028b62:	da01      	bge.n	8028b68 <_ZNK6tflite12RuntimeShape4DimsEi+0x14>
 8028b64:	f009 fa7a 	bl	803205c <abort>
    TFLITE_DCHECK_LT(i, size_);
 8028b68:	687b      	ldr	r3, [r7, #4]
 8028b6a:	681b      	ldr	r3, [r3, #0]
 8028b6c:	683a      	ldr	r2, [r7, #0]
 8028b6e:	429a      	cmp	r2, r3
 8028b70:	db01      	blt.n	8028b76 <_ZNK6tflite12RuntimeShape4DimsEi+0x22>
 8028b72:	f009 fa73 	bl	803205c <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 8028b76:	687b      	ldr	r3, [r7, #4]
 8028b78:	681b      	ldr	r3, [r3, #0]
 8028b7a:	2b05      	cmp	r3, #5
 8028b7c:	dd06      	ble.n	8028b8c <_ZNK6tflite12RuntimeShape4DimsEi+0x38>
 8028b7e:	687b      	ldr	r3, [r7, #4]
 8028b80:	685a      	ldr	r2, [r3, #4]
 8028b82:	683b      	ldr	r3, [r7, #0]
 8028b84:	009b      	lsls	r3, r3, #2
 8028b86:	4413      	add	r3, r2
 8028b88:	681b      	ldr	r3, [r3, #0]
 8028b8a:	e004      	b.n	8028b96 <_ZNK6tflite12RuntimeShape4DimsEi+0x42>
 8028b8c:	687a      	ldr	r2, [r7, #4]
 8028b8e:	683b      	ldr	r3, [r7, #0]
 8028b90:	009b      	lsls	r3, r3, #2
 8028b92:	4413      	add	r3, r2
 8028b94:	685b      	ldr	r3, [r3, #4]
  }
 8028b96:	4618      	mov	r0, r3
 8028b98:	3708      	adds	r7, #8
 8028b9a:	46bd      	mov	sp, r7
 8028b9c:	bd80      	pop	{r7, pc}

08028b9e <_ZNK6tflite12RuntimeShape8DimsDataEv>:
  inline const int32_t* DimsData() const {
 8028b9e:	b480      	push	{r7}
 8028ba0:	b083      	sub	sp, #12
 8028ba2:	af00      	add	r7, sp, #0
 8028ba4:	6078      	str	r0, [r7, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 8028ba6:	687b      	ldr	r3, [r7, #4]
 8028ba8:	681b      	ldr	r3, [r3, #0]
 8028baa:	2b05      	cmp	r3, #5
 8028bac:	dd02      	ble.n	8028bb4 <_ZNK6tflite12RuntimeShape8DimsDataEv+0x16>
 8028bae:	687b      	ldr	r3, [r7, #4]
 8028bb0:	685b      	ldr	r3, [r3, #4]
 8028bb2:	e001      	b.n	8028bb8 <_ZNK6tflite12RuntimeShape8DimsDataEv+0x1a>
 8028bb4:	687b      	ldr	r3, [r7, #4]
 8028bb6:	3304      	adds	r3, #4
  }
 8028bb8:	4618      	mov	r0, r3
 8028bba:	370c      	adds	r7, #12
 8028bbc:	46bd      	mov	sp, r7
 8028bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028bc2:	4770      	bx	lr

08028bc4 <_ZNK6tflite12RuntimeShape8FlatSizeEv>:
    BuildFrom<const std::initializer_list<int>>(init_list);
  }

  // Returns the total count of elements, that is the size when flattened into a
  // vector.
  inline int FlatSize() const {
 8028bc4:	b580      	push	{r7, lr}
 8028bc6:	b086      	sub	sp, #24
 8028bc8:	af00      	add	r7, sp, #0
 8028bca:	6078      	str	r0, [r7, #4]
    int buffer_size = 1;
 8028bcc:	2301      	movs	r3, #1
 8028bce:	617b      	str	r3, [r7, #20]
    const int* dims_data = reinterpret_cast<const int*>(DimsData());
 8028bd0:	6878      	ldr	r0, [r7, #4]
 8028bd2:	f7ff ffe4 	bl	8028b9e <_ZNK6tflite12RuntimeShape8DimsDataEv>
 8028bd6:	60f8      	str	r0, [r7, #12]
    for (int i = 0; i < size_; i++) {
 8028bd8:	2300      	movs	r3, #0
 8028bda:	613b      	str	r3, [r7, #16]
 8028bdc:	687b      	ldr	r3, [r7, #4]
 8028bde:	681b      	ldr	r3, [r3, #0]
 8028be0:	693a      	ldr	r2, [r7, #16]
 8028be2:	429a      	cmp	r2, r3
 8028be4:	da0c      	bge.n	8028c00 <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x3c>
      buffer_size *= dims_data[i];
 8028be6:	693b      	ldr	r3, [r7, #16]
 8028be8:	009b      	lsls	r3, r3, #2
 8028bea:	68fa      	ldr	r2, [r7, #12]
 8028bec:	4413      	add	r3, r2
 8028bee:	681a      	ldr	r2, [r3, #0]
 8028bf0:	697b      	ldr	r3, [r7, #20]
 8028bf2:	fb02 f303 	mul.w	r3, r2, r3
 8028bf6:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < size_; i++) {
 8028bf8:	693b      	ldr	r3, [r7, #16]
 8028bfa:	3301      	adds	r3, #1
 8028bfc:	613b      	str	r3, [r7, #16]
 8028bfe:	e7ed      	b.n	8028bdc <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x18>
    }
    return buffer_size;
 8028c00:	697b      	ldr	r3, [r7, #20]
  }
 8028c02:	4618      	mov	r0, r3
 8028c04:	3718      	adds	r7, #24
 8028c06:	46bd      	mov	sp, r7
 8028c08:	bd80      	pop	{r7, pc}

08028c0a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>:
}

// Flat size calculation, checking that dimensions match with one or more other
// arrays.
inline int MatchingFlatSize(const RuntimeShape& shape,
                            const RuntimeShape& check_shape_0) {
 8028c0a:	b590      	push	{r4, r7, lr}
 8028c0c:	b085      	sub	sp, #20
 8028c0e:	af00      	add	r7, sp, #0
 8028c10:	6078      	str	r0, [r7, #4]
 8028c12:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
 8028c14:	6878      	ldr	r0, [r7, #4]
 8028c16:	f7ff fe02 	bl	802881e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8028c1a:	4604      	mov	r4, r0
 8028c1c:	6838      	ldr	r0, [r7, #0]
 8028c1e:	f7ff fdfe 	bl	802881e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8028c22:	4603      	mov	r3, r0
 8028c24:	429c      	cmp	r4, r3
 8028c26:	d001      	beq.n	8028c2c <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x22>
 8028c28:	f009 fa18 	bl	803205c <abort>
  const int dims_count = shape.DimensionsCount();
 8028c2c:	6878      	ldr	r0, [r7, #4]
 8028c2e:	f7ff fdf6 	bl	802881e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8028c32:	60b8      	str	r0, [r7, #8]
  for (int i = 0; i < dims_count; ++i) {
 8028c34:	2300      	movs	r3, #0
 8028c36:	60fb      	str	r3, [r7, #12]
 8028c38:	68fa      	ldr	r2, [r7, #12]
 8028c3a:	68bb      	ldr	r3, [r7, #8]
 8028c3c:	429a      	cmp	r2, r3
 8028c3e:	da11      	bge.n	8028c64 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x5a>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 8028c40:	68f9      	ldr	r1, [r7, #12]
 8028c42:	6878      	ldr	r0, [r7, #4]
 8028c44:	f7ff ff86 	bl	8028b54 <_ZNK6tflite12RuntimeShape4DimsEi>
 8028c48:	4604      	mov	r4, r0
 8028c4a:	68f9      	ldr	r1, [r7, #12]
 8028c4c:	6838      	ldr	r0, [r7, #0]
 8028c4e:	f7ff ff81 	bl	8028b54 <_ZNK6tflite12RuntimeShape4DimsEi>
 8028c52:	4603      	mov	r3, r0
 8028c54:	429c      	cmp	r4, r3
 8028c56:	d001      	beq.n	8028c5c <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x52>
 8028c58:	f009 fa00 	bl	803205c <abort>
  for (int i = 0; i < dims_count; ++i) {
 8028c5c:	68fb      	ldr	r3, [r7, #12]
 8028c5e:	3301      	adds	r3, #1
 8028c60:	60fb      	str	r3, [r7, #12]
 8028c62:	e7e9      	b.n	8028c38 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x2e>
  }
  return shape.FlatSize();
 8028c64:	6878      	ldr	r0, [r7, #4]
 8028c66:	f7ff ffad 	bl	8028bc4 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 8028c6a:	4603      	mov	r3, r0
}
 8028c6c:	4618      	mov	r0, r3
 8028c6e:	3714      	adds	r7, #20
 8028c70:	46bd      	mov	sp, r7
 8028c72:	bd90      	pop	{r4, r7, pc}

08028c74 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>:
                                           quantized_multiplier);
}

inline int32_t MultiplyByQuantizedMultiplier(int32_t x,
                                             int32_t quantized_multiplier,
                                             int shift) {
 8028c74:	b580      	push	{r7, lr}
 8028c76:	b086      	sub	sp, #24
 8028c78:	af00      	add	r7, sp, #0
 8028c7a:	60f8      	str	r0, [r7, #12]
 8028c7c:	60b9      	str	r1, [r7, #8]
 8028c7e:	607a      	str	r2, [r7, #4]
  using gemmlowp::RoundingDivideByPOT;
  using gemmlowp::SaturatingRoundingDoublingHighMul;
  int left_shift = shift > 0 ? shift : 0;
 8028c80:	687b      	ldr	r3, [r7, #4]
 8028c82:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8028c86:	617b      	str	r3, [r7, #20]
  int right_shift = shift > 0 ? 0 : -shift;
 8028c88:	687b      	ldr	r3, [r7, #4]
 8028c8a:	2b00      	cmp	r3, #0
 8028c8c:	dc02      	bgt.n	8028c94 <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x20>
 8028c8e:	687b      	ldr	r3, [r7, #4]
 8028c90:	425b      	negs	r3, r3
 8028c92:	e000      	b.n	8028c96 <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x22>
 8028c94:	2300      	movs	r3, #0
 8028c96:	613b      	str	r3, [r7, #16]
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
 8028c98:	68fa      	ldr	r2, [r7, #12]
 8028c9a:	697b      	ldr	r3, [r7, #20]
 8028c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8028ca0:	68b9      	ldr	r1, [r7, #8]
 8028ca2:	4618      	mov	r0, r3
 8028ca4:	f7ff fee0 	bl	8028a68 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 8028ca8:	4603      	mov	r3, r0
 8028caa:	6939      	ldr	r1, [r7, #16]
 8028cac:	4618      	mov	r0, r3
 8028cae:	f000 fb4b 	bl	8029348 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 8028cb2:	4603      	mov	r3, r0
                                 x * (1 << left_shift), quantized_multiplier),
                             right_shift);
}
 8028cb4:	4618      	mov	r0, r3
 8028cb6:	3718      	adds	r7, #24
 8028cb8:	46bd      	mov	sp, r7
 8028cba:	bd80      	pop	{r7, pc}

08028cbc <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns a mutable tensor for a given input index. is_variable must be checked
// during prepare when the full TfLiteTensor is available.
inline TfLiteEvalTensor* GetMutableEvalInput(const TfLiteContext* context,
                                             const TfLiteNode* node,
                                             int index) {
 8028cbc:	b580      	push	{r7, lr}
 8028cbe:	b084      	sub	sp, #16
 8028cc0:	af00      	add	r7, sp, #0
 8028cc2:	60f8      	str	r0, [r7, #12]
 8028cc4:	60b9      	str	r1, [r7, #8]
 8028cc6:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context != nullptr);
 8028cc8:	68fb      	ldr	r3, [r7, #12]
 8028cca:	2b00      	cmp	r3, #0
 8028ccc:	d101      	bne.n	8028cd2 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x16>
 8028cce:	f009 f9c5 	bl	803205c <abort>
  TFLITE_DCHECK(node != nullptr);
 8028cd2:	68bb      	ldr	r3, [r7, #8]
 8028cd4:	2b00      	cmp	r3, #0
 8028cd6:	d101      	bne.n	8028cdc <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x20>
 8028cd8:	f009 f9c0 	bl	803205c <abort>
  return context->GetEvalTensor(context, node->inputs->data[index]);
 8028cdc:	68fb      	ldr	r3, [r7, #12]
 8028cde:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8028ce0:	68bb      	ldr	r3, [r7, #8]
 8028ce2:	6819      	ldr	r1, [r3, #0]
 8028ce4:	687b      	ldr	r3, [r7, #4]
 8028ce6:	009b      	lsls	r3, r3, #2
 8028ce8:	440b      	add	r3, r1
 8028cea:	685b      	ldr	r3, [r3, #4]
 8028cec:	4619      	mov	r1, r3
 8028cee:	68f8      	ldr	r0, [r7, #12]
 8028cf0:	4790      	blx	r2
 8028cf2:	4603      	mov	r3, r0
}
 8028cf4:	4618      	mov	r0, r3
 8028cf6:	3710      	adds	r7, #16
 8028cf8:	46bd      	mov	sp, r7
 8028cfa:	bd80      	pop	{r7, pc}

08028cfc <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns the TfLiteEvalTensor struct for a given input index in a node.
inline const TfLiteEvalTensor* GetEvalInput(const TfLiteContext* context,
                                            const TfLiteNode* node, int index) {
 8028cfc:	b580      	push	{r7, lr}
 8028cfe:	b084      	sub	sp, #16
 8028d00:	af00      	add	r7, sp, #0
 8028d02:	60f8      	str	r0, [r7, #12]
 8028d04:	60b9      	str	r1, [r7, #8]
 8028d06:	607a      	str	r2, [r7, #4]
  return GetMutableEvalInput(context, node, index);
 8028d08:	687a      	ldr	r2, [r7, #4]
 8028d0a:	68b9      	ldr	r1, [r7, #8]
 8028d0c:	68f8      	ldr	r0, [r7, #12]
 8028d0e:	f7ff ffd5 	bl	8028cbc <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8028d12:	4603      	mov	r3, r0
}
 8028d14:	4618      	mov	r0, r3
 8028d16:	3710      	adds	r7, #16
 8028d18:	46bd      	mov	sp, r7
 8028d1a:	bd80      	pop	{r7, pc}

08028d1c <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns the TfLiteEvalTensor struct for a given output index in a node.
inline TfLiteEvalTensor* GetEvalOutput(const TfLiteContext* context,
                                       const TfLiteNode* node, int index) {
 8028d1c:	b580      	push	{r7, lr}
 8028d1e:	b084      	sub	sp, #16
 8028d20:	af00      	add	r7, sp, #0
 8028d22:	60f8      	str	r0, [r7, #12]
 8028d24:	60b9      	str	r1, [r7, #8]
 8028d26:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context != nullptr);
 8028d28:	68fb      	ldr	r3, [r7, #12]
 8028d2a:	2b00      	cmp	r3, #0
 8028d2c:	d101      	bne.n	8028d32 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x16>
 8028d2e:	f009 f995 	bl	803205c <abort>
  TFLITE_DCHECK(node != nullptr);
 8028d32:	68bb      	ldr	r3, [r7, #8]
 8028d34:	2b00      	cmp	r3, #0
 8028d36:	d101      	bne.n	8028d3c <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x20>
 8028d38:	f009 f990 	bl	803205c <abort>
  return context->GetEvalTensor(context, node->outputs->data[index]);
 8028d3c:	68fb      	ldr	r3, [r7, #12]
 8028d3e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8028d40:	68bb      	ldr	r3, [r7, #8]
 8028d42:	6859      	ldr	r1, [r3, #4]
 8028d44:	687b      	ldr	r3, [r7, #4]
 8028d46:	009b      	lsls	r3, r3, #2
 8028d48:	440b      	add	r3, r1
 8028d4a:	685b      	ldr	r3, [r3, #4]
 8028d4c:	4619      	mov	r1, r3
 8028d4e:	68f8      	ldr	r0, [r7, #12]
 8028d50:	4790      	blx	r2
 8028d52:	4603      	mov	r3, r0
}
 8028d54:	4618      	mov	r0, r3
 8028d56:	3710      	adds	r7, #16
 8028d58:	46bd      	mov	sp, r7
 8028d5a:	bd80      	pop	{r7, pc}

08028d5c <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf>:
  data->params.input_offset = input->params.zero_point;
  data->params.output_offset = output->params.zero_point;
}

inline void ReluFloat(const RuntimeShape& input_shape, const float* input_data,
                      const RuntimeShape& output_shape, float* output_data) {
 8028d5c:	b580      	push	{r7, lr}
 8028d5e:	b08a      	sub	sp, #40	; 0x28
 8028d60:	af00      	add	r7, sp, #0
 8028d62:	60f8      	str	r0, [r7, #12]
 8028d64:	60b9      	str	r1, [r7, #8]
 8028d66:	607a      	str	r2, [r7, #4]
 8028d68:	603b      	str	r3, [r7, #0]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 8028d6a:	6879      	ldr	r1, [r7, #4]
 8028d6c:	68f8      	ldr	r0, [r7, #12]
 8028d6e:	f7ff ff4c 	bl	8028c0a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 8028d72:	6238      	str	r0, [r7, #32]
  for (int i = 0; i < flat_size; ++i) {
 8028d74:	2300      	movs	r3, #0
 8028d76:	627b      	str	r3, [r7, #36]	; 0x24
 8028d78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8028d7a:	6a3b      	ldr	r3, [r7, #32]
 8028d7c:	429a      	cmp	r2, r3
 8028d7e:	da1d      	bge.n	8028dbc <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf+0x60>
    const float val = input_data[i];
 8028d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028d82:	009b      	lsls	r3, r3, #2
 8028d84:	68ba      	ldr	r2, [r7, #8]
 8028d86:	4413      	add	r3, r2
 8028d88:	681b      	ldr	r3, [r3, #0]
 8028d8a:	61fb      	str	r3, [r7, #28]
    const float lower = 0.0f;
 8028d8c:	f04f 0300 	mov.w	r3, #0
 8028d90:	61bb      	str	r3, [r7, #24]
    const float clamped = val < lower ? lower : val;
 8028d92:	edd7 7a07 	vldr	s15, [r7, #28]
 8028d96:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8028d9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028d9e:	d501      	bpl.n	8028da4 <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf+0x48>
 8028da0:	69bb      	ldr	r3, [r7, #24]
 8028da2:	e000      	b.n	8028da6 <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf+0x4a>
 8028da4:	69fb      	ldr	r3, [r7, #28]
 8028da6:	617b      	str	r3, [r7, #20]
    output_data[i] = clamped;
 8028da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028daa:	009b      	lsls	r3, r3, #2
 8028dac:	683a      	ldr	r2, [r7, #0]
 8028dae:	4413      	add	r3, r2
 8028db0:	697a      	ldr	r2, [r7, #20]
 8028db2:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 8028db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028db6:	3301      	adds	r3, #1
 8028db8:	627b      	str	r3, [r7, #36]	; 0x24
 8028dba:	e7dd      	b.n	8028d78 <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf+0x1c>
  }
}
 8028dbc:	bf00      	nop
 8028dbe:	3728      	adds	r7, #40	; 0x28
 8028dc0:	46bd      	mov	sp, r7
 8028dc2:	bd80      	pop	{r7, pc}

08028dc4 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf>:

inline void Relu6Float(const RuntimeShape& input_shape, const float* input_data,
                       const RuntimeShape& output_shape, float* output_data) {
 8028dc4:	b580      	push	{r7, lr}
 8028dc6:	b08a      	sub	sp, #40	; 0x28
 8028dc8:	af00      	add	r7, sp, #0
 8028dca:	60f8      	str	r0, [r7, #12]
 8028dcc:	60b9      	str	r1, [r7, #8]
 8028dce:	607a      	str	r2, [r7, #4]
 8028dd0:	603b      	str	r3, [r7, #0]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 8028dd2:	6879      	ldr	r1, [r7, #4]
 8028dd4:	68f8      	ldr	r0, [r7, #12]
 8028dd6:	f7ff ff18 	bl	8028c0a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 8028dda:	6238      	str	r0, [r7, #32]
  for (int i = 0; i < flat_size; ++i) {
 8028ddc:	2300      	movs	r3, #0
 8028dde:	627b      	str	r3, [r7, #36]	; 0x24
 8028de0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8028de2:	6a3b      	ldr	r3, [r7, #32]
 8028de4:	429a      	cmp	r2, r3
 8028de6:	da2a      	bge.n	8028e3e <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x7a>
    const float val = input_data[i];
 8028de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028dea:	009b      	lsls	r3, r3, #2
 8028dec:	68ba      	ldr	r2, [r7, #8]
 8028dee:	4413      	add	r3, r2
 8028df0:	681b      	ldr	r3, [r3, #0]
 8028df2:	61fb      	str	r3, [r7, #28]
    const float upper = 6.0f;
 8028df4:	4b14      	ldr	r3, [pc, #80]	; (8028e48 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x84>)
 8028df6:	61bb      	str	r3, [r7, #24]
    const float lower = 0.0f;
 8028df8:	f04f 0300 	mov.w	r3, #0
 8028dfc:	617b      	str	r3, [r7, #20]
    const float clamped = val > upper ? upper : val < lower ? lower : val;
 8028dfe:	edd7 7a07 	vldr	s15, [r7, #28]
 8028e02:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8028e06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8028e0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028e0e:	dd01      	ble.n	8028e14 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x50>
 8028e10:	69bb      	ldr	r3, [r7, #24]
 8028e12:	e009      	b.n	8028e28 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x64>
 8028e14:	edd7 7a07 	vldr	s15, [r7, #28]
 8028e18:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8028e1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028e20:	d501      	bpl.n	8028e26 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x62>
 8028e22:	697b      	ldr	r3, [r7, #20]
 8028e24:	e000      	b.n	8028e28 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x64>
 8028e26:	69fb      	ldr	r3, [r7, #28]
 8028e28:	613b      	str	r3, [r7, #16]
    output_data[i] = clamped;
 8028e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028e2c:	009b      	lsls	r3, r3, #2
 8028e2e:	683a      	ldr	r2, [r7, #0]
 8028e30:	4413      	add	r3, r2
 8028e32:	693a      	ldr	r2, [r7, #16]
 8028e34:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 8028e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028e38:	3301      	adds	r3, #1
 8028e3a:	627b      	str	r3, [r7, #36]	; 0x24
 8028e3c:	e7d0      	b.n	8028de0 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x1c>
  }
}
 8028e3e:	bf00      	nop
 8028e40:	3728      	adds	r7, #40	; 0x28
 8028e42:	46bd      	mov	sp, r7
 8028e44:	bd80      	pop	{r7, pc}
 8028e46:	bf00      	nop
 8028e48:	40c00000 	.word	0x40c00000

08028e4c <_ZN6tflite3ops5micro11activations8ReluInitEP13TfLiteContextPKcj>:
    const Q clamped = val > upper ? upper : val < lower ? lower : val;
    output_data[i] = clamped;
  }
}

void* ReluInit(TfLiteContext* context, const char* buffer, size_t length) {
 8028e4c:	b580      	push	{r7, lr}
 8028e4e:	b084      	sub	sp, #16
 8028e50:	af00      	add	r7, sp, #0
 8028e52:	60f8      	str	r0, [r7, #12]
 8028e54:	60b9      	str	r1, [r7, #8]
 8028e56:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 8028e58:	68fb      	ldr	r3, [r7, #12]
 8028e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028e5c:	2b00      	cmp	r3, #0
 8028e5e:	d101      	bne.n	8028e64 <_ZN6tflite3ops5micro11activations8ReluInitEP13TfLiteContextPKcj+0x18>
 8028e60:	f009 f8fc 	bl	803205c <abort>
  return context->AllocatePersistentBuffer(context, sizeof(ReluOpData));
 8028e64:	68fb      	ldr	r3, [r7, #12]
 8028e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028e68:	211c      	movs	r1, #28
 8028e6a:	68f8      	ldr	r0, [r7, #12]
 8028e6c:	4798      	blx	r3
 8028e6e:	4603      	mov	r3, r0
}
 8028e70:	4618      	mov	r0, r3
 8028e72:	3710      	adds	r7, #16
 8028e74:	46bd      	mov	sp, r7
 8028e76:	bd80      	pop	{r7, pc}

08028e78 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus ReluPrepare(TfLiteContext* context, TfLiteNode* node) {
 8028e78:	b590      	push	{r4, r7, lr}
 8028e7a:	b089      	sub	sp, #36	; 0x24
 8028e7c:	af02      	add	r7, sp, #8
 8028e7e:	6078      	str	r0, [r7, #4]
 8028e80:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 8028e82:	683b      	ldr	r3, [r7, #0]
 8028e84:	691b      	ldr	r3, [r3, #16]
 8028e86:	2b00      	cmp	r3, #0
 8028e88:	d101      	bne.n	8028e8e <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x16>
 8028e8a:	f009 f8e7 	bl	803205c <abort>
  ReluOpData* data = static_cast<ReluOpData*>(node->user_data);
 8028e8e:	683b      	ldr	r3, [r7, #0]
 8028e90:	691b      	ldr	r3, [r3, #16]
 8028e92:	617b      	str	r3, [r7, #20]

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 8028e94:	2200      	movs	r2, #0
 8028e96:	6839      	ldr	r1, [r7, #0]
 8028e98:	6878      	ldr	r0, [r7, #4]
 8028e9a:	f7ff f8a9 	bl	8027ff0 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8028e9e:	6138      	str	r0, [r7, #16]
  TF_LITE_ENSURE(context, input != nullptr);
 8028ea0:	693b      	ldr	r3, [r7, #16]
 8028ea2:	2b00      	cmp	r3, #0
 8028ea4:	d10a      	bne.n	8028ebc <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x44>
 8028ea6:	687b      	ldr	r3, [r7, #4]
 8028ea8:	695c      	ldr	r4, [r3, #20]
 8028eaa:	4b1a      	ldr	r3, [pc, #104]	; (8028f14 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x9c>)
 8028eac:	9300      	str	r3, [sp, #0]
 8028eae:	238e      	movs	r3, #142	; 0x8e
 8028eb0:	4a19      	ldr	r2, [pc, #100]	; (8028f18 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa0>)
 8028eb2:	491a      	ldr	r1, [pc, #104]	; (8028f1c <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa4>)
 8028eb4:	6878      	ldr	r0, [r7, #4]
 8028eb6:	47a0      	blx	r4
 8028eb8:	2301      	movs	r3, #1
 8028eba:	e027      	b.n	8028f0c <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x94>
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 8028ebc:	2200      	movs	r2, #0
 8028ebe:	6839      	ldr	r1, [r7, #0]
 8028ec0:	6878      	ldr	r0, [r7, #4]
 8028ec2:	f7ff f8a5 	bl	8028010 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 8028ec6:	60f8      	str	r0, [r7, #12]
  TF_LITE_ENSURE(context, output != nullptr);
 8028ec8:	68fb      	ldr	r3, [r7, #12]
 8028eca:	2b00      	cmp	r3, #0
 8028ecc:	d10a      	bne.n	8028ee4 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x6c>
 8028ece:	687b      	ldr	r3, [r7, #4]
 8028ed0:	695c      	ldr	r4, [r3, #20]
 8028ed2:	4b13      	ldr	r3, [pc, #76]	; (8028f20 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa8>)
 8028ed4:	9300      	str	r3, [sp, #0]
 8028ed6:	2390      	movs	r3, #144	; 0x90
 8028ed8:	4a0f      	ldr	r2, [pc, #60]	; (8028f18 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa0>)
 8028eda:	4910      	ldr	r1, [pc, #64]	; (8028f1c <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa4>)
 8028edc:	6878      	ldr	r0, [r7, #4]
 8028ede:	47a0      	blx	r4
 8028ee0:	2301      	movs	r3, #1
 8028ee2:	e013      	b.n	8028f0c <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x94>

  if (input->type == kTfLiteInt8) {
 8028ee4:	693b      	ldr	r3, [r7, #16]
 8028ee6:	781b      	ldrb	r3, [r3, #0]
 8028ee8:	2b09      	cmp	r3, #9
 8028eea:	d105      	bne.n	8028ef8 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x80>
    CalculateReluOpData<int8_t>(input, output, data);
 8028eec:	697a      	ldr	r2, [r7, #20]
 8028eee:	68f9      	ldr	r1, [r7, #12]
 8028ef0:	6938      	ldr	r0, [r7, #16]
 8028ef2:	f000 fa9d 	bl	8029430 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIaEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE>
 8028ef6:	e008      	b.n	8028f0a <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x92>
  } else if (input->type == kTfLiteUInt8) {
 8028ef8:	693b      	ldr	r3, [r7, #16]
 8028efa:	781b      	ldrb	r3, [r3, #0]
 8028efc:	2b03      	cmp	r3, #3
 8028efe:	d104      	bne.n	8028f0a <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x92>
    CalculateReluOpData<uint8_t>(input, output, data);
 8028f00:	697a      	ldr	r2, [r7, #20]
 8028f02:	68f9      	ldr	r1, [r7, #12]
 8028f04:	6938      	ldr	r0, [r7, #16]
 8028f06:	f000 fb35 	bl	8029574 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIhEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE>
  }

  return kTfLiteOk;
 8028f0a:	2300      	movs	r3, #0
}
 8028f0c:	4618      	mov	r0, r3
 8028f0e:	371c      	adds	r7, #28
 8028f10:	46bd      	mov	sp, r7
 8028f12:	bd90      	pop	{r4, r7, pc}
 8028f14:	08034a24 	.word	0x08034a24
 8028f18:	08034980 	.word	0x08034980
 8028f1c:	08034a0c 	.word	0x08034a0c
 8028f20:	08034a38 	.word	0x08034a38

08028f24 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus ReluEval(TfLiteContext* context, TfLiteNode* node) {
 8028f24:	b590      	push	{r4, r7, lr}
 8028f26:	b0ad      	sub	sp, #180	; 0xb4
 8028f28:	af02      	add	r7, sp, #8
 8028f2a:	6078      	str	r0, [r7, #4]
 8028f2c:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 8028f2e:	683b      	ldr	r3, [r7, #0]
 8028f30:	691b      	ldr	r3, [r3, #16]
 8028f32:	2b00      	cmp	r3, #0
 8028f34:	d101      	bne.n	8028f3a <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x16>
 8028f36:	f009 f891 	bl	803205c <abort>
  const ReluOpData& data = *(static_cast<const ReluOpData*>(node->user_data));
 8028f3a:	683b      	ldr	r3, [r7, #0]
 8028f3c:	691b      	ldr	r3, [r3, #16]
 8028f3e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kInputTensor);
 8028f42:	2200      	movs	r2, #0
 8028f44:	6839      	ldr	r1, [r7, #0]
 8028f46:	6878      	ldr	r0, [r7, #4]
 8028f48:	f7ff fed8 	bl	8028cfc <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8028f4c:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
 8028f50:	2200      	movs	r2, #0
 8028f52:	6839      	ldr	r1, [r7, #0]
 8028f54:	6878      	ldr	r0, [r7, #4]
 8028f56:	f7ff fee1 	bl	8028d1c <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 8028f5a:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

  switch (input->type) {
 8028f5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8028f62:	7a1b      	ldrb	r3, [r3, #8]
 8028f64:	2b09      	cmp	r3, #9
 8028f66:	d032      	beq.n	8028fce <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0xaa>
 8028f68:	2b09      	cmp	r3, #9
 8028f6a:	f300 808c 	bgt.w	8029086 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x162>
 8028f6e:	2b01      	cmp	r3, #1
 8028f70:	d002      	beq.n	8028f78 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x54>
 8028f72:	2b03      	cmp	r3, #3
 8028f74:	d059      	beq.n	802902a <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x106>
 8028f76:	e086      	b.n	8029086 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x162>
    case kTfLiteFloat32: {
      ReluFloat(tflite::micro::GetTensorShape(input),
 8028f78:	f107 030c 	add.w	r3, r7, #12
 8028f7c:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8028f80:	4618      	mov	r0, r3
 8028f82:	f002 ff89 	bl	802be98 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 8028f86:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8028f8a:	f000 fb95 	bl	80296b8 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 8028f8e:	4604      	mov	r4, r0
                tflite::micro::GetTensorData<float>(input),
                tflite::micro::GetTensorShape(output),
 8028f90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8028f94:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8028f98:	4618      	mov	r0, r3
 8028f9a:	f002 ff7d 	bl	802be98 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      ReluFloat(tflite::micro::GetTensorShape(input),
 8028f9e:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8028fa2:	f000 fb98 	bl	80296d6 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 8028fa6:	4603      	mov	r3, r0
 8028fa8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8028fac:	f107 000c 	add.w	r0, r7, #12
 8028fb0:	4621      	mov	r1, r4
 8028fb2:	f7ff fed3 	bl	8028d5c <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf>
                tflite::micro::GetTensorShape(output),
 8028fb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8028fba:	4618      	mov	r0, r3
 8028fbc:	f7ff fc19 	bl	80287f2 <_ZN6tflite12RuntimeShapeD1Ev>
      ReluFloat(tflite::micro::GetTensorShape(input),
 8028fc0:	f107 030c 	add.w	r3, r7, #12
 8028fc4:	4618      	mov	r0, r3
 8028fc6:	f7ff fc14 	bl	80287f2 <_ZN6tflite12RuntimeShapeD1Ev>
                tflite::micro::GetTensorData<float>(output));

      return kTfLiteOk;
 8028fca:	2300      	movs	r3, #0
 8028fcc:	e069      	b.n	80290a2 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x17e>
    }
    case kTfLiteInt8: {
      ReluQuantized<int8_t>(data, tflite::micro::GetTensorShape(input),
 8028fce:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8028fd2:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8028fd6:	4618      	mov	r0, r3
 8028fd8:	f002 ff5e 	bl	802be98 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
                            tflite::micro::GetTensorShape(output),
 8028fdc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8028fe0:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8028fe4:	4618      	mov	r0, r3
 8028fe6:	f002 ff57 	bl	802be98 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      ReluQuantized<int8_t>(data, tflite::micro::GetTensorShape(input),
 8028fea:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8028fee:	f000 fb83 	bl	80296f8 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8028ff2:	4604      	mov	r4, r0
 8028ff4:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8028ff8:	f000 fb8d 	bl	8029716 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 8028ffc:	4603      	mov	r3, r0
 8028ffe:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8029002:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8029006:	9300      	str	r3, [sp, #0]
 8029008:	4623      	mov	r3, r4
 802900a:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 802900e:	f000 fb93 	bl	8029738 <_ZN6tflite3ops5micro11activations13ReluQuantizedIaEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_>
                            tflite::micro::GetTensorShape(output),
 8029012:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8029016:	4618      	mov	r0, r3
 8029018:	f7ff fbeb 	bl	80287f2 <_ZN6tflite12RuntimeShapeD1Ev>
      ReluQuantized<int8_t>(data, tflite::micro::GetTensorShape(input),
 802901c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8029020:	4618      	mov	r0, r3
 8029022:	f7ff fbe6 	bl	80287f2 <_ZN6tflite12RuntimeShapeD1Ev>
                            tflite::micro::GetTensorData<int8_t>(input),
                            tflite::micro::GetTensorData<int8_t>(output));
      return kTfLiteOk;
 8029026:	2300      	movs	r3, #0
 8029028:	e03b      	b.n	80290a2 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x17e>
    }
    case kTfLiteUInt8: {
      ReluQuantized<uint8_t>(data, tflite::micro::GetTensorShape(input),
 802902a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 802902e:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8029032:	4618      	mov	r0, r3
 8029034:	f002 ff30 	bl	802be98 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
                             tflite::micro::GetTensorShape(output),
 8029038:	f107 0384 	add.w	r3, r7, #132	; 0x84
 802903c:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8029040:	4618      	mov	r0, r3
 8029042:	f002 ff29 	bl	802be98 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      ReluQuantized<uint8_t>(data, tflite::micro::GetTensorShape(input),
 8029046:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 802904a:	f000 fbc1 	bl	80297d0 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 802904e:	4604      	mov	r4, r0
 8029050:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8029054:	f000 fbcb 	bl	80297ee <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>
 8029058:	4603      	mov	r3, r0
 802905a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 802905e:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8029062:	9300      	str	r3, [sp, #0]
 8029064:	4623      	mov	r3, r4
 8029066:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 802906a:	f000 fbd1 	bl	8029810 <_ZN6tflite3ops5micro11activations13ReluQuantizedIhEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_>
                             tflite::micro::GetTensorShape(output),
 802906e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8029072:	4618      	mov	r0, r3
 8029074:	f7ff fbbd 	bl	80287f2 <_ZN6tflite12RuntimeShapeD1Ev>
      ReluQuantized<uint8_t>(data, tflite::micro::GetTensorShape(input),
 8029078:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 802907c:	4618      	mov	r0, r3
 802907e:	f7ff fbb8 	bl	80287f2 <_ZN6tflite12RuntimeShapeD1Ev>
                             tflite::micro::GetTensorData<uint8_t>(input),
                             tflite::micro::GetTensorData<uint8_t>(output));
      return kTfLiteOk;
 8029082:	2300      	movs	r3, #0
 8029084:	e00d      	b.n	80290a2 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x17e>
    }
    default: {
      TF_LITE_KERNEL_LOG(context, "Only float32 is supported currently, got %s",
 8029086:	687b      	ldr	r3, [r7, #4]
 8029088:	695c      	ldr	r4, [r3, #20]
 802908a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 802908e:	7a1b      	ldrb	r3, [r3, #8]
 8029090:	4618      	mov	r0, r3
 8029092:	f7fe fc67 	bl	8027964 <TfLiteTypeGetName>
 8029096:	4603      	mov	r3, r0
 8029098:	461a      	mov	r2, r3
 802909a:	4904      	ldr	r1, [pc, #16]	; (80290ac <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x188>)
 802909c:	6878      	ldr	r0, [r7, #4]
 802909e:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type));
      return kTfLiteError;
 80290a0:	2301      	movs	r3, #1
    }
  }
}
 80290a2:	4618      	mov	r0, r3
 80290a4:	37ac      	adds	r7, #172	; 0xac
 80290a6:	46bd      	mov	sp, r7
 80290a8:	bd90      	pop	{r4, r7, pc}
 80290aa:	bf00      	nop
 80290ac:	08034a4c 	.word	0x08034a4c

080290b0 <_ZN6tflite3ops5micro11activations9Relu6InitEP13TfLiteContextPKcj>:

void* Relu6Init(TfLiteContext* context, const char* buffer, size_t length) {
 80290b0:	b580      	push	{r7, lr}
 80290b2:	b084      	sub	sp, #16
 80290b4:	af00      	add	r7, sp, #0
 80290b6:	60f8      	str	r0, [r7, #12]
 80290b8:	60b9      	str	r1, [r7, #8]
 80290ba:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 80290bc:	68fb      	ldr	r3, [r7, #12]
 80290be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80290c0:	2b00      	cmp	r3, #0
 80290c2:	d101      	bne.n	80290c8 <_ZN6tflite3ops5micro11activations9Relu6InitEP13TfLiteContextPKcj+0x18>
 80290c4:	f008 ffca 	bl	803205c <abort>
  return context->AllocatePersistentBuffer(context, sizeof(Relu6OpData));
 80290c8:	68fb      	ldr	r3, [r7, #12]
 80290ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80290cc:	2104      	movs	r1, #4
 80290ce:	68f8      	ldr	r0, [r7, #12]
 80290d0:	4798      	blx	r3
 80290d2:	4603      	mov	r3, r0
}
 80290d4:	4618      	mov	r0, r3
 80290d6:	3710      	adds	r7, #16
 80290d8:	46bd      	mov	sp, r7
 80290da:	bd80      	pop	{r7, pc}

080290dc <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Relu6Prepare(TfLiteContext* context, TfLiteNode* node) {
 80290dc:	b590      	push	{r4, r7, lr}
 80290de:	b087      	sub	sp, #28
 80290e0:	af02      	add	r7, sp, #8
 80290e2:	6078      	str	r0, [r7, #4]
 80290e4:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 80290e6:	683b      	ldr	r3, [r7, #0]
 80290e8:	691b      	ldr	r3, [r3, #16]
 80290ea:	2b00      	cmp	r3, #0
 80290ec:	d101      	bne.n	80290f2 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0x16>
 80290ee:	f008 ffb5 	bl	803205c <abort>
  Relu6OpData* data = static_cast<Relu6OpData*>(node->user_data);
 80290f2:	683b      	ldr	r3, [r7, #0]
 80290f4:	691b      	ldr	r3, [r3, #16]
 80290f6:	60fb      	str	r3, [r7, #12]

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 80290f8:	2200      	movs	r2, #0
 80290fa:	6839      	ldr	r1, [r7, #0]
 80290fc:	6878      	ldr	r0, [r7, #4]
 80290fe:	f7fe ff77 	bl	8027ff0 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8029102:	60b8      	str	r0, [r7, #8]
  TF_LITE_ENSURE(context, input != nullptr);
 8029104:	68bb      	ldr	r3, [r7, #8]
 8029106:	2b00      	cmp	r3, #0
 8029108:	d10a      	bne.n	8029120 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0x44>
 802910a:	687b      	ldr	r3, [r7, #4]
 802910c:	695c      	ldr	r4, [r3, #20]
 802910e:	4b20      	ldr	r3, [pc, #128]	; (8029190 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xb4>)
 8029110:	9300      	str	r3, [sp, #0]
 8029112:	23cd      	movs	r3, #205	; 0xcd
 8029114:	4a1f      	ldr	r2, [pc, #124]	; (8029194 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xb8>)
 8029116:	4920      	ldr	r1, [pc, #128]	; (8029198 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xbc>)
 8029118:	6878      	ldr	r0, [r7, #4]
 802911a:	47a0      	blx	r4
 802911c:	2301      	movs	r3, #1
 802911e:	e033      	b.n	8029188 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xac>

  if (input->type == kTfLiteInt8) {
 8029120:	68bb      	ldr	r3, [r7, #8]
 8029122:	781b      	ldrb	r3, [r3, #0]
 8029124:	2b09      	cmp	r3, #9
 8029126:	d115      	bne.n	8029154 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0x78>
    data->six_int8 = FloatToQuantizedType<int8_t>(6.0f, input->params.scale,
 8029128:	68bb      	ldr	r3, [r7, #8]
 802912a:	edd3 7a03 	vldr	s15, [r3, #12]
                                                  input->params.zero_point);
 802912e:	68bb      	ldr	r3, [r7, #8]
 8029130:	691b      	ldr	r3, [r3, #16]
    data->six_int8 = FloatToQuantizedType<int8_t>(6.0f, input->params.scale,
 8029132:	4618      	mov	r0, r3
 8029134:	eef0 0a67 	vmov.f32	s1, s15
 8029138:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 802913c:	f000 fbb3 	bl	80298a6 <_ZN6tflite20FloatToQuantizedTypeIaEET_ffi>
 8029140:	4603      	mov	r3, r0
 8029142:	461a      	mov	r2, r3
 8029144:	68fb      	ldr	r3, [r7, #12]
 8029146:	701a      	strb	r2, [r3, #0]
    data->zero_int8 = input->params.zero_point;
 8029148:	68bb      	ldr	r3, [r7, #8]
 802914a:	691b      	ldr	r3, [r3, #16]
 802914c:	b25a      	sxtb	r2, r3
 802914e:	68fb      	ldr	r3, [r7, #12]
 8029150:	705a      	strb	r2, [r3, #1]
 8029152:	e018      	b.n	8029186 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xaa>
  } else if (input->type == kTfLiteUInt8) {
 8029154:	68bb      	ldr	r3, [r7, #8]
 8029156:	781b      	ldrb	r3, [r3, #0]
 8029158:	2b03      	cmp	r3, #3
 802915a:	d114      	bne.n	8029186 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xaa>
    data->six_uint8 = FloatToQuantizedType<uint8_t>(6.0f, input->params.scale,
 802915c:	68bb      	ldr	r3, [r7, #8]
 802915e:	edd3 7a03 	vldr	s15, [r3, #12]
                                                    input->params.zero_point);
 8029162:	68bb      	ldr	r3, [r7, #8]
 8029164:	691b      	ldr	r3, [r3, #16]
    data->six_uint8 = FloatToQuantizedType<uint8_t>(6.0f, input->params.scale,
 8029166:	4618      	mov	r0, r3
 8029168:	eef0 0a67 	vmov.f32	s1, s15
 802916c:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 8029170:	f000 fbe8 	bl	8029944 <_ZN6tflite20FloatToQuantizedTypeIhEET_ffi>
 8029174:	4603      	mov	r3, r0
 8029176:	461a      	mov	r2, r3
 8029178:	68fb      	ldr	r3, [r7, #12]
 802917a:	709a      	strb	r2, [r3, #2]
    data->zero_uint8 = input->params.zero_point;
 802917c:	68bb      	ldr	r3, [r7, #8]
 802917e:	691b      	ldr	r3, [r3, #16]
 8029180:	b2da      	uxtb	r2, r3
 8029182:	68fb      	ldr	r3, [r7, #12]
 8029184:	70da      	strb	r2, [r3, #3]
  }

  return kTfLiteOk;
 8029186:	2300      	movs	r3, #0
}
 8029188:	4618      	mov	r0, r3
 802918a:	3714      	adds	r7, #20
 802918c:	46bd      	mov	sp, r7
 802918e:	bd90      	pop	{r4, r7, pc}
 8029190:	08034a24 	.word	0x08034a24
 8029194:	08034980 	.word	0x08034980
 8029198:	08034a0c 	.word	0x08034a0c

0802919c <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Relu6Eval(TfLiteContext* context, TfLiteNode* node) {
 802919c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802919e:	b0ad      	sub	sp, #180	; 0xb4
 80291a0:	af02      	add	r7, sp, #8
 80291a2:	6078      	str	r0, [r7, #4]
 80291a4:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 80291a6:	683b      	ldr	r3, [r7, #0]
 80291a8:	691b      	ldr	r3, [r3, #16]
 80291aa:	2b00      	cmp	r3, #0
 80291ac:	d101      	bne.n	80291b2 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x16>
 80291ae:	f008 ff55 	bl	803205c <abort>
  const Relu6OpData& data = *(static_cast<const Relu6OpData*>(node->user_data));
 80291b2:	683b      	ldr	r3, [r7, #0]
 80291b4:	691b      	ldr	r3, [r3, #16]
 80291b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kInputTensor);
 80291ba:	2200      	movs	r2, #0
 80291bc:	6839      	ldr	r1, [r7, #0]
 80291be:	6878      	ldr	r0, [r7, #4]
 80291c0:	f7ff fd9c 	bl	8028cfc <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 80291c4:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
 80291c8:	2200      	movs	r2, #0
 80291ca:	6839      	ldr	r1, [r7, #0]
 80291cc:	6878      	ldr	r0, [r7, #4]
 80291ce:	f7ff fda5 	bl	8028d1c <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 80291d2:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

  switch (input->type) {
 80291d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80291da:	7a1b      	ldrb	r3, [r3, #8]
 80291dc:	2b09      	cmp	r3, #9
 80291de:	d032      	beq.n	8029246 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0xaa>
 80291e0:	2b09      	cmp	r3, #9
 80291e2:	f300 809c 	bgt.w	802931e <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x182>
 80291e6:	2b01      	cmp	r3, #1
 80291e8:	d002      	beq.n	80291f0 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x54>
 80291ea:	2b03      	cmp	r3, #3
 80291ec:	d062      	beq.n	80292b4 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x118>
 80291ee:	e096      	b.n	802931e <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x182>
    case kTfLiteFloat32: {
      Relu6Float(tflite::micro::GetTensorShape(input),
 80291f0:	f107 030c 	add.w	r3, r7, #12
 80291f4:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80291f8:	4618      	mov	r0, r3
 80291fa:	f002 fe4d 	bl	802be98 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 80291fe:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8029202:	f000 fa59 	bl	80296b8 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 8029206:	4604      	mov	r4, r0
                 tflite::micro::GetTensorData<float>(input),
                 tflite::micro::GetTensorShape(output),
 8029208:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802920c:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8029210:	4618      	mov	r0, r3
 8029212:	f002 fe41 	bl	802be98 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Float(tflite::micro::GetTensorShape(input),
 8029216:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 802921a:	f000 fa5c 	bl	80296d6 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 802921e:	4603      	mov	r3, r0
 8029220:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8029224:	f107 000c 	add.w	r0, r7, #12
 8029228:	4621      	mov	r1, r4
 802922a:	f7ff fdcb 	bl	8028dc4 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf>
                 tflite::micro::GetTensorShape(output),
 802922e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8029232:	4618      	mov	r0, r3
 8029234:	f7ff fadd 	bl	80287f2 <_ZN6tflite12RuntimeShapeD1Ev>
      Relu6Float(tflite::micro::GetTensorShape(input),
 8029238:	f107 030c 	add.w	r3, r7, #12
 802923c:	4618      	mov	r0, r3
 802923e:	f7ff fad8 	bl	80287f2 <_ZN6tflite12RuntimeShapeD1Ev>
                 tflite::micro::GetTensorData<float>(output));

      return kTfLiteOk;
 8029242:	2300      	movs	r3, #0
 8029244:	e079      	b.n	802933a <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x19e>
    }
    case kTfLiteInt8: {
      Relu6Quantized<int8_t>(data.zero_int8, data.six_int8,
 8029246:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 802924a:	f993 4001 	ldrsb.w	r4, [r3, #1]
 802924e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8029252:	f993 5000 	ldrsb.w	r5, [r3]
                             tflite::micro::GetTensorShape(input),
 8029256:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 802925a:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 802925e:	4618      	mov	r0, r3
 8029260:	f002 fe1a 	bl	802be98 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Quantized<int8_t>(data.zero_int8, data.six_int8,
 8029264:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8029268:	f000 fa46 	bl	80296f8 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 802926c:	4606      	mov	r6, r0
                             tflite::micro::GetTensorData<int8_t>(input),
                             tflite::micro::GetTensorShape(output),
 802926e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8029272:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8029276:	4618      	mov	r0, r3
 8029278:	f002 fe0e 	bl	802be98 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Quantized<int8_t>(data.zero_int8, data.six_int8,
 802927c:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8029280:	f000 fa49 	bl	8029716 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 8029284:	4603      	mov	r3, r0
 8029286:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 802928a:	9301      	str	r3, [sp, #4]
 802928c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8029290:	9300      	str	r3, [sp, #0]
 8029292:	4633      	mov	r3, r6
 8029294:	4629      	mov	r1, r5
 8029296:	4620      	mov	r0, r4
 8029298:	f000 fba3 	bl	80299e2 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_>
                             tflite::micro::GetTensorShape(output),
 802929c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80292a0:	4618      	mov	r0, r3
 80292a2:	f7ff faa6 	bl	80287f2 <_ZN6tflite12RuntimeShapeD1Ev>
                             tflite::micro::GetTensorShape(input),
 80292a6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80292aa:	4618      	mov	r0, r3
 80292ac:	f7ff faa1 	bl	80287f2 <_ZN6tflite12RuntimeShapeD1Ev>
                             tflite::micro::GetTensorData<int8_t>(output));
      return kTfLiteOk;
 80292b0:	2300      	movs	r3, #0
 80292b2:	e042      	b.n	802933a <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x19e>
    }
    case kTfLiteUInt8: {
      Relu6Quantized<uint8_t>(data.zero_uint8, data.six_uint8,
 80292b4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80292b8:	78dc      	ldrb	r4, [r3, #3]
 80292ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80292be:	789d      	ldrb	r5, [r3, #2]
                              tflite::micro::GetTensorShape(input),
 80292c0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80292c4:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80292c8:	4618      	mov	r0, r3
 80292ca:	f002 fde5 	bl	802be98 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Quantized<uint8_t>(data.zero_uint8, data.six_uint8,
 80292ce:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 80292d2:	f000 fa7d 	bl	80297d0 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 80292d6:	4606      	mov	r6, r0
                              tflite::micro::GetTensorData<uint8_t>(input),
                              tflite::micro::GetTensorShape(output),
 80292d8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80292dc:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 80292e0:	4618      	mov	r0, r3
 80292e2:	f002 fdd9 	bl	802be98 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Quantized<uint8_t>(data.zero_uint8, data.six_uint8,
 80292e6:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80292ea:	f000 fa80 	bl	80297ee <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>
 80292ee:	4603      	mov	r3, r0
 80292f0:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80292f4:	9301      	str	r3, [sp, #4]
 80292f6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80292fa:	9300      	str	r3, [sp, #0]
 80292fc:	4633      	mov	r3, r6
 80292fe:	4629      	mov	r1, r5
 8029300:	4620      	mov	r0, r4
 8029302:	f000 fbad 	bl	8029a60 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_>
                              tflite::micro::GetTensorShape(output),
 8029306:	f107 0384 	add.w	r3, r7, #132	; 0x84
 802930a:	4618      	mov	r0, r3
 802930c:	f7ff fa71 	bl	80287f2 <_ZN6tflite12RuntimeShapeD1Ev>
                              tflite::micro::GetTensorShape(input),
 8029310:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8029314:	4618      	mov	r0, r3
 8029316:	f7ff fa6c 	bl	80287f2 <_ZN6tflite12RuntimeShapeD1Ev>
                              tflite::micro::GetTensorData<uint8_t>(output));
      return kTfLiteOk;
 802931a:	2300      	movs	r3, #0
 802931c:	e00d      	b.n	802933a <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x19e>
    }
    default: {
      TF_LITE_KERNEL_LOG(context, "Only float32 is supported currently, got %s",
 802931e:	687b      	ldr	r3, [r7, #4]
 8029320:	695c      	ldr	r4, [r3, #20]
 8029322:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8029326:	7a1b      	ldrb	r3, [r3, #8]
 8029328:	4618      	mov	r0, r3
 802932a:	f7fe fb1b 	bl	8027964 <TfLiteTypeGetName>
 802932e:	4603      	mov	r3, r0
 8029330:	461a      	mov	r2, r3
 8029332:	4904      	ldr	r1, [pc, #16]	; (8029344 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x1a8>)
 8029334:	6878      	ldr	r0, [r7, #4]
 8029336:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type));
      return kTfLiteError;
 8029338:	2301      	movs	r3, #1
    }
  }
}
 802933a:	4618      	mov	r0, r3
 802933c:	37ac      	adds	r7, #172	; 0xac
 802933e:	46bd      	mov	sp, r7
 8029340:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8029342:	bf00      	nop
 8029344:	08034a4c 	.word	0x08034a4c

08029348 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>:
}

// Correctly-rounded-to-nearest division by a power-of-two.
// Also known as a rounding arithmetic right shift.
template <typename IntegerType>
inline IntegerType RoundingDivideByPOT(IntegerType x, int exponent) {
 8029348:	b5f0      	push	{r4, r5, r6, r7, lr}
 802934a:	b089      	sub	sp, #36	; 0x24
 802934c:	af00      	add	r7, sp, #0
 802934e:	6078      	str	r0, [r7, #4]
 8029350:	6039      	str	r1, [r7, #0]
  assert(exponent >= 0);
 8029352:	6839      	ldr	r1, [r7, #0]
 8029354:	2900      	cmp	r1, #0
 8029356:	da06      	bge.n	8029366 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x1e>
 8029358:	4b31      	ldr	r3, [pc, #196]	; (8029420 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xd8>)
 802935a:	4a32      	ldr	r2, [pc, #200]	; (8029424 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xdc>)
 802935c:	f44f 71b3 	mov.w	r1, #358	; 0x166
 8029360:	4831      	ldr	r0, [pc, #196]	; (8029428 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe0>)
 8029362:	f008 fe83 	bl	803206c <__assert_func>
  assert(exponent <= 31);
 8029366:	6839      	ldr	r1, [r7, #0]
 8029368:	291f      	cmp	r1, #31
 802936a:	dd06      	ble.n	802937a <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x32>
 802936c:	4b2f      	ldr	r3, [pc, #188]	; (802942c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe4>)
 802936e:	4a2d      	ldr	r2, [pc, #180]	; (8029424 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xdc>)
 8029370:	f240 1167 	movw	r1, #359	; 0x167
 8029374:	482c      	ldr	r0, [pc, #176]	; (8029428 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe0>)
 8029376:	f008 fe79 	bl	803206c <__assert_func>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
 802937a:	f04f 0001 	mov.w	r0, #1
 802937e:	f04f 0100 	mov.w	r1, #0
 8029382:	683c      	ldr	r4, [r7, #0]
 8029384:	f1a4 0620 	sub.w	r6, r4, #32
 8029388:	f1c4 0520 	rsb	r5, r4, #32
 802938c:	fa01 f304 	lsl.w	r3, r1, r4
 8029390:	fa00 f606 	lsl.w	r6, r0, r6
 8029394:	4333      	orrs	r3, r6
 8029396:	fa20 f505 	lsr.w	r5, r0, r5
 802939a:	432b      	orrs	r3, r5
 802939c:	fa00 f204 	lsl.w	r2, r0, r4
 80293a0:	4613      	mov	r3, r2
 80293a2:	3b01      	subs	r3, #1
 80293a4:	4618      	mov	r0, r3
 80293a6:	f000 fb93 	bl	8029ad0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80293aa:	61f8      	str	r0, [r7, #28]
  const IntegerType zero = Dup<IntegerType>(0);
 80293ac:	2000      	movs	r0, #0
 80293ae:	f000 fb8f 	bl	8029ad0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80293b2:	61b8      	str	r0, [r7, #24]
  const IntegerType one = Dup<IntegerType>(1);
 80293b4:	2001      	movs	r0, #1
 80293b6:	f000 fb8b 	bl	8029ad0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80293ba:	6178      	str	r0, [r7, #20]
  const IntegerType remainder = BitAnd(x, mask);
 80293bc:	69f9      	ldr	r1, [r7, #28]
 80293be:	6878      	ldr	r0, [r7, #4]
 80293c0:	f000 fb91 	bl	8029ae6 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 80293c4:	6138      	str	r0, [r7, #16]
  const IntegerType threshold =
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
 80293c6:	2101      	movs	r1, #1
 80293c8:	69f8      	ldr	r0, [r7, #28]
 80293ca:	f000 fb9a 	bl	8029b02 <_ZN8gemmlowp10ShiftRightIlEET_S1_i>
 80293ce:	4604      	mov	r4, r0
 80293d0:	69b9      	ldr	r1, [r7, #24]
 80293d2:	6878      	ldr	r0, [r7, #4]
 80293d4:	f000 fba4 	bl	8029b20 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 80293d8:	4603      	mov	r3, r0
 80293da:	6979      	ldr	r1, [r7, #20]
 80293dc:	4618      	mov	r0, r3
 80293de:	f000 fb82 	bl	8029ae6 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 80293e2:	4603      	mov	r3, r0
 80293e4:	4619      	mov	r1, r3
 80293e6:	4620      	mov	r0, r4
 80293e8:	f000 fbae 	bl	8029b48 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 80293ec:	60f8      	str	r0, [r7, #12]
  return Add(ShiftRight(x, exponent),
 80293ee:	6839      	ldr	r1, [r7, #0]
 80293f0:	6878      	ldr	r0, [r7, #4]
 80293f2:	f000 fb86 	bl	8029b02 <_ZN8gemmlowp10ShiftRightIlEET_S1_i>
 80293f6:	4604      	mov	r4, r0
 80293f8:	68f9      	ldr	r1, [r7, #12]
 80293fa:	6938      	ldr	r0, [r7, #16]
 80293fc:	f000 fbb2 	bl	8029b64 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 8029400:	4603      	mov	r3, r0
 8029402:	6979      	ldr	r1, [r7, #20]
 8029404:	4618      	mov	r0, r3
 8029406:	f000 fb6e 	bl	8029ae6 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 802940a:	4603      	mov	r3, r0
 802940c:	4619      	mov	r1, r3
 802940e:	4620      	mov	r0, r4
 8029410:	f000 fb9a 	bl	8029b48 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 8029414:	4603      	mov	r3, r0
             BitAnd(MaskIfGreaterThan(remainder, threshold), one));
}
 8029416:	4618      	mov	r0, r3
 8029418:	3724      	adds	r7, #36	; 0x24
 802941a:	46bd      	mov	sp, r7
 802941c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802941e:	bf00      	nop
 8029420:	08034ab8 	.word	0x08034ab8
 8029424:	08034ac8 	.word	0x08034ac8
 8029428:	08034b24 	.word	0x08034b24
 802942c:	08034bb0 	.word	0x08034bb0

08029430 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIaEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE>:
inline void CalculateReluOpData(const TfLiteTensor* input, TfLiteTensor* output,
 8029430:	b590      	push	{r4, r7, lr}
 8029432:	b099      	sub	sp, #100	; 0x64
 8029434:	af00      	add	r7, sp, #0
 8029436:	60f8      	str	r0, [r7, #12]
 8029438:	60b9      	str	r1, [r7, #8]
 802943a:	607a      	str	r2, [r7, #4]
  float act_min = 0.0;
 802943c:	f04f 0300 	mov.w	r3, #0
 8029440:	65fb      	str	r3, [r7, #92]	; 0x5c
  float act_max = std::numeric_limits<float>::infinity();
 8029442:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 8029446:	65bb      	str	r3, [r7, #88]	; 0x58
      static_cast<double>(input->params.scale / output->params.scale);
 8029448:	68fb      	ldr	r3, [r7, #12]
 802944a:	ed93 7a03 	vldr	s14, [r3, #12]
 802944e:	68bb      	ldr	r3, [r7, #8]
 8029450:	edd3 7a03 	vldr	s15, [r3, #12]
 8029454:	eec7 6a27 	vdiv.f32	s13, s14, s15
  double real_multiplier =
 8029458:	ee16 0a90 	vmov	r0, s13
 802945c:	f7d7 f87e 	bl	800055c <__aeabi_f2d>
 8029460:	4602      	mov	r2, r0
 8029462:	460b      	mov	r3, r1
 8029464:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  const RuntimeShape input_shape = GetTensorShape(input);
 8029468:	f107 0328 	add.w	r3, r7, #40	; 0x28
 802946c:	68f9      	ldr	r1, [r7, #12]
 802946e:	4618      	mov	r0, r3
 8029470:	f7ff fa39 	bl	80288e6 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  const RuntimeShape output_shape = GetTensorShape(output);
 8029474:	f107 0310 	add.w	r3, r7, #16
 8029478:	68b9      	ldr	r1, [r7, #8]
 802947a:	4618      	mov	r0, r3
 802947c:	f7ff fa33 	bl	80288e6 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  QuantizeMultiplier(real_multiplier, &data->params.output_multiplier,
 8029480:	687b      	ldr	r3, [r7, #4]
 8029482:	f103 0214 	add.w	r2, r3, #20
 8029486:	687b      	ldr	r3, [r7, #4]
 8029488:	3318      	adds	r3, #24
 802948a:	4619      	mov	r1, r3
 802948c:	4610      	mov	r0, r2
 802948e:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 8029492:	f7fe faed 	bl	8027a70 <_ZN6tflite18QuantizeMultiplierEdPlPi>
      static_cast<int32_t>(std::numeric_limits<T>::min()),
 8029496:	f7fe fca3 	bl	8027de0 <_ZNSt14numeric_limitsIaE3minEv>
 802949a:	4603      	mov	r3, r0
 802949c:	643b      	str	r3, [r7, #64]	; 0x40
      output->params.zero_point +
 802949e:	68bb      	ldr	r3, [r7, #8]
 80294a0:	691c      	ldr	r4, [r3, #16]
          static_cast<int32_t>(roundf(act_min / output->params.scale)));
 80294a2:	68bb      	ldr	r3, [r7, #8]
 80294a4:	edd3 7a03 	vldr	s15, [r3, #12]
 80294a8:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80294ac:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80294b0:	eeb0 0a66 	vmov.f32	s0, s13
 80294b4:	f006 fcb2 	bl	802fe1c <roundf>
 80294b8:	eef0 7a40 	vmov.f32	s15, s0
 80294bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80294c0:	ee17 3a90 	vmov	r3, s15
      output->params.zero_point +
 80294c4:	4423      	add	r3, r4
 80294c6:	647b      	str	r3, [r7, #68]	; 0x44
          static_cast<int32_t>(roundf(act_min / output->params.scale)));
 80294c8:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80294cc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80294d0:	4611      	mov	r1, r2
 80294d2:	4618      	mov	r0, r3
 80294d4:	f7ff f958 	bl	8028788 <_ZSt3maxIlERKT_S2_S2_>
 80294d8:	4603      	mov	r3, r0
  data->params.quantized_activation_min = std::max(
 80294da:	681a      	ldr	r2, [r3, #0]
 80294dc:	687b      	ldr	r3, [r7, #4]
 80294de:	605a      	str	r2, [r3, #4]
      act_max == std::numeric_limits<float>::infinity()
 80294e0:	f7ff fab6 	bl	8028a50 <_ZNSt14numeric_limitsIfE8infinityEv>
 80294e4:	eeb0 7a40 	vmov.f32	s14, s0
          ? static_cast<int32_t>(std::numeric_limits<T>::max())
 80294e8:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80294ec:	eef4 7a47 	vcmp.f32	s15, s14
 80294f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80294f4:	d103      	bne.n	80294fe <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIaEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE+0xce>
 80294f6:	f7fe fc7c 	bl	8027df2 <_ZNSt14numeric_limitsIaE3maxEv>
 80294fa:	4603      	mov	r3, r0
 80294fc:	e022      	b.n	8029544 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIaEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE+0x114>
          : std::min(static_cast<int32_t>(std::numeric_limits<T>::max()),
 80294fe:	f7fe fc78 	bl	8027df2 <_ZNSt14numeric_limitsIaE3maxEv>
 8029502:	4603      	mov	r3, r0
 8029504:	64bb      	str	r3, [r7, #72]	; 0x48
                     output->params.zero_point +
 8029506:	68bb      	ldr	r3, [r7, #8]
 8029508:	691c      	ldr	r4, [r3, #16]
                             roundf(act_max / output->params.scale)));
 802950a:	68bb      	ldr	r3, [r7, #8]
 802950c:	edd3 7a03 	vldr	s15, [r3, #12]
 8029510:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8029514:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8029518:	eeb0 0a66 	vmov.f32	s0, s13
 802951c:	f006 fc7e 	bl	802fe1c <roundf>
 8029520:	eef0 7a40 	vmov.f32	s15, s0
                         static_cast<int32_t>(
 8029524:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8029528:	ee17 3a90 	vmov	r3, s15
                     output->params.zero_point +
 802952c:	4423      	add	r3, r4
 802952e:	64fb      	str	r3, [r7, #76]	; 0x4c
                             roundf(act_max / output->params.scale)));
 8029530:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8029534:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8029538:	4611      	mov	r1, r2
 802953a:	4618      	mov	r0, r3
 802953c:	f7ff f910 	bl	8028760 <_ZSt3minIlERKT_S2_S2_>
 8029540:	4603      	mov	r3, r0
          ? static_cast<int32_t>(std::numeric_limits<T>::max())
 8029542:	681b      	ldr	r3, [r3, #0]
  data->params.quantized_activation_max =
 8029544:	687a      	ldr	r2, [r7, #4]
 8029546:	6093      	str	r3, [r2, #8]
  data->params.input_offset = input->params.zero_point;
 8029548:	68fb      	ldr	r3, [r7, #12]
 802954a:	691a      	ldr	r2, [r3, #16]
 802954c:	687b      	ldr	r3, [r7, #4]
 802954e:	60da      	str	r2, [r3, #12]
  data->params.output_offset = output->params.zero_point;
 8029550:	68bb      	ldr	r3, [r7, #8]
 8029552:	691a      	ldr	r2, [r3, #16]
 8029554:	687b      	ldr	r3, [r7, #4]
 8029556:	611a      	str	r2, [r3, #16]
  const RuntimeShape output_shape = GetTensorShape(output);
 8029558:	f107 0310 	add.w	r3, r7, #16
 802955c:	4618      	mov	r0, r3
 802955e:	f7ff f948 	bl	80287f2 <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape input_shape = GetTensorShape(input);
 8029562:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8029566:	4618      	mov	r0, r3
 8029568:	f7ff f943 	bl	80287f2 <_ZN6tflite12RuntimeShapeD1Ev>
}
 802956c:	bf00      	nop
 802956e:	3764      	adds	r7, #100	; 0x64
 8029570:	46bd      	mov	sp, r7
 8029572:	bd90      	pop	{r4, r7, pc}

08029574 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIhEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE>:
inline void CalculateReluOpData(const TfLiteTensor* input, TfLiteTensor* output,
 8029574:	b590      	push	{r4, r7, lr}
 8029576:	b099      	sub	sp, #100	; 0x64
 8029578:	af00      	add	r7, sp, #0
 802957a:	60f8      	str	r0, [r7, #12]
 802957c:	60b9      	str	r1, [r7, #8]
 802957e:	607a      	str	r2, [r7, #4]
  float act_min = 0.0;
 8029580:	f04f 0300 	mov.w	r3, #0
 8029584:	65fb      	str	r3, [r7, #92]	; 0x5c
  float act_max = std::numeric_limits<float>::infinity();
 8029586:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 802958a:	65bb      	str	r3, [r7, #88]	; 0x58
      static_cast<double>(input->params.scale / output->params.scale);
 802958c:	68fb      	ldr	r3, [r7, #12]
 802958e:	ed93 7a03 	vldr	s14, [r3, #12]
 8029592:	68bb      	ldr	r3, [r7, #8]
 8029594:	edd3 7a03 	vldr	s15, [r3, #12]
 8029598:	eec7 6a27 	vdiv.f32	s13, s14, s15
  double real_multiplier =
 802959c:	ee16 0a90 	vmov	r0, s13
 80295a0:	f7d6 ffdc 	bl	800055c <__aeabi_f2d>
 80295a4:	4602      	mov	r2, r0
 80295a6:	460b      	mov	r3, r1
 80295a8:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  const RuntimeShape input_shape = GetTensorShape(input);
 80295ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80295b0:	68f9      	ldr	r1, [r7, #12]
 80295b2:	4618      	mov	r0, r3
 80295b4:	f7ff f997 	bl	80288e6 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  const RuntimeShape output_shape = GetTensorShape(output);
 80295b8:	f107 0310 	add.w	r3, r7, #16
 80295bc:	68b9      	ldr	r1, [r7, #8]
 80295be:	4618      	mov	r0, r3
 80295c0:	f7ff f991 	bl	80288e6 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  QuantizeMultiplier(real_multiplier, &data->params.output_multiplier,
 80295c4:	687b      	ldr	r3, [r7, #4]
 80295c6:	f103 0214 	add.w	r2, r3, #20
 80295ca:	687b      	ldr	r3, [r7, #4]
 80295cc:	3318      	adds	r3, #24
 80295ce:	4619      	mov	r1, r3
 80295d0:	4610      	mov	r0, r2
 80295d2:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 80295d6:	f7fe fa4b 	bl	8027a70 <_ZN6tflite18QuantizeMultiplierEdPlPi>
      static_cast<int32_t>(std::numeric_limits<T>::min()),
 80295da:	f7fe fc12 	bl	8027e02 <_ZNSt14numeric_limitsIhE3minEv>
 80295de:	4603      	mov	r3, r0
 80295e0:	643b      	str	r3, [r7, #64]	; 0x40
      output->params.zero_point +
 80295e2:	68bb      	ldr	r3, [r7, #8]
 80295e4:	691c      	ldr	r4, [r3, #16]
          static_cast<int32_t>(roundf(act_min / output->params.scale)));
 80295e6:	68bb      	ldr	r3, [r7, #8]
 80295e8:	edd3 7a03 	vldr	s15, [r3, #12]
 80295ec:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80295f0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80295f4:	eeb0 0a66 	vmov.f32	s0, s13
 80295f8:	f006 fc10 	bl	802fe1c <roundf>
 80295fc:	eef0 7a40 	vmov.f32	s15, s0
 8029600:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8029604:	ee17 3a90 	vmov	r3, s15
      output->params.zero_point +
 8029608:	4423      	add	r3, r4
 802960a:	647b      	str	r3, [r7, #68]	; 0x44
          static_cast<int32_t>(roundf(act_min / output->params.scale)));
 802960c:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8029610:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8029614:	4611      	mov	r1, r2
 8029616:	4618      	mov	r0, r3
 8029618:	f7ff f8b6 	bl	8028788 <_ZSt3maxIlERKT_S2_S2_>
 802961c:	4603      	mov	r3, r0
  data->params.quantized_activation_min = std::max(
 802961e:	681a      	ldr	r2, [r3, #0]
 8029620:	687b      	ldr	r3, [r7, #4]
 8029622:	605a      	str	r2, [r3, #4]
      act_max == std::numeric_limits<float>::infinity()
 8029624:	f7ff fa14 	bl	8028a50 <_ZNSt14numeric_limitsIfE8infinityEv>
 8029628:	eeb0 7a40 	vmov.f32	s14, s0
          ? static_cast<int32_t>(std::numeric_limits<T>::max())
 802962c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8029630:	eef4 7a47 	vcmp.f32	s15, s14
 8029634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029638:	d103      	bne.n	8029642 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIhEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE+0xce>
 802963a:	f7fe fbea 	bl	8027e12 <_ZNSt14numeric_limitsIhE3maxEv>
 802963e:	4603      	mov	r3, r0
 8029640:	e022      	b.n	8029688 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIhEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE+0x114>
          : std::min(static_cast<int32_t>(std::numeric_limits<T>::max()),
 8029642:	f7fe fbe6 	bl	8027e12 <_ZNSt14numeric_limitsIhE3maxEv>
 8029646:	4603      	mov	r3, r0
 8029648:	64bb      	str	r3, [r7, #72]	; 0x48
                     output->params.zero_point +
 802964a:	68bb      	ldr	r3, [r7, #8]
 802964c:	691c      	ldr	r4, [r3, #16]
                             roundf(act_max / output->params.scale)));
 802964e:	68bb      	ldr	r3, [r7, #8]
 8029650:	edd3 7a03 	vldr	s15, [r3, #12]
 8029654:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8029658:	eec7 6a27 	vdiv.f32	s13, s14, s15
 802965c:	eeb0 0a66 	vmov.f32	s0, s13
 8029660:	f006 fbdc 	bl	802fe1c <roundf>
 8029664:	eef0 7a40 	vmov.f32	s15, s0
                         static_cast<int32_t>(
 8029668:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802966c:	ee17 3a90 	vmov	r3, s15
                     output->params.zero_point +
 8029670:	4423      	add	r3, r4
 8029672:	64fb      	str	r3, [r7, #76]	; 0x4c
                             roundf(act_max / output->params.scale)));
 8029674:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8029678:	f107 0348 	add.w	r3, r7, #72	; 0x48
 802967c:	4611      	mov	r1, r2
 802967e:	4618      	mov	r0, r3
 8029680:	f7ff f86e 	bl	8028760 <_ZSt3minIlERKT_S2_S2_>
 8029684:	4603      	mov	r3, r0
          ? static_cast<int32_t>(std::numeric_limits<T>::max())
 8029686:	681b      	ldr	r3, [r3, #0]
  data->params.quantized_activation_max =
 8029688:	687a      	ldr	r2, [r7, #4]
 802968a:	6093      	str	r3, [r2, #8]
  data->params.input_offset = input->params.zero_point;
 802968c:	68fb      	ldr	r3, [r7, #12]
 802968e:	691a      	ldr	r2, [r3, #16]
 8029690:	687b      	ldr	r3, [r7, #4]
 8029692:	60da      	str	r2, [r3, #12]
  data->params.output_offset = output->params.zero_point;
 8029694:	68bb      	ldr	r3, [r7, #8]
 8029696:	691a      	ldr	r2, [r3, #16]
 8029698:	687b      	ldr	r3, [r7, #4]
 802969a:	611a      	str	r2, [r3, #16]
  const RuntimeShape output_shape = GetTensorShape(output);
 802969c:	f107 0310 	add.w	r3, r7, #16
 80296a0:	4618      	mov	r0, r3
 80296a2:	f7ff f8a6 	bl	80287f2 <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape input_shape = GetTensorShape(input);
 80296a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80296aa:	4618      	mov	r0, r3
 80296ac:	f7ff f8a1 	bl	80287f2 <_ZN6tflite12RuntimeShapeD1Ev>
}
 80296b0:	bf00      	nop
 80296b2:	3764      	adds	r7, #100	; 0x64
 80296b4:	46bd      	mov	sp, r7
 80296b6:	bd90      	pop	{r4, r7, pc}

080296b8 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>:
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
}

// Returns const data for a TfLiteEvalTensor struct.
template <typename T>
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 80296b8:	b580      	push	{r7, lr}
 80296ba:	b082      	sub	sp, #8
 80296bc:	af00      	add	r7, sp, #0
 80296be:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 80296c0:	687b      	ldr	r3, [r7, #4]
 80296c2:	2b00      	cmp	r3, #0
 80296c4:	d101      	bne.n	80296ca <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor+0x12>
 80296c6:	f008 fcc9 	bl	803205c <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 80296ca:	687b      	ldr	r3, [r7, #4]
 80296cc:	681b      	ldr	r3, [r3, #0]
}
 80296ce:	4618      	mov	r0, r3
 80296d0:	3708      	adds	r7, #8
 80296d2:	46bd      	mov	sp, r7
 80296d4:	bd80      	pop	{r7, pc}

080296d6 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 80296d6:	b480      	push	{r7}
 80296d8:	b083      	sub	sp, #12
 80296da:	af00      	add	r7, sp, #0
 80296dc:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 80296de:	687b      	ldr	r3, [r7, #4]
 80296e0:	2b00      	cmp	r3, #0
 80296e2:	d002      	beq.n	80296ea <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor+0x14>
 80296e4:	687b      	ldr	r3, [r7, #4]
 80296e6:	681b      	ldr	r3, [r3, #0]
 80296e8:	e000      	b.n	80296ec <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor+0x16>
 80296ea:	2300      	movs	r3, #0
}
 80296ec:	4618      	mov	r0, r3
 80296ee:	370c      	adds	r7, #12
 80296f0:	46bd      	mov	sp, r7
 80296f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80296f6:	4770      	bx	lr

080296f8 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 80296f8:	b580      	push	{r7, lr}
 80296fa:	b082      	sub	sp, #8
 80296fc:	af00      	add	r7, sp, #0
 80296fe:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 8029700:	687b      	ldr	r3, [r7, #4]
 8029702:	2b00      	cmp	r3, #0
 8029704:	d101      	bne.n	802970a <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor+0x12>
 8029706:	f008 fca9 	bl	803205c <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 802970a:	687b      	ldr	r3, [r7, #4]
 802970c:	681b      	ldr	r3, [r3, #0]
}
 802970e:	4618      	mov	r0, r3
 8029710:	3708      	adds	r7, #8
 8029712:	46bd      	mov	sp, r7
 8029714:	bd80      	pop	{r7, pc}

08029716 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 8029716:	b480      	push	{r7}
 8029718:	b083      	sub	sp, #12
 802971a:	af00      	add	r7, sp, #0
 802971c:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 802971e:	687b      	ldr	r3, [r7, #4]
 8029720:	2b00      	cmp	r3, #0
 8029722:	d002      	beq.n	802972a <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor+0x14>
 8029724:	687b      	ldr	r3, [r7, #4]
 8029726:	681b      	ldr	r3, [r3, #0]
 8029728:	e000      	b.n	802972c <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor+0x16>
 802972a:	2300      	movs	r3, #0
}
 802972c:	4618      	mov	r0, r3
 802972e:	370c      	adds	r7, #12
 8029730:	46bd      	mov	sp, r7
 8029732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029736:	4770      	bx	lr

08029738 <_ZN6tflite3ops5micro11activations13ReluQuantizedIaEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_>:
inline void ReluQuantized(const ReluOpData& data,
 8029738:	b590      	push	{r4, r7, lr}
 802973a:	b089      	sub	sp, #36	; 0x24
 802973c:	af00      	add	r7, sp, #0
 802973e:	60f8      	str	r0, [r7, #12]
 8029740:	60b9      	str	r1, [r7, #8]
 8029742:	607a      	str	r2, [r7, #4]
 8029744:	603b      	str	r3, [r7, #0]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 8029746:	6879      	ldr	r1, [r7, #4]
 8029748:	68b8      	ldr	r0, [r7, #8]
 802974a:	f7ff fa5e 	bl	8028c0a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 802974e:	61b8      	str	r0, [r7, #24]
  for (int i = 0; i < flat_size; ++i) {
 8029750:	2300      	movs	r3, #0
 8029752:	61fb      	str	r3, [r7, #28]
 8029754:	69fa      	ldr	r2, [r7, #28]
 8029756:	69bb      	ldr	r3, [r7, #24]
 8029758:	429a      	cmp	r2, r3
 802975a:	da35      	bge.n	80297c8 <_ZN6tflite3ops5micro11activations13ReluQuantizedIaEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_+0x90>
    const int32_t val = static_cast<int32_t>(input_data[i]);
 802975c:	69fb      	ldr	r3, [r7, #28]
 802975e:	683a      	ldr	r2, [r7, #0]
 8029760:	4413      	add	r3, r2
 8029762:	f993 3000 	ldrsb.w	r3, [r3]
 8029766:	617b      	str	r3, [r7, #20]
        data.params.output_offset +
 8029768:	68fb      	ldr	r3, [r7, #12]
 802976a:	691c      	ldr	r4, [r3, #16]
        MultiplyByQuantizedMultiplier(val - data.params.input_offset,
 802976c:	68fb      	ldr	r3, [r7, #12]
 802976e:	68db      	ldr	r3, [r3, #12]
 8029770:	697a      	ldr	r2, [r7, #20]
 8029772:	1ad0      	subs	r0, r2, r3
                                      data.params.output_multiplier,
 8029774:	68fb      	ldr	r3, [r7, #12]
 8029776:	6959      	ldr	r1, [r3, #20]
                                      data.params.output_shift);
 8029778:	68fb      	ldr	r3, [r7, #12]
 802977a:	699b      	ldr	r3, [r3, #24]
        MultiplyByQuantizedMultiplier(val - data.params.input_offset,
 802977c:	461a      	mov	r2, r3
 802977e:	f7ff fa79 	bl	8028c74 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 8029782:	4603      	mov	r3, r0
        data.params.output_offset +
 8029784:	4423      	add	r3, r4
    int32_t clamped =
 8029786:	613b      	str	r3, [r7, #16]
    clamped = std::max(data.params.quantized_activation_min, clamped);
 8029788:	68fb      	ldr	r3, [r7, #12]
 802978a:	3304      	adds	r3, #4
 802978c:	f107 0210 	add.w	r2, r7, #16
 8029790:	4611      	mov	r1, r2
 8029792:	4618      	mov	r0, r3
 8029794:	f7fe fff8 	bl	8028788 <_ZSt3maxIlERKT_S2_S2_>
 8029798:	4603      	mov	r3, r0
 802979a:	681b      	ldr	r3, [r3, #0]
 802979c:	613b      	str	r3, [r7, #16]
    clamped = std::min(data.params.quantized_activation_max, clamped);
 802979e:	68fb      	ldr	r3, [r7, #12]
 80297a0:	3308      	adds	r3, #8
 80297a2:	f107 0210 	add.w	r2, r7, #16
 80297a6:	4611      	mov	r1, r2
 80297a8:	4618      	mov	r0, r3
 80297aa:	f7fe ffd9 	bl	8028760 <_ZSt3minIlERKT_S2_S2_>
 80297ae:	4603      	mov	r3, r0
 80297b0:	681b      	ldr	r3, [r3, #0]
 80297b2:	613b      	str	r3, [r7, #16]
    output_data[i] = static_cast<T>(clamped);
 80297b4:	6939      	ldr	r1, [r7, #16]
 80297b6:	69fb      	ldr	r3, [r7, #28]
 80297b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80297ba:	4413      	add	r3, r2
 80297bc:	b24a      	sxtb	r2, r1
 80297be:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 80297c0:	69fb      	ldr	r3, [r7, #28]
 80297c2:	3301      	adds	r3, #1
 80297c4:	61fb      	str	r3, [r7, #28]
 80297c6:	e7c5      	b.n	8029754 <_ZN6tflite3ops5micro11activations13ReluQuantizedIaEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_+0x1c>
}
 80297c8:	bf00      	nop
 80297ca:	3724      	adds	r7, #36	; 0x24
 80297cc:	46bd      	mov	sp, r7
 80297ce:	bd90      	pop	{r4, r7, pc}

080297d0 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 80297d0:	b580      	push	{r7, lr}
 80297d2:	b082      	sub	sp, #8
 80297d4:	af00      	add	r7, sp, #0
 80297d6:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 80297d8:	687b      	ldr	r3, [r7, #4]
 80297da:	2b00      	cmp	r3, #0
 80297dc:	d101      	bne.n	80297e2 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor+0x12>
 80297de:	f008 fc3d 	bl	803205c <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 80297e2:	687b      	ldr	r3, [r7, #4]
 80297e4:	681b      	ldr	r3, [r3, #0]
}
 80297e6:	4618      	mov	r0, r3
 80297e8:	3708      	adds	r7, #8
 80297ea:	46bd      	mov	sp, r7
 80297ec:	bd80      	pop	{r7, pc}

080297ee <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 80297ee:	b480      	push	{r7}
 80297f0:	b083      	sub	sp, #12
 80297f2:	af00      	add	r7, sp, #0
 80297f4:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 80297f6:	687b      	ldr	r3, [r7, #4]
 80297f8:	2b00      	cmp	r3, #0
 80297fa:	d002      	beq.n	8029802 <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor+0x14>
 80297fc:	687b      	ldr	r3, [r7, #4]
 80297fe:	681b      	ldr	r3, [r3, #0]
 8029800:	e000      	b.n	8029804 <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor+0x16>
 8029802:	2300      	movs	r3, #0
}
 8029804:	4618      	mov	r0, r3
 8029806:	370c      	adds	r7, #12
 8029808:	46bd      	mov	sp, r7
 802980a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802980e:	4770      	bx	lr

08029810 <_ZN6tflite3ops5micro11activations13ReluQuantizedIhEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_>:
inline void ReluQuantized(const ReluOpData& data,
 8029810:	b590      	push	{r4, r7, lr}
 8029812:	b089      	sub	sp, #36	; 0x24
 8029814:	af00      	add	r7, sp, #0
 8029816:	60f8      	str	r0, [r7, #12]
 8029818:	60b9      	str	r1, [r7, #8]
 802981a:	607a      	str	r2, [r7, #4]
 802981c:	603b      	str	r3, [r7, #0]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 802981e:	6879      	ldr	r1, [r7, #4]
 8029820:	68b8      	ldr	r0, [r7, #8]
 8029822:	f7ff f9f2 	bl	8028c0a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 8029826:	61b8      	str	r0, [r7, #24]
  for (int i = 0; i < flat_size; ++i) {
 8029828:	2300      	movs	r3, #0
 802982a:	61fb      	str	r3, [r7, #28]
 802982c:	69fa      	ldr	r2, [r7, #28]
 802982e:	69bb      	ldr	r3, [r7, #24]
 8029830:	429a      	cmp	r2, r3
 8029832:	da34      	bge.n	802989e <_ZN6tflite3ops5micro11activations13ReluQuantizedIhEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_+0x8e>
    const int32_t val = static_cast<int32_t>(input_data[i]);
 8029834:	69fb      	ldr	r3, [r7, #28]
 8029836:	683a      	ldr	r2, [r7, #0]
 8029838:	4413      	add	r3, r2
 802983a:	781b      	ldrb	r3, [r3, #0]
 802983c:	617b      	str	r3, [r7, #20]
        data.params.output_offset +
 802983e:	68fb      	ldr	r3, [r7, #12]
 8029840:	691c      	ldr	r4, [r3, #16]
        MultiplyByQuantizedMultiplier(val - data.params.input_offset,
 8029842:	68fb      	ldr	r3, [r7, #12]
 8029844:	68db      	ldr	r3, [r3, #12]
 8029846:	697a      	ldr	r2, [r7, #20]
 8029848:	1ad0      	subs	r0, r2, r3
                                      data.params.output_multiplier,
 802984a:	68fb      	ldr	r3, [r7, #12]
 802984c:	6959      	ldr	r1, [r3, #20]
                                      data.params.output_shift);
 802984e:	68fb      	ldr	r3, [r7, #12]
 8029850:	699b      	ldr	r3, [r3, #24]
        MultiplyByQuantizedMultiplier(val - data.params.input_offset,
 8029852:	461a      	mov	r2, r3
 8029854:	f7ff fa0e 	bl	8028c74 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 8029858:	4603      	mov	r3, r0
        data.params.output_offset +
 802985a:	4423      	add	r3, r4
    int32_t clamped =
 802985c:	613b      	str	r3, [r7, #16]
    clamped = std::max(data.params.quantized_activation_min, clamped);
 802985e:	68fb      	ldr	r3, [r7, #12]
 8029860:	3304      	adds	r3, #4
 8029862:	f107 0210 	add.w	r2, r7, #16
 8029866:	4611      	mov	r1, r2
 8029868:	4618      	mov	r0, r3
 802986a:	f7fe ff8d 	bl	8028788 <_ZSt3maxIlERKT_S2_S2_>
 802986e:	4603      	mov	r3, r0
 8029870:	681b      	ldr	r3, [r3, #0]
 8029872:	613b      	str	r3, [r7, #16]
    clamped = std::min(data.params.quantized_activation_max, clamped);
 8029874:	68fb      	ldr	r3, [r7, #12]
 8029876:	3308      	adds	r3, #8
 8029878:	f107 0210 	add.w	r2, r7, #16
 802987c:	4611      	mov	r1, r2
 802987e:	4618      	mov	r0, r3
 8029880:	f7fe ff6e 	bl	8028760 <_ZSt3minIlERKT_S2_S2_>
 8029884:	4603      	mov	r3, r0
 8029886:	681b      	ldr	r3, [r3, #0]
 8029888:	613b      	str	r3, [r7, #16]
    output_data[i] = static_cast<T>(clamped);
 802988a:	6939      	ldr	r1, [r7, #16]
 802988c:	69fb      	ldr	r3, [r7, #28]
 802988e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8029890:	4413      	add	r3, r2
 8029892:	b2ca      	uxtb	r2, r1
 8029894:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 8029896:	69fb      	ldr	r3, [r7, #28]
 8029898:	3301      	adds	r3, #1
 802989a:	61fb      	str	r3, [r7, #28]
 802989c:	e7c6      	b.n	802982c <_ZN6tflite3ops5micro11activations13ReluQuantizedIhEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_+0x1c>
}
 802989e:	bf00      	nop
 80298a0:	3724      	adds	r7, #36	; 0x24
 80298a2:	46bd      	mov	sp, r7
 80298a4:	bd90      	pop	{r4, r7, pc}

080298a6 <_ZN6tflite20FloatToQuantizedTypeIaEET_ffi>:

// Converts a float value into a quantized value.  Note that large values (close
// to max int and min int) may see significant error due to a lack of floating
// point granularity for large values.
template <typename T>
T FloatToQuantizedType(const float value, const float scale, int zero_point) {
 80298a6:	b5b0      	push	{r4, r5, r7, lr}
 80298a8:	b088      	sub	sp, #32
 80298aa:	af00      	add	r7, sp, #0
 80298ac:	ed87 0a03 	vstr	s0, [r7, #12]
 80298b0:	edc7 0a02 	vstr	s1, [r7, #8]
 80298b4:	6078      	str	r0, [r7, #4]
  int32_t result = round(value / scale) + zero_point;
 80298b6:	ed97 7a03 	vldr	s14, [r7, #12]
 80298ba:	edd7 7a02 	vldr	s15, [r7, #8]
 80298be:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80298c2:	ee16 0a90 	vmov	r0, s13
 80298c6:	f7d6 fe49 	bl	800055c <__aeabi_f2d>
 80298ca:	4602      	mov	r2, r0
 80298cc:	460b      	mov	r3, r1
 80298ce:	ec43 2b10 	vmov	d0, r2, r3
 80298d2:	f006 f955 	bl	802fb80 <round>
 80298d6:	ec55 4b10 	vmov	r4, r5, d0
 80298da:	6878      	ldr	r0, [r7, #4]
 80298dc:	f7d6 fe2c 	bl	8000538 <__aeabi_i2d>
 80298e0:	4602      	mov	r2, r0
 80298e2:	460b      	mov	r3, r1
 80298e4:	4620      	mov	r0, r4
 80298e6:	4629      	mov	r1, r5
 80298e8:	f7d6 fcda 	bl	80002a0 <__adddf3>
 80298ec:	4602      	mov	r2, r0
 80298ee:	460b      	mov	r3, r1
 80298f0:	4610      	mov	r0, r2
 80298f2:	4619      	mov	r1, r3
 80298f4:	f7d7 f93a 	bl	8000b6c <__aeabi_d2iz>
 80298f8:	4603      	mov	r3, r0
 80298fa:	617b      	str	r3, [r7, #20]
  result =
      std::max(static_cast<int32_t>(std::numeric_limits<T>::min()), result);
 80298fc:	f7fe fa70 	bl	8027de0 <_ZNSt14numeric_limitsIaE3minEv>
 8029900:	4603      	mov	r3, r0
 8029902:	61bb      	str	r3, [r7, #24]
 8029904:	f107 0214 	add.w	r2, r7, #20
 8029908:	f107 0318 	add.w	r3, r7, #24
 802990c:	4611      	mov	r1, r2
 802990e:	4618      	mov	r0, r3
 8029910:	f7fe ff3a 	bl	8028788 <_ZSt3maxIlERKT_S2_S2_>
 8029914:	4603      	mov	r3, r0
  result =
 8029916:	681b      	ldr	r3, [r3, #0]
 8029918:	617b      	str	r3, [r7, #20]
  result =
      std::min(static_cast<int32_t>(std::numeric_limits<T>::max()), result);
 802991a:	f7fe fa6a 	bl	8027df2 <_ZNSt14numeric_limitsIaE3maxEv>
 802991e:	4603      	mov	r3, r0
 8029920:	61fb      	str	r3, [r7, #28]
 8029922:	f107 0214 	add.w	r2, r7, #20
 8029926:	f107 031c 	add.w	r3, r7, #28
 802992a:	4611      	mov	r1, r2
 802992c:	4618      	mov	r0, r3
 802992e:	f7fe ff17 	bl	8028760 <_ZSt3minIlERKT_S2_S2_>
 8029932:	4603      	mov	r3, r0
  result =
 8029934:	681b      	ldr	r3, [r3, #0]
 8029936:	617b      	str	r3, [r7, #20]
  return result;
 8029938:	697b      	ldr	r3, [r7, #20]
 802993a:	b25b      	sxtb	r3, r3
}
 802993c:	4618      	mov	r0, r3
 802993e:	3720      	adds	r7, #32
 8029940:	46bd      	mov	sp, r7
 8029942:	bdb0      	pop	{r4, r5, r7, pc}

08029944 <_ZN6tflite20FloatToQuantizedTypeIhEET_ffi>:
T FloatToQuantizedType(const float value, const float scale, int zero_point) {
 8029944:	b5b0      	push	{r4, r5, r7, lr}
 8029946:	b088      	sub	sp, #32
 8029948:	af00      	add	r7, sp, #0
 802994a:	ed87 0a03 	vstr	s0, [r7, #12]
 802994e:	edc7 0a02 	vstr	s1, [r7, #8]
 8029952:	6078      	str	r0, [r7, #4]
  int32_t result = round(value / scale) + zero_point;
 8029954:	ed97 7a03 	vldr	s14, [r7, #12]
 8029958:	edd7 7a02 	vldr	s15, [r7, #8]
 802995c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8029960:	ee16 0a90 	vmov	r0, s13
 8029964:	f7d6 fdfa 	bl	800055c <__aeabi_f2d>
 8029968:	4602      	mov	r2, r0
 802996a:	460b      	mov	r3, r1
 802996c:	ec43 2b10 	vmov	d0, r2, r3
 8029970:	f006 f906 	bl	802fb80 <round>
 8029974:	ec55 4b10 	vmov	r4, r5, d0
 8029978:	6878      	ldr	r0, [r7, #4]
 802997a:	f7d6 fddd 	bl	8000538 <__aeabi_i2d>
 802997e:	4602      	mov	r2, r0
 8029980:	460b      	mov	r3, r1
 8029982:	4620      	mov	r0, r4
 8029984:	4629      	mov	r1, r5
 8029986:	f7d6 fc8b 	bl	80002a0 <__adddf3>
 802998a:	4602      	mov	r2, r0
 802998c:	460b      	mov	r3, r1
 802998e:	4610      	mov	r0, r2
 8029990:	4619      	mov	r1, r3
 8029992:	f7d7 f8eb 	bl	8000b6c <__aeabi_d2iz>
 8029996:	4603      	mov	r3, r0
 8029998:	617b      	str	r3, [r7, #20]
      std::max(static_cast<int32_t>(std::numeric_limits<T>::min()), result);
 802999a:	f7fe fa32 	bl	8027e02 <_ZNSt14numeric_limitsIhE3minEv>
 802999e:	4603      	mov	r3, r0
 80299a0:	61bb      	str	r3, [r7, #24]
 80299a2:	f107 0214 	add.w	r2, r7, #20
 80299a6:	f107 0318 	add.w	r3, r7, #24
 80299aa:	4611      	mov	r1, r2
 80299ac:	4618      	mov	r0, r3
 80299ae:	f7fe feeb 	bl	8028788 <_ZSt3maxIlERKT_S2_S2_>
 80299b2:	4603      	mov	r3, r0
  result =
 80299b4:	681b      	ldr	r3, [r3, #0]
 80299b6:	617b      	str	r3, [r7, #20]
      std::min(static_cast<int32_t>(std::numeric_limits<T>::max()), result);
 80299b8:	f7fe fa2b 	bl	8027e12 <_ZNSt14numeric_limitsIhE3maxEv>
 80299bc:	4603      	mov	r3, r0
 80299be:	61fb      	str	r3, [r7, #28]
 80299c0:	f107 0214 	add.w	r2, r7, #20
 80299c4:	f107 031c 	add.w	r3, r7, #28
 80299c8:	4611      	mov	r1, r2
 80299ca:	4618      	mov	r0, r3
 80299cc:	f7fe fec8 	bl	8028760 <_ZSt3minIlERKT_S2_S2_>
 80299d0:	4603      	mov	r3, r0
  result =
 80299d2:	681b      	ldr	r3, [r3, #0]
 80299d4:	617b      	str	r3, [r7, #20]
  return result;
 80299d6:	697b      	ldr	r3, [r7, #20]
 80299d8:	b2db      	uxtb	r3, r3
}
 80299da:	4618      	mov	r0, r3
 80299dc:	3720      	adds	r7, #32
 80299de:	46bd      	mov	sp, r7
 80299e0:	bdb0      	pop	{r4, r5, r7, pc}

080299e2 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_>:
inline void Relu6Quantized(Q lower, Q upper, const RuntimeShape& input_shape,
 80299e2:	b580      	push	{r7, lr}
 80299e4:	b088      	sub	sp, #32
 80299e6:	af00      	add	r7, sp, #0
 80299e8:	60ba      	str	r2, [r7, #8]
 80299ea:	607b      	str	r3, [r7, #4]
 80299ec:	4603      	mov	r3, r0
 80299ee:	73fb      	strb	r3, [r7, #15]
 80299f0:	460b      	mov	r3, r1
 80299f2:	73bb      	strb	r3, [r7, #14]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 80299f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80299f6:	68b8      	ldr	r0, [r7, #8]
 80299f8:	f7ff f907 	bl	8028c0a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 80299fc:	61b8      	str	r0, [r7, #24]
  for (int i = 0; i < flat_size; ++i) {
 80299fe:	2300      	movs	r3, #0
 8029a00:	61fb      	str	r3, [r7, #28]
 8029a02:	69fa      	ldr	r2, [r7, #28]
 8029a04:	69bb      	ldr	r3, [r7, #24]
 8029a06:	429a      	cmp	r2, r3
 8029a08:	da26      	bge.n	8029a58 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x76>
    const Q val = input_data[i];
 8029a0a:	69fb      	ldr	r3, [r7, #28]
 8029a0c:	687a      	ldr	r2, [r7, #4]
 8029a0e:	4413      	add	r3, r2
 8029a10:	781b      	ldrb	r3, [r3, #0]
 8029a12:	75fb      	strb	r3, [r7, #23]
    const Q clamped = val > upper ? upper : val < lower ? lower : val;
 8029a14:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8029a18:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8029a1c:	429a      	cmp	r2, r3
 8029a1e:	dd04      	ble.n	8029a2a <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x48>
 8029a20:	f107 030e 	add.w	r3, r7, #14
 8029a24:	f993 3000 	ldrsb.w	r3, [r3]
 8029a28:	e00c      	b.n	8029a44 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x62>
 8029a2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8029a2e:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8029a32:	429a      	cmp	r2, r3
 8029a34:	da04      	bge.n	8029a40 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x5e>
 8029a36:	f107 030f 	add.w	r3, r7, #15
 8029a3a:	f993 3000 	ldrsb.w	r3, [r3]
 8029a3e:	e001      	b.n	8029a44 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x62>
 8029a40:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8029a44:	75bb      	strb	r3, [r7, #22]
    output_data[i] = clamped;
 8029a46:	69fb      	ldr	r3, [r7, #28]
 8029a48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8029a4a:	4413      	add	r3, r2
 8029a4c:	7dba      	ldrb	r2, [r7, #22]
 8029a4e:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 8029a50:	69fb      	ldr	r3, [r7, #28]
 8029a52:	3301      	adds	r3, #1
 8029a54:	61fb      	str	r3, [r7, #28]
 8029a56:	e7d4      	b.n	8029a02 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x20>
}
 8029a58:	bf00      	nop
 8029a5a:	3720      	adds	r7, #32
 8029a5c:	46bd      	mov	sp, r7
 8029a5e:	bd80      	pop	{r7, pc}

08029a60 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_>:
inline void Relu6Quantized(Q lower, Q upper, const RuntimeShape& input_shape,
 8029a60:	b580      	push	{r7, lr}
 8029a62:	b088      	sub	sp, #32
 8029a64:	af00      	add	r7, sp, #0
 8029a66:	60ba      	str	r2, [r7, #8]
 8029a68:	607b      	str	r3, [r7, #4]
 8029a6a:	4603      	mov	r3, r0
 8029a6c:	73fb      	strb	r3, [r7, #15]
 8029a6e:	460b      	mov	r3, r1
 8029a70:	73bb      	strb	r3, [r7, #14]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 8029a72:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8029a74:	68b8      	ldr	r0, [r7, #8]
 8029a76:	f7ff f8c8 	bl	8028c0a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 8029a7a:	61b8      	str	r0, [r7, #24]
  for (int i = 0; i < flat_size; ++i) {
 8029a7c:	2300      	movs	r3, #0
 8029a7e:	61fb      	str	r3, [r7, #28]
 8029a80:	69fa      	ldr	r2, [r7, #28]
 8029a82:	69bb      	ldr	r3, [r7, #24]
 8029a84:	429a      	cmp	r2, r3
 8029a86:	da1f      	bge.n	8029ac8 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x68>
    const Q val = input_data[i];
 8029a88:	69fb      	ldr	r3, [r7, #28]
 8029a8a:	687a      	ldr	r2, [r7, #4]
 8029a8c:	4413      	add	r3, r2
 8029a8e:	781b      	ldrb	r3, [r3, #0]
 8029a90:	75fb      	strb	r3, [r7, #23]
    const Q clamped = val > upper ? upper : val < lower ? lower : val;
 8029a92:	7bbb      	ldrb	r3, [r7, #14]
 8029a94:	7dfa      	ldrb	r2, [r7, #23]
 8029a96:	429a      	cmp	r2, r3
 8029a98:	d903      	bls.n	8029aa2 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x42>
 8029a9a:	f107 030e 	add.w	r3, r7, #14
 8029a9e:	781b      	ldrb	r3, [r3, #0]
 8029aa0:	e008      	b.n	8029ab4 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x54>
 8029aa2:	7bfb      	ldrb	r3, [r7, #15]
 8029aa4:	7dfa      	ldrb	r2, [r7, #23]
 8029aa6:	429a      	cmp	r2, r3
 8029aa8:	d203      	bcs.n	8029ab2 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x52>
 8029aaa:	f107 030f 	add.w	r3, r7, #15
 8029aae:	781b      	ldrb	r3, [r3, #0]
 8029ab0:	e000      	b.n	8029ab4 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x54>
 8029ab2:	7dfb      	ldrb	r3, [r7, #23]
 8029ab4:	75bb      	strb	r3, [r7, #22]
    output_data[i] = clamped;
 8029ab6:	69fb      	ldr	r3, [r7, #28]
 8029ab8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8029aba:	4413      	add	r3, r2
 8029abc:	7dba      	ldrb	r2, [r7, #22]
 8029abe:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 8029ac0:	69fb      	ldr	r3, [r7, #28]
 8029ac2:	3301      	adds	r3, #1
 8029ac4:	61fb      	str	r3, [r7, #28]
 8029ac6:	e7db      	b.n	8029a80 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x20>
}
 8029ac8:	bf00      	nop
 8029aca:	3720      	adds	r7, #32
 8029acc:	46bd      	mov	sp, r7
 8029ace:	bd80      	pop	{r7, pc}

08029ad0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>:
tRawType Dup(typename FixedPointRawTypeTraits<tRawType>::ScalarRawType x) {
 8029ad0:	b480      	push	{r7}
 8029ad2:	b083      	sub	sp, #12
 8029ad4:	af00      	add	r7, sp, #0
 8029ad6:	6078      	str	r0, [r7, #4]
  return x;
 8029ad8:	687b      	ldr	r3, [r7, #4]
}
 8029ada:	4618      	mov	r0, r3
 8029adc:	370c      	adds	r7, #12
 8029ade:	46bd      	mov	sp, r7
 8029ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029ae4:	4770      	bx	lr

08029ae6 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>:
tIntegerType BitAnd(tIntegerType a, tIntegerType b) {
 8029ae6:	b480      	push	{r7}
 8029ae8:	b083      	sub	sp, #12
 8029aea:	af00      	add	r7, sp, #0
 8029aec:	6078      	str	r0, [r7, #4]
 8029aee:	6039      	str	r1, [r7, #0]
  return a & b;
 8029af0:	687a      	ldr	r2, [r7, #4]
 8029af2:	683b      	ldr	r3, [r7, #0]
 8029af4:	4013      	ands	r3, r2
}
 8029af6:	4618      	mov	r0, r3
 8029af8:	370c      	adds	r7, #12
 8029afa:	46bd      	mov	sp, r7
 8029afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029b00:	4770      	bx	lr

08029b02 <_ZN8gemmlowp10ShiftRightIlEET_S1_i>:
tIntegerType ShiftRight(tIntegerType a, int offset) {
 8029b02:	b480      	push	{r7}
 8029b04:	b083      	sub	sp, #12
 8029b06:	af00      	add	r7, sp, #0
 8029b08:	6078      	str	r0, [r7, #4]
 8029b0a:	6039      	str	r1, [r7, #0]
  return a >> offset;
 8029b0c:	687a      	ldr	r2, [r7, #4]
 8029b0e:	683b      	ldr	r3, [r7, #0]
 8029b10:	fa42 f303 	asr.w	r3, r2, r3
}
 8029b14:	4618      	mov	r0, r3
 8029b16:	370c      	adds	r7, #12
 8029b18:	46bd      	mov	sp, r7
 8029b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029b1e:	4770      	bx	lr

08029b20 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>:
tIntegerType MaskIfLessThan(tIntegerType a, tIntegerType b) {
 8029b20:	b580      	push	{r7, lr}
 8029b22:	b082      	sub	sp, #8
 8029b24:	af00      	add	r7, sp, #0
 8029b26:	6078      	str	r0, [r7, #4]
 8029b28:	6039      	str	r1, [r7, #0]
  return MaskIfNonZero<tIntegerType>(a < b);
 8029b2a:	687a      	ldr	r2, [r7, #4]
 8029b2c:	683b      	ldr	r3, [r7, #0]
 8029b2e:	429a      	cmp	r2, r3
 8029b30:	bfb4      	ite	lt
 8029b32:	2301      	movlt	r3, #1
 8029b34:	2300      	movge	r3, #0
 8029b36:	b2db      	uxtb	r3, r3
 8029b38:	4618      	mov	r0, r3
 8029b3a:	f000 f827 	bl	8029b8c <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8029b3e:	4603      	mov	r3, r0
}
 8029b40:	4618      	mov	r0, r3
 8029b42:	3708      	adds	r7, #8
 8029b44:	46bd      	mov	sp, r7
 8029b46:	bd80      	pop	{r7, pc}

08029b48 <_ZN8gemmlowp3AddIlEET_S1_S1_>:
tIntegerType Add(tIntegerType a, tIntegerType b) {
 8029b48:	b480      	push	{r7}
 8029b4a:	b083      	sub	sp, #12
 8029b4c:	af00      	add	r7, sp, #0
 8029b4e:	6078      	str	r0, [r7, #4]
 8029b50:	6039      	str	r1, [r7, #0]
  return a + b;
 8029b52:	687a      	ldr	r2, [r7, #4]
 8029b54:	683b      	ldr	r3, [r7, #0]
 8029b56:	4413      	add	r3, r2
}
 8029b58:	4618      	mov	r0, r3
 8029b5a:	370c      	adds	r7, #12
 8029b5c:	46bd      	mov	sp, r7
 8029b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029b62:	4770      	bx	lr

08029b64 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>:
tIntegerType MaskIfGreaterThan(tIntegerType a, tIntegerType b) {
 8029b64:	b580      	push	{r7, lr}
 8029b66:	b082      	sub	sp, #8
 8029b68:	af00      	add	r7, sp, #0
 8029b6a:	6078      	str	r0, [r7, #4]
 8029b6c:	6039      	str	r1, [r7, #0]
  return MaskIfNonZero<tIntegerType>(a > b);
 8029b6e:	687a      	ldr	r2, [r7, #4]
 8029b70:	683b      	ldr	r3, [r7, #0]
 8029b72:	429a      	cmp	r2, r3
 8029b74:	bfcc      	ite	gt
 8029b76:	2301      	movgt	r3, #1
 8029b78:	2300      	movle	r3, #0
 8029b7a:	b2db      	uxtb	r3, r3
 8029b7c:	4618      	mov	r0, r3
 8029b7e:	f000 f805 	bl	8029b8c <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8029b82:	4603      	mov	r3, r0
}
 8029b84:	4618      	mov	r0, r3
 8029b86:	3708      	adds	r7, #8
 8029b88:	46bd      	mov	sp, r7
 8029b8a:	bd80      	pop	{r7, pc}

08029b8c <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>:
tIntegerType MaskIfNonZero(tIntegerType a) {
 8029b8c:	b580      	push	{r7, lr}
 8029b8e:	b082      	sub	sp, #8
 8029b90:	af00      	add	r7, sp, #0
 8029b92:	6078      	str	r0, [r7, #4]
  return a ? BitNot(zero) : zero;
 8029b94:	687b      	ldr	r3, [r7, #4]
 8029b96:	2b00      	cmp	r3, #0
 8029b98:	d004      	beq.n	8029ba4 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_+0x18>
 8029b9a:	2000      	movs	r0, #0
 8029b9c:	f000 f807 	bl	8029bae <_ZN8gemmlowp6BitNotIlEET_S1_>
 8029ba0:	4603      	mov	r3, r0
 8029ba2:	e000      	b.n	8029ba6 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_+0x1a>
 8029ba4:	2300      	movs	r3, #0
}
 8029ba6:	4618      	mov	r0, r3
 8029ba8:	3708      	adds	r7, #8
 8029baa:	46bd      	mov	sp, r7
 8029bac:	bd80      	pop	{r7, pc}

08029bae <_ZN8gemmlowp6BitNotIlEET_S1_>:
tIntegerType BitNot(tIntegerType a) {
 8029bae:	b480      	push	{r7}
 8029bb0:	b083      	sub	sp, #12
 8029bb2:	af00      	add	r7, sp, #0
 8029bb4:	6078      	str	r0, [r7, #4]
  return ~a;
 8029bb6:	687b      	ldr	r3, [r7, #4]
 8029bb8:	43db      	mvns	r3, r3
}
 8029bba:	4618      	mov	r0, r3
 8029bbc:	370c      	adds	r7, #12
 8029bbe:	46bd      	mov	sp, r7
 8029bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029bc4:	4770      	bx	lr
	...

08029bc8 <_ZNSt14numeric_limitsIfE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __FLT_MAX__; }
 8029bc8:	b480      	push	{r7}
 8029bca:	af00      	add	r7, sp, #0
 8029bcc:	4b04      	ldr	r3, [pc, #16]	; (8029be0 <_ZNSt14numeric_limitsIfE3maxEv+0x18>)
 8029bce:	ee07 3a90 	vmov	s15, r3
 8029bd2:	eeb0 0a67 	vmov.f32	s0, s15
 8029bd6:	46bd      	mov	sp, r7
 8029bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029bdc:	4770      	bx	lr
 8029bde:	bf00      	nop
 8029be0:	7f7fffff 	.word	0x7f7fffff

08029be4 <_ZNSt14numeric_limitsIfE6lowestEv>:
      lowest() noexcept { return -__FLT_MAX__; }
 8029be4:	b480      	push	{r7}
 8029be6:	af00      	add	r7, sp, #0
 8029be8:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
 8029bec:	ee07 3a90 	vmov	s15, r3
 8029bf0:	eeb0 0a67 	vmov.f32	s0, s15
 8029bf4:	46bd      	mov	sp, r7
 8029bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029bfa:	4770      	bx	lr

08029bfc <_ZNK6tflite12RuntimeShape14DimsDataUpTo5DEv>:
  inline const int32_t* DimsDataUpTo5D() const { return dims_; }
 8029bfc:	b480      	push	{r7}
 8029bfe:	b083      	sub	sp, #12
 8029c00:	af00      	add	r7, sp, #0
 8029c02:	6078      	str	r0, [r7, #4]
 8029c04:	687b      	ldr	r3, [r7, #4]
 8029c06:	3304      	adds	r3, #4
 8029c08:	4618      	mov	r0, r3
 8029c0a:	370c      	adds	r7, #12
 8029c0c:	46bd      	mov	sp, r7
 8029c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029c12:	4770      	bx	lr

08029c14 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>:
inline int Offset(const RuntimeShape& shape, int i0, int i1, int i2, int i3) {
 8029c14:	b580      	push	{r7, lr}
 8029c16:	b086      	sub	sp, #24
 8029c18:	af00      	add	r7, sp, #0
 8029c1a:	60f8      	str	r0, [r7, #12]
 8029c1c:	60b9      	str	r1, [r7, #8]
 8029c1e:	607a      	str	r2, [r7, #4]
 8029c20:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
 8029c22:	68f8      	ldr	r0, [r7, #12]
 8029c24:	f7fe fdfb 	bl	802881e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8029c28:	4603      	mov	r3, r0
 8029c2a:	2b04      	cmp	r3, #4
 8029c2c:	d001      	beq.n	8029c32 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x1e>
 8029c2e:	f008 fa15 	bl	803205c <abort>
  const int* dims_data = reinterpret_cast<const int*>(shape.DimsDataUpTo5D());
 8029c32:	68f8      	ldr	r0, [r7, #12]
 8029c34:	f7ff ffe2 	bl	8029bfc <_ZNK6tflite12RuntimeShape14DimsDataUpTo5DEv>
 8029c38:	6178      	str	r0, [r7, #20]
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
 8029c3a:	68bb      	ldr	r3, [r7, #8]
 8029c3c:	2b00      	cmp	r3, #0
 8029c3e:	db04      	blt.n	8029c4a <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x36>
 8029c40:	697b      	ldr	r3, [r7, #20]
 8029c42:	681b      	ldr	r3, [r3, #0]
 8029c44:	68ba      	ldr	r2, [r7, #8]
 8029c46:	429a      	cmp	r2, r3
 8029c48:	db01      	blt.n	8029c4e <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x3a>
 8029c4a:	f008 fa07 	bl	803205c <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
 8029c4e:	687b      	ldr	r3, [r7, #4]
 8029c50:	2b00      	cmp	r3, #0
 8029c52:	db05      	blt.n	8029c60 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x4c>
 8029c54:	697b      	ldr	r3, [r7, #20]
 8029c56:	3304      	adds	r3, #4
 8029c58:	681b      	ldr	r3, [r3, #0]
 8029c5a:	687a      	ldr	r2, [r7, #4]
 8029c5c:	429a      	cmp	r2, r3
 8029c5e:	db01      	blt.n	8029c64 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x50>
 8029c60:	f008 f9fc 	bl	803205c <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
 8029c64:	683b      	ldr	r3, [r7, #0]
 8029c66:	2b00      	cmp	r3, #0
 8029c68:	db05      	blt.n	8029c76 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x62>
 8029c6a:	697b      	ldr	r3, [r7, #20]
 8029c6c:	3308      	adds	r3, #8
 8029c6e:	681b      	ldr	r3, [r3, #0]
 8029c70:	683a      	ldr	r2, [r7, #0]
 8029c72:	429a      	cmp	r2, r3
 8029c74:	db01      	blt.n	8029c7a <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x66>
 8029c76:	f008 f9f1 	bl	803205c <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
 8029c7a:	6a3b      	ldr	r3, [r7, #32]
 8029c7c:	2b00      	cmp	r3, #0
 8029c7e:	db05      	blt.n	8029c8c <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x78>
 8029c80:	697b      	ldr	r3, [r7, #20]
 8029c82:	330c      	adds	r3, #12
 8029c84:	681b      	ldr	r3, [r3, #0]
 8029c86:	6a3a      	ldr	r2, [r7, #32]
 8029c88:	429a      	cmp	r2, r3
 8029c8a:	db01      	blt.n	8029c90 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x7c>
 8029c8c:	f008 f9e6 	bl	803205c <abort>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
 8029c90:	697b      	ldr	r3, [r7, #20]
 8029c92:	3304      	adds	r3, #4
 8029c94:	681b      	ldr	r3, [r3, #0]
 8029c96:	68ba      	ldr	r2, [r7, #8]
 8029c98:	fb03 f202 	mul.w	r2, r3, r2
 8029c9c:	687b      	ldr	r3, [r7, #4]
 8029c9e:	4413      	add	r3, r2
 8029ca0:	697a      	ldr	r2, [r7, #20]
 8029ca2:	3208      	adds	r2, #8
 8029ca4:	6812      	ldr	r2, [r2, #0]
 8029ca6:	fb03 f202 	mul.w	r2, r3, r2
 8029caa:	683b      	ldr	r3, [r7, #0]
 8029cac:	4413      	add	r3, r2
 8029cae:	697a      	ldr	r2, [r7, #20]
 8029cb0:	320c      	adds	r2, #12
 8029cb2:	6812      	ldr	r2, [r2, #0]
 8029cb4:	fb03 f202 	mul.w	r2, r3, r2
 8029cb8:	6a3b      	ldr	r3, [r7, #32]
 8029cba:	4413      	add	r3, r2
}
 8029cbc:	4618      	mov	r0, r3
 8029cbe:	3718      	adds	r7, #24
 8029cc0:	46bd      	mov	sp, r7
 8029cc2:	bd80      	pop	{r7, pc}

08029cc4 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>:
                                               int32_t* act_max);

// Calculates the useful range of an activation layer given its activation
// tensor.a
template <typename T>
void CalculateActivationRange(TfLiteFusedActivation activation,
 8029cc4:	b580      	push	{r7, lr}
 8029cc6:	b084      	sub	sp, #16
 8029cc8:	af00      	add	r7, sp, #0
 8029cca:	4603      	mov	r3, r0
 8029ccc:	60b9      	str	r1, [r7, #8]
 8029cce:	607a      	str	r2, [r7, #4]
 8029cd0:	73fb      	strb	r3, [r7, #15]
                              T* activation_min, T* activation_max) {
  if (activation == kTfLiteActRelu) {
 8029cd2:	7bfb      	ldrb	r3, [r7, #15]
 8029cd4:	2b01      	cmp	r3, #1
 8029cd6:	d10b      	bne.n	8029cf0 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x2c>
    *activation_min = 0;
 8029cd8:	68bb      	ldr	r3, [r7, #8]
 8029cda:	f04f 0200 	mov.w	r2, #0
 8029cde:	601a      	str	r2, [r3, #0]
    *activation_max = std::numeric_limits<T>::max();
 8029ce0:	f7ff ff72 	bl	8029bc8 <_ZNSt14numeric_limitsIfE3maxEv>
 8029ce4:	eef0 7a40 	vmov.f32	s15, s0
 8029ce8:	687b      	ldr	r3, [r7, #4]
 8029cea:	edc3 7a00 	vstr	s15, [r3]
    *activation_max = 1;
  } else {
    *activation_min = std::numeric_limits<T>::lowest();
    *activation_max = std::numeric_limits<T>::max();
  }
}
 8029cee:	e023      	b.n	8029d38 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
  } else if (activation == kTfLiteActRelu6) {
 8029cf0:	7bfb      	ldrb	r3, [r7, #15]
 8029cf2:	2b03      	cmp	r3, #3
 8029cf4:	d107      	bne.n	8029d06 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x42>
    *activation_min = 0;
 8029cf6:	68bb      	ldr	r3, [r7, #8]
 8029cf8:	f04f 0200 	mov.w	r2, #0
 8029cfc:	601a      	str	r2, [r3, #0]
    *activation_max = 6;
 8029cfe:	687b      	ldr	r3, [r7, #4]
 8029d00:	4a0f      	ldr	r2, [pc, #60]	; (8029d40 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x7c>)
 8029d02:	601a      	str	r2, [r3, #0]
}
 8029d04:	e018      	b.n	8029d38 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
  } else if (activation == kTfLiteActReluN1To1) {
 8029d06:	7bfb      	ldrb	r3, [r7, #15]
 8029d08:	2b02      	cmp	r3, #2
 8029d0a:	d107      	bne.n	8029d1c <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x58>
    *activation_min = -1;
 8029d0c:	68bb      	ldr	r3, [r7, #8]
 8029d0e:	4a0d      	ldr	r2, [pc, #52]	; (8029d44 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x80>)
 8029d10:	601a      	str	r2, [r3, #0]
    *activation_max = 1;
 8029d12:	687b      	ldr	r3, [r7, #4]
 8029d14:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8029d18:	601a      	str	r2, [r3, #0]
}
 8029d1a:	e00d      	b.n	8029d38 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
    *activation_min = std::numeric_limits<T>::lowest();
 8029d1c:	f7ff ff62 	bl	8029be4 <_ZNSt14numeric_limitsIfE6lowestEv>
 8029d20:	eef0 7a40 	vmov.f32	s15, s0
 8029d24:	68bb      	ldr	r3, [r7, #8]
 8029d26:	edc3 7a00 	vstr	s15, [r3]
    *activation_max = std::numeric_limits<T>::max();
 8029d2a:	f7ff ff4d 	bl	8029bc8 <_ZNSt14numeric_limitsIfE3maxEv>
 8029d2e:	eef0 7a40 	vmov.f32	s15, s0
 8029d32:	687b      	ldr	r3, [r7, #4]
 8029d34:	edc3 7a00 	vstr	s15, [r3]
}
 8029d38:	bf00      	nop
 8029d3a:	3710      	adds	r7, #16
 8029d3c:	46bd      	mov	sp, r7
 8029d3e:	bd80      	pop	{r7, pc}
 8029d40:	40c00000 	.word	0x40c00000
 8029d44:	bf800000 	.word	0xbf800000

08029d48 <_ZN6tflite9NumInputsEPK10TfLiteNode>:
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
 8029d48:	b480      	push	{r7}
 8029d4a:	b083      	sub	sp, #12
 8029d4c:	af00      	add	r7, sp, #0
 8029d4e:	6078      	str	r0, [r7, #4]
 8029d50:	687b      	ldr	r3, [r7, #4]
 8029d52:	681b      	ldr	r3, [r3, #0]
 8029d54:	681b      	ldr	r3, [r3, #0]
 8029d56:	4618      	mov	r0, r3
 8029d58:	370c      	adds	r7, #12
 8029d5a:	46bd      	mov	sp, r7
 8029d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029d60:	4770      	bx	lr

08029d62 <_ZN6tflite10NumOutputsEPK10TfLiteNode>:
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
 8029d62:	b480      	push	{r7}
 8029d64:	b083      	sub	sp, #12
 8029d66:	af00      	add	r7, sp, #0
 8029d68:	6078      	str	r0, [r7, #4]
 8029d6a:	687b      	ldr	r3, [r7, #4]
 8029d6c:	685b      	ldr	r3, [r3, #4]
 8029d6e:	681b      	ldr	r3, [r3, #0]
 8029d70:	4618      	mov	r0, r3
 8029d72:	370c      	adds	r7, #12
 8029d74:	46bd      	mov	sp, r7
 8029d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029d7a:	4770      	bx	lr

08029d7c <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 8029d7c:	b580      	push	{r7, lr}
 8029d7e:	b082      	sub	sp, #8
 8029d80:	af00      	add	r7, sp, #0
 8029d82:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 8029d84:	687b      	ldr	r3, [r7, #4]
 8029d86:	2b00      	cmp	r3, #0
 8029d88:	d101      	bne.n	8029d8e <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor+0x12>
 8029d8a:	f008 f967 	bl	803205c <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 8029d8e:	687b      	ldr	r3, [r7, #4]
 8029d90:	681b      	ldr	r3, [r3, #0]
}
 8029d92:	4618      	mov	r0, r3
 8029d94:	3708      	adds	r7, #8
 8029d96:	46bd      	mov	sp, r7
 8029d98:	bd80      	pop	{r7, pc}

08029d9a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>:
                       const RuntimeShape& shape2, int index2) {
 8029d9a:	b590      	push	{r4, r7, lr}
 8029d9c:	b087      	sub	sp, #28
 8029d9e:	af00      	add	r7, sp, #0
 8029da0:	60f8      	str	r0, [r7, #12]
 8029da2:	60b9      	str	r1, [r7, #8]
 8029da4:	607a      	str	r2, [r7, #4]
 8029da6:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 8029da8:	68b9      	ldr	r1, [r7, #8]
 8029daa:	68f8      	ldr	r0, [r7, #12]
 8029dac:	f7fe fed2 	bl	8028b54 <_ZNK6tflite12RuntimeShape4DimsEi>
 8029db0:	4604      	mov	r4, r0
 8029db2:	6839      	ldr	r1, [r7, #0]
 8029db4:	6878      	ldr	r0, [r7, #4]
 8029db6:	f7fe fecd 	bl	8028b54 <_ZNK6tflite12RuntimeShape4DimsEi>
 8029dba:	4603      	mov	r3, r0
 8029dbc:	429c      	cmp	r4, r3
 8029dbe:	d001      	beq.n	8029dc4 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i+0x2a>
 8029dc0:	f008 f94c 	bl	803205c <abort>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
 8029dc4:	68b9      	ldr	r1, [r7, #8]
 8029dc6:	68f8      	ldr	r0, [r7, #12]
 8029dc8:	f7fe fec4 	bl	8028b54 <_ZNK6tflite12RuntimeShape4DimsEi>
 8029dcc:	4603      	mov	r3, r0
 8029dce:	613b      	str	r3, [r7, #16]
 8029dd0:	6839      	ldr	r1, [r7, #0]
 8029dd2:	6878      	ldr	r0, [r7, #4]
 8029dd4:	f7fe febe 	bl	8028b54 <_ZNK6tflite12RuntimeShape4DimsEi>
 8029dd8:	4603      	mov	r3, r0
 8029dda:	617b      	str	r3, [r7, #20]
 8029ddc:	f107 0214 	add.w	r2, r7, #20
 8029de0:	f107 0310 	add.w	r3, r7, #16
 8029de4:	4611      	mov	r1, r2
 8029de6:	4618      	mov	r0, r3
 8029de8:	f7fe fcba 	bl	8028760 <_ZSt3minIlERKT_S2_S2_>
 8029dec:	4603      	mov	r3, r0
 8029dee:	681b      	ldr	r3, [r3, #0]
}
 8029df0:	4618      	mov	r0, r3
 8029df2:	371c      	adds	r7, #28
 8029df4:	46bd      	mov	sp, r7
 8029df6:	bd90      	pop	{r4, r7, pc}

08029df8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>:
    const ConvParams& params, const int32_t* output_multiplier,
    const int32_t* output_shift, const RuntimeShape& input_shape,
    const int8_t* input_data, const RuntimeShape& filter_shape,
    const int8_t* filter_data, const RuntimeShape& bias_shape,
    const int32_t* bias_data, const RuntimeShape& output_shape,
    int8_t* output_data) {
 8029df8:	b590      	push	{r4, r7, lr}
 8029dfa:	b0a9      	sub	sp, #164	; 0xa4
 8029dfc:	af02      	add	r7, sp, #8
 8029dfe:	60f8      	str	r0, [r7, #12]
 8029e00:	60b9      	str	r1, [r7, #8]
 8029e02:	607a      	str	r2, [r7, #4]
 8029e04:	603b      	str	r3, [r7, #0]
  // Get parameters.
  const int32_t input_offset = params.input_offset;  // r = s(q - Z)
 8029e06:	68fb      	ldr	r3, [r7, #12]
 8029e08:	695b      	ldr	r3, [r3, #20]
 8029e0a:	67bb      	str	r3, [r7, #120]	; 0x78
  const int stride_width = params.stride_width;
 8029e0c:	68fb      	ldr	r3, [r7, #12]
 8029e0e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8029e12:	677b      	str	r3, [r7, #116]	; 0x74
  const int stride_height = params.stride_height;
 8029e14:	68fb      	ldr	r3, [r7, #12]
 8029e16:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8029e1a:	673b      	str	r3, [r7, #112]	; 0x70
  const int dilation_width_factor = params.dilation_width_factor;
 8029e1c:	68fb      	ldr	r3, [r7, #12]
 8029e1e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8029e22:	66fb      	str	r3, [r7, #108]	; 0x6c
  const int dilation_height_factor = params.dilation_height_factor;
 8029e24:	68fb      	ldr	r3, [r7, #12]
 8029e26:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8029e2a:	66bb      	str	r3, [r7, #104]	; 0x68
  const int pad_width = params.padding_values.width;
 8029e2c:	68fb      	ldr	r3, [r7, #12]
 8029e2e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8029e32:	667b      	str	r3, [r7, #100]	; 0x64
  const int pad_height = params.padding_values.height;
 8029e34:	68fb      	ldr	r3, [r7, #12]
 8029e36:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8029e3a:	663b      	str	r3, [r7, #96]	; 0x60
  const int32_t output_offset = params.output_offset;
 8029e3c:	68fb      	ldr	r3, [r7, #12]
 8029e3e:	69db      	ldr	r3, [r3, #28]
 8029e40:	65fb      	str	r3, [r7, #92]	; 0x5c

  // Set min and max value of the output.
  const int32_t output_activation_min = params.quantized_activation_min;
 8029e42:	68fb      	ldr	r3, [r7, #12]
 8029e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029e46:	61bb      	str	r3, [r7, #24]
  const int32_t output_activation_max = params.quantized_activation_max;
 8029e48:	68fb      	ldr	r3, [r7, #12]
 8029e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8029e4c:	617b      	str	r3, [r7, #20]

  // Consistency check.
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 8029e4e:	69ba      	ldr	r2, [r7, #24]
 8029e50:	697b      	ldr	r3, [r7, #20]
 8029e52:	429a      	cmp	r2, r3
 8029e54:	dd01      	ble.n	8029e5a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x62>
 8029e56:	f008 f901 	bl	803205c <abort>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 8029e5a:	6838      	ldr	r0, [r7, #0]
 8029e5c:	f7fe fcdf 	bl	802881e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8029e60:	4603      	mov	r3, r0
 8029e62:	2b04      	cmp	r3, #4
 8029e64:	d001      	beq.n	8029e6a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x72>
 8029e66:	f008 f8f9 	bl	803205c <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 8029e6a:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8029e6e:	f7fe fcd6 	bl	802881e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8029e72:	4603      	mov	r3, r0
 8029e74:	2b04      	cmp	r3, #4
 8029e76:	d001      	beq.n	8029e7c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x84>
 8029e78:	f008 f8f0 	bl	803205c <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 8029e7c:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8029e80:	f7fe fccd 	bl	802881e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8029e84:	4603      	mov	r3, r0
 8029e86:	2b04      	cmp	r3, #4
 8029e88:	d001      	beq.n	8029e8e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x96>
 8029e8a:	f008 f8e7 	bl	803205c <abort>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 8029e8e:	2300      	movs	r3, #0
 8029e90:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8029e94:	2100      	movs	r1, #0
 8029e96:	6838      	ldr	r0, [r7, #0]
 8029e98:	f7ff ff7f 	bl	8029d9a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8029e9c:	65b8      	str	r0, [r7, #88]	; 0x58
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
 8029e9e:	2303      	movs	r3, #3
 8029ea0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8029ea4:	2103      	movs	r1, #3
 8029ea6:	6838      	ldr	r0, [r7, #0]
 8029ea8:	f7ff ff77 	bl	8029d9a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8029eac:	6578      	str	r0, [r7, #84]	; 0x54
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
 8029eae:	2303      	movs	r3, #3
 8029eb0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8029eb4:	2100      	movs	r1, #0
 8029eb6:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8029eba:	f7ff ff6e 	bl	8029d9a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8029ebe:	6538      	str	r0, [r7, #80]	; 0x50
  if (bias_data) {
 8029ec0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8029ec4:	2b00      	cmp	r3, #0
 8029ec6:	d009      	beq.n	8029edc <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xe4>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 8029ec8:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8029ecc:	f7fe fe7a 	bl	8028bc4 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 8029ed0:	4602      	mov	r2, r0
 8029ed2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8029ed4:	4293      	cmp	r3, r2
 8029ed6:	d001      	beq.n	8029edc <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xe4>
 8029ed8:	f008 f8c0 	bl	803205c <abort>
  }

  // Check dimensions of the tensors.
  const int input_height = input_shape.Dims(1);
 8029edc:	2101      	movs	r1, #1
 8029ede:	6838      	ldr	r0, [r7, #0]
 8029ee0:	f7fe fe38 	bl	8028b54 <_ZNK6tflite12RuntimeShape4DimsEi>
 8029ee4:	64f8      	str	r0, [r7, #76]	; 0x4c
  const int input_width = input_shape.Dims(2);
 8029ee6:	2102      	movs	r1, #2
 8029ee8:	6838      	ldr	r0, [r7, #0]
 8029eea:	f7fe fe33 	bl	8028b54 <_ZNK6tflite12RuntimeShape4DimsEi>
 8029eee:	64b8      	str	r0, [r7, #72]	; 0x48
  const int filter_height = filter_shape.Dims(1);
 8029ef0:	2101      	movs	r1, #1
 8029ef2:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8029ef6:	f7fe fe2d 	bl	8028b54 <_ZNK6tflite12RuntimeShape4DimsEi>
 8029efa:	6478      	str	r0, [r7, #68]	; 0x44
  const int filter_width = filter_shape.Dims(2);
 8029efc:	2102      	movs	r1, #2
 8029efe:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8029f02:	f7fe fe27 	bl	8028b54 <_ZNK6tflite12RuntimeShape4DimsEi>
 8029f06:	6438      	str	r0, [r7, #64]	; 0x40
  const int output_height = output_shape.Dims(1);
 8029f08:	2101      	movs	r1, #1
 8029f0a:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8029f0e:	f7fe fe21 	bl	8028b54 <_ZNK6tflite12RuntimeShape4DimsEi>
 8029f12:	63f8      	str	r0, [r7, #60]	; 0x3c
  const int output_width = output_shape.Dims(2);
 8029f14:	2102      	movs	r1, #2
 8029f16:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8029f1a:	f7fe fe1b 	bl	8028b54 <_ZNK6tflite12RuntimeShape4DimsEi>
 8029f1e:	63b8      	str	r0, [r7, #56]	; 0x38
  for (int batch = 0; batch < batches; ++batch) {
 8029f20:	2300      	movs	r3, #0
 8029f22:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8029f26:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8029f2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8029f2c:	429a      	cmp	r2, r3
 8029f2e:	f280 8113 	bge.w	802a158 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x360>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8029f32:	2300      	movs	r3, #0
 8029f34:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8029f38:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8029f3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8029f3e:	429a      	cmp	r2, r3
 8029f40:	f280 8104 	bge.w	802a14c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x354>
      const int in_y_origin = (out_y * stride_height) - pad_height;
 8029f44:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8029f48:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8029f4a:	fb03 f202 	mul.w	r2, r3, r2
 8029f4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8029f50:	1ad3      	subs	r3, r2, r3
 8029f52:	637b      	str	r3, [r7, #52]	; 0x34
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8029f54:	2300      	movs	r3, #0
 8029f56:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8029f5a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8029f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8029f60:	429a      	cmp	r2, r3
 8029f62:	f280 80ed 	bge.w	802a140 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x348>
        const int in_x_origin = (out_x * stride_width) - pad_width;
 8029f66:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8029f6a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8029f6c:	fb03 f202 	mul.w	r2, r3, r2
 8029f70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8029f72:	1ad3      	subs	r3, r2, r3
 8029f74:	633b      	str	r3, [r7, #48]	; 0x30
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 8029f76:	2300      	movs	r3, #0
 8029f78:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8029f7c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8029f80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8029f82:	429a      	cmp	r2, r3
 8029f84:	f280 80d6 	bge.w	802a134 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x33c>
          int32_t acc = 0;
 8029f88:	2300      	movs	r3, #0
 8029f8a:	613b      	str	r3, [r7, #16]
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 8029f8c:	2300      	movs	r3, #0
 8029f8e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8029f92:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8029f96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8029f98:	429a      	cmp	r2, r3
 8029f9a:	da76      	bge.n	802a08a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x292>
            const int in_y = in_y_origin + dilation_height_factor * filter_y;
 8029f9c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8029f9e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8029fa2:	fb02 f303 	mul.w	r3, r2, r3
 8029fa6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8029fa8:	4413      	add	r3, r2
 8029faa:	62fb      	str	r3, [r7, #44]	; 0x2c
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 8029fac:	2300      	movs	r3, #0
 8029fae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8029fb2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8029fb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8029fb8:	429a      	cmp	r2, r3
 8029fba:	da60      	bge.n	802a07e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x286>
              const int in_x = in_x_origin + dilation_width_factor * filter_x;
 8029fbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8029fbe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8029fc2:	fb02 f303 	mul.w	r3, r2, r3
 8029fc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8029fc8:	4413      	add	r3, r2
 8029fca:	62bb      	str	r3, [r7, #40]	; 0x28

              // Zero padding by omitting the areas outside the image.
              const bool is_point_inside_image =
                  (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
 8029fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029fce:	2b00      	cmp	r3, #0
 8029fd0:	db0c      	blt.n	8029fec <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1f4>
 8029fd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8029fd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8029fd6:	429a      	cmp	r2, r3
 8029fd8:	da08      	bge.n	8029fec <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1f4>
 8029fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8029fdc:	2b00      	cmp	r3, #0
 8029fde:	db05      	blt.n	8029fec <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1f4>
 8029fe0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8029fe2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8029fe4:	429a      	cmp	r2, r3
 8029fe6:	da01      	bge.n	8029fec <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1f4>
 8029fe8:	2301      	movs	r3, #1
 8029fea:	e000      	b.n	8029fee <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1f6>
 8029fec:	2300      	movs	r3, #0
              const bool is_point_inside_image =
 8029fee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                  (in_y < input_height);

              if (!is_point_inside_image) {
 8029ff2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8029ff6:	f083 0301 	eor.w	r3, r3, #1
 8029ffa:	b2db      	uxtb	r3, r3
 8029ffc:	2b00      	cmp	r3, #0
 8029ffe:	d137      	bne.n	802a070 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x278>
                continue;
              }

              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 802a000:	2300      	movs	r3, #0
 802a002:	67fb      	str	r3, [r7, #124]	; 0x7c
 802a004:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 802a006:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802a008:	429a      	cmp	r2, r3
 802a00a:	da32      	bge.n	802a072 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x27a>
                int32_t input_val = input_data[Offset(input_shape, batch, in_y,
 802a00c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 802a00e:	9300      	str	r3, [sp, #0]
 802a010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a012:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802a014:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 802a018:	6838      	ldr	r0, [r7, #0]
 802a01a:	f7ff fdfb 	bl	8029c14 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 802a01e:	4603      	mov	r3, r0
 802a020:	461a      	mov	r2, r3
                                                      in_x, in_channel)];
 802a022:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 802a026:	4413      	add	r3, r2
 802a028:	f993 3000 	ldrsb.w	r3, [r3]
 802a02c:	623b      	str	r3, [r7, #32]
                int32_t filter_val = filter_data[Offset(
 802a02e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 802a030:	9300      	str	r3, [sp, #0]
 802a032:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 802a036:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 802a03a:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 802a03e:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 802a042:	f7ff fde7 	bl	8029c14 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 802a046:	4603      	mov	r3, r0
 802a048:	461a      	mov	r2, r3
                    filter_shape, out_channel, filter_y, filter_x, in_channel)];
 802a04a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 802a04e:	4413      	add	r3, r2
 802a050:	f993 3000 	ldrsb.w	r3, [r3]
 802a054:	61fb      	str	r3, [r7, #28]
                // long as the filter size (filter_y * filter_x * in_channel)
                // does not exceed 2^16, which is the case in all the models
                // we have seen so far.
                // TODO(b/174275578): Add a check to make sure the
                // accumulator depth is smaller than 2^16.
                acc += filter_val * (input_val + input_offset);
 802a056:	6a3a      	ldr	r2, [r7, #32]
 802a058:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 802a05a:	4413      	add	r3, r2
 802a05c:	69fa      	ldr	r2, [r7, #28]
 802a05e:	fb03 f202 	mul.w	r2, r3, r2
 802a062:	693b      	ldr	r3, [r7, #16]
 802a064:	4413      	add	r3, r2
 802a066:	613b      	str	r3, [r7, #16]
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 802a068:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 802a06a:	3301      	adds	r3, #1
 802a06c:	67fb      	str	r3, [r7, #124]	; 0x7c
 802a06e:	e7c9      	b.n	802a004 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x20c>
                continue;
 802a070:	bf00      	nop
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 802a072:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 802a076:	3301      	adds	r3, #1
 802a078:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 802a07c:	e799      	b.n	8029fb2 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1ba>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 802a07e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 802a082:	3301      	adds	r3, #1
 802a084:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 802a088:	e783      	b.n	8029f92 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x19a>
              }
            }
          }

          if (bias_data) {
 802a08a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 802a08e:	2b00      	cmp	r3, #0
 802a090:	d009      	beq.n	802a0a6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2ae>
            acc += bias_data[out_channel];
 802a092:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 802a096:	009b      	lsls	r3, r3, #2
 802a098:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 802a09c:	4413      	add	r3, r2
 802a09e:	681a      	ldr	r2, [r3, #0]
 802a0a0:	693b      	ldr	r3, [r7, #16]
 802a0a2:	4413      	add	r3, r2
 802a0a4:	613b      	str	r3, [r7, #16]
          }
          acc = MultiplyByQuantizedMultiplier(
 802a0a6:	6938      	ldr	r0, [r7, #16]
              acc, output_multiplier[out_channel], output_shift[out_channel]);
 802a0a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 802a0ac:	009b      	lsls	r3, r3, #2
 802a0ae:	68ba      	ldr	r2, [r7, #8]
 802a0b0:	4413      	add	r3, r2
          acc = MultiplyByQuantizedMultiplier(
 802a0b2:	6819      	ldr	r1, [r3, #0]
              acc, output_multiplier[out_channel], output_shift[out_channel]);
 802a0b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 802a0b8:	009b      	lsls	r3, r3, #2
 802a0ba:	687a      	ldr	r2, [r7, #4]
 802a0bc:	4413      	add	r3, r2
          acc = MultiplyByQuantizedMultiplier(
 802a0be:	681b      	ldr	r3, [r3, #0]
 802a0c0:	461a      	mov	r2, r3
 802a0c2:	f7fe fdd7 	bl	8028c74 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 802a0c6:	4603      	mov	r3, r0
 802a0c8:	613b      	str	r3, [r7, #16]
          acc += output_offset;
 802a0ca:	693a      	ldr	r2, [r7, #16]
 802a0cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802a0ce:	4413      	add	r3, r2
 802a0d0:	613b      	str	r3, [r7, #16]
          acc = std::max(acc, output_activation_min);
 802a0d2:	f107 0218 	add.w	r2, r7, #24
 802a0d6:	f107 0310 	add.w	r3, r7, #16
 802a0da:	4611      	mov	r1, r2
 802a0dc:	4618      	mov	r0, r3
 802a0de:	f7fe fb53 	bl	8028788 <_ZSt3maxIlERKT_S2_S2_>
 802a0e2:	4603      	mov	r3, r0
 802a0e4:	681b      	ldr	r3, [r3, #0]
 802a0e6:	613b      	str	r3, [r7, #16]
          acc = std::min(acc, output_activation_max);
 802a0e8:	f107 0214 	add.w	r2, r7, #20
 802a0ec:	f107 0310 	add.w	r3, r7, #16
 802a0f0:	4611      	mov	r1, r2
 802a0f2:	4618      	mov	r0, r3
 802a0f4:	f7fe fb34 	bl	8028760 <_ZSt3minIlERKT_S2_S2_>
 802a0f8:	4603      	mov	r3, r0
 802a0fa:	681b      	ldr	r3, [r3, #0]
 802a0fc:	613b      	str	r3, [r7, #16]
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
 802a0fe:	693c      	ldr	r4, [r7, #16]
 802a100:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 802a104:	9300      	str	r3, [sp, #0]
 802a106:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 802a10a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 802a10e:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 802a112:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 802a116:	f7ff fd7d 	bl	8029c14 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 802a11a:	4603      	mov	r3, r0
 802a11c:	461a      	mov	r2, r3
 802a11e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 802a122:	4413      	add	r3, r2
 802a124:	b262      	sxtb	r2, r4
 802a126:	701a      	strb	r2, [r3, #0]
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 802a128:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 802a12c:	3301      	adds	r3, #1
 802a12e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 802a132:	e723      	b.n	8029f7c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x184>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 802a134:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 802a138:	3301      	adds	r3, #1
 802a13a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 802a13e:	e70c      	b.n	8029f5a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x162>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 802a140:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 802a144:	3301      	adds	r3, #1
 802a146:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 802a14a:	e6f5      	b.n	8029f38 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x140>
  for (int batch = 0; batch < batches; ++batch) {
 802a14c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 802a150:	3301      	adds	r3, #1
 802a152:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 802a156:	e6e6      	b.n	8029f26 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x12e>
              static_cast<int8_t>(acc);
        }
      }
    }
  }
}
 802a158:	bf00      	nop
 802a15a:	379c      	adds	r7, #156	; 0x9c
 802a15c:	46bd      	mov	sp, r7
 802a15e:	bd90      	pop	{r4, r7, pc}

0802a160 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:

  // Index to buffer for optimizations if applicable.
  int buffer_idx;
};

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 802a160:	b580      	push	{r7, lr}
 802a162:	b084      	sub	sp, #16
 802a164:	af00      	add	r7, sp, #0
 802a166:	60f8      	str	r0, [r7, #12]
 802a168:	60b9      	str	r1, [r7, #8]
 802a16a:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 802a16c:	68fb      	ldr	r3, [r7, #12]
 802a16e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802a170:	2b00      	cmp	r3, #0
 802a172:	d101      	bne.n	802a178 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0x18>
 802a174:	f007 ff72 	bl	803205c <abort>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
 802a178:	68fb      	ldr	r3, [r7, #12]
 802a17a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802a17c:	2138      	movs	r1, #56	; 0x38
 802a17e:	68f8      	ldr	r0, [r7, #12]
 802a180:	4798      	blx	r3
 802a182:	4603      	mov	r3, r0
}
 802a184:	4618      	mov	r0, r3
 802a186:	3710      	adds	r7, #16
 802a188:	46bd      	mov	sp, r7
 802a18a:	bd80      	pop	{r7, pc}

0802a18c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 802a18c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802a18e:	b0b7      	sub	sp, #220	; 0xdc
 802a190:	af08      	add	r7, sp, #32
 802a192:	60f8      	str	r0, [r7, #12]
 802a194:	60b9      	str	r1, [r7, #8]
  TFLITE_DCHECK(node->user_data != nullptr);
 802a196:	68bb      	ldr	r3, [r7, #8]
 802a198:	691b      	ldr	r3, [r3, #16]
 802a19a:	2b00      	cmp	r3, #0
 802a19c:	d101      	bne.n	802a1a2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x16>
 802a19e:	f007 ff5d 	bl	803205c <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 802a1a2:	68bb      	ldr	r3, [r7, #8]
 802a1a4:	695b      	ldr	r3, [r3, #20]
 802a1a6:	2b00      	cmp	r3, #0
 802a1a8:	d101      	bne.n	802a1ae <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22>
 802a1aa:	f007 ff57 	bl	803205c <abort>

  int32_t buf_size = 0;
 802a1ae:	2300      	movs	r3, #0
 802a1b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  const auto& params =
 802a1b4:	68bb      	ldr	r3, [r7, #8]
 802a1b6:	695b      	ldr	r3, [r3, #20]
 802a1b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      *(static_cast<const TfLiteConvParams*>(node->builtin_data));
  OpData* data = static_cast<OpData*>(node->user_data);
 802a1bc:	68bb      	ldr	r3, [r7, #8]
 802a1be:	691b      	ldr	r3, [r3, #16]
 802a1c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

  const TfLiteTensor* input = GetInput(context, node, kConvInputTensor);
 802a1c4:	4ba2      	ldr	r3, [pc, #648]	; (802a450 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2c4>)
 802a1c6:	681b      	ldr	r3, [r3, #0]
 802a1c8:	461a      	mov	r2, r3
 802a1ca:	68b9      	ldr	r1, [r7, #8]
 802a1cc:	68f8      	ldr	r0, [r7, #12]
 802a1ce:	f7fd ff0f 	bl	8027ff0 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 802a1d2:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
  TF_LITE_ENSURE(context, input != nullptr);
 802a1d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 802a1da:	2b00      	cmp	r3, #0
 802a1dc:	d10a      	bne.n	802a1f4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x68>
 802a1de:	68fb      	ldr	r3, [r7, #12]
 802a1e0:	695c      	ldr	r4, [r3, #20]
 802a1e2:	4b9c      	ldr	r3, [pc, #624]	; (802a454 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2c8>)
 802a1e4:	9300      	str	r3, [sp, #0]
 802a1e6:	233d      	movs	r3, #61	; 0x3d
 802a1e8:	4a9b      	ldr	r2, [pc, #620]	; (802a458 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2cc>)
 802a1ea:	499c      	ldr	r1, [pc, #624]	; (802a45c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2d0>)
 802a1ec:	68f8      	ldr	r0, [r7, #12]
 802a1ee:	47a0      	blx	r4
 802a1f0:	2401      	movs	r4, #1
 802a1f2:	e128      	b.n	802a446 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2ba>
  const TfLiteTensor* filter = GetInput(context, node, kConvWeightsTensor);
 802a1f4:	4b9a      	ldr	r3, [pc, #616]	; (802a460 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2d4>)
 802a1f6:	681b      	ldr	r3, [r3, #0]
 802a1f8:	461a      	mov	r2, r3
 802a1fa:	68b9      	ldr	r1, [r7, #8]
 802a1fc:	68f8      	ldr	r0, [r7, #12]
 802a1fe:	f7fd fef7 	bl	8027ff0 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 802a202:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
  TF_LITE_ENSURE(context, filter != nullptr);
 802a206:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 802a20a:	2b00      	cmp	r3, #0
 802a20c:	d10a      	bne.n	802a224 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x98>
 802a20e:	68fb      	ldr	r3, [r7, #12]
 802a210:	695c      	ldr	r4, [r3, #20]
 802a212:	4b94      	ldr	r3, [pc, #592]	; (802a464 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2d8>)
 802a214:	9300      	str	r3, [sp, #0]
 802a216:	233f      	movs	r3, #63	; 0x3f
 802a218:	4a8f      	ldr	r2, [pc, #572]	; (802a458 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2cc>)
 802a21a:	4990      	ldr	r1, [pc, #576]	; (802a45c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2d0>)
 802a21c:	68f8      	ldr	r0, [r7, #12]
 802a21e:	47a0      	blx	r4
 802a220:	2401      	movs	r4, #1
 802a222:	e110      	b.n	802a446 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2ba>
  const TfLiteTensor* output = GetOutput(context, node, kConvOutputTensor);
 802a224:	4b90      	ldr	r3, [pc, #576]	; (802a468 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2dc>)
 802a226:	681b      	ldr	r3, [r3, #0]
 802a228:	461a      	mov	r2, r3
 802a22a:	68b9      	ldr	r1, [r7, #8]
 802a22c:	68f8      	ldr	r0, [r7, #12]
 802a22e:	f7fd feef 	bl	8028010 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 802a232:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
  TF_LITE_ENSURE(context, output != nullptr);
 802a236:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 802a23a:	2b00      	cmp	r3, #0
 802a23c:	d10a      	bne.n	802a254 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xc8>
 802a23e:	68fb      	ldr	r3, [r7, #12]
 802a240:	695c      	ldr	r4, [r3, #20]
 802a242:	4b8a      	ldr	r3, [pc, #552]	; (802a46c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2e0>)
 802a244:	9300      	str	r3, [sp, #0]
 802a246:	2341      	movs	r3, #65	; 0x41
 802a248:	4a83      	ldr	r2, [pc, #524]	; (802a458 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2cc>)
 802a24a:	4984      	ldr	r1, [pc, #528]	; (802a45c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2d0>)
 802a24c:	68f8      	ldr	r0, [r7, #12]
 802a24e:	47a0      	blx	r4
 802a250:	2401      	movs	r4, #1
 802a252:	e0f8      	b.n	802a446 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2ba>

  RuntimeShape input_shape = GetTensorShape(input);
 802a254:	f107 0380 	add.w	r3, r7, #128	; 0x80
 802a258:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 802a25c:	4618      	mov	r0, r3
 802a25e:	f7fe fb42 	bl	80288e6 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  RuntimeShape output_shape = GetTensorShape(output);
 802a262:	f107 0368 	add.w	r3, r7, #104	; 0x68
 802a266:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 802a26a:	4618      	mov	r0, r3
 802a26c:	f7fe fb3b 	bl	80288e6 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>

  // Initialize cmsis_nn input dimensions
  cmsis_nn_dims input_dims;
  input_dims.n = MatchingDim(input_shape, 0, output_shape, 0);
 802a270:	f107 0268 	add.w	r2, r7, #104	; 0x68
 802a274:	f107 0080 	add.w	r0, r7, #128	; 0x80
 802a278:	2300      	movs	r3, #0
 802a27a:	2100      	movs	r1, #0
 802a27c:	f7ff fd8d 	bl	8029d9a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 802a280:	4603      	mov	r3, r0
 802a282:	65bb      	str	r3, [r7, #88]	; 0x58
  input_dims.h = input->dims->data[1];
 802a284:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 802a288:	689b      	ldr	r3, [r3, #8]
 802a28a:	689b      	ldr	r3, [r3, #8]
 802a28c:	65fb      	str	r3, [r7, #92]	; 0x5c
  input_dims.w = input->dims->data[2];
 802a28e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 802a292:	689b      	ldr	r3, [r3, #8]
 802a294:	68db      	ldr	r3, [r3, #12]
 802a296:	663b      	str	r3, [r7, #96]	; 0x60
  input_dims.c = input_shape.Dims(3);
 802a298:	f107 0380 	add.w	r3, r7, #128	; 0x80
 802a29c:	2103      	movs	r1, #3
 802a29e:	4618      	mov	r0, r3
 802a2a0:	f7fe fc58 	bl	8028b54 <_ZNK6tflite12RuntimeShape4DimsEi>
 802a2a4:	4603      	mov	r3, r0
 802a2a6:	667b      	str	r3, [r7, #100]	; 0x64

  // Initialize cmsis_nn filter dimensions
  cmsis_nn_dims filter_dims;
  filter_dims.n = output_shape.Dims(3);
 802a2a8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 802a2ac:	2103      	movs	r1, #3
 802a2ae:	4618      	mov	r0, r3
 802a2b0:	f7fe fc50 	bl	8028b54 <_ZNK6tflite12RuntimeShape4DimsEi>
 802a2b4:	4603      	mov	r3, r0
 802a2b6:	64bb      	str	r3, [r7, #72]	; 0x48
  filter_dims.h = filter->dims->data[1];
 802a2b8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 802a2bc:	689b      	ldr	r3, [r3, #8]
 802a2be:	689b      	ldr	r3, [r3, #8]
 802a2c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  filter_dims.w = filter->dims->data[2];
 802a2c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 802a2c6:	689b      	ldr	r3, [r3, #8]
 802a2c8:	68db      	ldr	r3, [r3, #12]
 802a2ca:	653b      	str	r3, [r7, #80]	; 0x50
  filter_dims.c = input_dims.c;
 802a2cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 802a2ce:	657b      	str	r3, [r7, #84]	; 0x54

  // Initialize cmsis_nn output dimensions
  cmsis_nn_dims output_dims;
  output_dims.n = input_dims.n;
 802a2d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802a2d2:	63bb      	str	r3, [r7, #56]	; 0x38
  output_dims.h = output->dims->data[1];
 802a2d4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 802a2d8:	689b      	ldr	r3, [r3, #8]
 802a2da:	689b      	ldr	r3, [r3, #8]
 802a2dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  output_dims.w = output->dims->data[2];
 802a2de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 802a2e2:	689b      	ldr	r3, [r3, #8]
 802a2e4:	68db      	ldr	r3, [r3, #12]
 802a2e6:	643b      	str	r3, [r7, #64]	; 0x40
  output_dims.c = output_shape.Dims(3);
 802a2e8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 802a2ec:	2103      	movs	r1, #3
 802a2ee:	4618      	mov	r0, r3
 802a2f0:	f7fe fc30 	bl	8028b54 <_ZNK6tflite12RuntimeShape4DimsEi>
 802a2f4:	4603      	mov	r3, r0
 802a2f6:	647b      	str	r3, [r7, #68]	; 0x44
  // Dynamically allocate per-channel quantization parameters.
  // TODO(#42883): This allocation is done even for non-int8 cases to get around
  // a bug in kernel_util.cc which incorrectly uses per_channel_output_shift in
  // non-int8 cases. Protect this section with a if (input->type == kTfLiteInt8)
  // when the issue is fixed.
  const int num_channels = filter->dims->data[kConvQuantizedDimension];
 802a2f8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 802a2fc:	689a      	ldr	r2, [r3, #8]
 802a2fe:	4b5c      	ldr	r3, [pc, #368]	; (802a470 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2e4>)
 802a300:	681b      	ldr	r3, [r3, #0]
 802a302:	009b      	lsls	r3, r3, #2
 802a304:	4413      	add	r3, r2
 802a306:	685b      	ldr	r3, [r3, #4]
 802a308:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  data->reference_op_data.per_channel_output_multiplier =
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
 802a30c:	68fb      	ldr	r3, [r7, #12]
 802a30e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          context, num_channels * sizeof(int32_t)));
 802a310:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
 802a314:	0092      	lsls	r2, r2, #2
 802a316:	4611      	mov	r1, r2
 802a318:	68f8      	ldr	r0, [r7, #12]
 802a31a:	4798      	blx	r3
 802a31c:	4602      	mov	r2, r0
  data->reference_op_data.per_channel_output_multiplier =
 802a31e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 802a322:	625a      	str	r2, [r3, #36]	; 0x24
  data->reference_op_data.per_channel_output_shift =
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
 802a324:	68fb      	ldr	r3, [r7, #12]
 802a326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          context, num_channels * sizeof(int32_t)));
 802a328:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
 802a32c:	0092      	lsls	r2, r2, #2
 802a32e:	4611      	mov	r1, r2
 802a330:	68f8      	ldr	r0, [r7, #12]
 802a332:	4798      	blx	r3
 802a334:	4602      	mov	r2, r0
  data->reference_op_data.per_channel_output_shift =
 802a336:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 802a33a:	629a      	str	r2, [r3, #40]	; 0x28

  TF_LITE_ENSURE_STATUS(CalculateOpDataConv(
 802a33c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 802a33e:	607b      	str	r3, [r7, #4]
 802a340:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802a342:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802a344:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 802a346:	6c38      	ldr	r0, [r7, #64]	; 0x40
 802a348:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 802a34a:	f8d7 50a8 	ldr.w	r5, [r7, #168]	; 0xa8
 802a34e:	782d      	ldrb	r5, [r5, #0]
 802a350:	f8d7 60ac 	ldr.w	r6, [r7, #172]	; 0xac
 802a354:	9606      	str	r6, [sp, #24]
 802a356:	9505      	str	r5, [sp, #20]
 802a358:	9404      	str	r4, [sp, #16]
 802a35a:	9003      	str	r0, [sp, #12]
 802a35c:	9102      	str	r1, [sp, #8]
 802a35e:	9201      	str	r2, [sp, #4]
 802a360:	9300      	str	r3, [sp, #0]
 802a362:	687b      	ldr	r3, [r7, #4]
 802a364:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 802a368:	68b9      	ldr	r1, [r7, #8]
 802a36a:	68f8      	ldr	r0, [r7, #12]
 802a36c:	f000 fcdc 	bl	802ad28 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>
 802a370:	4603      	mov	r3, r0
 802a372:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
 802a376:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 802a37a:	2b00      	cmp	r3, #0
 802a37c:	d002      	beq.n	802a384 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1f8>
 802a37e:	f897 409b 	ldrb.w	r4, [r7, #155]	; 0x9b
 802a382:	e056      	b.n	802a432 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2a6>
      context, node, params, input_dims.w, input_dims.h, filter_dims.w,
      filter_dims.h, output_dims.w, output_dims.h, input->type,
      &data->reference_op_data));

  if (input->type == kTfLiteInt8) {
 802a384:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 802a388:	781b      	ldrb	r3, [r3, #0]
 802a38a:	2b09      	cmp	r3, #9
 802a38c:	d134      	bne.n	802a3f8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x26c>
    // Initialize cmsis_nn convolution parameters
    cmsis_nn_conv_params conv_params;
    conv_params.input_offset = -input->params.zero_point;
 802a38e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 802a392:	691b      	ldr	r3, [r3, #16]
 802a394:	425b      	negs	r3, r3
 802a396:	613b      	str	r3, [r7, #16]
    conv_params.output_offset = output->params.zero_point;
 802a398:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 802a39c:	691b      	ldr	r3, [r3, #16]
 802a39e:	617b      	str	r3, [r7, #20]
    conv_params.stride.h = params.stride_height;
 802a3a0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 802a3a4:	689b      	ldr	r3, [r3, #8]
 802a3a6:	61fb      	str	r3, [r7, #28]
    conv_params.stride.w = params.stride_width;
 802a3a8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 802a3ac:	685b      	ldr	r3, [r3, #4]
 802a3ae:	61bb      	str	r3, [r7, #24]
    conv_params.dilation.h = params.dilation_height_factor;
 802a3b0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 802a3b4:	695b      	ldr	r3, [r3, #20]
 802a3b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    conv_params.dilation.w = params.dilation_width_factor;
 802a3b8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 802a3bc:	691b      	ldr	r3, [r3, #16]
 802a3be:	62bb      	str	r3, [r7, #40]	; 0x28
    conv_params.padding.h = data->reference_op_data.padding.height;
 802a3c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 802a3c4:	685b      	ldr	r3, [r3, #4]
 802a3c6:	627b      	str	r3, [r7, #36]	; 0x24
    conv_params.padding.w = data->reference_op_data.padding.width;
 802a3c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 802a3cc:	681b      	ldr	r3, [r3, #0]
 802a3ce:	623b      	str	r3, [r7, #32]
    conv_params.activation.min = data->reference_op_data.output_activation_min;
 802a3d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 802a3d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802a3d6:	633b      	str	r3, [r7, #48]	; 0x30
    conv_params.activation.max = data->reference_op_data.output_activation_max;
 802a3d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 802a3dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802a3de:	637b      	str	r3, [r7, #52]	; 0x34

    buf_size = arm_convolve_wrapper_s8_get_buffer_size(
 802a3e0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 802a3e4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 802a3e8:	f107 0158 	add.w	r1, r7, #88	; 0x58
 802a3ec:	f107 0010 	add.w	r0, r7, #16
 802a3f0:	f7ed fdb7 	bl	8017f62 <arm_convolve_wrapper_s8_get_buffer_size>
 802a3f4:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
        &conv_params, &input_dims, &filter_dims, &output_dims);
  }

  if (buf_size > 0) {
 802a3f8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 802a3fc:	2b00      	cmp	r3, #0
 802a3fe:	dd12      	ble.n	802a426 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x29a>
    TF_LITE_ENSURE_STATUS(context->RequestScratchBufferInArena(
 802a400:	68fb      	ldr	r3, [r7, #12]
 802a402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802a404:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 802a408:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 802a40c:	3234      	adds	r2, #52	; 0x34
 802a40e:	68f8      	ldr	r0, [r7, #12]
 802a410:	4798      	blx	r3
 802a412:	4603      	mov	r3, r0
 802a414:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
 802a418:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 802a41c:	2b00      	cmp	r3, #0
 802a41e:	d007      	beq.n	802a430 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2a4>
 802a420:	f897 409a 	ldrb.w	r4, [r7, #154]	; 0x9a
 802a424:	e005      	b.n	802a432 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2a6>
        context, buf_size, &data->buffer_idx));
  } else {
    data->buffer_idx = -1;
 802a426:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 802a42a:	f04f 32ff 	mov.w	r2, #4294967295
 802a42e:	635a      	str	r2, [r3, #52]	; 0x34
  }
  return kTfLiteOk;
 802a430:	2400      	movs	r4, #0
  RuntimeShape output_shape = GetTensorShape(output);
 802a432:	f107 0368 	add.w	r3, r7, #104	; 0x68
 802a436:	4618      	mov	r0, r3
 802a438:	f7fe f9db 	bl	80287f2 <_ZN6tflite12RuntimeShapeD1Ev>
  RuntimeShape input_shape = GetTensorShape(input);
 802a43c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 802a440:	4618      	mov	r0, r3
 802a442:	f7fe f9d6 	bl	80287f2 <_ZN6tflite12RuntimeShapeD1Ev>
}
 802a446:	4623      	mov	r3, r4
 802a448:	4618      	mov	r0, r3
 802a44a:	37bc      	adds	r7, #188	; 0xbc
 802a44c:	46bd      	mov	sp, r7
 802a44e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802a450:	08036c80 	.word	0x08036c80
 802a454:	08034c60 	.word	0x08034c60
 802a458:	08034bc0 	.word	0x08034bc0
 802a45c:	08034c48 	.word	0x08034c48
 802a460:	08036c84 	.word	0x08036c84
 802a464:	08034c74 	.word	0x08034c74
 802a468:	08036c8c 	.word	0x08036c8c
 802a46c:	08034c88 	.word	0x08034c88
 802a470:	08036c90 	.word	0x08036c90

0802a474 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_>:

TfLiteStatus EvalQuantizedPerChannel(
    TfLiteContext* context, TfLiteNode* node, const TfLiteConvParams& params,
    const OpData& data, const TfLiteEvalTensor* input,
    const TfLiteEvalTensor* filter, const TfLiteEvalTensor* bias,
    TfLiteEvalTensor* output, TfLiteEvalTensor* im2col) {
 802a474:	b5f0      	push	{r4, r5, r6, r7, lr}
 802a476:	b0ef      	sub	sp, #444	; 0x1bc
 802a478:	af08      	add	r7, sp, #32
 802a47a:	f507 74cc 	add.w	r4, r7, #408	; 0x198
 802a47e:	f5a4 74c2 	sub.w	r4, r4, #388	; 0x184
 802a482:	6020      	str	r0, [r4, #0]
 802a484:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 802a488:	f5a0 70c4 	sub.w	r0, r0, #392	; 0x188
 802a48c:	6001      	str	r1, [r0, #0]
 802a48e:	f507 71cc 	add.w	r1, r7, #408	; 0x198
 802a492:	f5a1 71c6 	sub.w	r1, r1, #396	; 0x18c
 802a496:	600a      	str	r2, [r1, #0]
 802a498:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 802a49c:	f5a2 72c8 	sub.w	r2, r2, #400	; 0x190
 802a4a0:	6013      	str	r3, [r2, #0]
  cmsis_nn_conv_params conv_params;
  conv_params.dilation.h = params.dilation_height_factor;
 802a4a2:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 802a4a6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 802a4aa:	681b      	ldr	r3, [r3, #0]
 802a4ac:	695b      	ldr	r3, [r3, #20]
 802a4ae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  conv_params.dilation.w = params.dilation_width_factor;
 802a4b2:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 802a4b6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 802a4ba:	681b      	ldr	r3, [r3, #0]
 802a4bc:	691b      	ldr	r3, [r3, #16]
 802a4be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  // TODO(#43557) Remove checks for dilation and call to reference
  // implementation when dilation is supported in the optimized implementation
  // by CMSIS-NN.
  if (conv_params.dilation.h == 1 && conv_params.dilation.w == 1) {
 802a4c2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 802a4c6:	2b01      	cmp	r3, #1
 802a4c8:	f040 81d2 	bne.w	802a870 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_+0x3fc>
 802a4cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802a4d0:	2b01      	cmp	r3, #1
 802a4d2:	f040 81cd 	bne.w	802a870 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_+0x3fc>
    // Initialize cmsis_nn convolution parameters
    conv_params.input_offset = -data.reference_op_data.input_zero_point;
 802a4d6:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 802a4da:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 802a4de:	681b      	ldr	r3, [r3, #0]
 802a4e0:	691b      	ldr	r3, [r3, #16]
 802a4e2:	425b      	negs	r3, r3
 802a4e4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    conv_params.output_offset = data.reference_op_data.output_zero_point;
 802a4e8:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 802a4ec:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 802a4f0:	681b      	ldr	r3, [r3, #0]
 802a4f2:	699b      	ldr	r3, [r3, #24]
 802a4f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    conv_params.stride.h = params.stride_height;
 802a4f8:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 802a4fc:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 802a500:	681b      	ldr	r3, [r3, #0]
 802a502:	689b      	ldr	r3, [r3, #8]
 802a504:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    conv_params.stride.w = params.stride_width;
 802a508:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 802a50c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 802a510:	681b      	ldr	r3, [r3, #0]
 802a512:	685b      	ldr	r3, [r3, #4]
 802a514:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    conv_params.padding.h = data.reference_op_data.padding.height;
 802a518:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 802a51c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 802a520:	681b      	ldr	r3, [r3, #0]
 802a522:	685b      	ldr	r3, [r3, #4]
 802a524:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    conv_params.padding.w = data.reference_op_data.padding.width;
 802a528:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 802a52c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 802a530:	681b      	ldr	r3, [r3, #0]
 802a532:	681b      	ldr	r3, [r3, #0]
 802a534:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    conv_params.activation.min = data.reference_op_data.output_activation_min;
 802a538:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 802a53c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 802a540:	681b      	ldr	r3, [r3, #0]
 802a542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802a544:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    conv_params.activation.max = data.reference_op_data.output_activation_max;
 802a548:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 802a54c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 802a550:	681b      	ldr	r3, [r3, #0]
 802a552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802a554:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0

    // Initialize cmsis_nn per channel quantization parameters
    cmsis_nn_per_channel_quant_params quant_params;
    quant_params.multiplier = const_cast<int32_t*>(
        data.reference_op_data.per_channel_output_multiplier);
 802a558:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 802a55c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 802a560:	681b      	ldr	r3, [r3, #0]
 802a562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    quant_params.multiplier = const_cast<int32_t*>(
 802a564:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    quant_params.shift =
        const_cast<int32_t*>(data.reference_op_data.per_channel_output_shift);
 802a568:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 802a56c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 802a570:	681b      	ldr	r3, [r3, #0]
 802a572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    quant_params.shift =
 802a574:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

    RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
 802a578:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 802a57c:	f8d7 11b4 	ldr.w	r1, [r7, #436]	; 0x1b4
 802a580:	4618      	mov	r0, r3
 802a582:	f001 fc89 	bl	802be98 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 802a586:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 802a58a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 802a58e:	f8d7 11b0 	ldr.w	r1, [r7, #432]	; 0x1b0
 802a592:	4618      	mov	r0, r3
 802a594:	f001 fc80 	bl	802be98 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 802a598:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 802a59c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 802a5a0:	f8d7 11bc 	ldr.w	r1, [r7, #444]	; 0x1bc
 802a5a4:	4618      	mov	r0, r3
 802a5a6:	f001 fc77 	bl	802be98 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    RuntimeShape bias_shape = tflite::micro::GetTensorShape(bias);
 802a5aa:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 802a5ae:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 802a5b2:	f8d7 11b8 	ldr.w	r1, [r7, #440]	; 0x1b8
 802a5b6:	4618      	mov	r0, r3
 802a5b8:	f001 fc6e 	bl	802be98 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>

    // Consistency check.
    TFLITE_DCHECK_LE(conv_params.activation.min, conv_params.activation.max);
 802a5bc:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 802a5c0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 802a5c4:	429a      	cmp	r2, r3
 802a5c6:	dd01      	ble.n	802a5cc <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_+0x158>
 802a5c8:	f007 fd48 	bl	803205c <abort>
    TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 802a5cc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 802a5d0:	4618      	mov	r0, r3
 802a5d2:	f7fe f924 	bl	802881e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 802a5d6:	4603      	mov	r3, r0
 802a5d8:	2b04      	cmp	r3, #4
 802a5da:	d001      	beq.n	802a5e0 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_+0x16c>
 802a5dc:	f007 fd3e 	bl	803205c <abort>
    TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 802a5e0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 802a5e4:	4618      	mov	r0, r3
 802a5e6:	f7fe f91a 	bl	802881e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 802a5ea:	4603      	mov	r3, r0
 802a5ec:	2b04      	cmp	r3, #4
 802a5ee:	d001      	beq.n	802a5f4 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_+0x180>
 802a5f0:	f007 fd34 	bl	803205c <abort>
    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 802a5f4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 802a5f8:	4618      	mov	r0, r3
 802a5fa:	f7fe f910 	bl	802881e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 802a5fe:	4603      	mov	r3, r0
 802a600:	2b04      	cmp	r3, #4
 802a602:	d001      	beq.n	802a608 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_+0x194>
 802a604:	f007 fd2a 	bl	803205c <abort>
    const int batch_size = MatchingDim(input_shape, 0, output_shape, 0);
 802a608:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 802a60c:	f107 0094 	add.w	r0, r7, #148	; 0x94
 802a610:	2300      	movs	r3, #0
 802a612:	2100      	movs	r1, #0
 802a614:	f7ff fbc1 	bl	8029d9a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 802a618:	f8c7 0194 	str.w	r0, [r7, #404]	; 0x194
    const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
 802a61c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 802a620:	f107 0094 	add.w	r0, r7, #148	; 0x94
 802a624:	2303      	movs	r3, #3
 802a626:	2103      	movs	r1, #3
 802a628:	f7ff fbb7 	bl	8029d9a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 802a62c:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190
    const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
 802a630:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 802a634:	f107 00ac 	add.w	r0, r7, #172	; 0xac
 802a638:	2303      	movs	r3, #3
 802a63a:	2100      	movs	r1, #0
 802a63c:	f7ff fbad 	bl	8029d9a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 802a640:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c
    if (tflite::micro::GetTensorData<int8_t>(bias)) {
 802a644:	f8d7 01b8 	ldr.w	r0, [r7, #440]	; 0x1b8
 802a648:	f7ff f856 	bl	80296f8 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 802a64c:	4603      	mov	r3, r0
 802a64e:	2b00      	cmp	r3, #0
 802a650:	bf14      	ite	ne
 802a652:	2301      	movne	r3, #1
 802a654:	2300      	moveq	r3, #0
 802a656:	b2db      	uxtb	r3, r3
 802a658:	2b00      	cmp	r3, #0
 802a65a:	d00b      	beq.n	802a674 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_+0x200>
      TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 802a65c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 802a660:	4618      	mov	r0, r3
 802a662:	f7fe faaf 	bl	8028bc4 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 802a666:	4602      	mov	r2, r0
 802a668:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 802a66c:	4293      	cmp	r3, r2
 802a66e:	d001      	beq.n	802a674 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_+0x200>
 802a670:	f007 fcf4 	bl	803205c <abort>
    }

    // Initialize cmsis_nn dimensions
    // Input
    cmsis_nn_dims input_dims;
    input_dims.n = batch_size;
 802a674:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 802a678:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 802a67c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 802a680:	601a      	str	r2, [r3, #0]
    input_dims.h = input_shape.Dims(1);
 802a682:	f107 0394 	add.w	r3, r7, #148	; 0x94
 802a686:	2101      	movs	r1, #1
 802a688:	4618      	mov	r0, r3
 802a68a:	f7fe fa63 	bl	8028b54 <_ZNK6tflite12RuntimeShape4DimsEi>
 802a68e:	4602      	mov	r2, r0
 802a690:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 802a694:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 802a698:	605a      	str	r2, [r3, #4]
    input_dims.w = input_shape.Dims(2);
 802a69a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 802a69e:	2102      	movs	r1, #2
 802a6a0:	4618      	mov	r0, r3
 802a6a2:	f7fe fa57 	bl	8028b54 <_ZNK6tflite12RuntimeShape4DimsEi>
 802a6a6:	4602      	mov	r2, r0
 802a6a8:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 802a6ac:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 802a6b0:	609a      	str	r2, [r3, #8]
    input_dims.c = input_depth;
 802a6b2:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 802a6b6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 802a6ba:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 802a6be:	60da      	str	r2, [r3, #12]

    // Filter
    cmsis_nn_dims filter_dims;
    filter_dims.n = output_depth;
 802a6c0:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 802a6c4:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 802a6c8:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 802a6cc:	601a      	str	r2, [r3, #0]
    filter_dims.h = filter_shape.Dims(1);
 802a6ce:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 802a6d2:	2101      	movs	r1, #1
 802a6d4:	4618      	mov	r0, r3
 802a6d6:	f7fe fa3d 	bl	8028b54 <_ZNK6tflite12RuntimeShape4DimsEi>
 802a6da:	4602      	mov	r2, r0
 802a6dc:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 802a6e0:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 802a6e4:	605a      	str	r2, [r3, #4]
    filter_dims.w = filter_shape.Dims(2);
 802a6e6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 802a6ea:	2102      	movs	r1, #2
 802a6ec:	4618      	mov	r0, r3
 802a6ee:	f7fe fa31 	bl	8028b54 <_ZNK6tflite12RuntimeShape4DimsEi>
 802a6f2:	4602      	mov	r2, r0
 802a6f4:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 802a6f8:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 802a6fc:	609a      	str	r2, [r3, #8]
    filter_dims.c = input_depth;
 802a6fe:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 802a702:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 802a706:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 802a70a:	60da      	str	r2, [r3, #12]

    // Bias
    cmsis_nn_dims bias_dims;
    bias_dims.n = 1;
 802a70c:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 802a710:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 802a714:	2201      	movs	r2, #1
 802a716:	601a      	str	r2, [r3, #0]
    bias_dims.h = 1;
 802a718:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 802a71c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 802a720:	2201      	movs	r2, #1
 802a722:	605a      	str	r2, [r3, #4]
    bias_dims.w = 1;
 802a724:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 802a728:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 802a72c:	2201      	movs	r2, #1
 802a72e:	609a      	str	r2, [r3, #8]
    bias_dims.c = output_depth;
 802a730:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 802a734:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 802a738:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 802a73c:	60da      	str	r2, [r3, #12]

    // Output
    cmsis_nn_dims output_dims;
    output_dims.n = batch_size;
 802a73e:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 802a742:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 802a746:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 802a74a:	601a      	str	r2, [r3, #0]
    output_dims.h = output_shape.Dims(1);
 802a74c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 802a750:	2101      	movs	r1, #1
 802a752:	4618      	mov	r0, r3
 802a754:	f7fe f9fe 	bl	8028b54 <_ZNK6tflite12RuntimeShape4DimsEi>
 802a758:	4602      	mov	r2, r0
 802a75a:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 802a75e:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 802a762:	605a      	str	r2, [r3, #4]
    output_dims.w = output_shape.Dims(2);
 802a764:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 802a768:	2102      	movs	r1, #2
 802a76a:	4618      	mov	r0, r3
 802a76c:	f7fe f9f2 	bl	8028b54 <_ZNK6tflite12RuntimeShape4DimsEi>
 802a770:	4602      	mov	r2, r0
 802a772:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 802a776:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 802a77a:	609a      	str	r2, [r3, #8]
    output_dims.c = output_depth;
 802a77c:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 802a780:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 802a784:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 802a788:	60da      	str	r2, [r3, #12]

    // Initialize cmsis_nn context
    cmsis_nn_context ctx;
    ctx.buf = nullptr;
 802a78a:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 802a78e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 802a792:	2200      	movs	r2, #0
 802a794:	601a      	str	r2, [r3, #0]
    ctx.size = 0;
 802a796:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 802a79a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 802a79e:	2200      	movs	r2, #0
 802a7a0:	605a      	str	r2, [r3, #4]

    if (data.buffer_idx > -1) {
 802a7a2:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 802a7a6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 802a7aa:	681b      	ldr	r3, [r3, #0]
 802a7ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802a7ae:	2b00      	cmp	r3, #0
 802a7b0:	db17      	blt.n	802a7e2 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_+0x36e>
      ctx.buf = context->GetScratchBuffer(context, data.buffer_idx);
 802a7b2:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 802a7b6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 802a7ba:	681b      	ldr	r3, [r3, #0]
 802a7bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802a7be:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 802a7c2:	f5a2 72c8 	sub.w	r2, r2, #400	; 0x190
 802a7c6:	6812      	ldr	r2, [r2, #0]
 802a7c8:	6b51      	ldr	r1, [r2, #52]	; 0x34
 802a7ca:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 802a7ce:	f5a2 72c2 	sub.w	r2, r2, #388	; 0x184
 802a7d2:	6810      	ldr	r0, [r2, #0]
 802a7d4:	4798      	blx	r3
 802a7d6:	4602      	mov	r2, r0
 802a7d8:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 802a7dc:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 802a7e0:	601a      	str	r2, [r3, #0]
      // arm_convolve_wrapper_s8_get_buffer_size
    }

    // arm_convolve_wrapper_s8 dispatches the optimized kernel accordingly with
    // the parameters passed
    TFLITE_DCHECK_EQ(
 802a7e2:	f8d7 01b0 	ldr.w	r0, [r7, #432]	; 0x1b0
 802a7e6:	f7fe ff87 	bl	80296f8 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 802a7ea:	4605      	mov	r5, r0
 802a7ec:	f8d7 01b4 	ldr.w	r0, [r7, #436]	; 0x1b4
 802a7f0:	f7fe ff82 	bl	80296f8 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 802a7f4:	4606      	mov	r6, r0
 802a7f6:	f8d7 01b8 	ldr.w	r0, [r7, #440]	; 0x1b8
 802a7fa:	f7ff fabf 	bl	8029d7c <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 802a7fe:	6078      	str	r0, [r7, #4]
 802a800:	f8d7 01bc 	ldr.w	r0, [r7, #444]	; 0x1bc
 802a804:	f7fe ff87 	bl	8029716 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 802a808:	4603      	mov	r3, r0
 802a80a:	f107 0454 	add.w	r4, r7, #84	; 0x54
 802a80e:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 802a812:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 802a816:	f107 001c 	add.w	r0, r7, #28
 802a81a:	9306      	str	r3, [sp, #24]
 802a81c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802a820:	9305      	str	r3, [sp, #20]
 802a822:	687b      	ldr	r3, [r7, #4]
 802a824:	9304      	str	r3, [sp, #16]
 802a826:	f107 0334 	add.w	r3, r7, #52	; 0x34
 802a82a:	9303      	str	r3, [sp, #12]
 802a82c:	9602      	str	r6, [sp, #8]
 802a82e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 802a832:	9301      	str	r3, [sp, #4]
 802a834:	9500      	str	r5, [sp, #0]
 802a836:	4623      	mov	r3, r4
 802a838:	f7ed fb13 	bl	8017e62 <arm_convolve_wrapper_s8>
 802a83c:	4603      	mov	r3, r0
 802a83e:	2b00      	cmp	r3, #0
 802a840:	d001      	beq.n	802a846 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_+0x3d2>
 802a842:	f007 fc0b 	bl	803205c <abort>
    RuntimeShape bias_shape = tflite::micro::GetTensorShape(bias);
 802a846:	f107 0364 	add.w	r3, r7, #100	; 0x64
 802a84a:	4618      	mov	r0, r3
 802a84c:	f7fd ffd1 	bl	80287f2 <_ZN6tflite12RuntimeShapeD1Ev>
    RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 802a850:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 802a854:	4618      	mov	r0, r3
 802a856:	f7fd ffcc 	bl	80287f2 <_ZN6tflite12RuntimeShapeD1Ev>
    RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 802a85a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 802a85e:	4618      	mov	r0, r3
 802a860:	f7fd ffc7 	bl	80287f2 <_ZN6tflite12RuntimeShapeD1Ev>
    RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
 802a864:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 802a868:	4618      	mov	r0, r3
 802a86a:	f7fd ffc2 	bl	80287f2 <_ZN6tflite12RuntimeShapeD1Ev>
            &ctx, &conv_params, &quant_params, &input_dims,
            tflite::micro::GetTensorData<int8_t>(input), &filter_dims,
            tflite::micro::GetTensorData<int8_t>(filter), &bias_dims,
            tflite::micro::GetTensorData<int32_t>(bias), &output_dims,
            tflite::micro::GetTensorData<int8_t>(output)),
        ARM_MATH_SUCCESS);
 802a86e:	e075      	b.n	802a95c <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_+0x4e8>
  } else {
    reference_integer_ops::ConvPerChannel(
        ConvParamsQuantized(params, data.reference_op_data),
 802a870:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 802a874:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 802a878:	681a      	ldr	r2, [r3, #0]
 802a87a:	f107 00f4 	add.w	r0, r7, #244	; 0xf4
 802a87e:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 802a882:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 802a886:	6819      	ldr	r1, [r3, #0]
 802a888:	f000 f9fd 	bl	802ac86 <_ZN6tflite19ConvParamsQuantizedERK16TfLiteConvParamsRKNS_10OpDataConvE>
        data.reference_op_data.per_channel_output_multiplier,
 802a88c:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 802a890:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 802a894:	681b      	ldr	r3, [r3, #0]
 802a896:	6a5c      	ldr	r4, [r3, #36]	; 0x24
        data.reference_op_data.per_channel_output_shift,
 802a898:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 802a89c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 802a8a0:	681b      	ldr	r3, [r3, #0]
 802a8a2:	6a9d      	ldr	r5, [r3, #40]	; 0x28
        tflite::micro::GetTensorShape(input),
 802a8a4:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 802a8a8:	f8d7 11b0 	ldr.w	r1, [r7, #432]	; 0x1b0
 802a8ac:	4618      	mov	r0, r3
 802a8ae:	f001 faf3 	bl	802be98 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    reference_integer_ops::ConvPerChannel(
 802a8b2:	f8d7 01b0 	ldr.w	r0, [r7, #432]	; 0x1b0
 802a8b6:	f7fe ff1f 	bl	80296f8 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 802a8ba:	4606      	mov	r6, r0
        tflite::micro::GetTensorData<int8_t>(input),
        tflite::micro::GetTensorShape(filter),
 802a8bc:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 802a8c0:	f8d7 11b4 	ldr.w	r1, [r7, #436]	; 0x1b4
 802a8c4:	4618      	mov	r0, r3
 802a8c6:	f001 fae7 	bl	802be98 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    reference_integer_ops::ConvPerChannel(
 802a8ca:	f8d7 01b4 	ldr.w	r0, [r7, #436]	; 0x1b4
 802a8ce:	f7fe ff13 	bl	80296f8 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 802a8d2:	6078      	str	r0, [r7, #4]
        tflite::micro::GetTensorData<int8_t>(filter),
        tflite::micro::GetTensorShape(bias),
 802a8d4:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 802a8d8:	f8d7 11b8 	ldr.w	r1, [r7, #440]	; 0x1b8
 802a8dc:	4618      	mov	r0, r3
 802a8de:	f001 fadb 	bl	802be98 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    reference_integer_ops::ConvPerChannel(
 802a8e2:	f8d7 01b8 	ldr.w	r0, [r7, #440]	; 0x1b8
 802a8e6:	f7ff fa49 	bl	8029d7c <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 802a8ea:	6038      	str	r0, [r7, #0]
        tflite::micro::GetTensorData<int32_t>(bias),
        tflite::micro::GetTensorShape(output),
 802a8ec:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 802a8f0:	f8d7 11bc 	ldr.w	r1, [r7, #444]	; 0x1bc
 802a8f4:	4618      	mov	r0, r3
 802a8f6:	f001 facf 	bl	802be98 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    reference_integer_ops::ConvPerChannel(
 802a8fa:	f8d7 01bc 	ldr.w	r0, [r7, #444]	; 0x1bc
 802a8fe:	f7fe ff0a 	bl	8029716 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 802a902:	4603      	mov	r3, r0
 802a904:	f507 7296 	add.w	r2, r7, #300	; 0x12c
 802a908:	f107 00f4 	add.w	r0, r7, #244	; 0xf4
 802a90c:	9306      	str	r3, [sp, #24]
 802a90e:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 802a912:	9305      	str	r3, [sp, #20]
 802a914:	683b      	ldr	r3, [r7, #0]
 802a916:	9304      	str	r3, [sp, #16]
 802a918:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 802a91c:	9303      	str	r3, [sp, #12]
 802a91e:	687b      	ldr	r3, [r7, #4]
 802a920:	9302      	str	r3, [sp, #8]
 802a922:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 802a926:	9301      	str	r3, [sp, #4]
 802a928:	9600      	str	r6, [sp, #0]
 802a92a:	4613      	mov	r3, r2
 802a92c:	462a      	mov	r2, r5
 802a92e:	4621      	mov	r1, r4
 802a930:	f7ff fa62 	bl	8029df8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>
        tflite::micro::GetTensorShape(output),
 802a934:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 802a938:	4618      	mov	r0, r3
 802a93a:	f7fd ff5a 	bl	80287f2 <_ZN6tflite12RuntimeShapeD1Ev>
        tflite::micro::GetTensorShape(bias),
 802a93e:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 802a942:	4618      	mov	r0, r3
 802a944:	f7fd ff55 	bl	80287f2 <_ZN6tflite12RuntimeShapeD1Ev>
        tflite::micro::GetTensorShape(filter),
 802a948:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 802a94c:	4618      	mov	r0, r3
 802a94e:	f7fd ff50 	bl	80287f2 <_ZN6tflite12RuntimeShapeD1Ev>
        tflite::micro::GetTensorShape(input),
 802a952:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 802a956:	4618      	mov	r0, r3
 802a958:	f7fd ff4b 	bl	80287f2 <_ZN6tflite12RuntimeShapeD1Ev>
        tflite::micro::GetTensorData<int8_t>(output));
  }
  return kTfLiteOk;
 802a95c:	2300      	movs	r3, #0
}
 802a95e:	4618      	mov	r0, r3
 802a960:	f507 77ce 	add.w	r7, r7, #412	; 0x19c
 802a964:	46bd      	mov	sp, r7
 802a966:	bdf0      	pop	{r4, r5, r6, r7, pc}

0802a968 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 802a968:	b590      	push	{r4, r7, lr}
 802a96a:	b0bb      	sub	sp, #236	; 0xec
 802a96c:	af06      	add	r7, sp, #24
 802a96e:	6078      	str	r0, [r7, #4]
 802a970:	6039      	str	r1, [r7, #0]
  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kConvInputTensor);
 802a972:	4b5a      	ldr	r3, [pc, #360]	; (802aadc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x174>)
 802a974:	681b      	ldr	r3, [r3, #0]
 802a976:	461a      	mov	r2, r3
 802a978:	6839      	ldr	r1, [r7, #0]
 802a97a:	6878      	ldr	r0, [r7, #4]
 802a97c:	f7fe f9be 	bl	8028cfc <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 802a980:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
  const TfLiteEvalTensor* filter =
      tflite::micro::GetEvalInput(context, node, kConvWeightsTensor);
 802a984:	4b56      	ldr	r3, [pc, #344]	; (802aae0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x178>)
 802a986:	681b      	ldr	r3, [r3, #0]
 802a988:	461a      	mov	r2, r3
 802a98a:	6839      	ldr	r1, [r7, #0]
 802a98c:	6878      	ldr	r0, [r7, #4]
 802a98e:	f7fe f9b5 	bl	8028cfc <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 802a992:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
  const TfLiteEvalTensor* bias =
      (NumInputs(node) == 3)
 802a996:	6838      	ldr	r0, [r7, #0]
 802a998:	f7ff f9d6 	bl	8029d48 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 802a99c:	4603      	mov	r3, r0
          ? tflite::micro::GetEvalInput(context, node, kConvBiasTensor)
 802a99e:	2b03      	cmp	r3, #3
 802a9a0:	d108      	bne.n	802a9b4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x4c>
 802a9a2:	4b50      	ldr	r3, [pc, #320]	; (802aae4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x17c>)
 802a9a4:	681b      	ldr	r3, [r3, #0]
 802a9a6:	461a      	mov	r2, r3
 802a9a8:	6839      	ldr	r1, [r7, #0]
 802a9aa:	6878      	ldr	r0, [r7, #4]
 802a9ac:	f7fe f9a6 	bl	8028cfc <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 802a9b0:	4603      	mov	r3, r0
 802a9b2:	e000      	b.n	802a9b6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x4e>
 802a9b4:	2300      	movs	r3, #0
          : nullptr;
 802a9b6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kConvOutputTensor);
 802a9ba:	4b4b      	ldr	r3, [pc, #300]	; (802aae8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x180>)
 802a9bc:	681b      	ldr	r3, [r3, #0]
 802a9be:	461a      	mov	r2, r3
 802a9c0:	6839      	ldr	r1, [r7, #0]
 802a9c2:	6878      	ldr	r0, [r7, #4]
 802a9c4:	f7fe f9aa 	bl	8028d1c <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 802a9c8:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

  TFLITE_DCHECK(node->builtin_data != nullptr);
 802a9cc:	683b      	ldr	r3, [r7, #0]
 802a9ce:	695b      	ldr	r3, [r3, #20]
 802a9d0:	2b00      	cmp	r3, #0
 802a9d2:	d101      	bne.n	802a9d8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x70>
 802a9d4:	f007 fb42 	bl	803205c <abort>
  const auto& params =
 802a9d8:	683b      	ldr	r3, [r7, #0]
 802a9da:	695b      	ldr	r3, [r3, #20]
 802a9dc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      *(reinterpret_cast<TfLiteConvParams*>(node->builtin_data));
  TFLITE_DCHECK(node->user_data != nullptr);
 802a9e0:	683b      	ldr	r3, [r7, #0]
 802a9e2:	691b      	ldr	r3, [r3, #16]
 802a9e4:	2b00      	cmp	r3, #0
 802a9e6:	d101      	bne.n	802a9ec <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x84>
 802a9e8:	f007 fb38 	bl	803205c <abort>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));
 802a9ec:	683b      	ldr	r3, [r7, #0]
 802a9ee:	691b      	ldr	r3, [r3, #16]
 802a9f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

  TF_LITE_ENSURE_EQ(context, input->type, output->type);
 802a9f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 802a9f8:	7a1a      	ldrb	r2, [r3, #8]
 802a9fa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 802a9fe:	7a1b      	ldrb	r3, [r3, #8]
 802aa00:	429a      	cmp	r2, r3
 802aa02:	d016      	beq.n	802aa32 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xca>
 802aa04:	687b      	ldr	r3, [r7, #4]
 802aa06:	695c      	ldr	r4, [r3, #20]
 802aa08:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 802aa0c:	7a1b      	ldrb	r3, [r3, #8]
 802aa0e:	461a      	mov	r2, r3
 802aa10:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 802aa14:	7a1b      	ldrb	r3, [r3, #8]
 802aa16:	9303      	str	r3, [sp, #12]
 802aa18:	9202      	str	r2, [sp, #8]
 802aa1a:	4b34      	ldr	r3, [pc, #208]	; (802aaec <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x184>)
 802aa1c:	9301      	str	r3, [sp, #4]
 802aa1e:	4b34      	ldr	r3, [pc, #208]	; (802aaf0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x188>)
 802aa20:	9300      	str	r3, [sp, #0]
 802aa22:	f44f 7386 	mov.w	r3, #268	; 0x10c
 802aa26:	4a33      	ldr	r2, [pc, #204]	; (802aaf4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x18c>)
 802aa28:	4933      	ldr	r1, [pc, #204]	; (802aaf8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x190>)
 802aa2a:	6878      	ldr	r0, [r7, #4]
 802aa2c:	47a0      	blx	r4
 802aa2e:	2301      	movs	r3, #1
 802aa30:	e04f      	b.n	802aad2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x16a>
  TF_LITE_ENSURE_MSG(context, input->type == filter->type,
 802aa32:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 802aa36:	7a1a      	ldrb	r2, [r3, #8]
 802aa38:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 802aa3c:	7a1b      	ldrb	r3, [r3, #8]
 802aa3e:	429a      	cmp	r2, r3
 802aa40:	d006      	beq.n	802aa50 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xe8>
 802aa42:	687b      	ldr	r3, [r7, #4]
 802aa44:	695b      	ldr	r3, [r3, #20]
 802aa46:	492d      	ldr	r1, [pc, #180]	; (802aafc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x194>)
 802aa48:	6878      	ldr	r0, [r7, #4]
 802aa4a:	4798      	blx	r3
 802aa4c:	2301      	movs	r3, #1
 802aa4e:	e040      	b.n	802aad2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x16a>
                     "Hybrid models are not supported on TFLite Micro.");

  switch (input->type) {  // Already know in/out types are same.
 802aa50:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 802aa54:	7a1b      	ldrb	r3, [r3, #8]
 802aa56:	2b01      	cmp	r3, #1
 802aa58:	d002      	beq.n	802aa60 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xf8>
 802aa5a:	2b09      	cmp	r3, #9
 802aa5c:	d011      	beq.n	802aa82 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x11a>
 802aa5e:	e028      	b.n	802aab2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x14a>
    case kTfLiteFloat32: {
      #if EI_TFLITE_DISABLE_CONV_2D_IN_F32
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 802aa60:	687b      	ldr	r3, [r7, #4]
 802aa62:	695c      	ldr	r4, [r3, #20]
 802aa64:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 802aa68:	7a1b      	ldrb	r3, [r3, #8]
 802aa6a:	4618      	mov	r0, r3
 802aa6c:	f7fc ff7a 	bl	8027964 <TfLiteTypeGetName>
 802aa70:	4602      	mov	r2, r0
 802aa72:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 802aa76:	7a1b      	ldrb	r3, [r3, #8]
 802aa78:	4921      	ldr	r1, [pc, #132]	; (802ab00 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x198>)
 802aa7a:	6878      	ldr	r0, [r7, #4]
 802aa7c:	47a0      	blx	r4
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 802aa7e:	2301      	movs	r3, #1
 802aa80:	e027      	b.n	802aad2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x16a>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
      #endif

      return EvalQuantizedPerChannel(context, node, params, data, input, filter,
 802aa82:	2300      	movs	r3, #0
 802aa84:	9304      	str	r3, [sp, #16]
 802aa86:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 802aa8a:	9303      	str	r3, [sp, #12]
 802aa8c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 802aa90:	9302      	str	r3, [sp, #8]
 802aa92:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 802aa96:	9301      	str	r3, [sp, #4]
 802aa98:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 802aa9c:	9300      	str	r3, [sp, #0]
 802aa9e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 802aaa2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 802aaa6:	6839      	ldr	r1, [r7, #0]
 802aaa8:	6878      	ldr	r0, [r7, #4]
 802aaaa:	f7ff fce3 	bl	802a474 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_>
 802aaae:	4603      	mov	r3, r0
                                     bias, output, nullptr);
 802aab0:	e00f      	b.n	802aad2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x16a>
      break;
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 802aab2:	687b      	ldr	r3, [r7, #4]
 802aab4:	695c      	ldr	r4, [r3, #20]
 802aab6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 802aaba:	7a1b      	ldrb	r3, [r3, #8]
 802aabc:	4618      	mov	r0, r3
 802aabe:	f7fc ff51 	bl	8027964 <TfLiteTypeGetName>
 802aac2:	4602      	mov	r2, r0
 802aac4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 802aac8:	7a1b      	ldrb	r3, [r3, #8]
 802aaca:	490d      	ldr	r1, [pc, #52]	; (802ab00 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x198>)
 802aacc:	6878      	ldr	r0, [r7, #4]
 802aace:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 802aad0:	2301      	movs	r3, #1
  }
  return kTfLiteOk;
}
 802aad2:	4618      	mov	r0, r3
 802aad4:	37d4      	adds	r7, #212	; 0xd4
 802aad6:	46bd      	mov	sp, r7
 802aad8:	bd90      	pop	{r4, r7, pc}
 802aada:	bf00      	nop
 802aadc:	08036c80 	.word	0x08036c80
 802aae0:	08036c84 	.word	0x08036c84
 802aae4:	08036c88 	.word	0x08036c88
 802aae8:	08036c8c 	.word	0x08036c8c
 802aaec:	08034cb8 	.word	0x08034cb8
 802aaf0:	08034cc8 	.word	0x08034cc8
 802aaf4:	08034bc0 	.word	0x08034bc0
 802aaf8:	08034c9c 	.word	0x08034c9c
 802aafc:	08034cd4 	.word	0x08034cd4
 802ab00:	08034d8c 	.word	0x08034d8c

0802ab04 <_ZN6tflite16Register_CONV_2DEv>:

}  // namespace

TfLiteRegistration Register_CONV_2D() {
 802ab04:	b4b0      	push	{r4, r5, r7}
 802ab06:	b083      	sub	sp, #12
 802ab08:	af00      	add	r7, sp, #0
 802ab0a:	6078      	str	r0, [r7, #4]
          /*prepare=*/Prepare,
          /*invoke=*/Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 802ab0c:	687b      	ldr	r3, [r7, #4]
 802ab0e:	4a07      	ldr	r2, [pc, #28]	; (802ab2c <_ZN6tflite16Register_CONV_2DEv+0x28>)
 802ab10:	461c      	mov	r4, r3
 802ab12:	4615      	mov	r5, r2
 802ab14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802ab16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802ab18:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 802ab1c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 802ab20:	6878      	ldr	r0, [r7, #4]
 802ab22:	370c      	adds	r7, #12
 802ab24:	46bd      	mov	sp, r7
 802ab26:	bcb0      	pop	{r4, r5, r7}
 802ab28:	4770      	bx	lr
 802ab2a:	bf00      	nop
 802ab2c:	08034da8 	.word	0x08034da8

0802ab30 <_ZN6tflite24ComputePaddingWithOffsetEiiiiiPi>:

// It's not guaranteed that padding is symmetric. It's important to keep
// offset for algorithms need all paddings.
inline int ComputePaddingWithOffset(int stride, int dilation_rate, int in_size,
                                    int filter_size, int out_size,
                                    int* offset) {
 802ab30:	b480      	push	{r7}
 802ab32:	b087      	sub	sp, #28
 802ab34:	af00      	add	r7, sp, #0
 802ab36:	60f8      	str	r0, [r7, #12]
 802ab38:	60b9      	str	r1, [r7, #8]
 802ab3a:	607a      	str	r2, [r7, #4]
 802ab3c:	603b      	str	r3, [r7, #0]
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
 802ab3e:	683b      	ldr	r3, [r7, #0]
 802ab40:	3b01      	subs	r3, #1
 802ab42:	68ba      	ldr	r2, [r7, #8]
 802ab44:	fb02 f303 	mul.w	r3, r2, r3
 802ab48:	3301      	adds	r3, #1
 802ab4a:	617b      	str	r3, [r7, #20]
  int total_padding =
      ((out_size - 1) * stride + effective_filter_size - in_size);
 802ab4c:	6a3b      	ldr	r3, [r7, #32]
 802ab4e:	3b01      	subs	r3, #1
 802ab50:	68fa      	ldr	r2, [r7, #12]
 802ab52:	fb03 f202 	mul.w	r2, r3, r2
 802ab56:	697b      	ldr	r3, [r7, #20]
 802ab58:	441a      	add	r2, r3
  int total_padding =
 802ab5a:	687b      	ldr	r3, [r7, #4]
 802ab5c:	1ad3      	subs	r3, r2, r3
 802ab5e:	613b      	str	r3, [r7, #16]
  total_padding = total_padding > 0 ? total_padding : 0;
 802ab60:	693b      	ldr	r3, [r7, #16]
 802ab62:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802ab66:	613b      	str	r3, [r7, #16]
  *offset = total_padding % 2;
 802ab68:	693b      	ldr	r3, [r7, #16]
 802ab6a:	2b00      	cmp	r3, #0
 802ab6c:	f003 0301 	and.w	r3, r3, #1
 802ab70:	bfb8      	it	lt
 802ab72:	425b      	neglt	r3, r3
 802ab74:	461a      	mov	r2, r3
 802ab76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802ab78:	601a      	str	r2, [r3, #0]
  return total_padding / 2;
 802ab7a:	693b      	ldr	r3, [r7, #16]
 802ab7c:	0fda      	lsrs	r2, r3, #31
 802ab7e:	4413      	add	r3, r2
 802ab80:	105b      	asrs	r3, r3, #1
}
 802ab82:	4618      	mov	r0, r3
 802ab84:	371c      	adds	r7, #28
 802ab86:	46bd      	mov	sp, r7
 802ab88:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ab8c:	4770      	bx	lr

0802ab8e <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>:

// Matching GetWindowedOutputSize in TensorFlow.
inline int ComputeOutSize(TfLitePadding padding, int image_size,
                          int filter_size, int stride, int dilation_rate = 1) {
 802ab8e:	b480      	push	{r7}
 802ab90:	b087      	sub	sp, #28
 802ab92:	af00      	add	r7, sp, #0
 802ab94:	60b9      	str	r1, [r7, #8]
 802ab96:	607a      	str	r2, [r7, #4]
 802ab98:	603b      	str	r3, [r7, #0]
 802ab9a:	4603      	mov	r3, r0
 802ab9c:	73fb      	strb	r3, [r7, #15]
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
 802ab9e:	687b      	ldr	r3, [r7, #4]
 802aba0:	3b01      	subs	r3, #1
 802aba2:	6a3a      	ldr	r2, [r7, #32]
 802aba4:	fb02 f303 	mul.w	r3, r2, r3
 802aba8:	3301      	adds	r3, #1
 802abaa:	617b      	str	r3, [r7, #20]

  // TODO(b/186448822): This uses 0 since the function has no other way to
  // report error case
  if (stride == 0) return 0;
 802abac:	683b      	ldr	r3, [r7, #0]
 802abae:	2b00      	cmp	r3, #0
 802abb0:	d101      	bne.n	802abb6 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x28>
 802abb2:	2300      	movs	r3, #0
 802abb4:	e017      	b.n	802abe6 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x58>

  switch (padding) {
 802abb6:	7bfb      	ldrb	r3, [r7, #15]
 802abb8:	2b01      	cmp	r3, #1
 802abba:	d002      	beq.n	802abc2 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x34>
 802abbc:	2b02      	cmp	r3, #2
 802abbe:	d008      	beq.n	802abd2 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x44>
 802abc0:	e010      	b.n	802abe4 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x56>
    case kTfLitePaddingSame:
      return (image_size + stride - 1) / stride;
 802abc2:	68ba      	ldr	r2, [r7, #8]
 802abc4:	683b      	ldr	r3, [r7, #0]
 802abc6:	4413      	add	r3, r2
 802abc8:	1e5a      	subs	r2, r3, #1
 802abca:	683b      	ldr	r3, [r7, #0]
 802abcc:	fb92 f3f3 	sdiv	r3, r2, r3
 802abd0:	e009      	b.n	802abe6 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x58>
    case kTfLitePaddingValid:
      return (image_size + stride - effective_filter_size) / stride;
 802abd2:	68ba      	ldr	r2, [r7, #8]
 802abd4:	683b      	ldr	r3, [r7, #0]
 802abd6:	441a      	add	r2, r3
 802abd8:	697b      	ldr	r3, [r7, #20]
 802abda:	1ad2      	subs	r2, r2, r3
 802abdc:	683b      	ldr	r3, [r7, #0]
 802abde:	fb92 f3f3 	sdiv	r3, r2, r3
 802abe2:	e000      	b.n	802abe6 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x58>
    default:
      return 0;
 802abe4:	2300      	movs	r3, #0
  }
}
 802abe6:	4618      	mov	r0, r3
 802abe8:	371c      	adds	r7, #28
 802abea:	46bd      	mov	sp, r7
 802abec:	f85d 7b04 	ldr.w	r7, [sp], #4
 802abf0:	4770      	bx	lr

0802abf2 <_ZN6tflite25ComputePaddingHeightWidthEiiiiiiii13TfLitePaddingPiS1_>:

inline TfLitePaddingValues ComputePaddingHeightWidth(
    int stride_height, int stride_width, int dilation_rate_height,
    int dilation_rate_width, int in_height, int in_width, int filter_height,
    int filter_width, TfLitePadding padding, int* out_height, int* out_width) {
 802abf2:	b580      	push	{r7, lr}
 802abf4:	b088      	sub	sp, #32
 802abf6:	af02      	add	r7, sp, #8
 802abf8:	60f8      	str	r0, [r7, #12]
 802abfa:	60b9      	str	r1, [r7, #8]
 802abfc:	607a      	str	r2, [r7, #4]
 802abfe:	603b      	str	r3, [r7, #0]
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
 802ac00:	f897 0034 	ldrb.w	r0, [r7, #52]	; 0x34
 802ac04:	6a3b      	ldr	r3, [r7, #32]
 802ac06:	9300      	str	r3, [sp, #0]
 802ac08:	687b      	ldr	r3, [r7, #4]
 802ac0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802ac0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 802ac0e:	f7ff ffbe 	bl	802ab8e <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
 802ac12:	4602      	mov	r2, r0
 802ac14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802ac16:	601a      	str	r2, [r3, #0]
                              dilation_rate_width);
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
 802ac18:	f897 0034 	ldrb.w	r0, [r7, #52]	; 0x34
 802ac1c:	683b      	ldr	r3, [r7, #0]
 802ac1e:	9300      	str	r3, [sp, #0]
 802ac20:	68bb      	ldr	r3, [r7, #8]
 802ac22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802ac24:	6a79      	ldr	r1, [r7, #36]	; 0x24
 802ac26:	f7ff ffb2 	bl	802ab8e <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
 802ac2a:	4602      	mov	r2, r0
 802ac2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802ac2e:	601a      	str	r2, [r3, #0]
                               dilation_rate_height);

  TfLitePaddingValues padding_values;
  int offset = 0;
 802ac30:	2300      	movs	r3, #0
 802ac32:	617b      	str	r3, [r7, #20]
  padding_values.height =
      ComputePaddingWithOffset(stride_height, dilation_rate_height, in_height,
 802ac34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802ac36:	681b      	ldr	r3, [r3, #0]
 802ac38:	f107 0214 	add.w	r2, r7, #20
 802ac3c:	9201      	str	r2, [sp, #4]
 802ac3e:	9300      	str	r3, [sp, #0]
 802ac40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802ac42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802ac44:	6839      	ldr	r1, [r7, #0]
 802ac46:	68b8      	ldr	r0, [r7, #8]
 802ac48:	f7ff ff72 	bl	802ab30 <_ZN6tflite24ComputePaddingWithOffsetEiiiiiPi>
 802ac4c:	4602      	mov	r2, r0
  padding_values.height =
 802ac4e:	68fb      	ldr	r3, [r7, #12]
 802ac50:	605a      	str	r2, [r3, #4]
                               filter_height, *out_height, &offset);
  padding_values.height_offset = offset;
 802ac52:	697a      	ldr	r2, [r7, #20]
 802ac54:	68fb      	ldr	r3, [r7, #12]
 802ac56:	60da      	str	r2, [r3, #12]
  padding_values.width =
      ComputePaddingWithOffset(stride_width, dilation_rate_width, in_width,
 802ac58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802ac5a:	681b      	ldr	r3, [r3, #0]
 802ac5c:	f107 0214 	add.w	r2, r7, #20
 802ac60:	9201      	str	r2, [sp, #4]
 802ac62:	9300      	str	r3, [sp, #0]
 802ac64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802ac66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802ac68:	6a39      	ldr	r1, [r7, #32]
 802ac6a:	6878      	ldr	r0, [r7, #4]
 802ac6c:	f7ff ff60 	bl	802ab30 <_ZN6tflite24ComputePaddingWithOffsetEiiiiiPi>
 802ac70:	4602      	mov	r2, r0
  padding_values.width =
 802ac72:	68fb      	ldr	r3, [r7, #12]
 802ac74:	601a      	str	r2, [r3, #0]
                               filter_width, *out_width, &offset);
  padding_values.width_offset = offset;
 802ac76:	697a      	ldr	r2, [r7, #20]
 802ac78:	68fb      	ldr	r3, [r7, #12]
 802ac7a:	609a      	str	r2, [r3, #8]
  return padding_values;
 802ac7c:	bf00      	nop
}
 802ac7e:	68f8      	ldr	r0, [r7, #12]
 802ac80:	3718      	adds	r7, #24
 802ac82:	46bd      	mov	sp, r7
 802ac84:	bd80      	pop	{r7, pc}

0802ac86 <_ZN6tflite19ConvParamsQuantizedERK16TfLiteConvParamsRKNS_10OpDataConvE>:
}

// Returns a ConvParams struct with all the parameters needed for a
// quantized computation.
ConvParams ConvParamsQuantized(const TfLiteConvParams& params,
                               const OpDataConv& data) {
 802ac86:	b580      	push	{r7, lr}
 802ac88:	b084      	sub	sp, #16
 802ac8a:	af00      	add	r7, sp, #0
 802ac8c:	60f8      	str	r0, [r7, #12]
 802ac8e:	60b9      	str	r1, [r7, #8]
 802ac90:	607a      	str	r2, [r7, #4]
  ConvParams op_params;
  op_params.input_offset = -data.input_zero_point;
 802ac92:	687b      	ldr	r3, [r7, #4]
 802ac94:	691b      	ldr	r3, [r3, #16]
 802ac96:	425a      	negs	r2, r3
 802ac98:	68fb      	ldr	r3, [r7, #12]
 802ac9a:	615a      	str	r2, [r3, #20]
  op_params.weights_offset = -data.filter_zero_point;
 802ac9c:	687b      	ldr	r3, [r7, #4]
 802ac9e:	695b      	ldr	r3, [r3, #20]
 802aca0:	425a      	negs	r2, r3
 802aca2:	68fb      	ldr	r3, [r7, #12]
 802aca4:	619a      	str	r2, [r3, #24]
  op_params.output_offset = data.output_zero_point;
 802aca6:	687b      	ldr	r3, [r7, #4]
 802aca8:	699a      	ldr	r2, [r3, #24]
 802acaa:	68fb      	ldr	r3, [r7, #12]
 802acac:	61da      	str	r2, [r3, #28]
  op_params.output_multiplier = data.output_multiplier;
 802acae:	687b      	ldr	r3, [r7, #4]
 802acb0:	69da      	ldr	r2, [r3, #28]
 802acb2:	68fb      	ldr	r3, [r7, #12]
 802acb4:	621a      	str	r2, [r3, #32]
  op_params.output_shift = -data.output_shift;
 802acb6:	687b      	ldr	r3, [r7, #4]
 802acb8:	6a1b      	ldr	r3, [r3, #32]
 802acba:	425a      	negs	r2, r3
 802acbc:	68fb      	ldr	r3, [r7, #12]
 802acbe:	625a      	str	r2, [r3, #36]	; 0x24
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
 802acc0:	68bb      	ldr	r3, [r7, #8]
 802acc2:	781b      	ldrb	r3, [r3, #0]
 802acc4:	4618      	mov	r0, r3
 802acc6:	f001 f909 	bl	802bedc <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>
 802acca:	4603      	mov	r3, r0
 802accc:	461a      	mov	r2, r3
 802acce:	68fb      	ldr	r3, [r7, #12]
 802acd0:	701a      	strb	r2, [r3, #0]
  op_params.padding_values.height = data.padding.height;
 802acd2:	687b      	ldr	r3, [r7, #4]
 802acd4:	685b      	ldr	r3, [r3, #4]
 802acd6:	b21a      	sxth	r2, r3
 802acd8:	68fb      	ldr	r3, [r7, #12]
 802acda:	809a      	strh	r2, [r3, #4]
  op_params.padding_values.width = data.padding.width;
 802acdc:	687b      	ldr	r3, [r7, #4]
 802acde:	681b      	ldr	r3, [r3, #0]
 802ace0:	b21a      	sxth	r2, r3
 802ace2:	68fb      	ldr	r3, [r7, #12]
 802ace4:	805a      	strh	r2, [r3, #2]
  op_params.stride_height = params.stride_height;
 802ace6:	68bb      	ldr	r3, [r7, #8]
 802ace8:	689b      	ldr	r3, [r3, #8]
 802acea:	b21a      	sxth	r2, r3
 802acec:	68fb      	ldr	r3, [r7, #12]
 802acee:	819a      	strh	r2, [r3, #12]
  op_params.stride_width = params.stride_width;
 802acf0:	68bb      	ldr	r3, [r7, #8]
 802acf2:	685b      	ldr	r3, [r3, #4]
 802acf4:	b21a      	sxth	r2, r3
 802acf6:	68fb      	ldr	r3, [r7, #12]
 802acf8:	815a      	strh	r2, [r3, #10]
  op_params.dilation_height_factor = params.dilation_height_factor;
 802acfa:	68bb      	ldr	r3, [r7, #8]
 802acfc:	695b      	ldr	r3, [r3, #20]
 802acfe:	b21a      	sxth	r2, r3
 802ad00:	68fb      	ldr	r3, [r7, #12]
 802ad02:	821a      	strh	r2, [r3, #16]
  op_params.dilation_width_factor = params.dilation_width_factor;
 802ad04:	68bb      	ldr	r3, [r7, #8]
 802ad06:	691b      	ldr	r3, [r3, #16]
 802ad08:	b21a      	sxth	r2, r3
 802ad0a:	68fb      	ldr	r3, [r7, #12]
 802ad0c:	81da      	strh	r2, [r3, #14]
  op_params.quantized_activation_min = data.output_activation_min;
 802ad0e:	687b      	ldr	r3, [r7, #4]
 802ad10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802ad12:	68fb      	ldr	r3, [r7, #12]
 802ad14:	629a      	str	r2, [r3, #40]	; 0x28
  op_params.quantized_activation_max = data.output_activation_max;
 802ad16:	687b      	ldr	r3, [r7, #4]
 802ad18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 802ad1a:	68fb      	ldr	r3, [r7, #12]
 802ad1c:	62da      	str	r2, [r3, #44]	; 0x2c
  return op_params;
 802ad1e:	bf00      	nop
}
 802ad20:	68f8      	ldr	r0, [r7, #12]
 802ad22:	3710      	adds	r7, #16
 802ad24:	46bd      	mov	sp, r7
 802ad26:	bd80      	pop	{r7, pc}

0802ad28 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>:
TfLiteStatus CalculateOpDataConv(TfLiteContext* context, TfLiteNode* node,
                                 const TfLiteConvParams& params, int width,
                                 int height, int filter_width,
                                 int filter_height, int out_width,
                                 int out_height, const TfLiteType data_type,
                                 OpDataConv* data) {
 802ad28:	b5f0      	push	{r4, r5, r6, r7, lr}
 802ad2a:	b09d      	sub	sp, #116	; 0x74
 802ad2c:	af0a      	add	r7, sp, #40	; 0x28
 802ad2e:	6278      	str	r0, [r7, #36]	; 0x24
 802ad30:	6239      	str	r1, [r7, #32]
 802ad32:	61fa      	str	r2, [r7, #28]
 802ad34:	61bb      	str	r3, [r7, #24]
  bool has_bias = node->inputs->size == 3;
 802ad36:	6a3b      	ldr	r3, [r7, #32]
 802ad38:	681b      	ldr	r3, [r3, #0]
 802ad3a:	681b      	ldr	r3, [r3, #0]
 802ad3c:	2b03      	cmp	r3, #3
 802ad3e:	bf0c      	ite	eq
 802ad40:	2301      	moveq	r3, #1
 802ad42:	2300      	movne	r3, #0
 802ad44:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  // Check number of inputs/outputs
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
 802ad48:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 802ad4c:	f083 0301 	eor.w	r3, r3, #1
 802ad50:	b2db      	uxtb	r3, r3
 802ad52:	2b00      	cmp	r3, #0
 802ad54:	d00f      	beq.n	802ad76 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
 802ad56:	6a3b      	ldr	r3, [r7, #32]
 802ad58:	681b      	ldr	r3, [r3, #0]
 802ad5a:	681b      	ldr	r3, [r3, #0]
 802ad5c:	2b02      	cmp	r3, #2
 802ad5e:	d00a      	beq.n	802ad76 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
 802ad60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802ad62:	695c      	ldr	r4, [r3, #20]
 802ad64:	4b68      	ldr	r3, [pc, #416]	; (802af08 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e0>)
 802ad66:	9300      	str	r3, [sp, #0]
 802ad68:	2356      	movs	r3, #86	; 0x56
 802ad6a:	4a68      	ldr	r2, [pc, #416]	; (802af0c <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e4>)
 802ad6c:	4968      	ldr	r1, [pc, #416]	; (802af10 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e8>)
 802ad6e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802ad70:	47a0      	blx	r4
 802ad72:	2301      	movs	r3, #1
 802ad74:	e0c4      	b.n	802af00 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1d8>
  TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);
 802ad76:	6a3b      	ldr	r3, [r7, #32]
 802ad78:	685b      	ldr	r3, [r3, #4]
 802ad7a:	681b      	ldr	r3, [r3, #0]
 802ad7c:	2b01      	cmp	r3, #1
 802ad7e:	d012      	beq.n	802ada6 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x7e>
 802ad80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802ad82:	695c      	ldr	r4, [r3, #20]
 802ad84:	6a3b      	ldr	r3, [r7, #32]
 802ad86:	685b      	ldr	r3, [r3, #4]
 802ad88:	681b      	ldr	r3, [r3, #0]
 802ad8a:	2201      	movs	r2, #1
 802ad8c:	9203      	str	r2, [sp, #12]
 802ad8e:	9302      	str	r3, [sp, #8]
 802ad90:	4b60      	ldr	r3, [pc, #384]	; (802af14 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1ec>)
 802ad92:	9301      	str	r3, [sp, #4]
 802ad94:	4b60      	ldr	r3, [pc, #384]	; (802af18 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f0>)
 802ad96:	9300      	str	r3, [sp, #0]
 802ad98:	2357      	movs	r3, #87	; 0x57
 802ad9a:	4a5c      	ldr	r2, [pc, #368]	; (802af0c <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e4>)
 802ad9c:	495f      	ldr	r1, [pc, #380]	; (802af1c <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f4>)
 802ad9e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802ada0:	47a0      	blx	r4
 802ada2:	2301      	movs	r3, #1
 802ada4:	e0ac      	b.n	802af00 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1d8>

  // Matching GetWindowedOutputSize in TensorFlow.
  auto padding = params.padding;
 802ada6:	69fb      	ldr	r3, [r7, #28]
 802ada8:	781b      	ldrb	r3, [r3, #0]
 802adaa:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  data->padding = ComputePaddingHeightWidth(
      params.stride_height, params.stride_width, params.dilation_height_factor,
 802adae:	69fb      	ldr	r3, [r7, #28]
 802adb0:	6899      	ldr	r1, [r3, #8]
 802adb2:	69fb      	ldr	r3, [r7, #28]
 802adb4:	685c      	ldr	r4, [r3, #4]
 802adb6:	69fb      	ldr	r3, [r7, #28]
 802adb8:	695d      	ldr	r5, [r3, #20]
      params.dilation_width_factor, height, width, filter_height, filter_width,
 802adba:	69fb      	ldr	r3, [r7, #28]
 802adbc:	691b      	ldr	r3, [r3, #16]
      padding, &out_height, &out_width);
 802adbe:	6fbe      	ldr	r6, [r7, #120]	; 0x78
 802adc0:	f107 0008 	add.w	r0, r7, #8
 802adc4:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 802adc8:	9207      	str	r2, [sp, #28]
 802adca:	f107 0270 	add.w	r2, r7, #112	; 0x70
 802adce:	9206      	str	r2, [sp, #24]
 802add0:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 802add4:	9205      	str	r2, [sp, #20]
 802add6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 802add8:	9204      	str	r2, [sp, #16]
 802adda:	6eba      	ldr	r2, [r7, #104]	; 0x68
 802addc:	9203      	str	r2, [sp, #12]
 802adde:	69ba      	ldr	r2, [r7, #24]
 802ade0:	9202      	str	r2, [sp, #8]
 802ade2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 802ade4:	9201      	str	r2, [sp, #4]
 802ade6:	9300      	str	r3, [sp, #0]
 802ade8:	462b      	mov	r3, r5
 802adea:	4622      	mov	r2, r4
 802adec:	f7ff ff01 	bl	802abf2 <_ZN6tflite25ComputePaddingHeightWidthEiiiiiiii13TfLitePaddingPiS1_>
 802adf0:	4634      	mov	r4, r6
 802adf2:	f107 0308 	add.w	r3, r7, #8
 802adf6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 802adf8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  const TfLiteTensor* input = GetInput(context, node, kConvInputTensor);
 802adfc:	2200      	movs	r2, #0
 802adfe:	6a39      	ldr	r1, [r7, #32]
 802ae00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802ae02:	f7fd f8f5 	bl	8027ff0 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 802ae06:	6438      	str	r0, [r7, #64]	; 0x40
  TF_LITE_ENSURE(context, input != nullptr);
 802ae08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802ae0a:	2b00      	cmp	r3, #0
 802ae0c:	d10a      	bne.n	802ae24 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xfc>
 802ae0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802ae10:	695c      	ldr	r4, [r3, #20]
 802ae12:	4b43      	ldr	r3, [pc, #268]	; (802af20 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f8>)
 802ae14:	9300      	str	r3, [sp, #0]
 802ae16:	2361      	movs	r3, #97	; 0x61
 802ae18:	4a3c      	ldr	r2, [pc, #240]	; (802af0c <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e4>)
 802ae1a:	493d      	ldr	r1, [pc, #244]	; (802af10 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e8>)
 802ae1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802ae1e:	47a0      	blx	r4
 802ae20:	2301      	movs	r3, #1
 802ae22:	e06d      	b.n	802af00 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1d8>
  const TfLiteTensor* filter = GetInput(context, node, kConvWeightsTensor);
 802ae24:	2201      	movs	r2, #1
 802ae26:	6a39      	ldr	r1, [r7, #32]
 802ae28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802ae2a:	f7fd f8e1 	bl	8027ff0 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 802ae2e:	63f8      	str	r0, [r7, #60]	; 0x3c
  TF_LITE_ENSURE(context, filter != nullptr);
 802ae30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802ae32:	2b00      	cmp	r3, #0
 802ae34:	d10a      	bne.n	802ae4c <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x124>
 802ae36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802ae38:	695c      	ldr	r4, [r3, #20]
 802ae3a:	4b3a      	ldr	r3, [pc, #232]	; (802af24 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1fc>)
 802ae3c:	9300      	str	r3, [sp, #0]
 802ae3e:	2363      	movs	r3, #99	; 0x63
 802ae40:	4a32      	ldr	r2, [pc, #200]	; (802af0c <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e4>)
 802ae42:	4933      	ldr	r1, [pc, #204]	; (802af10 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e8>)
 802ae44:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802ae46:	47a0      	blx	r4
 802ae48:	2301      	movs	r3, #1
 802ae4a:	e059      	b.n	802af00 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1d8>
  const TfLiteTensor* bias =
      GetOptionalInputTensor(context, node, kConvBiasTensor);
 802ae4c:	2202      	movs	r2, #2
 802ae4e:	6a39      	ldr	r1, [r7, #32]
 802ae50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802ae52:	f7fd f8fd 	bl	8028050 <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>
 802ae56:	63b8      	str	r0, [r7, #56]	; 0x38
  TfLiteTensor* output = GetOutput(context, node, kConvOutputTensor);
 802ae58:	2200      	movs	r2, #0
 802ae5a:	6a39      	ldr	r1, [r7, #32]
 802ae5c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802ae5e:	f7fd f8d7 	bl	8028010 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 802ae62:	6378      	str	r0, [r7, #52]	; 0x34
  TF_LITE_ENSURE(context, output != nullptr);
 802ae64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802ae66:	2b00      	cmp	r3, #0
 802ae68:	d10a      	bne.n	802ae80 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x158>
 802ae6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802ae6c:	695c      	ldr	r4, [r3, #20]
 802ae6e:	4b2e      	ldr	r3, [pc, #184]	; (802af28 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x200>)
 802ae70:	9300      	str	r3, [sp, #0]
 802ae72:	2367      	movs	r3, #103	; 0x67
 802ae74:	4a25      	ldr	r2, [pc, #148]	; (802af0c <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e4>)
 802ae76:	4926      	ldr	r1, [pc, #152]	; (802af10 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e8>)
 802ae78:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802ae7a:	47a0      	blx	r4
 802ae7c:	2301      	movs	r3, #1
 802ae7e:	e03f      	b.n	802af00 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1d8>

  // Note that quantized inference requires that all tensors have their
  // parameters set. This is usually done during quantized training.
  if (data_type != kTfLiteFloat32) {
 802ae80:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 802ae84:	2b01      	cmp	r3, #1
 802ae86:	d02e      	beq.n	802aee6 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1be>
    int output_channels = filter->dims->data[kConvQuantizedDimension];
 802ae88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802ae8a:	689b      	ldr	r3, [r3, #8]
 802ae8c:	685b      	ldr	r3, [r3, #4]
 802ae8e:	633b      	str	r3, [r7, #48]	; 0x30

    TF_LITE_ENSURE_STATUS(tflite::PopulateConvolutionQuantizationParams(
 802ae90:	69fb      	ldr	r3, [r7, #28]
 802ae92:	330c      	adds	r3, #12
 802ae94:	607b      	str	r3, [r7, #4]
 802ae96:	6fba      	ldr	r2, [r7, #120]	; 0x78
 802ae98:	321c      	adds	r2, #28
 802ae9a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 802ae9c:	3120      	adds	r1, #32
 802ae9e:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 802aea0:	302c      	adds	r0, #44	; 0x2c
 802aea2:	6fbc      	ldr	r4, [r7, #120]	; 0x78
 802aea4:	3430      	adds	r4, #48	; 0x30
 802aea6:	6fbd      	ldr	r5, [r7, #120]	; 0x78
 802aea8:	6a6d      	ldr	r5, [r5, #36]	; 0x24
 802aeaa:	6fbe      	ldr	r6, [r7, #120]	; 0x78
 802aeac:	6ab6      	ldr	r6, [r6, #40]	; 0x28
 802aeae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802aeb0:	9308      	str	r3, [sp, #32]
 802aeb2:	9607      	str	r6, [sp, #28]
 802aeb4:	9506      	str	r5, [sp, #24]
 802aeb6:	9405      	str	r4, [sp, #20]
 802aeb8:	9004      	str	r0, [sp, #16]
 802aeba:	9103      	str	r1, [sp, #12]
 802aebc:	9202      	str	r2, [sp, #8]
 802aebe:	687b      	ldr	r3, [r7, #4]
 802aec0:	9301      	str	r3, [sp, #4]
 802aec2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802aec4:	9300      	str	r3, [sp, #0]
 802aec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802aec8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 802aeca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 802aecc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802aece:	f7fd f8cf 	bl	8028070 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i>
 802aed2:	4603      	mov	r3, r0
 802aed4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 802aed8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802aedc:	2b00      	cmp	r3, #0
 802aede:	d002      	beq.n	802aee6 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1be>
 802aee0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802aee4:	e00c      	b.n	802af00 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1d8>
        data->per_channel_output_multiplier,
        reinterpret_cast<int*>(data->per_channel_output_shift),
        output_channels));
  }

  data->input_zero_point = input->params.zero_point;
 802aee6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802aee8:	691a      	ldr	r2, [r3, #16]
 802aeea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 802aeec:	611a      	str	r2, [r3, #16]
  data->filter_zero_point = filter->params.zero_point;
 802aeee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802aef0:	691a      	ldr	r2, [r3, #16]
 802aef2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 802aef4:	615a      	str	r2, [r3, #20]
  data->output_zero_point = output->params.zero_point;
 802aef6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802aef8:	691a      	ldr	r2, [r3, #16]
 802aefa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 802aefc:	619a      	str	r2, [r3, #24]

  return kTfLiteOk;
 802aefe:	2300      	movs	r3, #0
}
 802af00:	4618      	mov	r0, r3
 802af02:	374c      	adds	r7, #76	; 0x4c
 802af04:	46bd      	mov	sp, r7
 802af06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802af08:	08034f74 	.word	0x08034f74
 802af0c:	08034ed0 	.word	0x08034ed0
 802af10:	08034f5c 	.word	0x08034f5c
 802af14:	08034fb4 	.word	0x08034fb4
 802af18:	08034fb8 	.word	0x08034fb8
 802af1c:	08034f98 	.word	0x08034f98
 802af20:	08034fcc 	.word	0x08034fcc
 802af24:	08034fe0 	.word	0x08034fe0
 802af28:	08034ff4 	.word	0x08034ff4

0802af2c <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 802af2c:	b580      	push	{r7, lr}
 802af2e:	b082      	sub	sp, #8
 802af30:	af00      	add	r7, sp, #0
 802af32:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 802af34:	687b      	ldr	r3, [r7, #4]
 802af36:	2b00      	cmp	r3, #0
 802af38:	d101      	bne.n	802af3e <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor+0x12>
 802af3a:	f007 f88f 	bl	803205c <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 802af3e:	687b      	ldr	r3, [r7, #4]
 802af40:	681b      	ldr	r3, [r3, #0]
}
 802af42:	4618      	mov	r0, r3
 802af44:	3708      	adds	r7, #8
 802af46:	46bd      	mov	sp, r7
 802af48:	bd80      	pop	{r7, pc}

0802af4a <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_>:
inline std::int32_t RoundingHalfSum(std::int32_t a, std::int32_t b) {
 802af4a:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 802af4e:	b090      	sub	sp, #64	; 0x40
 802af50:	af00      	add	r7, sp, #0
 802af52:	61f8      	str	r0, [r7, #28]
 802af54:	61b9      	str	r1, [r7, #24]
  std::int64_t a64 = a;
 802af56:	69fb      	ldr	r3, [r7, #28]
 802af58:	17da      	asrs	r2, r3, #31
 802af5a:	613b      	str	r3, [r7, #16]
 802af5c:	617a      	str	r2, [r7, #20]
 802af5e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 802af62:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  std::int64_t b64 = b;
 802af66:	69bb      	ldr	r3, [r7, #24]
 802af68:	17da      	asrs	r2, r3, #31
 802af6a:	60bb      	str	r3, [r7, #8]
 802af6c:	60fa      	str	r2, [r7, #12]
 802af6e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 802af72:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  std::int64_t sum = a64 + b64;
 802af76:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 802af7a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 802af7e:	1886      	adds	r6, r0, r2
 802af80:	603e      	str	r6, [r7, #0]
 802af82:	eb41 0303 	adc.w	r3, r1, r3
 802af86:	607b      	str	r3, [r7, #4]
 802af88:	e9d7 2300 	ldrd	r2, r3, [r7]
 802af8c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  std::int64_t sign = sum >= 0 ? 1 : -1;
 802af90:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 802af94:	2b00      	cmp	r3, #0
 802af96:	db04      	blt.n	802afa2 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_+0x58>
 802af98:	f04f 0201 	mov.w	r2, #1
 802af9c:	f04f 0300 	mov.w	r3, #0
 802afa0:	e003      	b.n	802afaa <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_+0x60>
 802afa2:	f04f 32ff 	mov.w	r2, #4294967295
 802afa6:	f04f 33ff 	mov.w	r3, #4294967295
 802afaa:	e9c7 2308 	strd	r2, r3, [r7, #32]
  return static_cast<std::int32_t>((sum + sign) / 2);
 802afae:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 802afb2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 802afb6:	eb10 0802 	adds.w	r8, r0, r2
 802afba:	eb41 0903 	adc.w	r9, r1, r3
 802afbe:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 802afc2:	2200      	movs	r2, #0
 802afc4:	469a      	mov	sl, r3
 802afc6:	4693      	mov	fp, r2
 802afc8:	eb1a 0408 	adds.w	r4, sl, r8
 802afcc:	eb4b 0509 	adc.w	r5, fp, r9
 802afd0:	f04f 0200 	mov.w	r2, #0
 802afd4:	f04f 0300 	mov.w	r3, #0
 802afd8:	0862      	lsrs	r2, r4, #1
 802afda:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 802afde:	106b      	asrs	r3, r5, #1
 802afe0:	4613      	mov	r3, r2
}
 802afe2:	4618      	mov	r0, r3
 802afe4:	3740      	adds	r7, #64	; 0x40
 802afe6:	46bd      	mov	sp, r7
 802afe8:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 802afec:	4770      	bx	lr

0802afee <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>:
    int32_t x, int32_t quantized_multiplier, int left_shift) {
 802afee:	b580      	push	{r7, lr}
 802aff0:	b084      	sub	sp, #16
 802aff2:	af00      	add	r7, sp, #0
 802aff4:	60f8      	str	r0, [r7, #12]
 802aff6:	60b9      	str	r1, [r7, #8]
 802aff8:	607a      	str	r2, [r7, #4]
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
 802affa:	68fa      	ldr	r2, [r7, #12]
 802affc:	687b      	ldr	r3, [r7, #4]
 802affe:	fa02 f303 	lsl.w	r3, r2, r3
 802b002:	68b9      	ldr	r1, [r7, #8]
 802b004:	4618      	mov	r0, r3
 802b006:	f7fd fd2f 	bl	8028a68 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 802b00a:	4603      	mov	r3, r0
}
 802b00c:	4618      	mov	r0, r3
 802b00e:	3710      	adds	r7, #16
 802b010:	46bd      	mov	sp, r7
 802b012:	bd80      	pop	{r7, pc}

0802b014 <_ZN6tflite13GetReciprocalEliPi>:
                                                     InputIntegerBits>(
      input_val);
}

inline int32_t GetReciprocal(int32_t x, int x_integer_digits,
                             int* num_bits_over_unit) {
 802b014:	b580      	push	{r7, lr}
 802b016:	b088      	sub	sp, #32
 802b018:	af00      	add	r7, sp, #0
 802b01a:	60f8      	str	r0, [r7, #12]
 802b01c:	60b9      	str	r1, [r7, #8]
 802b01e:	607a      	str	r2, [r7, #4]
  int headroom_plus_one = CountLeadingZeros(static_cast<uint32_t>(x));
 802b020:	68fb      	ldr	r3, [r7, #12]
 802b022:	4618      	mov	r0, r3
 802b024:	f000 f821 	bl	802b06a <_ZN6tflite17CountLeadingZerosImEEiT_>
 802b028:	61f8      	str	r0, [r7, #28]
  // This is the number of bits to the left of the binary point above 1.0.
  // Consider x=1.25.  In that case shifted_scale=0.8 and
  // no later adjustment will be needed.
  *num_bits_over_unit = x_integer_digits - headroom_plus_one;
 802b02a:	68ba      	ldr	r2, [r7, #8]
 802b02c:	69fb      	ldr	r3, [r7, #28]
 802b02e:	1ad2      	subs	r2, r2, r3
 802b030:	687b      	ldr	r3, [r7, #4]
 802b032:	601a      	str	r2, [r3, #0]
  const int32_t shifted_sum_minus_one =
      static_cast<int32_t>((static_cast<uint32_t>(x) << headroom_plus_one) -
 802b034:	68fa      	ldr	r2, [r7, #12]
 802b036:	69fb      	ldr	r3, [r7, #28]
 802b038:	fa02 f303 	lsl.w	r3, r2, r3
 802b03c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  const int32_t shifted_sum_minus_one =
 802b040:	61bb      	str	r3, [r7, #24]
                           (static_cast<uint32_t>(1) << 31));

  gemmlowp::FixedPoint<int32_t, 0> shifted_scale =
      gemmlowp::one_over_one_plus_x_for_x_in_0_1(
          gemmlowp::FixedPoint<int32_t, 0>::FromRaw(shifted_sum_minus_one));
 802b042:	69b8      	ldr	r0, [r7, #24]
 802b044:	f000 f823 	bl	802b08e <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 802b048:	4603      	mov	r3, r0
 802b04a:	4618      	mov	r0, r3
 802b04c:	f000 f830 	bl	802b0b0 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_>
 802b050:	4603      	mov	r3, r0
 802b052:	617b      	str	r3, [r7, #20]
  return shifted_scale.raw();
 802b054:	f107 0314 	add.w	r3, r7, #20
 802b058:	4618      	mov	r0, r3
 802b05a:	f000 f889 	bl	802b170 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 802b05e:	4603      	mov	r3, r0
 802b060:	681b      	ldr	r3, [r3, #0]
}
 802b062:	4618      	mov	r0, r3
 802b064:	3720      	adds	r7, #32
 802b066:	46bd      	mov	sp, r7
 802b068:	bd80      	pop	{r7, pc}

0802b06a <_ZN6tflite17CountLeadingZerosImEEiT_>:
int CountLeadingZeros(T integer_input) {
 802b06a:	b480      	push	{r7}
 802b06c:	b083      	sub	sp, #12
 802b06e:	af00      	add	r7, sp, #0
 802b070:	6078      	str	r0, [r7, #4]
  return integer_input ? __builtin_clz(integer_input)
 802b072:	687b      	ldr	r3, [r7, #4]
 802b074:	2b00      	cmp	r3, #0
 802b076:	d003      	beq.n	802b080 <_ZN6tflite17CountLeadingZerosImEEiT_+0x16>
 802b078:	687b      	ldr	r3, [r7, #4]
 802b07a:	fab3 f383 	clz	r3, r3
                       : std::numeric_limits<T>::digits;
 802b07e:	e000      	b.n	802b082 <_ZN6tflite17CountLeadingZerosImEEiT_+0x18>
  return integer_input ? __builtin_clz(integer_input)
 802b080:	2320      	movs	r3, #32
}
 802b082:	4618      	mov	r0, r3
 802b084:	370c      	adds	r7, #12
 802b086:	46bd      	mov	sp, r7
 802b088:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b08c:	4770      	bx	lr

0802b08e <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>:

  static const ScalarRawType RawMax() {
    return VectorFromScalar(ScalarRawMax());
  }

  static FixedPoint FromRaw(RawType x) {
 802b08e:	b580      	push	{r7, lr}
 802b090:	b084      	sub	sp, #16
 802b092:	af00      	add	r7, sp, #0
 802b094:	6078      	str	r0, [r7, #4]
    FixedPoint retval;
    retval.raw() = x;
 802b096:	f107 030c 	add.w	r3, r7, #12
 802b09a:	4618      	mov	r0, r3
 802b09c:	f000 f868 	bl	802b170 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 802b0a0:	4602      	mov	r2, r0
 802b0a2:	687b      	ldr	r3, [r7, #4]
 802b0a4:	6013      	str	r3, [r2, #0]
    return retval;
 802b0a6:	68fb      	ldr	r3, [r7, #12]
  }
 802b0a8:	4618      	mov	r0, r3
 802b0aa:	3710      	adds	r7, #16
 802b0ac:	46bd      	mov	sp, r7
 802b0ae:	bd80      	pop	{r7, pc}

0802b0b0 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_>:

// Implementation of logistic function.

// Returns 1 / (1 + x) for x in (0, 1).
template <typename tRawType>
FixedPoint<tRawType, 0> one_over_one_plus_x_for_x_in_0_1(
 802b0b0:	b580      	push	{r7, lr}
 802b0b2:	b08a      	sub	sp, #40	; 0x28
 802b0b4:	af00      	add	r7, sp, #0
 802b0b6:	6078      	str	r0, [r7, #4]
    FixedPoint<tRawType, 0> a) {
  typedef FixedPoint<tRawType, 0> F0;
  typedef FixedPoint<tRawType, 2> F2;
  F0 half_denominator = RoundingHalfSum(a, F0::One());
 802b0b8:	f000 f879 	bl	802b1ae <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>
 802b0bc:	4603      	mov	r3, r0
 802b0be:	4619      	mov	r1, r3
 802b0c0:	6878      	ldr	r0, [r7, #4]
 802b0c2:	f000 f87f 	bl	802b1c4 <_ZN8gemmlowp15RoundingHalfSumIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 802b0c6:	4603      	mov	r3, r0
 802b0c8:	623b      	str	r3, [r7, #32]
  // Newton-Raphson division
  // https://en.wikipedia.org/wiki/Division_algorithm#Newton.E2.80.93Raphson_division
  // Refer to that page for the logic behind the 48/17 and 32/17 constants.
  const F2 constant_48_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, 1515870810, 48.0 / 17.0);
 802b0ca:	f04f 305a 	mov.w	r0, #1515870810	; 0x5a5a5a5a
 802b0ce:	f000 f8ab 	bl	802b228 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>
 802b0d2:	4603      	mov	r3, r0
 802b0d4:	4618      	mov	r0, r3
 802b0d6:	f000 f893 	bl	802b200 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 802b0da:	4603      	mov	r3, r0
 802b0dc:	61fb      	str	r3, [r7, #28]
  const F2 constant_neg_32_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, -1010580540, -32.0 / 17.0);
 802b0de:	4823      	ldr	r0, [pc, #140]	; (802b16c <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xbc>)
 802b0e0:	f000 f8a2 	bl	802b228 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>
 802b0e4:	4603      	mov	r3, r0
 802b0e6:	4618      	mov	r0, r3
 802b0e8:	f000 f88a 	bl	802b200 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 802b0ec:	4603      	mov	r3, r0
 802b0ee:	61bb      	str	r3, [r7, #24]
  F2 x = constant_48_over_17 + half_denominator * constant_neg_32_over_17;
 802b0f0:	69b9      	ldr	r1, [r7, #24]
 802b0f2:	6a38      	ldr	r0, [r7, #32]
 802b0f4:	f000 f8a5 	bl	802b242 <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 802b0f8:	4603      	mov	r3, r0
 802b0fa:	4619      	mov	r1, r3
 802b0fc:	69f8      	ldr	r0, [r7, #28]
 802b0fe:	f000 f8c2 	bl	802b286 <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 802b102:	4603      	mov	r3, r0
 802b104:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < 3; i++) {
 802b106:	2300      	movs	r3, #0
 802b108:	627b      	str	r3, [r7, #36]	; 0x24
 802b10a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b10c:	2b02      	cmp	r3, #2
 802b10e:	dc21      	bgt.n	802b154 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xa4>
    F2 half_denominator_times_x = half_denominator * x;
 802b110:	6979      	ldr	r1, [r7, #20]
 802b112:	6a38      	ldr	r0, [r7, #32]
 802b114:	f000 f895 	bl	802b242 <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 802b118:	4603      	mov	r3, r0
 802b11a:	613b      	str	r3, [r7, #16]
    F2 one_minus_half_denominator_times_x =
        F2::One() - half_denominator_times_x;
 802b11c:	f000 f8d1 	bl	802b2c2 <_ZN8gemmlowp10FixedPointIlLi2EE3OneEv>
 802b120:	4603      	mov	r3, r0
 802b122:	6939      	ldr	r1, [r7, #16]
 802b124:	4618      	mov	r0, r3
 802b126:	f000 f8d5 	bl	802b2d4 <_ZN8gemmlowpmiIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 802b12a:	4603      	mov	r3, r0
 802b12c:	60fb      	str	r3, [r7, #12]
    x = x + Rescale<2>(x * one_minus_half_denominator_times_x);
 802b12e:	68f9      	ldr	r1, [r7, #12]
 802b130:	6978      	ldr	r0, [r7, #20]
 802b132:	f000 f8ed 	bl	802b310 <_ZN8gemmlowpmlIlLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 802b136:	4603      	mov	r3, r0
 802b138:	4618      	mov	r0, r3
 802b13a:	f000 f90b 	bl	802b354 <_ZN8gemmlowp7RescaleILi2ElLi4EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 802b13e:	4603      	mov	r3, r0
 802b140:	4619      	mov	r1, r3
 802b142:	6978      	ldr	r0, [r7, #20]
 802b144:	f000 f89f 	bl	802b286 <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 802b148:	4603      	mov	r3, r0
 802b14a:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < 3; i++) {
 802b14c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b14e:	3301      	adds	r3, #1
 802b150:	627b      	str	r3, [r7, #36]	; 0x24
 802b152:	e7da      	b.n	802b10a <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x5a>
  }
  return Rescale<0>(ExactMulByPot<-1>(x));
 802b154:	6978      	ldr	r0, [r7, #20]
 802b156:	f000 f917 	bl	802b388 <_ZN8gemmlowp13ExactMulByPotILin1ElLi2EEENS_10FixedPointIT0_XplT_T1_EEENS1_IS2_XT1_EEE>
 802b15a:	4603      	mov	r3, r0
 802b15c:	4618      	mov	r0, r3
 802b15e:	f000 f929 	bl	802b3b4 <_ZN8gemmlowp7RescaleILi0ElLi1EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 802b162:	4603      	mov	r3, r0
}
 802b164:	4618      	mov	r0, r3
 802b166:	3728      	adds	r7, #40	; 0x28
 802b168:	46bd      	mov	sp, r7
 802b16a:	bd80      	pop	{r7, pc}
 802b16c:	c3c3c3c4 	.word	0xc3c3c3c4

0802b170 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>:
  RawType& raw() { return i_; }
 802b170:	b480      	push	{r7}
 802b172:	b083      	sub	sp, #12
 802b174:	af00      	add	r7, sp, #0
 802b176:	6078      	str	r0, [r7, #4]
 802b178:	687b      	ldr	r3, [r7, #4]
 802b17a:	4618      	mov	r0, r3
 802b17c:	370c      	adds	r7, #12
 802b17e:	46bd      	mov	sp, r7
 802b180:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b184:	4770      	bx	lr

0802b186 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 802b186:	b590      	push	{r4, r7, lr}
 802b188:	b085      	sub	sp, #20
 802b18a:	af00      	add	r7, sp, #0
 802b18c:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 802b18e:	f107 030c 	add.w	r3, r7, #12
 802b192:	4618      	mov	r0, r3
 802b194:	f7ff ffec 	bl	802b170 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 802b198:	4604      	mov	r4, r0
 802b19a:	6878      	ldr	r0, [r7, #4]
 802b19c:	f7fe fc98 	bl	8029ad0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 802b1a0:	4603      	mov	r3, r0
 802b1a2:	6023      	str	r3, [r4, #0]
    return retval;
 802b1a4:	68fb      	ldr	r3, [r7, #12]
  }
 802b1a6:	4618      	mov	r0, r3
 802b1a8:	3714      	adds	r7, #20
 802b1aa:	46bd      	mov	sp, r7
 802b1ac:	bd90      	pop	{r4, r7, pc}

0802b1ae <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>:
  static FixedPoint One() {
 802b1ae:	b580      	push	{r7, lr}
 802b1b0:	af00      	add	r7, sp, #0
    return FromScalarRaw(
 802b1b2:	f000 f927 	bl	802b404 <_ZN8gemmlowp10FixedPointIlLi0EE12ScalarRawMaxEv>
 802b1b6:	4603      	mov	r3, r0
 802b1b8:	4618      	mov	r0, r3
 802b1ba:	f7ff ffe4 	bl	802b186 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 802b1be:	4603      	mov	r3, r0
  }
 802b1c0:	4618      	mov	r0, r3
 802b1c2:	bd80      	pop	{r7, pc}

0802b1c4 <_ZN8gemmlowp15RoundingHalfSumIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(RoundingHalfSum, RoundingHalfSum)
 802b1c4:	b590      	push	{r4, r7, lr}
 802b1c6:	b083      	sub	sp, #12
 802b1c8:	af00      	add	r7, sp, #0
 802b1ca:	6078      	str	r0, [r7, #4]
 802b1cc:	6039      	str	r1, [r7, #0]
 802b1ce:	1d3b      	adds	r3, r7, #4
 802b1d0:	4618      	mov	r0, r3
 802b1d2:	f7ff ffcd 	bl	802b170 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 802b1d6:	4603      	mov	r3, r0
 802b1d8:	681c      	ldr	r4, [r3, #0]
 802b1da:	463b      	mov	r3, r7
 802b1dc:	4618      	mov	r0, r3
 802b1de:	f7ff ffc7 	bl	802b170 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 802b1e2:	4603      	mov	r3, r0
 802b1e4:	681b      	ldr	r3, [r3, #0]
 802b1e6:	4619      	mov	r1, r3
 802b1e8:	4620      	mov	r0, r4
 802b1ea:	f7ff feae 	bl	802af4a <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_>
 802b1ee:	4603      	mov	r3, r0
 802b1f0:	4618      	mov	r0, r3
 802b1f2:	f7ff ff4c 	bl	802b08e <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 802b1f6:	4603      	mov	r3, r0
 802b1f8:	4618      	mov	r0, r3
 802b1fa:	370c      	adds	r7, #12
 802b1fc:	46bd      	mov	sp, r7
 802b1fe:	bd90      	pop	{r4, r7, pc}

0802b200 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 802b200:	b590      	push	{r4, r7, lr}
 802b202:	b085      	sub	sp, #20
 802b204:	af00      	add	r7, sp, #0
 802b206:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 802b208:	f107 030c 	add.w	r3, r7, #12
 802b20c:	4618      	mov	r0, r3
 802b20e:	f000 f900 	bl	802b412 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 802b212:	4604      	mov	r4, r0
 802b214:	6878      	ldr	r0, [r7, #4]
 802b216:	f7fe fc5b 	bl	8029ad0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 802b21a:	4603      	mov	r3, r0
 802b21c:	6023      	str	r3, [r4, #0]
    return retval;
 802b21e:	68fb      	ldr	r3, [r7, #12]
  }
 802b220:	4618      	mov	r0, r3
 802b222:	3714      	adds	r7, #20
 802b224:	46bd      	mov	sp, r7
 802b226:	bd90      	pop	{r4, r7, pc}

0802b228 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>:
inline typename FixedPointType::ScalarRawType RescaleConstantInitializer(
 802b228:	b580      	push	{r7, lr}
 802b22a:	b082      	sub	sp, #8
 802b22c:	af00      	add	r7, sp, #0
 802b22e:	6078      	str	r0, [r7, #4]
      RoundingDivideByPOT<std::int32_t>(int32_value, 32 - ScalarTypeBits));
 802b230:	2100      	movs	r1, #0
 802b232:	6878      	ldr	r0, [r7, #4]
 802b234:	f7fe f888 	bl	8029348 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 802b238:	4603      	mov	r3, r0
}
 802b23a:	4618      	mov	r0, r3
 802b23c:	3708      	adds	r7, #8
 802b23e:	46bd      	mov	sp, r7
 802b240:	bd80      	pop	{r7, pc}

0802b242 <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 802b242:	b5f0      	push	{r4, r5, r6, r7, lr}
 802b244:	b085      	sub	sp, #20
 802b246:	af00      	add	r7, sp, #0
 802b248:	6078      	str	r0, [r7, #4]
 802b24a:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 802b24c:	1d3b      	adds	r3, r7, #4
 802b24e:	4618      	mov	r0, r3
 802b250:	f7ff ff8e 	bl	802b170 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 802b254:	4603      	mov	r3, r0
 802b256:	681d      	ldr	r5, [r3, #0]
 802b258:	463b      	mov	r3, r7
 802b25a:	4618      	mov	r0, r3
 802b25c:	f000 f8d9 	bl	802b412 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 802b260:	4603      	mov	r3, r0
 802b262:	681e      	ldr	r6, [r3, #0]
 802b264:	f107 030c 	add.w	r3, r7, #12
 802b268:	4618      	mov	r0, r3
 802b26a:	f000 f8d2 	bl	802b412 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 802b26e:	4604      	mov	r4, r0
 802b270:	4631      	mov	r1, r6
 802b272:	4628      	mov	r0, r5
 802b274:	f7fd fbf8 	bl	8028a68 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 802b278:	4603      	mov	r3, r0
 802b27a:	6023      	str	r3, [r4, #0]
  return c;
 802b27c:	68fb      	ldr	r3, [r7, #12]
}
 802b27e:	4618      	mov	r0, r3
 802b280:	3714      	adds	r7, #20
 802b282:	46bd      	mov	sp, r7
 802b284:	bdf0      	pop	{r4, r5, r6, r7, pc}

0802b286 <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 802b286:	b590      	push	{r4, r7, lr}
 802b288:	b083      	sub	sp, #12
 802b28a:	af00      	add	r7, sp, #0
 802b28c:	6078      	str	r0, [r7, #4]
 802b28e:	6039      	str	r1, [r7, #0]
 802b290:	1d3b      	adds	r3, r7, #4
 802b292:	4618      	mov	r0, r3
 802b294:	f000 f8bd 	bl	802b412 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 802b298:	4603      	mov	r3, r0
 802b29a:	681c      	ldr	r4, [r3, #0]
 802b29c:	463b      	mov	r3, r7
 802b29e:	4618      	mov	r0, r3
 802b2a0:	f000 f8b7 	bl	802b412 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 802b2a4:	4603      	mov	r3, r0
 802b2a6:	681b      	ldr	r3, [r3, #0]
 802b2a8:	4619      	mov	r1, r3
 802b2aa:	4620      	mov	r0, r4
 802b2ac:	f7fe fc4c 	bl	8029b48 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 802b2b0:	4603      	mov	r3, r0
 802b2b2:	4618      	mov	r0, r3
 802b2b4:	f000 f8b8 	bl	802b428 <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>
 802b2b8:	4603      	mov	r3, r0
 802b2ba:	4618      	mov	r0, r3
 802b2bc:	370c      	adds	r7, #12
 802b2be:	46bd      	mov	sp, r7
 802b2c0:	bd90      	pop	{r4, r7, pc}

0802b2c2 <_ZN8gemmlowp10FixedPointIlLi2EE3OneEv>:
  static FixedPoint One() {
 802b2c2:	b580      	push	{r7, lr}
 802b2c4:	af00      	add	r7, sp, #0
    return FromScalarRaw(
 802b2c6:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 802b2ca:	f7ff ff99 	bl	802b200 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 802b2ce:	4603      	mov	r3, r0
  }
 802b2d0:	4618      	mov	r0, r3
 802b2d2:	bd80      	pop	{r7, pc}

0802b2d4 <_ZN8gemmlowpmiIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator-, Sub)
 802b2d4:	b590      	push	{r4, r7, lr}
 802b2d6:	b083      	sub	sp, #12
 802b2d8:	af00      	add	r7, sp, #0
 802b2da:	6078      	str	r0, [r7, #4]
 802b2dc:	6039      	str	r1, [r7, #0]
 802b2de:	1d3b      	adds	r3, r7, #4
 802b2e0:	4618      	mov	r0, r3
 802b2e2:	f000 f896 	bl	802b412 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 802b2e6:	4603      	mov	r3, r0
 802b2e8:	681c      	ldr	r4, [r3, #0]
 802b2ea:	463b      	mov	r3, r7
 802b2ec:	4618      	mov	r0, r3
 802b2ee:	f000 f890 	bl	802b412 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 802b2f2:	4603      	mov	r3, r0
 802b2f4:	681b      	ldr	r3, [r3, #0]
 802b2f6:	4619      	mov	r1, r3
 802b2f8:	4620      	mov	r0, r4
 802b2fa:	f000 f875 	bl	802b3e8 <_ZN8gemmlowp3SubIlEET_S1_S1_>
 802b2fe:	4603      	mov	r3, r0
 802b300:	4618      	mov	r0, r3
 802b302:	f000 f891 	bl	802b428 <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>
 802b306:	4603      	mov	r3, r0
 802b308:	4618      	mov	r0, r3
 802b30a:	370c      	adds	r7, #12
 802b30c:	46bd      	mov	sp, r7
 802b30e:	bd90      	pop	{r4, r7, pc}

0802b310 <_ZN8gemmlowpmlIlLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 802b310:	b5f0      	push	{r4, r5, r6, r7, lr}
 802b312:	b085      	sub	sp, #20
 802b314:	af00      	add	r7, sp, #0
 802b316:	6078      	str	r0, [r7, #4]
 802b318:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 802b31a:	1d3b      	adds	r3, r7, #4
 802b31c:	4618      	mov	r0, r3
 802b31e:	f000 f878 	bl	802b412 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 802b322:	4603      	mov	r3, r0
 802b324:	681d      	ldr	r5, [r3, #0]
 802b326:	463b      	mov	r3, r7
 802b328:	4618      	mov	r0, r3
 802b32a:	f000 f872 	bl	802b412 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 802b32e:	4603      	mov	r3, r0
 802b330:	681e      	ldr	r6, [r3, #0]
 802b332:	f107 030c 	add.w	r3, r7, #12
 802b336:	4618      	mov	r0, r3
 802b338:	f000 f887 	bl	802b44a <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>
 802b33c:	4604      	mov	r4, r0
 802b33e:	4631      	mov	r1, r6
 802b340:	4628      	mov	r0, r5
 802b342:	f7fd fb91 	bl	8028a68 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 802b346:	4603      	mov	r3, r0
 802b348:	6023      	str	r3, [r4, #0]
  return c;
 802b34a:	68fb      	ldr	r3, [r7, #12]
}
 802b34c:	4618      	mov	r0, r3
 802b34e:	3714      	adds	r7, #20
 802b350:	46bd      	mov	sp, r7
 802b352:	bdf0      	pop	{r4, r5, r6, r7, pc}

0802b354 <_ZN8gemmlowp7RescaleILi2ElLi4EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 802b354:	b5b0      	push	{r4, r5, r7, lr}
 802b356:	b084      	sub	sp, #16
 802b358:	af00      	add	r7, sp, #0
 802b35a:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 802b35c:	1d3b      	adds	r3, r7, #4
 802b35e:	4618      	mov	r0, r3
 802b360:	f000 f873 	bl	802b44a <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>
 802b364:	4603      	mov	r3, r0
 802b366:	681d      	ldr	r5, [r3, #0]
 802b368:	f107 030c 	add.w	r3, r7, #12
 802b36c:	4618      	mov	r0, r3
 802b36e:	f000 f850 	bl	802b412 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 802b372:	4604      	mov	r4, r0
 802b374:	4628      	mov	r0, r5
 802b376:	f000 f873 	bl	802b460 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi2ElEET0_S1_>
 802b37a:	4603      	mov	r3, r0
 802b37c:	6023      	str	r3, [r4, #0]
  return result;
 802b37e:	68fb      	ldr	r3, [r7, #12]
}
 802b380:	4618      	mov	r0, r3
 802b382:	3710      	adds	r7, #16
 802b384:	46bd      	mov	sp, r7
 802b386:	bdb0      	pop	{r4, r5, r7, pc}

0802b388 <_ZN8gemmlowp13ExactMulByPotILin1ElLi2EEENS_10FixedPointIT0_XplT_T1_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tExponent + tIntegerBits> ExactMulByPot(
 802b388:	b590      	push	{r4, r7, lr}
 802b38a:	b085      	sub	sp, #20
 802b38c:	af00      	add	r7, sp, #0
 802b38e:	6078      	str	r0, [r7, #4]
  c.raw() = a.raw();
 802b390:	1d3b      	adds	r3, r7, #4
 802b392:	4618      	mov	r0, r3
 802b394:	f000 f83d 	bl	802b412 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 802b398:	4604      	mov	r4, r0
 802b39a:	f107 030c 	add.w	r3, r7, #12
 802b39e:	4618      	mov	r0, r3
 802b3a0:	f000 f86a 	bl	802b478 <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>
 802b3a4:	4602      	mov	r2, r0
 802b3a6:	6823      	ldr	r3, [r4, #0]
 802b3a8:	6013      	str	r3, [r2, #0]
  return c;
 802b3aa:	68fb      	ldr	r3, [r7, #12]
}
 802b3ac:	4618      	mov	r0, r3
 802b3ae:	3714      	adds	r7, #20
 802b3b0:	46bd      	mov	sp, r7
 802b3b2:	bd90      	pop	{r4, r7, pc}

0802b3b4 <_ZN8gemmlowp7RescaleILi0ElLi1EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 802b3b4:	b5b0      	push	{r4, r5, r7, lr}
 802b3b6:	b084      	sub	sp, #16
 802b3b8:	af00      	add	r7, sp, #0
 802b3ba:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 802b3bc:	1d3b      	adds	r3, r7, #4
 802b3be:	4618      	mov	r0, r3
 802b3c0:	f000 f85a 	bl	802b478 <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>
 802b3c4:	4603      	mov	r3, r0
 802b3c6:	681d      	ldr	r5, [r3, #0]
 802b3c8:	f107 030c 	add.w	r3, r7, #12
 802b3cc:	4618      	mov	r0, r3
 802b3ce:	f7ff fecf 	bl	802b170 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 802b3d2:	4604      	mov	r4, r0
 802b3d4:	4628      	mov	r0, r5
 802b3d6:	f000 f85a 	bl	802b48e <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi1ElEET0_S1_>
 802b3da:	4603      	mov	r3, r0
 802b3dc:	6023      	str	r3, [r4, #0]
  return result;
 802b3de:	68fb      	ldr	r3, [r7, #12]
}
 802b3e0:	4618      	mov	r0, r3
 802b3e2:	3710      	adds	r7, #16
 802b3e4:	46bd      	mov	sp, r7
 802b3e6:	bdb0      	pop	{r4, r5, r7, pc}

0802b3e8 <_ZN8gemmlowp3SubIlEET_S1_S1_>:
tIntegerType Sub(tIntegerType a, tIntegerType b) {
 802b3e8:	b480      	push	{r7}
 802b3ea:	b083      	sub	sp, #12
 802b3ec:	af00      	add	r7, sp, #0
 802b3ee:	6078      	str	r0, [r7, #4]
 802b3f0:	6039      	str	r1, [r7, #0]
  return a - b;
 802b3f2:	687a      	ldr	r2, [r7, #4]
 802b3f4:	683b      	ldr	r3, [r7, #0]
 802b3f6:	1ad3      	subs	r3, r2, r3
}
 802b3f8:	4618      	mov	r0, r3
 802b3fa:	370c      	adds	r7, #12
 802b3fc:	46bd      	mov	sp, r7
 802b3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b402:	4770      	bx	lr

0802b404 <_ZN8gemmlowp10FixedPointIlLi0EE12ScalarRawMaxEv>:
  static const ScalarRawType ScalarRawMax() {
 802b404:	b580      	push	{r7, lr}
 802b406:	af00      	add	r7, sp, #0
    return std::numeric_limits<ScalarRawType>::max();
 802b408:	f7fc fb28 	bl	8027a5c <_ZNSt14numeric_limitsIlE3maxEv>
 802b40c:	4603      	mov	r3, r0
  }
 802b40e:	4618      	mov	r0, r3
 802b410:	bd80      	pop	{r7, pc}

0802b412 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>:
  RawType& raw() { return i_; }
 802b412:	b480      	push	{r7}
 802b414:	b083      	sub	sp, #12
 802b416:	af00      	add	r7, sp, #0
 802b418:	6078      	str	r0, [r7, #4]
 802b41a:	687b      	ldr	r3, [r7, #4]
 802b41c:	4618      	mov	r0, r3
 802b41e:	370c      	adds	r7, #12
 802b420:	46bd      	mov	sp, r7
 802b422:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b426:	4770      	bx	lr

0802b428 <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 802b428:	b580      	push	{r7, lr}
 802b42a:	b084      	sub	sp, #16
 802b42c:	af00      	add	r7, sp, #0
 802b42e:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 802b430:	f107 030c 	add.w	r3, r7, #12
 802b434:	4618      	mov	r0, r3
 802b436:	f7ff ffec 	bl	802b412 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 802b43a:	4602      	mov	r2, r0
 802b43c:	687b      	ldr	r3, [r7, #4]
 802b43e:	6013      	str	r3, [r2, #0]
    return retval;
 802b440:	68fb      	ldr	r3, [r7, #12]
  }
 802b442:	4618      	mov	r0, r3
 802b444:	3710      	adds	r7, #16
 802b446:	46bd      	mov	sp, r7
 802b448:	bd80      	pop	{r7, pc}

0802b44a <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>:
  RawType& raw() { return i_; }
 802b44a:	b480      	push	{r7}
 802b44c:	b083      	sub	sp, #12
 802b44e:	af00      	add	r7, sp, #0
 802b450:	6078      	str	r0, [r7, #4]
 802b452:	687b      	ldr	r3, [r7, #4]
 802b454:	4618      	mov	r0, r3
 802b456:	370c      	adds	r7, #12
 802b458:	46bd      	mov	sp, r7
 802b45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b45e:	4770      	bx	lr

0802b460 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi2ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 802b460:	b580      	push	{r7, lr}
 802b462:	b082      	sub	sp, #8
 802b464:	af00      	add	r7, sp, #0
 802b466:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 802b468:	6878      	ldr	r0, [r7, #4]
 802b46a:	f000 f81d 	bl	802b4a8 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl>
 802b46e:	4603      	mov	r3, r0
}
 802b470:	4618      	mov	r0, r3
 802b472:	3708      	adds	r7, #8
 802b474:	46bd      	mov	sp, r7
 802b476:	bd80      	pop	{r7, pc}

0802b478 <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>:
  RawType& raw() { return i_; }
 802b478:	b480      	push	{r7}
 802b47a:	b083      	sub	sp, #12
 802b47c:	af00      	add	r7, sp, #0
 802b47e:	6078      	str	r0, [r7, #4]
 802b480:	687b      	ldr	r3, [r7, #4]
 802b482:	4618      	mov	r0, r3
 802b484:	370c      	adds	r7, #12
 802b486:	46bd      	mov	sp, r7
 802b488:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b48c:	4770      	bx	lr

0802b48e <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi1ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 802b48e:	b580      	push	{r7, lr}
 802b490:	b082      	sub	sp, #8
 802b492:	af00      	add	r7, sp, #0
 802b494:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 802b496:	6878      	ldr	r0, [r7, #4]
 802b498:	f000 f848 	bl	802b52c <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl>
 802b49c:	4603      	mov	r3, r0
}
 802b49e:	4618      	mov	r0, r3
 802b4a0:	3708      	adds	r7, #8
 802b4a2:	46bd      	mov	sp, r7
 802b4a4:	bd80      	pop	{r7, pc}
	...

0802b4a8 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 802b4a8:	b580      	push	{r7, lr}
 802b4aa:	b08a      	sub	sp, #40	; 0x28
 802b4ac:	af00      	add	r7, sp, #0
 802b4ae:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 802b4b0:	f7fd fac5 	bl	8028a3e <_ZNSt14numeric_limitsIlE3minEv>
 802b4b4:	4603      	mov	r3, r0
 802b4b6:	4618      	mov	r0, r3
 802b4b8:	f7fe fb0a 	bl	8029ad0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 802b4bc:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 802b4be:	f7fc facd 	bl	8027a5c <_ZNSt14numeric_limitsIlE3maxEv>
 802b4c2:	4603      	mov	r3, r0
 802b4c4:	4618      	mov	r0, r3
 802b4c6:	f7fe fb03 	bl	8029ad0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 802b4ca:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 802b4cc:	2320      	movs	r3, #32
 802b4ce:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 802b4d0:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 802b4d4:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 802b4d6:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
 802b4da:	f7fe faf9 	bl	8029ad0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 802b4de:	4603      	mov	r3, r0
 802b4e0:	4619      	mov	r1, r3
 802b4e2:	6878      	ldr	r0, [r7, #4]
 802b4e4:	f7fe fb3e 	bl	8029b64 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 802b4e8:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 802b4ea:	480f      	ldr	r0, [pc, #60]	; (802b528 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl+0x80>)
 802b4ec:	f7fe faf0 	bl	8029ad0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 802b4f0:	4603      	mov	r3, r0
 802b4f2:	4619      	mov	r1, r3
 802b4f4:	6878      	ldr	r0, [r7, #4]
 802b4f6:	f7fe fb13 	bl	8029b20 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 802b4fa:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 802b4fc:	2102      	movs	r1, #2
 802b4fe:	6878      	ldr	r0, [r7, #4]
 802b500:	f000 f856 	bl	802b5b0 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 802b504:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 802b506:	68fa      	ldr	r2, [r7, #12]
 802b508:	6a39      	ldr	r1, [r7, #32]
 802b50a:	6978      	ldr	r0, [r7, #20]
 802b50c:	f000 f894 	bl	802b638 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 802b510:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 802b512:	68fa      	ldr	r2, [r7, #12]
 802b514:	6a79      	ldr	r1, [r7, #36]	; 0x24
 802b516:	6938      	ldr	r0, [r7, #16]
 802b518:	f000 f88e 	bl	802b638 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 802b51c:	60f8      	str	r0, [r7, #12]
    return result;
 802b51e:	68fb      	ldr	r3, [r7, #12]
  }
 802b520:	4618      	mov	r0, r3
 802b522:	3728      	adds	r7, #40	; 0x28
 802b524:	46bd      	mov	sp, r7
 802b526:	bd80      	pop	{r7, pc}
 802b528:	e0000001 	.word	0xe0000001

0802b52c <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 802b52c:	b580      	push	{r7, lr}
 802b52e:	b08a      	sub	sp, #40	; 0x28
 802b530:	af00      	add	r7, sp, #0
 802b532:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 802b534:	f7fd fa83 	bl	8028a3e <_ZNSt14numeric_limitsIlE3minEv>
 802b538:	4603      	mov	r3, r0
 802b53a:	4618      	mov	r0, r3
 802b53c:	f7fe fac8 	bl	8029ad0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 802b540:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 802b542:	f7fc fa8b 	bl	8027a5c <_ZNSt14numeric_limitsIlE3maxEv>
 802b546:	4603      	mov	r3, r0
 802b548:	4618      	mov	r0, r3
 802b54a:	f7fe fac1 	bl	8029ad0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 802b54e:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 802b550:	2320      	movs	r3, #32
 802b552:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 802b554:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 802b558:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 802b55a:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
 802b55e:	f7fe fab7 	bl	8029ad0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 802b562:	4603      	mov	r3, r0
 802b564:	4619      	mov	r1, r3
 802b566:	6878      	ldr	r0, [r7, #4]
 802b568:	f7fe fafc 	bl	8029b64 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 802b56c:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 802b56e:	480f      	ldr	r0, [pc, #60]	; (802b5ac <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl+0x80>)
 802b570:	f7fe faae 	bl	8029ad0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 802b574:	4603      	mov	r3, r0
 802b576:	4619      	mov	r1, r3
 802b578:	6878      	ldr	r0, [r7, #4]
 802b57a:	f7fe fad1 	bl	8029b20 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 802b57e:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 802b580:	2101      	movs	r1, #1
 802b582:	6878      	ldr	r0, [r7, #4]
 802b584:	f000 f814 	bl	802b5b0 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 802b588:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 802b58a:	68fa      	ldr	r2, [r7, #12]
 802b58c:	6a39      	ldr	r1, [r7, #32]
 802b58e:	6978      	ldr	r0, [r7, #20]
 802b590:	f000 f852 	bl	802b638 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 802b594:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 802b596:	68fa      	ldr	r2, [r7, #12]
 802b598:	6a79      	ldr	r1, [r7, #36]	; 0x24
 802b59a:	6938      	ldr	r0, [r7, #16]
 802b59c:	f000 f84c 	bl	802b638 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 802b5a0:	60f8      	str	r0, [r7, #12]
    return result;
 802b5a2:	68fb      	ldr	r3, [r7, #12]
  }
 802b5a4:	4618      	mov	r0, r3
 802b5a6:	3728      	adds	r7, #40	; 0x28
 802b5a8:	46bd      	mov	sp, r7
 802b5aa:	bd80      	pop	{r7, pc}
 802b5ac:	c0000001 	.word	0xc0000001

0802b5b0 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>:
tIntegerType ShiftLeft(tIntegerType a, int offset) {
 802b5b0:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 802b5b4:	b089      	sub	sp, #36	; 0x24
 802b5b6:	af00      	add	r7, sp, #0
 802b5b8:	6078      	str	r0, [r7, #4]
 802b5ba:	6039      	str	r1, [r7, #0]
  const std::int64_t wide_a = static_cast<std::int64_t>(a);
 802b5bc:	6879      	ldr	r1, [r7, #4]
 802b5be:	17c8      	asrs	r0, r1, #31
 802b5c0:	4688      	mov	r8, r1
 802b5c2:	4681      	mov	r9, r0
 802b5c4:	e9c7 8906 	strd	r8, r9, [r7, #24]
  const std::int64_t wide_shifted = wide_a * (1 << offset);
 802b5c8:	2001      	movs	r0, #1
 802b5ca:	6839      	ldr	r1, [r7, #0]
 802b5cc:	fa00 f101 	lsl.w	r1, r0, r1
 802b5d0:	17c8      	asrs	r0, r1, #31
 802b5d2:	460c      	mov	r4, r1
 802b5d4:	4605      	mov	r5, r0
 802b5d6:	69f9      	ldr	r1, [r7, #28]
 802b5d8:	fb04 f001 	mul.w	r0, r4, r1
 802b5dc:	69b9      	ldr	r1, [r7, #24]
 802b5de:	fb05 f101 	mul.w	r1, r5, r1
 802b5e2:	4401      	add	r1, r0
 802b5e4:	69b8      	ldr	r0, [r7, #24]
 802b5e6:	fba0 2304 	umull	r2, r3, r0, r4
 802b5ea:	4419      	add	r1, r3
 802b5ec:	460b      	mov	r3, r1
 802b5ee:	e9c7 2304 	strd	r2, r3, [r7, #16]
 802b5f2:	e9c7 2304 	strd	r2, r3, [r7, #16]
  const auto min = std::numeric_limits<tIntegerType>::min();
 802b5f6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 802b5fa:	60fb      	str	r3, [r7, #12]
  const auto max = std::numeric_limits<tIntegerType>::max();
 802b5fc:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 802b600:	60bb      	str	r3, [r7, #8]
             ? min
 802b602:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 802b606:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 802b60a:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 802b60e:	db0b      	blt.n	802b628 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x78>
             : wide_shifted > max ? max
 802b610:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 802b614:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 802b618:	f173 0300 	sbcs.w	r3, r3, #0
 802b61c:	da01      	bge.n	802b622 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x72>
 802b61e:	693b      	ldr	r3, [r7, #16]
                                  : static_cast<tIntegerType>(wide_shifted);
 802b620:	e004      	b.n	802b62c <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x7c>
             : wide_shifted > max ? max
 802b622:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
                                  : static_cast<tIntegerType>(wide_shifted);
 802b626:	e001      	b.n	802b62c <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x7c>
             ? min
 802b628:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 802b62c:	4618      	mov	r0, r3
 802b62e:	3724      	adds	r7, #36	; 0x24
 802b630:	46bd      	mov	sp, r7
 802b632:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 802b636:	4770      	bx	lr

0802b638 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>:
tIntegerType SelectUsingMask(tIntegerType if_mask, tIntegerType then_val,
 802b638:	b590      	push	{r4, r7, lr}
 802b63a:	b085      	sub	sp, #20
 802b63c:	af00      	add	r7, sp, #0
 802b63e:	60f8      	str	r0, [r7, #12]
 802b640:	60b9      	str	r1, [r7, #8]
 802b642:	607a      	str	r2, [r7, #4]
  return BitXor(BitAnd(if_mask, then_val), BitAnd(BitNot(if_mask), else_val));
 802b644:	68b9      	ldr	r1, [r7, #8]
 802b646:	68f8      	ldr	r0, [r7, #12]
 802b648:	f7fe fa4d 	bl	8029ae6 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 802b64c:	4604      	mov	r4, r0
 802b64e:	68f8      	ldr	r0, [r7, #12]
 802b650:	f7fe faad 	bl	8029bae <_ZN8gemmlowp6BitNotIlEET_S1_>
 802b654:	4603      	mov	r3, r0
 802b656:	6879      	ldr	r1, [r7, #4]
 802b658:	4618      	mov	r0, r3
 802b65a:	f7fe fa44 	bl	8029ae6 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 802b65e:	4603      	mov	r3, r0
 802b660:	4619      	mov	r1, r3
 802b662:	4620      	mov	r0, r4
 802b664:	f000 f805 	bl	802b672 <_ZN8gemmlowp6BitXorIlEET_S1_S1_>
 802b668:	4603      	mov	r3, r0
}
 802b66a:	4618      	mov	r0, r3
 802b66c:	3714      	adds	r7, #20
 802b66e:	46bd      	mov	sp, r7
 802b670:	bd90      	pop	{r4, r7, pc}

0802b672 <_ZN8gemmlowp6BitXorIlEET_S1_S1_>:
tIntegerType BitXor(tIntegerType a, tIntegerType b) {
 802b672:	b480      	push	{r7}
 802b674:	b083      	sub	sp, #12
 802b676:	af00      	add	r7, sp, #0
 802b678:	6078      	str	r0, [r7, #4]
 802b67a:	6039      	str	r1, [r7, #0]
  return a ^ b;
 802b67c:	687a      	ldr	r2, [r7, #4]
 802b67e:	683b      	ldr	r3, [r7, #0]
 802b680:	4053      	eors	r3, r2
}
 802b682:	4618      	mov	r0, r3
 802b684:	370c      	adds	r7, #12
 802b686:	46bd      	mov	sp, r7
 802b688:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b68c:	4770      	bx	lr

0802b68e <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
// TODO(b/169801227): This global struct is needed for the linker to drop unused
// code (for example, by using Register_FULLY_CONNECTED_INT8 instead of
// Register_FULLY_CONNECTED).
TfLiteRegistration fully_connected_registration;

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 802b68e:	b580      	push	{r7, lr}
 802b690:	b084      	sub	sp, #16
 802b692:	af00      	add	r7, sp, #0
 802b694:	60f8      	str	r0, [r7, #12]
 802b696:	60b9      	str	r1, [r7, #8]
 802b698:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 802b69a:	68fb      	ldr	r3, [r7, #12]
 802b69c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802b69e:	2b00      	cmp	r3, #0
 802b6a0:	d101      	bne.n	802b6a6 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0x18>
 802b6a2:	f006 fcdb 	bl	803205c <abort>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
 802b6a6:	68fb      	ldr	r3, [r7, #12]
 802b6a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802b6aa:	2124      	movs	r1, #36	; 0x24
 802b6ac:	68f8      	ldr	r0, [r7, #12]
 802b6ae:	4798      	blx	r3
 802b6b0:	4603      	mov	r3, r0
}
 802b6b2:	4618      	mov	r0, r3
 802b6b4:	3710      	adds	r7, #16
 802b6b6:	46bd      	mov	sp, r7
 802b6b8:	bd80      	pop	{r7, pc}
	...

0802b6bc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 802b6bc:	b5b0      	push	{r4, r5, r7, lr}
 802b6be:	b0a0      	sub	sp, #128	; 0x80
 802b6c0:	af04      	add	r7, sp, #16
 802b6c2:	6078      	str	r0, [r7, #4]
 802b6c4:	6039      	str	r1, [r7, #0]
 802b6c6:	2400      	movs	r4, #0
  TFLITE_DCHECK(node->user_data != nullptr);
 802b6c8:	683b      	ldr	r3, [r7, #0]
 802b6ca:	691b      	ldr	r3, [r3, #16]
 802b6cc:	2b00      	cmp	r3, #0
 802b6ce:	d101      	bne.n	802b6d4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x18>
 802b6d0:	f006 fcc4 	bl	803205c <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 802b6d4:	683b      	ldr	r3, [r7, #0]
 802b6d6:	695b      	ldr	r3, [r3, #20]
 802b6d8:	2b00      	cmp	r3, #0
 802b6da:	d101      	bne.n	802b6e0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x24>
 802b6dc:	f006 fcbe 	bl	803205c <abort>

  OpData* data = static_cast<OpData*>(node->user_data);
 802b6e0:	683b      	ldr	r3, [r7, #0]
 802b6e2:	691b      	ldr	r3, [r3, #16]
 802b6e4:	66fb      	str	r3, [r7, #108]	; 0x6c
  const auto params =
 802b6e6:	683b      	ldr	r3, [r7, #0]
 802b6e8:	695b      	ldr	r3, [r3, #20]
 802b6ea:	66bb      	str	r3, [r7, #104]	; 0x68
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteTensor* input =
      GetInput(context, node, kFullyConnectedInputTensor);
 802b6ec:	4b81      	ldr	r3, [pc, #516]	; (802b8f4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x238>)
 802b6ee:	681b      	ldr	r3, [r3, #0]
 802b6f0:	461a      	mov	r2, r3
 802b6f2:	6839      	ldr	r1, [r7, #0]
 802b6f4:	6878      	ldr	r0, [r7, #4]
 802b6f6:	f7fc fc7b 	bl	8027ff0 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 802b6fa:	6678      	str	r0, [r7, #100]	; 0x64
  TF_LITE_ENSURE(context, input != nullptr);
 802b6fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 802b6fe:	2b00      	cmp	r3, #0
 802b700:	d10a      	bne.n	802b718 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x5c>
 802b702:	687b      	ldr	r3, [r7, #4]
 802b704:	695c      	ldr	r4, [r3, #20]
 802b706:	4b7c      	ldr	r3, [pc, #496]	; (802b8f8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 802b708:	9300      	str	r3, [sp, #0]
 802b70a:	2340      	movs	r3, #64	; 0x40
 802b70c:	4a7b      	ldr	r2, [pc, #492]	; (802b8fc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 802b70e:	497c      	ldr	r1, [pc, #496]	; (802b900 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x244>)
 802b710:	6878      	ldr	r0, [r7, #4]
 802b712:	47a0      	blx	r4
 802b714:	2401      	movs	r4, #1
 802b716:	e0e7      	b.n	802b8e8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>
  const TfLiteTensor* filter =
      GetInput(context, node, kFullyConnectedWeightsTensor);
 802b718:	4b7a      	ldr	r3, [pc, #488]	; (802b904 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x248>)
 802b71a:	681b      	ldr	r3, [r3, #0]
 802b71c:	461a      	mov	r2, r3
 802b71e:	6839      	ldr	r1, [r7, #0]
 802b720:	6878      	ldr	r0, [r7, #4]
 802b722:	f7fc fc65 	bl	8027ff0 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 802b726:	6638      	str	r0, [r7, #96]	; 0x60
  TF_LITE_ENSURE(context, filter != nullptr);
 802b728:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 802b72a:	2b00      	cmp	r3, #0
 802b72c:	d10a      	bne.n	802b744 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x88>
 802b72e:	687b      	ldr	r3, [r7, #4]
 802b730:	695c      	ldr	r4, [r3, #20]
 802b732:	4b75      	ldr	r3, [pc, #468]	; (802b908 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x24c>)
 802b734:	9300      	str	r3, [sp, #0]
 802b736:	2343      	movs	r3, #67	; 0x43
 802b738:	4a70      	ldr	r2, [pc, #448]	; (802b8fc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 802b73a:	4971      	ldr	r1, [pc, #452]	; (802b900 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x244>)
 802b73c:	6878      	ldr	r0, [r7, #4]
 802b73e:	47a0      	blx	r4
 802b740:	2401      	movs	r4, #1
 802b742:	e0d1      	b.n	802b8e8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>
  const TfLiteTensor* bias =
      GetOptionalInputTensor(context, node, kFullyConnectedBiasTensor);
 802b744:	4b71      	ldr	r3, [pc, #452]	; (802b90c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x250>)
 802b746:	681b      	ldr	r3, [r3, #0]
 802b748:	461a      	mov	r2, r3
 802b74a:	6839      	ldr	r1, [r7, #0]
 802b74c:	6878      	ldr	r0, [r7, #4]
 802b74e:	f7fc fc7f 	bl	8028050 <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>
 802b752:	65f8      	str	r0, [r7, #92]	; 0x5c
  TfLiteTensor* output = GetOutput(context, node, kFullyConnectedOutputTensor);
 802b754:	4b6e      	ldr	r3, [pc, #440]	; (802b910 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x254>)
 802b756:	681b      	ldr	r3, [r3, #0]
 802b758:	461a      	mov	r2, r3
 802b75a:	6839      	ldr	r1, [r7, #0]
 802b75c:	6878      	ldr	r0, [r7, #4]
 802b75e:	f7fc fc57 	bl	8028010 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 802b762:	65b8      	str	r0, [r7, #88]	; 0x58
  TF_LITE_ENSURE(context, output != nullptr);
 802b764:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802b766:	2b00      	cmp	r3, #0
 802b768:	d10a      	bne.n	802b780 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xc4>
 802b76a:	687b      	ldr	r3, [r7, #4]
 802b76c:	695c      	ldr	r4, [r3, #20]
 802b76e:	4b69      	ldr	r3, [pc, #420]	; (802b914 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x258>)
 802b770:	9300      	str	r3, [sp, #0]
 802b772:	2347      	movs	r3, #71	; 0x47
 802b774:	4a61      	ldr	r2, [pc, #388]	; (802b8fc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 802b776:	4962      	ldr	r1, [pc, #392]	; (802b900 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x244>)
 802b778:	6878      	ldr	r0, [r7, #4]
 802b77a:	47a0      	blx	r4
 802b77c:	2401      	movs	r4, #1
 802b77e:	e0b3      	b.n	802b8e8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>

  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
 802b780:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 802b782:	781a      	ldrb	r2, [r3, #0]
 802b784:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802b786:	781b      	ldrb	r3, [r3, #0]
 802b788:	429a      	cmp	r2, r3
 802b78a:	d01a      	beq.n	802b7c2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x106>
 802b78c:	687b      	ldr	r3, [r7, #4]
 802b78e:	695c      	ldr	r4, [r3, #20]
 802b790:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 802b792:	781b      	ldrb	r3, [r3, #0]
 802b794:	4618      	mov	r0, r3
 802b796:	f7fc f8e5 	bl	8027964 <TfLiteTypeGetName>
 802b79a:	4605      	mov	r5, r0
 802b79c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802b79e:	781b      	ldrb	r3, [r3, #0]
 802b7a0:	4618      	mov	r0, r3
 802b7a2:	f7fc f8df 	bl	8027964 <TfLiteTypeGetName>
 802b7a6:	4603      	mov	r3, r0
 802b7a8:	9303      	str	r3, [sp, #12]
 802b7aa:	9502      	str	r5, [sp, #8]
 802b7ac:	4b5a      	ldr	r3, [pc, #360]	; (802b918 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x25c>)
 802b7ae:	9301      	str	r3, [sp, #4]
 802b7b0:	4b5a      	ldr	r3, [pc, #360]	; (802b91c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x260>)
 802b7b2:	9300      	str	r3, [sp, #0]
 802b7b4:	2349      	movs	r3, #73	; 0x49
 802b7b6:	4a51      	ldr	r2, [pc, #324]	; (802b8fc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 802b7b8:	4959      	ldr	r1, [pc, #356]	; (802b920 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x264>)
 802b7ba:	6878      	ldr	r0, [r7, #4]
 802b7bc:	47a0      	blx	r4
 802b7be:	2401      	movs	r4, #1
 802b7c0:	e092      	b.n	802b8e8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>
  TF_LITE_ENSURE_MSG(context, input->type == filter->type,
 802b7c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 802b7c4:	781a      	ldrb	r2, [r3, #0]
 802b7c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 802b7c8:	781b      	ldrb	r3, [r3, #0]
 802b7ca:	429a      	cmp	r2, r3
 802b7cc:	d006      	beq.n	802b7dc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x120>
 802b7ce:	687b      	ldr	r3, [r7, #4]
 802b7d0:	695b      	ldr	r3, [r3, #20]
 802b7d2:	4954      	ldr	r1, [pc, #336]	; (802b924 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x268>)
 802b7d4:	6878      	ldr	r0, [r7, #4]
 802b7d6:	4798      	blx	r3
 802b7d8:	2401      	movs	r4, #1
 802b7da:	e085      	b.n	802b8e8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>
                     "Hybrid models are not supported on TFLite Micro.");

  // Set buffer index to a reset value
  data->buffer_idx = -1;
 802b7dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 802b7de:	f04f 32ff 	mov.w	r2, #4294967295
 802b7e2:	621a      	str	r2, [r3, #32]
  TF_LITE_ENSURE_STATUS(CalculateOpDataFullyConnected(
 802b7e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 802b7e6:	7819      	ldrb	r1, [r3, #0]
 802b7e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 802b7ea:	781a      	ldrb	r2, [r3, #0]
 802b7ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 802b7ee:	9303      	str	r3, [sp, #12]
 802b7f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802b7f2:	9302      	str	r3, [sp, #8]
 802b7f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802b7f6:	9301      	str	r3, [sp, #4]
 802b7f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 802b7fa:	9300      	str	r3, [sp, #0]
 802b7fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 802b7fe:	6878      	ldr	r0, [r7, #4]
 802b800:	f000 fae4 	bl	802bdcc <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>
 802b804:	4603      	mov	r3, r0
 802b806:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 802b80a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 802b80e:	2b00      	cmp	r3, #0
 802b810:	d002      	beq.n	802b818 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x15c>
 802b812:	f897 4057 	ldrb.w	r4, [r7, #87]	; 0x57
 802b816:	e067      	b.n	802b8e8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>
      context, params->activation, input->type, input, filter, bias, output,
      &(data->reference_op_data)));

  if (input->type == kTfLiteInt8) {
 802b818:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 802b81a:	781b      	ldrb	r3, [r3, #0]
 802b81c:	2b09      	cmp	r3, #9
 802b81e:	d162      	bne.n	802b8e6 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22a>
    RuntimeShape filter_shape = GetTensorShape(filter);
 802b820:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802b824:	6e39      	ldr	r1, [r7, #96]	; 0x60
 802b826:	4618      	mov	r0, r3
 802b828:	f7fd f85d 	bl	80288e6 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    RuntimeShape output_shape = GetTensorShape(output);
 802b82c:	f107 0318 	add.w	r3, r7, #24
 802b830:	6db9      	ldr	r1, [r7, #88]	; 0x58
 802b832:	4618      	mov	r0, r3
 802b834:	f7fd f857 	bl	80288e6 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>

    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
 802b838:	f107 0318 	add.w	r3, r7, #24
 802b83c:	4618      	mov	r0, r3
 802b83e:	f7fc ffee 	bl	802881e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 802b842:	4603      	mov	r3, r0
 802b844:	2b02      	cmp	r3, #2
 802b846:	d001      	beq.n	802b84c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x190>
 802b848:	f006 fc08 	bl	803205c <abort>
    const int filter_dim_count = filter_shape.DimensionsCount();
 802b84c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802b850:	4618      	mov	r0, r3
 802b852:	f7fc ffe4 	bl	802881e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 802b856:	6538      	str	r0, [r7, #80]	; 0x50
    cmsis_nn_dims filter_dims;
    filter_dims.n = filter_shape.Dims(filter_dim_count - 1);
 802b858:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b85a:	1e5a      	subs	r2, r3, #1
 802b85c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802b860:	4611      	mov	r1, r2
 802b862:	4618      	mov	r0, r3
 802b864:	f7fd f976 	bl	8028b54 <_ZNK6tflite12RuntimeShape4DimsEi>
 802b868:	4603      	mov	r3, r0
 802b86a:	60bb      	str	r3, [r7, #8]
    filter_dims.h = 1;
 802b86c:	2301      	movs	r3, #1
 802b86e:	60fb      	str	r3, [r7, #12]
    filter_dims.w = 1;
 802b870:	2301      	movs	r3, #1
 802b872:	613b      	str	r3, [r7, #16]
    filter_dims.c = output_shape.Dims(1);
 802b874:	f107 0318 	add.w	r3, r7, #24
 802b878:	2101      	movs	r1, #1
 802b87a:	4618      	mov	r0, r3
 802b87c:	f7fd f96a 	bl	8028b54 <_ZNK6tflite12RuntimeShape4DimsEi>
 802b880:	4603      	mov	r3, r0
 802b882:	617b      	str	r3, [r7, #20]

    const int32_t buf_size =
        arm_fully_connected_s8_get_buffer_size(&filter_dims);
 802b884:	f107 0308 	add.w	r3, r7, #8
 802b888:	4618      	mov	r0, r3
 802b88a:	f7ee fb28 	bl	8019ede <arm_fully_connected_s8_get_buffer_size>
 802b88e:	64f8      	str	r0, [r7, #76]	; 0x4c

    if (buf_size > 0) {
 802b890:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b892:	2b00      	cmp	r3, #0
 802b894:	dd11      	ble.n	802b8ba <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1fe>
      TF_LITE_ENSURE_STATUS(context->RequestScratchBufferInArena(
 802b896:	687b      	ldr	r3, [r7, #4]
 802b898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802b89a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 802b89c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 802b89e:	3220      	adds	r2, #32
 802b8a0:	6878      	ldr	r0, [r7, #4]
 802b8a2:	4798      	blx	r3
 802b8a4:	4603      	mov	r3, r0
 802b8a6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 802b8aa:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 802b8ae:	2b00      	cmp	r3, #0
 802b8b0:	d007      	beq.n	802b8c2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x206>
 802b8b2:	f897 404b 	ldrb.w	r4, [r7, #75]	; 0x4b
 802b8b6:	2500      	movs	r5, #0
 802b8b8:	e004      	b.n	802b8c4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x208>
          context, buf_size, &data->buffer_idx));
    } else {
      data->buffer_idx = -1;
 802b8ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 802b8bc:	f04f 32ff 	mov.w	r2, #4294967295
 802b8c0:	621a      	str	r2, [r3, #32]
 802b8c2:	2501      	movs	r5, #1
 802b8c4:	f107 0318 	add.w	r3, r7, #24
 802b8c8:	4618      	mov	r0, r3
 802b8ca:	f7fc ff92 	bl	80287f2 <_ZN6tflite12RuntimeShapeD1Ev>
 802b8ce:	2d01      	cmp	r5, #1
 802b8d0:	d001      	beq.n	802b8d6 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x21a>
 802b8d2:	2500      	movs	r5, #0
 802b8d4:	e000      	b.n	802b8d8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x21c>
 802b8d6:	2501      	movs	r5, #1
 802b8d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802b8dc:	4618      	mov	r0, r3
 802b8de:	f7fc ff88 	bl	80287f2 <_ZN6tflite12RuntimeShapeD1Ev>
 802b8e2:	2d01      	cmp	r5, #1
 802b8e4:	d100      	bne.n	802b8e8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>
    }
  }
  return kTfLiteOk;
 802b8e6:	2400      	movs	r4, #0
}
 802b8e8:	4623      	mov	r3, r4
 802b8ea:	4618      	mov	r0, r3
 802b8ec:	3770      	adds	r7, #112	; 0x70
 802b8ee:	46bd      	mov	sp, r7
 802b8f0:	bdb0      	pop	{r4, r5, r7, pc}
 802b8f2:	bf00      	nop
 802b8f4:	08036c94 	.word	0x08036c94
 802b8f8:	080351b0 	.word	0x080351b0
 802b8fc:	08035108 	.word	0x08035108
 802b900:	08035198 	.word	0x08035198
 802b904:	08036c98 	.word	0x08036c98
 802b908:	080351c4 	.word	0x080351c4
 802b90c:	08036c9c 	.word	0x08036c9c
 802b910:	08036ca0 	.word	0x08036ca0
 802b914:	080351d8 	.word	0x080351d8
 802b918:	08035208 	.word	0x08035208
 802b91c:	08035218 	.word	0x08035218
 802b920:	080351ec 	.word	0x080351ec
 802b924:	08035224 	.word	0x08035224

0802b928 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_>:
TfLiteStatus EvalQuantizedInt8(TfLiteContext* context, TfLiteNode* node,
                               const OpData& data,
                               const TfLiteEvalTensor* input,
                               const TfLiteEvalTensor* filter,
                               const TfLiteEvalTensor* bias,
                               TfLiteEvalTensor* output) {
 802b928:	b5f0      	push	{r4, r5, r6, r7, lr}
 802b92a:	b0bf      	sub	sp, #252	; 0xfc
 802b92c:	af08      	add	r7, sp, #32
 802b92e:	6178      	str	r0, [r7, #20]
 802b930:	6139      	str	r1, [r7, #16]
 802b932:	60fa      	str	r2, [r7, #12]
 802b934:	60bb      	str	r3, [r7, #8]
  const RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 802b936:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 802b93a:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 802b93e:	4618      	mov	r0, r3
 802b940:	f000 faaa 	bl	802be98 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
 802b944:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 802b948:	4618      	mov	r0, r3
 802b94a:	f7fc ff68 	bl	802881e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 802b94e:	4603      	mov	r3, r0
 802b950:	2b02      	cmp	r3, #2
 802b952:	d001      	beq.n	802b958 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x30>
 802b954:	f006 fb82 	bl	803205c <abort>
  const int batches = output_shape.Dims(0);
 802b958:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 802b95c:	2100      	movs	r1, #0
 802b95e:	4618      	mov	r0, r3
 802b960:	f7fd f8f8 	bl	8028b54 <_ZNK6tflite12RuntimeShape4DimsEi>
 802b964:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
  const int output_depth = output_shape.Dims(1);
 802b968:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 802b96c:	2101      	movs	r1, #1
 802b96e:	4618      	mov	r0, r3
 802b970:	f7fd f8f0 	bl	8028b54 <_ZNK6tflite12RuntimeShape4DimsEi>
 802b974:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
  const RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
 802b978:	f107 0398 	add.w	r3, r7, #152	; 0x98
 802b97c:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 802b980:	4618      	mov	r0, r3
 802b982:	f000 fa89 	bl	802be98 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  const int filter_dim_count = filter_shape.DimensionsCount();
 802b986:	f107 0398 	add.w	r3, r7, #152	; 0x98
 802b98a:	4618      	mov	r0, r3
 802b98c:	f7fc ff47 	bl	802881e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 802b990:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
 802b994:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 802b998:	1e5a      	subs	r2, r3, #1
 802b99a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 802b99e:	4611      	mov	r1, r2
 802b9a0:	4618      	mov	r0, r3
 802b9a2:	f7fd f8d7 	bl	8028b54 <_ZNK6tflite12RuntimeShape4DimsEi>
 802b9a6:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
  const RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 802b9aa:	f107 0380 	add.w	r3, r7, #128	; 0x80
 802b9ae:	68b9      	ldr	r1, [r7, #8]
 802b9b0:	4618      	mov	r0, r3
 802b9b2:	f000 fa71 	bl	802be98 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>

  cmsis_nn_fc_params fc_params;
  fc_params.input_offset = -data.reference_op_data.input_zero_point;
 802b9b6:	68fb      	ldr	r3, [r7, #12]
 802b9b8:	695b      	ldr	r3, [r3, #20]
 802b9ba:	425b      	negs	r3, r3
 802b9bc:	66fb      	str	r3, [r7, #108]	; 0x6c
  fc_params.output_offset = data.reference_op_data.output_zero_point;
 802b9be:	68fb      	ldr	r3, [r7, #12]
 802b9c0:	69db      	ldr	r3, [r3, #28]
 802b9c2:	677b      	str	r3, [r7, #116]	; 0x74
  fc_params.filter_offset = -data.reference_op_data.filter_zero_point;
 802b9c4:	68fb      	ldr	r3, [r7, #12]
 802b9c6:	699b      	ldr	r3, [r3, #24]
 802b9c8:	425b      	negs	r3, r3
 802b9ca:	673b      	str	r3, [r7, #112]	; 0x70
  fc_params.activation.min = data.reference_op_data.output_activation_min;
 802b9cc:	68fb      	ldr	r3, [r7, #12]
 802b9ce:	689b      	ldr	r3, [r3, #8]
 802b9d0:	67bb      	str	r3, [r7, #120]	; 0x78
  fc_params.activation.max = data.reference_op_data.output_activation_max;
 802b9d2:	68fb      	ldr	r3, [r7, #12]
 802b9d4:	68db      	ldr	r3, [r3, #12]
 802b9d6:	67fb      	str	r3, [r7, #124]	; 0x7c

  cmsis_nn_per_tensor_quant_params quant_params;
  quant_params.multiplier = data.reference_op_data.output_multiplier;
 802b9d8:	68fb      	ldr	r3, [r7, #12]
 802b9da:	681b      	ldr	r3, [r3, #0]
 802b9dc:	667b      	str	r3, [r7, #100]	; 0x64
  quant_params.shift = data.reference_op_data.output_shift;
 802b9de:	68fb      	ldr	r3, [r7, #12]
 802b9e0:	685b      	ldr	r3, [r3, #4]
 802b9e2:	66bb      	str	r3, [r7, #104]	; 0x68

  cmsis_nn_dims input_dims;
  input_dims.n = batches;
 802b9e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 802b9e8:	657b      	str	r3, [r7, #84]	; 0x54
  input_dims.h = 1;
 802b9ea:	2301      	movs	r3, #1
 802b9ec:	65bb      	str	r3, [r7, #88]	; 0x58
  input_dims.w = 1;
 802b9ee:	2301      	movs	r3, #1
 802b9f0:	65fb      	str	r3, [r7, #92]	; 0x5c
  input_dims.c = accum_depth;
 802b9f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 802b9f6:	663b      	str	r3, [r7, #96]	; 0x60

  cmsis_nn_dims filter_dims;
  filter_dims.n = accum_depth;
 802b9f8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 802b9fc:	647b      	str	r3, [r7, #68]	; 0x44
  filter_dims.h = 1;
 802b9fe:	2301      	movs	r3, #1
 802ba00:	64bb      	str	r3, [r7, #72]	; 0x48
  filter_dims.w = 1;
 802ba02:	2301      	movs	r3, #1
 802ba04:	64fb      	str	r3, [r7, #76]	; 0x4c
  filter_dims.c = output_depth;
 802ba06:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 802ba0a:	653b      	str	r3, [r7, #80]	; 0x50

  cmsis_nn_dims bias_dims;
  bias_dims.n = 1;
 802ba0c:	2301      	movs	r3, #1
 802ba0e:	637b      	str	r3, [r7, #52]	; 0x34
  bias_dims.h = 1;
 802ba10:	2301      	movs	r3, #1
 802ba12:	63bb      	str	r3, [r7, #56]	; 0x38
  bias_dims.w = 1;
 802ba14:	2301      	movs	r3, #1
 802ba16:	63fb      	str	r3, [r7, #60]	; 0x3c
  bias_dims.c = output_depth;
 802ba18:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 802ba1c:	643b      	str	r3, [r7, #64]	; 0x40

  cmsis_nn_dims output_dims;
  output_dims.n = batches;
 802ba1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 802ba22:	627b      	str	r3, [r7, #36]	; 0x24
  output_dims.h = 1;
 802ba24:	2301      	movs	r3, #1
 802ba26:	62bb      	str	r3, [r7, #40]	; 0x28
  output_dims.w = 1;
 802ba28:	2301      	movs	r3, #1
 802ba2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  output_dims.c = output_depth;
 802ba2c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 802ba30:	633b      	str	r3, [r7, #48]	; 0x30

  cmsis_nn_context ctx;
  ctx.buf = nullptr;
 802ba32:	2300      	movs	r3, #0
 802ba34:	61fb      	str	r3, [r7, #28]
  ctx.size = 0;
 802ba36:	2300      	movs	r3, #0
 802ba38:	623b      	str	r3, [r7, #32]

  if (data.buffer_idx > -1) {
 802ba3a:	68fb      	ldr	r3, [r7, #12]
 802ba3c:	6a1b      	ldr	r3, [r3, #32]
 802ba3e:	2b00      	cmp	r3, #0
 802ba40:	db08      	blt.n	802ba54 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x12c>
    ctx.buf = context->GetScratchBuffer(context, data.buffer_idx);
 802ba42:	697b      	ldr	r3, [r7, #20]
 802ba44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802ba46:	68fa      	ldr	r2, [r7, #12]
 802ba48:	6a12      	ldr	r2, [r2, #32]
 802ba4a:	4611      	mov	r1, r2
 802ba4c:	6978      	ldr	r0, [r7, #20]
 802ba4e:	4798      	blx	r3
 802ba50:	4603      	mov	r3, r0
 802ba52:	61fb      	str	r3, [r7, #28]
  }

  TF_LITE_ENSURE_EQ(
 802ba54:	68b8      	ldr	r0, [r7, #8]
 802ba56:	f7fd fe4f 	bl	80296f8 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 802ba5a:	4605      	mov	r5, r0
 802ba5c:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 802ba60:	f7fd fe4a 	bl	80296f8 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 802ba64:	4606      	mov	r6, r0
 802ba66:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 802ba6a:	f7fe f987 	bl	8029d7c <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 802ba6e:	6078      	str	r0, [r7, #4]
 802ba70:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 802ba74:	f7fd fe4f 	bl	8029716 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 802ba78:	4603      	mov	r3, r0
 802ba7a:	f107 0454 	add.w	r4, r7, #84	; 0x54
 802ba7e:	f107 0264 	add.w	r2, r7, #100	; 0x64
 802ba82:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 802ba86:	f107 001c 	add.w	r0, r7, #28
 802ba8a:	9306      	str	r3, [sp, #24]
 802ba8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802ba90:	9305      	str	r3, [sp, #20]
 802ba92:	687b      	ldr	r3, [r7, #4]
 802ba94:	9304      	str	r3, [sp, #16]
 802ba96:	f107 0334 	add.w	r3, r7, #52	; 0x34
 802ba9a:	9303      	str	r3, [sp, #12]
 802ba9c:	9602      	str	r6, [sp, #8]
 802ba9e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 802baa2:	9301      	str	r3, [sp, #4]
 802baa4:	9500      	str	r5, [sp, #0]
 802baa6:	4623      	mov	r3, r4
 802baa8:	f7ee f9d2 	bl	8019e50 <arm_fully_connected_s8>
 802baac:	4603      	mov	r3, r0
 802baae:	2b00      	cmp	r3, #0
 802bab0:	bf14      	ite	ne
 802bab2:	2301      	movne	r3, #1
 802bab4:	2300      	moveq	r3, #0
 802bab6:	b2db      	uxtb	r3, r3
 802bab8:	2b00      	cmp	r3, #0
 802baba:	d03e      	beq.n	802bb3a <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x212>
 802babc:	697b      	ldr	r3, [r7, #20]
 802babe:	695c      	ldr	r4, [r3, #20]
 802bac0:	68b8      	ldr	r0, [r7, #8]
 802bac2:	f7fd fe19 	bl	80296f8 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 802bac6:	4606      	mov	r6, r0
 802bac8:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 802bacc:	f7fd fe14 	bl	80296f8 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 802bad0:	6078      	str	r0, [r7, #4]
 802bad2:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 802bad6:	f7fe f951 	bl	8029d7c <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 802bada:	6038      	str	r0, [r7, #0]
 802badc:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 802bae0:	f7fd fe19 	bl	8029716 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 802bae4:	4603      	mov	r3, r0
 802bae6:	f107 0554 	add.w	r5, r7, #84	; 0x54
 802baea:	f107 0264 	add.w	r2, r7, #100	; 0x64
 802baee:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 802baf2:	f107 001c 	add.w	r0, r7, #28
 802baf6:	9306      	str	r3, [sp, #24]
 802baf8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802bafc:	9305      	str	r3, [sp, #20]
 802bafe:	683b      	ldr	r3, [r7, #0]
 802bb00:	9304      	str	r3, [sp, #16]
 802bb02:	f107 0334 	add.w	r3, r7, #52	; 0x34
 802bb06:	9303      	str	r3, [sp, #12]
 802bb08:	687b      	ldr	r3, [r7, #4]
 802bb0a:	9302      	str	r3, [sp, #8]
 802bb0c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 802bb10:	9301      	str	r3, [sp, #4]
 802bb12:	9600      	str	r6, [sp, #0]
 802bb14:	462b      	mov	r3, r5
 802bb16:	f7ee f99b 	bl	8019e50 <arm_fully_connected_s8>
 802bb1a:	4603      	mov	r3, r0
 802bb1c:	461a      	mov	r2, r3
 802bb1e:	2300      	movs	r3, #0
 802bb20:	9303      	str	r3, [sp, #12]
 802bb22:	9202      	str	r2, [sp, #8]
 802bb24:	4b0f      	ldr	r3, [pc, #60]	; (802bb64 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x23c>)
 802bb26:	9301      	str	r3, [sp, #4]
 802bb28:	4b0f      	ldr	r3, [pc, #60]	; (802bb68 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x240>)
 802bb2a:	9300      	str	r3, [sp, #0]
 802bb2c:	23a6      	movs	r3, #166	; 0xa6
 802bb2e:	4a0f      	ldr	r2, [pc, #60]	; (802bb6c <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x244>)
 802bb30:	490f      	ldr	r1, [pc, #60]	; (802bb70 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x248>)
 802bb32:	6978      	ldr	r0, [r7, #20]
 802bb34:	47a0      	blx	r4
 802bb36:	2401      	movs	r4, #1
 802bb38:	e000      	b.n	802bb3c <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x214>
          tflite::micro::GetTensorData<int8_t>(filter), &bias_dims,
          tflite::micro::GetTensorData<int32_t>(bias), &output_dims,
          tflite::micro::GetTensorData<int8_t>(output)),
      ARM_MATH_SUCCESS);

  return kTfLiteOk;
 802bb3a:	2400      	movs	r4, #0
  const RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 802bb3c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 802bb40:	4618      	mov	r0, r3
 802bb42:	f7fc fe56 	bl	80287f2 <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
 802bb46:	f107 0398 	add.w	r3, r7, #152	; 0x98
 802bb4a:	4618      	mov	r0, r3
 802bb4c:	f7fc fe51 	bl	80287f2 <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 802bb50:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 802bb54:	4618      	mov	r0, r3
 802bb56:	f7fc fe4c 	bl	80287f2 <_ZN6tflite12RuntimeShapeD1Ev>
}
 802bb5a:	4623      	mov	r3, r4
 802bb5c:	4618      	mov	r0, r3
 802bb5e:	37dc      	adds	r7, #220	; 0xdc
 802bb60:	46bd      	mov	sp, r7
 802bb62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802bb64:	08035304 	.word	0x08035304
 802bb68:	08035318 	.word	0x08035318
 802bb6c:	08035108 	.word	0x08035108
 802bb70:	080352e8 	.word	0x080352e8

0802bb74 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 802bb74:	b590      	push	{r4, r7, lr}
 802bb76:	b0d1      	sub	sp, #324	; 0x144
 802bb78:	af04      	add	r7, sp, #16
 802bb7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 802bb7e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 802bb82:	6018      	str	r0, [r3, #0]
 802bb84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 802bb88:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 802bb8c:	6019      	str	r1, [r3, #0]
  TFLITE_DCHECK(node->builtin_data != nullptr);
 802bb8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 802bb92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 802bb96:	681b      	ldr	r3, [r3, #0]
 802bb98:	695b      	ldr	r3, [r3, #20]
 802bb9a:	2b00      	cmp	r3, #0
 802bb9c:	d101      	bne.n	802bba2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2e>
 802bb9e:	f006 fa5d 	bl	803205c <abort>
  const auto* params =
 802bba2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 802bba6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 802bbaa:	681b      	ldr	r3, [r3, #0]
 802bbac:	695b      	ldr	r3, [r3, #20]
 802bbae:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedInputTensor);
 802bbb2:	4b67      	ldr	r3, [pc, #412]	; (802bd50 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1dc>)
 802bbb4:	681a      	ldr	r2, [r3, #0]
 802bbb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 802bbba:	f5a3 7198 	sub.w	r1, r3, #304	; 0x130
 802bbbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 802bbc2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 802bbc6:	6809      	ldr	r1, [r1, #0]
 802bbc8:	6818      	ldr	r0, [r3, #0]
 802bbca:	f7fd f897 	bl	8028cfc <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 802bbce:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
  const TfLiteEvalTensor* filter =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedWeightsTensor);
 802bbd2:	4b60      	ldr	r3, [pc, #384]	; (802bd54 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1e0>)
 802bbd4:	681a      	ldr	r2, [r3, #0]
 802bbd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 802bbda:	f5a3 7198 	sub.w	r1, r3, #304	; 0x130
 802bbde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 802bbe2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 802bbe6:	6809      	ldr	r1, [r1, #0]
 802bbe8:	6818      	ldr	r0, [r3, #0]
 802bbea:	f7fd f887 	bl	8028cfc <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 802bbee:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124
  const TfLiteEvalTensor* bias =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedBiasTensor);
 802bbf2:	4b59      	ldr	r3, [pc, #356]	; (802bd58 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1e4>)
 802bbf4:	681a      	ldr	r2, [r3, #0]
 802bbf6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 802bbfa:	f5a3 7198 	sub.w	r1, r3, #304	; 0x130
 802bbfe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 802bc02:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 802bc06:	6809      	ldr	r1, [r1, #0]
 802bc08:	6818      	ldr	r0, [r3, #0]
 802bc0a:	f7fd f877 	bl	8028cfc <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 802bc0e:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kFullyConnectedOutputTensor);
 802bc12:	4b52      	ldr	r3, [pc, #328]	; (802bd5c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1e8>)
 802bc14:	681a      	ldr	r2, [r3, #0]
 802bc16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 802bc1a:	f5a3 7198 	sub.w	r1, r3, #304	; 0x130
 802bc1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 802bc22:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 802bc26:	6809      	ldr	r1, [r1, #0]
 802bc28:	6818      	ldr	r0, [r3, #0]
 802bc2a:	f7fd f877 	bl	8028d1c <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 802bc2e:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c

  TFLITE_DCHECK(node->user_data != nullptr);
 802bc32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 802bc36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 802bc3a:	681b      	ldr	r3, [r3, #0]
 802bc3c:	691b      	ldr	r3, [r3, #16]
 802bc3e:	2b00      	cmp	r3, #0
 802bc40:	d101      	bne.n	802bc46 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xd2>
 802bc42:	f006 fa0b 	bl	803205c <abort>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));
 802bc46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 802bc4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 802bc4e:	681b      	ldr	r3, [r3, #0]
 802bc50:	691b      	ldr	r3, [r3, #16]
 802bc52:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

  // Checks in Prepare ensure input, output and filter types are all the same.
  switch (input->type) {
 802bc56:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 802bc5a:	7a1b      	ldrb	r3, [r3, #8]
 802bc5c:	2b09      	cmp	r3, #9
 802bc5e:	d021      	beq.n	802bca4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x130>
 802bc60:	2b09      	cmp	r3, #9
 802bc62:	dc55      	bgt.n	802bd10 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x19c>
 802bc64:	2b01      	cmp	r3, #1
 802bc66:	d002      	beq.n	802bc6e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xfa>
 802bc68:	2b03      	cmp	r3, #3
 802bc6a:	d036      	beq.n	802bcda <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x166>
 802bc6c:	e050      	b.n	802bd10 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x19c>
    case kTfLiteFloat32: {
      #if EI_TFLITE_DISABLE_FULLY_CONNECTED_IN_F32
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 802bc6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 802bc72:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 802bc76:	681b      	ldr	r3, [r3, #0]
 802bc78:	695c      	ldr	r4, [r3, #20]
 802bc7a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 802bc7e:	7a1b      	ldrb	r3, [r3, #8]
 802bc80:	4618      	mov	r0, r3
 802bc82:	f7fb fe6f 	bl	8027964 <TfLiteTypeGetName>
 802bc86:	4602      	mov	r2, r0
 802bc88:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 802bc8c:	7a1b      	ldrb	r3, [r3, #8]
 802bc8e:	4619      	mov	r1, r3
 802bc90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 802bc94:	f5a3 7096 	sub.w	r0, r3, #300	; 0x12c
 802bc98:	460b      	mov	r3, r1
 802bc9a:	4931      	ldr	r1, [pc, #196]	; (802bd60 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ec>)
 802bc9c:	6800      	ldr	r0, [r0, #0]
 802bc9e:	47a0      	blx	r4
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 802bca0:	2301      	movs	r3, #1
 802bca2:	e04f      	b.n	802bd44 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1d0>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
      #endif

      return EvalQuantizedInt8(context, node, data, input, filter, bias,
 802bca4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 802bca8:	f5a3 7198 	sub.w	r1, r3, #304	; 0x130
 802bcac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 802bcb0:	f5a3 7096 	sub.w	r0, r3, #300	; 0x12c
 802bcb4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 802bcb8:	9302      	str	r3, [sp, #8]
 802bcba:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 802bcbe:	9301      	str	r3, [sp, #4]
 802bcc0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 802bcc4:	9300      	str	r3, [sp, #0]
 802bcc6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 802bcca:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 802bcce:	6809      	ldr	r1, [r1, #0]
 802bcd0:	6800      	ldr	r0, [r0, #0]
 802bcd2:	f7ff fe29 	bl	802b928 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_>
 802bcd6:	4603      	mov	r3, r0
                               output);
 802bcd8:	e034      	b.n	802bd44 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1d0>
    }
    case kTfLiteUInt8: {
      #if EI_TFLITE_DISABLE_FULLY_CONNECTED_IN_U8
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 802bcda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 802bcde:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 802bce2:	681b      	ldr	r3, [r3, #0]
 802bce4:	695c      	ldr	r4, [r3, #20]
 802bce6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 802bcea:	7a1b      	ldrb	r3, [r3, #8]
 802bcec:	4618      	mov	r0, r3
 802bcee:	f7fb fe39 	bl	8027964 <TfLiteTypeGetName>
 802bcf2:	4602      	mov	r2, r0
 802bcf4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 802bcf8:	7a1b      	ldrb	r3, [r3, #8]
 802bcfa:	4619      	mov	r1, r3
 802bcfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 802bd00:	f5a3 7096 	sub.w	r0, r3, #300	; 0x12c
 802bd04:	460b      	mov	r3, r1
 802bd06:	4916      	ldr	r1, [pc, #88]	; (802bd60 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ec>)
 802bd08:	6800      	ldr	r0, [r0, #0]
 802bd0a:	47a0      	blx	r4
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 802bd0c:	2301      	movs	r3, #1
 802bd0e:	e019      	b.n	802bd44 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1d0>
          tflite::micro::GetTensorShape(output),
          tflite::micro::GetTensorData<uint8_t>(output));
      break;
    }
    default: {
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 802bd10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 802bd14:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 802bd18:	681b      	ldr	r3, [r3, #0]
 802bd1a:	695c      	ldr	r4, [r3, #20]
 802bd1c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 802bd20:	7a1b      	ldrb	r3, [r3, #8]
 802bd22:	4618      	mov	r0, r3
 802bd24:	f7fb fe1e 	bl	8027964 <TfLiteTypeGetName>
 802bd28:	4602      	mov	r2, r0
 802bd2a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 802bd2e:	7a1b      	ldrb	r3, [r3, #8]
 802bd30:	4619      	mov	r1, r3
 802bd32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 802bd36:	f5a3 7096 	sub.w	r0, r3, #300	; 0x12c
 802bd3a:	460b      	mov	r3, r1
 802bd3c:	4908      	ldr	r1, [pc, #32]	; (802bd60 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ec>)
 802bd3e:	6800      	ldr	r0, [r0, #0]
 802bd40:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 802bd42:	2301      	movs	r3, #1
    }
  }
  return kTfLiteOk;
}
 802bd44:	4618      	mov	r0, r3
 802bd46:	f507 779a 	add.w	r7, r7, #308	; 0x134
 802bd4a:	46bd      	mov	sp, r7
 802bd4c:	bd90      	pop	{r4, r7, pc}
 802bd4e:	bf00      	nop
 802bd50:	08036c94 	.word	0x08036c94
 802bd54:	08036c98 	.word	0x08036c98
 802bd58:	08036c9c 	.word	0x08036c9c
 802bd5c:	08036ca0 	.word	0x08036ca0
 802bd60:	0803543c 	.word	0x0803543c

0802bd64 <_ZN6tflite24Register_FULLY_CONNECTEDEv>:
  return EvalQuantizedInt8(context, node, data, input, filter, bias, output);
}

}  // namespace

TfLiteRegistration Register_FULLY_CONNECTED() {
 802bd64:	b4b0      	push	{r4, r5, r7}
 802bd66:	b083      	sub	sp, #12
 802bd68:	af00      	add	r7, sp, #0
 802bd6a:	6078      	str	r0, [r7, #4]
  fully_connected_registration.init = Init;
 802bd6c:	4b13      	ldr	r3, [pc, #76]	; (802bdbc <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 802bd6e:	4a14      	ldr	r2, [pc, #80]	; (802bdc0 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x5c>)
 802bd70:	601a      	str	r2, [r3, #0]
  fully_connected_registration.free = nullptr;
 802bd72:	4b12      	ldr	r3, [pc, #72]	; (802bdbc <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 802bd74:	2200      	movs	r2, #0
 802bd76:	605a      	str	r2, [r3, #4]
  fully_connected_registration.prepare = Prepare;
 802bd78:	4b10      	ldr	r3, [pc, #64]	; (802bdbc <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 802bd7a:	4a12      	ldr	r2, [pc, #72]	; (802bdc4 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x60>)
 802bd7c:	609a      	str	r2, [r3, #8]
  fully_connected_registration.invoke = Eval;
 802bd7e:	4b0f      	ldr	r3, [pc, #60]	; (802bdbc <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 802bd80:	4a11      	ldr	r2, [pc, #68]	; (802bdc8 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x64>)
 802bd82:	60da      	str	r2, [r3, #12]
  fully_connected_registration.profiling_string = nullptr;
 802bd84:	4b0d      	ldr	r3, [pc, #52]	; (802bdbc <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 802bd86:	2200      	movs	r2, #0
 802bd88:	611a      	str	r2, [r3, #16]
  fully_connected_registration.builtin_code = 0;
 802bd8a:	4b0c      	ldr	r3, [pc, #48]	; (802bdbc <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 802bd8c:	2200      	movs	r2, #0
 802bd8e:	615a      	str	r2, [r3, #20]
  fully_connected_registration.custom_name = nullptr;
 802bd90:	4b0a      	ldr	r3, [pc, #40]	; (802bdbc <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 802bd92:	2200      	movs	r2, #0
 802bd94:	619a      	str	r2, [r3, #24]
  fully_connected_registration.version = 0;
 802bd96:	4b09      	ldr	r3, [pc, #36]	; (802bdbc <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 802bd98:	2200      	movs	r2, #0
 802bd9a:	61da      	str	r2, [r3, #28]
  return fully_connected_registration;
 802bd9c:	687b      	ldr	r3, [r7, #4]
 802bd9e:	4a07      	ldr	r2, [pc, #28]	; (802bdbc <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 802bda0:	461c      	mov	r4, r3
 802bda2:	4615      	mov	r5, r2
 802bda4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802bda6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802bda8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 802bdac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 802bdb0:	6878      	ldr	r0, [r7, #4]
 802bdb2:	370c      	adds	r7, #12
 802bdb4:	46bd      	mov	sp, r7
 802bdb6:	bcb0      	pop	{r4, r5, r7}
 802bdb8:	4770      	bx	lr
 802bdba:	bf00      	nop
 802bdbc:	2000094c 	.word	0x2000094c
 802bdc0:	0802b68f 	.word	0x0802b68f
 802bdc4:	0802b6bd 	.word	0x0802b6bd
 802bdc8:	0802bb75 	.word	0x0802bb75

0802bdcc <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>:

TfLiteStatus CalculateOpDataFullyConnected(
    TfLiteContext* context, TfLiteFusedActivation activation,
    TfLiteType data_type, const TfLiteTensor* input, const TfLiteTensor* filter,
    const TfLiteTensor* bias, TfLiteTensor* output,
    OpDataFullyConnected* data) {
 802bdcc:	b580      	push	{r7, lr}
 802bdce:	b08a      	sub	sp, #40	; 0x28
 802bdd0:	af02      	add	r7, sp, #8
 802bdd2:	60f8      	str	r0, [r7, #12]
 802bdd4:	607b      	str	r3, [r7, #4]
 802bdd6:	460b      	mov	r3, r1
 802bdd8:	72fb      	strb	r3, [r7, #11]
 802bdda:	4613      	mov	r3, r2
 802bddc:	72bb      	strb	r3, [r7, #10]
  if (data_type != kTfLiteFloat32) {
 802bdde:	7abb      	ldrb	r3, [r7, #10]
 802bde0:	2b01      	cmp	r3, #1
 802bde2:	d03e      	beq.n	802be62 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x96>
    double real_multiplier = 0.0;
 802bde4:	f04f 0200 	mov.w	r2, #0
 802bde8:	f04f 0300 	mov.w	r3, #0
 802bdec:	e9c7 2304 	strd	r2, r3, [r7, #16]
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
 802bdf0:	f107 0310 	add.w	r3, r7, #16
 802bdf4:	9301      	str	r3, [sp, #4]
 802bdf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802bdf8:	9300      	str	r3, [sp, #0]
 802bdfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802bdfc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802bdfe:	6879      	ldr	r1, [r7, #4]
 802be00:	68f8      	ldr	r0, [r7, #12]
 802be02:	f7fc facd 	bl	80283a0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
 802be06:	4603      	mov	r3, r0
 802be08:	77fb      	strb	r3, [r7, #31]
 802be0a:	7ffb      	ldrb	r3, [r7, #31]
 802be0c:	2b00      	cmp	r3, #0
 802be0e:	d001      	beq.n	802be14 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x48>
 802be10:	7ffb      	ldrb	r3, [r7, #31]
 802be12:	e027      	b.n	802be64 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x98>
        context, input, filter, bias, output, &real_multiplier));
    QuantizeMultiplier(real_multiplier, &data->output_multiplier,
 802be14:	ed97 7b04 	vldr	d7, [r7, #16]
 802be18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 802be1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802be1c:	3304      	adds	r3, #4
 802be1e:	4619      	mov	r1, r3
 802be20:	4610      	mov	r0, r2
 802be22:	eeb0 0a47 	vmov.f32	s0, s14
 802be26:	eef0 0a67 	vmov.f32	s1, s15
 802be2a:	f7fb fe21 	bl	8027a70 <_ZN6tflite18QuantizeMultiplierEdPlPi>
                       &data->output_shift);

    data->input_zero_point = input->params.zero_point;
 802be2e:	687b      	ldr	r3, [r7, #4]
 802be30:	691a      	ldr	r2, [r3, #16]
 802be32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802be34:	615a      	str	r2, [r3, #20]
    data->filter_zero_point = filter->params.zero_point;
 802be36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802be38:	691a      	ldr	r2, [r3, #16]
 802be3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802be3c:	619a      	str	r2, [r3, #24]
    data->output_zero_point = output->params.zero_point;
 802be3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802be40:	691a      	ldr	r2, [r3, #16]
 802be42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802be44:	61da      	str	r2, [r3, #28]

    return CalculateActivationRangeQuantized(context, activation, output,
 802be46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802be48:	f103 0208 	add.w	r2, r3, #8
 802be4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802be4e:	330c      	adds	r3, #12
 802be50:	7af9      	ldrb	r1, [r7, #11]
 802be52:	9300      	str	r3, [sp, #0]
 802be54:	4613      	mov	r3, r2
 802be56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802be58:	68f8      	ldr	r0, [r7, #12]
 802be5a:	f7fc fc2d 	bl	80286b8 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
 802be5e:	4603      	mov	r3, r0
                                             &data->output_activation_min,
                                             &data->output_activation_max);
 802be60:	e000      	b.n	802be64 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x98>
  }
  return kTfLiteOk;
 802be62:	2300      	movs	r3, #0
}
 802be64:	4618      	mov	r0, r3
 802be66:	3720      	adds	r7, #32
 802be68:	46bd      	mov	sp, r7
 802be6a:	bd80      	pop	{r7, pc}

0802be6c <_ZSt3maxIsERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 802be6c:	b480      	push	{r7}
 802be6e:	b083      	sub	sp, #12
 802be70:	af00      	add	r7, sp, #0
 802be72:	6078      	str	r0, [r7, #4]
 802be74:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 802be76:	687b      	ldr	r3, [r7, #4]
 802be78:	f9b3 2000 	ldrsh.w	r2, [r3]
 802be7c:	683b      	ldr	r3, [r7, #0]
 802be7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 802be82:	429a      	cmp	r2, r3
 802be84:	da01      	bge.n	802be8a <_ZSt3maxIsERKT_S2_S2_+0x1e>
	return __b;
 802be86:	683b      	ldr	r3, [r7, #0]
 802be88:	e000      	b.n	802be8c <_ZSt3maxIsERKT_S2_S2_+0x20>
      return __a;
 802be8a:	687b      	ldr	r3, [r7, #4]
    }
 802be8c:	4618      	mov	r0, r3
 802be8e:	370c      	adds	r7, #12
 802be90:	46bd      	mov	sp, r7
 802be92:	f85d 7b04 	ldr.w	r7, [sp], #4
 802be96:	4770      	bx	lr

0802be98 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>:
  TFLITE_DCHECK(input1 != nullptr);
  TFLITE_DCHECK(input2 != nullptr);
  return TfLiteIntArrayEqual(input1->dims, input2->dims);
}

const RuntimeShape GetTensorShape(const TfLiteEvalTensor* tensor) {
 802be98:	b580      	push	{r7, lr}
 802be9a:	b086      	sub	sp, #24
 802be9c:	af00      	add	r7, sp, #0
 802be9e:	6078      	str	r0, [r7, #4]
 802bea0:	6039      	str	r1, [r7, #0]
  if (tensor == nullptr || tensor->dims == nullptr) {
 802bea2:	683b      	ldr	r3, [r7, #0]
 802bea4:	2b00      	cmp	r3, #0
 802bea6:	d003      	beq.n	802beb0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x18>
 802bea8:	683b      	ldr	r3, [r7, #0]
 802beaa:	685b      	ldr	r3, [r3, #4]
 802beac:	2b00      	cmp	r3, #0
 802beae:	d103      	bne.n	802beb8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x20>
    return RuntimeShape();
 802beb0:	6878      	ldr	r0, [r7, #4]
 802beb2:	f7fc fc7d 	bl	80287b0 <_ZN6tflite12RuntimeShapeC1Ev>
 802beb6:	e00d      	b.n	802bed4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x3c>
  }
  TfLiteIntArray* dims = tensor->dims;
 802beb8:	683b      	ldr	r3, [r7, #0]
 802beba:	685b      	ldr	r3, [r3, #4]
 802bebc:	617b      	str	r3, [r7, #20]
  const int dims_size = dims->size;
 802bebe:	697b      	ldr	r3, [r7, #20]
 802bec0:	681b      	ldr	r3, [r3, #0]
 802bec2:	613b      	str	r3, [r7, #16]
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
 802bec4:	697b      	ldr	r3, [r7, #20]
 802bec6:	3304      	adds	r3, #4
 802bec8:	60fb      	str	r3, [r7, #12]
  return RuntimeShape(dims_size, dims_data);
 802beca:	68fa      	ldr	r2, [r7, #12]
 802becc:	6939      	ldr	r1, [r7, #16]
 802bece:	6878      	ldr	r0, [r7, #4]
 802bed0:	f7fc fc7c 	bl	80287cc <_ZN6tflite12RuntimeShapeC1EiPKl>
}
 802bed4:	6878      	ldr	r0, [r7, #4]
 802bed6:	3718      	adds	r7, #24
 802bed8:	46bd      	mov	sp, r7
 802beda:	bd80      	pop	{r7, pc}

0802bedc <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>:

PaddingType RuntimePaddingType(TfLitePadding padding) {
 802bedc:	b480      	push	{r7}
 802bede:	b083      	sub	sp, #12
 802bee0:	af00      	add	r7, sp, #0
 802bee2:	4603      	mov	r3, r0
 802bee4:	71fb      	strb	r3, [r7, #7]
  switch (padding) {
 802bee6:	79fb      	ldrb	r3, [r7, #7]
 802bee8:	2b01      	cmp	r3, #1
 802beea:	d002      	beq.n	802bef2 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding+0x16>
 802beec:	2b02      	cmp	r3, #2
 802beee:	d002      	beq.n	802bef6 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding+0x1a>
 802bef0:	e003      	b.n	802befa <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding+0x1e>
    case TfLitePadding::kTfLitePaddingSame:
      return PaddingType::kSame;
 802bef2:	2301      	movs	r3, #1
 802bef4:	e002      	b.n	802befc <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding+0x20>
    case TfLitePadding::kTfLitePaddingValid:
      return PaddingType::kValid;
 802bef6:	2302      	movs	r3, #2
 802bef8:	e000      	b.n	802befc <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding+0x20>
    case TfLitePadding::kTfLitePaddingUnknown:
    default:
      return PaddingType::kNone;
 802befa:	2300      	movs	r3, #0
  }
}
 802befc:	4618      	mov	r0, r3
 802befe:	370c      	adds	r7, #12
 802bf00:	46bd      	mov	sp, r7
 802bf02:	f85d 7b04 	ldr.w	r7, [sp], #4
 802bf06:	4770      	bx	lr

0802bf08 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>:
}

// Data is required to be contiguous, and so many operators can use either the
// full array flat size or the flat size with one dimension skipped (commonly
// the depth).
inline int FlatSizeSkipDim(const RuntimeShape& shape, int skip_dim) {
 802bf08:	b580      	push	{r7, lr}
 802bf0a:	b086      	sub	sp, #24
 802bf0c:	af00      	add	r7, sp, #0
 802bf0e:	6078      	str	r0, [r7, #4]
 802bf10:	6039      	str	r1, [r7, #0]
  const int dims_count = shape.DimensionsCount();
 802bf12:	6878      	ldr	r0, [r7, #4]
 802bf14:	f7fc fc83 	bl	802881e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 802bf18:	60f8      	str	r0, [r7, #12]
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
 802bf1a:	683b      	ldr	r3, [r7, #0]
 802bf1c:	2b00      	cmp	r3, #0
 802bf1e:	db03      	blt.n	802bf28 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x20>
 802bf20:	683a      	ldr	r2, [r7, #0]
 802bf22:	68fb      	ldr	r3, [r7, #12]
 802bf24:	429a      	cmp	r2, r3
 802bf26:	db01      	blt.n	802bf2c <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x24>
 802bf28:	f006 f898 	bl	803205c <abort>
  const auto* dims_data = shape.DimsData();
 802bf2c:	6878      	ldr	r0, [r7, #4]
 802bf2e:	f7fc fe36 	bl	8028b9e <_ZNK6tflite12RuntimeShape8DimsDataEv>
 802bf32:	60b8      	str	r0, [r7, #8]
  int flat_size = 1;
 802bf34:	2301      	movs	r3, #1
 802bf36:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < dims_count; ++i) {
 802bf38:	2300      	movs	r3, #0
 802bf3a:	613b      	str	r3, [r7, #16]
 802bf3c:	693a      	ldr	r2, [r7, #16]
 802bf3e:	68fb      	ldr	r3, [r7, #12]
 802bf40:	429a      	cmp	r2, r3
 802bf42:	da12      	bge.n	802bf6a <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x62>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
 802bf44:	693a      	ldr	r2, [r7, #16]
 802bf46:	683b      	ldr	r3, [r7, #0]
 802bf48:	429a      	cmp	r2, r3
 802bf4a:	d005      	beq.n	802bf58 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x50>
 802bf4c:	693b      	ldr	r3, [r7, #16]
 802bf4e:	009b      	lsls	r3, r3, #2
 802bf50:	68ba      	ldr	r2, [r7, #8]
 802bf52:	4413      	add	r3, r2
 802bf54:	681b      	ldr	r3, [r3, #0]
 802bf56:	e000      	b.n	802bf5a <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x52>
 802bf58:	2301      	movs	r3, #1
 802bf5a:	697a      	ldr	r2, [r7, #20]
 802bf5c:	fb02 f303 	mul.w	r3, r2, r3
 802bf60:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < dims_count; ++i) {
 802bf62:	693b      	ldr	r3, [r7, #16]
 802bf64:	3301      	adds	r3, #1
 802bf66:	613b      	str	r3, [r7, #16]
 802bf68:	e7e8      	b.n	802bf3c <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x34>
  }
  return flat_size;
 802bf6a:	697b      	ldr	r3, [r7, #20]
}
 802bf6c:	4618      	mov	r0, r3
 802bf6e:	3718      	adds	r7, #24
 802bf70:	46bd      	mov	sp, r7
 802bf72:	bd80      	pop	{r7, pc}

0802bf74 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>:

// A combination of MatchingFlatSize() and FlatSizeSkipDim().
inline int MatchingFlatSizeSkipDim(const RuntimeShape& shape, int skip_dim,
                                   const RuntimeShape& check_shape_0) {
 802bf74:	b590      	push	{r4, r7, lr}
 802bf76:	b087      	sub	sp, #28
 802bf78:	af00      	add	r7, sp, #0
 802bf7a:	60f8      	str	r0, [r7, #12]
 802bf7c:	60b9      	str	r1, [r7, #8]
 802bf7e:	607a      	str	r2, [r7, #4]
  const int dims_count = shape.DimensionsCount();
 802bf80:	68f8      	ldr	r0, [r7, #12]
 802bf82:	f7fc fc4c 	bl	802881e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 802bf86:	6138      	str	r0, [r7, #16]
  for (int i = 0; i < dims_count; ++i) {
 802bf88:	2300      	movs	r3, #0
 802bf8a:	617b      	str	r3, [r7, #20]
 802bf8c:	697a      	ldr	r2, [r7, #20]
 802bf8e:	693b      	ldr	r3, [r7, #16]
 802bf90:	429a      	cmp	r2, r3
 802bf92:	da15      	bge.n	802bfc0 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x4c>
    if (i != skip_dim) {
 802bf94:	697a      	ldr	r2, [r7, #20]
 802bf96:	68bb      	ldr	r3, [r7, #8]
 802bf98:	429a      	cmp	r2, r3
 802bf9a:	d00d      	beq.n	802bfb8 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x44>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 802bf9c:	6979      	ldr	r1, [r7, #20]
 802bf9e:	68f8      	ldr	r0, [r7, #12]
 802bfa0:	f7fc fdd8 	bl	8028b54 <_ZNK6tflite12RuntimeShape4DimsEi>
 802bfa4:	4604      	mov	r4, r0
 802bfa6:	6979      	ldr	r1, [r7, #20]
 802bfa8:	6878      	ldr	r0, [r7, #4]
 802bfaa:	f7fc fdd3 	bl	8028b54 <_ZNK6tflite12RuntimeShape4DimsEi>
 802bfae:	4603      	mov	r3, r0
 802bfb0:	429c      	cmp	r4, r3
 802bfb2:	d001      	beq.n	802bfb8 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x44>
 802bfb4:	f006 f852 	bl	803205c <abort>
  for (int i = 0; i < dims_count; ++i) {
 802bfb8:	697b      	ldr	r3, [r7, #20]
 802bfba:	3301      	adds	r3, #1
 802bfbc:	617b      	str	r3, [r7, #20]
 802bfbe:	e7e5      	b.n	802bf8c <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x18>
    }
  }
  return FlatSizeSkipDim(shape, skip_dim);
 802bfc0:	68b9      	ldr	r1, [r7, #8]
 802bfc2:	68f8      	ldr	r0, [r7, #12]
 802bfc4:	f7ff ffa0 	bl	802bf08 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 802bfc8:	4603      	mov	r3, r0
}
 802bfca:	4618      	mov	r0, r3
 802bfcc:	371c      	adds	r7, #28
 802bfce:	46bd      	mov	sp, r7
 802bfd0:	bd90      	pop	{r4, r7, pc}

0802bfd2 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>:
inline typename FixedPointType::ScalarRawType RescaleConstantInitializer(
 802bfd2:	b580      	push	{r7, lr}
 802bfd4:	b082      	sub	sp, #8
 802bfd6:	af00      	add	r7, sp, #0
 802bfd8:	6078      	str	r0, [r7, #4]
      RoundingDivideByPOT<std::int32_t>(int32_value, 32 - ScalarTypeBits));
 802bfda:	2100      	movs	r1, #0
 802bfdc:	6878      	ldr	r0, [r7, #4]
 802bfde:	f7fd f9b3 	bl	8029348 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 802bfe2:	4603      	mov	r3, r0
}
 802bfe4:	4618      	mov	r0, r3
 802bfe6:	3708      	adds	r7, #8
 802bfe8:	46bd      	mov	sp, r7
 802bfea:	bd80      	pop	{r7, pc}

0802bfec <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 802bfec:	b580      	push	{r7, lr}
 802bfee:	b082      	sub	sp, #8
 802bff0:	af00      	add	r7, sp, #0
 802bff2:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 802bff4:	6878      	ldr	r0, [r7, #4]
 802bff6:	f000 f805 	bl	802c004 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin1ElLin1EE4evalEl>
 802bffa:	4603      	mov	r3, r0
}
 802bffc:	4618      	mov	r0, r3
 802bffe:	3708      	adds	r7, #8
 802c000:	46bd      	mov	sp, r7
 802c002:	bd80      	pop	{r7, pc}

0802c004 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin1ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 802c004:	b580      	push	{r7, lr}
 802c006:	b082      	sub	sp, #8
 802c008:	af00      	add	r7, sp, #0
 802c00a:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 802c00c:	2101      	movs	r1, #1
 802c00e:	6878      	ldr	r0, [r7, #4]
 802c010:	f7fd f99a 	bl	8029348 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 802c014:	4603      	mov	r3, r0
  }
 802c016:	4618      	mov	r0, r3
 802c018:	3708      	adds	r7, #8
 802c01a:	46bd      	mov	sp, r7
 802c01c:	bd80      	pop	{r7, pc}

0802c01e <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>:
FixedPoint<tRawType, tIntegerBits> SelectUsingMask(
 802c01e:	b590      	push	{r4, r7, lr}
 802c020:	b085      	sub	sp, #20
 802c022:	af00      	add	r7, sp, #0
 802c024:	60f8      	str	r0, [r7, #12]
 802c026:	60b9      	str	r1, [r7, #8]
 802c028:	607a      	str	r2, [r7, #4]
      SelectUsingMask(if_mask, then_val.raw(), else_val.raw()));
 802c02a:	f107 0308 	add.w	r3, r7, #8
 802c02e:	4618      	mov	r0, r3
 802c030:	f7ff f89e 	bl	802b170 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 802c034:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 802c036:	681c      	ldr	r4, [r3, #0]
      SelectUsingMask(if_mask, then_val.raw(), else_val.raw()));
 802c038:	1d3b      	adds	r3, r7, #4
 802c03a:	4618      	mov	r0, r3
 802c03c:	f7ff f898 	bl	802b170 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 802c040:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 802c042:	681b      	ldr	r3, [r3, #0]
 802c044:	461a      	mov	r2, r3
 802c046:	4621      	mov	r1, r4
 802c048:	68f8      	ldr	r0, [r7, #12]
 802c04a:	f7ff faf5 	bl	802b638 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 802c04e:	4603      	mov	r3, r0
 802c050:	4618      	mov	r0, r3
 802c052:	f7ff f81c 	bl	802b08e <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 802c056:	4603      	mov	r3, r0
}
 802c058:	4618      	mov	r0, r3
 802c05a:	3714      	adds	r7, #20
 802c05c:	46bd      	mov	sp, r7
 802c05e:	bd90      	pop	{r4, r7, pc}

0802c060 <_ZN8gemmlowp10MaskIfZeroIlEET_S1_>:
tIntegerType MaskIfZero(tIntegerType a) {
 802c060:	b580      	push	{r7, lr}
 802c062:	b082      	sub	sp, #8
 802c064:	af00      	add	r7, sp, #0
 802c066:	6078      	str	r0, [r7, #4]
  return MaskIfNonZero<tIntegerType>(!a);
 802c068:	687b      	ldr	r3, [r7, #4]
 802c06a:	2b00      	cmp	r3, #0
 802c06c:	bf0c      	ite	eq
 802c06e:	2301      	moveq	r3, #1
 802c070:	2300      	movne	r3, #0
 802c072:	b2db      	uxtb	r3, r3
 802c074:	4618      	mov	r0, r3
 802c076:	f7fd fd89 	bl	8029b8c <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 802c07a:	4603      	mov	r3, r0
}
 802c07c:	4618      	mov	r0, r3
 802c07e:	3708      	adds	r7, #8
 802c080:	46bd      	mov	sp, r7
 802c082:	bd80      	pop	{r7, pc}

0802c084 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_>:
FixedPoint<tRawType, 0> exp_on_interval_between_negative_one_quarter_and_0_excl(
 802c084:	b580      	push	{r7, lr}
 802c086:	b08a      	sub	sp, #40	; 0x28
 802c088:	af00      	add	r7, sp, #0
 802c08a:	6078      	str	r0, [r7, #4]
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 1895147668, std::exp(-1.0 / 8.0));
 802c08c:	482c      	ldr	r0, [pc, #176]	; (802c140 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0xbc>)
 802c08e:	f7ff ffa0 	bl	802bfd2 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 802c092:	4603      	mov	r3, r0
 802c094:	4618      	mov	r0, r3
 802c096:	f7ff f876 	bl	802b186 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 802c09a:	4603      	mov	r3, r0
 802c09c:	627b      	str	r3, [r7, #36]	; 0x24
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 715827883, 1.0 / 3.0);
 802c09e:	4829      	ldr	r0, [pc, #164]	; (802c144 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0xc0>)
 802c0a0:	f7ff ff97 	bl	802bfd2 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 802c0a4:	4603      	mov	r3, r0
 802c0a6:	4618      	mov	r0, r3
 802c0a8:	f7ff f86d 	bl	802b186 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 802c0ac:	4603      	mov	r3, r0
 802c0ae:	623b      	str	r3, [r7, #32]
  F x = a + F::template ConstantPOT<-3>();
 802c0b0:	f000 f86c 	bl	802c18c <_ZN8gemmlowp10FixedPointIlLi0EE11ConstantPOTILin3EEES1_v>
 802c0b4:	4603      	mov	r3, r0
 802c0b6:	4619      	mov	r1, r3
 802c0b8:	6878      	ldr	r0, [r7, #4]
 802c0ba:	f000 f870 	bl	802c19e <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 802c0be:	4603      	mov	r3, r0
 802c0c0:	61fb      	str	r3, [r7, #28]
  F x2 = x * x;
 802c0c2:	69f9      	ldr	r1, [r7, #28]
 802c0c4:	69f8      	ldr	r0, [r7, #28]
 802c0c6:	f000 f83f 	bl	802c148 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 802c0ca:	4603      	mov	r3, r0
 802c0cc:	61bb      	str	r3, [r7, #24]
  F x3 = x2 * x;
 802c0ce:	69f9      	ldr	r1, [r7, #28]
 802c0d0:	69b8      	ldr	r0, [r7, #24]
 802c0d2:	f000 f839 	bl	802c148 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 802c0d6:	4603      	mov	r3, r0
 802c0d8:	617b      	str	r3, [r7, #20]
  F x4 = x2 * x2;
 802c0da:	69b9      	ldr	r1, [r7, #24]
 802c0dc:	69b8      	ldr	r0, [r7, #24]
 802c0de:	f000 f833 	bl	802c148 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 802c0e2:	4603      	mov	r3, r0
 802c0e4:	613b      	str	r3, [r7, #16]
  F x4_over_4 = SaturatingRoundingMultiplyByPOT<-2>(x4);
 802c0e6:	6938      	ldr	r0, [r7, #16]
 802c0e8:	f000 f877 	bl	802c1da <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>
 802c0ec:	4603      	mov	r3, r0
 802c0ee:	60fb      	str	r3, [r7, #12]
      SaturatingRoundingMultiplyByPOT<-1>(
 802c0f0:	6979      	ldr	r1, [r7, #20]
 802c0f2:	68f8      	ldr	r0, [r7, #12]
 802c0f4:	f000 f853 	bl	802c19e <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 802c0f8:	4603      	mov	r3, r0
 802c0fa:	6a39      	ldr	r1, [r7, #32]
 802c0fc:	4618      	mov	r0, r3
 802c0fe:	f000 f823 	bl	802c148 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 802c102:	4603      	mov	r3, r0
 802c104:	69b9      	ldr	r1, [r7, #24]
 802c106:	4618      	mov	r0, r3
 802c108:	f000 f849 	bl	802c19e <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 802c10c:	4603      	mov	r3, r0
 802c10e:	4618      	mov	r0, r3
 802c110:	f000 f879 	bl	802c206 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>
 802c114:	4603      	mov	r3, r0
 802c116:	60bb      	str	r3, [r7, #8]
  return AddSaturatingIf16Bit(
 802c118:	68b9      	ldr	r1, [r7, #8]
 802c11a:	69f8      	ldr	r0, [r7, #28]
 802c11c:	f000 f83f 	bl	802c19e <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 802c120:	4603      	mov	r3, r0
 802c122:	4619      	mov	r1, r3
 802c124:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802c126:	f000 f80f 	bl	802c148 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 802c12a:	4603      	mov	r3, r0
 802c12c:	4619      	mov	r1, r3
 802c12e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802c130:	f000 f87f 	bl	802c232 <_ZN8gemmlowp20AddSaturatingIf16BitIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 802c134:	4603      	mov	r3, r0
}
 802c136:	4618      	mov	r0, r3
 802c138:	3728      	adds	r7, #40	; 0x28
 802c13a:	46bd      	mov	sp, r7
 802c13c:	bd80      	pop	{r7, pc}
 802c13e:	bf00      	nop
 802c140:	70f5a894 	.word	0x70f5a894
 802c144:	2aaaaaab 	.word	0x2aaaaaab

0802c148 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 802c148:	b5f0      	push	{r4, r5, r6, r7, lr}
 802c14a:	b085      	sub	sp, #20
 802c14c:	af00      	add	r7, sp, #0
 802c14e:	6078      	str	r0, [r7, #4]
 802c150:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 802c152:	1d3b      	adds	r3, r7, #4
 802c154:	4618      	mov	r0, r3
 802c156:	f7ff f80b 	bl	802b170 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 802c15a:	4603      	mov	r3, r0
 802c15c:	681d      	ldr	r5, [r3, #0]
 802c15e:	463b      	mov	r3, r7
 802c160:	4618      	mov	r0, r3
 802c162:	f7ff f805 	bl	802b170 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 802c166:	4603      	mov	r3, r0
 802c168:	681e      	ldr	r6, [r3, #0]
 802c16a:	f107 030c 	add.w	r3, r7, #12
 802c16e:	4618      	mov	r0, r3
 802c170:	f7fe fffe 	bl	802b170 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 802c174:	4604      	mov	r4, r0
 802c176:	4631      	mov	r1, r6
 802c178:	4628      	mov	r0, r5
 802c17a:	f7fc fc75 	bl	8028a68 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 802c17e:	4603      	mov	r3, r0
 802c180:	6023      	str	r3, [r4, #0]
  return c;
 802c182:	68fb      	ldr	r3, [r7, #12]
}
 802c184:	4618      	mov	r0, r3
 802c186:	3714      	adds	r7, #20
 802c188:	46bd      	mov	sp, r7
 802c18a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0802c18c <_ZN8gemmlowp10FixedPointIlLi0EE11ConstantPOTILin3EEES1_v>:
  static FixedPoint ConstantPOT() {
 802c18c:	b580      	push	{r7, lr}
 802c18e:	af00      	add	r7, sp, #0
    return FromScalarRaw(ScalarRawType(1) << kOffset);
 802c190:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 802c194:	f7fe fff7 	bl	802b186 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 802c198:	4603      	mov	r3, r0
  }
 802c19a:	4618      	mov	r0, r3
 802c19c:	bd80      	pop	{r7, pc}

0802c19e <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 802c19e:	b590      	push	{r4, r7, lr}
 802c1a0:	b083      	sub	sp, #12
 802c1a2:	af00      	add	r7, sp, #0
 802c1a4:	6078      	str	r0, [r7, #4]
 802c1a6:	6039      	str	r1, [r7, #0]
 802c1a8:	1d3b      	adds	r3, r7, #4
 802c1aa:	4618      	mov	r0, r3
 802c1ac:	f7fe ffe0 	bl	802b170 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 802c1b0:	4603      	mov	r3, r0
 802c1b2:	681c      	ldr	r4, [r3, #0]
 802c1b4:	463b      	mov	r3, r7
 802c1b6:	4618      	mov	r0, r3
 802c1b8:	f7fe ffda 	bl	802b170 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 802c1bc:	4603      	mov	r3, r0
 802c1be:	681b      	ldr	r3, [r3, #0]
 802c1c0:	4619      	mov	r1, r3
 802c1c2:	4620      	mov	r0, r4
 802c1c4:	f7fd fcc0 	bl	8029b48 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 802c1c8:	4603      	mov	r3, r0
 802c1ca:	4618      	mov	r0, r3
 802c1cc:	f7fe ff5f 	bl	802b08e <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 802c1d0:	4603      	mov	r3, r0
 802c1d2:	4618      	mov	r0, r3
 802c1d4:	370c      	adds	r7, #12
 802c1d6:	46bd      	mov	sp, r7
 802c1d8:	bd90      	pop	{r4, r7, pc}

0802c1da <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>:
FixedPoint<tRawType, tIntegerBits> SaturatingRoundingMultiplyByPOT(
 802c1da:	b580      	push	{r7, lr}
 802c1dc:	b082      	sub	sp, #8
 802c1de:	af00      	add	r7, sp, #0
 802c1e0:	6078      	str	r0, [r7, #4]
      SaturatingRoundingMultiplyByPOT<tExponent>(a.raw()));
 802c1e2:	1d3b      	adds	r3, r7, #4
 802c1e4:	4618      	mov	r0, r3
 802c1e6:	f7fe ffc3 	bl	802b170 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 802c1ea:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 802c1ec:	681b      	ldr	r3, [r3, #0]
 802c1ee:	4618      	mov	r0, r3
 802c1f0:	f000 f83d 	bl	802c26e <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElEET0_S1_>
 802c1f4:	4603      	mov	r3, r0
 802c1f6:	4618      	mov	r0, r3
 802c1f8:	f7fe ff49 	bl	802b08e <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 802c1fc:	4603      	mov	r3, r0
}
 802c1fe:	4618      	mov	r0, r3
 802c200:	3708      	adds	r7, #8
 802c202:	46bd      	mov	sp, r7
 802c204:	bd80      	pop	{r7, pc}

0802c206 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>:
FixedPoint<tRawType, tIntegerBits> SaturatingRoundingMultiplyByPOT(
 802c206:	b580      	push	{r7, lr}
 802c208:	b082      	sub	sp, #8
 802c20a:	af00      	add	r7, sp, #0
 802c20c:	6078      	str	r0, [r7, #4]
      SaturatingRoundingMultiplyByPOT<tExponent>(a.raw()));
 802c20e:	1d3b      	adds	r3, r7, #4
 802c210:	4618      	mov	r0, r3
 802c212:	f7fe ffad 	bl	802b170 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 802c216:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 802c218:	681b      	ldr	r3, [r3, #0]
 802c21a:	4618      	mov	r0, r3
 802c21c:	f7ff fee6 	bl	802bfec <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElEET0_S1_>
 802c220:	4603      	mov	r3, r0
 802c222:	4618      	mov	r0, r3
 802c224:	f7fe ff33 	bl	802b08e <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 802c228:	4603      	mov	r3, r0
}
 802c22a:	4618      	mov	r0, r3
 802c22c:	3708      	adds	r7, #8
 802c22e:	46bd      	mov	sp, r7
 802c230:	bd80      	pop	{r7, pc}

0802c232 <_ZN8gemmlowp20AddSaturatingIf16BitIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
FixedPoint<tRawType, tIntegerBits> AddSaturatingIf16Bit(
 802c232:	b590      	push	{r4, r7, lr}
 802c234:	b083      	sub	sp, #12
 802c236:	af00      	add	r7, sp, #0
 802c238:	6078      	str	r0, [r7, #4]
 802c23a:	6039      	str	r1, [r7, #0]
      AddSaturatingIf16Bit(a.raw(), b.raw()));
 802c23c:	1d3b      	adds	r3, r7, #4
 802c23e:	4618      	mov	r0, r3
 802c240:	f7fe ff96 	bl	802b170 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 802c244:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 802c246:	681c      	ldr	r4, [r3, #0]
      AddSaturatingIf16Bit(a.raw(), b.raw()));
 802c248:	463b      	mov	r3, r7
 802c24a:	4618      	mov	r0, r3
 802c24c:	f7fe ff90 	bl	802b170 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 802c250:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 802c252:	681b      	ldr	r3, [r3, #0]
 802c254:	4619      	mov	r1, r3
 802c256:	4620      	mov	r0, r4
 802c258:	f000 f815 	bl	802c286 <_ZN8gemmlowp20AddSaturatingIf16BitIlEET_S1_S1_>
 802c25c:	4603      	mov	r3, r0
 802c25e:	4618      	mov	r0, r3
 802c260:	f7fe ff15 	bl	802b08e <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 802c264:	4603      	mov	r3, r0
}
 802c266:	4618      	mov	r0, r3
 802c268:	370c      	adds	r7, #12
 802c26a:	46bd      	mov	sp, r7
 802c26c:	bd90      	pop	{r4, r7, pc}

0802c26e <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 802c26e:	b580      	push	{r7, lr}
 802c270:	b082      	sub	sp, #8
 802c272:	af00      	add	r7, sp, #0
 802c274:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 802c276:	6878      	ldr	r0, [r7, #4]
 802c278:	f000 f813 	bl	802c2a2 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin2ElLin1EE4evalEl>
 802c27c:	4603      	mov	r3, r0
}
 802c27e:	4618      	mov	r0, r3
 802c280:	3708      	adds	r7, #8
 802c282:	46bd      	mov	sp, r7
 802c284:	bd80      	pop	{r7, pc}

0802c286 <_ZN8gemmlowp20AddSaturatingIf16BitIlEET_S1_S1_>:
IntegerType AddSaturatingIf16Bit(IntegerType a, IntegerType b) {
 802c286:	b580      	push	{r7, lr}
 802c288:	b082      	sub	sp, #8
 802c28a:	af00      	add	r7, sp, #0
 802c28c:	6078      	str	r0, [r7, #4]
 802c28e:	6039      	str	r1, [r7, #0]
  return AddSaturatingIf16BitImpl<IntegerType, sizeof(ScalarType) == 2>::Run(a,
 802c290:	6839      	ldr	r1, [r7, #0]
 802c292:	6878      	ldr	r0, [r7, #4]
 802c294:	f000 f812 	bl	802c2bc <_ZN8gemmlowp24AddSaturatingIf16BitImplIlLb0EE3RunEll>
 802c298:	4603      	mov	r3, r0
}
 802c29a:	4618      	mov	r0, r3
 802c29c:	3708      	adds	r7, #8
 802c29e:	46bd      	mov	sp, r7
 802c2a0:	bd80      	pop	{r7, pc}

0802c2a2 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin2ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 802c2a2:	b580      	push	{r7, lr}
 802c2a4:	b082      	sub	sp, #8
 802c2a6:	af00      	add	r7, sp, #0
 802c2a8:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 802c2aa:	2102      	movs	r1, #2
 802c2ac:	6878      	ldr	r0, [r7, #4]
 802c2ae:	f7fd f84b 	bl	8029348 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 802c2b2:	4603      	mov	r3, r0
  }
 802c2b4:	4618      	mov	r0, r3
 802c2b6:	3708      	adds	r7, #8
 802c2b8:	46bd      	mov	sp, r7
 802c2ba:	bd80      	pop	{r7, pc}

0802c2bc <_ZN8gemmlowp24AddSaturatingIf16BitImplIlLb0EE3RunEll>:
  static IntegerType Run(IntegerType a, IntegerType b) { return Add(a, b); }
 802c2bc:	b580      	push	{r7, lr}
 802c2be:	b082      	sub	sp, #8
 802c2c0:	af00      	add	r7, sp, #0
 802c2c2:	6078      	str	r0, [r7, #4]
 802c2c4:	6039      	str	r1, [r7, #0]
 802c2c6:	6839      	ldr	r1, [r7, #0]
 802c2c8:	6878      	ldr	r0, [r7, #4]
 802c2ca:	f7fd fc3d 	bl	8029b48 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 802c2ce:	4603      	mov	r3, r0
 802c2d0:	4618      	mov	r0, r3
 802c2d2:	3708      	adds	r7, #8
 802c2d4:	46bd      	mov	sp, r7
 802c2d6:	bd80      	pop	{r7, pc}

0802c2d8 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE>:
};

TfLiteStatus CalculateOpData(TfLiteContext* context,
                             const TfLitePoolParams* params,
                             const TfLiteTensor* input, TfLiteTensor* output,
                             OpData* data) {
 802c2d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 802c2da:	b099      	sub	sp, #100	; 0x64
 802c2dc:	af08      	add	r7, sp, #32
 802c2de:	6278      	str	r0, [r7, #36]	; 0x24
 802c2e0:	6239      	str	r1, [r7, #32]
 802c2e2:	61fa      	str	r2, [r7, #28]
 802c2e4:	61bb      	str	r3, [r7, #24]
  // input: batch, height, width, channel
  int height = SizeOfDimension(input, 1);
 802c2e6:	2101      	movs	r1, #1
 802c2e8:	69f8      	ldr	r0, [r7, #28]
 802c2ea:	f7fb fdbb 	bl	8027e64 <_ZN6tflite15SizeOfDimensionEPK12TfLiteTensori>
 802c2ee:	63f8      	str	r0, [r7, #60]	; 0x3c
  int width = SizeOfDimension(input, 2);
 802c2f0:	2102      	movs	r1, #2
 802c2f2:	69f8      	ldr	r0, [r7, #28]
 802c2f4:	f7fb fdb6 	bl	8027e64 <_ZN6tflite15SizeOfDimensionEPK12TfLiteTensori>
 802c2f8:	63b8      	str	r0, [r7, #56]	; 0x38

  int out_height, out_width;

  data->padding = ComputePaddingHeightWidth(
      params->stride_height, params->stride_width,
 802c2fa:	6a3b      	ldr	r3, [r7, #32]
 802c2fc:	689d      	ldr	r5, [r3, #8]
 802c2fe:	6a3b      	ldr	r3, [r7, #32]
 802c300:	685e      	ldr	r6, [r3, #4]
      /*dilation_rate_height=*/1,
      /*dilation_rate_width=*/1, height, width, params->filter_height,
 802c302:	6a3b      	ldr	r3, [r7, #32]
 802c304:	691b      	ldr	r3, [r3, #16]
      params->filter_width, params->padding, &out_height, &out_width);
 802c306:	6a3a      	ldr	r2, [r7, #32]
 802c308:	68d2      	ldr	r2, [r2, #12]
 802c30a:	6a39      	ldr	r1, [r7, #32]
 802c30c:	7809      	ldrb	r1, [r1, #0]
 802c30e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 802c310:	6078      	str	r0, [r7, #4]
 802c312:	f107 0408 	add.w	r4, r7, #8
 802c316:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 802c31a:	9007      	str	r0, [sp, #28]
 802c31c:	f107 0030 	add.w	r0, r7, #48	; 0x30
 802c320:	9006      	str	r0, [sp, #24]
 802c322:	9105      	str	r1, [sp, #20]
 802c324:	9204      	str	r2, [sp, #16]
 802c326:	9303      	str	r3, [sp, #12]
 802c328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802c32a:	9302      	str	r3, [sp, #8]
 802c32c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802c32e:	9301      	str	r3, [sp, #4]
 802c330:	2301      	movs	r3, #1
 802c332:	9300      	str	r3, [sp, #0]
 802c334:	2301      	movs	r3, #1
 802c336:	4632      	mov	r2, r6
 802c338:	4629      	mov	r1, r5
 802c33a:	4620      	mov	r0, r4
 802c33c:	f7fe fc59 	bl	802abf2 <_ZN6tflite25ComputePaddingHeightWidthEiiiiiiii13TfLitePaddingPiS1_>
 802c340:	687c      	ldr	r4, [r7, #4]
 802c342:	f107 0308 	add.w	r3, r7, #8
 802c346:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 802c348:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  if (input->type == kTfLiteFloat32) {
 802c34c:	69fb      	ldr	r3, [r7, #28]
 802c34e:	781b      	ldrb	r3, [r3, #0]
 802c350:	2b01      	cmp	r3, #1
 802c352:	d10a      	bne.n	802c36a <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE+0x92>
    CalculateActivationRange(params->activation, &data->activation_min_f32,
 802c354:	6a3b      	ldr	r3, [r7, #32]
 802c356:	7d18      	ldrb	r0, [r3, #20]
 802c358:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802c35a:	f103 011c 	add.w	r1, r3, #28
 802c35e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802c360:	3320      	adds	r3, #32
 802c362:	461a      	mov	r2, r3
 802c364:	f7fd fcae 	bl	8029cc4 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
 802c368:	e01e      	b.n	802c3a8 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE+0xd0>
                             &data->activation_max_f32);
  } else {
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
 802c36a:	6a3b      	ldr	r3, [r7, #32]
 802c36c:	7d19      	ldrb	r1, [r3, #20]
 802c36e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802c370:	f103 0214 	add.w	r2, r3, #20
 802c374:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802c376:	3318      	adds	r3, #24
 802c378:	9300      	str	r3, [sp, #0]
 802c37a:	4613      	mov	r3, r2
 802c37c:	69ba      	ldr	r2, [r7, #24]
 802c37e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802c380:	f7fc f99a 	bl	80286b8 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
 802c384:	4603      	mov	r3, r0
 802c386:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 802c38a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 802c38e:	2b00      	cmp	r3, #0
 802c390:	d002      	beq.n	802c398 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE+0xc0>
 802c392:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 802c396:	e00c      	b.n	802c3b2 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE+0xda>
        context, params->activation, output, &data->activation_min,
        &data->activation_max));
    TFLITE_DCHECK_LE(data->activation_min, data->activation_max);
 802c398:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802c39a:	695a      	ldr	r2, [r3, #20]
 802c39c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802c39e:	699b      	ldr	r3, [r3, #24]
 802c3a0:	429a      	cmp	r2, r3
 802c3a2:	dd01      	ble.n	802c3a8 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE+0xd0>
 802c3a4:	f005 fe5a 	bl	803205c <abort>
  }

  // Set buffer index to a reset value
  data->buffer_idx = -1;
 802c3a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802c3aa:	f04f 32ff 	mov.w	r2, #4294967295
 802c3ae:	611a      	str	r2, [r3, #16]

  return kTfLiteOk;
 802c3b0:	2300      	movs	r3, #0
}
 802c3b2:	4618      	mov	r0, r3
 802c3b4:	3744      	adds	r7, #68	; 0x44
 802c3b6:	46bd      	mov	sp, r7
 802c3b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0802c3ba <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_111MaxEvalInt8EP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSF_>:
}

TfLiteStatus MaxEvalInt8(TfLiteContext* context, const TfLiteNode* node,
                         const TfLitePoolParams* params, const OpData& data,
                         const TfLiteEvalTensor* input,
                         TfLiteEvalTensor* output) {
 802c3ba:	b590      	push	{r4, r7, lr}
 802c3bc:	b0ab      	sub	sp, #172	; 0xac
 802c3be:	af04      	add	r7, sp, #16
 802c3c0:	60f8      	str	r0, [r7, #12]
 802c3c2:	60b9      	str	r1, [r7, #8]
 802c3c4:	607a      	str	r2, [r7, #4]
 802c3c6:	603b      	str	r3, [r7, #0]
  RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 802c3c8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 802c3cc:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 802c3d0:	4618      	mov	r0, r3
 802c3d2:	f7ff fd61 	bl	802be98 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 802c3d6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 802c3da:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 802c3de:	4618      	mov	r0, r3
 802c3e0:	f7ff fd5a 	bl	802be98 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
 802c3e4:	f107 0264 	add.w	r2, r7, #100	; 0x64
 802c3e8:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 802c3ec:	2303      	movs	r3, #3
 802c3ee:	2103      	movs	r1, #3
 802c3f0:	f7fd fcd3 	bl	8029d9a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 802c3f4:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94

  cmsis_nn_dims input_dims;
  input_dims.n = 1;
 802c3f8:	2301      	movs	r3, #1
 802c3fa:	657b      	str	r3, [r7, #84]	; 0x54
  input_dims.h = input_shape.Dims(1);
 802c3fc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 802c400:	2101      	movs	r1, #1
 802c402:	4618      	mov	r0, r3
 802c404:	f7fc fba6 	bl	8028b54 <_ZNK6tflite12RuntimeShape4DimsEi>
 802c408:	4603      	mov	r3, r0
 802c40a:	65bb      	str	r3, [r7, #88]	; 0x58
  input_dims.w = input_shape.Dims(2);
 802c40c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 802c410:	2102      	movs	r1, #2
 802c412:	4618      	mov	r0, r3
 802c414:	f7fc fb9e 	bl	8028b54 <_ZNK6tflite12RuntimeShape4DimsEi>
 802c418:	4603      	mov	r3, r0
 802c41a:	65fb      	str	r3, [r7, #92]	; 0x5c
  input_dims.c = depth;
 802c41c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 802c420:	663b      	str	r3, [r7, #96]	; 0x60

  cmsis_nn_dims output_dims;
  output_dims.n = 1;
 802c422:	2301      	movs	r3, #1
 802c424:	647b      	str	r3, [r7, #68]	; 0x44
  output_dims.h = output_shape.Dims(1);
 802c426:	f107 0364 	add.w	r3, r7, #100	; 0x64
 802c42a:	2101      	movs	r1, #1
 802c42c:	4618      	mov	r0, r3
 802c42e:	f7fc fb91 	bl	8028b54 <_ZNK6tflite12RuntimeShape4DimsEi>
 802c432:	4603      	mov	r3, r0
 802c434:	64bb      	str	r3, [r7, #72]	; 0x48
  output_dims.w = output_shape.Dims(2);
 802c436:	f107 0364 	add.w	r3, r7, #100	; 0x64
 802c43a:	2102      	movs	r1, #2
 802c43c:	4618      	mov	r0, r3
 802c43e:	f7fc fb89 	bl	8028b54 <_ZNK6tflite12RuntimeShape4DimsEi>
 802c442:	4603      	mov	r3, r0
 802c444:	64fb      	str	r3, [r7, #76]	; 0x4c
  output_dims.c = depth;
 802c446:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 802c44a:	653b      	str	r3, [r7, #80]	; 0x50

  cmsis_nn_pool_params pool_params;
  pool_params.stride.h = params->stride_height;
 802c44c:	687b      	ldr	r3, [r7, #4]
 802c44e:	689b      	ldr	r3, [r3, #8]
 802c450:	633b      	str	r3, [r7, #48]	; 0x30
  pool_params.stride.w = params->stride_width;
 802c452:	687b      	ldr	r3, [r7, #4]
 802c454:	685b      	ldr	r3, [r3, #4]
 802c456:	62fb      	str	r3, [r7, #44]	; 0x2c
  pool_params.padding.h = data.padding.height;
 802c458:	683b      	ldr	r3, [r7, #0]
 802c45a:	685b      	ldr	r3, [r3, #4]
 802c45c:	63bb      	str	r3, [r7, #56]	; 0x38
  pool_params.padding.w = data.padding.width;
 802c45e:	683b      	ldr	r3, [r7, #0]
 802c460:	681b      	ldr	r3, [r3, #0]
 802c462:	637b      	str	r3, [r7, #52]	; 0x34
  pool_params.activation.min = data.activation_min;
 802c464:	683b      	ldr	r3, [r7, #0]
 802c466:	695b      	ldr	r3, [r3, #20]
 802c468:	63fb      	str	r3, [r7, #60]	; 0x3c
  pool_params.activation.max = data.activation_max;
 802c46a:	683b      	ldr	r3, [r7, #0]
 802c46c:	699b      	ldr	r3, [r3, #24]
 802c46e:	643b      	str	r3, [r7, #64]	; 0x40

  cmsis_nn_dims filter_dims;
  filter_dims.n = 1;
 802c470:	2301      	movs	r3, #1
 802c472:	61fb      	str	r3, [r7, #28]
  filter_dims.h = params->filter_height;
 802c474:	687b      	ldr	r3, [r7, #4]
 802c476:	691b      	ldr	r3, [r3, #16]
 802c478:	623b      	str	r3, [r7, #32]
  filter_dims.w = params->filter_width;
 802c47a:	687b      	ldr	r3, [r7, #4]
 802c47c:	68db      	ldr	r3, [r3, #12]
 802c47e:	627b      	str	r3, [r7, #36]	; 0x24
  filter_dims.c = 1;
 802c480:	2301      	movs	r3, #1
 802c482:	62bb      	str	r3, [r7, #40]	; 0x28

  cmsis_nn_context ctx;
  ctx.buf = nullptr;
 802c484:	2300      	movs	r3, #0
 802c486:	617b      	str	r3, [r7, #20]
  ctx.size = 0;
 802c488:	2300      	movs	r3, #0
 802c48a:	61bb      	str	r3, [r7, #24]
  if (data.buffer_idx > -1) {
 802c48c:	683b      	ldr	r3, [r7, #0]
 802c48e:	691b      	ldr	r3, [r3, #16]
 802c490:	2b00      	cmp	r3, #0
 802c492:	db08      	blt.n	802c4a6 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_111MaxEvalInt8EP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSF_+0xec>
    ctx.buf = context->GetScratchBuffer(context, data.buffer_idx);
 802c494:	68fb      	ldr	r3, [r7, #12]
 802c496:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802c498:	683a      	ldr	r2, [r7, #0]
 802c49a:	6912      	ldr	r2, [r2, #16]
 802c49c:	4611      	mov	r1, r2
 802c49e:	68f8      	ldr	r0, [r7, #12]
 802c4a0:	4798      	blx	r3
 802c4a2:	4603      	mov	r3, r0
 802c4a4:	617b      	str	r3, [r7, #20]
  }

  TFLITE_DCHECK_EQ(
 802c4a6:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 802c4aa:	f7fd f925 	bl	80296f8 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 802c4ae:	4604      	mov	r4, r0
 802c4b0:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 802c4b4:	f7fd f92f 	bl	8029716 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 802c4b8:	4603      	mov	r3, r0
 802c4ba:	f107 0254 	add.w	r2, r7, #84	; 0x54
 802c4be:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 802c4c2:	f107 0014 	add.w	r0, r7, #20
 802c4c6:	9302      	str	r3, [sp, #8]
 802c4c8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 802c4cc:	9301      	str	r3, [sp, #4]
 802c4ce:	f107 031c 	add.w	r3, r7, #28
 802c4d2:	9300      	str	r3, [sp, #0]
 802c4d4:	4623      	mov	r3, r4
 802c4d6:	f7f5 fb4f 	bl	8021b78 <arm_max_pool_s8>
 802c4da:	4603      	mov	r3, r0
 802c4dc:	2b00      	cmp	r3, #0
 802c4de:	d001      	beq.n	802c4e4 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_111MaxEvalInt8EP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSF_+0x12a>
 802c4e0:	f005 fdbc 	bl	803205c <abort>
                      tflite::micro::GetTensorData<int8_t>(input), &filter_dims,
                      &output_dims,
                      tflite::micro::GetTensorData<int8_t>(output)),
      ARM_MATH_SUCCESS);

  return kTfLiteOk;
 802c4e4:	2400      	movs	r4, #0
  RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 802c4e6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 802c4ea:	4618      	mov	r0, r3
 802c4ec:	f7fc f981 	bl	80287f2 <_ZN6tflite12RuntimeShapeD1Ev>
  RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 802c4f0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 802c4f4:	4618      	mov	r0, r3
 802c4f6:	f7fc f97c 	bl	80287f2 <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
 802c4fa:	4623      	mov	r3, r4
}
 802c4fc:	4618      	mov	r0, r3
 802c4fe:	379c      	adds	r7, #156	; 0x9c
 802c500:	46bd      	mov	sp, r7
 802c502:	bd90      	pop	{r4, r7, pc}

0802c504 <_ZN6tflite3ops5micro7pooling4InitEP13TfLiteContextPKcj>:

}  // namespace

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 802c504:	b580      	push	{r7, lr}
 802c506:	b084      	sub	sp, #16
 802c508:	af00      	add	r7, sp, #0
 802c50a:	60f8      	str	r0, [r7, #12]
 802c50c:	60b9      	str	r1, [r7, #8]
 802c50e:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 802c510:	68fb      	ldr	r3, [r7, #12]
 802c512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802c514:	2b00      	cmp	r3, #0
 802c516:	d101      	bne.n	802c51c <_ZN6tflite3ops5micro7pooling4InitEP13TfLiteContextPKcj+0x18>
 802c518:	f005 fda0 	bl	803205c <abort>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
 802c51c:	68fb      	ldr	r3, [r7, #12]
 802c51e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802c520:	2124      	movs	r1, #36	; 0x24
 802c522:	68f8      	ldr	r0, [r7, #12]
 802c524:	4798      	blx	r3
 802c526:	4603      	mov	r3, r0
}
 802c528:	4618      	mov	r0, r3
 802c52a:	3710      	adds	r7, #16
 802c52c:	46bd      	mov	sp, r7
 802c52e:	bd80      	pop	{r7, pc}

0802c530 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus MaxPrepare(TfLiteContext* context, TfLiteNode* node) {
 802c530:	b590      	push	{r4, r7, lr}
 802c532:	b08b      	sub	sp, #44	; 0x2c
 802c534:	af02      	add	r7, sp, #8
 802c536:	6078      	str	r0, [r7, #4]
 802c538:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 802c53a:	683b      	ldr	r3, [r7, #0]
 802c53c:	691b      	ldr	r3, [r3, #16]
 802c53e:	2b00      	cmp	r3, #0
 802c540:	d101      	bne.n	802c546 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x16>
 802c542:	f005 fd8b 	bl	803205c <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 802c546:	683b      	ldr	r3, [r7, #0]
 802c548:	695b      	ldr	r3, [r3, #20]
 802c54a:	2b00      	cmp	r3, #0
 802c54c:	d101      	bne.n	802c552 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x22>
 802c54e:	f005 fd85 	bl	803205c <abort>

  OpData* data = static_cast<OpData*>(node->user_data);
 802c552:	683b      	ldr	r3, [r7, #0]
 802c554:	691b      	ldr	r3, [r3, #16]
 802c556:	61fb      	str	r3, [r7, #28]
  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);
 802c558:	683b      	ldr	r3, [r7, #0]
 802c55a:	695b      	ldr	r3, [r3, #20]
 802c55c:	61bb      	str	r3, [r7, #24]

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 802c55e:	2200      	movs	r2, #0
 802c560:	6839      	ldr	r1, [r7, #0]
 802c562:	6878      	ldr	r0, [r7, #4]
 802c564:	f7fb fd44 	bl	8027ff0 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 802c568:	6178      	str	r0, [r7, #20]
  TF_LITE_ENSURE(context, input != nullptr);
 802c56a:	697b      	ldr	r3, [r7, #20]
 802c56c:	2b00      	cmp	r3, #0
 802c56e:	d10b      	bne.n	802c588 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x58>
 802c570:	687b      	ldr	r3, [r7, #4]
 802c572:	695c      	ldr	r4, [r3, #20]
 802c574:	4b19      	ldr	r3, [pc, #100]	; (802c5dc <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0xac>)
 802c576:	9300      	str	r3, [sp, #0]
 802c578:	f44f 738e 	mov.w	r3, #284	; 0x11c
 802c57c:	4a18      	ldr	r2, [pc, #96]	; (802c5e0 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0xb0>)
 802c57e:	4919      	ldr	r1, [pc, #100]	; (802c5e4 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0xb4>)
 802c580:	6878      	ldr	r0, [r7, #4]
 802c582:	47a0      	blx	r4
 802c584:	2301      	movs	r3, #1
 802c586:	e024      	b.n	802c5d2 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0xa2>
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 802c588:	2200      	movs	r2, #0
 802c58a:	6839      	ldr	r1, [r7, #0]
 802c58c:	6878      	ldr	r0, [r7, #4]
 802c58e:	f7fb fd3f 	bl	8028010 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 802c592:	6138      	str	r0, [r7, #16]
  TF_LITE_ENSURE(context, output != nullptr);
 802c594:	693b      	ldr	r3, [r7, #16]
 802c596:	2b00      	cmp	r3, #0
 802c598:	d10b      	bne.n	802c5b2 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x82>
 802c59a:	687b      	ldr	r3, [r7, #4]
 802c59c:	695c      	ldr	r4, [r3, #20]
 802c59e:	4b12      	ldr	r3, [pc, #72]	; (802c5e8 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0xb8>)
 802c5a0:	9300      	str	r3, [sp, #0]
 802c5a2:	f44f 738f 	mov.w	r3, #286	; 0x11e
 802c5a6:	4a0e      	ldr	r2, [pc, #56]	; (802c5e0 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0xb0>)
 802c5a8:	490e      	ldr	r1, [pc, #56]	; (802c5e4 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0xb4>)
 802c5aa:	6878      	ldr	r0, [r7, #4]
 802c5ac:	47a0      	blx	r4
 802c5ae:	2301      	movs	r3, #1
 802c5b0:	e00f      	b.n	802c5d2 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0xa2>

  TF_LITE_ENSURE_STATUS(CalculateOpData(context, params, input, output, data));
 802c5b2:	69fb      	ldr	r3, [r7, #28]
 802c5b4:	9300      	str	r3, [sp, #0]
 802c5b6:	693b      	ldr	r3, [r7, #16]
 802c5b8:	697a      	ldr	r2, [r7, #20]
 802c5ba:	69b9      	ldr	r1, [r7, #24]
 802c5bc:	6878      	ldr	r0, [r7, #4]
 802c5be:	f7ff fe8b 	bl	802c2d8 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE>
 802c5c2:	4603      	mov	r3, r0
 802c5c4:	73fb      	strb	r3, [r7, #15]
 802c5c6:	7bfb      	ldrb	r3, [r7, #15]
 802c5c8:	2b00      	cmp	r3, #0
 802c5ca:	d001      	beq.n	802c5d0 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0xa0>
 802c5cc:	7bfb      	ldrb	r3, [r7, #15]
 802c5ce:	e000      	b.n	802c5d2 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0xa2>

  return kTfLiteOk;
 802c5d0:	2300      	movs	r3, #0
}
 802c5d2:	4618      	mov	r0, r3
 802c5d4:	3724      	adds	r7, #36	; 0x24
 802c5d6:	46bd      	mov	sp, r7
 802c5d8:	bd90      	pop	{r4, r7, pc}
 802c5da:	bf00      	nop
 802c5dc:	080354f8 	.word	0x080354f8
 802c5e0:	08035458 	.word	0x08035458
 802c5e4:	080354e0 	.word	0x080354e0
 802c5e8:	0803550c 	.word	0x0803550c

0802c5ec <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus AveragePrepare(TfLiteContext* context, TfLiteNode* node) {
 802c5ec:	b5b0      	push	{r4, r5, r7, lr}
 802c5ee:	b09a      	sub	sp, #104	; 0x68
 802c5f0:	af02      	add	r7, sp, #8
 802c5f2:	6078      	str	r0, [r7, #4]
 802c5f4:	6039      	str	r1, [r7, #0]
 802c5f6:	2400      	movs	r4, #0
  TFLITE_DCHECK(node->user_data != nullptr);
 802c5f8:	683b      	ldr	r3, [r7, #0]
 802c5fa:	691b      	ldr	r3, [r3, #16]
 802c5fc:	2b00      	cmp	r3, #0
 802c5fe:	d101      	bne.n	802c604 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x18>
 802c600:	f005 fd2c 	bl	803205c <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 802c604:	683b      	ldr	r3, [r7, #0]
 802c606:	695b      	ldr	r3, [r3, #20]
 802c608:	2b00      	cmp	r3, #0
 802c60a:	d101      	bne.n	802c610 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x24>
 802c60c:	f005 fd26 	bl	803205c <abort>

  OpData* data = static_cast<OpData*>(node->user_data);
 802c610:	683b      	ldr	r3, [r7, #0]
 802c612:	691b      	ldr	r3, [r3, #16]
 802c614:	65fb      	str	r3, [r7, #92]	; 0x5c
  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);
 802c616:	683b      	ldr	r3, [r7, #0]
 802c618:	695b      	ldr	r3, [r3, #20]
 802c61a:	65bb      	str	r3, [r7, #88]	; 0x58

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 802c61c:	2200      	movs	r2, #0
 802c61e:	6839      	ldr	r1, [r7, #0]
 802c620:	6878      	ldr	r0, [r7, #4]
 802c622:	f7fb fce5 	bl	8027ff0 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 802c626:	6578      	str	r0, [r7, #84]	; 0x54
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 802c628:	2200      	movs	r2, #0
 802c62a:	6839      	ldr	r1, [r7, #0]
 802c62c:	6878      	ldr	r0, [r7, #4]
 802c62e:	f7fb fcef 	bl	8028010 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 802c632:	6538      	str	r0, [r7, #80]	; 0x50

  TF_LITE_ENSURE_STATUS(CalculateOpData(context, params, input, output, data));
 802c634:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802c636:	9300      	str	r3, [sp, #0]
 802c638:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802c63a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802c63c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 802c63e:	6878      	ldr	r0, [r7, #4]
 802c640:	f7ff fe4a 	bl	802c2d8 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE>
 802c644:	4603      	mov	r3, r0
 802c646:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 802c64a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 802c64e:	2b00      	cmp	r3, #0
 802c650:	d002      	beq.n	802c658 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x6c>
 802c652:	f897 404f 	ldrb.w	r4, [r7, #79]	; 0x4f
 802c656:	e064      	b.n	802c722 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x136>

  if (input->type == kTfLiteInt8) {
 802c658:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802c65a:	781b      	ldrb	r3, [r3, #0]
 802c65c:	2b09      	cmp	r3, #9
 802c65e:	d15f      	bne.n	802c720 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x134>
    RuntimeShape input_shape = GetTensorShape(input);
 802c660:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802c664:	6d79      	ldr	r1, [r7, #84]	; 0x54
 802c666:	4618      	mov	r0, r3
 802c668:	f7fc f93d 	bl	80288e6 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 802c66c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802c670:	4618      	mov	r0, r3
 802c672:	f7fc f8d4 	bl	802881e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 802c676:	4603      	mov	r3, r0
 802c678:	2b04      	cmp	r3, #4
 802c67a:	d001      	beq.n	802c680 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x94>
 802c67c:	f005 fcee 	bl	803205c <abort>

    RuntimeShape output_shape = GetTensorShape(output);
 802c680:	f107 030c 	add.w	r3, r7, #12
 802c684:	6d39      	ldr	r1, [r7, #80]	; 0x50
 802c686:	4618      	mov	r0, r3
 802c688:	f7fc f92d 	bl	80288e6 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 802c68c:	f107 030c 	add.w	r3, r7, #12
 802c690:	4618      	mov	r0, r3
 802c692:	f7fc f8c4 	bl	802881e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 802c696:	4603      	mov	r3, r0
 802c698:	2b04      	cmp	r3, #4
 802c69a:	d001      	beq.n	802c6a0 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0xb4>
 802c69c:	f005 fcde 	bl	803205c <abort>

    const int depth = MatchingDim(input_shape, 3, output_shape, 3);
 802c6a0:	f107 020c 	add.w	r2, r7, #12
 802c6a4:	f107 0024 	add.w	r0, r7, #36	; 0x24
 802c6a8:	2303      	movs	r3, #3
 802c6aa:	2103      	movs	r1, #3
 802c6ac:	f7fd fb75 	bl	8029d9a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 802c6b0:	64b8      	str	r0, [r7, #72]	; 0x48
    const int output_width = output_shape.Dims(2);
 802c6b2:	f107 030c 	add.w	r3, r7, #12
 802c6b6:	2102      	movs	r1, #2
 802c6b8:	4618      	mov	r0, r3
 802c6ba:	f7fc fa4b 	bl	8028b54 <_ZNK6tflite12RuntimeShape4DimsEi>
 802c6be:	6478      	str	r0, [r7, #68]	; 0x44

    const int32_t buffer_size =
        arm_avgpool_s8_get_buffer_size(output_width, depth);
 802c6c0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 802c6c2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 802c6c4:	f7f5 f92b 	bl	802191e <arm_avgpool_s8_get_buffer_size>
 802c6c8:	6438      	str	r0, [r7, #64]	; 0x40

    if (buffer_size > 0) {
 802c6ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802c6cc:	2b00      	cmp	r3, #0
 802c6ce:	dd11      	ble.n	802c6f4 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x108>
      TF_LITE_ENSURE_STATUS(context->RequestScratchBufferInArena(
 802c6d0:	687b      	ldr	r3, [r7, #4]
 802c6d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802c6d4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 802c6d6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 802c6d8:	3210      	adds	r2, #16
 802c6da:	6878      	ldr	r0, [r7, #4]
 802c6dc:	4798      	blx	r3
 802c6de:	4603      	mov	r3, r0
 802c6e0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 802c6e4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 802c6e8:	2b00      	cmp	r3, #0
 802c6ea:	d007      	beq.n	802c6fc <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x110>
 802c6ec:	f897 403f 	ldrb.w	r4, [r7, #63]	; 0x3f
 802c6f0:	2500      	movs	r5, #0
 802c6f2:	e004      	b.n	802c6fe <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x112>
          context, buffer_size, &data->buffer_idx));
    } else {
      data->buffer_idx = -1;
 802c6f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802c6f6:	f04f 32ff 	mov.w	r2, #4294967295
 802c6fa:	611a      	str	r2, [r3, #16]
 802c6fc:	2501      	movs	r5, #1
 802c6fe:	f107 030c 	add.w	r3, r7, #12
 802c702:	4618      	mov	r0, r3
 802c704:	f7fc f875 	bl	80287f2 <_ZN6tflite12RuntimeShapeD1Ev>
 802c708:	2d01      	cmp	r5, #1
 802c70a:	d001      	beq.n	802c710 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x124>
 802c70c:	2500      	movs	r5, #0
 802c70e:	e000      	b.n	802c712 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x126>
 802c710:	2501      	movs	r5, #1
 802c712:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802c716:	4618      	mov	r0, r3
 802c718:	f7fc f86b 	bl	80287f2 <_ZN6tflite12RuntimeShapeD1Ev>
 802c71c:	2d01      	cmp	r5, #1
 802c71e:	d100      	bne.n	802c722 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x136>
    }
  }
  return kTfLiteOk;
 802c720:	2400      	movs	r4, #0
}
 802c722:	4623      	mov	r3, r4
 802c724:	4618      	mov	r0, r3
 802c726:	3760      	adds	r7, #96	; 0x60
 802c728:	46bd      	mov	sp, r7
 802c72a:	bdb0      	pop	{r4, r5, r7, pc}

0802c72c <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus AverageEval(TfLiteContext* context, TfLiteNode* node) {
 802c72c:	b590      	push	{r4, r7, lr}
 802c72e:	b087      	sub	sp, #28
 802c730:	af00      	add	r7, sp, #0
 802c732:	6078      	str	r0, [r7, #4]
 802c734:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->builtin_data != nullptr);
 802c736:	683b      	ldr	r3, [r7, #0]
 802c738:	695b      	ldr	r3, [r3, #20]
 802c73a:	2b00      	cmp	r3, #0
 802c73c:	d101      	bne.n	802c742 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x16>
 802c73e:	f005 fc8d 	bl	803205c <abort>
  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);
 802c742:	683b      	ldr	r3, [r7, #0]
 802c744:	695b      	ldr	r3, [r3, #20]
 802c746:	617b      	str	r3, [r7, #20]

  TFLITE_DCHECK(node->user_data != nullptr);
 802c748:	683b      	ldr	r3, [r7, #0]
 802c74a:	691b      	ldr	r3, [r3, #16]
 802c74c:	2b00      	cmp	r3, #0
 802c74e:	d101      	bne.n	802c754 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x28>
 802c750:	f005 fc84 	bl	803205c <abort>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));
 802c754:	683b      	ldr	r3, [r7, #0]
 802c756:	691b      	ldr	r3, [r3, #16]
 802c758:	613b      	str	r3, [r7, #16]

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kInputTensor);
 802c75a:	2200      	movs	r2, #0
 802c75c:	6839      	ldr	r1, [r7, #0]
 802c75e:	6878      	ldr	r0, [r7, #4]
 802c760:	f7fc facc 	bl	8028cfc <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 802c764:	60f8      	str	r0, [r7, #12]
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
 802c766:	2200      	movs	r2, #0
 802c768:	6839      	ldr	r1, [r7, #0]
 802c76a:	6878      	ldr	r0, [r7, #4]
 802c76c:	f7fc fad6 	bl	8028d1c <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 802c770:	60b8      	str	r0, [r7, #8]

  // Inputs and outputs share the same type, guaranteed by the converter.
  switch (input->type) {
 802c772:	68fb      	ldr	r3, [r7, #12]
 802c774:	7a1b      	ldrb	r3, [r3, #8]
 802c776:	2b09      	cmp	r3, #9
 802c778:	d024      	beq.n	802c7c4 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x98>
 802c77a:	2b09      	cmp	r3, #9
 802c77c:	dc31      	bgt.n	802c7e2 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0xb6>
 802c77e:	2b01      	cmp	r3, #1
 802c780:	d002      	beq.n	802c788 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x5c>
 802c782:	2b03      	cmp	r3, #3
 802c784:	d00f      	beq.n	802c7a6 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x7a>
 802c786:	e02c      	b.n	802c7e2 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0xb6>
    case kTfLiteFloat32:
      #if EI_TFLITE_DISABLE_AVERAGE_POOL_2D_IN_F32
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 802c788:	687b      	ldr	r3, [r7, #4]
 802c78a:	695c      	ldr	r4, [r3, #20]
 802c78c:	68fb      	ldr	r3, [r7, #12]
 802c78e:	7a1b      	ldrb	r3, [r3, #8]
 802c790:	4618      	mov	r0, r3
 802c792:	f7fb f8e7 	bl	8027964 <TfLiteTypeGetName>
 802c796:	4602      	mov	r2, r0
 802c798:	68fb      	ldr	r3, [r7, #12]
 802c79a:	7a1b      	ldrb	r3, [r3, #8]
 802c79c:	4919      	ldr	r1, [pc, #100]	; (802c804 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0xd8>)
 802c79e:	6878      	ldr	r0, [r7, #4]
 802c7a0:	47a0      	blx	r4
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 802c7a2:	2301      	movs	r3, #1
 802c7a4:	e02a      	b.n	802c7fc <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0xd0>

      AverageEvalFloat(context, node, params, data, input, output);
      break;
    case kTfLiteUInt8:
      #if EI_TFLITE_DISABLE_AVERAGE_POOL_2D_IN_U8
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 802c7a6:	687b      	ldr	r3, [r7, #4]
 802c7a8:	695c      	ldr	r4, [r3, #20]
 802c7aa:	68fb      	ldr	r3, [r7, #12]
 802c7ac:	7a1b      	ldrb	r3, [r3, #8]
 802c7ae:	4618      	mov	r0, r3
 802c7b0:	f7fb f8d8 	bl	8027964 <TfLiteTypeGetName>
 802c7b4:	4602      	mov	r2, r0
 802c7b6:	68fb      	ldr	r3, [r7, #12]
 802c7b8:	7a1b      	ldrb	r3, [r3, #8]
 802c7ba:	4912      	ldr	r1, [pc, #72]	; (802c804 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0xd8>)
 802c7bc:	6878      	ldr	r0, [r7, #4]
 802c7be:	47a0      	blx	r4
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 802c7c0:	2301      	movs	r3, #1
 802c7c2:	e01b      	b.n	802c7fc <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0xd0>

      AverageEvalQuantized(context, node, params, data, input, output);
      break;
    case kTfLiteInt8:
      #if EI_TFLITE_DISABLE_AVERAGE_POOL_2D_IN_I8
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 802c7c4:	687b      	ldr	r3, [r7, #4]
 802c7c6:	695c      	ldr	r4, [r3, #20]
 802c7c8:	68fb      	ldr	r3, [r7, #12]
 802c7ca:	7a1b      	ldrb	r3, [r3, #8]
 802c7cc:	4618      	mov	r0, r3
 802c7ce:	f7fb f8c9 	bl	8027964 <TfLiteTypeGetName>
 802c7d2:	4602      	mov	r2, r0
 802c7d4:	68fb      	ldr	r3, [r7, #12]
 802c7d6:	7a1b      	ldrb	r3, [r3, #8]
 802c7d8:	490a      	ldr	r1, [pc, #40]	; (802c804 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0xd8>)
 802c7da:	6878      	ldr	r0, [r7, #4]
 802c7dc:	47a0      	blx	r4
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 802c7de:	2301      	movs	r3, #1
 802c7e0:	e00c      	b.n	802c7fc <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0xd0>
      #endif

      AverageEvalQuantized(context, node, params, data, input, output);
      break;
    default:
      TF_LITE_KERNEL_LOG(context, "Input type %s is not currently supported",
 802c7e2:	687b      	ldr	r3, [r7, #4]
 802c7e4:	695c      	ldr	r4, [r3, #20]
 802c7e6:	68fb      	ldr	r3, [r7, #12]
 802c7e8:	7a1b      	ldrb	r3, [r3, #8]
 802c7ea:	4618      	mov	r0, r3
 802c7ec:	f7fb f8ba 	bl	8027964 <TfLiteTypeGetName>
 802c7f0:	4603      	mov	r3, r0
 802c7f2:	461a      	mov	r2, r3
 802c7f4:	4904      	ldr	r1, [pc, #16]	; (802c808 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0xdc>)
 802c7f6:	6878      	ldr	r0, [r7, #4]
 802c7f8:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type));
      return kTfLiteError;
 802c7fa:	2301      	movs	r3, #1
  }
  return kTfLiteOk;
}
 802c7fc:	4618      	mov	r0, r3
 802c7fe:	371c      	adds	r7, #28
 802c800:	46bd      	mov	sp, r7
 802c802:	bd90      	pop	{r4, r7, pc}
 802c804:	08035520 	.word	0x08035520
 802c808:	0803553c 	.word	0x0803553c

0802c80c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus MaxEval(TfLiteContext* context, TfLiteNode* node) {
 802c80c:	b590      	push	{r4, r7, lr}
 802c80e:	b089      	sub	sp, #36	; 0x24
 802c810:	af02      	add	r7, sp, #8
 802c812:	6078      	str	r0, [r7, #4]
 802c814:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->builtin_data != nullptr);
 802c816:	683b      	ldr	r3, [r7, #0]
 802c818:	695b      	ldr	r3, [r3, #20]
 802c81a:	2b00      	cmp	r3, #0
 802c81c:	d101      	bne.n	802c822 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x16>
 802c81e:	f005 fc1d 	bl	803205c <abort>
  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);
 802c822:	683b      	ldr	r3, [r7, #0]
 802c824:	695b      	ldr	r3, [r3, #20]
 802c826:	617b      	str	r3, [r7, #20]

  TFLITE_DCHECK(node->user_data != nullptr);
 802c828:	683b      	ldr	r3, [r7, #0]
 802c82a:	691b      	ldr	r3, [r3, #16]
 802c82c:	2b00      	cmp	r3, #0
 802c82e:	d101      	bne.n	802c834 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x28>
 802c830:	f005 fc14 	bl	803205c <abort>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));
 802c834:	683b      	ldr	r3, [r7, #0]
 802c836:	691b      	ldr	r3, [r3, #16]
 802c838:	613b      	str	r3, [r7, #16]

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kInputTensor);
 802c83a:	2200      	movs	r2, #0
 802c83c:	6839      	ldr	r1, [r7, #0]
 802c83e:	6878      	ldr	r0, [r7, #4]
 802c840:	f7fc fa5c 	bl	8028cfc <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 802c844:	60f8      	str	r0, [r7, #12]
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
 802c846:	2200      	movs	r2, #0
 802c848:	6839      	ldr	r1, [r7, #0]
 802c84a:	6878      	ldr	r0, [r7, #4]
 802c84c:	f7fc fa66 	bl	8028d1c <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 802c850:	60b8      	str	r0, [r7, #8]

  switch (input->type) {
 802c852:	68fb      	ldr	r3, [r7, #12]
 802c854:	7a1b      	ldrb	r3, [r3, #8]
 802c856:	2b09      	cmp	r3, #9
 802c858:	d024      	beq.n	802c8a4 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x98>
 802c85a:	2b09      	cmp	r3, #9
 802c85c:	dc2f      	bgt.n	802c8be <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xb2>
 802c85e:	2b01      	cmp	r3, #1
 802c860:	d002      	beq.n	802c868 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x5c>
 802c862:	2b03      	cmp	r3, #3
 802c864:	d00f      	beq.n	802c886 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x7a>
 802c866:	e02a      	b.n	802c8be <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xb2>
    case kTfLiteFloat32:
      #if EI_TFLITE_DISABLE_MAX_POOL_2D_IN_F32
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 802c868:	687b      	ldr	r3, [r7, #4]
 802c86a:	695c      	ldr	r4, [r3, #20]
 802c86c:	68fb      	ldr	r3, [r7, #12]
 802c86e:	7a1b      	ldrb	r3, [r3, #8]
 802c870:	4618      	mov	r0, r3
 802c872:	f7fb f877 	bl	8027964 <TfLiteTypeGetName>
 802c876:	4602      	mov	r2, r0
 802c878:	68fb      	ldr	r3, [r7, #12]
 802c87a:	7a1b      	ldrb	r3, [r3, #8]
 802c87c:	4918      	ldr	r1, [pc, #96]	; (802c8e0 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xd4>)
 802c87e:	6878      	ldr	r0, [r7, #4]
 802c880:	47a0      	blx	r4
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 802c882:	2301      	movs	r3, #1
 802c884:	e028      	b.n	802c8d8 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xcc>

      MaxEvalFloat(context, node, params, data, input, output);
      break;
    case kTfLiteUInt8:
      #if EI_TFLITE_DISABLE_MAX_POOL_2D_IN_U8
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 802c886:	687b      	ldr	r3, [r7, #4]
 802c888:	695c      	ldr	r4, [r3, #20]
 802c88a:	68fb      	ldr	r3, [r7, #12]
 802c88c:	7a1b      	ldrb	r3, [r3, #8]
 802c88e:	4618      	mov	r0, r3
 802c890:	f7fb f868 	bl	8027964 <TfLiteTypeGetName>
 802c894:	4602      	mov	r2, r0
 802c896:	68fb      	ldr	r3, [r7, #12]
 802c898:	7a1b      	ldrb	r3, [r3, #8]
 802c89a:	4911      	ldr	r1, [pc, #68]	; (802c8e0 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xd4>)
 802c89c:	6878      	ldr	r0, [r7, #4]
 802c89e:	47a0      	blx	r4
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 802c8a0:	2301      	movs	r3, #1
 802c8a2:	e019      	b.n	802c8d8 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xcc>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
      #endif

      MaxEvalInt8(context, node, params, data, input, output);
 802c8a4:	68bb      	ldr	r3, [r7, #8]
 802c8a6:	9301      	str	r3, [sp, #4]
 802c8a8:	68fb      	ldr	r3, [r7, #12]
 802c8aa:	9300      	str	r3, [sp, #0]
 802c8ac:	693b      	ldr	r3, [r7, #16]
 802c8ae:	697a      	ldr	r2, [r7, #20]
 802c8b0:	6839      	ldr	r1, [r7, #0]
 802c8b2:	6878      	ldr	r0, [r7, #4]
 802c8b4:	f7ff fd81 	bl	802c3ba <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_111MaxEvalInt8EP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSF_>
      break;
 802c8b8:	bf00      	nop
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s not currently supported.",
                         TfLiteTypeGetName(input->type));
      return kTfLiteError;
  }
  return kTfLiteOk;
 802c8ba:	2300      	movs	r3, #0
 802c8bc:	e00c      	b.n	802c8d8 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xcc>
      TF_LITE_KERNEL_LOG(context, "Type %s not currently supported.",
 802c8be:	687b      	ldr	r3, [r7, #4]
 802c8c0:	695c      	ldr	r4, [r3, #20]
 802c8c2:	68fb      	ldr	r3, [r7, #12]
 802c8c4:	7a1b      	ldrb	r3, [r3, #8]
 802c8c6:	4618      	mov	r0, r3
 802c8c8:	f7fb f84c 	bl	8027964 <TfLiteTypeGetName>
 802c8cc:	4603      	mov	r3, r0
 802c8ce:	461a      	mov	r2, r3
 802c8d0:	4904      	ldr	r1, [pc, #16]	; (802c8e4 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xd8>)
 802c8d2:	6878      	ldr	r0, [r7, #4]
 802c8d4:	47a0      	blx	r4
      return kTfLiteError;
 802c8d6:	2301      	movs	r3, #1
}
 802c8d8:	4618      	mov	r0, r3
 802c8da:	371c      	adds	r7, #28
 802c8dc:	46bd      	mov	sp, r7
 802c8de:	bd90      	pop	{r4, r7, pc}
 802c8e0:	08035520 	.word	0x08035520
 802c8e4:	08035568 	.word	0x08035568

0802c8e8 <_ZN6tflite3ops5micro20Register_MAX_POOL_2DEv>:
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
}

TfLiteRegistration Register_MAX_POOL_2D() {
 802c8e8:	b4b0      	push	{r4, r5, r7}
 802c8ea:	b083      	sub	sp, #12
 802c8ec:	af00      	add	r7, sp, #0
 802c8ee:	6078      	str	r0, [r7, #4]
          /*prepare=*/pooling::MaxPrepare,
          /*invoke=*/pooling::MaxEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 802c8f0:	687b      	ldr	r3, [r7, #4]
 802c8f2:	4a07      	ldr	r2, [pc, #28]	; (802c910 <_ZN6tflite3ops5micro20Register_MAX_POOL_2DEv+0x28>)
 802c8f4:	461c      	mov	r4, r3
 802c8f6:	4615      	mov	r5, r2
 802c8f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802c8fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802c8fc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 802c900:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 802c904:	6878      	ldr	r0, [r7, #4]
 802c906:	370c      	adds	r7, #12
 802c908:	46bd      	mov	sp, r7
 802c90a:	bcb0      	pop	{r4, r5, r7}
 802c90c:	4770      	bx	lr
 802c90e:	bf00      	nop
 802c910:	080355ac 	.word	0x080355ac

0802c914 <_ZSt3maxIhERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 802c914:	b480      	push	{r7}
 802c916:	b083      	sub	sp, #12
 802c918:	af00      	add	r7, sp, #0
 802c91a:	6078      	str	r0, [r7, #4]
 802c91c:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 802c91e:	687b      	ldr	r3, [r7, #4]
 802c920:	781a      	ldrb	r2, [r3, #0]
 802c922:	683b      	ldr	r3, [r7, #0]
 802c924:	781b      	ldrb	r3, [r3, #0]
 802c926:	429a      	cmp	r2, r3
 802c928:	d201      	bcs.n	802c92e <_ZSt3maxIhERKT_S2_S2_+0x1a>
	return __b;
 802c92a:	683b      	ldr	r3, [r7, #0]
 802c92c:	e000      	b.n	802c930 <_ZSt3maxIhERKT_S2_S2_+0x1c>
      return __a;
 802c92e:	687b      	ldr	r3, [r7, #4]
    }
 802c930:	4618      	mov	r0, r3
 802c932:	370c      	adds	r7, #12
 802c934:	46bd      	mov	sp, r7
 802c936:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c93a:	4770      	bx	lr

0802c93c <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 802c93c:	b480      	push	{r7}
 802c93e:	b083      	sub	sp, #12
 802c940:	af00      	add	r7, sp, #0
 802c942:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 802c944:	687b      	ldr	r3, [r7, #4]
 802c946:	2b00      	cmp	r3, #0
 802c948:	d002      	beq.n	802c950 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor+0x14>
 802c94a:	687b      	ldr	r3, [r7, #4]
 802c94c:	681b      	ldr	r3, [r3, #0]
 802c94e:	e000      	b.n	802c952 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor+0x16>
 802c950:	2300      	movs	r3, #0
}
 802c952:	4618      	mov	r0, r3
 802c954:	370c      	adds	r7, #12
 802c956:	46bd      	mov	sp, r7
 802c958:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c95c:	4770      	bx	lr
	...

0802c960 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>:
namespace reshape {

constexpr int kInputTensor = 0;
constexpr int kOutputTensor = 0;

TfLiteStatus ReshapeOutput(TfLiteContext* context, TfLiteNode* node) {
 802c960:	b5b0      	push	{r4, r5, r7, lr}
 802c962:	b08e      	sub	sp, #56	; 0x38
 802c964:	af04      	add	r7, sp, #16
 802c966:	6078      	str	r0, [r7, #4]
 802c968:	6039      	str	r1, [r7, #0]
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 802c96a:	2200      	movs	r2, #0
 802c96c:	6839      	ldr	r1, [r7, #0]
 802c96e:	6878      	ldr	r0, [r7, #4]
 802c970:	f7fb fb3e 	bl	8027ff0 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 802c974:	61b8      	str	r0, [r7, #24]
  TF_LITE_ENSURE(context, input != nullptr);
 802c976:	69bb      	ldr	r3, [r7, #24]
 802c978:	2b00      	cmp	r3, #0
 802c97a:	d10a      	bne.n	802c992 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x32>
 802c97c:	687b      	ldr	r3, [r7, #4]
 802c97e:	695c      	ldr	r4, [r3, #20]
 802c980:	4b62      	ldr	r3, [pc, #392]	; (802cb0c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1ac>)
 802c982:	9300      	str	r3, [sp, #0]
 802c984:	2323      	movs	r3, #35	; 0x23
 802c986:	4a62      	ldr	r2, [pc, #392]	; (802cb10 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b0>)
 802c988:	4962      	ldr	r1, [pc, #392]	; (802cb14 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b4>)
 802c98a:	6878      	ldr	r0, [r7, #4]
 802c98c:	47a0      	blx	r4
 802c98e:	2301      	movs	r3, #1
 802c990:	e0b8      	b.n	802cb04 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1a4>
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 802c992:	2200      	movs	r2, #0
 802c994:	6839      	ldr	r1, [r7, #0]
 802c996:	6878      	ldr	r0, [r7, #4]
 802c998:	f7fb fb3a 	bl	8028010 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 802c99c:	6178      	str	r0, [r7, #20]
  TF_LITE_ENSURE(context, output != nullptr);
 802c99e:	697b      	ldr	r3, [r7, #20]
 802c9a0:	2b00      	cmp	r3, #0
 802c9a2:	d10a      	bne.n	802c9ba <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x5a>
 802c9a4:	687b      	ldr	r3, [r7, #4]
 802c9a6:	695c      	ldr	r4, [r3, #20]
 802c9a8:	4b5b      	ldr	r3, [pc, #364]	; (802cb18 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b8>)
 802c9aa:	9300      	str	r3, [sp, #0]
 802c9ac:	2325      	movs	r3, #37	; 0x25
 802c9ae:	4a58      	ldr	r2, [pc, #352]	; (802cb10 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b0>)
 802c9b0:	4958      	ldr	r1, [pc, #352]	; (802cb14 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b4>)
 802c9b2:	6878      	ldr	r0, [r7, #4]
 802c9b4:	47a0      	blx	r4
 802c9b6:	2301      	movs	r3, #1
 802c9b8:	e0a4      	b.n	802cb04 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1a4>
  // Tensorflow's Reshape allows one of the shape components to have the
  // special -1 value, meaning it will be calculated automatically based on the
  // input. Here we calculate what that dimension should be so that the number
  // of output elements in the same as the number of input elements.
  int num_input_elements = NumElements(input);
 802c9ba:	69b8      	ldr	r0, [r7, #24]
 802c9bc:	f7fb fa98 	bl	8027ef0 <_ZN6tflite11NumElementsEPK12TfLiteTensor>
 802c9c0:	4602      	mov	r2, r0
 802c9c2:	460b      	mov	r3, r1
 802c9c4:	4613      	mov	r3, r2
 802c9c6:	613b      	str	r3, [r7, #16]
  TfLiteIntArray* output_shape = output->dims;
 802c9c8:	697b      	ldr	r3, [r7, #20]
 802c9ca:	689b      	ldr	r3, [r3, #8]
 802c9cc:	60fb      	str	r3, [r7, #12]

  if (NumInputs(node) == 1 &&  // Legacy scalar supported with params.
 802c9ce:	6838      	ldr	r0, [r7, #0]
 802c9d0:	f7fd f9ba 	bl	8029d48 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 802c9d4:	4603      	mov	r3, r0
      output_shape->size == 1 && output_shape->data[0] == 0) {
 802c9d6:	2b01      	cmp	r3, #1
 802c9d8:	d109      	bne.n	802c9ee <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x8e>
 802c9da:	68fb      	ldr	r3, [r7, #12]
 802c9dc:	681b      	ldr	r3, [r3, #0]
  if (NumInputs(node) == 1 &&  // Legacy scalar supported with params.
 802c9de:	2b01      	cmp	r3, #1
 802c9e0:	d105      	bne.n	802c9ee <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x8e>
      output_shape->size == 1 && output_shape->data[0] == 0) {
 802c9e2:	68fb      	ldr	r3, [r7, #12]
 802c9e4:	685b      	ldr	r3, [r3, #4]
 802c9e6:	2b00      	cmp	r3, #0
 802c9e8:	d101      	bne.n	802c9ee <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x8e>
 802c9ea:	2301      	movs	r3, #1
 802c9ec:	e000      	b.n	802c9f0 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x90>
 802c9ee:	2300      	movs	r3, #0
  if (NumInputs(node) == 1 &&  // Legacy scalar supported with params.
 802c9f0:	2b00      	cmp	r3, #0
 802c9f2:	d002      	beq.n	802c9fa <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x9a>
    // Legacy tflite models use a shape parameter of [0] to indicate scalars,
    // so adjust accordingly. TODO(b/111614235): Allow zero-sized buffers during
    // toco conversion.
    output_shape->size = 0;
 802c9f4:	68fb      	ldr	r3, [r7, #12]
 802c9f6:	2200      	movs	r2, #0
 802c9f8:	601a      	str	r2, [r3, #0]
  }

  int num_output_elements = 1;
 802c9fa:	2301      	movs	r3, #1
 802c9fc:	627b      	str	r3, [r7, #36]	; 0x24
  int stretch_dim = -1;
 802c9fe:	f04f 33ff 	mov.w	r3, #4294967295
 802ca02:	623b      	str	r3, [r7, #32]
  for (int i = 0; i < output_shape->size; ++i) {
 802ca04:	2300      	movs	r3, #0
 802ca06:	61fb      	str	r3, [r7, #28]
 802ca08:	68fb      	ldr	r3, [r7, #12]
 802ca0a:	681b      	ldr	r3, [r3, #0]
 802ca0c:	69fa      	ldr	r2, [r7, #28]
 802ca0e:	429a      	cmp	r2, r3
 802ca10:	da2b      	bge.n	802ca6a <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x10a>
    int value = output_shape->data[i];
 802ca12:	68fa      	ldr	r2, [r7, #12]
 802ca14:	69fb      	ldr	r3, [r7, #28]
 802ca16:	009b      	lsls	r3, r3, #2
 802ca18:	4413      	add	r3, r2
 802ca1a:	685b      	ldr	r3, [r3, #4]
 802ca1c:	60bb      	str	r3, [r7, #8]
    if (value == -1) {
 802ca1e:	68bb      	ldr	r3, [r7, #8]
 802ca20:	f1b3 3fff 	cmp.w	r3, #4294967295
 802ca24:	d118      	bne.n	802ca58 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xf8>
      TF_LITE_ENSURE_EQ(context, stretch_dim, -1);
 802ca26:	6a3b      	ldr	r3, [r7, #32]
 802ca28:	f1b3 3fff 	cmp.w	r3, #4294967295
 802ca2c:	d011      	beq.n	802ca52 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xf2>
 802ca2e:	687b      	ldr	r3, [r7, #4]
 802ca30:	695c      	ldr	r4, [r3, #20]
 802ca32:	f04f 33ff 	mov.w	r3, #4294967295
 802ca36:	9303      	str	r3, [sp, #12]
 802ca38:	6a3b      	ldr	r3, [r7, #32]
 802ca3a:	9302      	str	r3, [sp, #8]
 802ca3c:	4b37      	ldr	r3, [pc, #220]	; (802cb1c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1bc>)
 802ca3e:	9301      	str	r3, [sp, #4]
 802ca40:	4b37      	ldr	r3, [pc, #220]	; (802cb20 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1c0>)
 802ca42:	9300      	str	r3, [sp, #0]
 802ca44:	233a      	movs	r3, #58	; 0x3a
 802ca46:	4a32      	ldr	r2, [pc, #200]	; (802cb10 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b0>)
 802ca48:	4936      	ldr	r1, [pc, #216]	; (802cb24 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1c4>)
 802ca4a:	6878      	ldr	r0, [r7, #4]
 802ca4c:	47a0      	blx	r4
 802ca4e:	2301      	movs	r3, #1
 802ca50:	e058      	b.n	802cb04 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1a4>
      stretch_dim = i;
 802ca52:	69fb      	ldr	r3, [r7, #28]
 802ca54:	623b      	str	r3, [r7, #32]
 802ca56:	e004      	b.n	802ca62 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x102>
    } else {
      num_output_elements *= value;
 802ca58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802ca5a:	68ba      	ldr	r2, [r7, #8]
 802ca5c:	fb02 f303 	mul.w	r3, r2, r3
 802ca60:	627b      	str	r3, [r7, #36]	; 0x24
  for (int i = 0; i < output_shape->size; ++i) {
 802ca62:	69fb      	ldr	r3, [r7, #28]
 802ca64:	3301      	adds	r3, #1
 802ca66:	61fb      	str	r3, [r7, #28]
 802ca68:	e7ce      	b.n	802ca08 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xa8>
    }
  }
  if (stretch_dim != -1) {
 802ca6a:	6a3b      	ldr	r3, [r7, #32]
 802ca6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 802ca70:	d011      	beq.n	802ca96 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x136>
    output_shape->data[stretch_dim] = num_input_elements / num_output_elements;
 802ca72:	693a      	ldr	r2, [r7, #16]
 802ca74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802ca76:	fb92 f2f3 	sdiv	r2, r2, r3
 802ca7a:	68f9      	ldr	r1, [r7, #12]
 802ca7c:	6a3b      	ldr	r3, [r7, #32]
 802ca7e:	009b      	lsls	r3, r3, #2
 802ca80:	440b      	add	r3, r1
 802ca82:	605a      	str	r2, [r3, #4]
    num_output_elements *= output_shape->data[stretch_dim];
 802ca84:	68fa      	ldr	r2, [r7, #12]
 802ca86:	6a3b      	ldr	r3, [r7, #32]
 802ca88:	009b      	lsls	r3, r3, #2
 802ca8a:	4413      	add	r3, r2
 802ca8c:	685a      	ldr	r2, [r3, #4]
 802ca8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802ca90:	fb02 f303 	mul.w	r3, r2, r3
 802ca94:	627b      	str	r3, [r7, #36]	; 0x24
  }

  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
 802ca96:	69bb      	ldr	r3, [r7, #24]
 802ca98:	781a      	ldrb	r2, [r3, #0]
 802ca9a:	697b      	ldr	r3, [r7, #20]
 802ca9c:	781b      	ldrb	r3, [r3, #0]
 802ca9e:	429a      	cmp	r2, r3
 802caa0:	d01a      	beq.n	802cad8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x178>
 802caa2:	687b      	ldr	r3, [r7, #4]
 802caa4:	695c      	ldr	r4, [r3, #20]
 802caa6:	69bb      	ldr	r3, [r7, #24]
 802caa8:	781b      	ldrb	r3, [r3, #0]
 802caaa:	4618      	mov	r0, r3
 802caac:	f7fa ff5a 	bl	8027964 <TfLiteTypeGetName>
 802cab0:	4605      	mov	r5, r0
 802cab2:	697b      	ldr	r3, [r7, #20]
 802cab4:	781b      	ldrb	r3, [r3, #0]
 802cab6:	4618      	mov	r0, r3
 802cab8:	f7fa ff54 	bl	8027964 <TfLiteTypeGetName>
 802cabc:	4603      	mov	r3, r0
 802cabe:	9303      	str	r3, [sp, #12]
 802cac0:	9502      	str	r5, [sp, #8]
 802cac2:	4b19      	ldr	r3, [pc, #100]	; (802cb28 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1c8>)
 802cac4:	9301      	str	r3, [sp, #4]
 802cac6:	4b19      	ldr	r3, [pc, #100]	; (802cb2c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1cc>)
 802cac8:	9300      	str	r3, [sp, #0]
 802caca:	2345      	movs	r3, #69	; 0x45
 802cacc:	4a10      	ldr	r2, [pc, #64]	; (802cb10 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b0>)
 802cace:	4918      	ldr	r1, [pc, #96]	; (802cb30 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1d0>)
 802cad0:	6878      	ldr	r0, [r7, #4]
 802cad2:	47a0      	blx	r4
 802cad4:	2301      	movs	r3, #1
 802cad6:	e015      	b.n	802cb04 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1a4>
  TF_LITE_ENSURE_EQ(context, num_input_elements, num_output_elements);
 802cad8:	693a      	ldr	r2, [r7, #16]
 802cada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802cadc:	429a      	cmp	r2, r3
 802cade:	d010      	beq.n	802cb02 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1a2>
 802cae0:	687b      	ldr	r3, [r7, #4]
 802cae2:	695c      	ldr	r4, [r3, #20]
 802cae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802cae6:	9303      	str	r3, [sp, #12]
 802cae8:	693b      	ldr	r3, [r7, #16]
 802caea:	9302      	str	r3, [sp, #8]
 802caec:	4b11      	ldr	r3, [pc, #68]	; (802cb34 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1d4>)
 802caee:	9301      	str	r3, [sp, #4]
 802caf0:	4b11      	ldr	r3, [pc, #68]	; (802cb38 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1d8>)
 802caf2:	9300      	str	r3, [sp, #0]
 802caf4:	2346      	movs	r3, #70	; 0x46
 802caf6:	4a06      	ldr	r2, [pc, #24]	; (802cb10 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b0>)
 802caf8:	490a      	ldr	r1, [pc, #40]	; (802cb24 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1c4>)
 802cafa:	6878      	ldr	r0, [r7, #4]
 802cafc:	47a0      	blx	r4
 802cafe:	2301      	movs	r3, #1
 802cb00:	e000      	b.n	802cb04 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1a4>
  return kTfLiteOk;
 802cb02:	2300      	movs	r3, #0
}
 802cb04:	4618      	mov	r0, r3
 802cb06:	3728      	adds	r7, #40	; 0x28
 802cb08:	46bd      	mov	sp, r7
 802cb0a:	bdb0      	pop	{r4, r5, r7, pc}
 802cb0c:	08035680 	.word	0x08035680
 802cb10:	080355e0 	.word	0x080355e0
 802cb14:	08035668 	.word	0x08035668
 802cb18:	08035694 	.word	0x08035694
 802cb1c:	080356c4 	.word	0x080356c4
 802cb20:	080356c8 	.word	0x080356c8
 802cb24:	080356a8 	.word	0x080356a8
 802cb28:	080356f0 	.word	0x080356f0
 802cb2c:	08035700 	.word	0x08035700
 802cb30:	080356d4 	.word	0x080356d4
 802cb34:	0803570c 	.word	0x0803570c
 802cb38:	08035720 	.word	0x08035720

0802cb3c <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 802cb3c:	b590      	push	{r4, r7, lr}
 802cb3e:	b087      	sub	sp, #28
 802cb40:	af04      	add	r7, sp, #16
 802cb42:	6078      	str	r0, [r7, #4]
 802cb44:	6039      	str	r1, [r7, #0]
  TF_LITE_ENSURE(context, NumInputs(node) == 1 || NumInputs(node) == 2);
 802cb46:	6838      	ldr	r0, [r7, #0]
 802cb48:	f7fd f8fe 	bl	8029d48 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 802cb4c:	4603      	mov	r3, r0
 802cb4e:	2b01      	cmp	r3, #1
 802cb50:	d007      	beq.n	802cb62 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x26>
 802cb52:	6838      	ldr	r0, [r7, #0]
 802cb54:	f7fd f8f8 	bl	8029d48 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 802cb58:	4603      	mov	r3, r0
 802cb5a:	2b02      	cmp	r3, #2
 802cb5c:	d001      	beq.n	802cb62 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x26>
 802cb5e:	2301      	movs	r3, #1
 802cb60:	e000      	b.n	802cb64 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x28>
 802cb62:	2300      	movs	r3, #0
 802cb64:	2b00      	cmp	r3, #0
 802cb66:	d00a      	beq.n	802cb7e <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x42>
 802cb68:	687b      	ldr	r3, [r7, #4]
 802cb6a:	695c      	ldr	r4, [r3, #20]
 802cb6c:	4b27      	ldr	r3, [pc, #156]	; (802cc0c <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xd0>)
 802cb6e:	9300      	str	r3, [sp, #0]
 802cb70:	234b      	movs	r3, #75	; 0x4b
 802cb72:	4a27      	ldr	r2, [pc, #156]	; (802cc10 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xd4>)
 802cb74:	4927      	ldr	r1, [pc, #156]	; (802cc14 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xd8>)
 802cb76:	6878      	ldr	r0, [r7, #4]
 802cb78:	47a0      	blx	r4
 802cb7a:	2301      	movs	r3, #1
 802cb7c:	e041      	b.n	802cc02 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xc6>
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
 802cb7e:	6838      	ldr	r0, [r7, #0]
 802cb80:	f7fd f8ef 	bl	8029d62 <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 802cb84:	4603      	mov	r3, r0
 802cb86:	2b01      	cmp	r3, #1
 802cb88:	bf14      	ite	ne
 802cb8a:	2301      	movne	r3, #1
 802cb8c:	2300      	moveq	r3, #0
 802cb8e:	b2db      	uxtb	r3, r3
 802cb90:	2b00      	cmp	r3, #0
 802cb92:	d013      	beq.n	802cbbc <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x80>
 802cb94:	687b      	ldr	r3, [r7, #4]
 802cb96:	695c      	ldr	r4, [r3, #20]
 802cb98:	6838      	ldr	r0, [r7, #0]
 802cb9a:	f7fd f8e2 	bl	8029d62 <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 802cb9e:	4603      	mov	r3, r0
 802cba0:	2201      	movs	r2, #1
 802cba2:	9203      	str	r2, [sp, #12]
 802cba4:	9302      	str	r3, [sp, #8]
 802cba6:	4b1c      	ldr	r3, [pc, #112]	; (802cc18 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xdc>)
 802cba8:	9301      	str	r3, [sp, #4]
 802cbaa:	4b1c      	ldr	r3, [pc, #112]	; (802cc1c <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xe0>)
 802cbac:	9300      	str	r3, [sp, #0]
 802cbae:	234c      	movs	r3, #76	; 0x4c
 802cbb0:	4a17      	ldr	r2, [pc, #92]	; (802cc10 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xd4>)
 802cbb2:	491b      	ldr	r1, [pc, #108]	; (802cc20 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xe4>)
 802cbb4:	6878      	ldr	r0, [r7, #4]
 802cbb6:	47a0      	blx	r4
 802cbb8:	2301      	movs	r3, #1
 802cbba:	e022      	b.n	802cc02 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xc6>
  TF_LITE_ENSURE_EQ(context, ReshapeOutput(context, node), kTfLiteOk);
 802cbbc:	6839      	ldr	r1, [r7, #0]
 802cbbe:	6878      	ldr	r0, [r7, #4]
 802cbc0:	f7ff fece 	bl	802c960 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>
 802cbc4:	4603      	mov	r3, r0
 802cbc6:	2b00      	cmp	r3, #0
 802cbc8:	bf14      	ite	ne
 802cbca:	2301      	movne	r3, #1
 802cbcc:	2300      	moveq	r3, #0
 802cbce:	b2db      	uxtb	r3, r3
 802cbd0:	2b00      	cmp	r3, #0
 802cbd2:	d015      	beq.n	802cc00 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xc4>
 802cbd4:	687b      	ldr	r3, [r7, #4]
 802cbd6:	695c      	ldr	r4, [r3, #20]
 802cbd8:	6839      	ldr	r1, [r7, #0]
 802cbda:	6878      	ldr	r0, [r7, #4]
 802cbdc:	f7ff fec0 	bl	802c960 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>
 802cbe0:	4603      	mov	r3, r0
 802cbe2:	461a      	mov	r2, r3
 802cbe4:	2300      	movs	r3, #0
 802cbe6:	9303      	str	r3, [sp, #12]
 802cbe8:	9202      	str	r2, [sp, #8]
 802cbea:	4b0e      	ldr	r3, [pc, #56]	; (802cc24 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xe8>)
 802cbec:	9301      	str	r3, [sp, #4]
 802cbee:	4b0e      	ldr	r3, [pc, #56]	; (802cc28 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xec>)
 802cbf0:	9300      	str	r3, [sp, #0]
 802cbf2:	234d      	movs	r3, #77	; 0x4d
 802cbf4:	4a06      	ldr	r2, [pc, #24]	; (802cc10 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xd4>)
 802cbf6:	490a      	ldr	r1, [pc, #40]	; (802cc20 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xe4>)
 802cbf8:	6878      	ldr	r0, [r7, #4]
 802cbfa:	47a0      	blx	r4
 802cbfc:	2301      	movs	r3, #1
 802cbfe:	e000      	b.n	802cc02 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xc6>
  return kTfLiteOk;
 802cc00:	2300      	movs	r3, #0
}
 802cc02:	4618      	mov	r0, r3
 802cc04:	370c      	adds	r7, #12
 802cc06:	46bd      	mov	sp, r7
 802cc08:	bd90      	pop	{r4, r7, pc}
 802cc0a:	bf00      	nop
 802cc0c:	08035734 	.word	0x08035734
 802cc10:	080355e0 	.word	0x080355e0
 802cc14:	08035668 	.word	0x08035668
 802cc18:	08035764 	.word	0x08035764
 802cc1c:	08035768 	.word	0x08035768
 802cc20:	080356a8 	.word	0x080356a8
 802cc24:	0803577c 	.word	0x0803577c
 802cc28:	08035788 	.word	0x08035788

0802cc2c <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 802cc2c:	b580      	push	{r7, lr}
 802cc2e:	b088      	sub	sp, #32
 802cc30:	af00      	add	r7, sp, #0
 802cc32:	6078      	str	r0, [r7, #4]
 802cc34:	6039      	str	r1, [r7, #0]
  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kInputTensor);
 802cc36:	2200      	movs	r2, #0
 802cc38:	6839      	ldr	r1, [r7, #0]
 802cc3a:	6878      	ldr	r0, [r7, #4]
 802cc3c:	f7fc f85e 	bl	8028cfc <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 802cc40:	61b8      	str	r0, [r7, #24]
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
 802cc42:	2200      	movs	r2, #0
 802cc44:	6839      	ldr	r1, [r7, #0]
 802cc46:	6878      	ldr	r0, [r7, #4]
 802cc48:	f7fc f868 	bl	8028d1c <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 802cc4c:	6178      	str	r0, [r7, #20]

  // TODO(b/162522304): storing input bytes in OpData increases some models
  // significantly, possibly due to alignment issues.
  size_t input_bytes;
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(input->type, &input_bytes));
 802cc4e:	69bb      	ldr	r3, [r7, #24]
 802cc50:	7a1b      	ldrb	r3, [r3, #8]
 802cc52:	f107 020c 	add.w	r2, r7, #12
 802cc56:	4611      	mov	r1, r2
 802cc58:	4618      	mov	r0, r3
 802cc5a:	f7fb fe63 	bl	8028924 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>
 802cc5e:	4603      	mov	r3, r0
 802cc60:	74fb      	strb	r3, [r7, #19]
 802cc62:	7cfb      	ldrb	r3, [r7, #19]
 802cc64:	2b00      	cmp	r3, #0
 802cc66:	d001      	beq.n	802cc6c <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x40>
 802cc68:	7cfb      	ldrb	r3, [r7, #19]
 802cc6a:	e024      	b.n	802ccb6 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x8a>
  input_bytes *= ElementCount(*input->dims);
 802cc6c:	69bb      	ldr	r3, [r7, #24]
 802cc6e:	685b      	ldr	r3, [r3, #4]
 802cc70:	4618      	mov	r0, r3
 802cc72:	f7fb fec3 	bl	80289fc <_ZN6tflite12ElementCountERK14TfLiteIntArray>
 802cc76:	4602      	mov	r2, r0
 802cc78:	68fb      	ldr	r3, [r7, #12]
 802cc7a:	fb02 f303 	mul.w	r3, r2, r3
 802cc7e:	60fb      	str	r3, [r7, #12]

  // Do nothing for in-place reshape.
  if (input->data.raw != output->data.raw) {
 802cc80:	69bb      	ldr	r3, [r7, #24]
 802cc82:	681a      	ldr	r2, [r3, #0]
 802cc84:	697b      	ldr	r3, [r7, #20]
 802cc86:	681b      	ldr	r3, [r3, #0]
 802cc88:	429a      	cmp	r2, r3
 802cc8a:	d013      	beq.n	802ccb4 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x88>
    // Otherwise perform reshape with copy.
    for (size_t i = 0; i < input_bytes; ++i) {
 802cc8c:	2300      	movs	r3, #0
 802cc8e:	61fb      	str	r3, [r7, #28]
 802cc90:	68fb      	ldr	r3, [r7, #12]
 802cc92:	69fa      	ldr	r2, [r7, #28]
 802cc94:	429a      	cmp	r2, r3
 802cc96:	d20d      	bcs.n	802ccb4 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x88>
      output->data.raw[i] = input->data.raw[i];
 802cc98:	69bb      	ldr	r3, [r7, #24]
 802cc9a:	681a      	ldr	r2, [r3, #0]
 802cc9c:	69fb      	ldr	r3, [r7, #28]
 802cc9e:	441a      	add	r2, r3
 802cca0:	697b      	ldr	r3, [r7, #20]
 802cca2:	6819      	ldr	r1, [r3, #0]
 802cca4:	69fb      	ldr	r3, [r7, #28]
 802cca6:	440b      	add	r3, r1
 802cca8:	7812      	ldrb	r2, [r2, #0]
 802ccaa:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < input_bytes; ++i) {
 802ccac:	69fb      	ldr	r3, [r7, #28]
 802ccae:	3301      	adds	r3, #1
 802ccb0:	61fb      	str	r3, [r7, #28]
 802ccb2:	e7ed      	b.n	802cc90 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x64>
    }
  }
  return kTfLiteOk;
 802ccb4:	2300      	movs	r3, #0
}
 802ccb6:	4618      	mov	r0, r3
 802ccb8:	3720      	adds	r7, #32
 802ccba:	46bd      	mov	sp, r7
 802ccbc:	bd80      	pop	{r7, pc}
	...

0802ccc0 <_ZN6tflite3ops5micro16Register_RESHAPEEv>:

}  // namespace reshape

TfLiteRegistration Register_RESHAPE() {
 802ccc0:	b4b0      	push	{r4, r5, r7}
 802ccc2:	b083      	sub	sp, #12
 802ccc4:	af00      	add	r7, sp, #0
 802ccc6:	6078      	str	r0, [r7, #4]
          /*prepare=*/reshape::Prepare,
          /*invoke=*/reshape::Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 802ccc8:	687b      	ldr	r3, [r7, #4]
 802ccca:	4a07      	ldr	r2, [pc, #28]	; (802cce8 <_ZN6tflite3ops5micro16Register_RESHAPEEv+0x28>)
 802cccc:	461c      	mov	r4, r3
 802ccce:	4615      	mov	r5, r2
 802ccd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802ccd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802ccd4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 802ccd8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 802ccdc:	6878      	ldr	r0, [r7, #4]
 802ccde:	370c      	adds	r7, #12
 802cce0:	46bd      	mov	sp, r7
 802cce2:	bcb0      	pop	{r4, r5, r7}
 802cce4:	4770      	bx	lr
 802cce6:	bf00      	nop
 802cce8:	080357a8 	.word	0x080357a8

0802ccec <_ZN6tflite26generic_int16_table_lookupEsPKs>:
inline int16_t generic_int16_table_lookup(int16_t value, const int16_t* lut) {
 802ccec:	b580      	push	{r7, lr}
 802ccee:	b086      	sub	sp, #24
 802ccf0:	af00      	add	r7, sp, #0
 802ccf2:	4603      	mov	r3, r0
 802ccf4:	6039      	str	r1, [r7, #0]
 802ccf6:	80fb      	strh	r3, [r7, #6]
  uint16_t index = static_cast<uint16_t>(256 + (value >> 7));
 802ccf8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 802ccfc:	11db      	asrs	r3, r3, #7
 802ccfe:	b21b      	sxth	r3, r3
 802cd00:	b29b      	uxth	r3, r3
 802cd02:	f503 7380 	add.w	r3, r3, #256	; 0x100
 802cd06:	82fb      	strh	r3, [r7, #22]
  assert(index < 512 && "LUT index out of range.");
 802cd08:	8afb      	ldrh	r3, [r7, #22]
 802cd0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802cd0e:	d306      	bcc.n	802cd1e <_ZN6tflite26generic_int16_table_lookupEsPKs+0x32>
 802cd10:	4b1a      	ldr	r3, [pc, #104]	; (802cd7c <_ZN6tflite26generic_int16_table_lookupEsPKs+0x90>)
 802cd12:	4a1b      	ldr	r2, [pc, #108]	; (802cd80 <_ZN6tflite26generic_int16_table_lookupEsPKs+0x94>)
 802cd14:	f44f 71ac 	mov.w	r1, #344	; 0x158
 802cd18:	481a      	ldr	r0, [pc, #104]	; (802cd84 <_ZN6tflite26generic_int16_table_lookupEsPKs+0x98>)
 802cd1a:	f005 f9a7 	bl	803206c <__assert_func>
  int16_t offset = value & 0x7f;
 802cd1e:	88fb      	ldrh	r3, [r7, #6]
 802cd20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802cd24:	82bb      	strh	r3, [r7, #20]
  int16_t base = lut[index];
 802cd26:	8afb      	ldrh	r3, [r7, #22]
 802cd28:	005b      	lsls	r3, r3, #1
 802cd2a:	683a      	ldr	r2, [r7, #0]
 802cd2c:	4413      	add	r3, r2
 802cd2e:	881b      	ldrh	r3, [r3, #0]
 802cd30:	827b      	strh	r3, [r7, #18]
  int16_t slope = lut[index + 1] - lut[index];
 802cd32:	8afb      	ldrh	r3, [r7, #22]
 802cd34:	3301      	adds	r3, #1
 802cd36:	005b      	lsls	r3, r3, #1
 802cd38:	683a      	ldr	r2, [r7, #0]
 802cd3a:	4413      	add	r3, r2
 802cd3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 802cd40:	b29a      	uxth	r2, r3
 802cd42:	8afb      	ldrh	r3, [r7, #22]
 802cd44:	005b      	lsls	r3, r3, #1
 802cd46:	6839      	ldr	r1, [r7, #0]
 802cd48:	440b      	add	r3, r1
 802cd4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 802cd4e:	b29b      	uxth	r3, r3
 802cd50:	1ad3      	subs	r3, r2, r3
 802cd52:	b29b      	uxth	r3, r3
 802cd54:	823b      	strh	r3, [r7, #16]
  int32_t delta = (static_cast<int32_t>(slope) * offset + 64) >> 7;
 802cd56:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 802cd5a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 802cd5e:	fb02 f303 	mul.w	r3, r2, r3
 802cd62:	3340      	adds	r3, #64	; 0x40
 802cd64:	11db      	asrs	r3, r3, #7
 802cd66:	60fb      	str	r3, [r7, #12]
  return base + delta;
 802cd68:	68fb      	ldr	r3, [r7, #12]
 802cd6a:	b29a      	uxth	r2, r3
 802cd6c:	8a7b      	ldrh	r3, [r7, #18]
 802cd6e:	4413      	add	r3, r2
 802cd70:	b29b      	uxth	r3, r3
 802cd72:	b21b      	sxth	r3, r3
}
 802cd74:	4618      	mov	r0, r3
 802cd76:	3718      	adds	r7, #24
 802cd78:	46bd      	mov	sp, r7
 802cd7a:	bd80      	pop	{r7, pc}
 802cd7c:	080357c8 	.word	0x080357c8
 802cd80:	080357f4 	.word	0x080357f4
 802cd84:	08035838 	.word	0x08035838

0802cd88 <_ZN6tflite13reference_ops19SoftMaxCalculateExpERKNS_13SoftmaxParamsEPKsisii>:
}

// Computes exp(input - max_input)
inline int16_t SoftMaxCalculateExp(const SoftmaxParams& params,
                                   const int16_t* input_data, const int depth,
                                   int16_t max_in_row, int i, int c) {
 802cd88:	b580      	push	{r7, lr}
 802cd8a:	b08a      	sub	sp, #40	; 0x28
 802cd8c:	af00      	add	r7, sp, #0
 802cd8e:	60f8      	str	r0, [r7, #12]
 802cd90:	60b9      	str	r1, [r7, #8]
 802cd92:	607a      	str	r2, [r7, #4]
 802cd94:	807b      	strh	r3, [r7, #2]
  int32_t input_diff = input_data[i * depth + c] - max_in_row;
 802cd96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802cd98:	687a      	ldr	r2, [r7, #4]
 802cd9a:	fb03 f202 	mul.w	r2, r3, r2
 802cd9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802cda0:	4413      	add	r3, r2
 802cda2:	005b      	lsls	r3, r3, #1
 802cda4:	68ba      	ldr	r2, [r7, #8]
 802cda6:	4413      	add	r3, r2
 802cda8:	f9b3 3000 	ldrsh.w	r3, [r3]
 802cdac:	461a      	mov	r2, r3
 802cdae:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 802cdb2:	1ad3      	subs	r3, r2, r3
 802cdb4:	627b      	str	r3, [r7, #36]	; 0x24
  // scale the input_diff such that [-65535, 0] correspond to [-10.0, 0.0]
  // exp lut generated with range [-10, 0], as exp(-10) is negligible.
  int32_t scaled_diff = MultiplyByQuantizedMultiplier(
      input_diff, params.input_multiplier, params.input_left_shift);
 802cdb6:	68fb      	ldr	r3, [r7, #12]
 802cdb8:	6899      	ldr	r1, [r3, #8]
 802cdba:	68fb      	ldr	r3, [r7, #12]
 802cdbc:	68db      	ldr	r3, [r3, #12]
  int32_t scaled_diff = MultiplyByQuantizedMultiplier(
 802cdbe:	461a      	mov	r2, r3
 802cdc0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802cdc2:	f7fb ff57 	bl	8028c74 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 802cdc6:	6238      	str	r0, [r7, #32]
  // recenter to [-32768, 32767]
  int32_t sym_scaled_diff = scaled_diff + 32767;
 802cdc8:	6a3b      	ldr	r3, [r7, #32]
 802cdca:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 802cdce:	337f      	adds	r3, #127	; 0x7f
 802cdd0:	613b      	str	r3, [r7, #16]
  int16_t sat_sym_scaled_diff =
      std::min(std::max(sym_scaled_diff, static_cast<int32_t>(-32768)),
 802cdd2:	4b12      	ldr	r3, [pc, #72]	; (802ce1c <_ZN6tflite13reference_ops19SoftMaxCalculateExpERKNS_13SoftmaxParamsEPKsisii+0x94>)
 802cdd4:	617b      	str	r3, [r7, #20]
               static_cast<int32_t>(32767));
 802cdd6:	f107 0214 	add.w	r2, r7, #20
 802cdda:	f107 0310 	add.w	r3, r7, #16
 802cdde:	4611      	mov	r1, r2
 802cde0:	4618      	mov	r0, r3
 802cde2:	f7fb fcd1 	bl	8028788 <_ZSt3maxIlERKT_S2_S2_>
 802cde6:	4602      	mov	r2, r0
 802cde8:	f647 73ff 	movw	r3, #32767	; 0x7fff
 802cdec:	61bb      	str	r3, [r7, #24]
 802cdee:	f107 0318 	add.w	r3, r7, #24
 802cdf2:	4619      	mov	r1, r3
 802cdf4:	4610      	mov	r0, r2
 802cdf6:	f7fb fcb3 	bl	8028760 <_ZSt3minIlERKT_S2_S2_>
 802cdfa:	4603      	mov	r3, r0
      std::min(std::max(sym_scaled_diff, static_cast<int32_t>(-32768)),
 802cdfc:	681b      	ldr	r3, [r3, #0]
               static_cast<int32_t>(32767));
 802cdfe:	83fb      	strh	r3, [r7, #30]
  // apply the exp() LUT activation function
  return generic_int16_table_lookup(sat_sym_scaled_diff, params.exp_lut);
 802ce00:	68fb      	ldr	r3, [r7, #12]
 802ce02:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 802ce04:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 802ce08:	4611      	mov	r1, r2
 802ce0a:	4618      	mov	r0, r3
 802ce0c:	f7ff ff6e 	bl	802ccec <_ZN6tflite26generic_int16_table_lookupEsPKs>
 802ce10:	4603      	mov	r3, r0
}
 802ce12:	4618      	mov	r0, r3
 802ce14:	3728      	adds	r7, #40	; 0x28
 802ce16:	46bd      	mov	sp, r7
 802ce18:	bd80      	pop	{r7, pc}
 802ce1a:	bf00      	nop
 802ce1c:	ffff8000 	.word	0xffff8000

0802ce20 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps>:
// Quantized softmax with int16_t input and int16_t output.
inline void SoftmaxInt16(const SoftmaxParams& params,
                         const RuntimeShape& input_shape,
                         const int16_t* input_data,
                         const RuntimeShape& output_shape,
                         int16_t* output_data) {
 802ce20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802ce24:	b0ab      	sub	sp, #172	; 0xac
 802ce26:	af02      	add	r7, sp, #8
 802ce28:	63f8      	str	r0, [r7, #60]	; 0x3c
 802ce2a:	63b9      	str	r1, [r7, #56]	; 0x38
 802ce2c:	637a      	str	r2, [r7, #52]	; 0x34
 802ce2e:	633b      	str	r3, [r7, #48]	; 0x30
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 802ce30:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 802ce32:	f7fb fcf4 	bl	802881e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 802ce36:	4603      	mov	r3, r0
 802ce38:	3b01      	subs	r3, #1
 802ce3a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 802ce3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802ce40:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 802ce44:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 802ce46:	f7ff f895 	bl	802bf74 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 802ce4a:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 802ce4e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 802ce52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802ce54:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 802ce58:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 802ce5a:	f7fc ff9e 	bl	8029d9a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 802ce5e:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80

  for (int i = 0; i < outer_size; ++i) {
 802ce62:	2300      	movs	r3, #0
 802ce64:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 802ce68:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 802ce6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 802ce70:	429a      	cmp	r2, r3
 802ce72:	f280 8157 	bge.w	802d124 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x304>
    // Find the largest element
    int16_t max_in_row = std::numeric_limits<int16_t>::min();
 802ce76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 802ce7a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    for (int c = 0; c < depth; ++c) {
 802ce7e:	2300      	movs	r3, #0
 802ce80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 802ce84:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 802ce88:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 802ce8c:	429a      	cmp	r2, r3
 802ce8e:	da1c      	bge.n	802ceca <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0xaa>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
 802ce90:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 802ce94:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 802ce98:	fb03 f202 	mul.w	r2, r3, r2
 802ce9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 802cea0:	4413      	add	r3, r2
 802cea2:	005a      	lsls	r2, r3, #1
 802cea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802cea6:	441a      	add	r2, r3
 802cea8:	f107 034e 	add.w	r3, r7, #78	; 0x4e
 802ceac:	4611      	mov	r1, r2
 802ceae:	4618      	mov	r0, r3
 802ceb0:	f7fe ffdc 	bl	802be6c <_ZSt3maxIsERKT_S2_S2_>
 802ceb4:	4603      	mov	r3, r0
 802ceb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 802ceba:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    for (int c = 0; c < depth; ++c) {
 802cebe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 802cec2:	3301      	adds	r3, #1
 802cec4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 802cec8:	e7dc      	b.n	802ce84 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x64>

    // This loops computes the exp values and their sum. We will need the exp
    // values later on in the function so we cache them in the output_data
    // buffer. This is an optimization done to avoid calculating the exp values
    // twice making use of the output_data buffer as scratch memory.
    int32_t sum_of_exps = 0;  // Q16.15 fixed point format.
 802ceca:	2300      	movs	r3, #0
 802cecc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    int16_t* exp_results_Q015 = output_data + i * depth;
 802ced0:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 802ced4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 802ced8:	fb02 f303 	mul.w	r3, r2, r3
 802cedc:	005a      	lsls	r2, r3, #1
 802cede:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 802cee2:	4413      	add	r3, r2
 802cee4:	67fb      	str	r3, [r7, #124]	; 0x7c
    for (int c = 0; c < depth; ++c) {
 802cee6:	2300      	movs	r3, #0
 802cee8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 802ceec:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 802cef0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 802cef4:	429a      	cmp	r2, r3
 802cef6:	da28      	bge.n	802cf4a <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x12a>
      exp_results_Q015[c] =
          SoftMaxCalculateExp(params, input_data, depth, max_in_row, i, c);
 802cef8:	f9b7 104e 	ldrsh.w	r1, [r7, #78]	; 0x4e
      exp_results_Q015[c] =
 802cefc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 802cf00:	005a      	lsls	r2, r3, #1
 802cf02:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 802cf04:	189c      	adds	r4, r3, r2
          SoftMaxCalculateExp(params, input_data, depth, max_in_row, i, c);
 802cf06:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 802cf0a:	9301      	str	r3, [sp, #4]
 802cf0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 802cf10:	9300      	str	r3, [sp, #0]
 802cf12:	460b      	mov	r3, r1
 802cf14:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 802cf18:	6b79      	ldr	r1, [r7, #52]	; 0x34
 802cf1a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 802cf1c:	f7ff ff34 	bl	802cd88 <_ZN6tflite13reference_ops19SoftMaxCalculateExpERKNS_13SoftmaxParamsEPKsisii>
 802cf20:	4603      	mov	r3, r0
      exp_results_Q015[c] =
 802cf22:	8023      	strh	r3, [r4, #0]
      sum_of_exps += exp_results_Q015[c];
 802cf24:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 802cf28:	005a      	lsls	r2, r3, #1
 802cf2a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 802cf2c:	4413      	add	r3, r2
 802cf2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 802cf32:	461a      	mov	r2, r3
 802cf34:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 802cf38:	4413      	add	r3, r2
 802cf3a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    for (int c = 0; c < depth; ++c) {
 802cf3e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 802cf42:	3301      	adds	r3, #1
 802cf44:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 802cf48:	e7d0      	b.n	802ceec <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0xcc>
    }

    // Compute the reciprocal 1/sum_of_exps
    uint8_t headroom_plus_one =
        CountLeadingZeros(static_cast<uint32_t>(sum_of_exps));
 802cf4a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 802cf4e:	4618      	mov	r0, r3
 802cf50:	f7fe f88b 	bl	802b06a <_ZN6tflite17CountLeadingZerosImEEiT_>
 802cf54:	4603      	mov	r3, r0
 802cf56:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
    int32_t shifted_sum =
        ((static_cast<int64_t>(sum_of_exps) << (headroom_plus_one - 1)) +
 802cf5a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 802cf5e:	17da      	asrs	r2, r3, #31
 802cf60:	623b      	str	r3, [r7, #32]
 802cf62:	627a      	str	r2, [r7, #36]	; 0x24
 802cf64:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 802cf68:	1e59      	subs	r1, r3, #1
 802cf6a:	f1a1 0320 	sub.w	r3, r1, #32
 802cf6e:	f1c1 0220 	rsb	r2, r1, #32
 802cf72:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802cf74:	fa00 f901 	lsl.w	r9, r0, r1
 802cf78:	6a38      	ldr	r0, [r7, #32]
 802cf7a:	fa00 f303 	lsl.w	r3, r0, r3
 802cf7e:	ea49 0903 	orr.w	r9, r9, r3
 802cf82:	6a3b      	ldr	r3, [r7, #32]
 802cf84:	fa23 f202 	lsr.w	r2, r3, r2
 802cf88:	ea49 0902 	orr.w	r9, r9, r2
 802cf8c:	6a3b      	ldr	r3, [r7, #32]
 802cf8e:	fa03 f801 	lsl.w	r8, r3, r1
 802cf92:	f518 5300 	adds.w	r3, r8, #8192	; 0x2000
 802cf96:	61bb      	str	r3, [r7, #24]
 802cf98:	f149 0300 	adc.w	r3, r9, #0
 802cf9c:	61fb      	str	r3, [r7, #28]
         (1 << 13)) >>
 802cf9e:	f04f 0200 	mov.w	r2, #0
 802cfa2:	f04f 0300 	mov.w	r3, #0
 802cfa6:	69b9      	ldr	r1, [r7, #24]
 802cfa8:	0b8a      	lsrs	r2, r1, #14
 802cfaa:	69f9      	ldr	r1, [r7, #28]
 802cfac:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 802cfb0:	69f9      	ldr	r1, [r7, #28]
 802cfb2:	138b      	asrs	r3, r1, #14
    int32_t shifted_sum =
 802cfb4:	4613      	mov	r3, r2
 802cfb6:	677b      	str	r3, [r7, #116]	; 0x74
        14;
    // since the LUT computes 1/(1 + x) we need to first compute x = (sum - 1).
    // also, the LUT expects a symmetrical input, so we must also recenter x
    // from [0, 65535] to [-32768, 32767].
    int32_t sym_shifted_sum = shifted_sum + (-((1 << 15) + (1 << 16)));
 802cfb8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802cfba:	f5a3 33c0 	sub.w	r3, r3, #98304	; 0x18000
 802cfbe:	64bb      	str	r3, [r7, #72]	; 0x48
    int16_t sat_sym_shifted_sum = static_cast<int16_t>(
        std::min(std::max(sym_shifted_sum, static_cast<int32_t>(-32768)),
 802cfc0:	4b5b      	ldr	r3, [pc, #364]	; (802d130 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x310>)
 802cfc2:	653b      	str	r3, [r7, #80]	; 0x50
                 static_cast<int32_t>(32767)));
 802cfc4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 802cfc8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 802cfcc:	4611      	mov	r1, r2
 802cfce:	4618      	mov	r0, r3
 802cfd0:	f7fb fbda 	bl	8028788 <_ZSt3maxIlERKT_S2_S2_>
 802cfd4:	4602      	mov	r2, r0
 802cfd6:	f647 73ff 	movw	r3, #32767	; 0x7fff
 802cfda:	657b      	str	r3, [r7, #84]	; 0x54
 802cfdc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 802cfe0:	4619      	mov	r1, r3
 802cfe2:	4610      	mov	r0, r2
 802cfe4:	f7fb fbbc 	bl	8028760 <_ZSt3minIlERKT_S2_S2_>
 802cfe8:	4603      	mov	r3, r0
        std::min(std::max(sym_shifted_sum, static_cast<int32_t>(-32768)),
 802cfea:	681b      	ldr	r3, [r3, #0]
                 static_cast<int32_t>(32767)));
 802cfec:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
    // apply 1/(1 + x) LUT activation function
    int16_t reciprocal_scale_Q015 = generic_int16_table_lookup(
        sat_sym_shifted_sum, params.one_over_one_plus_x_lut);
 802cff0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802cff2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    int16_t reciprocal_scale_Q015 = generic_int16_table_lookup(
 802cff4:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 802cff8:	4611      	mov	r1, r2
 802cffa:	4618      	mov	r0, r3
 802cffc:	f7ff fe76 	bl	802ccec <_ZN6tflite26generic_int16_table_lookupEsPKs>
 802d000:	4603      	mov	r3, r0
 802d002:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70

    // Rescale the exp_result with reciprocal
    // range of output is [0, 32767] correspond to [0.0, 1.0]
    for (int c = 0; c < depth; ++c) {
 802d006:	2300      	movs	r3, #0
 802d008:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 802d00c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 802d010:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 802d014:	429a      	cmp	r2, r3
 802d016:	da7f      	bge.n	802d118 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x2f8>
      uint8_t right_shift = 31 - headroom_plus_one;
 802d018:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 802d01c:	f1c3 031f 	rsb	r3, r3, #31
 802d020:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      int64_t round = 1 << (right_shift - 1);
 802d024:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 802d028:	1e5a      	subs	r2, r3, #1
 802d02a:	2301      	movs	r3, #1
 802d02c:	4093      	lsls	r3, r2
 802d02e:	17da      	asrs	r2, r3, #31
 802d030:	603b      	str	r3, [r7, #0]
 802d032:	607a      	str	r2, [r7, #4]
 802d034:	e9d7 3400 	ldrd	r3, r4, [r7]
 802d038:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
 802d03c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 802d040:	005a      	lsls	r2, r3, #1
 802d042:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 802d044:	4413      	add	r3, r2
 802d046:	f9b3 3000 	ldrsh.w	r3, [r3]
 802d04a:	b21b      	sxth	r3, r3
 802d04c:	17da      	asrs	r2, r3, #31
 802d04e:	613b      	str	r3, [r7, #16]
 802d050:	617a      	str	r2, [r7, #20]
                            static_cast<int64_t>(reciprocal_scale_Q015) +
 802d052:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 802d056:	17da      	asrs	r2, r3, #31
 802d058:	60bb      	str	r3, [r7, #8]
 802d05a:	60fa      	str	r2, [r7, #12]
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
 802d05c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 802d060:	460b      	mov	r3, r1
 802d062:	68ba      	ldr	r2, [r7, #8]
 802d064:	fb02 f203 	mul.w	r2, r2, r3
 802d068:	68fb      	ldr	r3, [r7, #12]
 802d06a:	e9c7 0104 	strd	r0, r1, [r7, #16]
 802d06e:	4601      	mov	r1, r0
 802d070:	fb01 f303 	mul.w	r3, r1, r3
 802d074:	4413      	add	r3, r2
 802d076:	693a      	ldr	r2, [r7, #16]
 802d078:	68b9      	ldr	r1, [r7, #8]
 802d07a:	fba2 ab01 	umull	sl, fp, r2, r1
 802d07e:	445b      	add	r3, fp
 802d080:	469b      	mov	fp, r3
                            static_cast<int64_t>(reciprocal_scale_Q015) +
 802d082:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 802d086:	eb1a 0502 	adds.w	r5, sl, r2
 802d08a:	eb4b 0603 	adc.w	r6, fp, r3
                        round) >>
                       right_shift;
 802d08e:	f897 106f 	ldrb.w	r1, [r7, #111]	; 0x6f
                        round) >>
 802d092:	f1c1 0320 	rsb	r3, r1, #32
 802d096:	f1b1 0220 	subs.w	r2, r1, #32
 802d09a:	fa25 f001 	lsr.w	r0, r5, r1
 802d09e:	62b8      	str	r0, [r7, #40]	; 0x28
 802d0a0:	fa06 f303 	lsl.w	r3, r6, r3
 802d0a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802d0a6:	ea40 0003 	orr.w	r0, r0, r3
 802d0aa:	62b8      	str	r0, [r7, #40]	; 0x28
 802d0ac:	d404      	bmi.n	802d0b8 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x298>
 802d0ae:	fa46 f202 	asr.w	r2, r6, r2
 802d0b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802d0b4:	4313      	orrs	r3, r2
 802d0b6:	62bb      	str	r3, [r7, #40]	; 0x28
 802d0b8:	fa46 f301 	asr.w	r3, r6, r1
 802d0bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
 802d0be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802d0c0:	647b      	str	r3, [r7, #68]	; 0x44
      output_data[i * depth + c] = static_cast<int16_t>(
          std::min(std::max(result, static_cast<int32_t>(0)),
 802d0c2:	2300      	movs	r3, #0
 802d0c4:	65bb      	str	r3, [r7, #88]	; 0x58
                   static_cast<int32_t>(32767)));
 802d0c6:	f107 0258 	add.w	r2, r7, #88	; 0x58
 802d0ca:	f107 0344 	add.w	r3, r7, #68	; 0x44
 802d0ce:	4611      	mov	r1, r2
 802d0d0:	4618      	mov	r0, r3
 802d0d2:	f7fb fb59 	bl	8028788 <_ZSt3maxIlERKT_S2_S2_>
 802d0d6:	4602      	mov	r2, r0
 802d0d8:	f647 73ff 	movw	r3, #32767	; 0x7fff
 802d0dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 802d0de:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 802d0e2:	4619      	mov	r1, r3
 802d0e4:	4610      	mov	r0, r2
 802d0e6:	f7fb fb3b 	bl	8028760 <_ZSt3minIlERKT_S2_S2_>
 802d0ea:	4603      	mov	r3, r0
          std::min(std::max(result, static_cast<int32_t>(0)),
 802d0ec:	6819      	ldr	r1, [r3, #0]
      output_data[i * depth + c] = static_cast<int16_t>(
 802d0ee:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 802d0f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 802d0f6:	fb03 f202 	mul.w	r2, r3, r2
 802d0fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 802d0fe:	4413      	add	r3, r2
 802d100:	005a      	lsls	r2, r3, #1
 802d102:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 802d106:	441a      	add	r2, r3
 802d108:	b20b      	sxth	r3, r1
 802d10a:	8013      	strh	r3, [r2, #0]
    for (int c = 0; c < depth; ++c) {
 802d10c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 802d110:	3301      	adds	r3, #1
 802d112:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 802d116:	e779      	b.n	802d00c <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x1ec>
  for (int i = 0; i < outer_size; ++i) {
 802d118:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 802d11c:	3301      	adds	r3, #1
 802d11e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 802d122:	e6a1      	b.n	802ce68 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x48>
    }
  }
}
 802d124:	bf00      	nop
 802d126:	37a4      	adds	r7, #164	; 0xa4
 802d128:	46bd      	mov	sp, r7
 802d12a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802d12e:	bf00      	nop
 802d130:	ffff8000 	.word	0xffff8000

0802d134 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE>:

namespace tflite {
namespace {

void SoftmaxQuantized(const TfLiteEvalTensor* input, TfLiteEvalTensor* output,
                      const SoftmaxParams& op_data) {
 802d134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802d138:	b0bc      	sub	sp, #240	; 0xf0
 802d13a:	af04      	add	r7, sp, #16
 802d13c:	60f8      	str	r0, [r7, #12]
 802d13e:	60b9      	str	r1, [r7, #8]
 802d140:	607a      	str	r2, [r7, #4]
  if (input->type == kTfLiteUInt8) {
 802d142:	68fb      	ldr	r3, [r7, #12]
 802d144:	7a1b      	ldrb	r3, [r3, #8]
 802d146:	2b03      	cmp	r3, #3
 802d148:	d127      	bne.n	802d19a <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x66>
    tflite::reference_ops::Softmax(
        op_data, tflite::micro::GetTensorShape(input),
 802d14a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 802d14e:	68f9      	ldr	r1, [r7, #12]
 802d150:	4618      	mov	r0, r3
 802d152:	f7fe fea1 	bl	802be98 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::Softmax(
 802d156:	68f8      	ldr	r0, [r7, #12]
 802d158:	f7fc fb3a 	bl	80297d0 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 802d15c:	4604      	mov	r4, r0
        tflite::micro::GetTensorData<uint8_t>(input),
        tflite::micro::GetTensorShape(output),
 802d15e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 802d162:	68b9      	ldr	r1, [r7, #8]
 802d164:	4618      	mov	r0, r3
 802d166:	f7fe fe97 	bl	802be98 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::Softmax(
 802d16a:	68b8      	ldr	r0, [r7, #8]
 802d16c:	f7fc fb3f 	bl	80297ee <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>
 802d170:	4602      	mov	r2, r0
 802d172:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 802d176:	f107 0144 	add.w	r1, r7, #68	; 0x44
 802d17a:	9200      	str	r2, [sp, #0]
 802d17c:	4622      	mov	r2, r4
 802d17e:	6878      	ldr	r0, [r7, #4]
 802d180:	f000 f930 	bl	802d3e4 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
        tflite::micro::GetTensorShape(output),
 802d184:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 802d188:	4618      	mov	r0, r3
 802d18a:	f7fb fb32 	bl	80287f2 <_ZN6tflite12RuntimeShapeD1Ev>
        op_data, tflite::micro::GetTensorShape(input),
 802d18e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 802d192:	4618      	mov	r0, r3
 802d194:	f7fb fb2d 	bl	80287f2 <_ZN6tflite12RuntimeShapeD1Ev>
 802d198:	e080      	b.n	802d29c <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x168>
        tflite::micro::GetTensorData<uint8_t>(output));
  } else if (input->type == kTfLiteInt8) {
 802d19a:	68fb      	ldr	r3, [r7, #12]
 802d19c:	7a1b      	ldrb	r3, [r3, #8]
 802d19e:	2b09      	cmp	r3, #9
 802d1a0:	d153      	bne.n	802d24a <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x116>
    if (output->type == kTfLiteInt16) {
 802d1a2:	68bb      	ldr	r3, [r7, #8]
 802d1a4:	7a1b      	ldrb	r3, [r3, #8]
 802d1a6:	2b07      	cmp	r3, #7
 802d1a8:	d077      	beq.n	802d29a <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x166>
          op_data, tflite::micro::GetTensorShape(input),
          tflite::micro::GetTensorData<int8_t>(input),
          tflite::micro::GetTensorShape(output),
          tflite::micro::GetTensorData<int16_t>(output));
    } else {
      const auto input_shape = tflite::micro::GetTensorShape(input);
 802d1aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 802d1ae:	68f9      	ldr	r1, [r7, #12]
 802d1b0:	4618      	mov	r0, r3
 802d1b2:	f7fe fe71 	bl	802be98 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      const auto output_shape = tflite::micro::GetTensorShape(output);
 802d1b6:	f107 0314 	add.w	r3, r7, #20
 802d1ba:	68b9      	ldr	r1, [r7, #8]
 802d1bc:	4618      	mov	r0, r3
 802d1be:	f7fe fe6b 	bl	802be98 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      const int trailing_dim = input_shape.DimensionsCount() - 1;
 802d1c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 802d1c6:	4618      	mov	r0, r3
 802d1c8:	f7fb fb29 	bl	802881e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 802d1cc:	4603      	mov	r3, r0
 802d1ce:	3b01      	subs	r3, #1
 802d1d0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
      const int outer_size =
          MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 802d1d4:	f107 0214 	add.w	r2, r7, #20
 802d1d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 802d1dc:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 802d1e0:	4618      	mov	r0, r3
 802d1e2:	f7fe fec7 	bl	802bf74 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 802d1e6:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
      const int depth =
          MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 802d1ea:	f107 0214 	add.w	r2, r7, #20
 802d1ee:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 802d1f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 802d1f6:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 802d1fa:	f7fc fdce 	bl	8029d9a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 802d1fe:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4

      arm_softmax_s8(tflite::micro::GetTensorData<int8_t>(input), outer_size,
 802d202:	68f8      	ldr	r0, [r7, #12]
 802d204:	f7fc fa78 	bl	80296f8 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 802d208:	4680      	mov	r8, r0
                     depth, op_data.input_multiplier, op_data.input_left_shift,
 802d20a:	687b      	ldr	r3, [r7, #4]
 802d20c:	689e      	ldr	r6, [r3, #8]
 802d20e:	687b      	ldr	r3, [r7, #4]
 802d210:	68dc      	ldr	r4, [r3, #12]
                     op_data.diff_min,
 802d212:	687b      	ldr	r3, [r7, #4]
 802d214:	699d      	ldr	r5, [r3, #24]
      arm_softmax_s8(tflite::micro::GetTensorData<int8_t>(input), outer_size,
 802d216:	68b8      	ldr	r0, [r7, #8]
 802d218:	f7fc fa7d 	bl	8029716 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 802d21c:	4603      	mov	r3, r0
 802d21e:	9302      	str	r3, [sp, #8]
 802d220:	9501      	str	r5, [sp, #4]
 802d222:	9400      	str	r4, [sp, #0]
 802d224:	4633      	mov	r3, r6
 802d226:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 802d22a:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 802d22e:	4640      	mov	r0, r8
 802d230:	f7f4 fd6e 	bl	8021d10 <arm_softmax_s8>
      const auto output_shape = tflite::micro::GetTensorShape(output);
 802d234:	f107 0314 	add.w	r3, r7, #20
 802d238:	4618      	mov	r0, r3
 802d23a:	f7fb fada 	bl	80287f2 <_ZN6tflite12RuntimeShapeD1Ev>
      const auto input_shape = tflite::micro::GetTensorShape(input);
 802d23e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 802d242:	4618      	mov	r0, r3
 802d244:	f7fb fad5 	bl	80287f2 <_ZN6tflite12RuntimeShapeD1Ev>
 802d248:	e028      	b.n	802d29c <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x168>
                     tflite::micro::GetTensorData<int8_t>(output));
    }
  } else {
    tflite::reference_ops::SoftmaxInt16(
        op_data, tflite::micro::GetTensorShape(input),
 802d24a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 802d24e:	68f9      	ldr	r1, [r7, #12]
 802d250:	4618      	mov	r0, r3
 802d252:	f7fe fe21 	bl	802be98 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::SoftmaxInt16(
 802d256:	68f8      	ldr	r0, [r7, #12]
 802d258:	f7fd fe68 	bl	802af2c <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>
 802d25c:	4604      	mov	r4, r0
        tflite::micro::GetTensorData<int16_t>(input),
        tflite::micro::GetTensorShape(output),
 802d25e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 802d262:	68b9      	ldr	r1, [r7, #8]
 802d264:	4618      	mov	r0, r3
 802d266:	f7fe fe17 	bl	802be98 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::SoftmaxInt16(
 802d26a:	68b8      	ldr	r0, [r7, #8]
 802d26c:	f7ff fb66 	bl	802c93c <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>
 802d270:	4602      	mov	r2, r0
 802d272:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 802d276:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 802d27a:	9200      	str	r2, [sp, #0]
 802d27c:	4622      	mov	r2, r4
 802d27e:	6878      	ldr	r0, [r7, #4]
 802d280:	f7ff fdce 	bl	802ce20 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps>
        tflite::micro::GetTensorShape(output),
 802d284:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 802d288:	4618      	mov	r0, r3
 802d28a:	f7fb fab2 	bl	80287f2 <_ZN6tflite12RuntimeShapeD1Ev>
        op_data, tflite::micro::GetTensorShape(input),
 802d28e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 802d292:	4618      	mov	r0, r3
 802d294:	f7fb faad 	bl	80287f2 <_ZN6tflite12RuntimeShapeD1Ev>
 802d298:	e000      	b.n	802d29c <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x168>
      return;
 802d29a:	bf00      	nop
        tflite::micro::GetTensorData<int16_t>(output));
  }
}
 802d29c:	37e0      	adds	r7, #224	; 0xe0
 802d29e:	46bd      	mov	sp, r7
 802d2a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0802d2a4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus SoftmaxEval(TfLiteContext* context, TfLiteNode* node) {
 802d2a4:	b5b0      	push	{r4, r5, r7, lr}
 802d2a6:	b09e      	sub	sp, #120	; 0x78
 802d2a8:	af00      	add	r7, sp, #0
 802d2aa:	6078      	str	r0, [r7, #4]
 802d2ac:	6039      	str	r1, [r7, #0]
  const TfLiteEvalTensor* input = tflite::micro::GetEvalInput(context, node, 0);
 802d2ae:	2200      	movs	r2, #0
 802d2b0:	6839      	ldr	r1, [r7, #0]
 802d2b2:	6878      	ldr	r0, [r7, #4]
 802d2b4:	f7fb fd22 	bl	8028cfc <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 802d2b8:	6778      	str	r0, [r7, #116]	; 0x74
  TfLiteEvalTensor* output = tflite::micro::GetEvalOutput(context, node, 0);
 802d2ba:	2200      	movs	r2, #0
 802d2bc:	6839      	ldr	r1, [r7, #0]
 802d2be:	6878      	ldr	r0, [r7, #4]
 802d2c0:	f7fb fd2c 	bl	8028d1c <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 802d2c4:	6738      	str	r0, [r7, #112]	; 0x70

  TFLITE_DCHECK(node->user_data != nullptr);
 802d2c6:	683b      	ldr	r3, [r7, #0]
 802d2c8:	691b      	ldr	r3, [r3, #16]
 802d2ca:	2b00      	cmp	r3, #0
 802d2cc:	d101      	bne.n	802d2d2 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x2e>
 802d2ce:	f004 fec5 	bl	803205c <abort>
  const SoftmaxParams data =
      *static_cast<const SoftmaxParams*>(node->user_data);
 802d2d2:	683b      	ldr	r3, [r7, #0]
 802d2d4:	691b      	ldr	r3, [r3, #16]
  const SoftmaxParams data =
 802d2d6:	f107 0408 	add.w	r4, r7, #8
 802d2da:	461d      	mov	r5, r3
 802d2dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802d2de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802d2e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802d2e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802d2e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802d2e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802d2e8:	e895 0003 	ldmia.w	r5, {r0, r1}
 802d2ec:	e884 0003 	stmia.w	r4, {r0, r1}

  switch (input->type) {
 802d2f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802d2f2:	7a1b      	ldrb	r3, [r3, #8]
 802d2f4:	3b01      	subs	r3, #1
 802d2f6:	2b08      	cmp	r3, #8
 802d2f8:	d84a      	bhi.n	802d390 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xec>
 802d2fa:	a201      	add	r2, pc, #4	; (adr r2, 802d300 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x5c>)
 802d2fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802d300:	0802d325 	.word	0x0802d325
 802d304:	0802d391 	.word	0x0802d391
 802d308:	0802d355 	.word	0x0802d355
 802d30c:	0802d391 	.word	0x0802d391
 802d310:	0802d391 	.word	0x0802d391
 802d314:	0802d391 	.word	0x0802d391
 802d318:	0802d373 	.word	0x0802d373
 802d31c:	0802d391 	.word	0x0802d391
 802d320:	0802d343 	.word	0x0802d343
    case kTfLiteFloat32: {
      #if EI_TFLITE_DISABLE_SOFTMAX_IN_F32
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 802d324:	687b      	ldr	r3, [r7, #4]
 802d326:	695c      	ldr	r4, [r3, #20]
 802d328:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802d32a:	7a1b      	ldrb	r3, [r3, #8]
 802d32c:	4618      	mov	r0, r3
 802d32e:	f7fa fb19 	bl	8027964 <TfLiteTypeGetName>
 802d332:	4602      	mov	r2, r0
 802d334:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802d336:	7a1b      	ldrb	r3, [r3, #8]
 802d338:	491e      	ldr	r1, [pc, #120]	; (802d3b4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x110>)
 802d33a:	6878      	ldr	r0, [r7, #4]
 802d33c:	47a0      	blx	r4
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 802d33e:	2301      	movs	r3, #1
 802d340:	e034      	b.n	802d3ac <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x108>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
      #endif

      SoftmaxQuantized(input, output, data);
 802d342:	f107 0308 	add.w	r3, r7, #8
 802d346:	461a      	mov	r2, r3
 802d348:	6f39      	ldr	r1, [r7, #112]	; 0x70
 802d34a:	6f78      	ldr	r0, [r7, #116]	; 0x74
 802d34c:	f7ff fef2 	bl	802d134 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE>
      return kTfLiteOk;
 802d350:	2300      	movs	r3, #0
 802d352:	e02b      	b.n	802d3ac <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x108>
    }
    case kTfLiteUInt8: {
      #if EI_TFLITE_DISABLE_SOFTMAX_IN_U8
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 802d354:	687b      	ldr	r3, [r7, #4]
 802d356:	695c      	ldr	r4, [r3, #20]
 802d358:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802d35a:	7a1b      	ldrb	r3, [r3, #8]
 802d35c:	4618      	mov	r0, r3
 802d35e:	f7fa fb01 	bl	8027964 <TfLiteTypeGetName>
 802d362:	4602      	mov	r2, r0
 802d364:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802d366:	7a1b      	ldrb	r3, [r3, #8]
 802d368:	4912      	ldr	r1, [pc, #72]	; (802d3b4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x110>)
 802d36a:	6878      	ldr	r0, [r7, #4]
 802d36c:	47a0      	blx	r4
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 802d36e:	2301      	movs	r3, #1
 802d370:	e01c      	b.n	802d3ac <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x108>
      SoftmaxQuantized(input, output, data);
      return kTfLiteOk;
    }
    case kTfLiteInt16: {
      #if EI_TFLITE_DISABLE_SOFTMAX_IN_I16
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 802d372:	687b      	ldr	r3, [r7, #4]
 802d374:	695c      	ldr	r4, [r3, #20]
 802d376:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802d378:	7a1b      	ldrb	r3, [r3, #8]
 802d37a:	4618      	mov	r0, r3
 802d37c:	f7fa faf2 	bl	8027964 <TfLiteTypeGetName>
 802d380:	4602      	mov	r2, r0
 802d382:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802d384:	7a1b      	ldrb	r3, [r3, #8]
 802d386:	490b      	ldr	r1, [pc, #44]	; (802d3b4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x110>)
 802d388:	6878      	ldr	r0, [r7, #4]
 802d38a:	47a0      	blx	r4
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 802d38c:	2301      	movs	r3, #1
 802d38e:	e00d      	b.n	802d3ac <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x108>

      SoftmaxQuantized(input, output, data);
      return kTfLiteOk;
    }
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 802d390:	687b      	ldr	r3, [r7, #4]
 802d392:	695c      	ldr	r4, [r3, #20]
 802d394:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802d396:	7a1b      	ldrb	r3, [r3, #8]
 802d398:	4618      	mov	r0, r3
 802d39a:	f7fa fae3 	bl	8027964 <TfLiteTypeGetName>
 802d39e:	4602      	mov	r2, r0
 802d3a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802d3a2:	7a1b      	ldrb	r3, [r3, #8]
 802d3a4:	4903      	ldr	r1, [pc, #12]	; (802d3b4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x110>)
 802d3a6:	6878      	ldr	r0, [r7, #4]
 802d3a8:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 802d3aa:	2301      	movs	r3, #1
  }
}
 802d3ac:	4618      	mov	r0, r3
 802d3ae:	3778      	adds	r7, #120	; 0x78
 802d3b0:	46bd      	mov	sp, r7
 802d3b2:	bdb0      	pop	{r4, r5, r7, pc}
 802d3b4:	080358c0 	.word	0x080358c0

0802d3b8 <_ZN6tflite16Register_SOFTMAXEv>:

}  // namespace

TfLiteRegistration Register_SOFTMAX() {
 802d3b8:	b4b0      	push	{r4, r5, r7}
 802d3ba:	b083      	sub	sp, #12
 802d3bc:	af00      	add	r7, sp, #0
 802d3be:	6078      	str	r0, [r7, #4]
          /*prepare=*/SoftmaxPrepare,
          /*invoke=*/SoftmaxEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 802d3c0:	687b      	ldr	r3, [r7, #4]
 802d3c2:	4a07      	ldr	r2, [pc, #28]	; (802d3e0 <_ZN6tflite16Register_SOFTMAXEv+0x28>)
 802d3c4:	461c      	mov	r4, r3
 802d3c6:	4615      	mov	r5, r2
 802d3c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802d3ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802d3cc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 802d3d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 802d3d4:	6878      	ldr	r0, [r7, #4]
 802d3d6:	370c      	adds	r7, #12
 802d3d8:	46bd      	mov	sp, r7
 802d3da:	bcb0      	pop	{r4, r5, r7}
 802d3dc:	4770      	bx	lr
 802d3de:	bf00      	nop
 802d3e0:	080358dc 	.word	0x080358dc

0802d3e4 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:
inline void Softmax(const SoftmaxParams& params,
 802d3e4:	b590      	push	{r4, r7, lr}
 802d3e6:	b09f      	sub	sp, #124	; 0x7c
 802d3e8:	af00      	add	r7, sp, #0
 802d3ea:	60f8      	str	r0, [r7, #12]
 802d3ec:	60b9      	str	r1, [r7, #8]
 802d3ee:	607a      	str	r2, [r7, #4]
 802d3f0:	603b      	str	r3, [r7, #0]
  const int32_t input_beta_multiplier = params.input_multiplier;
 802d3f2:	68fb      	ldr	r3, [r7, #12]
 802d3f4:	689b      	ldr	r3, [r3, #8]
 802d3f6:	667b      	str	r3, [r7, #100]	; 0x64
  const int32_t input_beta_left_shift = params.input_left_shift;
 802d3f8:	68fb      	ldr	r3, [r7, #12]
 802d3fa:	68db      	ldr	r3, [r3, #12]
 802d3fc:	663b      	str	r3, [r7, #96]	; 0x60
  const int diff_min = params.diff_min;
 802d3fe:	68fb      	ldr	r3, [r7, #12]
 802d400:	699b      	ldr	r3, [r3, #24]
 802d402:	65fb      	str	r3, [r7, #92]	; 0x5c
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 802d404:	68b8      	ldr	r0, [r7, #8]
 802d406:	f7fb fa0a 	bl	802881e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 802d40a:	4603      	mov	r3, r0
 802d40c:	3b01      	subs	r3, #1
 802d40e:	65bb      	str	r3, [r7, #88]	; 0x58
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 802d410:	683a      	ldr	r2, [r7, #0]
 802d412:	6db9      	ldr	r1, [r7, #88]	; 0x58
 802d414:	68b8      	ldr	r0, [r7, #8]
 802d416:	f7fe fdad 	bl	802bf74 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 802d41a:	6578      	str	r0, [r7, #84]	; 0x54
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 802d41c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802d41e:	683a      	ldr	r2, [r7, #0]
 802d420:	6db9      	ldr	r1, [r7, #88]	; 0x58
 802d422:	68b8      	ldr	r0, [r7, #8]
 802d424:	f7fc fcb9 	bl	8029d9a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 802d428:	6538      	str	r0, [r7, #80]	; 0x50
  for (int i = 0; i < outer_size; ++i) {
 802d42a:	2300      	movs	r3, #0
 802d42c:	677b      	str	r3, [r7, #116]	; 0x74
 802d42e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 802d430:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802d432:	429a      	cmp	r2, r3
 802d434:	f280 80ed 	bge.w	802d612 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x22e>
    InputT max_in_row = std::numeric_limits<InputT>::min();
 802d438:	2300      	movs	r3, #0
 802d43a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 802d43e:	2300      	movs	r3, #0
 802d440:	673b      	str	r3, [r7, #112]	; 0x70
 802d442:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 802d444:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802d446:	429a      	cmp	r2, r3
 802d448:	da16      	bge.n	802d478 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x94>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
 802d44a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802d44c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802d44e:	fb03 f202 	mul.w	r2, r3, r2
 802d452:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 802d454:	4413      	add	r3, r2
 802d456:	461a      	mov	r2, r3
 802d458:	687b      	ldr	r3, [r7, #4]
 802d45a:	441a      	add	r2, r3
 802d45c:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 802d460:	4611      	mov	r1, r2
 802d462:	4618      	mov	r0, r3
 802d464:	f7ff fa56 	bl	802c914 <_ZSt3maxIhERKT_S2_S2_>
 802d468:	4603      	mov	r3, r0
 802d46a:	781b      	ldrb	r3, [r3, #0]
 802d46c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 802d470:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 802d472:	3301      	adds	r3, #1
 802d474:	673b      	str	r3, [r7, #112]	; 0x70
 802d476:	e7e4      	b.n	802d442 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x5e>
    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
 802d478:	f000 f8cf 	bl	802d61a <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>
 802d47c:	4603      	mov	r3, r0
 802d47e:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 802d480:	2300      	movs	r3, #0
 802d482:	66fb      	str	r3, [r7, #108]	; 0x6c
 802d484:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 802d486:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802d488:	429a      	cmp	r2, r3
 802d48a:	da2f      	bge.n	802d4ec <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x108>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
 802d48c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802d48e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802d490:	fb03 f202 	mul.w	r2, r3, r2
 802d494:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 802d496:	4413      	add	r3, r2
 802d498:	461a      	mov	r2, r3
 802d49a:	687b      	ldr	r3, [r7, #4]
 802d49c:	4413      	add	r3, r2
 802d49e:	781b      	ldrb	r3, [r3, #0]
 802d4a0:	461a      	mov	r2, r3
 802d4a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
      int32_t input_diff =
 802d4a6:	1ad3      	subs	r3, r2, r3
 802d4a8:	64fb      	str	r3, [r7, #76]	; 0x4c
      if (input_diff >= diff_min) {
 802d4aa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802d4ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802d4ae:	429a      	cmp	r2, r3
 802d4b0:	db18      	blt.n	802d4e4 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x100>
            MultiplyByQuantizedMultiplierGreaterThanOne(
 802d4b2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 802d4b4:	6e79      	ldr	r1, [r7, #100]	; 0x64
 802d4b6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 802d4b8:	f7fd fd99 	bl	802afee <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 802d4bc:	64b8      	str	r0, [r7, #72]	; 0x48
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 802d4be:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 802d4c0:	f000 f8b3 	bl	802d62a <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 802d4c4:	4603      	mov	r3, r0
 802d4c6:	61fb      	str	r3, [r7, #28]
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
 802d4c8:	69f8      	ldr	r0, [r7, #28]
 802d4ca:	f000 f8dd 	bl	802d688 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 802d4ce:	4603      	mov	r3, r0
 802d4d0:	4618      	mov	r0, r3
 802d4d2:	f000 fa21 	bl	802d918 <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 802d4d6:	4603      	mov	r3, r0
 802d4d8:	4619      	mov	r1, r3
 802d4da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802d4dc:	f000 f8b6 	bl	802d64c <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>
 802d4e0:	4603      	mov	r3, r0
 802d4e2:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 802d4e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 802d4e6:	3301      	adds	r3, #1
 802d4e8:	66fb      	str	r3, [r7, #108]	; 0x6c
 802d4ea:	e7cb      	b.n	802d484 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xa0>
        sum_of_exps.raw(), kAccumulationIntegerBits, &num_bits_over_unit));
 802d4ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 802d4f0:	4618      	mov	r0, r3
 802d4f2:	f000 fa2b 	bl	802d94c <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 802d4f6:	4603      	mov	r3, r0
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
 802d4f8:	681b      	ldr	r3, [r3, #0]
 802d4fa:	f107 0224 	add.w	r2, r7, #36	; 0x24
 802d4fe:	210c      	movs	r1, #12
 802d500:	4618      	mov	r0, r3
 802d502:	f7fd fd87 	bl	802b014 <_ZN6tflite13GetReciprocalEliPi>
 802d506:	4603      	mov	r3, r0
 802d508:	4618      	mov	r0, r3
 802d50a:	f7fd fdc0 	bl	802b08e <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 802d50e:	4603      	mov	r3, r0
 802d510:	623b      	str	r3, [r7, #32]
    for (int c = 0; c < depth; ++c) {
 802d512:	2300      	movs	r3, #0
 802d514:	66bb      	str	r3, [r7, #104]	; 0x68
 802d516:	6eba      	ldr	r2, [r7, #104]	; 0x68
 802d518:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802d51a:	429a      	cmp	r2, r3
 802d51c:	da75      	bge.n	802d60a <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x226>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
 802d51e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802d520:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802d522:	fb03 f202 	mul.w	r2, r3, r2
 802d526:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 802d528:	4413      	add	r3, r2
 802d52a:	461a      	mov	r2, r3
 802d52c:	687b      	ldr	r3, [r7, #4]
 802d52e:	4413      	add	r3, r2
 802d530:	781b      	ldrb	r3, [r3, #0]
 802d532:	461a      	mov	r2, r3
 802d534:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
      int32_t input_diff =
 802d538:	1ad3      	subs	r3, r2, r3
 802d53a:	647b      	str	r3, [r7, #68]	; 0x44
      if (input_diff >= diff_min) {
 802d53c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 802d53e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802d540:	429a      	cmp	r2, r3
 802d542:	db50      	blt.n	802d5e6 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x202>
            MultiplyByQuantizedMultiplierGreaterThanOne(
 802d544:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 802d546:	6e79      	ldr	r1, [r7, #100]	; 0x64
 802d548:	6c78      	ldr	r0, [r7, #68]	; 0x44
 802d54a:	f7fd fd50 	bl	802afee <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 802d54e:	6438      	str	r0, [r7, #64]	; 0x40
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 802d550:	6c38      	ldr	r0, [r7, #64]	; 0x40
 802d552:	f000 f86a 	bl	802d62a <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 802d556:	4603      	mov	r3, r0
 802d558:	61bb      	str	r3, [r7, #24]
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
 802d55a:	69b8      	ldr	r0, [r7, #24]
 802d55c:	f000 f894 	bl	802d688 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 802d560:	4603      	mov	r3, r0
 802d562:	617b      	str	r3, [r7, #20]
            (shifted_scale * exp_in_0).raw(),
 802d564:	6979      	ldr	r1, [r7, #20]
 802d566:	6a38      	ldr	r0, [r7, #32]
 802d568:	f7fe fdee 	bl	802c148 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 802d56c:	4603      	mov	r3, r0
 802d56e:	633b      	str	r3, [r7, #48]	; 0x30
 802d570:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802d574:	4618      	mov	r0, r3
 802d576:	f7fd fdfb 	bl	802b170 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 802d57a:	4603      	mov	r3, r0
        int32_t unsat_output = gemmlowp::RoundingDivideByPOT(
 802d57c:	681b      	ldr	r3, [r3, #0]
            num_bits_over_unit + 31 - (sizeof(OutputT) * 8));
 802d57e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802d580:	3217      	adds	r2, #23
        int32_t unsat_output = gemmlowp::RoundingDivideByPOT(
 802d582:	4611      	mov	r1, r2
 802d584:	4618      	mov	r0, r3
 802d586:	f7fb fedf 	bl	8029348 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 802d58a:	63f8      	str	r0, [r7, #60]	; 0x3c
            static_cast<int32_t>(std::numeric_limits<OutputT>::min());
 802d58c:	f7fa fc39 	bl	8027e02 <_ZNSt14numeric_limitsIhE3minEv>
 802d590:	4603      	mov	r3, r0
 802d592:	461a      	mov	r2, r3
            unsat_output +
 802d594:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802d596:	4413      	add	r3, r2
        const int32_t shifted_output =
 802d598:	613b      	str	r3, [r7, #16]
                     static_cast<int32_t>(std::numeric_limits<OutputT>::max())),
 802d59a:	f7fa fc3a 	bl	8027e12 <_ZNSt14numeric_limitsIhE3maxEv>
 802d59e:	4603      	mov	r3, r0
 802d5a0:	637b      	str	r3, [r7, #52]	; 0x34
            static_cast<int32_t>(std::numeric_limits<OutputT>::min())));
 802d5a2:	f107 0234 	add.w	r2, r7, #52	; 0x34
 802d5a6:	f107 0310 	add.w	r3, r7, #16
 802d5aa:	4611      	mov	r1, r2
 802d5ac:	4618      	mov	r0, r3
 802d5ae:	f7fb f8d7 	bl	8028760 <_ZSt3minIlERKT_S2_S2_>
 802d5b2:	4604      	mov	r4, r0
 802d5b4:	f7fa fc25 	bl	8027e02 <_ZNSt14numeric_limitsIhE3minEv>
 802d5b8:	4603      	mov	r3, r0
 802d5ba:	63bb      	str	r3, [r7, #56]	; 0x38
 802d5bc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 802d5c0:	4619      	mov	r1, r3
 802d5c2:	4620      	mov	r0, r4
 802d5c4:	f7fb f8e0 	bl	8028788 <_ZSt3maxIlERKT_S2_S2_>
 802d5c8:	4603      	mov	r3, r0
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
 802d5ca:	6819      	ldr	r1, [r3, #0]
 802d5cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802d5ce:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802d5d0:	fb03 f202 	mul.w	r2, r3, r2
 802d5d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 802d5d6:	4413      	add	r3, r2
 802d5d8:	461a      	mov	r2, r3
 802d5da:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 802d5de:	4413      	add	r3, r2
 802d5e0:	b2ca      	uxtb	r2, r1
 802d5e2:	701a      	strb	r2, [r3, #0]
 802d5e4:	e00d      	b.n	802d602 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x21e>
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
 802d5e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802d5e8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802d5ea:	fb03 f202 	mul.w	r2, r3, r2
 802d5ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 802d5f0:	4413      	add	r3, r2
 802d5f2:	461a      	mov	r2, r3
 802d5f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 802d5f8:	189c      	adds	r4, r3, r2
 802d5fa:	f7fa fc02 	bl	8027e02 <_ZNSt14numeric_limitsIhE3minEv>
 802d5fe:	4603      	mov	r3, r0
 802d600:	7023      	strb	r3, [r4, #0]
    for (int c = 0; c < depth; ++c) {
 802d602:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 802d604:	3301      	adds	r3, #1
 802d606:	66bb      	str	r3, [r7, #104]	; 0x68
 802d608:	e785      	b.n	802d516 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x132>
  for (int i = 0; i < outer_size; ++i) {
 802d60a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802d60c:	3301      	adds	r3, #1
 802d60e:	677b      	str	r3, [r7, #116]	; 0x74
 802d610:	e70d      	b.n	802d42e <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x4a>
}
 802d612:	bf00      	nop
 802d614:	377c      	adds	r7, #124	; 0x7c
 802d616:	46bd      	mov	sp, r7
 802d618:	bd90      	pop	{r4, r7, pc}

0802d61a <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>:
  static FixedPoint Zero() { return FromScalarRaw(0); }
 802d61a:	b580      	push	{r7, lr}
 802d61c:	af00      	add	r7, sp, #0
 802d61e:	2000      	movs	r0, #0
 802d620:	f000 f99f 	bl	802d962 <_ZN8gemmlowp10FixedPointIlLi12EE13FromScalarRawEl>
 802d624:	4603      	mov	r3, r0
 802d626:	4618      	mov	r0, r3
 802d628:	bd80      	pop	{r7, pc}

0802d62a <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 802d62a:	b580      	push	{r7, lr}
 802d62c:	b084      	sub	sp, #16
 802d62e:	af00      	add	r7, sp, #0
 802d630:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 802d632:	f107 030c 	add.w	r3, r7, #12
 802d636:	4618      	mov	r0, r3
 802d638:	f000 f9a7 	bl	802d98a <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 802d63c:	4602      	mov	r2, r0
 802d63e:	687b      	ldr	r3, [r7, #4]
 802d640:	6013      	str	r3, [r2, #0]
    return retval;
 802d642:	68fb      	ldr	r3, [r7, #12]
  }
 802d644:	4618      	mov	r0, r3
 802d646:	3710      	adds	r7, #16
 802d648:	46bd      	mov	sp, r7
 802d64a:	bd80      	pop	{r7, pc}

0802d64c <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 802d64c:	b590      	push	{r4, r7, lr}
 802d64e:	b083      	sub	sp, #12
 802d650:	af00      	add	r7, sp, #0
 802d652:	6078      	str	r0, [r7, #4]
 802d654:	6039      	str	r1, [r7, #0]
 802d656:	1d3b      	adds	r3, r7, #4
 802d658:	4618      	mov	r0, r3
 802d65a:	f000 f977 	bl	802d94c <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 802d65e:	4603      	mov	r3, r0
 802d660:	681c      	ldr	r4, [r3, #0]
 802d662:	463b      	mov	r3, r7
 802d664:	4618      	mov	r0, r3
 802d666:	f000 f971 	bl	802d94c <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 802d66a:	4603      	mov	r3, r0
 802d66c:	681b      	ldr	r3, [r3, #0]
 802d66e:	4619      	mov	r1, r3
 802d670:	4620      	mov	r0, r4
 802d672:	f7fc fa69 	bl	8029b48 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 802d676:	4603      	mov	r3, r0
 802d678:	4618      	mov	r0, r3
 802d67a:	f000 f991 	bl	802d9a0 <_ZN8gemmlowp10FixedPointIlLi12EE7FromRawEl>
 802d67e:	4603      	mov	r3, r0
 802d680:	4618      	mov	r0, r3
 802d682:	370c      	adds	r7, #12
 802d684:	46bd      	mov	sp, r7
 802d686:	bd90      	pop	{r4, r7, pc}

0802d688 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>:
FixedPoint<tRawType, 0> exp_on_negative_values(
 802d688:	b590      	push	{r4, r7, lr}
 802d68a:	b091      	sub	sp, #68	; 0x44
 802d68c:	af00      	add	r7, sp, #0
 802d68e:	6078      	str	r0, [r7, #4]
  const InputF kOneQuarter = InputF::template ConstantPOT<-2>();
 802d690:	f000 f997 	bl	802d9c2 <_ZN8gemmlowp10FixedPointIlLi5EE11ConstantPOTILin2EEES1_v>
 802d694:	4603      	mov	r3, r0
 802d696:	637b      	str	r3, [r7, #52]	; 0x34
  InputF mask = kOneQuarter - InputF::FromScalarRaw(1);
 802d698:	2001      	movs	r0, #1
 802d69a:	f000 f99b 	bl	802d9d4 <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>
 802d69e:	4603      	mov	r3, r0
 802d6a0:	4619      	mov	r1, r3
 802d6a2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 802d6a4:	f000 f9aa 	bl	802d9fc <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 802d6a8:	4603      	mov	r3, r0
 802d6aa:	633b      	str	r3, [r7, #48]	; 0x30
  InputF a_mod_quarter_minus_one_quarter = (a & mask) - kOneQuarter;
 802d6ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 802d6ae:	6878      	ldr	r0, [r7, #4]
 802d6b0:	f000 f9c2 	bl	802da38 <_ZN8gemmlowpanIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 802d6b4:	4603      	mov	r3, r0
 802d6b6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 802d6b8:	4618      	mov	r0, r3
 802d6ba:	f000 f99f 	bl	802d9fc <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 802d6be:	4603      	mov	r3, r0
 802d6c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  ResultF result = exp_on_interval_between_negative_one_quarter_and_0_excl(
 802d6c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 802d6c4:	f000 f9d6 	bl	802da74 <_ZN8gemmlowp7RescaleILi0ElLi5EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 802d6c8:	4603      	mov	r3, r0
 802d6ca:	4618      	mov	r0, r3
 802d6cc:	f7fe fcda 	bl	802c084 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_>
 802d6d0:	4603      	mov	r3, r0
 802d6d2:	62bb      	str	r3, [r7, #40]	; 0x28
  tRawType remainder = (a_mod_quarter_minus_one_quarter - a).raw();
 802d6d4:	6879      	ldr	r1, [r7, #4]
 802d6d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 802d6d8:	f000 f990 	bl	802d9fc <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 802d6dc:	4603      	mov	r3, r0
 802d6de:	63bb      	str	r3, [r7, #56]	; 0x38
 802d6e0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 802d6e4:	4618      	mov	r0, r3
 802d6e6:	f000 f950 	bl	802d98a <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 802d6ea:	4603      	mov	r3, r0
 802d6ec:	681b      	ldr	r3, [r3, #0]
 802d6ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  GEMMLOWP_EXP_BARREL_SHIFTER(-2, 1672461947);
 802d6f0:	4883      	ldr	r0, [pc, #524]	; (802d900 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x278>)
 802d6f2:	f7fe fc6e 	bl	802bfd2 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 802d6f6:	4603      	mov	r3, r0
 802d6f8:	4618      	mov	r0, r3
 802d6fa:	f7fd fd44 	bl	802b186 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 802d6fe:	4603      	mov	r3, r0
 802d700:	627b      	str	r3, [r7, #36]	; 0x24
 802d702:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 802d706:	f7fc f9e3 	bl	8029ad0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 802d70a:	4603      	mov	r3, r0
 802d70c:	4619      	mov	r1, r3
 802d70e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 802d710:	f7fc f9e9 	bl	8029ae6 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 802d714:	4603      	mov	r3, r0
 802d716:	4618      	mov	r0, r3
 802d718:	f7fc fa38 	bl	8029b8c <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 802d71c:	4604      	mov	r4, r0
 802d71e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 802d720:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802d722:	f7fe fd11 	bl	802c148 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 802d726:	4603      	mov	r3, r0
 802d728:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802d72a:	4619      	mov	r1, r3
 802d72c:	4620      	mov	r0, r4
 802d72e:	f7fe fc76 	bl	802c01e <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 802d732:	4603      	mov	r3, r0
 802d734:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(-1, 1302514674);
 802d736:	4873      	ldr	r0, [pc, #460]	; (802d904 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x27c>)
 802d738:	f7fe fc4b 	bl	802bfd2 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 802d73c:	4603      	mov	r3, r0
 802d73e:	4618      	mov	r0, r3
 802d740:	f7fd fd21 	bl	802b186 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 802d744:	4603      	mov	r3, r0
 802d746:	623b      	str	r3, [r7, #32]
 802d748:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 802d74c:	f7fc f9c0 	bl	8029ad0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 802d750:	4603      	mov	r3, r0
 802d752:	4619      	mov	r1, r3
 802d754:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 802d756:	f7fc f9c6 	bl	8029ae6 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 802d75a:	4603      	mov	r3, r0
 802d75c:	4618      	mov	r0, r3
 802d75e:	f7fc fa15 	bl	8029b8c <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 802d762:	4604      	mov	r4, r0
 802d764:	6a39      	ldr	r1, [r7, #32]
 802d766:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802d768:	f7fe fcee 	bl	802c148 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 802d76c:	4603      	mov	r3, r0
 802d76e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802d770:	4619      	mov	r1, r3
 802d772:	4620      	mov	r0, r4
 802d774:	f7fe fc53 	bl	802c01e <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 802d778:	4603      	mov	r3, r0
 802d77a:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+0, 790015084);
 802d77c:	4862      	ldr	r0, [pc, #392]	; (802d908 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x280>)
 802d77e:	f7fe fc28 	bl	802bfd2 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 802d782:	4603      	mov	r3, r0
 802d784:	4618      	mov	r0, r3
 802d786:	f7fd fcfe 	bl	802b186 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 802d78a:	4603      	mov	r3, r0
 802d78c:	61fb      	str	r3, [r7, #28]
 802d78e:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 802d792:	f7fc f99d 	bl	8029ad0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 802d796:	4603      	mov	r3, r0
 802d798:	4619      	mov	r1, r3
 802d79a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 802d79c:	f7fc f9a3 	bl	8029ae6 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 802d7a0:	4603      	mov	r3, r0
 802d7a2:	4618      	mov	r0, r3
 802d7a4:	f7fc f9f2 	bl	8029b8c <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 802d7a8:	4604      	mov	r4, r0
 802d7aa:	69f9      	ldr	r1, [r7, #28]
 802d7ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802d7ae:	f7fe fccb 	bl	802c148 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 802d7b2:	4603      	mov	r3, r0
 802d7b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802d7b6:	4619      	mov	r1, r3
 802d7b8:	4620      	mov	r0, r4
 802d7ba:	f7fe fc30 	bl	802c01e <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 802d7be:	4603      	mov	r3, r0
 802d7c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+1, 290630308);
 802d7c2:	4852      	ldr	r0, [pc, #328]	; (802d90c <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x284>)
 802d7c4:	f7fe fc05 	bl	802bfd2 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 802d7c8:	4603      	mov	r3, r0
 802d7ca:	4618      	mov	r0, r3
 802d7cc:	f7fd fcdb 	bl	802b186 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 802d7d0:	4603      	mov	r3, r0
 802d7d2:	61bb      	str	r3, [r7, #24]
 802d7d4:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 802d7d8:	f7fc f97a 	bl	8029ad0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 802d7dc:	4603      	mov	r3, r0
 802d7de:	4619      	mov	r1, r3
 802d7e0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 802d7e2:	f7fc f980 	bl	8029ae6 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 802d7e6:	4603      	mov	r3, r0
 802d7e8:	4618      	mov	r0, r3
 802d7ea:	f7fc f9cf 	bl	8029b8c <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 802d7ee:	4604      	mov	r4, r0
 802d7f0:	69b9      	ldr	r1, [r7, #24]
 802d7f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802d7f4:	f7fe fca8 	bl	802c148 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 802d7f8:	4603      	mov	r3, r0
 802d7fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802d7fc:	4619      	mov	r1, r3
 802d7fe:	4620      	mov	r0, r4
 802d800:	f7fe fc0d 	bl	802c01e <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 802d804:	4603      	mov	r3, r0
 802d806:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+2, 39332535);
 802d808:	4841      	ldr	r0, [pc, #260]	; (802d910 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x288>)
 802d80a:	f7fe fbe2 	bl	802bfd2 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 802d80e:	4603      	mov	r3, r0
 802d810:	4618      	mov	r0, r3
 802d812:	f7fd fcb8 	bl	802b186 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 802d816:	4603      	mov	r3, r0
 802d818:	617b      	str	r3, [r7, #20]
 802d81a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 802d81e:	f7fc f957 	bl	8029ad0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 802d822:	4603      	mov	r3, r0
 802d824:	4619      	mov	r1, r3
 802d826:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 802d828:	f7fc f95d 	bl	8029ae6 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 802d82c:	4603      	mov	r3, r0
 802d82e:	4618      	mov	r0, r3
 802d830:	f7fc f9ac 	bl	8029b8c <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 802d834:	4604      	mov	r4, r0
 802d836:	6979      	ldr	r1, [r7, #20]
 802d838:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802d83a:	f7fe fc85 	bl	802c148 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 802d83e:	4603      	mov	r3, r0
 802d840:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802d842:	4619      	mov	r1, r3
 802d844:	4620      	mov	r0, r4
 802d846:	f7fe fbea 	bl	802c01e <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 802d84a:	4603      	mov	r3, r0
 802d84c:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+3, 720401);
 802d84e:	4831      	ldr	r0, [pc, #196]	; (802d914 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x28c>)
 802d850:	f7fe fbbf 	bl	802bfd2 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 802d854:	4603      	mov	r3, r0
 802d856:	4618      	mov	r0, r3
 802d858:	f7fd fc95 	bl	802b186 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 802d85c:	4603      	mov	r3, r0
 802d85e:	613b      	str	r3, [r7, #16]
 802d860:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 802d864:	f7fc f934 	bl	8029ad0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 802d868:	4603      	mov	r3, r0
 802d86a:	4619      	mov	r1, r3
 802d86c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 802d86e:	f7fc f93a 	bl	8029ae6 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 802d872:	4603      	mov	r3, r0
 802d874:	4618      	mov	r0, r3
 802d876:	f7fc f989 	bl	8029b8c <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 802d87a:	4604      	mov	r4, r0
 802d87c:	6939      	ldr	r1, [r7, #16]
 802d87e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802d880:	f7fe fc62 	bl	802c148 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 802d884:	4603      	mov	r3, r0
 802d886:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802d888:	4619      	mov	r1, r3
 802d88a:	4620      	mov	r0, r4
 802d88c:	f7fe fbc7 	bl	802c01e <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 802d890:	4603      	mov	r3, r0
 802d892:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+4, 242);
 802d894:	20f2      	movs	r0, #242	; 0xf2
 802d896:	f7fe fb9c 	bl	802bfd2 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 802d89a:	4603      	mov	r3, r0
 802d89c:	4618      	mov	r0, r3
 802d89e:	f7fd fc72 	bl	802b186 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 802d8a2:	4603      	mov	r3, r0
 802d8a4:	60fb      	str	r3, [r7, #12]
 802d8a6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 802d8aa:	f7fc f911 	bl	8029ad0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 802d8ae:	4603      	mov	r3, r0
 802d8b0:	4619      	mov	r1, r3
 802d8b2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 802d8b4:	f7fc f917 	bl	8029ae6 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 802d8b8:	4603      	mov	r3, r0
 802d8ba:	4618      	mov	r0, r3
 802d8bc:	f7fc f966 	bl	8029b8c <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 802d8c0:	4604      	mov	r4, r0
 802d8c2:	68f9      	ldr	r1, [r7, #12]
 802d8c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802d8c6:	f7fe fc3f 	bl	802c148 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 802d8ca:	4603      	mov	r3, r0
 802d8cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802d8ce:	4619      	mov	r1, r3
 802d8d0:	4620      	mov	r0, r4
 802d8d2:	f7fe fba4 	bl	802c01e <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 802d8d6:	4603      	mov	r3, r0
 802d8d8:	62bb      	str	r3, [r7, #40]	; 0x28
  result = SelectUsingMask(MaskIfZero(a), ResultF::One(), result);
 802d8da:	6878      	ldr	r0, [r7, #4]
 802d8dc:	f000 f8e4 	bl	802daa8 <_ZN8gemmlowp10MaskIfZeroIlLi5EEET_NS_10FixedPointIS1_XT0_EEE>
 802d8e0:	4604      	mov	r4, r0
 802d8e2:	f7fd fc64 	bl	802b1ae <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>
 802d8e6:	4603      	mov	r3, r0
 802d8e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802d8ea:	4619      	mov	r1, r3
 802d8ec:	4620      	mov	r0, r4
 802d8ee:	f7fe fb96 	bl	802c01e <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 802d8f2:	4603      	mov	r3, r0
 802d8f4:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 802d8f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 802d8f8:	4618      	mov	r0, r3
 802d8fa:	3744      	adds	r7, #68	; 0x44
 802d8fc:	46bd      	mov	sp, r7
 802d8fe:	bd90      	pop	{r4, r7, pc}
 802d900:	63afbe7b 	.word	0x63afbe7b
 802d904:	4da2cbf2 	.word	0x4da2cbf2
 802d908:	2f16ac6c 	.word	0x2f16ac6c
 802d90c:	1152aaa4 	.word	0x1152aaa4
 802d910:	02582ab7 	.word	0x02582ab7
 802d914:	000afe11 	.word	0x000afe11

0802d918 <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 802d918:	b5b0      	push	{r4, r5, r7, lr}
 802d91a:	b084      	sub	sp, #16
 802d91c:	af00      	add	r7, sp, #0
 802d91e:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 802d920:	1d3b      	adds	r3, r7, #4
 802d922:	4618      	mov	r0, r3
 802d924:	f7fd fc24 	bl	802b170 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 802d928:	4603      	mov	r3, r0
 802d92a:	681d      	ldr	r5, [r3, #0]
 802d92c:	f107 030c 	add.w	r3, r7, #12
 802d930:	4618      	mov	r0, r3
 802d932:	f000 f80b 	bl	802d94c <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 802d936:	4604      	mov	r4, r0
 802d938:	4628      	mov	r0, r5
 802d93a:	f000 f8c7 	bl	802dacc <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin12ElEET0_S1_>
 802d93e:	4603      	mov	r3, r0
 802d940:	6023      	str	r3, [r4, #0]
  return result;
 802d942:	68fb      	ldr	r3, [r7, #12]
}
 802d944:	4618      	mov	r0, r3
 802d946:	3710      	adds	r7, #16
 802d948:	46bd      	mov	sp, r7
 802d94a:	bdb0      	pop	{r4, r5, r7, pc}

0802d94c <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>:
  RawType& raw() { return i_; }
 802d94c:	b480      	push	{r7}
 802d94e:	b083      	sub	sp, #12
 802d950:	af00      	add	r7, sp, #0
 802d952:	6078      	str	r0, [r7, #4]
 802d954:	687b      	ldr	r3, [r7, #4]
 802d956:	4618      	mov	r0, r3
 802d958:	370c      	adds	r7, #12
 802d95a:	46bd      	mov	sp, r7
 802d95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d960:	4770      	bx	lr

0802d962 <_ZN8gemmlowp10FixedPointIlLi12EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 802d962:	b590      	push	{r4, r7, lr}
 802d964:	b085      	sub	sp, #20
 802d966:	af00      	add	r7, sp, #0
 802d968:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 802d96a:	f107 030c 	add.w	r3, r7, #12
 802d96e:	4618      	mov	r0, r3
 802d970:	f7ff ffec 	bl	802d94c <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 802d974:	4604      	mov	r4, r0
 802d976:	6878      	ldr	r0, [r7, #4]
 802d978:	f7fc f8aa 	bl	8029ad0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 802d97c:	4603      	mov	r3, r0
 802d97e:	6023      	str	r3, [r4, #0]
    return retval;
 802d980:	68fb      	ldr	r3, [r7, #12]
  }
 802d982:	4618      	mov	r0, r3
 802d984:	3714      	adds	r7, #20
 802d986:	46bd      	mov	sp, r7
 802d988:	bd90      	pop	{r4, r7, pc}

0802d98a <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>:
  RawType& raw() { return i_; }
 802d98a:	b480      	push	{r7}
 802d98c:	b083      	sub	sp, #12
 802d98e:	af00      	add	r7, sp, #0
 802d990:	6078      	str	r0, [r7, #4]
 802d992:	687b      	ldr	r3, [r7, #4]
 802d994:	4618      	mov	r0, r3
 802d996:	370c      	adds	r7, #12
 802d998:	46bd      	mov	sp, r7
 802d99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d99e:	4770      	bx	lr

0802d9a0 <_ZN8gemmlowp10FixedPointIlLi12EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 802d9a0:	b580      	push	{r7, lr}
 802d9a2:	b084      	sub	sp, #16
 802d9a4:	af00      	add	r7, sp, #0
 802d9a6:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 802d9a8:	f107 030c 	add.w	r3, r7, #12
 802d9ac:	4618      	mov	r0, r3
 802d9ae:	f7ff ffcd 	bl	802d94c <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 802d9b2:	4602      	mov	r2, r0
 802d9b4:	687b      	ldr	r3, [r7, #4]
 802d9b6:	6013      	str	r3, [r2, #0]
    return retval;
 802d9b8:	68fb      	ldr	r3, [r7, #12]
  }
 802d9ba:	4618      	mov	r0, r3
 802d9bc:	3710      	adds	r7, #16
 802d9be:	46bd      	mov	sp, r7
 802d9c0:	bd80      	pop	{r7, pc}

0802d9c2 <_ZN8gemmlowp10FixedPointIlLi5EE11ConstantPOTILin2EEES1_v>:
  static FixedPoint ConstantPOT() {
 802d9c2:	b580      	push	{r7, lr}
 802d9c4:	af00      	add	r7, sp, #0
    return FromScalarRaw(ScalarRawType(1) << kOffset);
 802d9c6:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 802d9ca:	f000 f803 	bl	802d9d4 <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>
 802d9ce:	4603      	mov	r3, r0
  }
 802d9d0:	4618      	mov	r0, r3
 802d9d2:	bd80      	pop	{r7, pc}

0802d9d4 <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 802d9d4:	b590      	push	{r4, r7, lr}
 802d9d6:	b085      	sub	sp, #20
 802d9d8:	af00      	add	r7, sp, #0
 802d9da:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 802d9dc:	f107 030c 	add.w	r3, r7, #12
 802d9e0:	4618      	mov	r0, r3
 802d9e2:	f7ff ffd2 	bl	802d98a <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 802d9e6:	4604      	mov	r4, r0
 802d9e8:	6878      	ldr	r0, [r7, #4]
 802d9ea:	f7fc f871 	bl	8029ad0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 802d9ee:	4603      	mov	r3, r0
 802d9f0:	6023      	str	r3, [r4, #0]
    return retval;
 802d9f2:	68fb      	ldr	r3, [r7, #12]
  }
 802d9f4:	4618      	mov	r0, r3
 802d9f6:	3714      	adds	r7, #20
 802d9f8:	46bd      	mov	sp, r7
 802d9fa:	bd90      	pop	{r4, r7, pc}

0802d9fc <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator-, Sub)
 802d9fc:	b590      	push	{r4, r7, lr}
 802d9fe:	b083      	sub	sp, #12
 802da00:	af00      	add	r7, sp, #0
 802da02:	6078      	str	r0, [r7, #4]
 802da04:	6039      	str	r1, [r7, #0]
 802da06:	1d3b      	adds	r3, r7, #4
 802da08:	4618      	mov	r0, r3
 802da0a:	f7ff ffbe 	bl	802d98a <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 802da0e:	4603      	mov	r3, r0
 802da10:	681c      	ldr	r4, [r3, #0]
 802da12:	463b      	mov	r3, r7
 802da14:	4618      	mov	r0, r3
 802da16:	f7ff ffb8 	bl	802d98a <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 802da1a:	4603      	mov	r3, r0
 802da1c:	681b      	ldr	r3, [r3, #0]
 802da1e:	4619      	mov	r1, r3
 802da20:	4620      	mov	r0, r4
 802da22:	f7fd fce1 	bl	802b3e8 <_ZN8gemmlowp3SubIlEET_S1_S1_>
 802da26:	4603      	mov	r3, r0
 802da28:	4618      	mov	r0, r3
 802da2a:	f7ff fdfe 	bl	802d62a <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 802da2e:	4603      	mov	r3, r0
 802da30:	4618      	mov	r0, r3
 802da32:	370c      	adds	r7, #12
 802da34:	46bd      	mov	sp, r7
 802da36:	bd90      	pop	{r4, r7, pc}

0802da38 <_ZN8gemmlowpanIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator&, BitAnd)
 802da38:	b590      	push	{r4, r7, lr}
 802da3a:	b083      	sub	sp, #12
 802da3c:	af00      	add	r7, sp, #0
 802da3e:	6078      	str	r0, [r7, #4]
 802da40:	6039      	str	r1, [r7, #0]
 802da42:	1d3b      	adds	r3, r7, #4
 802da44:	4618      	mov	r0, r3
 802da46:	f7ff ffa0 	bl	802d98a <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 802da4a:	4603      	mov	r3, r0
 802da4c:	681c      	ldr	r4, [r3, #0]
 802da4e:	463b      	mov	r3, r7
 802da50:	4618      	mov	r0, r3
 802da52:	f7ff ff9a 	bl	802d98a <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 802da56:	4603      	mov	r3, r0
 802da58:	681b      	ldr	r3, [r3, #0]
 802da5a:	4619      	mov	r1, r3
 802da5c:	4620      	mov	r0, r4
 802da5e:	f7fc f842 	bl	8029ae6 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 802da62:	4603      	mov	r3, r0
 802da64:	4618      	mov	r0, r3
 802da66:	f7ff fde0 	bl	802d62a <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 802da6a:	4603      	mov	r3, r0
 802da6c:	4618      	mov	r0, r3
 802da6e:	370c      	adds	r7, #12
 802da70:	46bd      	mov	sp, r7
 802da72:	bd90      	pop	{r4, r7, pc}

0802da74 <_ZN8gemmlowp7RescaleILi0ElLi5EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 802da74:	b5b0      	push	{r4, r5, r7, lr}
 802da76:	b084      	sub	sp, #16
 802da78:	af00      	add	r7, sp, #0
 802da7a:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 802da7c:	1d3b      	adds	r3, r7, #4
 802da7e:	4618      	mov	r0, r3
 802da80:	f7ff ff83 	bl	802d98a <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 802da84:	4603      	mov	r3, r0
 802da86:	681d      	ldr	r5, [r3, #0]
 802da88:	f107 030c 	add.w	r3, r7, #12
 802da8c:	4618      	mov	r0, r3
 802da8e:	f7fd fb6f 	bl	802b170 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 802da92:	4604      	mov	r4, r0
 802da94:	4628      	mov	r0, r5
 802da96:	f000 f825 	bl	802dae4 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi5ElEET0_S1_>
 802da9a:	4603      	mov	r3, r0
 802da9c:	6023      	str	r3, [r4, #0]
  return result;
 802da9e:	68fb      	ldr	r3, [r7, #12]
}
 802daa0:	4618      	mov	r0, r3
 802daa2:	3710      	adds	r7, #16
 802daa4:	46bd      	mov	sp, r7
 802daa6:	bdb0      	pop	{r4, r5, r7, pc}

0802daa8 <_ZN8gemmlowp10MaskIfZeroIlLi5EEET_NS_10FixedPointIS1_XT0_EEE>:
MAKE_FIXEDPOINT_UNARY_FUNC_RETURNING_RAW(MaskIfZero)
 802daa8:	b580      	push	{r7, lr}
 802daaa:	b082      	sub	sp, #8
 802daac:	af00      	add	r7, sp, #0
 802daae:	6078      	str	r0, [r7, #4]
 802dab0:	1d3b      	adds	r3, r7, #4
 802dab2:	4618      	mov	r0, r3
 802dab4:	f7ff ff69 	bl	802d98a <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 802dab8:	4603      	mov	r3, r0
 802daba:	681b      	ldr	r3, [r3, #0]
 802dabc:	4618      	mov	r0, r3
 802dabe:	f7fe facf 	bl	802c060 <_ZN8gemmlowp10MaskIfZeroIlEET_S1_>
 802dac2:	4603      	mov	r3, r0
 802dac4:	4618      	mov	r0, r3
 802dac6:	3708      	adds	r7, #8
 802dac8:	46bd      	mov	sp, r7
 802daca:	bd80      	pop	{r7, pc}

0802dacc <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin12ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 802dacc:	b580      	push	{r7, lr}
 802dace:	b082      	sub	sp, #8
 802dad0:	af00      	add	r7, sp, #0
 802dad2:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 802dad4:	6878      	ldr	r0, [r7, #4]
 802dad6:	f000 f811 	bl	802dafc <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin12ElLin1EE4evalEl>
 802dada:	4603      	mov	r3, r0
}
 802dadc:	4618      	mov	r0, r3
 802dade:	3708      	adds	r7, #8
 802dae0:	46bd      	mov	sp, r7
 802dae2:	bd80      	pop	{r7, pc}

0802dae4 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi5ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 802dae4:	b580      	push	{r7, lr}
 802dae6:	b082      	sub	sp, #8
 802dae8:	af00      	add	r7, sp, #0
 802daea:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 802daec:	6878      	ldr	r0, [r7, #4]
 802daee:	f000 f813 	bl	802db18 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl>
 802daf2:	4603      	mov	r3, r0
}
 802daf4:	4618      	mov	r0, r3
 802daf6:	3708      	adds	r7, #8
 802daf8:	46bd      	mov	sp, r7
 802dafa:	bd80      	pop	{r7, pc}

0802dafc <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin12ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 802dafc:	b580      	push	{r7, lr}
 802dafe:	b082      	sub	sp, #8
 802db00:	af00      	add	r7, sp, #0
 802db02:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 802db04:	210c      	movs	r1, #12
 802db06:	6878      	ldr	r0, [r7, #4]
 802db08:	f7fb fc1e 	bl	8029348 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 802db0c:	4603      	mov	r3, r0
  }
 802db0e:	4618      	mov	r0, r3
 802db10:	3708      	adds	r7, #8
 802db12:	46bd      	mov	sp, r7
 802db14:	bd80      	pop	{r7, pc}
	...

0802db18 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 802db18:	b580      	push	{r7, lr}
 802db1a:	b08a      	sub	sp, #40	; 0x28
 802db1c:	af00      	add	r7, sp, #0
 802db1e:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 802db20:	f7fa ff8d 	bl	8028a3e <_ZNSt14numeric_limitsIlE3minEv>
 802db24:	4603      	mov	r3, r0
 802db26:	4618      	mov	r0, r3
 802db28:	f7fb ffd2 	bl	8029ad0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 802db2c:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 802db2e:	f7f9 ff95 	bl	8027a5c <_ZNSt14numeric_limitsIlE3maxEv>
 802db32:	4603      	mov	r3, r0
 802db34:	4618      	mov	r0, r3
 802db36:	f7fb ffcb 	bl	8029ad0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 802db3a:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 802db3c:	2320      	movs	r3, #32
 802db3e:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 802db40:	f06f 437c 	mvn.w	r3, #4227858432	; 0xfc000000
 802db44:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 802db46:	f06f 407c 	mvn.w	r0, #4227858432	; 0xfc000000
 802db4a:	f7fb ffc1 	bl	8029ad0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 802db4e:	4603      	mov	r3, r0
 802db50:	4619      	mov	r1, r3
 802db52:	6878      	ldr	r0, [r7, #4]
 802db54:	f7fc f806 	bl	8029b64 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 802db58:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 802db5a:	480f      	ldr	r0, [pc, #60]	; (802db98 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl+0x80>)
 802db5c:	f7fb ffb8 	bl	8029ad0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 802db60:	4603      	mov	r3, r0
 802db62:	4619      	mov	r1, r3
 802db64:	6878      	ldr	r0, [r7, #4]
 802db66:	f7fb ffdb 	bl	8029b20 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 802db6a:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 802db6c:	2105      	movs	r1, #5
 802db6e:	6878      	ldr	r0, [r7, #4]
 802db70:	f7fd fd1e 	bl	802b5b0 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 802db74:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 802db76:	68fa      	ldr	r2, [r7, #12]
 802db78:	6a39      	ldr	r1, [r7, #32]
 802db7a:	6978      	ldr	r0, [r7, #20]
 802db7c:	f7fd fd5c 	bl	802b638 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 802db80:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 802db82:	68fa      	ldr	r2, [r7, #12]
 802db84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 802db86:	6938      	ldr	r0, [r7, #16]
 802db88:	f7fd fd56 	bl	802b638 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 802db8c:	60f8      	str	r0, [r7, #12]
    return result;
 802db8e:	68fb      	ldr	r3, [r7, #12]
  }
 802db90:	4618      	mov	r0, r3
 802db92:	3728      	adds	r7, #40	; 0x28
 802db94:	46bd      	mov	sp, r7
 802db96:	bd80      	pop	{r7, pc}
 802db98:	fc000001 	.word	0xfc000001

0802db9c <_ZN6tflite7gen_lutEPFffEffPsi>:
                    const int num) {
 802db9c:	b580      	push	{r7, lr}
 802db9e:	ed2d 8b02 	vpush	{d8}
 802dba2:	b094      	sub	sp, #80	; 0x50
 802dba4:	af00      	add	r7, sp, #0
 802dba6:	6178      	str	r0, [r7, #20]
 802dba8:	ed87 0a04 	vstr	s0, [r7, #16]
 802dbac:	edc7 0a03 	vstr	s1, [r7, #12]
 802dbb0:	60b9      	str	r1, [r7, #8]
 802dbb2:	607a      	str	r2, [r7, #4]
  float step = (max - min) / (num - 1);
 802dbb4:	ed97 7a03 	vldr	s14, [r7, #12]
 802dbb8:	edd7 7a04 	vldr	s15, [r7, #16]
 802dbbc:	ee77 6a67 	vsub.f32	s13, s14, s15
 802dbc0:	687b      	ldr	r3, [r7, #4]
 802dbc2:	3b01      	subs	r3, #1
 802dbc4:	ee07 3a90 	vmov	s15, r3
 802dbc8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 802dbcc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 802dbd0:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
  float half_step = step / 2.0f;
 802dbd4:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 802dbd8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 802dbdc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 802dbe0:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
  for (int i = 0; i < num - 1; i++) {
 802dbe4:	2300      	movs	r3, #0
 802dbe6:	64fb      	str	r3, [r7, #76]	; 0x4c
 802dbe8:	687b      	ldr	r3, [r7, #4]
 802dbea:	3b01      	subs	r3, #1
 802dbec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802dbee:	429a      	cmp	r2, r3
 802dbf0:	f280 80c0 	bge.w	802dd74 <_ZN6tflite7gen_lutEPFffEffPsi+0x1d8>
    float sample_val = TfLiteRound(func(min + i * step) * 32768.0f);
 802dbf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802dbf6:	ee07 3a90 	vmov	s15, r3
 802dbfa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 802dbfe:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 802dc02:	ee27 7a27 	vmul.f32	s14, s14, s15
 802dc06:	edd7 7a04 	vldr	s15, [r7, #16]
 802dc0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 802dc0e:	697b      	ldr	r3, [r7, #20]
 802dc10:	eeb0 0a67 	vmov.f32	s0, s15
 802dc14:	4798      	blx	r3
 802dc16:	eef0 7a40 	vmov.f32	s15, s0
 802dc1a:	ed9f 7a74 	vldr	s14, [pc, #464]	; 802ddec <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 802dc1e:	ee67 7a87 	vmul.f32	s15, s15, s14
 802dc22:	eeb0 0a67 	vmov.f32	s0, s15
 802dc26:	f7fa f8cb 	bl	8027dc0 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 802dc2a:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
        TfLiteRound((func(min + (i + 1) * step) * 32768.0f +
 802dc2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802dc30:	3301      	adds	r3, #1
 802dc32:	ee07 3a90 	vmov	s15, r3
 802dc36:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 802dc3a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 802dc3e:	ee27 7a27 	vmul.f32	s14, s14, s15
 802dc42:	edd7 7a04 	vldr	s15, [r7, #16]
 802dc46:	ee77 7a27 	vadd.f32	s15, s14, s15
 802dc4a:	697b      	ldr	r3, [r7, #20]
 802dc4c:	eeb0 0a67 	vmov.f32	s0, s15
 802dc50:	4798      	blx	r3
 802dc52:	eef0 7a40 	vmov.f32	s15, s0
 802dc56:	ed9f 7a65 	vldr	s14, [pc, #404]	; 802ddec <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 802dc5a:	ee27 8a87 	vmul.f32	s16, s15, s14
                     TfLiteRound(func(min + i * step) * 32768.0f)) /
 802dc5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802dc60:	ee07 3a90 	vmov	s15, r3
 802dc64:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 802dc68:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 802dc6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 802dc70:	edd7 7a04 	vldr	s15, [r7, #16]
 802dc74:	ee77 7a27 	vadd.f32	s15, s14, s15
 802dc78:	697b      	ldr	r3, [r7, #20]
 802dc7a:	eeb0 0a67 	vmov.f32	s0, s15
 802dc7e:	4798      	blx	r3
 802dc80:	eef0 7a40 	vmov.f32	s15, s0
 802dc84:	ed9f 7a59 	vldr	s14, [pc, #356]	; 802ddec <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 802dc88:	ee67 7a87 	vmul.f32	s15, s15, s14
 802dc8c:	eeb0 0a67 	vmov.f32	s0, s15
 802dc90:	f7fa f896 	bl	8027dc0 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 802dc94:	eef0 7a40 	vmov.f32	s15, s0
        TfLiteRound((func(min + (i + 1) * step) * 32768.0f +
 802dc98:	ee78 7a27 	vadd.f32	s15, s16, s15
 802dc9c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 802dca0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 802dca4:	eeb0 0a47 	vmov.f32	s0, s14
 802dca8:	f7fa f88a 	bl	8027dc0 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 802dcac:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
        TfLiteRound(func(min + i * step + half_step) * 32768.0f);
 802dcb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802dcb2:	ee07 3a90 	vmov	s15, r3
 802dcb6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 802dcba:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 802dcbe:	ee27 7a27 	vmul.f32	s14, s14, s15
 802dcc2:	edd7 7a04 	vldr	s15, [r7, #16]
 802dcc6:	ee37 7a27 	vadd.f32	s14, s14, s15
 802dcca:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 802dcce:	ee77 7a27 	vadd.f32	s15, s14, s15
 802dcd2:	697b      	ldr	r3, [r7, #20]
 802dcd4:	eeb0 0a67 	vmov.f32	s0, s15
 802dcd8:	4798      	blx	r3
 802dcda:	eef0 7a40 	vmov.f32	s15, s0
 802dcde:	ed9f 7a43 	vldr	s14, [pc, #268]	; 802ddec <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 802dce2:	ee67 7a87 	vmul.f32	s15, s15, s14
 802dce6:	eeb0 0a67 	vmov.f32	s0, s15
 802dcea:	f7fa f869 	bl	8027dc0 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 802dcee:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
    float midpoint_err = midpoint_interp_val - midpoint_val;
 802dcf2:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 802dcf6:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 802dcfa:	ee77 7a67 	vsub.f32	s15, s14, s15
 802dcfe:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    float bias = TfLiteRound(midpoint_err / 2.0f);
 802dd02:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 802dd06:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 802dd0a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 802dd0e:	eeb0 0a47 	vmov.f32	s0, s14
 802dd12:	f7fa f855 	bl	8027dc0 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 802dd16:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
    table[i] = std::min<float>(std::max<float>(sample_val - bias, -32768.0f),
 802dd1a:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 802dd1e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 802dd22:	ee77 7a67 	vsub.f32	s15, s14, s15
 802dd26:	edc7 7a06 	vstr	s15, [r7, #24]
 802dd2a:	f04f 4347 	mov.w	r3, #3338665984	; 0xc7000000
 802dd2e:	61fb      	str	r3, [r7, #28]
                               32767.0f);
 802dd30:	f107 021c 	add.w	r2, r7, #28
 802dd34:	f107 0318 	add.w	r3, r7, #24
 802dd38:	4611      	mov	r1, r2
 802dd3a:	4618      	mov	r0, r3
 802dd3c:	f7d7 ffa7 	bl	8005c8e <_ZSt3maxIfERKT_S2_S2_>
 802dd40:	4602      	mov	r2, r0
 802dd42:	4b2b      	ldr	r3, [pc, #172]	; (802ddf0 <_ZN6tflite7gen_lutEPFffEffPsi+0x254>)
 802dd44:	623b      	str	r3, [r7, #32]
 802dd46:	f107 0320 	add.w	r3, r7, #32
 802dd4a:	4619      	mov	r1, r3
 802dd4c:	4610      	mov	r0, r2
 802dd4e:	f7fa f80a 	bl	8027d66 <_ZSt3minIfERKT_S2_S2_>
 802dd52:	4603      	mov	r3, r0
    table[i] = std::min<float>(std::max<float>(sample_val - bias, -32768.0f),
 802dd54:	edd3 7a00 	vldr	s15, [r3]
 802dd58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802dd5a:	005b      	lsls	r3, r3, #1
 802dd5c:	68ba      	ldr	r2, [r7, #8]
 802dd5e:	4413      	add	r3, r2
 802dd60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802dd64:	ee17 2a90 	vmov	r2, s15
 802dd68:	b212      	sxth	r2, r2
 802dd6a:	801a      	strh	r2, [r3, #0]
  for (int i = 0; i < num - 1; i++) {
 802dd6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802dd6e:	3301      	adds	r3, #1
 802dd70:	64fb      	str	r3, [r7, #76]	; 0x4c
 802dd72:	e739      	b.n	802dbe8 <_ZN6tflite7gen_lutEPFffEffPsi+0x4c>
      std::max<float>(TfLiteRound(func(max) * 32768.0f), -32768.0f), 32767.0f);
 802dd74:	697b      	ldr	r3, [r7, #20]
 802dd76:	ed97 0a03 	vldr	s0, [r7, #12]
 802dd7a:	4798      	blx	r3
 802dd7c:	eef0 7a40 	vmov.f32	s15, s0
 802dd80:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 802ddec <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 802dd84:	ee67 7a87 	vmul.f32	s15, s15, s14
 802dd88:	eeb0 0a67 	vmov.f32	s0, s15
 802dd8c:	f7fa f818 	bl	8027dc0 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 802dd90:	eef0 7a40 	vmov.f32	s15, s0
 802dd94:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 802dd98:	f04f 4347 	mov.w	r3, #3338665984	; 0xc7000000
 802dd9c:	62bb      	str	r3, [r7, #40]	; 0x28
 802dd9e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 802dda2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802dda6:	4611      	mov	r1, r2
 802dda8:	4618      	mov	r0, r3
 802ddaa:	f7d7 ff70 	bl	8005c8e <_ZSt3maxIfERKT_S2_S2_>
 802ddae:	4602      	mov	r2, r0
 802ddb0:	4b0f      	ldr	r3, [pc, #60]	; (802ddf0 <_ZN6tflite7gen_lutEPFffEffPsi+0x254>)
 802ddb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 802ddb4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 802ddb8:	4619      	mov	r1, r3
 802ddba:	4610      	mov	r0, r2
 802ddbc:	f7f9 ffd3 	bl	8027d66 <_ZSt3minIfERKT_S2_S2_>
 802ddc0:	4603      	mov	r3, r0
  table[num - 1] = std::min<float>(
 802ddc2:	edd3 7a00 	vldr	s15, [r3]
 802ddc6:	687b      	ldr	r3, [r7, #4]
 802ddc8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 802ddcc:	3b01      	subs	r3, #1
 802ddce:	005b      	lsls	r3, r3, #1
 802ddd0:	68ba      	ldr	r2, [r7, #8]
 802ddd2:	4413      	add	r3, r2
 802ddd4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802ddd8:	ee17 2a90 	vmov	r2, s15
 802dddc:	b212      	sxth	r2, r2
 802ddde:	801a      	strh	r2, [r3, #0]
}
 802dde0:	bf00      	nop
 802dde2:	3750      	adds	r7, #80	; 0x50
 802dde4:	46bd      	mov	sp, r7
 802dde6:	ecbd 8b02 	vpop	{d8}
 802ddea:	bd80      	pop	{r7, pc}
 802ddec:	47000000 	.word	0x47000000
 802ddf0:	46fffe00 	.word	0x46fffe00
 802ddf4:	00000000 	.word	0x00000000

0802ddf8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>:

TfLiteStatus CalculateSoftmaxParams(TfLiteContext* context,
                                    const TfLiteTensor* input,
                                    TfLiteTensor* output,
                                    const TfLiteSoftmaxParams* params,
                                    SoftmaxParams* op_data) {
 802ddf8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 802ddfc:	b090      	sub	sp, #64	; 0x40
 802ddfe:	af06      	add	r7, sp, #24
 802de00:	60f8      	str	r0, [r7, #12]
 802de02:	60b9      	str	r1, [r7, #8]
 802de04:	607a      	str	r2, [r7, #4]
 802de06:	603b      	str	r3, [r7, #0]
  if (input->type == kTfLiteInt8 || input->type == kTfLiteInt16) {
 802de08:	68bb      	ldr	r3, [r7, #8]
 802de0a:	781b      	ldrb	r3, [r3, #0]
 802de0c:	2b09      	cmp	r3, #9
 802de0e:	d004      	beq.n	802de1a <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x22>
 802de10:	68bb      	ldr	r3, [r7, #8]
 802de12:	781b      	ldrb	r3, [r3, #0]
 802de14:	2b07      	cmp	r3, #7
 802de16:	f040 81b6 	bne.w	802e186 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x38e>
    if (input->type == kTfLiteInt16) {
 802de1a:	68bb      	ldr	r3, [r7, #8]
 802de1c:	781b      	ldrb	r3, [r3, #0]
 802de1e:	2b07      	cmp	r3, #7
 802de20:	d156      	bne.n	802ded0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xd8>
      TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
 802de22:	687b      	ldr	r3, [r7, #4]
 802de24:	691b      	ldr	r3, [r3, #16]
 802de26:	2b00      	cmp	r3, #0
 802de28:	d011      	beq.n	802de4e <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x56>
 802de2a:	68fb      	ldr	r3, [r7, #12]
 802de2c:	695c      	ldr	r4, [r3, #20]
 802de2e:	687b      	ldr	r3, [r7, #4]
 802de30:	691b      	ldr	r3, [r3, #16]
 802de32:	2200      	movs	r2, #0
 802de34:	9203      	str	r2, [sp, #12]
 802de36:	9302      	str	r3, [sp, #8]
 802de38:	4ba1      	ldr	r3, [pc, #644]	; (802e0c0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2c8>)
 802de3a:	9301      	str	r3, [sp, #4]
 802de3c:	4ba1      	ldr	r3, [pc, #644]	; (802e0c4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2cc>)
 802de3e:	9300      	str	r3, [sp, #0]
 802de40:	2325      	movs	r3, #37	; 0x25
 802de42:	4aa1      	ldr	r2, [pc, #644]	; (802e0c8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 802de44:	49a1      	ldr	r1, [pc, #644]	; (802e0cc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d4>)
 802de46:	68f8      	ldr	r0, [r7, #12]
 802de48:	47a0      	blx	r4
 802de4a:	2301      	movs	r3, #1
 802de4c:	e1e0      	b.n	802e210 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
      TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 32768,
 802de4e:	687b      	ldr	r3, [r7, #4]
 802de50:	edd3 7a03 	vldr	s15, [r3, #12]
 802de54:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 802e0d0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d8>
 802de58:	eef4 7ac7 	vcmpe.f32	s15, s14
 802de5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802de60:	dd07      	ble.n	802de72 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x7a>
 802de62:	687b      	ldr	r3, [r7, #4]
 802de64:	edd3 7a03 	vldr	s15, [r3, #12]
 802de68:	ed9f 7a99 	vldr	s14, [pc, #612]	; 802e0d0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d8>
 802de6c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802de70:	e006      	b.n	802de80 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x88>
 802de72:	687b      	ldr	r3, [r7, #4]
 802de74:	edd3 7a03 	vldr	s15, [r3, #12]
 802de78:	ed9f 7a95 	vldr	s14, [pc, #596]	; 802e0d0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d8>
 802de7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 802de80:	edc7 7a08 	vstr	s15, [r7, #32]
 802de84:	edd7 7a08 	vldr	s15, [r7, #32]
 802de88:	ed9f 7a92 	vldr	s14, [pc, #584]	; 802e0d4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2dc>
 802de8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 802de90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802de94:	f340 80dd 	ble.w	802e052 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x25a>
 802de98:	68fb      	ldr	r3, [r7, #12]
 802de9a:	695c      	ldr	r4, [r3, #20]
 802de9c:	687b      	ldr	r3, [r7, #4]
 802de9e:	68db      	ldr	r3, [r3, #12]
 802dea0:	4618      	mov	r0, r3
 802dea2:	f7d2 fb5b 	bl	800055c <__aeabi_f2d>
 802dea6:	4602      	mov	r2, r0
 802dea8:	460b      	mov	r3, r1
 802deaa:	f04f 0000 	mov.w	r0, #0
 802deae:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 802deb2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 802deb6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 802deba:	4b87      	ldr	r3, [pc, #540]	; (802e0d8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e0>)
 802debc:	9301      	str	r3, [sp, #4]
 802debe:	4b87      	ldr	r3, [pc, #540]	; (802e0dc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e4>)
 802dec0:	9300      	str	r3, [sp, #0]
 802dec2:	2326      	movs	r3, #38	; 0x26
 802dec4:	4a80      	ldr	r2, [pc, #512]	; (802e0c8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 802dec6:	4986      	ldr	r1, [pc, #536]	; (802e0e0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
 802dec8:	68f8      	ldr	r0, [r7, #12]
 802deca:	47a0      	blx	r4
 802decc:	2301      	movs	r3, #1
 802dece:	e19f      	b.n	802e210 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
                          (0.001f * 1.f / 32768));
    } else {  // input->type == kTfLiteInt8
      TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteInt8);
 802ded0:	68bb      	ldr	r3, [r7, #8]
 802ded2:	781b      	ldrb	r3, [r3, #0]
 802ded4:	2b09      	cmp	r3, #9
 802ded6:	d018      	beq.n	802df0a <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x112>
 802ded8:	68fb      	ldr	r3, [r7, #12]
 802deda:	695c      	ldr	r4, [r3, #20]
 802dedc:	68bb      	ldr	r3, [r7, #8]
 802dede:	781b      	ldrb	r3, [r3, #0]
 802dee0:	4618      	mov	r0, r3
 802dee2:	f7f9 fd3f 	bl	8027964 <TfLiteTypeGetName>
 802dee6:	4605      	mov	r5, r0
 802dee8:	2009      	movs	r0, #9
 802deea:	f7f9 fd3b 	bl	8027964 <TfLiteTypeGetName>
 802deee:	4603      	mov	r3, r0
 802def0:	9303      	str	r3, [sp, #12]
 802def2:	9502      	str	r5, [sp, #8]
 802def4:	4b7b      	ldr	r3, [pc, #492]	; (802e0e4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ec>)
 802def6:	9301      	str	r3, [sp, #4]
 802def8:	4b7b      	ldr	r3, [pc, #492]	; (802e0e8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f0>)
 802defa:	9300      	str	r3, [sp, #0]
 802defc:	2329      	movs	r3, #41	; 0x29
 802defe:	4a72      	ldr	r2, [pc, #456]	; (802e0c8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 802df00:	497a      	ldr	r1, [pc, #488]	; (802e0ec <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f4>)
 802df02:	68f8      	ldr	r0, [r7, #12]
 802df04:	47a0      	blx	r4
 802df06:	2301      	movs	r3, #1
 802df08:	e182      	b.n	802e210 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
      if (output->type == kTfLiteInt16) {
 802df0a:	687b      	ldr	r3, [r7, #4]
 802df0c:	781b      	ldrb	r3, [r3, #0]
 802df0e:	2b07      	cmp	r3, #7
 802df10:	d155      	bne.n	802dfbe <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x1c6>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -32768);
 802df12:	687b      	ldr	r3, [r7, #4]
 802df14:	691b      	ldr	r3, [r3, #16]
 802df16:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 802df1a:	d011      	beq.n	802df40 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x148>
 802df1c:	68fb      	ldr	r3, [r7, #12]
 802df1e:	695c      	ldr	r4, [r3, #20]
 802df20:	687b      	ldr	r3, [r7, #4]
 802df22:	691b      	ldr	r3, [r3, #16]
 802df24:	4a72      	ldr	r2, [pc, #456]	; (802e0f0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f8>)
 802df26:	9203      	str	r2, [sp, #12]
 802df28:	9302      	str	r3, [sp, #8]
 802df2a:	4b72      	ldr	r3, [pc, #456]	; (802e0f4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2fc>)
 802df2c:	9301      	str	r3, [sp, #4]
 802df2e:	4b65      	ldr	r3, [pc, #404]	; (802e0c4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2cc>)
 802df30:	9300      	str	r3, [sp, #0]
 802df32:	232b      	movs	r3, #43	; 0x2b
 802df34:	4a64      	ldr	r2, [pc, #400]	; (802e0c8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 802df36:	4965      	ldr	r1, [pc, #404]	; (802e0cc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d4>)
 802df38:	68f8      	ldr	r0, [r7, #12]
 802df3a:	47a0      	blx	r4
 802df3c:	2301      	movs	r3, #1
 802df3e:	e167      	b.n	802e210 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
        TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 65536,
 802df40:	687b      	ldr	r3, [r7, #4]
 802df42:	edd3 7a03 	vldr	s15, [r3, #12]
 802df46:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 802e0f8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x300>
 802df4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 802df4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802df52:	dd07      	ble.n	802df64 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x16c>
 802df54:	687b      	ldr	r3, [r7, #4]
 802df56:	edd3 7a03 	vldr	s15, [r3, #12]
 802df5a:	ed9f 7a67 	vldr	s14, [pc, #412]	; 802e0f8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x300>
 802df5e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802df62:	e006      	b.n	802df72 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x17a>
 802df64:	687b      	ldr	r3, [r7, #4]
 802df66:	edd3 7a03 	vldr	s15, [r3, #12]
 802df6a:	ed9f 7a63 	vldr	s14, [pc, #396]	; 802e0f8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x300>
 802df6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 802df72:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 802df76:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 802df7a:	ed9f 7a60 	vldr	s14, [pc, #384]	; 802e0fc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x304>
 802df7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 802df82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802df86:	dd64      	ble.n	802e052 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x25a>
 802df88:	68fb      	ldr	r3, [r7, #12]
 802df8a:	695c      	ldr	r4, [r3, #20]
 802df8c:	687b      	ldr	r3, [r7, #4]
 802df8e:	68db      	ldr	r3, [r3, #12]
 802df90:	4618      	mov	r0, r3
 802df92:	f7d2 fae3 	bl	800055c <__aeabi_f2d>
 802df96:	4602      	mov	r2, r0
 802df98:	460b      	mov	r3, r1
 802df9a:	f04f 0000 	mov.w	r0, #0
 802df9e:	4958      	ldr	r1, [pc, #352]	; (802e100 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x308>)
 802dfa0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 802dfa4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 802dfa8:	4b56      	ldr	r3, [pc, #344]	; (802e104 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x30c>)
 802dfaa:	9301      	str	r3, [sp, #4]
 802dfac:	4b4b      	ldr	r3, [pc, #300]	; (802e0dc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e4>)
 802dfae:	9300      	str	r3, [sp, #0]
 802dfb0:	232c      	movs	r3, #44	; 0x2c
 802dfb2:	4a45      	ldr	r2, [pc, #276]	; (802e0c8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 802dfb4:	494a      	ldr	r1, [pc, #296]	; (802e0e0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
 802dfb6:	68f8      	ldr	r0, [r7, #12]
 802dfb8:	47a0      	blx	r4
 802dfba:	2301      	movs	r3, #1
 802dfbc:	e128      	b.n	802e210 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
                            (0.001f * 1.f / 65536));
      } else {  // output->type == kTfLiteint8
        TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteInt8);
 802dfbe:	687b      	ldr	r3, [r7, #4]
 802dfc0:	781b      	ldrb	r3, [r3, #0]
 802dfc2:	2b09      	cmp	r3, #9
 802dfc4:	d018      	beq.n	802dff8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x200>
 802dfc6:	68fb      	ldr	r3, [r7, #12]
 802dfc8:	695c      	ldr	r4, [r3, #20]
 802dfca:	687b      	ldr	r3, [r7, #4]
 802dfcc:	781b      	ldrb	r3, [r3, #0]
 802dfce:	4618      	mov	r0, r3
 802dfd0:	f7f9 fcc8 	bl	8027964 <TfLiteTypeGetName>
 802dfd4:	4605      	mov	r5, r0
 802dfd6:	2009      	movs	r0, #9
 802dfd8:	f7f9 fcc4 	bl	8027964 <TfLiteTypeGetName>
 802dfdc:	4603      	mov	r3, r0
 802dfde:	9303      	str	r3, [sp, #12]
 802dfe0:	9502      	str	r5, [sp, #8]
 802dfe2:	4b40      	ldr	r3, [pc, #256]	; (802e0e4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ec>)
 802dfe4:	9301      	str	r3, [sp, #4]
 802dfe6:	4b48      	ldr	r3, [pc, #288]	; (802e108 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x310>)
 802dfe8:	9300      	str	r3, [sp, #0]
 802dfea:	232f      	movs	r3, #47	; 0x2f
 802dfec:	4a36      	ldr	r2, [pc, #216]	; (802e0c8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 802dfee:	493f      	ldr	r1, [pc, #252]	; (802e0ec <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f4>)
 802dff0:	68f8      	ldr	r0, [r7, #12]
 802dff2:	47a0      	blx	r4
 802dff4:	2301      	movs	r3, #1
 802dff6:	e10b      	b.n	802e210 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -128);
 802dff8:	687b      	ldr	r3, [r7, #4]
 802dffa:	691b      	ldr	r3, [r3, #16]
 802dffc:	f113 0f80 	cmn.w	r3, #128	; 0x80
 802e000:	d012      	beq.n	802e028 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x230>
 802e002:	68fb      	ldr	r3, [r7, #12]
 802e004:	695c      	ldr	r4, [r3, #20]
 802e006:	687b      	ldr	r3, [r7, #4]
 802e008:	691b      	ldr	r3, [r3, #16]
 802e00a:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 802e00e:	9203      	str	r2, [sp, #12]
 802e010:	9302      	str	r3, [sp, #8]
 802e012:	4b3e      	ldr	r3, [pc, #248]	; (802e10c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x314>)
 802e014:	9301      	str	r3, [sp, #4]
 802e016:	4b2b      	ldr	r3, [pc, #172]	; (802e0c4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2cc>)
 802e018:	9300      	str	r3, [sp, #0]
 802e01a:	2330      	movs	r3, #48	; 0x30
 802e01c:	4a2a      	ldr	r2, [pc, #168]	; (802e0c8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 802e01e:	492b      	ldr	r1, [pc, #172]	; (802e0cc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d4>)
 802e020:	68f8      	ldr	r0, [r7, #12]
 802e022:	47a0      	blx	r4
 802e024:	2301      	movs	r3, #1
 802e026:	e0f3      	b.n	802e210 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
        TF_LITE_ENSURE(context, output->params.scale == 1.f / 256);
 802e028:	687b      	ldr	r3, [r7, #4]
 802e02a:	edd3 7a03 	vldr	s15, [r3, #12]
 802e02e:	ed9f 7a38 	vldr	s14, [pc, #224]	; 802e110 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x318>
 802e032:	eef4 7a47 	vcmp.f32	s15, s14
 802e036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802e03a:	d00a      	beq.n	802e052 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x25a>
 802e03c:	68fb      	ldr	r3, [r7, #12]
 802e03e:	695c      	ldr	r4, [r3, #20]
 802e040:	4b34      	ldr	r3, [pc, #208]	; (802e114 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x31c>)
 802e042:	9300      	str	r3, [sp, #0]
 802e044:	2331      	movs	r3, #49	; 0x31
 802e046:	4a20      	ldr	r2, [pc, #128]	; (802e0c8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 802e048:	4933      	ldr	r1, [pc, #204]	; (802e118 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x320>)
 802e04a:	68f8      	ldr	r0, [r7, #12]
 802e04c:	47a0      	blx	r4
 802e04e:	2301      	movs	r3, #1
 802e050:	e0de      	b.n	802e210 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
    }

    static const int kScaledDiffIntegerBits = 5;

    // Calculate input_multiplier and input_left_shift
    if (input->type == kTfLiteInt16) {
 802e052:	68bb      	ldr	r3, [r7, #8]
 802e054:	781b      	ldrb	r3, [r3, #0]
 802e056:	2b07      	cmp	r3, #7
 802e058:	d160      	bne.n	802e11c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x324>
      int input_left_shift;
      double input_scale_beta_rescale =
          static_cast<double>(input->params.scale) *
 802e05a:	68bb      	ldr	r3, [r7, #8]
 802e05c:	68db      	ldr	r3, [r3, #12]
 802e05e:	4618      	mov	r0, r3
 802e060:	f7d2 fa7c 	bl	800055c <__aeabi_f2d>
 802e064:	4604      	mov	r4, r0
 802e066:	460d      	mov	r5, r1
          static_cast<double>(params->beta) /
 802e068:	683b      	ldr	r3, [r7, #0]
 802e06a:	681b      	ldr	r3, [r3, #0]
 802e06c:	4618      	mov	r0, r3
 802e06e:	f7d2 fa75 	bl	800055c <__aeabi_f2d>
 802e072:	4602      	mov	r2, r0
 802e074:	460b      	mov	r3, r1
          static_cast<double>(input->params.scale) *
 802e076:	4620      	mov	r0, r4
 802e078:	4629      	mov	r1, r5
 802e07a:	f7d2 fac7 	bl	800060c <__aeabi_dmul>
 802e07e:	4602      	mov	r2, r0
 802e080:	460b      	mov	r3, r1
 802e082:	4610      	mov	r0, r2
 802e084:	4619      	mov	r1, r3
      double input_scale_beta_rescale =
 802e086:	a30c      	add	r3, pc, #48	; (adr r3, 802e0b8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2c0>)
 802e088:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e08c:	f7d2 fbe8 	bl	8000860 <__aeabi_ddiv>
 802e090:	4602      	mov	r2, r0
 802e092:	460b      	mov	r3, r1
 802e094:	e9c7 2306 	strd	r2, r3, [r7, #24]
          (10.0 / 65535.0);  // scale the input_diff such that [-65535, 0]
                             // correspond to [-10.0, 0.0]
      QuantizeMultiplier(input_scale_beta_rescale, &op_data->input_multiplier,
 802e098:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802e09a:	3308      	adds	r3, #8
 802e09c:	f107 0214 	add.w	r2, r7, #20
 802e0a0:	4611      	mov	r1, r2
 802e0a2:	4618      	mov	r0, r3
 802e0a4:	ed97 0b06 	vldr	d0, [r7, #24]
 802e0a8:	f7f9 fce2 	bl	8027a70 <_ZN6tflite18QuantizeMultiplierEdPlPi>
                         &input_left_shift);
      op_data->input_left_shift = input_left_shift;
 802e0ac:	697a      	ldr	r2, [r7, #20]
 802e0ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802e0b0:	60da      	str	r2, [r3, #12]
          &op_data->input_multiplier, &input_left_shift);
      op_data->input_left_shift = input_left_shift;
      op_data->diff_min =
          -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
                                              op_data->input_left_shift);
    }
 802e0b2:	e0ac      	b.n	802e20e <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x416>
 802e0b4:	f3af 8000 	nop.w
 802e0b8:	00140014 	.word	0x00140014
 802e0bc:	3f240014 	.word	0x3f240014
 802e0c0:	08035ab0 	.word	0x08035ab0
 802e0c4:	08035ab4 	.word	0x08035ab4
 802e0c8:	08035a04 	.word	0x08035a04
 802e0cc:	08035a94 	.word	0x08035a94
 802e0d0:	38000000 	.word	0x38000000
 802e0d4:	3303126f 	.word	0x3303126f
 802e0d8:	08035af0 	.word	0x08035af0
 802e0dc:	08035afc 	.word	0x08035afc
 802e0e0:	08035ad0 	.word	0x08035ad0
 802e0e4:	08035b30 	.word	0x08035b30
 802e0e8:	08035b3c 	.word	0x08035b3c
 802e0ec:	08035b14 	.word	0x08035b14
 802e0f0:	ffff8000 	.word	0xffff8000
 802e0f4:	08035b48 	.word	0x08035b48
 802e0f8:	37800000 	.word	0x37800000
 802e0fc:	3283126f 	.word	0x3283126f
 802e100:	3ef00000 	.word	0x3ef00000
 802e104:	08035b50 	.word	0x08035b50
 802e108:	08035b5c 	.word	0x08035b5c
 802e10c:	08035b6c 	.word	0x08035b6c
 802e110:	3b800000 	.word	0x3b800000
 802e114:	08035b8c 	.word	0x08035b8c
 802e118:	08035b74 	.word	0x08035b74
          static_cast<double>(params->beta),
 802e11c:	683b      	ldr	r3, [r7, #0]
 802e11e:	681b      	ldr	r3, [r3, #0]
      tflite::PreprocessSoftmaxScaling(
 802e120:	4618      	mov	r0, r3
 802e122:	f7d2 fa1b 	bl	800055c <__aeabi_f2d>
 802e126:	4680      	mov	r8, r0
 802e128:	4689      	mov	r9, r1
          static_cast<double>(input->params.scale), kScaledDiffIntegerBits,
 802e12a:	68bb      	ldr	r3, [r7, #8]
 802e12c:	68db      	ldr	r3, [r3, #12]
      tflite::PreprocessSoftmaxScaling(
 802e12e:	4618      	mov	r0, r3
 802e130:	f7d2 fa14 	bl	800055c <__aeabi_f2d>
 802e134:	4682      	mov	sl, r0
 802e136:	468b      	mov	fp, r1
 802e138:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802e13a:	3308      	adds	r3, #8
 802e13c:	f107 0210 	add.w	r2, r7, #16
 802e140:	4619      	mov	r1, r3
 802e142:	2005      	movs	r0, #5
 802e144:	ec4b ab11 	vmov	d1, sl, fp
 802e148:	ec49 8b10 	vmov	d0, r8, r9
 802e14c:	f7f9 fd5c 	bl	8027c08 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>
      op_data->input_left_shift = input_left_shift;
 802e150:	693a      	ldr	r2, [r7, #16]
 802e152:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802e154:	60da      	str	r2, [r3, #12]
                                              op_data->input_left_shift);
 802e156:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802e158:	68db      	ldr	r3, [r3, #12]
          -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
 802e15a:	221f      	movs	r2, #31
 802e15c:	4619      	mov	r1, r3
 802e15e:	2005      	movs	r0, #5
 802e160:	f7f9 fd9a 	bl	8027c98 <_ZN6tflite20CalculateInputRadiusEiii>
 802e164:	4603      	mov	r3, r0
 802e166:	4618      	mov	r0, r3
 802e168:	f7d2 f9e6 	bl	8000538 <__aeabi_i2d>
 802e16c:	4602      	mov	r2, r0
 802e16e:	460b      	mov	r3, r1
 802e170:	4614      	mov	r4, r2
 802e172:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
      op_data->diff_min =
 802e176:	4620      	mov	r0, r4
 802e178:	4629      	mov	r1, r5
 802e17a:	f7d2 fcf7 	bl	8000b6c <__aeabi_d2iz>
 802e17e:	4602      	mov	r2, r0
 802e180:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802e182:	619a      	str	r2, [r3, #24]
    }
 802e184:	e043      	b.n	802e20e <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x416>
  } else {
    TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
 802e186:	68bb      	ldr	r3, [r7, #8]
 802e188:	781b      	ldrb	r3, [r3, #0]
 802e18a:	2b01      	cmp	r3, #1
 802e18c:	d018      	beq.n	802e1c0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x3c8>
 802e18e:	68fb      	ldr	r3, [r7, #12]
 802e190:	695c      	ldr	r4, [r3, #20]
 802e192:	68bb      	ldr	r3, [r7, #8]
 802e194:	781b      	ldrb	r3, [r3, #0]
 802e196:	4618      	mov	r0, r3
 802e198:	f7f9 fbe4 	bl	8027964 <TfLiteTypeGetName>
 802e19c:	4605      	mov	r5, r0
 802e19e:	2001      	movs	r0, #1
 802e1a0:	f7f9 fbe0 	bl	8027964 <TfLiteTypeGetName>
 802e1a4:	4603      	mov	r3, r0
 802e1a6:	9303      	str	r3, [sp, #12]
 802e1a8:	9502      	str	r5, [sp, #8]
 802e1aa:	4b1c      	ldr	r3, [pc, #112]	; (802e21c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x424>)
 802e1ac:	9301      	str	r3, [sp, #4]
 802e1ae:	4b1c      	ldr	r3, [pc, #112]	; (802e220 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x428>)
 802e1b0:	9300      	str	r3, [sp, #0]
 802e1b2:	234e      	movs	r3, #78	; 0x4e
 802e1b4:	4a1b      	ldr	r2, [pc, #108]	; (802e224 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x42c>)
 802e1b6:	491c      	ldr	r1, [pc, #112]	; (802e228 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x430>)
 802e1b8:	68f8      	ldr	r0, [r7, #12]
 802e1ba:	47a0      	blx	r4
 802e1bc:	2301      	movs	r3, #1
 802e1be:	e027      	b.n	802e210 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
    TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteFloat32);
 802e1c0:	687b      	ldr	r3, [r7, #4]
 802e1c2:	781b      	ldrb	r3, [r3, #0]
 802e1c4:	2b01      	cmp	r3, #1
 802e1c6:	d018      	beq.n	802e1fa <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x402>
 802e1c8:	68fb      	ldr	r3, [r7, #12]
 802e1ca:	695c      	ldr	r4, [r3, #20]
 802e1cc:	687b      	ldr	r3, [r7, #4]
 802e1ce:	781b      	ldrb	r3, [r3, #0]
 802e1d0:	4618      	mov	r0, r3
 802e1d2:	f7f9 fbc7 	bl	8027964 <TfLiteTypeGetName>
 802e1d6:	4605      	mov	r5, r0
 802e1d8:	2001      	movs	r0, #1
 802e1da:	f7f9 fbc3 	bl	8027964 <TfLiteTypeGetName>
 802e1de:	4603      	mov	r3, r0
 802e1e0:	9303      	str	r3, [sp, #12]
 802e1e2:	9502      	str	r5, [sp, #8]
 802e1e4:	4b0d      	ldr	r3, [pc, #52]	; (802e21c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x424>)
 802e1e6:	9301      	str	r3, [sp, #4]
 802e1e8:	4b10      	ldr	r3, [pc, #64]	; (802e22c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x434>)
 802e1ea:	9300      	str	r3, [sp, #0]
 802e1ec:	234f      	movs	r3, #79	; 0x4f
 802e1ee:	4a0d      	ldr	r2, [pc, #52]	; (802e224 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x42c>)
 802e1f0:	490d      	ldr	r1, [pc, #52]	; (802e228 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x430>)
 802e1f2:	68f8      	ldr	r0, [r7, #12]
 802e1f4:	47a0      	blx	r4
 802e1f6:	2301      	movs	r3, #1
 802e1f8:	e00a      	b.n	802e210 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
    op_data->beta = static_cast<double>(params->beta);
 802e1fa:	683b      	ldr	r3, [r7, #0]
 802e1fc:	681b      	ldr	r3, [r3, #0]
 802e1fe:	4618      	mov	r0, r3
 802e200:	f7d2 f9ac 	bl	800055c <__aeabi_f2d>
 802e204:	4602      	mov	r2, r0
 802e206:	460b      	mov	r3, r1
 802e208:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 802e20a:	e9c1 2300 	strd	r2, r3, [r1]
  }
  return kTfLiteOk;
 802e20e:	2300      	movs	r3, #0
}
 802e210:	4618      	mov	r0, r3
 802e212:	3728      	adds	r7, #40	; 0x28
 802e214:	46bd      	mov	sp, r7
 802e216:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 802e21a:	bf00      	nop
 802e21c:	08035bb0 	.word	0x08035bb0
 802e220:	08035b3c 	.word	0x08035b3c
 802e224:	08035a04 	.word	0x08035a04
 802e228:	08035b14 	.word	0x08035b14
 802e22c:	08035b5c 	.word	0x08035b5c

0802e230 <_ZN6tflite11SoftmaxInitEP13TfLiteContextPKcj>:

}  // namespace

void* SoftmaxInit(TfLiteContext* context, const char* buffer, size_t length) {
 802e230:	b580      	push	{r7, lr}
 802e232:	b084      	sub	sp, #16
 802e234:	af00      	add	r7, sp, #0
 802e236:	60f8      	str	r0, [r7, #12]
 802e238:	60b9      	str	r1, [r7, #8]
 802e23a:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 802e23c:	68fb      	ldr	r3, [r7, #12]
 802e23e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802e240:	2b00      	cmp	r3, #0
 802e242:	d101      	bne.n	802e248 <_ZN6tflite11SoftmaxInitEP13TfLiteContextPKcj+0x18>
 802e244:	f003 ff0a 	bl	803205c <abort>
  return context->AllocatePersistentBuffer(context, sizeof(SoftmaxParams));
 802e248:	68fb      	ldr	r3, [r7, #12]
 802e24a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802e24c:	2138      	movs	r1, #56	; 0x38
 802e24e:	68f8      	ldr	r0, [r7, #12]
 802e250:	4798      	blx	r3
 802e252:	4603      	mov	r3, r0
}
 802e254:	4618      	mov	r0, r3
 802e256:	3710      	adds	r7, #16
 802e258:	46bd      	mov	sp, r7
 802e25a:	bd80      	pop	{r7, pc}

0802e25c <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_clEf>:
  // Populate LUT if required
  if (input->type == kTfLiteInt16) {
    TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
    // exp LUT only used on negative values
    // we consider exp(-10.0) is insignificant to accumulation
    gen_lut([](float value) { return std::exp(value); }, -10.0f, 0.0f,
 802e25c:	b580      	push	{r7, lr}
 802e25e:	b082      	sub	sp, #8
 802e260:	af00      	add	r7, sp, #0
 802e262:	6078      	str	r0, [r7, #4]
 802e264:	ed87 0a00 	vstr	s0, [r7]
 802e268:	ed97 0a00 	vldr	s0, [r7]
 802e26c:	f7d3 fab5 	bl	80017da <_ZSt3expf>
 802e270:	eef0 7a40 	vmov.f32	s15, s0
 802e274:	eeb0 0a67 	vmov.f32	s0, s15
 802e278:	3708      	adds	r7, #8
 802e27a:	46bd      	mov	sp, r7
 802e27c:	bd80      	pop	{r7, pc}

0802e27e <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE_4_FUNEf>:
 802e27e:	b580      	push	{r7, lr}
 802e280:	b082      	sub	sp, #8
 802e282:	af00      	add	r7, sp, #0
 802e284:	ed87 0a01 	vstr	s0, [r7, #4]
 802e288:	ed97 0a01 	vldr	s0, [r7, #4]
 802e28c:	2000      	movs	r0, #0
 802e28e:	f7ff ffe5 	bl	802e25c <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_clEf>
 802e292:	eef0 7a40 	vmov.f32	s15, s0
 802e296:	eeb0 0a67 	vmov.f32	s0, s15
 802e29a:	3708      	adds	r7, #8
 802e29c:	46bd      	mov	sp, r7
 802e29e:	bd80      	pop	{r7, pc}

0802e2a0 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_cvPFffEEv>:
 802e2a0:	b480      	push	{r7}
 802e2a2:	b083      	sub	sp, #12
 802e2a4:	af00      	add	r7, sp, #0
 802e2a6:	6078      	str	r0, [r7, #4]
 802e2a8:	4b03      	ldr	r3, [pc, #12]	; (802e2b8 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_cvPFffEEv+0x18>)
 802e2aa:	4618      	mov	r0, r3
 802e2ac:	370c      	adds	r7, #12
 802e2ae:	46bd      	mov	sp, r7
 802e2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e2b4:	4770      	bx	lr
 802e2b6:	bf00      	nop
 802e2b8:	0802e27f 	.word	0x0802e27f

0802e2bc <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_clEf>:
            op_data->exp_lut, kInt16LUTArraySize);
    gen_lut([](float value) { return 1.0f / (1.0f + value); }, 0.0f, 1.0f,
 802e2bc:	b480      	push	{r7}
 802e2be:	b083      	sub	sp, #12
 802e2c0:	af00      	add	r7, sp, #0
 802e2c2:	6078      	str	r0, [r7, #4]
 802e2c4:	ed87 0a00 	vstr	s0, [r7]
 802e2c8:	edd7 7a00 	vldr	s15, [r7]
 802e2cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802e2d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 802e2d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802e2d8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 802e2dc:	eef0 7a66 	vmov.f32	s15, s13
 802e2e0:	eeb0 0a67 	vmov.f32	s0, s15
 802e2e4:	370c      	adds	r7, #12
 802e2e6:	46bd      	mov	sp, r7
 802e2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e2ec:	4770      	bx	lr

0802e2ee <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE0_4_FUNEf>:
 802e2ee:	b580      	push	{r7, lr}
 802e2f0:	b082      	sub	sp, #8
 802e2f2:	af00      	add	r7, sp, #0
 802e2f4:	ed87 0a01 	vstr	s0, [r7, #4]
 802e2f8:	ed97 0a01 	vldr	s0, [r7, #4]
 802e2fc:	2000      	movs	r0, #0
 802e2fe:	f7ff ffdd 	bl	802e2bc <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_clEf>
 802e302:	eef0 7a40 	vmov.f32	s15, s0
 802e306:	eeb0 0a67 	vmov.f32	s0, s15
 802e30a:	3708      	adds	r7, #8
 802e30c:	46bd      	mov	sp, r7
 802e30e:	bd80      	pop	{r7, pc}

0802e310 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_cvPFffEEv>:
 802e310:	b480      	push	{r7}
 802e312:	b083      	sub	sp, #12
 802e314:	af00      	add	r7, sp, #0
 802e316:	6078      	str	r0, [r7, #4]
 802e318:	4b03      	ldr	r3, [pc, #12]	; (802e328 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_cvPFffEEv+0x18>)
 802e31a:	4618      	mov	r0, r3
 802e31c:	370c      	adds	r7, #12
 802e31e:	46bd      	mov	sp, r7
 802e320:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e324:	4770      	bx	lr
 802e326:	bf00      	nop
 802e328:	0802e2ef 	.word	0x0802e2ef

0802e32c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus SoftmaxPrepare(TfLiteContext* context, TfLiteNode* node) {
 802e32c:	b590      	push	{r4, r7, lr}
 802e32e:	b08f      	sub	sp, #60	; 0x3c
 802e330:	af04      	add	r7, sp, #16
 802e332:	6078      	str	r0, [r7, #4]
 802e334:	6039      	str	r1, [r7, #0]
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
 802e336:	6838      	ldr	r0, [r7, #0]
 802e338:	f7fb fd06 	bl	8029d48 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 802e33c:	4603      	mov	r3, r0
 802e33e:	2b01      	cmp	r3, #1
 802e340:	bf14      	ite	ne
 802e342:	2301      	movne	r3, #1
 802e344:	2300      	moveq	r3, #0
 802e346:	b2db      	uxtb	r3, r3
 802e348:	2b00      	cmp	r3, #0
 802e34a:	d013      	beq.n	802e374 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x48>
 802e34c:	687b      	ldr	r3, [r7, #4]
 802e34e:	695c      	ldr	r4, [r3, #20]
 802e350:	6838      	ldr	r0, [r7, #0]
 802e352:	f7fb fcf9 	bl	8029d48 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 802e356:	4603      	mov	r3, r0
 802e358:	2201      	movs	r2, #1
 802e35a:	9203      	str	r2, [sp, #12]
 802e35c:	9302      	str	r3, [sp, #8]
 802e35e:	4b7c      	ldr	r3, [pc, #496]	; (802e550 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x224>)
 802e360:	9301      	str	r3, [sp, #4]
 802e362:	4b7c      	ldr	r3, [pc, #496]	; (802e554 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x228>)
 802e364:	9300      	str	r3, [sp, #0]
 802e366:	235d      	movs	r3, #93	; 0x5d
 802e368:	4a7b      	ldr	r2, [pc, #492]	; (802e558 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 802e36a:	497c      	ldr	r1, [pc, #496]	; (802e55c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 802e36c:	6878      	ldr	r0, [r7, #4]
 802e36e:	47a0      	blx	r4
 802e370:	2301      	movs	r3, #1
 802e372:	e146      	b.n	802e602 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
 802e374:	6838      	ldr	r0, [r7, #0]
 802e376:	f7fb fcf4 	bl	8029d62 <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 802e37a:	4603      	mov	r3, r0
 802e37c:	2b01      	cmp	r3, #1
 802e37e:	bf14      	ite	ne
 802e380:	2301      	movne	r3, #1
 802e382:	2300      	moveq	r3, #0
 802e384:	b2db      	uxtb	r3, r3
 802e386:	2b00      	cmp	r3, #0
 802e388:	d013      	beq.n	802e3b2 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x86>
 802e38a:	687b      	ldr	r3, [r7, #4]
 802e38c:	695c      	ldr	r4, [r3, #20]
 802e38e:	6838      	ldr	r0, [r7, #0]
 802e390:	f7fb fce7 	bl	8029d62 <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 802e394:	4603      	mov	r3, r0
 802e396:	2201      	movs	r2, #1
 802e398:	9203      	str	r2, [sp, #12]
 802e39a:	9302      	str	r3, [sp, #8]
 802e39c:	4b6c      	ldr	r3, [pc, #432]	; (802e550 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x224>)
 802e39e:	9301      	str	r3, [sp, #4]
 802e3a0:	4b6f      	ldr	r3, [pc, #444]	; (802e560 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x234>)
 802e3a2:	9300      	str	r3, [sp, #0]
 802e3a4:	235e      	movs	r3, #94	; 0x5e
 802e3a6:	4a6c      	ldr	r2, [pc, #432]	; (802e558 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 802e3a8:	496c      	ldr	r1, [pc, #432]	; (802e55c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 802e3aa:	6878      	ldr	r0, [r7, #4]
 802e3ac:	47a0      	blx	r4
 802e3ae:	2301      	movs	r3, #1
 802e3b0:	e127      	b.n	802e602 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  const TfLiteTensor* input = GetInput(context, node, 0);
 802e3b2:	2200      	movs	r2, #0
 802e3b4:	6839      	ldr	r1, [r7, #0]
 802e3b6:	6878      	ldr	r0, [r7, #4]
 802e3b8:	f7f9 fe1a 	bl	8027ff0 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 802e3bc:	6278      	str	r0, [r7, #36]	; 0x24
  TF_LITE_ENSURE(context, input != nullptr);
 802e3be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802e3c0:	2b00      	cmp	r3, #0
 802e3c2:	d10a      	bne.n	802e3da <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xae>
 802e3c4:	687b      	ldr	r3, [r7, #4]
 802e3c6:	695c      	ldr	r4, [r3, #20]
 802e3c8:	4b66      	ldr	r3, [pc, #408]	; (802e564 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x238>)
 802e3ca:	9300      	str	r3, [sp, #0]
 802e3cc:	2360      	movs	r3, #96	; 0x60
 802e3ce:	4a62      	ldr	r2, [pc, #392]	; (802e558 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 802e3d0:	4965      	ldr	r1, [pc, #404]	; (802e568 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 802e3d2:	6878      	ldr	r0, [r7, #4]
 802e3d4:	47a0      	blx	r4
 802e3d6:	2301      	movs	r3, #1
 802e3d8:	e113      	b.n	802e602 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  TF_LITE_ENSURE(context, NumDimensions(input) >= 1);
 802e3da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802e3dc:	f7f9 fd35 	bl	8027e4a <_ZN6tflite13NumDimensionsEPK12TfLiteTensor>
 802e3e0:	4603      	mov	r3, r0
 802e3e2:	2b00      	cmp	r3, #0
 802e3e4:	bfd4      	ite	le
 802e3e6:	2301      	movle	r3, #1
 802e3e8:	2300      	movgt	r3, #0
 802e3ea:	b2db      	uxtb	r3, r3
 802e3ec:	2b00      	cmp	r3, #0
 802e3ee:	d00a      	beq.n	802e406 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xda>
 802e3f0:	687b      	ldr	r3, [r7, #4]
 802e3f2:	695c      	ldr	r4, [r3, #20]
 802e3f4:	4b5d      	ldr	r3, [pc, #372]	; (802e56c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 802e3f6:	9300      	str	r3, [sp, #0]
 802e3f8:	2361      	movs	r3, #97	; 0x61
 802e3fa:	4a57      	ldr	r2, [pc, #348]	; (802e558 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 802e3fc:	495a      	ldr	r1, [pc, #360]	; (802e568 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 802e3fe:	6878      	ldr	r0, [r7, #4]
 802e400:	47a0      	blx	r4
 802e402:	2301      	movs	r3, #1
 802e404:	e0fd      	b.n	802e602 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  TfLiteTensor* output = GetOutput(context, node, 0);
 802e406:	2200      	movs	r2, #0
 802e408:	6839      	ldr	r1, [r7, #0]
 802e40a:	6878      	ldr	r0, [r7, #4]
 802e40c:	f7f9 fe00 	bl	8028010 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 802e410:	6238      	str	r0, [r7, #32]
  TF_LITE_ENSURE(context, output != nullptr);
 802e412:	6a3b      	ldr	r3, [r7, #32]
 802e414:	2b00      	cmp	r3, #0
 802e416:	d10a      	bne.n	802e42e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x102>
 802e418:	687b      	ldr	r3, [r7, #4]
 802e41a:	695c      	ldr	r4, [r3, #20]
 802e41c:	4b54      	ldr	r3, [pc, #336]	; (802e570 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x244>)
 802e41e:	9300      	str	r3, [sp, #0]
 802e420:	2363      	movs	r3, #99	; 0x63
 802e422:	4a4d      	ldr	r2, [pc, #308]	; (802e558 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 802e424:	4950      	ldr	r1, [pc, #320]	; (802e568 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 802e426:	6878      	ldr	r0, [r7, #4]
 802e428:	47a0      	blx	r4
 802e42a:	2301      	movs	r3, #1
 802e42c:	e0e9      	b.n	802e602 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  TF_LITE_ENSURE(context, node->user_data != nullptr);
 802e42e:	683b      	ldr	r3, [r7, #0]
 802e430:	691b      	ldr	r3, [r3, #16]
 802e432:	2b00      	cmp	r3, #0
 802e434:	d10a      	bne.n	802e44c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x120>
 802e436:	687b      	ldr	r3, [r7, #4]
 802e438:	695c      	ldr	r4, [r3, #20]
 802e43a:	4b4e      	ldr	r3, [pc, #312]	; (802e574 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x248>)
 802e43c:	9300      	str	r3, [sp, #0]
 802e43e:	2365      	movs	r3, #101	; 0x65
 802e440:	4a45      	ldr	r2, [pc, #276]	; (802e558 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 802e442:	4949      	ldr	r1, [pc, #292]	; (802e568 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 802e444:	6878      	ldr	r0, [r7, #4]
 802e446:	47a0      	blx	r4
 802e448:	2301      	movs	r3, #1
 802e44a:	e0da      	b.n	802e602 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  SoftmaxParams* op_data = static_cast<SoftmaxParams*>(node->user_data);
 802e44c:	683b      	ldr	r3, [r7, #0]
 802e44e:	691b      	ldr	r3, [r3, #16]
 802e450:	61fb      	str	r3, [r7, #28]
  if (input->type == kTfLiteInt16) {
 802e452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802e454:	781b      	ldrb	r3, [r3, #0]
 802e456:	2b07      	cmp	r3, #7
 802e458:	d12f      	bne.n	802e4ba <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x18e>
    void* raw_exp_lut = context->AllocatePersistentBuffer(
 802e45a:	687b      	ldr	r3, [r7, #4]
 802e45c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802e45e:	f240 4102 	movw	r1, #1026	; 0x402
 802e462:	6878      	ldr	r0, [r7, #4]
 802e464:	4798      	blx	r3
 802e466:	61b8      	str	r0, [r7, #24]
    TF_LITE_ENSURE(context, raw_exp_lut != nullptr);
 802e468:	69bb      	ldr	r3, [r7, #24]
 802e46a:	2b00      	cmp	r3, #0
 802e46c:	d10a      	bne.n	802e484 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x158>
 802e46e:	687b      	ldr	r3, [r7, #4]
 802e470:	695c      	ldr	r4, [r3, #20]
 802e472:	4b41      	ldr	r3, [pc, #260]	; (802e578 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x24c>)
 802e474:	9300      	str	r3, [sp, #0]
 802e476:	236b      	movs	r3, #107	; 0x6b
 802e478:	4a37      	ldr	r2, [pc, #220]	; (802e558 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 802e47a:	493b      	ldr	r1, [pc, #236]	; (802e568 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 802e47c:	6878      	ldr	r0, [r7, #4]
 802e47e:	47a0      	blx	r4
 802e480:	2301      	movs	r3, #1
 802e482:	e0be      	b.n	802e602 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
    op_data->exp_lut = reinterpret_cast<int16_t*>(raw_exp_lut);
 802e484:	69fb      	ldr	r3, [r7, #28]
 802e486:	69ba      	ldr	r2, [r7, #24]
 802e488:	629a      	str	r2, [r3, #40]	; 0x28
    void* one_over_one_plus_x_lut = context->AllocatePersistentBuffer(
 802e48a:	687b      	ldr	r3, [r7, #4]
 802e48c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802e48e:	f240 4102 	movw	r1, #1026	; 0x402
 802e492:	6878      	ldr	r0, [r7, #4]
 802e494:	4798      	blx	r3
 802e496:	6178      	str	r0, [r7, #20]
    TF_LITE_ENSURE(context, one_over_one_plus_x_lut != nullptr);
 802e498:	697b      	ldr	r3, [r7, #20]
 802e49a:	2b00      	cmp	r3, #0
 802e49c:	d10a      	bne.n	802e4b4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x188>
 802e49e:	687b      	ldr	r3, [r7, #4]
 802e4a0:	695c      	ldr	r4, [r3, #20]
 802e4a2:	4b36      	ldr	r3, [pc, #216]	; (802e57c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x250>)
 802e4a4:	9300      	str	r3, [sp, #0]
 802e4a6:	236f      	movs	r3, #111	; 0x6f
 802e4a8:	4a2b      	ldr	r2, [pc, #172]	; (802e558 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 802e4aa:	492f      	ldr	r1, [pc, #188]	; (802e568 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 802e4ac:	6878      	ldr	r0, [r7, #4]
 802e4ae:	47a0      	blx	r4
 802e4b0:	2301      	movs	r3, #1
 802e4b2:	e0a6      	b.n	802e602 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
    op_data->one_over_one_plus_x_lut =
 802e4b4:	69fb      	ldr	r3, [r7, #28]
 802e4b6:	697a      	ldr	r2, [r7, #20]
 802e4b8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (output->type == kTfLiteInt16) {
 802e4ba:	6a3b      	ldr	r3, [r7, #32]
 802e4bc:	781b      	ldrb	r3, [r3, #0]
 802e4be:	2b07      	cmp	r3, #7
 802e4c0:	d112      	bne.n	802e4e8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1bc>
    TF_LITE_ENSURE(context,
 802e4c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802e4c4:	781b      	ldrb	r3, [r3, #0]
 802e4c6:	2b09      	cmp	r3, #9
 802e4c8:	d028      	beq.n	802e51c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1f0>
 802e4ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802e4cc:	781b      	ldrb	r3, [r3, #0]
 802e4ce:	2b07      	cmp	r3, #7
 802e4d0:	d024      	beq.n	802e51c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1f0>
 802e4d2:	687b      	ldr	r3, [r7, #4]
 802e4d4:	695c      	ldr	r4, [r3, #20]
 802e4d6:	4b2a      	ldr	r3, [pc, #168]	; (802e580 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x254>)
 802e4d8:	9300      	str	r3, [sp, #0]
 802e4da:	2375      	movs	r3, #117	; 0x75
 802e4dc:	4a1e      	ldr	r2, [pc, #120]	; (802e558 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 802e4de:	4922      	ldr	r1, [pc, #136]	; (802e568 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 802e4e0:	6878      	ldr	r0, [r7, #4]
 802e4e2:	47a0      	blx	r4
 802e4e4:	2301      	movs	r3, #1
 802e4e6:	e08c      	b.n	802e602 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
    TF_LITE_ENSURE_EQ(context, input->type, output->type);
 802e4e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802e4ea:	781a      	ldrb	r2, [r3, #0]
 802e4ec:	6a3b      	ldr	r3, [r7, #32]
 802e4ee:	781b      	ldrb	r3, [r3, #0]
 802e4f0:	429a      	cmp	r2, r3
 802e4f2:	d013      	beq.n	802e51c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1f0>
 802e4f4:	687b      	ldr	r3, [r7, #4]
 802e4f6:	695c      	ldr	r4, [r3, #20]
 802e4f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802e4fa:	781b      	ldrb	r3, [r3, #0]
 802e4fc:	461a      	mov	r2, r3
 802e4fe:	6a3b      	ldr	r3, [r7, #32]
 802e500:	781b      	ldrb	r3, [r3, #0]
 802e502:	9303      	str	r3, [sp, #12]
 802e504:	9202      	str	r2, [sp, #8]
 802e506:	4b1f      	ldr	r3, [pc, #124]	; (802e584 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x258>)
 802e508:	9301      	str	r3, [sp, #4]
 802e50a:	4b1f      	ldr	r3, [pc, #124]	; (802e588 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x25c>)
 802e50c:	9300      	str	r3, [sp, #0]
 802e50e:	2378      	movs	r3, #120	; 0x78
 802e510:	4a11      	ldr	r2, [pc, #68]	; (802e558 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 802e512:	4912      	ldr	r1, [pc, #72]	; (802e55c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 802e514:	6878      	ldr	r0, [r7, #4]
 802e516:	47a0      	blx	r4
 802e518:	2301      	movs	r3, #1
 802e51a:	e072      	b.n	802e602 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  if (input->type == kTfLiteInt16) {
 802e51c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802e51e:	781b      	ldrb	r3, [r3, #0]
 802e520:	2b07      	cmp	r3, #7
 802e522:	d161      	bne.n	802e5e8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2bc>
    TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
 802e524:	6a3b      	ldr	r3, [r7, #32]
 802e526:	691b      	ldr	r3, [r3, #16]
 802e528:	2b00      	cmp	r3, #0
 802e52a:	d035      	beq.n	802e598 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x26c>
 802e52c:	687b      	ldr	r3, [r7, #4]
 802e52e:	695c      	ldr	r4, [r3, #20]
 802e530:	6a3b      	ldr	r3, [r7, #32]
 802e532:	691b      	ldr	r3, [r3, #16]
 802e534:	2200      	movs	r2, #0
 802e536:	9203      	str	r2, [sp, #12]
 802e538:	9302      	str	r3, [sp, #8]
 802e53a:	4b14      	ldr	r3, [pc, #80]	; (802e58c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x260>)
 802e53c:	9301      	str	r3, [sp, #4]
 802e53e:	4b14      	ldr	r3, [pc, #80]	; (802e590 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x264>)
 802e540:	9300      	str	r3, [sp, #0]
 802e542:	237d      	movs	r3, #125	; 0x7d
 802e544:	4a04      	ldr	r2, [pc, #16]	; (802e558 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 802e546:	4905      	ldr	r1, [pc, #20]	; (802e55c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 802e548:	6878      	ldr	r0, [r7, #4]
 802e54a:	47a0      	blx	r4
 802e54c:	2301      	movs	r3, #1
 802e54e:	e058      	b.n	802e602 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
 802e550:	08035bc0 	.word	0x08035bc0
 802e554:	08035bc4 	.word	0x08035bc4
 802e558:	08035a04 	.word	0x08035a04
 802e55c:	08035a94 	.word	0x08035a94
 802e560:	08035bd4 	.word	0x08035bd4
 802e564:	08035be8 	.word	0x08035be8
 802e568:	08035b74 	.word	0x08035b74
 802e56c:	08035bfc 	.word	0x08035bfc
 802e570:	08035c18 	.word	0x08035c18
 802e574:	08035c2c 	.word	0x08035c2c
 802e578:	08035c48 	.word	0x08035c48
 802e57c:	08035c60 	.word	0x08035c60
 802e580:	08035c84 	.word	0x08035c84
 802e584:	08035b5c 	.word	0x08035b5c
 802e588:	08035b3c 	.word	0x08035b3c
 802e58c:	08035ab0 	.word	0x08035ab0
 802e590:	08035ab4 	.word	0x08035ab4
 802e594:	00000000 	.word	0x00000000
    gen_lut([](float value) { return std::exp(value); }, -10.0f, 0.0f,
 802e598:	f107 0308 	add.w	r3, r7, #8
 802e59c:	4618      	mov	r0, r3
 802e59e:	f7ff fe7f 	bl	802e2a0 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_cvPFffEEv>
 802e5a2:	69fb      	ldr	r3, [r7, #28]
 802e5a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802e5a6:	f240 2201 	movw	r2, #513	; 0x201
 802e5aa:	4619      	mov	r1, r3
 802e5ac:	ed5f 0a07 	vldr	s1, [pc, #-28]	; 802e594 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x268>
 802e5b0:	eeba 0a04 	vmov.f32	s0, #164	; 0xc1200000 -10.0
 802e5b4:	f7ff faf2 	bl	802db9c <_ZN6tflite7gen_lutEPFffEffPsi>
    gen_lut([](float value) { return 1.0f / (1.0f + value); }, 0.0f, 1.0f,
 802e5b8:	f107 030c 	add.w	r3, r7, #12
 802e5bc:	4618      	mov	r0, r3
 802e5be:	f7ff fea7 	bl	802e310 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_cvPFffEEv>
 802e5c2:	69fb      	ldr	r3, [r7, #28]
 802e5c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802e5c6:	f240 2201 	movw	r2, #513	; 0x201
 802e5ca:	4619      	mov	r1, r3
 802e5cc:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 802e5d0:	ed1f 0a10 	vldr	s0, [pc, #-64]	; 802e594 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x268>
 802e5d4:	f7ff fae2 	bl	802db9c <_ZN6tflite7gen_lutEPFffEffPsi>
            op_data->one_over_one_plus_x_lut, kInt16LUTArraySize);
    op_data->zero_point = output->params.zero_point;
 802e5d8:	6a3b      	ldr	r3, [r7, #32]
 802e5da:	691a      	ldr	r2, [r3, #16]
 802e5dc:	69fb      	ldr	r3, [r7, #28]
 802e5de:	61da      	str	r2, [r3, #28]
    op_data->scale = output->params.scale;
 802e5e0:	6a3b      	ldr	r3, [r7, #32]
 802e5e2:	68da      	ldr	r2, [r3, #12]
 802e5e4:	69fb      	ldr	r3, [r7, #28]
 802e5e6:	621a      	str	r2, [r3, #32]
  }

  auto* params = static_cast<TfLiteSoftmaxParams*>(node->builtin_data);
 802e5e8:	683b      	ldr	r3, [r7, #0]
 802e5ea:	695b      	ldr	r3, [r3, #20]
 802e5ec:	613b      	str	r3, [r7, #16]
  return CalculateSoftmaxParams(context, input, output, params, op_data);
 802e5ee:	69fb      	ldr	r3, [r7, #28]
 802e5f0:	9300      	str	r3, [sp, #0]
 802e5f2:	693b      	ldr	r3, [r7, #16]
 802e5f4:	6a3a      	ldr	r2, [r7, #32]
 802e5f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 802e5f8:	6878      	ldr	r0, [r7, #4]
 802e5fa:	f7ff fbfd 	bl	802ddf8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>
 802e5fe:	4603      	mov	r3, r0
 802e600:	bf00      	nop
}
 802e602:	4618      	mov	r0, r3
 802e604:	372c      	adds	r7, #44	; 0x2c
 802e606:	46bd      	mov	sp, r7
 802e608:	bd90      	pop	{r4, r7, pc}
 802e60a:	bf00      	nop

0802e60c <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj>:
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_SOFTMAX, },
};
static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
 802e60c:	b580      	push	{r7, lr}
 802e60e:	b084      	sub	sp, #16
 802e610:	af00      	add	r7, sp, #0
 802e612:	6078      	str	r0, [r7, #4]
 802e614:	6039      	str	r1, [r7, #0]
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
 802e616:	4b21      	ldr	r3, [pc, #132]	; (802e69c <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x90>)
 802e618:	681a      	ldr	r2, [r3, #0]
 802e61a:	683b      	ldr	r3, [r7, #0]
 802e61c:	425b      	negs	r3, r3
 802e61e:	441a      	add	r2, r3
 802e620:	4b1f      	ldr	r3, [pc, #124]	; (802e6a0 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x94>)
 802e622:	681b      	ldr	r3, [r3, #0]
 802e624:	429a      	cmp	r2, r3
 802e626:	d224      	bcs.n	802e672 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x66>
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
 802e628:	4b1e      	ldr	r3, [pc, #120]	; (802e6a4 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x98>)
 802e62a:	681b      	ldr	r3, [r3, #0]
 802e62c:	2b09      	cmp	r3, #9
 802e62e:	d906      	bls.n	802e63e <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x32>
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
 802e630:	683b      	ldr	r3, [r7, #0]
 802e632:	4619      	mov	r1, r3
 802e634:	481c      	ldr	r0, [pc, #112]	; (802e6a8 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x9c>)
 802e636:	f7d7 f939 	bl	80058ac <_Z9ei_printfPKcz>
        (int)bytes);
      return NULL;
 802e63a:	2300      	movs	r3, #0
 802e63c:	e029      	b.n	802e692 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x86>
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
 802e63e:	2101      	movs	r1, #1
 802e640:	6838      	ldr	r0, [r7, #0]
 802e642:	f7f9 f959 	bl	80278f8 <_Z9ei_callocjj>
 802e646:	60f8      	str	r0, [r7, #12]
    if (ptr == NULL) {
 802e648:	68fb      	ldr	r3, [r7, #12]
 802e64a:	2b00      	cmp	r3, #0
 802e64c:	d106      	bne.n	802e65c <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x50>
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
 802e64e:	683b      	ldr	r3, [r7, #0]
 802e650:	4619      	mov	r1, r3
 802e652:	4816      	ldr	r0, [pc, #88]	; (802e6ac <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0xa0>)
 802e654:	f7d7 f92a 	bl	80058ac <_Z9ei_printfPKcz>
      return NULL;
 802e658:	2300      	movs	r3, #0
 802e65a:	e01a      	b.n	802e692 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x86>
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
 802e65c:	4b11      	ldr	r3, [pc, #68]	; (802e6a4 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x98>)
 802e65e:	681b      	ldr	r3, [r3, #0]
 802e660:	1c5a      	adds	r2, r3, #1
 802e662:	4910      	ldr	r1, [pc, #64]	; (802e6a4 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x98>)
 802e664:	600a      	str	r2, [r1, #0]
 802e666:	4912      	ldr	r1, [pc, #72]	; (802e6b0 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0xa4>)
 802e668:	68fa      	ldr	r2, [r7, #12]
 802e66a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    return ptr;
 802e66e:	68fb      	ldr	r3, [r7, #12]
 802e670:	e00f      	b.n	802e692 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x86>
  }

  current_location -= bytes;
 802e672:	4b0a      	ldr	r3, [pc, #40]	; (802e69c <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x90>)
 802e674:	681a      	ldr	r2, [r3, #0]
 802e676:	683b      	ldr	r3, [r7, #0]
 802e678:	425b      	negs	r3, r3
 802e67a:	4413      	add	r3, r2
 802e67c:	4a07      	ldr	r2, [pc, #28]	; (802e69c <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x90>)
 802e67e:	6013      	str	r3, [r2, #0]

  ptr = current_location;
 802e680:	4b06      	ldr	r3, [pc, #24]	; (802e69c <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x90>)
 802e682:	681b      	ldr	r3, [r3, #0]
 802e684:	60fb      	str	r3, [r7, #12]
  memset(ptr, 0, bytes);
 802e686:	683a      	ldr	r2, [r7, #0]
 802e688:	2100      	movs	r1, #0
 802e68a:	68f8      	ldr	r0, [r7, #12]
 802e68c:	f003 fd8c 	bl	80321a8 <memset>

  return ptr;
 802e690:	68fb      	ldr	r3, [r7, #12]
}
 802e692:	4618      	mov	r0, r3
 802e694:	3710      	adds	r7, #16
 802e696:	46bd      	mov	sp, r7
 802e698:	bd80      	pop	{r7, pc}
 802e69a:	bf00      	nop
 802e69c:	20000974 	.word	0x20000974
 802e6a0:	20000970 	.word	0x20000970
 802e6a4:	200012f8 	.word	0x200012f8
 802e6a8:	08035cd4 	.word	0x08035cd4
 802e6ac:	08035d54 	.word	0x08035d54
 802e6b0:	200012d0 	.word	0x200012d0

0802e6b4 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi>:
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
 802e6b4:	b580      	push	{r7, lr}
 802e6b6:	b086      	sub	sp, #24
 802e6b8:	af00      	add	r7, sp, #0
 802e6ba:	60f8      	str	r0, [r7, #12]
 802e6bc:	60b9      	str	r1, [r7, #8]
 802e6be:	607a      	str	r2, [r7, #4]
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
 802e6c0:	4b1b      	ldr	r3, [pc, #108]	; (802e730 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x7c>)
 802e6c2:	681b      	ldr	r3, [r3, #0]
 802e6c4:	2b03      	cmp	r3, #3
 802e6c6:	d906      	bls.n	802e6d6 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x22>
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
 802e6c8:	68bb      	ldr	r3, [r7, #8]
 802e6ca:	4619      	mov	r1, r3
 802e6cc:	4819      	ldr	r0, [pc, #100]	; (802e734 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x80>)
 802e6ce:	f7d7 f8ed 	bl	80058ac <_Z9ei_printfPKcz>
      (int)bytes);
    return kTfLiteError;
 802e6d2:	2301      	movs	r3, #1
 802e6d4:	e028      	b.n	802e728 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x74>
  }

  scratch_buffer_t b;
  b.bytes = bytes;
 802e6d6:	68bb      	ldr	r3, [r7, #8]
 802e6d8:	613b      	str	r3, [r7, #16]

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
 802e6da:	693b      	ldr	r3, [r7, #16]
 802e6dc:	4619      	mov	r1, r3
 802e6de:	68f8      	ldr	r0, [r7, #12]
 802e6e0:	f7ff ff94 	bl	802e60c <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj>
 802e6e4:	4603      	mov	r3, r0
 802e6e6:	617b      	str	r3, [r7, #20]
  if (!b.ptr) {
 802e6e8:	697b      	ldr	r3, [r7, #20]
 802e6ea:	2b00      	cmp	r3, #0
 802e6ec:	d106      	bne.n	802e6fc <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x48>
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
 802e6ee:	68bb      	ldr	r3, [r7, #8]
 802e6f0:	4619      	mov	r1, r3
 802e6f2:	4811      	ldr	r0, [pc, #68]	; (802e738 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x84>)
 802e6f4:	f7d7 f8da 	bl	80058ac <_Z9ei_printfPKcz>
      (int)bytes);
    return kTfLiteError;
 802e6f8:	2301      	movs	r3, #1
 802e6fa:	e015      	b.n	802e728 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x74>
  }

  scratch_buffers[scratch_buffers_ix] = b;
 802e6fc:	4b0c      	ldr	r3, [pc, #48]	; (802e730 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x7c>)
 802e6fe:	681b      	ldr	r3, [r3, #0]
 802e700:	4a0e      	ldr	r2, [pc, #56]	; (802e73c <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x88>)
 802e702:	00db      	lsls	r3, r3, #3
 802e704:	4413      	add	r3, r2
 802e706:	f107 0210 	add.w	r2, r7, #16
 802e70a:	e892 0003 	ldmia.w	r2, {r0, r1}
 802e70e:	e883 0003 	stmia.w	r3, {r0, r1}
  *buffer_idx = scratch_buffers_ix;
 802e712:	4b07      	ldr	r3, [pc, #28]	; (802e730 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x7c>)
 802e714:	681b      	ldr	r3, [r3, #0]
 802e716:	461a      	mov	r2, r3
 802e718:	687b      	ldr	r3, [r7, #4]
 802e71a:	601a      	str	r2, [r3, #0]

  scratch_buffers_ix++;
 802e71c:	4b04      	ldr	r3, [pc, #16]	; (802e730 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x7c>)
 802e71e:	681b      	ldr	r3, [r3, #0]
 802e720:	3301      	adds	r3, #1
 802e722:	4a03      	ldr	r2, [pc, #12]	; (802e730 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x7c>)
 802e724:	6013      	str	r3, [r2, #0]

  return kTfLiteOk;
 802e726:	2300      	movs	r3, #0
}
 802e728:	4618      	mov	r0, r3
 802e72a:	3718      	adds	r7, #24
 802e72c:	46bd      	mov	sp, r7
 802e72e:	bd80      	pop	{r7, pc}
 802e730:	2000131c 	.word	0x2000131c
 802e734:	08035d8c 	.word	0x08035d8c
 802e738:	08035de4 	.word	0x08035de4
 802e73c:	200012fc 	.word	0x200012fc

0802e740 <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti>:

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
 802e740:	b480      	push	{r7}
 802e742:	b083      	sub	sp, #12
 802e744:	af00      	add	r7, sp, #0
 802e746:	6078      	str	r0, [r7, #4]
 802e748:	6039      	str	r1, [r7, #0]
  if (buffer_idx > (int)scratch_buffers_ix) {
 802e74a:	4b09      	ldr	r3, [pc, #36]	; (802e770 <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti+0x30>)
 802e74c:	681b      	ldr	r3, [r3, #0]
 802e74e:	461a      	mov	r2, r3
 802e750:	683b      	ldr	r3, [r7, #0]
 802e752:	4293      	cmp	r3, r2
 802e754:	dd01      	ble.n	802e75a <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti+0x1a>
    return NULL;
 802e756:	2300      	movs	r3, #0
 802e758:	e004      	b.n	802e764 <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti+0x24>
  }
  return scratch_buffers[buffer_idx].ptr;
 802e75a:	4a06      	ldr	r2, [pc, #24]	; (802e774 <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti+0x34>)
 802e75c:	683b      	ldr	r3, [r7, #0]
 802e75e:	00db      	lsls	r3, r3, #3
 802e760:	4413      	add	r3, r2
 802e762:	685b      	ldr	r3, [r3, #4]
}
 802e764:	4618      	mov	r0, r3
 802e766:	370c      	adds	r7, #12
 802e768:	46bd      	mov	sp, r7
 802e76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e76e:	4770      	bx	lr
 802e770:	2000131c 	.word	0x2000131c
 802e774:	200012fc 	.word	0x200012fc

0802e778 <_ZN12_GLOBAL__N_1L9GetTensorEPK13TfLiteContexti>:

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
 802e778:	b480      	push	{r7}
 802e77a:	b083      	sub	sp, #12
 802e77c:	af00      	add	r7, sp, #0
 802e77e:	6078      	str	r0, [r7, #4]
 802e780:	6039      	str	r1, [r7, #0]
  return &tflTensors[tensor_idx];
 802e782:	683b      	ldr	r3, [r7, #0]
 802e784:	019b      	lsls	r3, r3, #6
 802e786:	4a04      	ldr	r2, [pc, #16]	; (802e798 <_ZN12_GLOBAL__N_1L9GetTensorEPK13TfLiteContexti+0x20>)
 802e788:	4413      	add	r3, r2
}
 802e78a:	4618      	mov	r0, r3
 802e78c:	370c      	adds	r7, #12
 802e78e:	46bd      	mov	sp, r7
 802e790:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e794:	4770      	bx	lr
 802e796:	bf00      	nop
 802e798:	200009d0 	.word	0x200009d0

0802e79c <_ZN12_GLOBAL__N_1L13GetEvalTensorEPK13TfLiteContexti>:

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
 802e79c:	b480      	push	{r7}
 802e79e:	b083      	sub	sp, #12
 802e7a0:	af00      	add	r7, sp, #0
 802e7a2:	6078      	str	r0, [r7, #4]
 802e7a4:	6039      	str	r1, [r7, #0]
  return &tflEvalTensors[tensor_idx];
 802e7a6:	683a      	ldr	r2, [r7, #0]
 802e7a8:	4613      	mov	r3, r2
 802e7aa:	005b      	lsls	r3, r3, #1
 802e7ac:	4413      	add	r3, r2
 802e7ae:	009b      	lsls	r3, r3, #2
 802e7b0:	4a03      	ldr	r2, [pc, #12]	; (802e7c0 <_ZN12_GLOBAL__N_1L13GetEvalTensorEPK13TfLiteContexti+0x24>)
 802e7b2:	4413      	add	r3, r2
}
 802e7b4:	4618      	mov	r0, r3
 802e7b6:	370c      	adds	r7, #12
 802e7b8:	46bd      	mov	sp, r7
 802e7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e7be:	4770      	bx	lr
 802e7c0:	20000f90 	.word	0x20000f90

0802e7c4 <_Z18trained_model_initPFPvjjE>:

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
 802e7c4:	b5b0      	push	{r4, r5, r7, lr}
 802e7c6:	b092      	sub	sp, #72	; 0x48
 802e7c8:	af00      	add	r7, sp, #0
 802e7ca:	6278      	str	r0, [r7, #36]	; 0x24
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
 802e7cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802e7ce:	f242 3150 	movw	r1, #9040	; 0x2350
 802e7d2:	2010      	movs	r0, #16
 802e7d4:	4798      	blx	r3
 802e7d6:	4603      	mov	r3, r0
 802e7d8:	4aa3      	ldr	r2, [pc, #652]	; (802ea68 <_Z18trained_model_initPFPvjjE+0x2a4>)
 802e7da:	6013      	str	r3, [r2, #0]
  if (!tensor_arena) {
 802e7dc:	4ba2      	ldr	r3, [pc, #648]	; (802ea68 <_Z18trained_model_initPFPvjjE+0x2a4>)
 802e7de:	681b      	ldr	r3, [r3, #0]
 802e7e0:	2b00      	cmp	r3, #0
 802e7e2:	d104      	bne.n	802e7ee <_Z18trained_model_initPFPvjjE+0x2a>
    ei_printf("ERR: failed to allocate tensor arena\n");
 802e7e4:	48a1      	ldr	r0, [pc, #644]	; (802ea6c <_Z18trained_model_initPFPvjjE+0x2a8>)
 802e7e6:	f7d7 f861 	bl	80058ac <_Z9ei_printfPKcz>
    return kTfLiteError;
 802e7ea:	2301      	movs	r3, #1
 802e7ec:	e244      	b.n	802ec78 <_Z18trained_model_initPFPvjjE+0x4b4>
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
 802e7ee:	4b9e      	ldr	r3, [pc, #632]	; (802ea68 <_Z18trained_model_initPFPvjjE+0x2a4>)
 802e7f0:	681b      	ldr	r3, [r3, #0]
 802e7f2:	4a9f      	ldr	r2, [pc, #636]	; (802ea70 <_Z18trained_model_initPFPvjjE+0x2ac>)
 802e7f4:	6013      	str	r3, [r2, #0]
  current_location = tensor_arena + kTensorArenaSize;
 802e7f6:	4b9c      	ldr	r3, [pc, #624]	; (802ea68 <_Z18trained_model_initPFPvjjE+0x2a4>)
 802e7f8:	681b      	ldr	r3, [r3, #0]
 802e7fa:	f503 530d 	add.w	r3, r3, #9024	; 0x2340
 802e7fe:	3310      	adds	r3, #16
 802e800:	4a9c      	ldr	r2, [pc, #624]	; (802ea74 <_Z18trained_model_initPFPvjjE+0x2b0>)
 802e802:	6013      	str	r3, [r2, #0]
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
 802e804:	4b9c      	ldr	r3, [pc, #624]	; (802ea78 <_Z18trained_model_initPFPvjjE+0x2b4>)
 802e806:	4a9d      	ldr	r2, [pc, #628]	; (802ea7c <_Z18trained_model_initPFPvjjE+0x2b8>)
 802e808:	639a      	str	r2, [r3, #56]	; 0x38
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
 802e80a:	4b9b      	ldr	r3, [pc, #620]	; (802ea78 <_Z18trained_model_initPFPvjjE+0x2b4>)
 802e80c:	4a9c      	ldr	r2, [pc, #624]	; (802ea80 <_Z18trained_model_initPFPvjjE+0x2bc>)
 802e80e:	641a      	str	r2, [r3, #64]	; 0x40
  ctx.GetScratchBuffer = &GetScratchBuffer;
 802e810:	4b99      	ldr	r3, [pc, #612]	; (802ea78 <_Z18trained_model_initPFPvjjE+0x2b4>)
 802e812:	4a9c      	ldr	r2, [pc, #624]	; (802ea84 <_Z18trained_model_initPFPvjjE+0x2c0>)
 802e814:	645a      	str	r2, [r3, #68]	; 0x44
  ctx.GetTensor = &GetTensor;
 802e816:	4b98      	ldr	r3, [pc, #608]	; (802ea78 <_Z18trained_model_initPFPvjjE+0x2b4>)
 802e818:	4a9b      	ldr	r2, [pc, #620]	; (802ea88 <_Z18trained_model_initPFPvjjE+0x2c4>)
 802e81a:	651a      	str	r2, [r3, #80]	; 0x50
  ctx.GetEvalTensor = &GetEvalTensor;
 802e81c:	4b96      	ldr	r3, [pc, #600]	; (802ea78 <_Z18trained_model_initPFPvjjE+0x2b4>)
 802e81e:	4a9b      	ldr	r2, [pc, #620]	; (802ea8c <_Z18trained_model_initPFPvjjE+0x2c8>)
 802e820:	655a      	str	r2, [r3, #84]	; 0x54
  ctx.tensors = tflTensors;
 802e822:	4b95      	ldr	r3, [pc, #596]	; (802ea78 <_Z18trained_model_initPFPvjjE+0x2b4>)
 802e824:	4a9a      	ldr	r2, [pc, #616]	; (802ea90 <_Z18trained_model_initPFPvjjE+0x2cc>)
 802e826:	609a      	str	r2, [r3, #8]
  ctx.tensors_size = 23;
 802e828:	4b93      	ldr	r3, [pc, #588]	; (802ea78 <_Z18trained_model_initPFPvjjE+0x2b4>)
 802e82a:	2217      	movs	r2, #23
 802e82c:	601a      	str	r2, [r3, #0]
  for (size_t i = 0; i < 23; ++i) {
 802e82e:	2300      	movs	r3, #0
 802e830:	647b      	str	r3, [r7, #68]	; 0x44
 802e832:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802e834:	2b16      	cmp	r3, #22
 802e836:	f200 810c 	bhi.w	802ea52 <_Z18trained_model_initPFPvjjE+0x28e>
    tflTensors[i].type = tensorData[i].type;
 802e83a:	4996      	ldr	r1, [pc, #600]	; (802ea94 <_Z18trained_model_initPFPvjjE+0x2d0>)
 802e83c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 802e83e:	4613      	mov	r3, r2
 802e840:	005b      	lsls	r3, r3, #1
 802e842:	4413      	add	r3, r2
 802e844:	00db      	lsls	r3, r3, #3
 802e846:	440b      	add	r3, r1
 802e848:	3301      	adds	r3, #1
 802e84a:	7819      	ldrb	r1, [r3, #0]
 802e84c:	4a90      	ldr	r2, [pc, #576]	; (802ea90 <_Z18trained_model_initPFPvjjE+0x2cc>)
 802e84e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802e850:	019b      	lsls	r3, r3, #6
 802e852:	4413      	add	r3, r2
 802e854:	460a      	mov	r2, r1
 802e856:	701a      	strb	r2, [r3, #0]
    tflEvalTensors[i].type = tensorData[i].type;
 802e858:	498e      	ldr	r1, [pc, #568]	; (802ea94 <_Z18trained_model_initPFPvjjE+0x2d0>)
 802e85a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 802e85c:	4613      	mov	r3, r2
 802e85e:	005b      	lsls	r3, r3, #1
 802e860:	4413      	add	r3, r2
 802e862:	00db      	lsls	r3, r3, #3
 802e864:	440b      	add	r3, r1
 802e866:	3301      	adds	r3, #1
 802e868:	7818      	ldrb	r0, [r3, #0]
 802e86a:	498b      	ldr	r1, [pc, #556]	; (802ea98 <_Z18trained_model_initPFPvjjE+0x2d4>)
 802e86c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 802e86e:	4613      	mov	r3, r2
 802e870:	005b      	lsls	r3, r3, #1
 802e872:	4413      	add	r3, r2
 802e874:	009b      	lsls	r3, r3, #2
 802e876:	440b      	add	r3, r1
 802e878:	3308      	adds	r3, #8
 802e87a:	4602      	mov	r2, r0
 802e87c:	701a      	strb	r2, [r3, #0]
    tflTensors[i].is_variable = 0;
 802e87e:	4a84      	ldr	r2, [pc, #528]	; (802ea90 <_Z18trained_model_initPFPvjjE+0x2cc>)
 802e880:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802e882:	019b      	lsls	r3, r3, #6
 802e884:	4413      	add	r3, r2
 802e886:	332d      	adds	r3, #45	; 0x2d
 802e888:	2200      	movs	r2, #0
 802e88a:	701a      	strb	r2, [r3, #0]

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
 802e88c:	4981      	ldr	r1, [pc, #516]	; (802ea94 <_Z18trained_model_initPFPvjjE+0x2d0>)
 802e88e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 802e890:	4613      	mov	r3, r2
 802e892:	005b      	lsls	r3, r3, #1
 802e894:	4413      	add	r3, r2
 802e896:	00db      	lsls	r3, r3, #3
 802e898:	440b      	add	r3, r1
 802e89a:	7819      	ldrb	r1, [r3, #0]
 802e89c:	4a7c      	ldr	r2, [pc, #496]	; (802ea90 <_Z18trained_model_initPFPvjjE+0x2cc>)
 802e89e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802e8a0:	019b      	lsls	r3, r3, #6
 802e8a2:	4413      	add	r3, r2
 802e8a4:	3314      	adds	r3, #20
 802e8a6:	460a      	mov	r2, r1
 802e8a8:	701a      	strb	r2, [r3, #0]
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
 802e8aa:	497a      	ldr	r1, [pc, #488]	; (802ea94 <_Z18trained_model_initPFPvjjE+0x2d0>)
 802e8ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 802e8ae:	4613      	mov	r3, r2
 802e8b0:	005b      	lsls	r3, r3, #1
 802e8b2:	4413      	add	r3, r2
 802e8b4:	00db      	lsls	r3, r3, #3
 802e8b6:	440b      	add	r3, r1
 802e8b8:	330c      	adds	r3, #12
 802e8ba:	681a      	ldr	r2, [r3, #0]
 802e8bc:	4974      	ldr	r1, [pc, #464]	; (802ea90 <_Z18trained_model_initPFPvjjE+0x2cc>)
 802e8be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802e8c0:	019b      	lsls	r3, r3, #6
 802e8c2:	440b      	add	r3, r1
 802e8c4:	3318      	adds	r3, #24
 802e8c6:	601a      	str	r2, [r3, #0]
    tflTensors[i].dims = tensorData[i].dims;
 802e8c8:	4972      	ldr	r1, [pc, #456]	; (802ea94 <_Z18trained_model_initPFPvjjE+0x2d0>)
 802e8ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 802e8cc:	4613      	mov	r3, r2
 802e8ce:	005b      	lsls	r3, r3, #1
 802e8d0:	4413      	add	r3, r2
 802e8d2:	00db      	lsls	r3, r3, #3
 802e8d4:	440b      	add	r3, r1
 802e8d6:	3308      	adds	r3, #8
 802e8d8:	681a      	ldr	r2, [r3, #0]
 802e8da:	496d      	ldr	r1, [pc, #436]	; (802ea90 <_Z18trained_model_initPFPvjjE+0x2cc>)
 802e8dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802e8de:	019b      	lsls	r3, r3, #6
 802e8e0:	440b      	add	r3, r1
 802e8e2:	3308      	adds	r3, #8
 802e8e4:	601a      	str	r2, [r3, #0]
    tflEvalTensors[i].dims = tensorData[i].dims;
 802e8e6:	496b      	ldr	r1, [pc, #428]	; (802ea94 <_Z18trained_model_initPFPvjjE+0x2d0>)
 802e8e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 802e8ea:	4613      	mov	r3, r2
 802e8ec:	005b      	lsls	r3, r3, #1
 802e8ee:	4413      	add	r3, r2
 802e8f0:	00db      	lsls	r3, r3, #3
 802e8f2:	440b      	add	r3, r1
 802e8f4:	3308      	adds	r3, #8
 802e8f6:	6819      	ldr	r1, [r3, #0]
 802e8f8:	4867      	ldr	r0, [pc, #412]	; (802ea98 <_Z18trained_model_initPFPvjjE+0x2d4>)
 802e8fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 802e8fc:	4613      	mov	r3, r2
 802e8fe:	005b      	lsls	r3, r3, #1
 802e900:	4413      	add	r3, r2
 802e902:	009b      	lsls	r3, r3, #2
 802e904:	4403      	add	r3, r0
 802e906:	3304      	adds	r3, #4
 802e908:	6019      	str	r1, [r3, #0]

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
 802e90a:	4a61      	ldr	r2, [pc, #388]	; (802ea90 <_Z18trained_model_initPFPvjjE+0x2cc>)
 802e90c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802e90e:	019b      	lsls	r3, r3, #6
 802e910:	4413      	add	r3, r2
 802e912:	3314      	adds	r3, #20
 802e914:	781b      	ldrb	r3, [r3, #0]
 802e916:	2b02      	cmp	r3, #2
 802e918:	d11e      	bne.n	802e958 <_Z18trained_model_initPFPvjjE+0x194>
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);
 802e91a:	495e      	ldr	r1, [pc, #376]	; (802ea94 <_Z18trained_model_initPFPvjjE+0x2d0>)
 802e91c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 802e91e:	4613      	mov	r3, r2
 802e920:	005b      	lsls	r3, r3, #1
 802e922:	4413      	add	r3, r2
 802e924:	00db      	lsls	r3, r3, #3
 802e926:	440b      	add	r3, r1
 802e928:	3304      	adds	r3, #4
 802e92a:	681b      	ldr	r3, [r3, #0]
 802e92c:	461a      	mov	r2, r3
 802e92e:	4b4e      	ldr	r3, [pc, #312]	; (802ea68 <_Z18trained_model_initPFPvjjE+0x2a4>)
 802e930:	681b      	ldr	r3, [r3, #0]
 802e932:	4413      	add	r3, r2
 802e934:	63bb      	str	r3, [r7, #56]	; 0x38

     tflTensors[i].data.data =  start;
 802e936:	4a56      	ldr	r2, [pc, #344]	; (802ea90 <_Z18trained_model_initPFPvjjE+0x2cc>)
 802e938:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802e93a:	019b      	lsls	r3, r3, #6
 802e93c:	4413      	add	r3, r2
 802e93e:	3304      	adds	r3, #4
 802e940:	6bba      	ldr	r2, [r7, #56]	; 0x38
 802e942:	601a      	str	r2, [r3, #0]
     tflEvalTensors[i].data.data =  start;
 802e944:	4954      	ldr	r1, [pc, #336]	; (802ea98 <_Z18trained_model_initPFPvjjE+0x2d4>)
 802e946:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 802e948:	4613      	mov	r3, r2
 802e94a:	005b      	lsls	r3, r3, #1
 802e94c:	4413      	add	r3, r2
 802e94e:	009b      	lsls	r3, r3, #2
 802e950:	440b      	add	r3, r1
 802e952:	6bba      	ldr	r2, [r7, #56]	; 0x38
 802e954:	601a      	str	r2, [r3, #0]
 802e956:	e01f      	b.n	802e998 <_Z18trained_model_initPFPvjjE+0x1d4>
    }
    else {
       tflTensors[i].data.data = tensorData[i].data;
 802e958:	494e      	ldr	r1, [pc, #312]	; (802ea94 <_Z18trained_model_initPFPvjjE+0x2d0>)
 802e95a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 802e95c:	4613      	mov	r3, r2
 802e95e:	005b      	lsls	r3, r3, #1
 802e960:	4413      	add	r3, r2
 802e962:	00db      	lsls	r3, r3, #3
 802e964:	440b      	add	r3, r1
 802e966:	3304      	adds	r3, #4
 802e968:	681a      	ldr	r2, [r3, #0]
 802e96a:	4949      	ldr	r1, [pc, #292]	; (802ea90 <_Z18trained_model_initPFPvjjE+0x2cc>)
 802e96c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802e96e:	019b      	lsls	r3, r3, #6
 802e970:	440b      	add	r3, r1
 802e972:	3304      	adds	r3, #4
 802e974:	601a      	str	r2, [r3, #0]
       tflEvalTensors[i].data.data = tensorData[i].data;
 802e976:	4947      	ldr	r1, [pc, #284]	; (802ea94 <_Z18trained_model_initPFPvjjE+0x2d0>)
 802e978:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 802e97a:	4613      	mov	r3, r2
 802e97c:	005b      	lsls	r3, r3, #1
 802e97e:	4413      	add	r3, r2
 802e980:	00db      	lsls	r3, r3, #3
 802e982:	440b      	add	r3, r1
 802e984:	3304      	adds	r3, #4
 802e986:	6819      	ldr	r1, [r3, #0]
 802e988:	4843      	ldr	r0, [pc, #268]	; (802ea98 <_Z18trained_model_initPFPvjjE+0x2d4>)
 802e98a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 802e98c:	4613      	mov	r3, r2
 802e98e:	005b      	lsls	r3, r3, #1
 802e990:	4413      	add	r3, r2
 802e992:	009b      	lsls	r3, r3, #2
 802e994:	4403      	add	r3, r0
 802e996:	6019      	str	r1, [r3, #0]
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
 802e998:	4a3d      	ldr	r2, [pc, #244]	; (802ea90 <_Z18trained_model_initPFPvjjE+0x2cc>)
 802e99a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802e99c:	019b      	lsls	r3, r3, #6
 802e99e:	4413      	add	r3, r2
 802e9a0:	f103 0030 	add.w	r0, r3, #48	; 0x30
 802e9a4:	493b      	ldr	r1, [pc, #236]	; (802ea94 <_Z18trained_model_initPFPvjjE+0x2d0>)
 802e9a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 802e9a8:	4613      	mov	r3, r2
 802e9aa:	005b      	lsls	r3, r3, #1
 802e9ac:	4413      	add	r3, r2
 802e9ae:	00db      	lsls	r3, r3, #3
 802e9b0:	440b      	add	r3, r1
 802e9b2:	f103 0210 	add.w	r2, r3, #16
 802e9b6:	4603      	mov	r3, r0
 802e9b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 802e9bc:	e883 0003 	stmia.w	r3, {r0, r1}
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
 802e9c0:	4a33      	ldr	r2, [pc, #204]	; (802ea90 <_Z18trained_model_initPFPvjjE+0x2cc>)
 802e9c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802e9c4:	019b      	lsls	r3, r3, #6
 802e9c6:	4413      	add	r3, r2
 802e9c8:	3330      	adds	r3, #48	; 0x30
 802e9ca:	781b      	ldrb	r3, [r3, #0]
 802e9cc:	2b01      	cmp	r3, #1
 802e9ce:	d11b      	bne.n	802ea08 <_Z18trained_model_initPFPvjjE+0x244>
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
 802e9d0:	4930      	ldr	r1, [pc, #192]	; (802ea94 <_Z18trained_model_initPFPvjjE+0x2d0>)
 802e9d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 802e9d4:	4613      	mov	r3, r2
 802e9d6:	005b      	lsls	r3, r3, #1
 802e9d8:	4413      	add	r3, r2
 802e9da:	00db      	lsls	r3, r3, #3
 802e9dc:	440b      	add	r3, r1
 802e9de:	3314      	adds	r3, #20
 802e9e0:	681b      	ldr	r3, [r3, #0]
 802e9e2:	637b      	str	r3, [r7, #52]	; 0x34
      tflTensors[i].params.scale = quant->scale->data[0];
 802e9e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802e9e6:	681b      	ldr	r3, [r3, #0]
 802e9e8:	685a      	ldr	r2, [r3, #4]
 802e9ea:	4929      	ldr	r1, [pc, #164]	; (802ea90 <_Z18trained_model_initPFPvjjE+0x2cc>)
 802e9ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802e9ee:	019b      	lsls	r3, r3, #6
 802e9f0:	440b      	add	r3, r1
 802e9f2:	330c      	adds	r3, #12
 802e9f4:	601a      	str	r2, [r3, #0]
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
 802e9f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802e9f8:	685b      	ldr	r3, [r3, #4]
 802e9fa:	685a      	ldr	r2, [r3, #4]
 802e9fc:	4924      	ldr	r1, [pc, #144]	; (802ea90 <_Z18trained_model_initPFPvjjE+0x2cc>)
 802e9fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802ea00:	019b      	lsls	r3, r3, #6
 802ea02:	440b      	add	r3, r1
 802ea04:	3310      	adds	r3, #16
 802ea06:	601a      	str	r2, [r3, #0]
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
 802ea08:	4a21      	ldr	r2, [pc, #132]	; (802ea90 <_Z18trained_model_initPFPvjjE+0x2cc>)
 802ea0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802ea0c:	019b      	lsls	r3, r3, #6
 802ea0e:	4413      	add	r3, r2
 802ea10:	3314      	adds	r3, #20
 802ea12:	781b      	ldrb	r3, [r3, #0]
 802ea14:	2b02      	cmp	r3, #2
 802ea16:	d118      	bne.n	802ea4a <_Z18trained_model_initPFPvjjE+0x286>
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
 802ea18:	4a1d      	ldr	r2, [pc, #116]	; (802ea90 <_Z18trained_model_initPFPvjjE+0x2cc>)
 802ea1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802ea1c:	019b      	lsls	r3, r3, #6
 802ea1e:	4413      	add	r3, r2
 802ea20:	3304      	adds	r3, #4
 802ea22:	6819      	ldr	r1, [r3, #0]
 802ea24:	481b      	ldr	r0, [pc, #108]	; (802ea94 <_Z18trained_model_initPFPvjjE+0x2d0>)
 802ea26:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 802ea28:	4613      	mov	r3, r2
 802ea2a:	005b      	lsls	r3, r3, #1
 802ea2c:	4413      	add	r3, r2
 802ea2e:	00db      	lsls	r3, r3, #3
 802ea30:	4403      	add	r3, r0
 802ea32:	330c      	adds	r3, #12
 802ea34:	681b      	ldr	r3, [r3, #0]
 802ea36:	440b      	add	r3, r1
 802ea38:	633b      	str	r3, [r7, #48]	; 0x30
      if (data_end_ptr > tensor_boundary) {
 802ea3a:	4b0d      	ldr	r3, [pc, #52]	; (802ea70 <_Z18trained_model_initPFPvjjE+0x2ac>)
 802ea3c:	681b      	ldr	r3, [r3, #0]
 802ea3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802ea40:	429a      	cmp	r2, r3
 802ea42:	d902      	bls.n	802ea4a <_Z18trained_model_initPFPvjjE+0x286>
        tensor_boundary = data_end_ptr;
 802ea44:	4a0a      	ldr	r2, [pc, #40]	; (802ea70 <_Z18trained_model_initPFPvjjE+0x2ac>)
 802ea46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802ea48:	6013      	str	r3, [r2, #0]
  for (size_t i = 0; i < 23; ++i) {
 802ea4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802ea4c:	3301      	adds	r3, #1
 802ea4e:	647b      	str	r3, [r7, #68]	; 0x44
 802ea50:	e6ef      	b.n	802e832 <_Z18trained_model_initPFPvjjE+0x6e>
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
 802ea52:	4b07      	ldr	r3, [pc, #28]	; (802ea70 <_Z18trained_model_initPFPvjjE+0x2ac>)
 802ea54:	681a      	ldr	r2, [r3, #0]
 802ea56:	4b07      	ldr	r3, [pc, #28]	; (802ea74 <_Z18trained_model_initPFPvjjE+0x2b0>)
 802ea58:	681b      	ldr	r3, [r3, #0]
 802ea5a:	429a      	cmp	r2, r3
 802ea5c:	d920      	bls.n	802eaa0 <_Z18trained_model_initPFPvjjE+0x2dc>
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
 802ea5e:	480f      	ldr	r0, [pc, #60]	; (802ea9c <_Z18trained_model_initPFPvjjE+0x2d8>)
 802ea60:	f7d6 ff24 	bl	80058ac <_Z9ei_printfPKcz>
    return kTfLiteError;
 802ea64:	2301      	movs	r3, #1
 802ea66:	e107      	b.n	802ec78 <_Z18trained_model_initPFPvjjE+0x4b4>
 802ea68:	2000096c 	.word	0x2000096c
 802ea6c:	08035e18 	.word	0x08035e18
 802ea70:	20000970 	.word	0x20000970
 802ea74:	20000974 	.word	0x20000974
 802ea78:	20000978 	.word	0x20000978
 802ea7c:	0802e60d 	.word	0x0802e60d
 802ea80:	0802e6b5 	.word	0x0802e6b5
 802ea84:	0802e741 	.word	0x0802e741
 802ea88:	0802e779 	.word	0x0802e779
 802ea8c:	0802e79d 	.word	0x0802e79d
 802ea90:	200009d0 	.word	0x200009d0
 802ea94:	2000043c 	.word	0x2000043c
 802ea98:	20000f90 	.word	0x20000f90
 802ea9c:	08035e40 	.word	0x08035e40
  }
  registrations[OP_RESHAPE] = Register_RESHAPE();
 802eaa0:	4c77      	ldr	r4, [pc, #476]	; (802ec80 <_Z18trained_model_initPFPvjjE+0x4bc>)
 802eaa2:	463b      	mov	r3, r7
 802eaa4:	4618      	mov	r0, r3
 802eaa6:	f7fe f90b 	bl	802ccc0 <_ZN6tflite3ops5micro16Register_RESHAPEEv>
 802eaaa:	4625      	mov	r5, r4
 802eaac:	463c      	mov	r4, r7
 802eaae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 802eab0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 802eab2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 802eab6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  registrations[OP_CONV_2D] = Register_CONV_2D();
 802eaba:	4c71      	ldr	r4, [pc, #452]	; (802ec80 <_Z18trained_model_initPFPvjjE+0x4bc>)
 802eabc:	463b      	mov	r3, r7
 802eabe:	4618      	mov	r0, r3
 802eac0:	f7fc f820 	bl	802ab04 <_ZN6tflite16Register_CONV_2DEv>
 802eac4:	3420      	adds	r4, #32
 802eac6:	463d      	mov	r5, r7
 802eac8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802eaca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802eacc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 802ead0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
 802ead4:	4c6a      	ldr	r4, [pc, #424]	; (802ec80 <_Z18trained_model_initPFPvjjE+0x4bc>)
 802ead6:	463b      	mov	r3, r7
 802ead8:	4618      	mov	r0, r3
 802eada:	f7fd ff05 	bl	802c8e8 <_ZN6tflite3ops5micro20Register_MAX_POOL_2DEv>
 802eade:	3440      	adds	r4, #64	; 0x40
 802eae0:	463d      	mov	r5, r7
 802eae2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802eae4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802eae6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 802eaea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
 802eaee:	4c64      	ldr	r4, [pc, #400]	; (802ec80 <_Z18trained_model_initPFPvjjE+0x4bc>)
 802eaf0:	463b      	mov	r3, r7
 802eaf2:	4618      	mov	r0, r3
 802eaf4:	f7fd f936 	bl	802bd64 <_ZN6tflite24Register_FULLY_CONNECTEDEv>
 802eaf8:	3460      	adds	r4, #96	; 0x60
 802eafa:	463d      	mov	r5, r7
 802eafc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802eafe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802eb00:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 802eb04:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  registrations[OP_SOFTMAX] = Register_SOFTMAX();
 802eb08:	4c5d      	ldr	r4, [pc, #372]	; (802ec80 <_Z18trained_model_initPFPvjjE+0x4bc>)
 802eb0a:	463b      	mov	r3, r7
 802eb0c:	4618      	mov	r0, r3
 802eb0e:	f7fe fc53 	bl	802d3b8 <_ZN6tflite16Register_SOFTMAXEv>
 802eb12:	3480      	adds	r4, #128	; 0x80
 802eb14:	463d      	mov	r5, r7
 802eb16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802eb18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802eb1a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 802eb1e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  for (size_t i = 0; i < 11; ++i) {
 802eb22:	2300      	movs	r3, #0
 802eb24:	643b      	str	r3, [r7, #64]	; 0x40
 802eb26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802eb28:	2b0a      	cmp	r3, #10
 802eb2a:	d86f      	bhi.n	802ec0c <_Z18trained_model_initPFPvjjE+0x448>
    tflNodes[i].inputs = nodeData[i].inputs;
 802eb2c:	4a55      	ldr	r2, [pc, #340]	; (802ec84 <_Z18trained_model_initPFPvjjE+0x4c0>)
 802eb2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802eb30:	011b      	lsls	r3, r3, #4
 802eb32:	4413      	add	r3, r2
 802eb34:	6819      	ldr	r1, [r3, #0]
 802eb36:	4854      	ldr	r0, [pc, #336]	; (802ec88 <_Z18trained_model_initPFPvjjE+0x4c4>)
 802eb38:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 802eb3a:	4613      	mov	r3, r2
 802eb3c:	00db      	lsls	r3, r3, #3
 802eb3e:	4413      	add	r3, r2
 802eb40:	009b      	lsls	r3, r3, #2
 802eb42:	4403      	add	r3, r0
 802eb44:	6019      	str	r1, [r3, #0]
    tflNodes[i].outputs = nodeData[i].outputs;
 802eb46:	4a4f      	ldr	r2, [pc, #316]	; (802ec84 <_Z18trained_model_initPFPvjjE+0x4c0>)
 802eb48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802eb4a:	011b      	lsls	r3, r3, #4
 802eb4c:	4413      	add	r3, r2
 802eb4e:	3304      	adds	r3, #4
 802eb50:	6819      	ldr	r1, [r3, #0]
 802eb52:	484d      	ldr	r0, [pc, #308]	; (802ec88 <_Z18trained_model_initPFPvjjE+0x4c4>)
 802eb54:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 802eb56:	4613      	mov	r3, r2
 802eb58:	00db      	lsls	r3, r3, #3
 802eb5a:	4413      	add	r3, r2
 802eb5c:	009b      	lsls	r3, r3, #2
 802eb5e:	4403      	add	r3, r0
 802eb60:	3304      	adds	r3, #4
 802eb62:	6019      	str	r1, [r3, #0]
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
 802eb64:	4a47      	ldr	r2, [pc, #284]	; (802ec84 <_Z18trained_model_initPFPvjjE+0x4c0>)
 802eb66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802eb68:	011b      	lsls	r3, r3, #4
 802eb6a:	4413      	add	r3, r2
 802eb6c:	3308      	adds	r3, #8
 802eb6e:	6819      	ldr	r1, [r3, #0]
 802eb70:	4845      	ldr	r0, [pc, #276]	; (802ec88 <_Z18trained_model_initPFPvjjE+0x4c4>)
 802eb72:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 802eb74:	4613      	mov	r3, r2
 802eb76:	00db      	lsls	r3, r3, #3
 802eb78:	4413      	add	r3, r2
 802eb7a:	009b      	lsls	r3, r3, #2
 802eb7c:	4403      	add	r3, r0
 802eb7e:	3314      	adds	r3, #20
 802eb80:	6019      	str	r1, [r3, #0]
tflNodes[i].custom_initial_data = nullptr;
 802eb82:	4941      	ldr	r1, [pc, #260]	; (802ec88 <_Z18trained_model_initPFPvjjE+0x4c4>)
 802eb84:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 802eb86:	4613      	mov	r3, r2
 802eb88:	00db      	lsls	r3, r3, #3
 802eb8a:	4413      	add	r3, r2
 802eb8c:	009b      	lsls	r3, r3, #2
 802eb8e:	440b      	add	r3, r1
 802eb90:	3318      	adds	r3, #24
 802eb92:	2200      	movs	r2, #0
 802eb94:	601a      	str	r2, [r3, #0]
      tflNodes[i].custom_initial_data_size = 0;
 802eb96:	493c      	ldr	r1, [pc, #240]	; (802ec88 <_Z18trained_model_initPFPvjjE+0x4c4>)
 802eb98:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 802eb9a:	4613      	mov	r3, r2
 802eb9c:	00db      	lsls	r3, r3, #3
 802eb9e:	4413      	add	r3, r2
 802eba0:	009b      	lsls	r3, r3, #2
 802eba2:	440b      	add	r3, r1
 802eba4:	331c      	adds	r3, #28
 802eba6:	2200      	movs	r2, #0
 802eba8:	601a      	str	r2, [r3, #0]
if (registrations[nodeData[i].used_op_index].init) {
 802ebaa:	4a36      	ldr	r2, [pc, #216]	; (802ec84 <_Z18trained_model_initPFPvjjE+0x4c0>)
 802ebac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802ebae:	011b      	lsls	r3, r3, #4
 802ebb0:	4413      	add	r3, r2
 802ebb2:	330c      	adds	r3, #12
 802ebb4:	781b      	ldrb	r3, [r3, #0]
 802ebb6:	4a32      	ldr	r2, [pc, #200]	; (802ec80 <_Z18trained_model_initPFPvjjE+0x4bc>)
 802ebb8:	015b      	lsls	r3, r3, #5
 802ebba:	4413      	add	r3, r2
 802ebbc:	681b      	ldr	r3, [r3, #0]
 802ebbe:	2b00      	cmp	r3, #0
 802ebc0:	d020      	beq.n	802ec04 <_Z18trained_model_initPFPvjjE+0x440>
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
 802ebc2:	4a30      	ldr	r2, [pc, #192]	; (802ec84 <_Z18trained_model_initPFPvjjE+0x4c0>)
 802ebc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802ebc6:	011b      	lsls	r3, r3, #4
 802ebc8:	4413      	add	r3, r2
 802ebca:	330c      	adds	r3, #12
 802ebcc:	781b      	ldrb	r3, [r3, #0]
 802ebce:	4a2c      	ldr	r2, [pc, #176]	; (802ec80 <_Z18trained_model_initPFPvjjE+0x4bc>)
 802ebd0:	015b      	lsls	r3, r3, #5
 802ebd2:	4413      	add	r3, r2
 802ebd4:	681c      	ldr	r4, [r3, #0]
 802ebd6:	492c      	ldr	r1, [pc, #176]	; (802ec88 <_Z18trained_model_initPFPvjjE+0x4c4>)
 802ebd8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 802ebda:	4613      	mov	r3, r2
 802ebdc:	00db      	lsls	r3, r3, #3
 802ebde:	4413      	add	r3, r2
 802ebe0:	009b      	lsls	r3, r3, #2
 802ebe2:	440b      	add	r3, r1
 802ebe4:	3314      	adds	r3, #20
 802ebe6:	681b      	ldr	r3, [r3, #0]
 802ebe8:	2200      	movs	r2, #0
 802ebea:	4619      	mov	r1, r3
 802ebec:	4827      	ldr	r0, [pc, #156]	; (802ec8c <_Z18trained_model_initPFPvjjE+0x4c8>)
 802ebee:	47a0      	blx	r4
 802ebf0:	4601      	mov	r1, r0
 802ebf2:	4825      	ldr	r0, [pc, #148]	; (802ec88 <_Z18trained_model_initPFPvjjE+0x4c4>)
 802ebf4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 802ebf6:	4613      	mov	r3, r2
 802ebf8:	00db      	lsls	r3, r3, #3
 802ebfa:	4413      	add	r3, r2
 802ebfc:	009b      	lsls	r3, r3, #2
 802ebfe:	4403      	add	r3, r0
 802ec00:	3310      	adds	r3, #16
 802ec02:	6019      	str	r1, [r3, #0]
  for (size_t i = 0; i < 11; ++i) {
 802ec04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802ec06:	3301      	adds	r3, #1
 802ec08:	643b      	str	r3, [r7, #64]	; 0x40
 802ec0a:	e78c      	b.n	802eb26 <_Z18trained_model_initPFPvjjE+0x362>
    }
  }
  for (size_t i = 0; i < 11; ++i) {
 802ec0c:	2300      	movs	r3, #0
 802ec0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 802ec10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802ec12:	2b0a      	cmp	r3, #10
 802ec14:	d82f      	bhi.n	802ec76 <_Z18trained_model_initPFPvjjE+0x4b2>
    if (registrations[nodeData[i].used_op_index].prepare) {
 802ec16:	4a1b      	ldr	r2, [pc, #108]	; (802ec84 <_Z18trained_model_initPFPvjjE+0x4c0>)
 802ec18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802ec1a:	011b      	lsls	r3, r3, #4
 802ec1c:	4413      	add	r3, r2
 802ec1e:	330c      	adds	r3, #12
 802ec20:	781b      	ldrb	r3, [r3, #0]
 802ec22:	4a17      	ldr	r2, [pc, #92]	; (802ec80 <_Z18trained_model_initPFPvjjE+0x4bc>)
 802ec24:	015b      	lsls	r3, r3, #5
 802ec26:	4413      	add	r3, r2
 802ec28:	3308      	adds	r3, #8
 802ec2a:	681b      	ldr	r3, [r3, #0]
 802ec2c:	2b00      	cmp	r3, #0
 802ec2e:	d01e      	beq.n	802ec6e <_Z18trained_model_initPFPvjjE+0x4aa>
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
 802ec30:	4a14      	ldr	r2, [pc, #80]	; (802ec84 <_Z18trained_model_initPFPvjjE+0x4c0>)
 802ec32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802ec34:	011b      	lsls	r3, r3, #4
 802ec36:	4413      	add	r3, r2
 802ec38:	330c      	adds	r3, #12
 802ec3a:	781b      	ldrb	r3, [r3, #0]
 802ec3c:	4a10      	ldr	r2, [pc, #64]	; (802ec80 <_Z18trained_model_initPFPvjjE+0x4bc>)
 802ec3e:	015b      	lsls	r3, r3, #5
 802ec40:	4413      	add	r3, r2
 802ec42:	3308      	adds	r3, #8
 802ec44:	681c      	ldr	r4, [r3, #0]
 802ec46:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 802ec48:	4613      	mov	r3, r2
 802ec4a:	00db      	lsls	r3, r3, #3
 802ec4c:	4413      	add	r3, r2
 802ec4e:	009b      	lsls	r3, r3, #2
 802ec50:	4a0d      	ldr	r2, [pc, #52]	; (802ec88 <_Z18trained_model_initPFPvjjE+0x4c4>)
 802ec52:	4413      	add	r3, r2
 802ec54:	4619      	mov	r1, r3
 802ec56:	480d      	ldr	r0, [pc, #52]	; (802ec8c <_Z18trained_model_initPFPvjjE+0x4c8>)
 802ec58:	47a0      	blx	r4
 802ec5a:	4603      	mov	r3, r0
 802ec5c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      if (status != kTfLiteOk) {
 802ec60:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802ec64:	2b00      	cmp	r3, #0
 802ec66:	d002      	beq.n	802ec6e <_Z18trained_model_initPFPvjjE+0x4aa>
        return status;
 802ec68:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802ec6c:	e004      	b.n	802ec78 <_Z18trained_model_initPFPvjjE+0x4b4>
  for (size_t i = 0; i < 11; ++i) {
 802ec6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802ec70:	3301      	adds	r3, #1
 802ec72:	63fb      	str	r3, [r7, #60]	; 0x3c
 802ec74:	e7cc      	b.n	802ec10 <_Z18trained_model_initPFPvjjE+0x44c>
      }
    }
  }
  return kTfLiteOk;
 802ec76:	2300      	movs	r3, #0
}
 802ec78:	4618      	mov	r0, r3
 802ec7a:	3748      	adds	r7, #72	; 0x48
 802ec7c:	46bd      	mov	sp, r7
 802ec7e:	bdb0      	pop	{r4, r5, r7, pc}
 802ec80:	200010a4 	.word	0x200010a4
 802ec84:	08037e38 	.word	0x08037e38
 802ec88:	20001144 	.word	0x20001144
 802ec8c:	20000978 	.word	0x20000978

0802ec90 <_Z19trained_model_inputi>:

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
 802ec90:	b480      	push	{r7}
 802ec92:	b083      	sub	sp, #12
 802ec94:	af00      	add	r7, sp, #0
 802ec96:	6078      	str	r0, [r7, #4]
  return &ctx.tensors[inTensorIndices[index]];
 802ec98:	4b05      	ldr	r3, [pc, #20]	; (802ecb0 <_Z19trained_model_inputi+0x20>)
 802ec9a:	689a      	ldr	r2, [r3, #8]
 802ec9c:	2300      	movs	r3, #0
 802ec9e:	019b      	lsls	r3, r3, #6
 802eca0:	4413      	add	r3, r2
}
 802eca2:	4618      	mov	r0, r3
 802eca4:	370c      	adds	r7, #12
 802eca6:	46bd      	mov	sp, r7
 802eca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ecac:	4770      	bx	lr
 802ecae:	bf00      	nop
 802ecb0:	20000978 	.word	0x20000978

0802ecb4 <_Z20trained_model_outputi>:

static const int outTensorIndices[] = {
  22, 
};
TfLiteTensor* trained_model_output(int index) {
 802ecb4:	b480      	push	{r7}
 802ecb6:	b083      	sub	sp, #12
 802ecb8:	af00      	add	r7, sp, #0
 802ecba:	6078      	str	r0, [r7, #4]
  return &ctx.tensors[outTensorIndices[index]];
 802ecbc:	4b05      	ldr	r3, [pc, #20]	; (802ecd4 <_Z20trained_model_outputi+0x20>)
 802ecbe:	689a      	ldr	r2, [r3, #8]
 802ecc0:	2316      	movs	r3, #22
 802ecc2:	019b      	lsls	r3, r3, #6
 802ecc4:	4413      	add	r3, r2
}
 802ecc6:	4618      	mov	r0, r3
 802ecc8:	370c      	adds	r7, #12
 802ecca:	46bd      	mov	sp, r7
 802eccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ecd0:	4770      	bx	lr
 802ecd2:	bf00      	nop
 802ecd4:	20000978 	.word	0x20000978

0802ecd8 <_Z20trained_model_invokev>:

TfLiteStatus trained_model_invoke() {
 802ecd8:	b590      	push	{r4, r7, lr}
 802ecda:	b083      	sub	sp, #12
 802ecdc:	af00      	add	r7, sp, #0
  for (size_t i = 0; i < 11; ++i) {
 802ecde:	2300      	movs	r3, #0
 802ece0:	607b      	str	r3, [r7, #4]
 802ece2:	687b      	ldr	r3, [r7, #4]
 802ece4:	2b0a      	cmp	r3, #10
 802ece6:	d81f      	bhi.n	802ed28 <_Z20trained_model_invokev+0x50>
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);
 802ece8:	4a12      	ldr	r2, [pc, #72]	; (802ed34 <_Z20trained_model_invokev+0x5c>)
 802ecea:	687b      	ldr	r3, [r7, #4]
 802ecec:	011b      	lsls	r3, r3, #4
 802ecee:	4413      	add	r3, r2
 802ecf0:	330c      	adds	r3, #12
 802ecf2:	781b      	ldrb	r3, [r3, #0]
 802ecf4:	4a10      	ldr	r2, [pc, #64]	; (802ed38 <_Z20trained_model_invokev+0x60>)
 802ecf6:	015b      	lsls	r3, r3, #5
 802ecf8:	4413      	add	r3, r2
 802ecfa:	330c      	adds	r3, #12
 802ecfc:	681c      	ldr	r4, [r3, #0]
 802ecfe:	687a      	ldr	r2, [r7, #4]
 802ed00:	4613      	mov	r3, r2
 802ed02:	00db      	lsls	r3, r3, #3
 802ed04:	4413      	add	r3, r2
 802ed06:	009b      	lsls	r3, r3, #2
 802ed08:	4a0c      	ldr	r2, [pc, #48]	; (802ed3c <_Z20trained_model_invokev+0x64>)
 802ed0a:	4413      	add	r3, r2
 802ed0c:	4619      	mov	r1, r3
 802ed0e:	480c      	ldr	r0, [pc, #48]	; (802ed40 <_Z20trained_model_invokev+0x68>)
 802ed10:	47a0      	blx	r4
 802ed12:	4603      	mov	r3, r0
 802ed14:	70fb      	strb	r3, [r7, #3]
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
 802ed16:	78fb      	ldrb	r3, [r7, #3]
 802ed18:	2b00      	cmp	r3, #0
 802ed1a:	d001      	beq.n	802ed20 <_Z20trained_model_invokev+0x48>
      return status;
 802ed1c:	78fb      	ldrb	r3, [r7, #3]
 802ed1e:	e004      	b.n	802ed2a <_Z20trained_model_invokev+0x52>
  for (size_t i = 0; i < 11; ++i) {
 802ed20:	687b      	ldr	r3, [r7, #4]
 802ed22:	3301      	adds	r3, #1
 802ed24:	607b      	str	r3, [r7, #4]
 802ed26:	e7dc      	b.n	802ece2 <_Z20trained_model_invokev+0xa>
    }
  }
  return kTfLiteOk;
 802ed28:	2300      	movs	r3, #0
}
 802ed2a:	4618      	mov	r0, r3
 802ed2c:	370c      	adds	r7, #12
 802ed2e:	46bd      	mov	sp, r7
 802ed30:	bd90      	pop	{r4, r7, pc}
 802ed32:	bf00      	nop
 802ed34:	08037e38 	.word	0x08037e38
 802ed38:	200010a4 	.word	0x200010a4
 802ed3c:	20001144 	.word	0x20001144
 802ed40:	20000978 	.word	0x20000978

0802ed44 <_Z19trained_model_resetPFvPvE>:

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
 802ed44:	b580      	push	{r7, lr}
 802ed46:	b084      	sub	sp, #16
 802ed48:	af00      	add	r7, sp, #0
 802ed4a:	6078      	str	r0, [r7, #4]
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
 802ed4c:	4b10      	ldr	r3, [pc, #64]	; (802ed90 <_Z19trained_model_resetPFvPvE+0x4c>)
 802ed4e:	681a      	ldr	r2, [r3, #0]
 802ed50:	687b      	ldr	r3, [r7, #4]
 802ed52:	4610      	mov	r0, r2
 802ed54:	4798      	blx	r3
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;
 802ed56:	4b0f      	ldr	r3, [pc, #60]	; (802ed94 <_Z19trained_model_resetPFvPvE+0x50>)
 802ed58:	2200      	movs	r2, #0
 802ed5a:	601a      	str	r2, [r3, #0]

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
 802ed5c:	2300      	movs	r3, #0
 802ed5e:	60fb      	str	r3, [r7, #12]
 802ed60:	4b0d      	ldr	r3, [pc, #52]	; (802ed98 <_Z19trained_model_resetPFvPvE+0x54>)
 802ed62:	681b      	ldr	r3, [r3, #0]
 802ed64:	68fa      	ldr	r2, [r7, #12]
 802ed66:	429a      	cmp	r2, r3
 802ed68:	d20a      	bcs.n	802ed80 <_Z19trained_model_resetPFvPvE+0x3c>
    ei_free(overflow_buffers[ix]);
 802ed6a:	4a0c      	ldr	r2, [pc, #48]	; (802ed9c <_Z19trained_model_resetPFvPvE+0x58>)
 802ed6c:	68fb      	ldr	r3, [r7, #12]
 802ed6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802ed72:	4618      	mov	r0, r3
 802ed74:	f7f8 fdce 	bl	8027914 <_Z7ei_freePv>
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
 802ed78:	68fb      	ldr	r3, [r7, #12]
 802ed7a:	3301      	adds	r3, #1
 802ed7c:	60fb      	str	r3, [r7, #12]
 802ed7e:	e7ef      	b.n	802ed60 <_Z19trained_model_resetPFvPvE+0x1c>
  }
  overflow_buffers_ix = 0;
 802ed80:	4b05      	ldr	r3, [pc, #20]	; (802ed98 <_Z19trained_model_resetPFvPvE+0x54>)
 802ed82:	2200      	movs	r2, #0
 802ed84:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 802ed86:	2300      	movs	r3, #0
}
 802ed88:	4618      	mov	r0, r3
 802ed8a:	3710      	adds	r7, #16
 802ed8c:	46bd      	mov	sp, r7
 802ed8e:	bd80      	pop	{r7, pc}
 802ed90:	2000096c 	.word	0x2000096c
 802ed94:	2000131c 	.word	0x2000131c
 802ed98:	200012f8 	.word	0x200012f8
 802ed9c:	200012d0 	.word	0x200012d0

0802eda0 <_Z41__static_initialization_and_destruction_0ii>:
 802eda0:	b480      	push	{r7}
 802eda2:	b083      	sub	sp, #12
 802eda4:	af00      	add	r7, sp, #0
 802eda6:	6078      	str	r0, [r7, #4]
 802eda8:	6039      	str	r1, [r7, #0]
 802edaa:	687b      	ldr	r3, [r7, #4]
 802edac:	2b01      	cmp	r3, #1
 802edae:	d14b      	bne.n	802ee48 <_Z41__static_initialization_and_destruction_0ii+0xa8>
 802edb0:	683b      	ldr	r3, [r7, #0]
 802edb2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802edb6:	4293      	cmp	r3, r2
 802edb8:	d146      	bne.n	802ee48 <_Z41__static_initialization_and_destruction_0ii+0xa8>
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3968, (TfLiteIntArray*)&tensor_dimension0, 3960, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
 802edba:	4b26      	ldr	r3, [pc, #152]	; (802ee54 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 802edbc:	681b      	ldr	r3, [r3, #0]
 802edbe:	f503 6378 	add.w	r3, r3, #3968	; 0xf80
};const NodeInfo_t nodeData[] = {
 802edc2:	4a25      	ldr	r2, [pc, #148]	; (802ee58 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 802edc4:	6053      	str	r3, [r2, #4]
 802edc6:	4b23      	ldr	r3, [pc, #140]	; (802ee54 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 802edc8:	681b      	ldr	r3, [r3, #0]
 802edca:	4a23      	ldr	r2, [pc, #140]	; (802ee58 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 802edcc:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3968, (TfLiteIntArray*)&tensor_dimension13, 792, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
 802edd0:	4b20      	ldr	r3, [pc, #128]	; (802ee54 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 802edd2:	681b      	ldr	r3, [r3, #0]
 802edd4:	f503 6378 	add.w	r3, r3, #3968	; 0xf80
};const NodeInfo_t nodeData[] = {
 802edd8:	4a1f      	ldr	r2, [pc, #124]	; (802ee58 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 802edda:	f8c2 313c 	str.w	r3, [r2, #316]	; 0x13c
 802edde:	4b1d      	ldr	r3, [pc, #116]	; (802ee54 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 802ede0:	681b      	ldr	r3, [r3, #0]
 802ede2:	4a1d      	ldr	r2, [pc, #116]	; (802ee58 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 802ede4:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 800, (TfLiteIntArray*)&tensor_dimension15, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
 802ede8:	4b1a      	ldr	r3, [pc, #104]	; (802ee54 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 802edea:	681b      	ldr	r3, [r3, #0]
 802edec:	f503 7348 	add.w	r3, r3, #800	; 0x320
};const NodeInfo_t nodeData[] = {
 802edf0:	4a19      	ldr	r2, [pc, #100]	; (802ee58 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 802edf2:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
 802edf6:	4b17      	ldr	r3, [pc, #92]	; (802ee54 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 802edf8:	681b      	ldr	r3, [r3, #0]
 802edfa:	4a17      	ldr	r2, [pc, #92]	; (802ee58 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 802edfc:	f8c2 3184 	str.w	r3, [r2, #388]	; 0x184
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 800, (TfLiteIntArray*)&tensor_dimension17, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
 802ee00:	4b14      	ldr	r3, [pc, #80]	; (802ee54 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 802ee02:	681b      	ldr	r3, [r3, #0]
 802ee04:	f503 7348 	add.w	r3, r3, #800	; 0x320
};const NodeInfo_t nodeData[] = {
 802ee08:	4a13      	ldr	r2, [pc, #76]	; (802ee58 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 802ee0a:	f8c2 319c 	str.w	r3, [r2, #412]	; 0x19c
 802ee0e:	4b11      	ldr	r3, [pc, #68]	; (802ee54 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 802ee10:	681b      	ldr	r3, [r3, #0]
 802ee12:	4a11      	ldr	r2, [pc, #68]	; (802ee58 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 802ee14:	f8c2 31b4 	str.w	r3, [r2, #436]	; 0x1b4
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 800, (TfLiteIntArray*)&tensor_dimension19, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
 802ee18:	4b0e      	ldr	r3, [pc, #56]	; (802ee54 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 802ee1a:	681b      	ldr	r3, [r3, #0]
 802ee1c:	f503 7348 	add.w	r3, r3, #800	; 0x320
};const NodeInfo_t nodeData[] = {
 802ee20:	4a0d      	ldr	r2, [pc, #52]	; (802ee58 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 802ee22:	f8c2 31cc 	str.w	r3, [r2, #460]	; 0x1cc
 802ee26:	4b0b      	ldr	r3, [pc, #44]	; (802ee54 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 802ee28:	681b      	ldr	r3, [r3, #0]
 802ee2a:	4a0b      	ldr	r2, [pc, #44]	; (802ee58 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 802ee2c:	f8c2 31e4 	str.w	r3, [r2, #484]	; 0x1e4
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 400, (TfLiteIntArray*)&tensor_dimension21, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
 802ee30:	4b08      	ldr	r3, [pc, #32]	; (802ee54 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 802ee32:	681b      	ldr	r3, [r3, #0]
 802ee34:	f503 73c8 	add.w	r3, r3, #400	; 0x190
};const NodeInfo_t nodeData[] = {
 802ee38:	4a07      	ldr	r2, [pc, #28]	; (802ee58 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 802ee3a:	f8c2 31fc 	str.w	r3, [r2, #508]	; 0x1fc
 802ee3e:	4b05      	ldr	r3, [pc, #20]	; (802ee54 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 802ee40:	681b      	ldr	r3, [r3, #0]
 802ee42:	4a05      	ldr	r2, [pc, #20]	; (802ee58 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 802ee44:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
}
 802ee48:	bf00      	nop
 802ee4a:	370c      	adds	r7, #12
 802ee4c:	46bd      	mov	sp, r7
 802ee4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ee52:	4770      	bx	lr
 802ee54:	2000096c 	.word	0x2000096c
 802ee58:	2000043c 	.word	0x2000043c

0802ee5c <_GLOBAL__sub_I__Z18trained_model_initPFPvjjE>:
 802ee5c:	b580      	push	{r7, lr}
 802ee5e:	af00      	add	r7, sp, #0
 802ee60:	f64f 71ff 	movw	r1, #65535	; 0xffff
 802ee64:	2001      	movs	r0, #1
 802ee66:	f7ff ff9b 	bl	802eda0 <_Z41__static_initialization_and_destruction_0ii>
 802ee6a:	bd80      	pop	{r7, pc}

0802ee6c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 802ee6c:	b580      	push	{r7, lr}
 802ee6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 802ee70:	2200      	movs	r2, #0
 802ee72:	4912      	ldr	r1, [pc, #72]	; (802eebc <MX_USB_DEVICE_Init+0x50>)
 802ee74:	4812      	ldr	r0, [pc, #72]	; (802eec0 <MX_USB_DEVICE_Init+0x54>)
 802ee76:	f7e4 fe24 	bl	8013ac2 <USBD_Init>
 802ee7a:	4603      	mov	r3, r0
 802ee7c:	2b00      	cmp	r3, #0
 802ee7e:	d001      	beq.n	802ee84 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 802ee80:	f7d6 fe82 	bl	8005b88 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 802ee84:	490f      	ldr	r1, [pc, #60]	; (802eec4 <MX_USB_DEVICE_Init+0x58>)
 802ee86:	480e      	ldr	r0, [pc, #56]	; (802eec0 <MX_USB_DEVICE_Init+0x54>)
 802ee88:	f7e4 fe46 	bl	8013b18 <USBD_RegisterClass>
 802ee8c:	4603      	mov	r3, r0
 802ee8e:	2b00      	cmp	r3, #0
 802ee90:	d001      	beq.n	802ee96 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 802ee92:	f7d6 fe79 	bl	8005b88 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 802ee96:	490c      	ldr	r1, [pc, #48]	; (802eec8 <MX_USB_DEVICE_Init+0x5c>)
 802ee98:	4809      	ldr	r0, [pc, #36]	; (802eec0 <MX_USB_DEVICE_Init+0x54>)
 802ee9a:	f7e4 fda3 	bl	80139e4 <USBD_CDC_RegisterInterface>
 802ee9e:	4603      	mov	r3, r0
 802eea0:	2b00      	cmp	r3, #0
 802eea2:	d001      	beq.n	802eea8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 802eea4:	f7d6 fe70 	bl	8005b88 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 802eea8:	4805      	ldr	r0, [pc, #20]	; (802eec0 <MX_USB_DEVICE_Init+0x54>)
 802eeaa:	f7e4 fe4f 	bl	8013b4c <USBD_Start>
 802eeae:	4603      	mov	r3, r0
 802eeb0:	2b00      	cmp	r3, #0
 802eeb2:	d001      	beq.n	802eeb8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 802eeb4:	f7d6 fe68 	bl	8005b88 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 802eeb8:	bf00      	nop
 802eeba:	bd80      	pop	{r7, pc}
 802eebc:	20000674 	.word	0x20000674
 802eec0:	20001320 	.word	0x20001320
 802eec4:	2000032c 	.word	0x2000032c
 802eec8:	20000664 	.word	0x20000664

0802eecc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 802eecc:	b580      	push	{r7, lr}
 802eece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 802eed0:	2200      	movs	r2, #0
 802eed2:	4905      	ldr	r1, [pc, #20]	; (802eee8 <CDC_Init_FS+0x1c>)
 802eed4:	4805      	ldr	r0, [pc, #20]	; (802eeec <CDC_Init_FS+0x20>)
 802eed6:	f7e4 fd9c 	bl	8013a12 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 802eeda:	4905      	ldr	r1, [pc, #20]	; (802eef0 <CDC_Init_FS+0x24>)
 802eedc:	4803      	ldr	r0, [pc, #12]	; (802eeec <CDC_Init_FS+0x20>)
 802eede:	f7e4 fdb2 	bl	8013a46 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 802eee2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 802eee4:	4618      	mov	r0, r3
 802eee6:	bd80      	pop	{r7, pc}
 802eee8:	200019cc 	.word	0x200019cc
 802eeec:	20001320 	.word	0x20001320
 802eef0:	200015e4 	.word	0x200015e4

0802eef4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 802eef4:	b480      	push	{r7}
 802eef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 802eef8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 802eefa:	4618      	mov	r0, r3
 802eefc:	46bd      	mov	sp, r7
 802eefe:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ef02:	4770      	bx	lr

0802ef04 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 802ef04:	b480      	push	{r7}
 802ef06:	b083      	sub	sp, #12
 802ef08:	af00      	add	r7, sp, #0
 802ef0a:	4603      	mov	r3, r0
 802ef0c:	6039      	str	r1, [r7, #0]
 802ef0e:	71fb      	strb	r3, [r7, #7]
 802ef10:	4613      	mov	r3, r2
 802ef12:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 802ef14:	79fb      	ldrb	r3, [r7, #7]
 802ef16:	2b23      	cmp	r3, #35	; 0x23
 802ef18:	d84a      	bhi.n	802efb0 <CDC_Control_FS+0xac>
 802ef1a:	a201      	add	r2, pc, #4	; (adr r2, 802ef20 <CDC_Control_FS+0x1c>)
 802ef1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802ef20:	0802efb1 	.word	0x0802efb1
 802ef24:	0802efb1 	.word	0x0802efb1
 802ef28:	0802efb1 	.word	0x0802efb1
 802ef2c:	0802efb1 	.word	0x0802efb1
 802ef30:	0802efb1 	.word	0x0802efb1
 802ef34:	0802efb1 	.word	0x0802efb1
 802ef38:	0802efb1 	.word	0x0802efb1
 802ef3c:	0802efb1 	.word	0x0802efb1
 802ef40:	0802efb1 	.word	0x0802efb1
 802ef44:	0802efb1 	.word	0x0802efb1
 802ef48:	0802efb1 	.word	0x0802efb1
 802ef4c:	0802efb1 	.word	0x0802efb1
 802ef50:	0802efb1 	.word	0x0802efb1
 802ef54:	0802efb1 	.word	0x0802efb1
 802ef58:	0802efb1 	.word	0x0802efb1
 802ef5c:	0802efb1 	.word	0x0802efb1
 802ef60:	0802efb1 	.word	0x0802efb1
 802ef64:	0802efb1 	.word	0x0802efb1
 802ef68:	0802efb1 	.word	0x0802efb1
 802ef6c:	0802efb1 	.word	0x0802efb1
 802ef70:	0802efb1 	.word	0x0802efb1
 802ef74:	0802efb1 	.word	0x0802efb1
 802ef78:	0802efb1 	.word	0x0802efb1
 802ef7c:	0802efb1 	.word	0x0802efb1
 802ef80:	0802efb1 	.word	0x0802efb1
 802ef84:	0802efb1 	.word	0x0802efb1
 802ef88:	0802efb1 	.word	0x0802efb1
 802ef8c:	0802efb1 	.word	0x0802efb1
 802ef90:	0802efb1 	.word	0x0802efb1
 802ef94:	0802efb1 	.word	0x0802efb1
 802ef98:	0802efb1 	.word	0x0802efb1
 802ef9c:	0802efb1 	.word	0x0802efb1
 802efa0:	0802efb1 	.word	0x0802efb1
 802efa4:	0802efb1 	.word	0x0802efb1
 802efa8:	0802efb1 	.word	0x0802efb1
 802efac:	0802efb1 	.word	0x0802efb1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 802efb0:	bf00      	nop
  }

  return (USBD_OK);
 802efb2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 802efb4:	4618      	mov	r0, r3
 802efb6:	370c      	adds	r7, #12
 802efb8:	46bd      	mov	sp, r7
 802efba:	f85d 7b04 	ldr.w	r7, [sp], #4
 802efbe:	4770      	bx	lr

0802efc0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 802efc0:	b580      	push	{r7, lr}
 802efc2:	b082      	sub	sp, #8
 802efc4:	af00      	add	r7, sp, #0
 802efc6:	6078      	str	r0, [r7, #4]
 802efc8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 802efca:	6879      	ldr	r1, [r7, #4]
 802efcc:	4805      	ldr	r0, [pc, #20]	; (802efe4 <CDC_Receive_FS+0x24>)
 802efce:	f7e4 fd3a 	bl	8013a46 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 802efd2:	4804      	ldr	r0, [pc, #16]	; (802efe4 <CDC_Receive_FS+0x24>)
 802efd4:	f7e4 fd4b 	bl	8013a6e <USBD_CDC_ReceivePacket>
//	 HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_SET);
//  }
//  else if(Buf[0] == '0'){
//	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
//  }
  return (USBD_OK);
 802efd8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 802efda:	4618      	mov	r0, r3
 802efdc:	3708      	adds	r7, #8
 802efde:	46bd      	mov	sp, r7
 802efe0:	bd80      	pop	{r7, pc}
 802efe2:	bf00      	nop
 802efe4:	20001320 	.word	0x20001320

0802efe8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 802efe8:	b480      	push	{r7}
 802efea:	b083      	sub	sp, #12
 802efec:	af00      	add	r7, sp, #0
 802efee:	4603      	mov	r3, r0
 802eff0:	6039      	str	r1, [r7, #0]
 802eff2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 802eff4:	683b      	ldr	r3, [r7, #0]
 802eff6:	2212      	movs	r2, #18
 802eff8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 802effa:	4b03      	ldr	r3, [pc, #12]	; (802f008 <USBD_FS_DeviceDescriptor+0x20>)
}
 802effc:	4618      	mov	r0, r3
 802effe:	370c      	adds	r7, #12
 802f000:	46bd      	mov	sp, r7
 802f002:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f006:	4770      	bx	lr
 802f008:	20000690 	.word	0x20000690

0802f00c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 802f00c:	b480      	push	{r7}
 802f00e:	b083      	sub	sp, #12
 802f010:	af00      	add	r7, sp, #0
 802f012:	4603      	mov	r3, r0
 802f014:	6039      	str	r1, [r7, #0]
 802f016:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 802f018:	683b      	ldr	r3, [r7, #0]
 802f01a:	2204      	movs	r2, #4
 802f01c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 802f01e:	4b03      	ldr	r3, [pc, #12]	; (802f02c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 802f020:	4618      	mov	r0, r3
 802f022:	370c      	adds	r7, #12
 802f024:	46bd      	mov	sp, r7
 802f026:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f02a:	4770      	bx	lr
 802f02c:	200006a4 	.word	0x200006a4

0802f030 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 802f030:	b580      	push	{r7, lr}
 802f032:	b082      	sub	sp, #8
 802f034:	af00      	add	r7, sp, #0
 802f036:	4603      	mov	r3, r0
 802f038:	6039      	str	r1, [r7, #0]
 802f03a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 802f03c:	79fb      	ldrb	r3, [r7, #7]
 802f03e:	2b00      	cmp	r3, #0
 802f040:	d105      	bne.n	802f04e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 802f042:	683a      	ldr	r2, [r7, #0]
 802f044:	4907      	ldr	r1, [pc, #28]	; (802f064 <USBD_FS_ProductStrDescriptor+0x34>)
 802f046:	4808      	ldr	r0, [pc, #32]	; (802f068 <USBD_FS_ProductStrDescriptor+0x38>)
 802f048:	f7e5 fcfd 	bl	8014a46 <USBD_GetString>
 802f04c:	e004      	b.n	802f058 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 802f04e:	683a      	ldr	r2, [r7, #0]
 802f050:	4904      	ldr	r1, [pc, #16]	; (802f064 <USBD_FS_ProductStrDescriptor+0x34>)
 802f052:	4805      	ldr	r0, [pc, #20]	; (802f068 <USBD_FS_ProductStrDescriptor+0x38>)
 802f054:	f7e5 fcf7 	bl	8014a46 <USBD_GetString>
  }
  return USBD_StrDesc;
 802f058:	4b02      	ldr	r3, [pc, #8]	; (802f064 <USBD_FS_ProductStrDescriptor+0x34>)
}
 802f05a:	4618      	mov	r0, r3
 802f05c:	3708      	adds	r7, #8
 802f05e:	46bd      	mov	sp, r7
 802f060:	bd80      	pop	{r7, pc}
 802f062:	bf00      	nop
 802f064:	20001db4 	.word	0x20001db4
 802f068:	08035e94 	.word	0x08035e94

0802f06c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 802f06c:	b580      	push	{r7, lr}
 802f06e:	b082      	sub	sp, #8
 802f070:	af00      	add	r7, sp, #0
 802f072:	4603      	mov	r3, r0
 802f074:	6039      	str	r1, [r7, #0]
 802f076:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 802f078:	683a      	ldr	r2, [r7, #0]
 802f07a:	4904      	ldr	r1, [pc, #16]	; (802f08c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 802f07c:	4804      	ldr	r0, [pc, #16]	; (802f090 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 802f07e:	f7e5 fce2 	bl	8014a46 <USBD_GetString>
  return USBD_StrDesc;
 802f082:	4b02      	ldr	r3, [pc, #8]	; (802f08c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 802f084:	4618      	mov	r0, r3
 802f086:	3708      	adds	r7, #8
 802f088:	46bd      	mov	sp, r7
 802f08a:	bd80      	pop	{r7, pc}
 802f08c:	20001db4 	.word	0x20001db4
 802f090:	08035eac 	.word	0x08035eac

0802f094 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 802f094:	b580      	push	{r7, lr}
 802f096:	b082      	sub	sp, #8
 802f098:	af00      	add	r7, sp, #0
 802f09a:	4603      	mov	r3, r0
 802f09c:	6039      	str	r1, [r7, #0]
 802f09e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 802f0a0:	683b      	ldr	r3, [r7, #0]
 802f0a2:	221a      	movs	r2, #26
 802f0a4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 802f0a6:	f000 f843 	bl	802f130 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 802f0aa:	4b02      	ldr	r3, [pc, #8]	; (802f0b4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 802f0ac:	4618      	mov	r0, r3
 802f0ae:	3708      	adds	r7, #8
 802f0b0:	46bd      	mov	sp, r7
 802f0b2:	bd80      	pop	{r7, pc}
 802f0b4:	200006a8 	.word	0x200006a8

0802f0b8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 802f0b8:	b580      	push	{r7, lr}
 802f0ba:	b082      	sub	sp, #8
 802f0bc:	af00      	add	r7, sp, #0
 802f0be:	4603      	mov	r3, r0
 802f0c0:	6039      	str	r1, [r7, #0]
 802f0c2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 802f0c4:	79fb      	ldrb	r3, [r7, #7]
 802f0c6:	2b00      	cmp	r3, #0
 802f0c8:	d105      	bne.n	802f0d6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 802f0ca:	683a      	ldr	r2, [r7, #0]
 802f0cc:	4907      	ldr	r1, [pc, #28]	; (802f0ec <USBD_FS_ConfigStrDescriptor+0x34>)
 802f0ce:	4808      	ldr	r0, [pc, #32]	; (802f0f0 <USBD_FS_ConfigStrDescriptor+0x38>)
 802f0d0:	f7e5 fcb9 	bl	8014a46 <USBD_GetString>
 802f0d4:	e004      	b.n	802f0e0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 802f0d6:	683a      	ldr	r2, [r7, #0]
 802f0d8:	4904      	ldr	r1, [pc, #16]	; (802f0ec <USBD_FS_ConfigStrDescriptor+0x34>)
 802f0da:	4805      	ldr	r0, [pc, #20]	; (802f0f0 <USBD_FS_ConfigStrDescriptor+0x38>)
 802f0dc:	f7e5 fcb3 	bl	8014a46 <USBD_GetString>
  }
  return USBD_StrDesc;
 802f0e0:	4b02      	ldr	r3, [pc, #8]	; (802f0ec <USBD_FS_ConfigStrDescriptor+0x34>)
}
 802f0e2:	4618      	mov	r0, r3
 802f0e4:	3708      	adds	r7, #8
 802f0e6:	46bd      	mov	sp, r7
 802f0e8:	bd80      	pop	{r7, pc}
 802f0ea:	bf00      	nop
 802f0ec:	20001db4 	.word	0x20001db4
 802f0f0:	08035ec0 	.word	0x08035ec0

0802f0f4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 802f0f4:	b580      	push	{r7, lr}
 802f0f6:	b082      	sub	sp, #8
 802f0f8:	af00      	add	r7, sp, #0
 802f0fa:	4603      	mov	r3, r0
 802f0fc:	6039      	str	r1, [r7, #0]
 802f0fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 802f100:	79fb      	ldrb	r3, [r7, #7]
 802f102:	2b00      	cmp	r3, #0
 802f104:	d105      	bne.n	802f112 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 802f106:	683a      	ldr	r2, [r7, #0]
 802f108:	4907      	ldr	r1, [pc, #28]	; (802f128 <USBD_FS_InterfaceStrDescriptor+0x34>)
 802f10a:	4808      	ldr	r0, [pc, #32]	; (802f12c <USBD_FS_InterfaceStrDescriptor+0x38>)
 802f10c:	f7e5 fc9b 	bl	8014a46 <USBD_GetString>
 802f110:	e004      	b.n	802f11c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 802f112:	683a      	ldr	r2, [r7, #0]
 802f114:	4904      	ldr	r1, [pc, #16]	; (802f128 <USBD_FS_InterfaceStrDescriptor+0x34>)
 802f116:	4805      	ldr	r0, [pc, #20]	; (802f12c <USBD_FS_InterfaceStrDescriptor+0x38>)
 802f118:	f7e5 fc95 	bl	8014a46 <USBD_GetString>
  }
  return USBD_StrDesc;
 802f11c:	4b02      	ldr	r3, [pc, #8]	; (802f128 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 802f11e:	4618      	mov	r0, r3
 802f120:	3708      	adds	r7, #8
 802f122:	46bd      	mov	sp, r7
 802f124:	bd80      	pop	{r7, pc}
 802f126:	bf00      	nop
 802f128:	20001db4 	.word	0x20001db4
 802f12c:	08035ecc 	.word	0x08035ecc

0802f130 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 802f130:	b580      	push	{r7, lr}
 802f132:	b084      	sub	sp, #16
 802f134:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 802f136:	4b0f      	ldr	r3, [pc, #60]	; (802f174 <Get_SerialNum+0x44>)
 802f138:	681b      	ldr	r3, [r3, #0]
 802f13a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 802f13c:	4b0e      	ldr	r3, [pc, #56]	; (802f178 <Get_SerialNum+0x48>)
 802f13e:	681b      	ldr	r3, [r3, #0]
 802f140:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 802f142:	4b0e      	ldr	r3, [pc, #56]	; (802f17c <Get_SerialNum+0x4c>)
 802f144:	681b      	ldr	r3, [r3, #0]
 802f146:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 802f148:	68fa      	ldr	r2, [r7, #12]
 802f14a:	687b      	ldr	r3, [r7, #4]
 802f14c:	4413      	add	r3, r2
 802f14e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 802f150:	68fb      	ldr	r3, [r7, #12]
 802f152:	2b00      	cmp	r3, #0
 802f154:	d009      	beq.n	802f16a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 802f156:	2208      	movs	r2, #8
 802f158:	4909      	ldr	r1, [pc, #36]	; (802f180 <Get_SerialNum+0x50>)
 802f15a:	68f8      	ldr	r0, [r7, #12]
 802f15c:	f000 f814 	bl	802f188 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 802f160:	2204      	movs	r2, #4
 802f162:	4908      	ldr	r1, [pc, #32]	; (802f184 <Get_SerialNum+0x54>)
 802f164:	68b8      	ldr	r0, [r7, #8]
 802f166:	f000 f80f 	bl	802f188 <IntToUnicode>
  }
}
 802f16a:	bf00      	nop
 802f16c:	3710      	adds	r7, #16
 802f16e:	46bd      	mov	sp, r7
 802f170:	bd80      	pop	{r7, pc}
 802f172:	bf00      	nop
 802f174:	1ffff7ac 	.word	0x1ffff7ac
 802f178:	1ffff7b0 	.word	0x1ffff7b0
 802f17c:	1ffff7b4 	.word	0x1ffff7b4
 802f180:	200006aa 	.word	0x200006aa
 802f184:	200006ba 	.word	0x200006ba

0802f188 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 802f188:	b480      	push	{r7}
 802f18a:	b087      	sub	sp, #28
 802f18c:	af00      	add	r7, sp, #0
 802f18e:	60f8      	str	r0, [r7, #12]
 802f190:	60b9      	str	r1, [r7, #8]
 802f192:	4613      	mov	r3, r2
 802f194:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 802f196:	2300      	movs	r3, #0
 802f198:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 802f19a:	2300      	movs	r3, #0
 802f19c:	75fb      	strb	r3, [r7, #23]
 802f19e:	e027      	b.n	802f1f0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 802f1a0:	68fb      	ldr	r3, [r7, #12]
 802f1a2:	0f1b      	lsrs	r3, r3, #28
 802f1a4:	2b09      	cmp	r3, #9
 802f1a6:	d80b      	bhi.n	802f1c0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 802f1a8:	68fb      	ldr	r3, [r7, #12]
 802f1aa:	0f1b      	lsrs	r3, r3, #28
 802f1ac:	b2da      	uxtb	r2, r3
 802f1ae:	7dfb      	ldrb	r3, [r7, #23]
 802f1b0:	005b      	lsls	r3, r3, #1
 802f1b2:	4619      	mov	r1, r3
 802f1b4:	68bb      	ldr	r3, [r7, #8]
 802f1b6:	440b      	add	r3, r1
 802f1b8:	3230      	adds	r2, #48	; 0x30
 802f1ba:	b2d2      	uxtb	r2, r2
 802f1bc:	701a      	strb	r2, [r3, #0]
 802f1be:	e00a      	b.n	802f1d6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 802f1c0:	68fb      	ldr	r3, [r7, #12]
 802f1c2:	0f1b      	lsrs	r3, r3, #28
 802f1c4:	b2da      	uxtb	r2, r3
 802f1c6:	7dfb      	ldrb	r3, [r7, #23]
 802f1c8:	005b      	lsls	r3, r3, #1
 802f1ca:	4619      	mov	r1, r3
 802f1cc:	68bb      	ldr	r3, [r7, #8]
 802f1ce:	440b      	add	r3, r1
 802f1d0:	3237      	adds	r2, #55	; 0x37
 802f1d2:	b2d2      	uxtb	r2, r2
 802f1d4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 802f1d6:	68fb      	ldr	r3, [r7, #12]
 802f1d8:	011b      	lsls	r3, r3, #4
 802f1da:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 802f1dc:	7dfb      	ldrb	r3, [r7, #23]
 802f1de:	005b      	lsls	r3, r3, #1
 802f1e0:	3301      	adds	r3, #1
 802f1e2:	68ba      	ldr	r2, [r7, #8]
 802f1e4:	4413      	add	r3, r2
 802f1e6:	2200      	movs	r2, #0
 802f1e8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 802f1ea:	7dfb      	ldrb	r3, [r7, #23]
 802f1ec:	3301      	adds	r3, #1
 802f1ee:	75fb      	strb	r3, [r7, #23]
 802f1f0:	7dfa      	ldrb	r2, [r7, #23]
 802f1f2:	79fb      	ldrb	r3, [r7, #7]
 802f1f4:	429a      	cmp	r2, r3
 802f1f6:	d3d3      	bcc.n	802f1a0 <IntToUnicode+0x18>
  }
}
 802f1f8:	bf00      	nop
 802f1fa:	bf00      	nop
 802f1fc:	371c      	adds	r7, #28
 802f1fe:	46bd      	mov	sp, r7
 802f200:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f204:	4770      	bx	lr
	...

0802f208 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 802f208:	b580      	push	{r7, lr}
 802f20a:	b08a      	sub	sp, #40	; 0x28
 802f20c:	af00      	add	r7, sp, #0
 802f20e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802f210:	f107 0314 	add.w	r3, r7, #20
 802f214:	2200      	movs	r2, #0
 802f216:	601a      	str	r2, [r3, #0]
 802f218:	605a      	str	r2, [r3, #4]
 802f21a:	609a      	str	r2, [r3, #8]
 802f21c:	60da      	str	r2, [r3, #12]
 802f21e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 802f220:	687b      	ldr	r3, [r7, #4]
 802f222:	681b      	ldr	r3, [r3, #0]
 802f224:	4a1c      	ldr	r2, [pc, #112]	; (802f298 <HAL_PCD_MspInit+0x90>)
 802f226:	4293      	cmp	r3, r2
 802f228:	d131      	bne.n	802f28e <HAL_PCD_MspInit+0x86>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 802f22a:	4b1c      	ldr	r3, [pc, #112]	; (802f29c <HAL_PCD_MspInit+0x94>)
 802f22c:	695b      	ldr	r3, [r3, #20]
 802f22e:	4a1b      	ldr	r2, [pc, #108]	; (802f29c <HAL_PCD_MspInit+0x94>)
 802f230:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 802f234:	6153      	str	r3, [r2, #20]
 802f236:	4b19      	ldr	r3, [pc, #100]	; (802f29c <HAL_PCD_MspInit+0x94>)
 802f238:	695b      	ldr	r3, [r3, #20]
 802f23a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802f23e:	613b      	str	r3, [r7, #16]
 802f240:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 802f242:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 802f246:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802f248:	2302      	movs	r3, #2
 802f24a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802f24c:	2300      	movs	r3, #0
 802f24e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 802f250:	2303      	movs	r3, #3
 802f252:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 802f254:	230e      	movs	r3, #14
 802f256:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 802f258:	f107 0314 	add.w	r3, r7, #20
 802f25c:	4619      	mov	r1, r3
 802f25e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 802f262:	f7da fee9 	bl	800a038 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 802f266:	4b0d      	ldr	r3, [pc, #52]	; (802f29c <HAL_PCD_MspInit+0x94>)
 802f268:	69db      	ldr	r3, [r3, #28]
 802f26a:	4a0c      	ldr	r2, [pc, #48]	; (802f29c <HAL_PCD_MspInit+0x94>)
 802f26c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 802f270:	61d3      	str	r3, [r2, #28]
 802f272:	4b0a      	ldr	r3, [pc, #40]	; (802f29c <HAL_PCD_MspInit+0x94>)
 802f274:	69db      	ldr	r3, [r3, #28]
 802f276:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 802f27a:	60fb      	str	r3, [r7, #12]
 802f27c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 802f27e:	2200      	movs	r2, #0
 802f280:	2100      	movs	r1, #0
 802f282:	2014      	movs	r0, #20
 802f284:	f7da fd38 	bl	8009cf8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 802f288:	2014      	movs	r0, #20
 802f28a:	f7da fd61 	bl	8009d50 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 802f28e:	bf00      	nop
 802f290:	3728      	adds	r7, #40	; 0x28
 802f292:	46bd      	mov	sp, r7
 802f294:	bd80      	pop	{r7, pc}
 802f296:	bf00      	nop
 802f298:	40005c00 	.word	0x40005c00
 802f29c:	40021000 	.word	0x40021000

0802f2a0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 802f2a0:	b580      	push	{r7, lr}
 802f2a2:	b082      	sub	sp, #8
 802f2a4:	af00      	add	r7, sp, #0
 802f2a6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 802f2a8:	687b      	ldr	r3, [r7, #4]
 802f2aa:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 802f2ae:	687b      	ldr	r3, [r7, #4]
 802f2b0:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 802f2b4:	4619      	mov	r1, r3
 802f2b6:	4610      	mov	r0, r2
 802f2b8:	f7e4 fc91 	bl	8013bde <USBD_LL_SetupStage>
}
 802f2bc:	bf00      	nop
 802f2be:	3708      	adds	r7, #8
 802f2c0:	46bd      	mov	sp, r7
 802f2c2:	bd80      	pop	{r7, pc}

0802f2c4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 802f2c4:	b580      	push	{r7, lr}
 802f2c6:	b082      	sub	sp, #8
 802f2c8:	af00      	add	r7, sp, #0
 802f2ca:	6078      	str	r0, [r7, #4]
 802f2cc:	460b      	mov	r3, r1
 802f2ce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 802f2d0:	687b      	ldr	r3, [r7, #4]
 802f2d2:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 802f2d6:	78fa      	ldrb	r2, [r7, #3]
 802f2d8:	6879      	ldr	r1, [r7, #4]
 802f2da:	4613      	mov	r3, r2
 802f2dc:	009b      	lsls	r3, r3, #2
 802f2de:	4413      	add	r3, r2
 802f2e0:	00db      	lsls	r3, r3, #3
 802f2e2:	440b      	add	r3, r1
 802f2e4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 802f2e8:	681a      	ldr	r2, [r3, #0]
 802f2ea:	78fb      	ldrb	r3, [r7, #3]
 802f2ec:	4619      	mov	r1, r3
 802f2ee:	f7e4 fcc3 	bl	8013c78 <USBD_LL_DataOutStage>
}
 802f2f2:	bf00      	nop
 802f2f4:	3708      	adds	r7, #8
 802f2f6:	46bd      	mov	sp, r7
 802f2f8:	bd80      	pop	{r7, pc}

0802f2fa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 802f2fa:	b580      	push	{r7, lr}
 802f2fc:	b082      	sub	sp, #8
 802f2fe:	af00      	add	r7, sp, #0
 802f300:	6078      	str	r0, [r7, #4]
 802f302:	460b      	mov	r3, r1
 802f304:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 802f306:	687b      	ldr	r3, [r7, #4]
 802f308:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 802f30c:	78fa      	ldrb	r2, [r7, #3]
 802f30e:	6879      	ldr	r1, [r7, #4]
 802f310:	4613      	mov	r3, r2
 802f312:	009b      	lsls	r3, r3, #2
 802f314:	4413      	add	r3, r2
 802f316:	00db      	lsls	r3, r3, #3
 802f318:	440b      	add	r3, r1
 802f31a:	333c      	adds	r3, #60	; 0x3c
 802f31c:	681a      	ldr	r2, [r3, #0]
 802f31e:	78fb      	ldrb	r3, [r7, #3]
 802f320:	4619      	mov	r1, r3
 802f322:	f7e4 fd1a 	bl	8013d5a <USBD_LL_DataInStage>
}
 802f326:	bf00      	nop
 802f328:	3708      	adds	r7, #8
 802f32a:	46bd      	mov	sp, r7
 802f32c:	bd80      	pop	{r7, pc}

0802f32e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 802f32e:	b580      	push	{r7, lr}
 802f330:	b082      	sub	sp, #8
 802f332:	af00      	add	r7, sp, #0
 802f334:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 802f336:	687b      	ldr	r3, [r7, #4]
 802f338:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 802f33c:	4618      	mov	r0, r3
 802f33e:	f7e4 fe2d 	bl	8013f9c <USBD_LL_SOF>
}
 802f342:	bf00      	nop
 802f344:	3708      	adds	r7, #8
 802f346:	46bd      	mov	sp, r7
 802f348:	bd80      	pop	{r7, pc}

0802f34a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 802f34a:	b580      	push	{r7, lr}
 802f34c:	b084      	sub	sp, #16
 802f34e:	af00      	add	r7, sp, #0
 802f350:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 802f352:	2301      	movs	r3, #1
 802f354:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 802f356:	687b      	ldr	r3, [r7, #4]
 802f358:	689b      	ldr	r3, [r3, #8]
 802f35a:	2b02      	cmp	r3, #2
 802f35c:	d001      	beq.n	802f362 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 802f35e:	f7d6 fc13 	bl	8005b88 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 802f362:	687b      	ldr	r3, [r7, #4]
 802f364:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 802f368:	7bfa      	ldrb	r2, [r7, #15]
 802f36a:	4611      	mov	r1, r2
 802f36c:	4618      	mov	r0, r3
 802f36e:	f7e4 fdda 	bl	8013f26 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 802f372:	687b      	ldr	r3, [r7, #4]
 802f374:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 802f378:	4618      	mov	r0, r3
 802f37a:	f7e4 fd93 	bl	8013ea4 <USBD_LL_Reset>
}
 802f37e:	bf00      	nop
 802f380:	3710      	adds	r7, #16
 802f382:	46bd      	mov	sp, r7
 802f384:	bd80      	pop	{r7, pc}
	...

0802f388 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 802f388:	b580      	push	{r7, lr}
 802f38a:	b082      	sub	sp, #8
 802f38c:	af00      	add	r7, sp, #0
 802f38e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 802f390:	687b      	ldr	r3, [r7, #4]
 802f392:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 802f396:	4618      	mov	r0, r3
 802f398:	f7e4 fdd5 	bl	8013f46 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 802f39c:	687b      	ldr	r3, [r7, #4]
 802f39e:	699b      	ldr	r3, [r3, #24]
 802f3a0:	2b00      	cmp	r3, #0
 802f3a2:	d005      	beq.n	802f3b0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 802f3a4:	4b04      	ldr	r3, [pc, #16]	; (802f3b8 <HAL_PCD_SuspendCallback+0x30>)
 802f3a6:	691b      	ldr	r3, [r3, #16]
 802f3a8:	4a03      	ldr	r2, [pc, #12]	; (802f3b8 <HAL_PCD_SuspendCallback+0x30>)
 802f3aa:	f043 0306 	orr.w	r3, r3, #6
 802f3ae:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 802f3b0:	bf00      	nop
 802f3b2:	3708      	adds	r7, #8
 802f3b4:	46bd      	mov	sp, r7
 802f3b6:	bd80      	pop	{r7, pc}
 802f3b8:	e000ed00 	.word	0xe000ed00

0802f3bc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 802f3bc:	b580      	push	{r7, lr}
 802f3be:	b082      	sub	sp, #8
 802f3c0:	af00      	add	r7, sp, #0
 802f3c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 802f3c4:	687b      	ldr	r3, [r7, #4]
 802f3c6:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 802f3ca:	4618      	mov	r0, r3
 802f3cc:	f7e4 fdd0 	bl	8013f70 <USBD_LL_Resume>
}
 802f3d0:	bf00      	nop
 802f3d2:	3708      	adds	r7, #8
 802f3d4:	46bd      	mov	sp, r7
 802f3d6:	bd80      	pop	{r7, pc}

0802f3d8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 802f3d8:	b580      	push	{r7, lr}
 802f3da:	b082      	sub	sp, #8
 802f3dc:	af00      	add	r7, sp, #0
 802f3de:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 802f3e0:	4a28      	ldr	r2, [pc, #160]	; (802f484 <USBD_LL_Init+0xac>)
 802f3e2:	687b      	ldr	r3, [r7, #4]
 802f3e4:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 802f3e8:	687b      	ldr	r3, [r7, #4]
 802f3ea:	4a26      	ldr	r2, [pc, #152]	; (802f484 <USBD_LL_Init+0xac>)
 802f3ec:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 802f3f0:	4b24      	ldr	r3, [pc, #144]	; (802f484 <USBD_LL_Init+0xac>)
 802f3f2:	4a25      	ldr	r2, [pc, #148]	; (802f488 <USBD_LL_Init+0xb0>)
 802f3f4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 802f3f6:	4b23      	ldr	r3, [pc, #140]	; (802f484 <USBD_LL_Init+0xac>)
 802f3f8:	2208      	movs	r2, #8
 802f3fa:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 802f3fc:	4b21      	ldr	r3, [pc, #132]	; (802f484 <USBD_LL_Init+0xac>)
 802f3fe:	2202      	movs	r2, #2
 802f400:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 802f402:	4b20      	ldr	r3, [pc, #128]	; (802f484 <USBD_LL_Init+0xac>)
 802f404:	2202      	movs	r2, #2
 802f406:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 802f408:	4b1e      	ldr	r3, [pc, #120]	; (802f484 <USBD_LL_Init+0xac>)
 802f40a:	2200      	movs	r2, #0
 802f40c:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 802f40e:	4b1d      	ldr	r3, [pc, #116]	; (802f484 <USBD_LL_Init+0xac>)
 802f410:	2200      	movs	r2, #0
 802f412:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 802f414:	481b      	ldr	r0, [pc, #108]	; (802f484 <USBD_LL_Init+0xac>)
 802f416:	f7db fa69 	bl	800a8ec <HAL_PCD_Init>
 802f41a:	4603      	mov	r3, r0
 802f41c:	2b00      	cmp	r3, #0
 802f41e:	d001      	beq.n	802f424 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 802f420:	f7d6 fbb2 	bl	8005b88 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 802f424:	687b      	ldr	r3, [r7, #4]
 802f426:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 802f42a:	2318      	movs	r3, #24
 802f42c:	2200      	movs	r2, #0
 802f42e:	2100      	movs	r1, #0
 802f430:	f7dc ff12 	bl	800c258 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 802f434:	687b      	ldr	r3, [r7, #4]
 802f436:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 802f43a:	2358      	movs	r3, #88	; 0x58
 802f43c:	2200      	movs	r2, #0
 802f43e:	2180      	movs	r1, #128	; 0x80
 802f440:	f7dc ff0a 	bl	800c258 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 802f444:	687b      	ldr	r3, [r7, #4]
 802f446:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 802f44a:	23c0      	movs	r3, #192	; 0xc0
 802f44c:	2200      	movs	r2, #0
 802f44e:	2181      	movs	r1, #129	; 0x81
 802f450:	f7dc ff02 	bl	800c258 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 802f454:	687b      	ldr	r3, [r7, #4]
 802f456:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 802f45a:	f44f 7388 	mov.w	r3, #272	; 0x110
 802f45e:	2200      	movs	r2, #0
 802f460:	2101      	movs	r1, #1
 802f462:	f7dc fef9 	bl	800c258 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 802f466:	687b      	ldr	r3, [r7, #4]
 802f468:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 802f46c:	f44f 7380 	mov.w	r3, #256	; 0x100
 802f470:	2200      	movs	r2, #0
 802f472:	2182      	movs	r1, #130	; 0x82
 802f474:	f7dc fef0 	bl	800c258 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 802f478:	2300      	movs	r3, #0
}
 802f47a:	4618      	mov	r0, r3
 802f47c:	3708      	adds	r7, #8
 802f47e:	46bd      	mov	sp, r7
 802f480:	bd80      	pop	{r7, pc}
 802f482:	bf00      	nop
 802f484:	20001fb4 	.word	0x20001fb4
 802f488:	40005c00 	.word	0x40005c00

0802f48c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 802f48c:	b580      	push	{r7, lr}
 802f48e:	b084      	sub	sp, #16
 802f490:	af00      	add	r7, sp, #0
 802f492:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802f494:	2300      	movs	r3, #0
 802f496:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 802f498:	2300      	movs	r3, #0
 802f49a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 802f49c:	687b      	ldr	r3, [r7, #4]
 802f49e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 802f4a2:	4618      	mov	r0, r3
 802f4a4:	f7db fb0e 	bl	800aac4 <HAL_PCD_Start>
 802f4a8:	4603      	mov	r3, r0
 802f4aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 802f4ac:	7bfb      	ldrb	r3, [r7, #15]
 802f4ae:	4618      	mov	r0, r3
 802f4b0:	f000 f954 	bl	802f75c <USBD_Get_USB_Status>
 802f4b4:	4603      	mov	r3, r0
 802f4b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802f4b8:	7bbb      	ldrb	r3, [r7, #14]
}
 802f4ba:	4618      	mov	r0, r3
 802f4bc:	3710      	adds	r7, #16
 802f4be:	46bd      	mov	sp, r7
 802f4c0:	bd80      	pop	{r7, pc}

0802f4c2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 802f4c2:	b580      	push	{r7, lr}
 802f4c4:	b084      	sub	sp, #16
 802f4c6:	af00      	add	r7, sp, #0
 802f4c8:	6078      	str	r0, [r7, #4]
 802f4ca:	4608      	mov	r0, r1
 802f4cc:	4611      	mov	r1, r2
 802f4ce:	461a      	mov	r2, r3
 802f4d0:	4603      	mov	r3, r0
 802f4d2:	70fb      	strb	r3, [r7, #3]
 802f4d4:	460b      	mov	r3, r1
 802f4d6:	70bb      	strb	r3, [r7, #2]
 802f4d8:	4613      	mov	r3, r2
 802f4da:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802f4dc:	2300      	movs	r3, #0
 802f4de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 802f4e0:	2300      	movs	r3, #0
 802f4e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 802f4e4:	687b      	ldr	r3, [r7, #4]
 802f4e6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 802f4ea:	78bb      	ldrb	r3, [r7, #2]
 802f4ec:	883a      	ldrh	r2, [r7, #0]
 802f4ee:	78f9      	ldrb	r1, [r7, #3]
 802f4f0:	f7db fc2a 	bl	800ad48 <HAL_PCD_EP_Open>
 802f4f4:	4603      	mov	r3, r0
 802f4f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 802f4f8:	7bfb      	ldrb	r3, [r7, #15]
 802f4fa:	4618      	mov	r0, r3
 802f4fc:	f000 f92e 	bl	802f75c <USBD_Get_USB_Status>
 802f500:	4603      	mov	r3, r0
 802f502:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802f504:	7bbb      	ldrb	r3, [r7, #14]
}
 802f506:	4618      	mov	r0, r3
 802f508:	3710      	adds	r7, #16
 802f50a:	46bd      	mov	sp, r7
 802f50c:	bd80      	pop	{r7, pc}

0802f50e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 802f50e:	b580      	push	{r7, lr}
 802f510:	b084      	sub	sp, #16
 802f512:	af00      	add	r7, sp, #0
 802f514:	6078      	str	r0, [r7, #4]
 802f516:	460b      	mov	r3, r1
 802f518:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802f51a:	2300      	movs	r3, #0
 802f51c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 802f51e:	2300      	movs	r3, #0
 802f520:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 802f522:	687b      	ldr	r3, [r7, #4]
 802f524:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 802f528:	78fa      	ldrb	r2, [r7, #3]
 802f52a:	4611      	mov	r1, r2
 802f52c:	4618      	mov	r0, r3
 802f52e:	f7db fc71 	bl	800ae14 <HAL_PCD_EP_Close>
 802f532:	4603      	mov	r3, r0
 802f534:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 802f536:	7bfb      	ldrb	r3, [r7, #15]
 802f538:	4618      	mov	r0, r3
 802f53a:	f000 f90f 	bl	802f75c <USBD_Get_USB_Status>
 802f53e:	4603      	mov	r3, r0
 802f540:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802f542:	7bbb      	ldrb	r3, [r7, #14]
}
 802f544:	4618      	mov	r0, r3
 802f546:	3710      	adds	r7, #16
 802f548:	46bd      	mov	sp, r7
 802f54a:	bd80      	pop	{r7, pc}

0802f54c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 802f54c:	b580      	push	{r7, lr}
 802f54e:	b084      	sub	sp, #16
 802f550:	af00      	add	r7, sp, #0
 802f552:	6078      	str	r0, [r7, #4]
 802f554:	460b      	mov	r3, r1
 802f556:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802f558:	2300      	movs	r3, #0
 802f55a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 802f55c:	2300      	movs	r3, #0
 802f55e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 802f560:	687b      	ldr	r3, [r7, #4]
 802f562:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 802f566:	78fa      	ldrb	r2, [r7, #3]
 802f568:	4611      	mov	r1, r2
 802f56a:	4618      	mov	r0, r3
 802f56c:	f7db fd32 	bl	800afd4 <HAL_PCD_EP_SetStall>
 802f570:	4603      	mov	r3, r0
 802f572:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 802f574:	7bfb      	ldrb	r3, [r7, #15]
 802f576:	4618      	mov	r0, r3
 802f578:	f000 f8f0 	bl	802f75c <USBD_Get_USB_Status>
 802f57c:	4603      	mov	r3, r0
 802f57e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802f580:	7bbb      	ldrb	r3, [r7, #14]
}
 802f582:	4618      	mov	r0, r3
 802f584:	3710      	adds	r7, #16
 802f586:	46bd      	mov	sp, r7
 802f588:	bd80      	pop	{r7, pc}

0802f58a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 802f58a:	b580      	push	{r7, lr}
 802f58c:	b084      	sub	sp, #16
 802f58e:	af00      	add	r7, sp, #0
 802f590:	6078      	str	r0, [r7, #4]
 802f592:	460b      	mov	r3, r1
 802f594:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802f596:	2300      	movs	r3, #0
 802f598:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 802f59a:	2300      	movs	r3, #0
 802f59c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 802f59e:	687b      	ldr	r3, [r7, #4]
 802f5a0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 802f5a4:	78fa      	ldrb	r2, [r7, #3]
 802f5a6:	4611      	mov	r1, r2
 802f5a8:	4618      	mov	r0, r3
 802f5aa:	f7db fd65 	bl	800b078 <HAL_PCD_EP_ClrStall>
 802f5ae:	4603      	mov	r3, r0
 802f5b0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 802f5b2:	7bfb      	ldrb	r3, [r7, #15]
 802f5b4:	4618      	mov	r0, r3
 802f5b6:	f000 f8d1 	bl	802f75c <USBD_Get_USB_Status>
 802f5ba:	4603      	mov	r3, r0
 802f5bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802f5be:	7bbb      	ldrb	r3, [r7, #14]
}
 802f5c0:	4618      	mov	r0, r3
 802f5c2:	3710      	adds	r7, #16
 802f5c4:	46bd      	mov	sp, r7
 802f5c6:	bd80      	pop	{r7, pc}

0802f5c8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 802f5c8:	b480      	push	{r7}
 802f5ca:	b085      	sub	sp, #20
 802f5cc:	af00      	add	r7, sp, #0
 802f5ce:	6078      	str	r0, [r7, #4]
 802f5d0:	460b      	mov	r3, r1
 802f5d2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 802f5d4:	687b      	ldr	r3, [r7, #4]
 802f5d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 802f5da:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 802f5dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 802f5e0:	2b00      	cmp	r3, #0
 802f5e2:	da0c      	bge.n	802f5fe <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 802f5e4:	78fb      	ldrb	r3, [r7, #3]
 802f5e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802f5ea:	68f9      	ldr	r1, [r7, #12]
 802f5ec:	1c5a      	adds	r2, r3, #1
 802f5ee:	4613      	mov	r3, r2
 802f5f0:	009b      	lsls	r3, r3, #2
 802f5f2:	4413      	add	r3, r2
 802f5f4:	00db      	lsls	r3, r3, #3
 802f5f6:	440b      	add	r3, r1
 802f5f8:	3302      	adds	r3, #2
 802f5fa:	781b      	ldrb	r3, [r3, #0]
 802f5fc:	e00b      	b.n	802f616 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 802f5fe:	78fb      	ldrb	r3, [r7, #3]
 802f600:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 802f604:	68f9      	ldr	r1, [r7, #12]
 802f606:	4613      	mov	r3, r2
 802f608:	009b      	lsls	r3, r3, #2
 802f60a:	4413      	add	r3, r2
 802f60c:	00db      	lsls	r3, r3, #3
 802f60e:	440b      	add	r3, r1
 802f610:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 802f614:	781b      	ldrb	r3, [r3, #0]
  }
}
 802f616:	4618      	mov	r0, r3
 802f618:	3714      	adds	r7, #20
 802f61a:	46bd      	mov	sp, r7
 802f61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f620:	4770      	bx	lr

0802f622 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 802f622:	b580      	push	{r7, lr}
 802f624:	b084      	sub	sp, #16
 802f626:	af00      	add	r7, sp, #0
 802f628:	6078      	str	r0, [r7, #4]
 802f62a:	460b      	mov	r3, r1
 802f62c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802f62e:	2300      	movs	r3, #0
 802f630:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 802f632:	2300      	movs	r3, #0
 802f634:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 802f636:	687b      	ldr	r3, [r7, #4]
 802f638:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 802f63c:	78fa      	ldrb	r2, [r7, #3]
 802f63e:	4611      	mov	r1, r2
 802f640:	4618      	mov	r0, r3
 802f642:	f7db fb5c 	bl	800acfe <HAL_PCD_SetAddress>
 802f646:	4603      	mov	r3, r0
 802f648:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 802f64a:	7bfb      	ldrb	r3, [r7, #15]
 802f64c:	4618      	mov	r0, r3
 802f64e:	f000 f885 	bl	802f75c <USBD_Get_USB_Status>
 802f652:	4603      	mov	r3, r0
 802f654:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802f656:	7bbb      	ldrb	r3, [r7, #14]
}
 802f658:	4618      	mov	r0, r3
 802f65a:	3710      	adds	r7, #16
 802f65c:	46bd      	mov	sp, r7
 802f65e:	bd80      	pop	{r7, pc}

0802f660 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 802f660:	b580      	push	{r7, lr}
 802f662:	b086      	sub	sp, #24
 802f664:	af00      	add	r7, sp, #0
 802f666:	60f8      	str	r0, [r7, #12]
 802f668:	607a      	str	r2, [r7, #4]
 802f66a:	461a      	mov	r2, r3
 802f66c:	460b      	mov	r3, r1
 802f66e:	72fb      	strb	r3, [r7, #11]
 802f670:	4613      	mov	r3, r2
 802f672:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802f674:	2300      	movs	r3, #0
 802f676:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 802f678:	2300      	movs	r3, #0
 802f67a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 802f67c:	68fb      	ldr	r3, [r7, #12]
 802f67e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 802f682:	893b      	ldrh	r3, [r7, #8]
 802f684:	7af9      	ldrb	r1, [r7, #11]
 802f686:	687a      	ldr	r2, [r7, #4]
 802f688:	f7db fc61 	bl	800af4e <HAL_PCD_EP_Transmit>
 802f68c:	4603      	mov	r3, r0
 802f68e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 802f690:	7dfb      	ldrb	r3, [r7, #23]
 802f692:	4618      	mov	r0, r3
 802f694:	f000 f862 	bl	802f75c <USBD_Get_USB_Status>
 802f698:	4603      	mov	r3, r0
 802f69a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 802f69c:	7dbb      	ldrb	r3, [r7, #22]
}
 802f69e:	4618      	mov	r0, r3
 802f6a0:	3718      	adds	r7, #24
 802f6a2:	46bd      	mov	sp, r7
 802f6a4:	bd80      	pop	{r7, pc}

0802f6a6 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 802f6a6:	b580      	push	{r7, lr}
 802f6a8:	b086      	sub	sp, #24
 802f6aa:	af00      	add	r7, sp, #0
 802f6ac:	60f8      	str	r0, [r7, #12]
 802f6ae:	607a      	str	r2, [r7, #4]
 802f6b0:	461a      	mov	r2, r3
 802f6b2:	460b      	mov	r3, r1
 802f6b4:	72fb      	strb	r3, [r7, #11]
 802f6b6:	4613      	mov	r3, r2
 802f6b8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802f6ba:	2300      	movs	r3, #0
 802f6bc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 802f6be:	2300      	movs	r3, #0
 802f6c0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 802f6c2:	68fb      	ldr	r3, [r7, #12]
 802f6c4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 802f6c8:	893b      	ldrh	r3, [r7, #8]
 802f6ca:	7af9      	ldrb	r1, [r7, #11]
 802f6cc:	687a      	ldr	r2, [r7, #4]
 802f6ce:	f7db fbe9 	bl	800aea4 <HAL_PCD_EP_Receive>
 802f6d2:	4603      	mov	r3, r0
 802f6d4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 802f6d6:	7dfb      	ldrb	r3, [r7, #23]
 802f6d8:	4618      	mov	r0, r3
 802f6da:	f000 f83f 	bl	802f75c <USBD_Get_USB_Status>
 802f6de:	4603      	mov	r3, r0
 802f6e0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 802f6e2:	7dbb      	ldrb	r3, [r7, #22]
}
 802f6e4:	4618      	mov	r0, r3
 802f6e6:	3718      	adds	r7, #24
 802f6e8:	46bd      	mov	sp, r7
 802f6ea:	bd80      	pop	{r7, pc}

0802f6ec <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 802f6ec:	b580      	push	{r7, lr}
 802f6ee:	b082      	sub	sp, #8
 802f6f0:	af00      	add	r7, sp, #0
 802f6f2:	6078      	str	r0, [r7, #4]
 802f6f4:	460b      	mov	r3, r1
 802f6f6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 802f6f8:	687b      	ldr	r3, [r7, #4]
 802f6fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 802f6fe:	78fa      	ldrb	r2, [r7, #3]
 802f700:	4611      	mov	r1, r2
 802f702:	4618      	mov	r0, r3
 802f704:	f7db fc0b 	bl	800af1e <HAL_PCD_EP_GetRxCount>
 802f708:	4603      	mov	r3, r0
}
 802f70a:	4618      	mov	r0, r3
 802f70c:	3708      	adds	r7, #8
 802f70e:	46bd      	mov	sp, r7
 802f710:	bd80      	pop	{r7, pc}
	...

0802f714 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 802f714:	b480      	push	{r7}
 802f716:	b083      	sub	sp, #12
 802f718:	af00      	add	r7, sp, #0
 802f71a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 802f71c:	4b03      	ldr	r3, [pc, #12]	; (802f72c <USBD_static_malloc+0x18>)
}
 802f71e:	4618      	mov	r0, r3
 802f720:	370c      	adds	r7, #12
 802f722:	46bd      	mov	sp, r7
 802f724:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f728:	4770      	bx	lr
 802f72a:	bf00      	nop
 802f72c:	200022a0 	.word	0x200022a0

0802f730 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 802f730:	b480      	push	{r7}
 802f732:	b083      	sub	sp, #12
 802f734:	af00      	add	r7, sp, #0
 802f736:	6078      	str	r0, [r7, #4]

}
 802f738:	bf00      	nop
 802f73a:	370c      	adds	r7, #12
 802f73c:	46bd      	mov	sp, r7
 802f73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f742:	4770      	bx	lr

0802f744 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 802f744:	b480      	push	{r7}
 802f746:	b083      	sub	sp, #12
 802f748:	af00      	add	r7, sp, #0
 802f74a:	6078      	str	r0, [r7, #4]
 802f74c:	460b      	mov	r3, r1
 802f74e:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 802f750:	bf00      	nop
 802f752:	370c      	adds	r7, #12
 802f754:	46bd      	mov	sp, r7
 802f756:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f75a:	4770      	bx	lr

0802f75c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 802f75c:	b480      	push	{r7}
 802f75e:	b085      	sub	sp, #20
 802f760:	af00      	add	r7, sp, #0
 802f762:	4603      	mov	r3, r0
 802f764:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 802f766:	2300      	movs	r3, #0
 802f768:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 802f76a:	79fb      	ldrb	r3, [r7, #7]
 802f76c:	2b03      	cmp	r3, #3
 802f76e:	d817      	bhi.n	802f7a0 <USBD_Get_USB_Status+0x44>
 802f770:	a201      	add	r2, pc, #4	; (adr r2, 802f778 <USBD_Get_USB_Status+0x1c>)
 802f772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802f776:	bf00      	nop
 802f778:	0802f789 	.word	0x0802f789
 802f77c:	0802f78f 	.word	0x0802f78f
 802f780:	0802f795 	.word	0x0802f795
 802f784:	0802f79b 	.word	0x0802f79b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 802f788:	2300      	movs	r3, #0
 802f78a:	73fb      	strb	r3, [r7, #15]
    break;
 802f78c:	e00b      	b.n	802f7a6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 802f78e:	2302      	movs	r3, #2
 802f790:	73fb      	strb	r3, [r7, #15]
    break;
 802f792:	e008      	b.n	802f7a6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 802f794:	2301      	movs	r3, #1
 802f796:	73fb      	strb	r3, [r7, #15]
    break;
 802f798:	e005      	b.n	802f7a6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 802f79a:	2302      	movs	r3, #2
 802f79c:	73fb      	strb	r3, [r7, #15]
    break;
 802f79e:	e002      	b.n	802f7a6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 802f7a0:	2302      	movs	r3, #2
 802f7a2:	73fb      	strb	r3, [r7, #15]
    break;
 802f7a4:	bf00      	nop
  }
  return usb_status;
 802f7a6:	7bfb      	ldrb	r3, [r7, #15]
}
 802f7a8:	4618      	mov	r0, r3
 802f7aa:	3714      	adds	r7, #20
 802f7ac:	46bd      	mov	sp, r7
 802f7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f7b2:	4770      	bx	lr

0802f7b4 <_ZdlPvj>:
 802f7b4:	f000 b8cd 	b.w	802f952 <_ZdlPv>

0802f7b8 <_ZdaPv>:
 802f7b8:	f000 b8cb 	b.w	802f952 <_ZdlPv>

0802f7bc <_Znwj>:
 802f7bc:	2801      	cmp	r0, #1
 802f7be:	bf38      	it	cc
 802f7c0:	2001      	movcc	r0, #1
 802f7c2:	b510      	push	{r4, lr}
 802f7c4:	4604      	mov	r4, r0
 802f7c6:	4620      	mov	r0, r4
 802f7c8:	f002 fcb6 	bl	8032138 <malloc>
 802f7cc:	b930      	cbnz	r0, 802f7dc <_Znwj+0x20>
 802f7ce:	f000 f8c3 	bl	802f958 <_ZSt15get_new_handlerv>
 802f7d2:	b908      	cbnz	r0, 802f7d8 <_Znwj+0x1c>
 802f7d4:	f002 fc42 	bl	803205c <abort>
 802f7d8:	4780      	blx	r0
 802f7da:	e7f4      	b.n	802f7c6 <_Znwj+0xa>
 802f7dc:	bd10      	pop	{r4, pc}

0802f7de <_Znaj>:
 802f7de:	f7ff bfed 	b.w	802f7bc <_Znwj>

0802f7e2 <_ZSt17__throw_bad_allocv>:
 802f7e2:	b508      	push	{r3, lr}
 802f7e4:	f002 fc3a 	bl	803205c <abort>

0802f7e8 <_ZSt19__throw_logic_errorPKc>:
 802f7e8:	b508      	push	{r3, lr}
 802f7ea:	f002 fc37 	bl	803205c <abort>

0802f7ee <_ZSt20__throw_length_errorPKc>:
 802f7ee:	b508      	push	{r3, lr}
 802f7f0:	f002 fc34 	bl	803205c <abort>

0802f7f4 <_ZSt24__throw_out_of_range_fmtPKcz>:
 802f7f4:	b40f      	push	{r0, r1, r2, r3}
 802f7f6:	b580      	push	{r7, lr}
 802f7f8:	b084      	sub	sp, #16
 802f7fa:	af00      	add	r7, sp, #0
 802f7fc:	f107 0418 	add.w	r4, r7, #24
 802f800:	f854 2b04 	ldr.w	r2, [r4], #4
 802f804:	607a      	str	r2, [r7, #4]
 802f806:	4610      	mov	r0, r2
 802f808:	f7d0 fd3c 	bl	8000284 <strlen>
 802f80c:	f200 2307 	addw	r3, r0, #519	; 0x207
 802f810:	f023 0307 	bic.w	r3, r3, #7
 802f814:	ebad 0d03 	sub.w	sp, sp, r3
 802f818:	f500 7100 	add.w	r1, r0, #512	; 0x200
 802f81c:	687a      	ldr	r2, [r7, #4]
 802f81e:	60fc      	str	r4, [r7, #12]
 802f820:	4623      	mov	r3, r4
 802f822:	4668      	mov	r0, sp
 802f824:	f000 f854 	bl	802f8d0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
 802f828:	f002 fc18 	bl	803205c <abort>

0802f82c <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
 802f82c:	b580      	push	{r7, lr}
 802f82e:	b09c      	sub	sp, #112	; 0x70
 802f830:	4606      	mov	r6, r0
 802f832:	af00      	add	r7, sp, #0
 802f834:	460c      	mov	r4, r1
 802f836:	1ba4      	subs	r4, r4, r6
 802f838:	490e      	ldr	r1, [pc, #56]	; (802f874 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
 802f83a:	2269      	movs	r2, #105	; 0x69
 802f83c:	1d38      	adds	r0, r7, #4
 802f83e:	f002 fc8b 	bl	8032158 <memcpy>
 802f842:	f104 0370 	add.w	r3, r4, #112	; 0x70
 802f846:	f023 0307 	bic.w	r3, r3, #7
 802f84a:	ebad 0d03 	sub.w	sp, sp, r3
 802f84e:	466d      	mov	r5, sp
 802f850:	2268      	movs	r2, #104	; 0x68
 802f852:	1d39      	adds	r1, r7, #4
 802f854:	4628      	mov	r0, r5
 802f856:	f002 fc7f 	bl	8032158 <memcpy>
 802f85a:	4622      	mov	r2, r4
 802f85c:	4631      	mov	r1, r6
 802f85e:	f105 0068 	add.w	r0, r5, #104	; 0x68
 802f862:	442c      	add	r4, r5
 802f864:	f002 fc78 	bl	8032158 <memcpy>
 802f868:	2300      	movs	r3, #0
 802f86a:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 802f86e:	4628      	mov	r0, r5
 802f870:	f7ff ffba 	bl	802f7e8 <_ZSt19__throw_logic_errorPKc>
 802f874:	08037ee8 	.word	0x08037ee8

0802f878 <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
 802f878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802f87c:	af00      	add	r7, sp, #0
 802f87e:	b084      	sub	sp, #16
 802f880:	466d      	mov	r5, sp
 802f882:	f105 040c 	add.w	r4, r5, #12
 802f886:	f8df 8044 	ldr.w	r8, [pc, #68]	; 802f8cc <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x54>
 802f88a:	4623      	mov	r3, r4
 802f88c:	f04f 0c0a 	mov.w	ip, #10
 802f890:	fbb2 f6fc 	udiv	r6, r2, ip
 802f894:	fb0c 2e16 	mls	lr, ip, r6, r2
 802f898:	f818 e00e 	ldrb.w	lr, [r8, lr]
 802f89c:	f803 ed01 	strb.w	lr, [r3, #-1]!
 802f8a0:	4696      	mov	lr, r2
 802f8a2:	f1be 0f09 	cmp.w	lr, #9
 802f8a6:	4632      	mov	r2, r6
 802f8a8:	d8f2      	bhi.n	802f890 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x18>
 802f8aa:	1ae4      	subs	r4, r4, r3
 802f8ac:	428c      	cmp	r4, r1
 802f8ae:	d809      	bhi.n	802f8c4 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
 802f8b0:	f1c4 030c 	rsb	r3, r4, #12
 802f8b4:	4622      	mov	r2, r4
 802f8b6:	18e9      	adds	r1, r5, r3
 802f8b8:	f002 fc4e 	bl	8032158 <memcpy>
 802f8bc:	4620      	mov	r0, r4
 802f8be:	46bd      	mov	sp, r7
 802f8c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802f8c4:	f04f 34ff 	mov.w	r4, #4294967295
 802f8c8:	e7f8      	b.n	802f8bc <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
 802f8ca:	bf00      	nop
 802f8cc:	08037f51 	.word	0x08037f51

0802f8d0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
 802f8d0:	3901      	subs	r1, #1
 802f8d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802f8d6:	4607      	mov	r7, r0
 802f8d8:	4615      	mov	r5, r2
 802f8da:	eb00 0801 	add.w	r8, r0, r1
 802f8de:	4604      	mov	r4, r0
 802f8e0:	782a      	ldrb	r2, [r5, #0]
 802f8e2:	b392      	cbz	r2, 802f94a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7a>
 802f8e4:	4544      	cmp	r4, r8
 802f8e6:	d22a      	bcs.n	802f93e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 802f8e8:	2a25      	cmp	r2, #37	; 0x25
 802f8ea:	d107      	bne.n	802f8fc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 802f8ec:	786a      	ldrb	r2, [r5, #1]
 802f8ee:	2a73      	cmp	r2, #115	; 0x73
 802f8f0:	d009      	beq.n	802f906 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
 802f8f2:	2a7a      	cmp	r2, #122	; 0x7a
 802f8f4:	d012      	beq.n	802f91c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4c>
 802f8f6:	2a25      	cmp	r2, #37	; 0x25
 802f8f8:	d100      	bne.n	802f8fc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 802f8fa:	3501      	adds	r5, #1
 802f8fc:	f815 2b01 	ldrb.w	r2, [r5], #1
 802f900:	f804 2b01 	strb.w	r2, [r4], #1
 802f904:	e7ec      	b.n	802f8e0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 802f906:	f853 2b04 	ldr.w	r2, [r3], #4
 802f90a:	3a01      	subs	r2, #1
 802f90c:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 802f910:	b1c9      	cbz	r1, 802f946 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
 802f912:	4544      	cmp	r4, r8
 802f914:	d013      	beq.n	802f93e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 802f916:	f804 1b01 	strb.w	r1, [r4], #1
 802f91a:	e7f7      	b.n	802f90c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3c>
 802f91c:	78aa      	ldrb	r2, [r5, #2]
 802f91e:	2a75      	cmp	r2, #117	; 0x75
 802f920:	d1ec      	bne.n	802f8fc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 802f922:	461e      	mov	r6, r3
 802f924:	eba8 0104 	sub.w	r1, r8, r4
 802f928:	f856 2b04 	ldr.w	r2, [r6], #4
 802f92c:	4620      	mov	r0, r4
 802f92e:	f7ff ffa3 	bl	802f878 <_ZN9__gnu_cxx15__concat_size_tEPcjj>
 802f932:	2800      	cmp	r0, #0
 802f934:	dd03      	ble.n	802f93e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 802f936:	4404      	add	r4, r0
 802f938:	3503      	adds	r5, #3
 802f93a:	4633      	mov	r3, r6
 802f93c:	e7d0      	b.n	802f8e0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 802f93e:	4621      	mov	r1, r4
 802f940:	4638      	mov	r0, r7
 802f942:	f7ff ff73 	bl	802f82c <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
 802f946:	3502      	adds	r5, #2
 802f948:	e7ca      	b.n	802f8e0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 802f94a:	7022      	strb	r2, [r4, #0]
 802f94c:	1be0      	subs	r0, r4, r7
 802f94e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0802f952 <_ZdlPv>:
 802f952:	f002 bbf9 	b.w	8032148 <free>
	...

0802f958 <_ZSt15get_new_handlerv>:
 802f958:	4b02      	ldr	r3, [pc, #8]	; (802f964 <_ZSt15get_new_handlerv+0xc>)
 802f95a:	6818      	ldr	r0, [r3, #0]
 802f95c:	f3bf 8f5b 	dmb	ish
 802f960:	4770      	bx	lr
 802f962:	bf00      	nop
 802f964:	200024c0 	.word	0x200024c0

0802f968 <cos>:
 802f968:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802f96a:	ec53 2b10 	vmov	r2, r3, d0
 802f96e:	4826      	ldr	r0, [pc, #152]	; (802fa08 <cos+0xa0>)
 802f970:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 802f974:	4281      	cmp	r1, r0
 802f976:	dc06      	bgt.n	802f986 <cos+0x1e>
 802f978:	ed9f 1b21 	vldr	d1, [pc, #132]	; 802fa00 <cos+0x98>
 802f97c:	b005      	add	sp, #20
 802f97e:	f85d eb04 	ldr.w	lr, [sp], #4
 802f982:	f001 bd95 	b.w	80314b0 <__kernel_cos>
 802f986:	4821      	ldr	r0, [pc, #132]	; (802fa0c <cos+0xa4>)
 802f988:	4281      	cmp	r1, r0
 802f98a:	dd09      	ble.n	802f9a0 <cos+0x38>
 802f98c:	ee10 0a10 	vmov	r0, s0
 802f990:	4619      	mov	r1, r3
 802f992:	f7d0 fc83 	bl	800029c <__aeabi_dsub>
 802f996:	ec41 0b10 	vmov	d0, r0, r1
 802f99a:	b005      	add	sp, #20
 802f99c:	f85d fb04 	ldr.w	pc, [sp], #4
 802f9a0:	4668      	mov	r0, sp
 802f9a2:	f001 f8ad 	bl	8030b00 <__ieee754_rem_pio2>
 802f9a6:	f000 0003 	and.w	r0, r0, #3
 802f9aa:	2801      	cmp	r0, #1
 802f9ac:	d00b      	beq.n	802f9c6 <cos+0x5e>
 802f9ae:	2802      	cmp	r0, #2
 802f9b0:	d016      	beq.n	802f9e0 <cos+0x78>
 802f9b2:	b9e0      	cbnz	r0, 802f9ee <cos+0x86>
 802f9b4:	ed9d 1b02 	vldr	d1, [sp, #8]
 802f9b8:	ed9d 0b00 	vldr	d0, [sp]
 802f9bc:	f001 fd78 	bl	80314b0 <__kernel_cos>
 802f9c0:	ec51 0b10 	vmov	r0, r1, d0
 802f9c4:	e7e7      	b.n	802f996 <cos+0x2e>
 802f9c6:	ed9d 1b02 	vldr	d1, [sp, #8]
 802f9ca:	ed9d 0b00 	vldr	d0, [sp]
 802f9ce:	f002 f987 	bl	8031ce0 <__kernel_sin>
 802f9d2:	ec53 2b10 	vmov	r2, r3, d0
 802f9d6:	ee10 0a10 	vmov	r0, s0
 802f9da:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 802f9de:	e7da      	b.n	802f996 <cos+0x2e>
 802f9e0:	ed9d 1b02 	vldr	d1, [sp, #8]
 802f9e4:	ed9d 0b00 	vldr	d0, [sp]
 802f9e8:	f001 fd62 	bl	80314b0 <__kernel_cos>
 802f9ec:	e7f1      	b.n	802f9d2 <cos+0x6a>
 802f9ee:	ed9d 1b02 	vldr	d1, [sp, #8]
 802f9f2:	ed9d 0b00 	vldr	d0, [sp]
 802f9f6:	2001      	movs	r0, #1
 802f9f8:	f002 f972 	bl	8031ce0 <__kernel_sin>
 802f9fc:	e7e0      	b.n	802f9c0 <cos+0x58>
 802f9fe:	bf00      	nop
	...
 802fa08:	3fe921fb 	.word	0x3fe921fb
 802fa0c:	7fefffff 	.word	0x7fefffff

0802fa10 <floor>:
 802fa10:	ec51 0b10 	vmov	r0, r1, d0
 802fa14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802fa18:	f3c1 570a 	ubfx	r7, r1, #20, #11
 802fa1c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 802fa20:	2e13      	cmp	r6, #19
 802fa22:	ee10 5a10 	vmov	r5, s0
 802fa26:	ee10 8a10 	vmov	r8, s0
 802fa2a:	460c      	mov	r4, r1
 802fa2c:	dc32      	bgt.n	802fa94 <floor+0x84>
 802fa2e:	2e00      	cmp	r6, #0
 802fa30:	da14      	bge.n	802fa5c <floor+0x4c>
 802fa32:	a333      	add	r3, pc, #204	; (adr r3, 802fb00 <floor+0xf0>)
 802fa34:	e9d3 2300 	ldrd	r2, r3, [r3]
 802fa38:	f7d0 fc32 	bl	80002a0 <__adddf3>
 802fa3c:	2200      	movs	r2, #0
 802fa3e:	2300      	movs	r3, #0
 802fa40:	f7d1 f874 	bl	8000b2c <__aeabi_dcmpgt>
 802fa44:	b138      	cbz	r0, 802fa56 <floor+0x46>
 802fa46:	2c00      	cmp	r4, #0
 802fa48:	da57      	bge.n	802fafa <floor+0xea>
 802fa4a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 802fa4e:	431d      	orrs	r5, r3
 802fa50:	d001      	beq.n	802fa56 <floor+0x46>
 802fa52:	4c2d      	ldr	r4, [pc, #180]	; (802fb08 <floor+0xf8>)
 802fa54:	2500      	movs	r5, #0
 802fa56:	4621      	mov	r1, r4
 802fa58:	4628      	mov	r0, r5
 802fa5a:	e025      	b.n	802faa8 <floor+0x98>
 802fa5c:	4f2b      	ldr	r7, [pc, #172]	; (802fb0c <floor+0xfc>)
 802fa5e:	4137      	asrs	r7, r6
 802fa60:	ea01 0307 	and.w	r3, r1, r7
 802fa64:	4303      	orrs	r3, r0
 802fa66:	d01f      	beq.n	802faa8 <floor+0x98>
 802fa68:	a325      	add	r3, pc, #148	; (adr r3, 802fb00 <floor+0xf0>)
 802fa6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802fa6e:	f7d0 fc17 	bl	80002a0 <__adddf3>
 802fa72:	2200      	movs	r2, #0
 802fa74:	2300      	movs	r3, #0
 802fa76:	f7d1 f859 	bl	8000b2c <__aeabi_dcmpgt>
 802fa7a:	2800      	cmp	r0, #0
 802fa7c:	d0eb      	beq.n	802fa56 <floor+0x46>
 802fa7e:	2c00      	cmp	r4, #0
 802fa80:	bfbe      	ittt	lt
 802fa82:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 802fa86:	fa43 f606 	asrlt.w	r6, r3, r6
 802fa8a:	19a4      	addlt	r4, r4, r6
 802fa8c:	ea24 0407 	bic.w	r4, r4, r7
 802fa90:	2500      	movs	r5, #0
 802fa92:	e7e0      	b.n	802fa56 <floor+0x46>
 802fa94:	2e33      	cmp	r6, #51	; 0x33
 802fa96:	dd0b      	ble.n	802fab0 <floor+0xa0>
 802fa98:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 802fa9c:	d104      	bne.n	802faa8 <floor+0x98>
 802fa9e:	ee10 2a10 	vmov	r2, s0
 802faa2:	460b      	mov	r3, r1
 802faa4:	f7d0 fbfc 	bl	80002a0 <__adddf3>
 802faa8:	ec41 0b10 	vmov	d0, r0, r1
 802faac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802fab0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 802fab4:	f04f 33ff 	mov.w	r3, #4294967295
 802fab8:	fa23 f707 	lsr.w	r7, r3, r7
 802fabc:	4207      	tst	r7, r0
 802fabe:	d0f3      	beq.n	802faa8 <floor+0x98>
 802fac0:	a30f      	add	r3, pc, #60	; (adr r3, 802fb00 <floor+0xf0>)
 802fac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 802fac6:	f7d0 fbeb 	bl	80002a0 <__adddf3>
 802faca:	2200      	movs	r2, #0
 802facc:	2300      	movs	r3, #0
 802face:	f7d1 f82d 	bl	8000b2c <__aeabi_dcmpgt>
 802fad2:	2800      	cmp	r0, #0
 802fad4:	d0bf      	beq.n	802fa56 <floor+0x46>
 802fad6:	2c00      	cmp	r4, #0
 802fad8:	da02      	bge.n	802fae0 <floor+0xd0>
 802fada:	2e14      	cmp	r6, #20
 802fadc:	d103      	bne.n	802fae6 <floor+0xd6>
 802fade:	3401      	adds	r4, #1
 802fae0:	ea25 0507 	bic.w	r5, r5, r7
 802fae4:	e7b7      	b.n	802fa56 <floor+0x46>
 802fae6:	2301      	movs	r3, #1
 802fae8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 802faec:	fa03 f606 	lsl.w	r6, r3, r6
 802faf0:	4435      	add	r5, r6
 802faf2:	4545      	cmp	r5, r8
 802faf4:	bf38      	it	cc
 802faf6:	18e4      	addcc	r4, r4, r3
 802faf8:	e7f2      	b.n	802fae0 <floor+0xd0>
 802fafa:	2500      	movs	r5, #0
 802fafc:	462c      	mov	r4, r5
 802fafe:	e7aa      	b.n	802fa56 <floor+0x46>
 802fb00:	8800759c 	.word	0x8800759c
 802fb04:	7e37e43c 	.word	0x7e37e43c
 802fb08:	bff00000 	.word	0xbff00000
 802fb0c:	000fffff 	.word	0x000fffff

0802fb10 <frexp>:
 802fb10:	b570      	push	{r4, r5, r6, lr}
 802fb12:	2100      	movs	r1, #0
 802fb14:	ec55 4b10 	vmov	r4, r5, d0
 802fb18:	6001      	str	r1, [r0, #0]
 802fb1a:	4916      	ldr	r1, [pc, #88]	; (802fb74 <frexp+0x64>)
 802fb1c:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 802fb20:	428a      	cmp	r2, r1
 802fb22:	4606      	mov	r6, r0
 802fb24:	462b      	mov	r3, r5
 802fb26:	dc22      	bgt.n	802fb6e <frexp+0x5e>
 802fb28:	ee10 1a10 	vmov	r1, s0
 802fb2c:	4311      	orrs	r1, r2
 802fb2e:	d01e      	beq.n	802fb6e <frexp+0x5e>
 802fb30:	4911      	ldr	r1, [pc, #68]	; (802fb78 <frexp+0x68>)
 802fb32:	4029      	ands	r1, r5
 802fb34:	b969      	cbnz	r1, 802fb52 <frexp+0x42>
 802fb36:	4b11      	ldr	r3, [pc, #68]	; (802fb7c <frexp+0x6c>)
 802fb38:	2200      	movs	r2, #0
 802fb3a:	ee10 0a10 	vmov	r0, s0
 802fb3e:	4629      	mov	r1, r5
 802fb40:	f7d0 fd64 	bl	800060c <__aeabi_dmul>
 802fb44:	460b      	mov	r3, r1
 802fb46:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 802fb4a:	f06f 0135 	mvn.w	r1, #53	; 0x35
 802fb4e:	4604      	mov	r4, r0
 802fb50:	6031      	str	r1, [r6, #0]
 802fb52:	6831      	ldr	r1, [r6, #0]
 802fb54:	1512      	asrs	r2, r2, #20
 802fb56:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 802fb5a:	f2a2 32fe 	subw	r2, r2, #1022	; 0x3fe
 802fb5e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 802fb62:	440a      	add	r2, r1
 802fb64:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 802fb68:	6032      	str	r2, [r6, #0]
 802fb6a:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 802fb6e:	ec45 4b10 	vmov	d0, r4, r5
 802fb72:	bd70      	pop	{r4, r5, r6, pc}
 802fb74:	7fefffff 	.word	0x7fefffff
 802fb78:	7ff00000 	.word	0x7ff00000
 802fb7c:	43500000 	.word	0x43500000

0802fb80 <round>:
 802fb80:	ec51 0b10 	vmov	r0, r1, d0
 802fb84:	b570      	push	{r4, r5, r6, lr}
 802fb86:	f3c1 550a 	ubfx	r5, r1, #20, #11
 802fb8a:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 802fb8e:	2c13      	cmp	r4, #19
 802fb90:	ee10 2a10 	vmov	r2, s0
 802fb94:	460b      	mov	r3, r1
 802fb96:	dc19      	bgt.n	802fbcc <round+0x4c>
 802fb98:	2c00      	cmp	r4, #0
 802fb9a:	da09      	bge.n	802fbb0 <round+0x30>
 802fb9c:	3401      	adds	r4, #1
 802fb9e:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 802fba2:	d103      	bne.n	802fbac <round+0x2c>
 802fba4:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 802fba8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 802fbac:	2200      	movs	r2, #0
 802fbae:	e028      	b.n	802fc02 <round+0x82>
 802fbb0:	4d15      	ldr	r5, [pc, #84]	; (802fc08 <round+0x88>)
 802fbb2:	4125      	asrs	r5, r4
 802fbb4:	ea01 0605 	and.w	r6, r1, r5
 802fbb8:	4332      	orrs	r2, r6
 802fbba:	d00e      	beq.n	802fbda <round+0x5a>
 802fbbc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 802fbc0:	fa42 f404 	asr.w	r4, r2, r4
 802fbc4:	4423      	add	r3, r4
 802fbc6:	ea23 0305 	bic.w	r3, r3, r5
 802fbca:	e7ef      	b.n	802fbac <round+0x2c>
 802fbcc:	2c33      	cmp	r4, #51	; 0x33
 802fbce:	dd07      	ble.n	802fbe0 <round+0x60>
 802fbd0:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 802fbd4:	d101      	bne.n	802fbda <round+0x5a>
 802fbd6:	f7d0 fb63 	bl	80002a0 <__adddf3>
 802fbda:	ec41 0b10 	vmov	d0, r0, r1
 802fbde:	bd70      	pop	{r4, r5, r6, pc}
 802fbe0:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 802fbe4:	f04f 35ff 	mov.w	r5, #4294967295
 802fbe8:	40f5      	lsrs	r5, r6
 802fbea:	4228      	tst	r0, r5
 802fbec:	d0f5      	beq.n	802fbda <round+0x5a>
 802fbee:	2101      	movs	r1, #1
 802fbf0:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 802fbf4:	fa01 f404 	lsl.w	r4, r1, r4
 802fbf8:	1912      	adds	r2, r2, r4
 802fbfa:	bf28      	it	cs
 802fbfc:	185b      	addcs	r3, r3, r1
 802fbfe:	ea22 0205 	bic.w	r2, r2, r5
 802fc02:	4619      	mov	r1, r3
 802fc04:	4610      	mov	r0, r2
 802fc06:	e7e8      	b.n	802fbda <round+0x5a>
 802fc08:	000fffff 	.word	0x000fffff
 802fc0c:	00000000 	.word	0x00000000

0802fc10 <sin>:
 802fc10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802fc12:	ec53 2b10 	vmov	r2, r3, d0
 802fc16:	4828      	ldr	r0, [pc, #160]	; (802fcb8 <sin+0xa8>)
 802fc18:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 802fc1c:	4281      	cmp	r1, r0
 802fc1e:	dc07      	bgt.n	802fc30 <sin+0x20>
 802fc20:	ed9f 1b23 	vldr	d1, [pc, #140]	; 802fcb0 <sin+0xa0>
 802fc24:	2000      	movs	r0, #0
 802fc26:	b005      	add	sp, #20
 802fc28:	f85d eb04 	ldr.w	lr, [sp], #4
 802fc2c:	f002 b858 	b.w	8031ce0 <__kernel_sin>
 802fc30:	4822      	ldr	r0, [pc, #136]	; (802fcbc <sin+0xac>)
 802fc32:	4281      	cmp	r1, r0
 802fc34:	dd09      	ble.n	802fc4a <sin+0x3a>
 802fc36:	ee10 0a10 	vmov	r0, s0
 802fc3a:	4619      	mov	r1, r3
 802fc3c:	f7d0 fb2e 	bl	800029c <__aeabi_dsub>
 802fc40:	ec41 0b10 	vmov	d0, r0, r1
 802fc44:	b005      	add	sp, #20
 802fc46:	f85d fb04 	ldr.w	pc, [sp], #4
 802fc4a:	4668      	mov	r0, sp
 802fc4c:	f000 ff58 	bl	8030b00 <__ieee754_rem_pio2>
 802fc50:	f000 0003 	and.w	r0, r0, #3
 802fc54:	2801      	cmp	r0, #1
 802fc56:	d00c      	beq.n	802fc72 <sin+0x62>
 802fc58:	2802      	cmp	r0, #2
 802fc5a:	d011      	beq.n	802fc80 <sin+0x70>
 802fc5c:	b9f0      	cbnz	r0, 802fc9c <sin+0x8c>
 802fc5e:	ed9d 1b02 	vldr	d1, [sp, #8]
 802fc62:	ed9d 0b00 	vldr	d0, [sp]
 802fc66:	2001      	movs	r0, #1
 802fc68:	f002 f83a 	bl	8031ce0 <__kernel_sin>
 802fc6c:	ec51 0b10 	vmov	r0, r1, d0
 802fc70:	e7e6      	b.n	802fc40 <sin+0x30>
 802fc72:	ed9d 1b02 	vldr	d1, [sp, #8]
 802fc76:	ed9d 0b00 	vldr	d0, [sp]
 802fc7a:	f001 fc19 	bl	80314b0 <__kernel_cos>
 802fc7e:	e7f5      	b.n	802fc6c <sin+0x5c>
 802fc80:	ed9d 1b02 	vldr	d1, [sp, #8]
 802fc84:	ed9d 0b00 	vldr	d0, [sp]
 802fc88:	2001      	movs	r0, #1
 802fc8a:	f002 f829 	bl	8031ce0 <__kernel_sin>
 802fc8e:	ec53 2b10 	vmov	r2, r3, d0
 802fc92:	ee10 0a10 	vmov	r0, s0
 802fc96:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 802fc9a:	e7d1      	b.n	802fc40 <sin+0x30>
 802fc9c:	ed9d 1b02 	vldr	d1, [sp, #8]
 802fca0:	ed9d 0b00 	vldr	d0, [sp]
 802fca4:	f001 fc04 	bl	80314b0 <__kernel_cos>
 802fca8:	e7f1      	b.n	802fc8e <sin+0x7e>
 802fcaa:	bf00      	nop
 802fcac:	f3af 8000 	nop.w
	...
 802fcb8:	3fe921fb 	.word	0x3fe921fb
 802fcbc:	7fefffff 	.word	0x7fefffff

0802fcc0 <ceilf>:
 802fcc0:	ee10 3a10 	vmov	r3, s0
 802fcc4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 802fcc8:	3a7f      	subs	r2, #127	; 0x7f
 802fcca:	2a16      	cmp	r2, #22
 802fccc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 802fcd0:	dc2a      	bgt.n	802fd28 <ceilf+0x68>
 802fcd2:	2a00      	cmp	r2, #0
 802fcd4:	da11      	bge.n	802fcfa <ceilf+0x3a>
 802fcd6:	eddf 7a19 	vldr	s15, [pc, #100]	; 802fd3c <ceilf+0x7c>
 802fcda:	ee30 0a27 	vadd.f32	s0, s0, s15
 802fcde:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 802fce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802fce6:	dd05      	ble.n	802fcf4 <ceilf+0x34>
 802fce8:	2b00      	cmp	r3, #0
 802fcea:	db23      	blt.n	802fd34 <ceilf+0x74>
 802fcec:	2900      	cmp	r1, #0
 802fcee:	bf18      	it	ne
 802fcf0:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 802fcf4:	ee00 3a10 	vmov	s0, r3
 802fcf8:	4770      	bx	lr
 802fcfa:	4911      	ldr	r1, [pc, #68]	; (802fd40 <ceilf+0x80>)
 802fcfc:	4111      	asrs	r1, r2
 802fcfe:	420b      	tst	r3, r1
 802fd00:	d0fa      	beq.n	802fcf8 <ceilf+0x38>
 802fd02:	eddf 7a0e 	vldr	s15, [pc, #56]	; 802fd3c <ceilf+0x7c>
 802fd06:	ee30 0a27 	vadd.f32	s0, s0, s15
 802fd0a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 802fd0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802fd12:	ddef      	ble.n	802fcf4 <ceilf+0x34>
 802fd14:	2b00      	cmp	r3, #0
 802fd16:	bfc2      	ittt	gt
 802fd18:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 802fd1c:	fa40 f202 	asrgt.w	r2, r0, r2
 802fd20:	189b      	addgt	r3, r3, r2
 802fd22:	ea23 0301 	bic.w	r3, r3, r1
 802fd26:	e7e5      	b.n	802fcf4 <ceilf+0x34>
 802fd28:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 802fd2c:	d3e4      	bcc.n	802fcf8 <ceilf+0x38>
 802fd2e:	ee30 0a00 	vadd.f32	s0, s0, s0
 802fd32:	4770      	bx	lr
 802fd34:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 802fd38:	e7dc      	b.n	802fcf4 <ceilf+0x34>
 802fd3a:	bf00      	nop
 802fd3c:	7149f2ca 	.word	0x7149f2ca
 802fd40:	007fffff 	.word	0x007fffff

0802fd44 <floorf>:
 802fd44:	ee10 3a10 	vmov	r3, s0
 802fd48:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 802fd4c:	3a7f      	subs	r2, #127	; 0x7f
 802fd4e:	2a16      	cmp	r2, #22
 802fd50:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 802fd54:	dc2a      	bgt.n	802fdac <floorf+0x68>
 802fd56:	2a00      	cmp	r2, #0
 802fd58:	da11      	bge.n	802fd7e <floorf+0x3a>
 802fd5a:	eddf 7a18 	vldr	s15, [pc, #96]	; 802fdbc <floorf+0x78>
 802fd5e:	ee30 0a27 	vadd.f32	s0, s0, s15
 802fd62:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 802fd66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802fd6a:	dd05      	ble.n	802fd78 <floorf+0x34>
 802fd6c:	2b00      	cmp	r3, #0
 802fd6e:	da23      	bge.n	802fdb8 <floorf+0x74>
 802fd70:	4a13      	ldr	r2, [pc, #76]	; (802fdc0 <floorf+0x7c>)
 802fd72:	2900      	cmp	r1, #0
 802fd74:	bf18      	it	ne
 802fd76:	4613      	movne	r3, r2
 802fd78:	ee00 3a10 	vmov	s0, r3
 802fd7c:	4770      	bx	lr
 802fd7e:	4911      	ldr	r1, [pc, #68]	; (802fdc4 <floorf+0x80>)
 802fd80:	4111      	asrs	r1, r2
 802fd82:	420b      	tst	r3, r1
 802fd84:	d0fa      	beq.n	802fd7c <floorf+0x38>
 802fd86:	eddf 7a0d 	vldr	s15, [pc, #52]	; 802fdbc <floorf+0x78>
 802fd8a:	ee30 0a27 	vadd.f32	s0, s0, s15
 802fd8e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 802fd92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802fd96:	ddef      	ble.n	802fd78 <floorf+0x34>
 802fd98:	2b00      	cmp	r3, #0
 802fd9a:	bfbe      	ittt	lt
 802fd9c:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 802fda0:	fa40 f202 	asrlt.w	r2, r0, r2
 802fda4:	189b      	addlt	r3, r3, r2
 802fda6:	ea23 0301 	bic.w	r3, r3, r1
 802fdaa:	e7e5      	b.n	802fd78 <floorf+0x34>
 802fdac:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 802fdb0:	d3e4      	bcc.n	802fd7c <floorf+0x38>
 802fdb2:	ee30 0a00 	vadd.f32	s0, s0, s0
 802fdb6:	4770      	bx	lr
 802fdb8:	2300      	movs	r3, #0
 802fdba:	e7dd      	b.n	802fd78 <floorf+0x34>
 802fdbc:	7149f2ca 	.word	0x7149f2ca
 802fdc0:	bf800000 	.word	0xbf800000
 802fdc4:	007fffff 	.word	0x007fffff

0802fdc8 <fmaf>:
 802fdc8:	eea0 0a20 	vfma.f32	s0, s0, s1
 802fdcc:	4770      	bx	lr
	...

0802fdd0 <frexpf>:
 802fdd0:	ee10 3a10 	vmov	r3, s0
 802fdd4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 802fdd8:	2100      	movs	r1, #0
 802fdda:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 802fdde:	6001      	str	r1, [r0, #0]
 802fde0:	da19      	bge.n	802fe16 <frexpf+0x46>
 802fde2:	b1c2      	cbz	r2, 802fe16 <frexpf+0x46>
 802fde4:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 802fde8:	d10a      	bne.n	802fe00 <frexpf+0x30>
 802fdea:	eddf 7a0b 	vldr	s15, [pc, #44]	; 802fe18 <frexpf+0x48>
 802fdee:	ee60 7a27 	vmul.f32	s15, s0, s15
 802fdf2:	f06f 0118 	mvn.w	r1, #24
 802fdf6:	ee17 3a90 	vmov	r3, s15
 802fdfa:	6001      	str	r1, [r0, #0]
 802fdfc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 802fe00:	6801      	ldr	r1, [r0, #0]
 802fe02:	15d2      	asrs	r2, r2, #23
 802fe04:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 802fe08:	3a7e      	subs	r2, #126	; 0x7e
 802fe0a:	f043 537c 	orr.w	r3, r3, #1056964608	; 0x3f000000
 802fe0e:	440a      	add	r2, r1
 802fe10:	ee00 3a10 	vmov	s0, r3
 802fe14:	6002      	str	r2, [r0, #0]
 802fe16:	4770      	bx	lr
 802fe18:	4c000000 	.word	0x4c000000

0802fe1c <roundf>:
 802fe1c:	ee10 0a10 	vmov	r0, s0
 802fe20:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 802fe24:	3a7f      	subs	r2, #127	; 0x7f
 802fe26:	2a16      	cmp	r2, #22
 802fe28:	dc15      	bgt.n	802fe56 <roundf+0x3a>
 802fe2a:	2a00      	cmp	r2, #0
 802fe2c:	da08      	bge.n	802fe40 <roundf+0x24>
 802fe2e:	3201      	adds	r2, #1
 802fe30:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 802fe34:	d101      	bne.n	802fe3a <roundf+0x1e>
 802fe36:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 802fe3a:	ee00 3a10 	vmov	s0, r3
 802fe3e:	4770      	bx	lr
 802fe40:	4907      	ldr	r1, [pc, #28]	; (802fe60 <roundf+0x44>)
 802fe42:	4111      	asrs	r1, r2
 802fe44:	4208      	tst	r0, r1
 802fe46:	d0fa      	beq.n	802fe3e <roundf+0x22>
 802fe48:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 802fe4c:	4113      	asrs	r3, r2
 802fe4e:	4403      	add	r3, r0
 802fe50:	ea23 0301 	bic.w	r3, r3, r1
 802fe54:	e7f1      	b.n	802fe3a <roundf+0x1e>
 802fe56:	2a80      	cmp	r2, #128	; 0x80
 802fe58:	d1f1      	bne.n	802fe3e <roundf+0x22>
 802fe5a:	ee30 0a00 	vadd.f32	s0, s0, s0
 802fe5e:	4770      	bx	lr
 802fe60:	007fffff 	.word	0x007fffff

0802fe64 <pow>:
 802fe64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802fe66:	ed2d 8b02 	vpush	{d8}
 802fe6a:	eeb0 8a40 	vmov.f32	s16, s0
 802fe6e:	eef0 8a60 	vmov.f32	s17, s1
 802fe72:	ec55 4b11 	vmov	r4, r5, d1
 802fe76:	f000 f913 	bl	80300a0 <__ieee754_pow>
 802fe7a:	4622      	mov	r2, r4
 802fe7c:	462b      	mov	r3, r5
 802fe7e:	4620      	mov	r0, r4
 802fe80:	4629      	mov	r1, r5
 802fe82:	ec57 6b10 	vmov	r6, r7, d0
 802fe86:	f7d0 fe5b 	bl	8000b40 <__aeabi_dcmpun>
 802fe8a:	2800      	cmp	r0, #0
 802fe8c:	d13b      	bne.n	802ff06 <pow+0xa2>
 802fe8e:	ec51 0b18 	vmov	r0, r1, d8
 802fe92:	2200      	movs	r2, #0
 802fe94:	2300      	movs	r3, #0
 802fe96:	f7d0 fe21 	bl	8000adc <__aeabi_dcmpeq>
 802fe9a:	b1b8      	cbz	r0, 802fecc <pow+0x68>
 802fe9c:	2200      	movs	r2, #0
 802fe9e:	2300      	movs	r3, #0
 802fea0:	4620      	mov	r0, r4
 802fea2:	4629      	mov	r1, r5
 802fea4:	f7d0 fe1a 	bl	8000adc <__aeabi_dcmpeq>
 802fea8:	2800      	cmp	r0, #0
 802feaa:	d146      	bne.n	802ff3a <pow+0xd6>
 802feac:	ec45 4b10 	vmov	d0, r4, r5
 802feb0:	f002 f82f 	bl	8031f12 <finite>
 802feb4:	b338      	cbz	r0, 802ff06 <pow+0xa2>
 802feb6:	2200      	movs	r2, #0
 802feb8:	2300      	movs	r3, #0
 802feba:	4620      	mov	r0, r4
 802febc:	4629      	mov	r1, r5
 802febe:	f7d0 fe17 	bl	8000af0 <__aeabi_dcmplt>
 802fec2:	b300      	cbz	r0, 802ff06 <pow+0xa2>
 802fec4:	f002 f8f8 	bl	80320b8 <__errno>
 802fec8:	2322      	movs	r3, #34	; 0x22
 802feca:	e01b      	b.n	802ff04 <pow+0xa0>
 802fecc:	ec47 6b10 	vmov	d0, r6, r7
 802fed0:	f002 f81f 	bl	8031f12 <finite>
 802fed4:	b9e0      	cbnz	r0, 802ff10 <pow+0xac>
 802fed6:	eeb0 0a48 	vmov.f32	s0, s16
 802feda:	eef0 0a68 	vmov.f32	s1, s17
 802fede:	f002 f818 	bl	8031f12 <finite>
 802fee2:	b1a8      	cbz	r0, 802ff10 <pow+0xac>
 802fee4:	ec45 4b10 	vmov	d0, r4, r5
 802fee8:	f002 f813 	bl	8031f12 <finite>
 802feec:	b180      	cbz	r0, 802ff10 <pow+0xac>
 802feee:	4632      	mov	r2, r6
 802fef0:	463b      	mov	r3, r7
 802fef2:	4630      	mov	r0, r6
 802fef4:	4639      	mov	r1, r7
 802fef6:	f7d0 fe23 	bl	8000b40 <__aeabi_dcmpun>
 802fefa:	2800      	cmp	r0, #0
 802fefc:	d0e2      	beq.n	802fec4 <pow+0x60>
 802fefe:	f002 f8db 	bl	80320b8 <__errno>
 802ff02:	2321      	movs	r3, #33	; 0x21
 802ff04:	6003      	str	r3, [r0, #0]
 802ff06:	ecbd 8b02 	vpop	{d8}
 802ff0a:	ec47 6b10 	vmov	d0, r6, r7
 802ff0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802ff10:	2200      	movs	r2, #0
 802ff12:	2300      	movs	r3, #0
 802ff14:	4630      	mov	r0, r6
 802ff16:	4639      	mov	r1, r7
 802ff18:	f7d0 fde0 	bl	8000adc <__aeabi_dcmpeq>
 802ff1c:	2800      	cmp	r0, #0
 802ff1e:	d0f2      	beq.n	802ff06 <pow+0xa2>
 802ff20:	eeb0 0a48 	vmov.f32	s0, s16
 802ff24:	eef0 0a68 	vmov.f32	s1, s17
 802ff28:	f001 fff3 	bl	8031f12 <finite>
 802ff2c:	2800      	cmp	r0, #0
 802ff2e:	d0ea      	beq.n	802ff06 <pow+0xa2>
 802ff30:	ec45 4b10 	vmov	d0, r4, r5
 802ff34:	f001 ffed 	bl	8031f12 <finite>
 802ff38:	e7c3      	b.n	802fec2 <pow+0x5e>
 802ff3a:	4f01      	ldr	r7, [pc, #4]	; (802ff40 <pow+0xdc>)
 802ff3c:	2600      	movs	r6, #0
 802ff3e:	e7e2      	b.n	802ff06 <pow+0xa2>
 802ff40:	3ff00000 	.word	0x3ff00000

0802ff44 <sqrt>:
 802ff44:	b538      	push	{r3, r4, r5, lr}
 802ff46:	ed2d 8b02 	vpush	{d8}
 802ff4a:	ec55 4b10 	vmov	r4, r5, d0
 802ff4e:	f000 ffe3 	bl	8030f18 <__ieee754_sqrt>
 802ff52:	4622      	mov	r2, r4
 802ff54:	462b      	mov	r3, r5
 802ff56:	4620      	mov	r0, r4
 802ff58:	4629      	mov	r1, r5
 802ff5a:	eeb0 8a40 	vmov.f32	s16, s0
 802ff5e:	eef0 8a60 	vmov.f32	s17, s1
 802ff62:	f7d0 fded 	bl	8000b40 <__aeabi_dcmpun>
 802ff66:	b990      	cbnz	r0, 802ff8e <sqrt+0x4a>
 802ff68:	2200      	movs	r2, #0
 802ff6a:	2300      	movs	r3, #0
 802ff6c:	4620      	mov	r0, r4
 802ff6e:	4629      	mov	r1, r5
 802ff70:	f7d0 fdbe 	bl	8000af0 <__aeabi_dcmplt>
 802ff74:	b158      	cbz	r0, 802ff8e <sqrt+0x4a>
 802ff76:	f002 f89f 	bl	80320b8 <__errno>
 802ff7a:	2321      	movs	r3, #33	; 0x21
 802ff7c:	6003      	str	r3, [r0, #0]
 802ff7e:	2200      	movs	r2, #0
 802ff80:	2300      	movs	r3, #0
 802ff82:	4610      	mov	r0, r2
 802ff84:	4619      	mov	r1, r3
 802ff86:	f7d0 fc6b 	bl	8000860 <__aeabi_ddiv>
 802ff8a:	ec41 0b18 	vmov	d8, r0, r1
 802ff8e:	eeb0 0a48 	vmov.f32	s0, s16
 802ff92:	eef0 0a68 	vmov.f32	s1, s17
 802ff96:	ecbd 8b02 	vpop	{d8}
 802ff9a:	bd38      	pop	{r3, r4, r5, pc}

0802ff9c <expf>:
 802ff9c:	b508      	push	{r3, lr}
 802ff9e:	ed2d 8b02 	vpush	{d8}
 802ffa2:	eef0 8a40 	vmov.f32	s17, s0
 802ffa6:	f001 f869 	bl	803107c <__ieee754_expf>
 802ffaa:	eeb0 8a40 	vmov.f32	s16, s0
 802ffae:	eeb0 0a68 	vmov.f32	s0, s17
 802ffb2:	f002 f83f 	bl	8032034 <finitef>
 802ffb6:	b160      	cbz	r0, 802ffd2 <expf+0x36>
 802ffb8:	eddf 7a0f 	vldr	s15, [pc, #60]	; 802fff8 <expf+0x5c>
 802ffbc:	eef4 8ae7 	vcmpe.f32	s17, s15
 802ffc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802ffc4:	dd0a      	ble.n	802ffdc <expf+0x40>
 802ffc6:	f002 f877 	bl	80320b8 <__errno>
 802ffca:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 802fffc <expf+0x60>
 802ffce:	2322      	movs	r3, #34	; 0x22
 802ffd0:	6003      	str	r3, [r0, #0]
 802ffd2:	eeb0 0a48 	vmov.f32	s0, s16
 802ffd6:	ecbd 8b02 	vpop	{d8}
 802ffda:	bd08      	pop	{r3, pc}
 802ffdc:	eddf 7a08 	vldr	s15, [pc, #32]	; 8030000 <expf+0x64>
 802ffe0:	eef4 8ae7 	vcmpe.f32	s17, s15
 802ffe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802ffe8:	d5f3      	bpl.n	802ffd2 <expf+0x36>
 802ffea:	f002 f865 	bl	80320b8 <__errno>
 802ffee:	2322      	movs	r3, #34	; 0x22
 802fff0:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8030004 <expf+0x68>
 802fff4:	6003      	str	r3, [r0, #0]
 802fff6:	e7ec      	b.n	802ffd2 <expf+0x36>
 802fff8:	42b17180 	.word	0x42b17180
 802fffc:	7f800000 	.word	0x7f800000
 8030000:	c2cff1b5 	.word	0xc2cff1b5
 8030004:	00000000 	.word	0x00000000

08030008 <log10f>:
 8030008:	b508      	push	{r3, lr}
 803000a:	ed2d 8b02 	vpush	{d8}
 803000e:	eeb0 8a40 	vmov.f32	s16, s0
 8030012:	f001 f9f1 	bl	80313f8 <__ieee754_log10f>
 8030016:	eeb4 8a48 	vcmp.f32	s16, s16
 803001a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 803001e:	d60f      	bvs.n	8030040 <log10f+0x38>
 8030020:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8030024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8030028:	d80a      	bhi.n	8030040 <log10f+0x38>
 803002a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 803002e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8030032:	d108      	bne.n	8030046 <log10f+0x3e>
 8030034:	f002 f840 	bl	80320b8 <__errno>
 8030038:	2322      	movs	r3, #34	; 0x22
 803003a:	ed9f 0a08 	vldr	s0, [pc, #32]	; 803005c <log10f+0x54>
 803003e:	6003      	str	r3, [r0, #0]
 8030040:	ecbd 8b02 	vpop	{d8}
 8030044:	bd08      	pop	{r3, pc}
 8030046:	f002 f837 	bl	80320b8 <__errno>
 803004a:	ecbd 8b02 	vpop	{d8}
 803004e:	2321      	movs	r3, #33	; 0x21
 8030050:	6003      	str	r3, [r0, #0]
 8030052:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8030056:	4802      	ldr	r0, [pc, #8]	; (8030060 <log10f+0x58>)
 8030058:	f001 bffa 	b.w	8032050 <nanf>
 803005c:	ff800000 	.word	0xff800000
 8030060:	080381bb 	.word	0x080381bb

08030064 <sqrtf>:
 8030064:	b508      	push	{r3, lr}
 8030066:	ed2d 8b02 	vpush	{d8}
 803006a:	eeb0 8a40 	vmov.f32	s16, s0
 803006e:	f001 fa1b 	bl	80314a8 <__ieee754_sqrtf>
 8030072:	eeb4 8a48 	vcmp.f32	s16, s16
 8030076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 803007a:	d60c      	bvs.n	8030096 <sqrtf+0x32>
 803007c:	eddf 8a07 	vldr	s17, [pc, #28]	; 803009c <sqrtf+0x38>
 8030080:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8030084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8030088:	d505      	bpl.n	8030096 <sqrtf+0x32>
 803008a:	f002 f815 	bl	80320b8 <__errno>
 803008e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8030092:	2321      	movs	r3, #33	; 0x21
 8030094:	6003      	str	r3, [r0, #0]
 8030096:	ecbd 8b02 	vpop	{d8}
 803009a:	bd08      	pop	{r3, pc}
 803009c:	00000000 	.word	0x00000000

080300a0 <__ieee754_pow>:
 80300a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80300a4:	ed2d 8b06 	vpush	{d8-d10}
 80300a8:	b089      	sub	sp, #36	; 0x24
 80300aa:	ed8d 1b00 	vstr	d1, [sp]
 80300ae:	e9dd 2900 	ldrd	r2, r9, [sp]
 80300b2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80300b6:	ea58 0102 	orrs.w	r1, r8, r2
 80300ba:	ec57 6b10 	vmov	r6, r7, d0
 80300be:	d115      	bne.n	80300ec <__ieee754_pow+0x4c>
 80300c0:	19b3      	adds	r3, r6, r6
 80300c2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80300c6:	4152      	adcs	r2, r2
 80300c8:	4299      	cmp	r1, r3
 80300ca:	4b89      	ldr	r3, [pc, #548]	; (80302f0 <__ieee754_pow+0x250>)
 80300cc:	4193      	sbcs	r3, r2
 80300ce:	f080 84d2 	bcs.w	8030a76 <__ieee754_pow+0x9d6>
 80300d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80300d6:	4630      	mov	r0, r6
 80300d8:	4639      	mov	r1, r7
 80300da:	f7d0 f8e1 	bl	80002a0 <__adddf3>
 80300de:	ec41 0b10 	vmov	d0, r0, r1
 80300e2:	b009      	add	sp, #36	; 0x24
 80300e4:	ecbd 8b06 	vpop	{d8-d10}
 80300e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80300ec:	4b81      	ldr	r3, [pc, #516]	; (80302f4 <__ieee754_pow+0x254>)
 80300ee:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80300f2:	429c      	cmp	r4, r3
 80300f4:	ee10 aa10 	vmov	sl, s0
 80300f8:	463d      	mov	r5, r7
 80300fa:	dc06      	bgt.n	803010a <__ieee754_pow+0x6a>
 80300fc:	d101      	bne.n	8030102 <__ieee754_pow+0x62>
 80300fe:	2e00      	cmp	r6, #0
 8030100:	d1e7      	bne.n	80300d2 <__ieee754_pow+0x32>
 8030102:	4598      	cmp	r8, r3
 8030104:	dc01      	bgt.n	803010a <__ieee754_pow+0x6a>
 8030106:	d10f      	bne.n	8030128 <__ieee754_pow+0x88>
 8030108:	b172      	cbz	r2, 8030128 <__ieee754_pow+0x88>
 803010a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 803010e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8030112:	ea55 050a 	orrs.w	r5, r5, sl
 8030116:	d1dc      	bne.n	80300d2 <__ieee754_pow+0x32>
 8030118:	e9dd 3200 	ldrd	r3, r2, [sp]
 803011c:	18db      	adds	r3, r3, r3
 803011e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8030122:	4152      	adcs	r2, r2
 8030124:	429d      	cmp	r5, r3
 8030126:	e7d0      	b.n	80300ca <__ieee754_pow+0x2a>
 8030128:	2d00      	cmp	r5, #0
 803012a:	da3b      	bge.n	80301a4 <__ieee754_pow+0x104>
 803012c:	4b72      	ldr	r3, [pc, #456]	; (80302f8 <__ieee754_pow+0x258>)
 803012e:	4598      	cmp	r8, r3
 8030130:	dc51      	bgt.n	80301d6 <__ieee754_pow+0x136>
 8030132:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8030136:	4598      	cmp	r8, r3
 8030138:	f340 84ac 	ble.w	8030a94 <__ieee754_pow+0x9f4>
 803013c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8030140:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8030144:	2b14      	cmp	r3, #20
 8030146:	dd0f      	ble.n	8030168 <__ieee754_pow+0xc8>
 8030148:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 803014c:	fa22 f103 	lsr.w	r1, r2, r3
 8030150:	fa01 f303 	lsl.w	r3, r1, r3
 8030154:	4293      	cmp	r3, r2
 8030156:	f040 849d 	bne.w	8030a94 <__ieee754_pow+0x9f4>
 803015a:	f001 0101 	and.w	r1, r1, #1
 803015e:	f1c1 0302 	rsb	r3, r1, #2
 8030162:	9304      	str	r3, [sp, #16]
 8030164:	b182      	cbz	r2, 8030188 <__ieee754_pow+0xe8>
 8030166:	e05f      	b.n	8030228 <__ieee754_pow+0x188>
 8030168:	2a00      	cmp	r2, #0
 803016a:	d15b      	bne.n	8030224 <__ieee754_pow+0x184>
 803016c:	f1c3 0314 	rsb	r3, r3, #20
 8030170:	fa48 f103 	asr.w	r1, r8, r3
 8030174:	fa01 f303 	lsl.w	r3, r1, r3
 8030178:	4543      	cmp	r3, r8
 803017a:	f040 8488 	bne.w	8030a8e <__ieee754_pow+0x9ee>
 803017e:	f001 0101 	and.w	r1, r1, #1
 8030182:	f1c1 0302 	rsb	r3, r1, #2
 8030186:	9304      	str	r3, [sp, #16]
 8030188:	4b5c      	ldr	r3, [pc, #368]	; (80302fc <__ieee754_pow+0x25c>)
 803018a:	4598      	cmp	r8, r3
 803018c:	d132      	bne.n	80301f4 <__ieee754_pow+0x154>
 803018e:	f1b9 0f00 	cmp.w	r9, #0
 8030192:	f280 8478 	bge.w	8030a86 <__ieee754_pow+0x9e6>
 8030196:	4959      	ldr	r1, [pc, #356]	; (80302fc <__ieee754_pow+0x25c>)
 8030198:	4632      	mov	r2, r6
 803019a:	463b      	mov	r3, r7
 803019c:	2000      	movs	r0, #0
 803019e:	f7d0 fb5f 	bl	8000860 <__aeabi_ddiv>
 80301a2:	e79c      	b.n	80300de <__ieee754_pow+0x3e>
 80301a4:	2300      	movs	r3, #0
 80301a6:	9304      	str	r3, [sp, #16]
 80301a8:	2a00      	cmp	r2, #0
 80301aa:	d13d      	bne.n	8030228 <__ieee754_pow+0x188>
 80301ac:	4b51      	ldr	r3, [pc, #324]	; (80302f4 <__ieee754_pow+0x254>)
 80301ae:	4598      	cmp	r8, r3
 80301b0:	d1ea      	bne.n	8030188 <__ieee754_pow+0xe8>
 80301b2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80301b6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80301ba:	ea53 030a 	orrs.w	r3, r3, sl
 80301be:	f000 845a 	beq.w	8030a76 <__ieee754_pow+0x9d6>
 80301c2:	4b4f      	ldr	r3, [pc, #316]	; (8030300 <__ieee754_pow+0x260>)
 80301c4:	429c      	cmp	r4, r3
 80301c6:	dd08      	ble.n	80301da <__ieee754_pow+0x13a>
 80301c8:	f1b9 0f00 	cmp.w	r9, #0
 80301cc:	f2c0 8457 	blt.w	8030a7e <__ieee754_pow+0x9de>
 80301d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80301d4:	e783      	b.n	80300de <__ieee754_pow+0x3e>
 80301d6:	2302      	movs	r3, #2
 80301d8:	e7e5      	b.n	80301a6 <__ieee754_pow+0x106>
 80301da:	f1b9 0f00 	cmp.w	r9, #0
 80301de:	f04f 0000 	mov.w	r0, #0
 80301e2:	f04f 0100 	mov.w	r1, #0
 80301e6:	f6bf af7a 	bge.w	80300de <__ieee754_pow+0x3e>
 80301ea:	e9dd 0300 	ldrd	r0, r3, [sp]
 80301ee:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80301f2:	e774      	b.n	80300de <__ieee754_pow+0x3e>
 80301f4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80301f8:	d106      	bne.n	8030208 <__ieee754_pow+0x168>
 80301fa:	4632      	mov	r2, r6
 80301fc:	463b      	mov	r3, r7
 80301fe:	4630      	mov	r0, r6
 8030200:	4639      	mov	r1, r7
 8030202:	f7d0 fa03 	bl	800060c <__aeabi_dmul>
 8030206:	e76a      	b.n	80300de <__ieee754_pow+0x3e>
 8030208:	4b3e      	ldr	r3, [pc, #248]	; (8030304 <__ieee754_pow+0x264>)
 803020a:	4599      	cmp	r9, r3
 803020c:	d10c      	bne.n	8030228 <__ieee754_pow+0x188>
 803020e:	2d00      	cmp	r5, #0
 8030210:	db0a      	blt.n	8030228 <__ieee754_pow+0x188>
 8030212:	ec47 6b10 	vmov	d0, r6, r7
 8030216:	b009      	add	sp, #36	; 0x24
 8030218:	ecbd 8b06 	vpop	{d8-d10}
 803021c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8030220:	f000 be7a 	b.w	8030f18 <__ieee754_sqrt>
 8030224:	2300      	movs	r3, #0
 8030226:	9304      	str	r3, [sp, #16]
 8030228:	ec47 6b10 	vmov	d0, r6, r7
 803022c:	f001 fe68 	bl	8031f00 <fabs>
 8030230:	ec51 0b10 	vmov	r0, r1, d0
 8030234:	f1ba 0f00 	cmp.w	sl, #0
 8030238:	d129      	bne.n	803028e <__ieee754_pow+0x1ee>
 803023a:	b124      	cbz	r4, 8030246 <__ieee754_pow+0x1a6>
 803023c:	4b2f      	ldr	r3, [pc, #188]	; (80302fc <__ieee754_pow+0x25c>)
 803023e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8030242:	429a      	cmp	r2, r3
 8030244:	d123      	bne.n	803028e <__ieee754_pow+0x1ee>
 8030246:	f1b9 0f00 	cmp.w	r9, #0
 803024a:	da05      	bge.n	8030258 <__ieee754_pow+0x1b8>
 803024c:	4602      	mov	r2, r0
 803024e:	460b      	mov	r3, r1
 8030250:	2000      	movs	r0, #0
 8030252:	492a      	ldr	r1, [pc, #168]	; (80302fc <__ieee754_pow+0x25c>)
 8030254:	f7d0 fb04 	bl	8000860 <__aeabi_ddiv>
 8030258:	2d00      	cmp	r5, #0
 803025a:	f6bf af40 	bge.w	80300de <__ieee754_pow+0x3e>
 803025e:	9b04      	ldr	r3, [sp, #16]
 8030260:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8030264:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8030268:	4323      	orrs	r3, r4
 803026a:	d108      	bne.n	803027e <__ieee754_pow+0x1de>
 803026c:	4602      	mov	r2, r0
 803026e:	460b      	mov	r3, r1
 8030270:	4610      	mov	r0, r2
 8030272:	4619      	mov	r1, r3
 8030274:	f7d0 f812 	bl	800029c <__aeabi_dsub>
 8030278:	4602      	mov	r2, r0
 803027a:	460b      	mov	r3, r1
 803027c:	e78f      	b.n	803019e <__ieee754_pow+0xfe>
 803027e:	9b04      	ldr	r3, [sp, #16]
 8030280:	2b01      	cmp	r3, #1
 8030282:	f47f af2c 	bne.w	80300de <__ieee754_pow+0x3e>
 8030286:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 803028a:	4619      	mov	r1, r3
 803028c:	e727      	b.n	80300de <__ieee754_pow+0x3e>
 803028e:	0feb      	lsrs	r3, r5, #31
 8030290:	3b01      	subs	r3, #1
 8030292:	9306      	str	r3, [sp, #24]
 8030294:	9a06      	ldr	r2, [sp, #24]
 8030296:	9b04      	ldr	r3, [sp, #16]
 8030298:	4313      	orrs	r3, r2
 803029a:	d102      	bne.n	80302a2 <__ieee754_pow+0x202>
 803029c:	4632      	mov	r2, r6
 803029e:	463b      	mov	r3, r7
 80302a0:	e7e6      	b.n	8030270 <__ieee754_pow+0x1d0>
 80302a2:	4b19      	ldr	r3, [pc, #100]	; (8030308 <__ieee754_pow+0x268>)
 80302a4:	4598      	cmp	r8, r3
 80302a6:	f340 80fb 	ble.w	80304a0 <__ieee754_pow+0x400>
 80302aa:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80302ae:	4598      	cmp	r8, r3
 80302b0:	4b13      	ldr	r3, [pc, #76]	; (8030300 <__ieee754_pow+0x260>)
 80302b2:	dd0c      	ble.n	80302ce <__ieee754_pow+0x22e>
 80302b4:	429c      	cmp	r4, r3
 80302b6:	dc0f      	bgt.n	80302d8 <__ieee754_pow+0x238>
 80302b8:	f1b9 0f00 	cmp.w	r9, #0
 80302bc:	da0f      	bge.n	80302de <__ieee754_pow+0x23e>
 80302be:	2000      	movs	r0, #0
 80302c0:	b009      	add	sp, #36	; 0x24
 80302c2:	ecbd 8b06 	vpop	{d8-d10}
 80302c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80302ca:	f001 bdee 	b.w	8031eaa <__math_oflow>
 80302ce:	429c      	cmp	r4, r3
 80302d0:	dbf2      	blt.n	80302b8 <__ieee754_pow+0x218>
 80302d2:	4b0a      	ldr	r3, [pc, #40]	; (80302fc <__ieee754_pow+0x25c>)
 80302d4:	429c      	cmp	r4, r3
 80302d6:	dd19      	ble.n	803030c <__ieee754_pow+0x26c>
 80302d8:	f1b9 0f00 	cmp.w	r9, #0
 80302dc:	dcef      	bgt.n	80302be <__ieee754_pow+0x21e>
 80302de:	2000      	movs	r0, #0
 80302e0:	b009      	add	sp, #36	; 0x24
 80302e2:	ecbd 8b06 	vpop	{d8-d10}
 80302e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80302ea:	f001 bdd5 	b.w	8031e98 <__math_uflow>
 80302ee:	bf00      	nop
 80302f0:	fff00000 	.word	0xfff00000
 80302f4:	7ff00000 	.word	0x7ff00000
 80302f8:	433fffff 	.word	0x433fffff
 80302fc:	3ff00000 	.word	0x3ff00000
 8030300:	3fefffff 	.word	0x3fefffff
 8030304:	3fe00000 	.word	0x3fe00000
 8030308:	41e00000 	.word	0x41e00000
 803030c:	4b60      	ldr	r3, [pc, #384]	; (8030490 <__ieee754_pow+0x3f0>)
 803030e:	2200      	movs	r2, #0
 8030310:	f7cf ffc4 	bl	800029c <__aeabi_dsub>
 8030314:	a354      	add	r3, pc, #336	; (adr r3, 8030468 <__ieee754_pow+0x3c8>)
 8030316:	e9d3 2300 	ldrd	r2, r3, [r3]
 803031a:	4604      	mov	r4, r0
 803031c:	460d      	mov	r5, r1
 803031e:	f7d0 f975 	bl	800060c <__aeabi_dmul>
 8030322:	a353      	add	r3, pc, #332	; (adr r3, 8030470 <__ieee754_pow+0x3d0>)
 8030324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030328:	4606      	mov	r6, r0
 803032a:	460f      	mov	r7, r1
 803032c:	4620      	mov	r0, r4
 803032e:	4629      	mov	r1, r5
 8030330:	f7d0 f96c 	bl	800060c <__aeabi_dmul>
 8030334:	4b57      	ldr	r3, [pc, #348]	; (8030494 <__ieee754_pow+0x3f4>)
 8030336:	4682      	mov	sl, r0
 8030338:	468b      	mov	fp, r1
 803033a:	2200      	movs	r2, #0
 803033c:	4620      	mov	r0, r4
 803033e:	4629      	mov	r1, r5
 8030340:	f7d0 f964 	bl	800060c <__aeabi_dmul>
 8030344:	4602      	mov	r2, r0
 8030346:	460b      	mov	r3, r1
 8030348:	a14b      	add	r1, pc, #300	; (adr r1, 8030478 <__ieee754_pow+0x3d8>)
 803034a:	e9d1 0100 	ldrd	r0, r1, [r1]
 803034e:	f7cf ffa5 	bl	800029c <__aeabi_dsub>
 8030352:	4622      	mov	r2, r4
 8030354:	462b      	mov	r3, r5
 8030356:	f7d0 f959 	bl	800060c <__aeabi_dmul>
 803035a:	4602      	mov	r2, r0
 803035c:	460b      	mov	r3, r1
 803035e:	2000      	movs	r0, #0
 8030360:	494d      	ldr	r1, [pc, #308]	; (8030498 <__ieee754_pow+0x3f8>)
 8030362:	f7cf ff9b 	bl	800029c <__aeabi_dsub>
 8030366:	4622      	mov	r2, r4
 8030368:	4680      	mov	r8, r0
 803036a:	4689      	mov	r9, r1
 803036c:	462b      	mov	r3, r5
 803036e:	4620      	mov	r0, r4
 8030370:	4629      	mov	r1, r5
 8030372:	f7d0 f94b 	bl	800060c <__aeabi_dmul>
 8030376:	4602      	mov	r2, r0
 8030378:	460b      	mov	r3, r1
 803037a:	4640      	mov	r0, r8
 803037c:	4649      	mov	r1, r9
 803037e:	f7d0 f945 	bl	800060c <__aeabi_dmul>
 8030382:	a33f      	add	r3, pc, #252	; (adr r3, 8030480 <__ieee754_pow+0x3e0>)
 8030384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030388:	f7d0 f940 	bl	800060c <__aeabi_dmul>
 803038c:	4602      	mov	r2, r0
 803038e:	460b      	mov	r3, r1
 8030390:	4650      	mov	r0, sl
 8030392:	4659      	mov	r1, fp
 8030394:	f7cf ff82 	bl	800029c <__aeabi_dsub>
 8030398:	4602      	mov	r2, r0
 803039a:	460b      	mov	r3, r1
 803039c:	4680      	mov	r8, r0
 803039e:	4689      	mov	r9, r1
 80303a0:	4630      	mov	r0, r6
 80303a2:	4639      	mov	r1, r7
 80303a4:	f7cf ff7c 	bl	80002a0 <__adddf3>
 80303a8:	2000      	movs	r0, #0
 80303aa:	4632      	mov	r2, r6
 80303ac:	463b      	mov	r3, r7
 80303ae:	4604      	mov	r4, r0
 80303b0:	460d      	mov	r5, r1
 80303b2:	f7cf ff73 	bl	800029c <__aeabi_dsub>
 80303b6:	4602      	mov	r2, r0
 80303b8:	460b      	mov	r3, r1
 80303ba:	4640      	mov	r0, r8
 80303bc:	4649      	mov	r1, r9
 80303be:	f7cf ff6d 	bl	800029c <__aeabi_dsub>
 80303c2:	9b04      	ldr	r3, [sp, #16]
 80303c4:	9a06      	ldr	r2, [sp, #24]
 80303c6:	3b01      	subs	r3, #1
 80303c8:	4313      	orrs	r3, r2
 80303ca:	4682      	mov	sl, r0
 80303cc:	468b      	mov	fp, r1
 80303ce:	f040 81e7 	bne.w	80307a0 <__ieee754_pow+0x700>
 80303d2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8030488 <__ieee754_pow+0x3e8>
 80303d6:	eeb0 8a47 	vmov.f32	s16, s14
 80303da:	eef0 8a67 	vmov.f32	s17, s15
 80303de:	e9dd 6700 	ldrd	r6, r7, [sp]
 80303e2:	2600      	movs	r6, #0
 80303e4:	4632      	mov	r2, r6
 80303e6:	463b      	mov	r3, r7
 80303e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80303ec:	f7cf ff56 	bl	800029c <__aeabi_dsub>
 80303f0:	4622      	mov	r2, r4
 80303f2:	462b      	mov	r3, r5
 80303f4:	f7d0 f90a 	bl	800060c <__aeabi_dmul>
 80303f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80303fc:	4680      	mov	r8, r0
 80303fe:	4689      	mov	r9, r1
 8030400:	4650      	mov	r0, sl
 8030402:	4659      	mov	r1, fp
 8030404:	f7d0 f902 	bl	800060c <__aeabi_dmul>
 8030408:	4602      	mov	r2, r0
 803040a:	460b      	mov	r3, r1
 803040c:	4640      	mov	r0, r8
 803040e:	4649      	mov	r1, r9
 8030410:	f7cf ff46 	bl	80002a0 <__adddf3>
 8030414:	4632      	mov	r2, r6
 8030416:	463b      	mov	r3, r7
 8030418:	4680      	mov	r8, r0
 803041a:	4689      	mov	r9, r1
 803041c:	4620      	mov	r0, r4
 803041e:	4629      	mov	r1, r5
 8030420:	f7d0 f8f4 	bl	800060c <__aeabi_dmul>
 8030424:	460b      	mov	r3, r1
 8030426:	4604      	mov	r4, r0
 8030428:	460d      	mov	r5, r1
 803042a:	4602      	mov	r2, r0
 803042c:	4649      	mov	r1, r9
 803042e:	4640      	mov	r0, r8
 8030430:	f7cf ff36 	bl	80002a0 <__adddf3>
 8030434:	4b19      	ldr	r3, [pc, #100]	; (803049c <__ieee754_pow+0x3fc>)
 8030436:	4299      	cmp	r1, r3
 8030438:	ec45 4b19 	vmov	d9, r4, r5
 803043c:	4606      	mov	r6, r0
 803043e:	460f      	mov	r7, r1
 8030440:	468b      	mov	fp, r1
 8030442:	f340 82f1 	ble.w	8030a28 <__ieee754_pow+0x988>
 8030446:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 803044a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 803044e:	4303      	orrs	r3, r0
 8030450:	f000 81e4 	beq.w	803081c <__ieee754_pow+0x77c>
 8030454:	ec51 0b18 	vmov	r0, r1, d8
 8030458:	2200      	movs	r2, #0
 803045a:	2300      	movs	r3, #0
 803045c:	f7d0 fb48 	bl	8000af0 <__aeabi_dcmplt>
 8030460:	3800      	subs	r0, #0
 8030462:	bf18      	it	ne
 8030464:	2001      	movne	r0, #1
 8030466:	e72b      	b.n	80302c0 <__ieee754_pow+0x220>
 8030468:	60000000 	.word	0x60000000
 803046c:	3ff71547 	.word	0x3ff71547
 8030470:	f85ddf44 	.word	0xf85ddf44
 8030474:	3e54ae0b 	.word	0x3e54ae0b
 8030478:	55555555 	.word	0x55555555
 803047c:	3fd55555 	.word	0x3fd55555
 8030480:	652b82fe 	.word	0x652b82fe
 8030484:	3ff71547 	.word	0x3ff71547
 8030488:	00000000 	.word	0x00000000
 803048c:	bff00000 	.word	0xbff00000
 8030490:	3ff00000 	.word	0x3ff00000
 8030494:	3fd00000 	.word	0x3fd00000
 8030498:	3fe00000 	.word	0x3fe00000
 803049c:	408fffff 	.word	0x408fffff
 80304a0:	4bd5      	ldr	r3, [pc, #852]	; (80307f8 <__ieee754_pow+0x758>)
 80304a2:	402b      	ands	r3, r5
 80304a4:	2200      	movs	r2, #0
 80304a6:	b92b      	cbnz	r3, 80304b4 <__ieee754_pow+0x414>
 80304a8:	4bd4      	ldr	r3, [pc, #848]	; (80307fc <__ieee754_pow+0x75c>)
 80304aa:	f7d0 f8af 	bl	800060c <__aeabi_dmul>
 80304ae:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80304b2:	460c      	mov	r4, r1
 80304b4:	1523      	asrs	r3, r4, #20
 80304b6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80304ba:	4413      	add	r3, r2
 80304bc:	9305      	str	r3, [sp, #20]
 80304be:	4bd0      	ldr	r3, [pc, #832]	; (8030800 <__ieee754_pow+0x760>)
 80304c0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80304c4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80304c8:	429c      	cmp	r4, r3
 80304ca:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80304ce:	dd08      	ble.n	80304e2 <__ieee754_pow+0x442>
 80304d0:	4bcc      	ldr	r3, [pc, #816]	; (8030804 <__ieee754_pow+0x764>)
 80304d2:	429c      	cmp	r4, r3
 80304d4:	f340 8162 	ble.w	803079c <__ieee754_pow+0x6fc>
 80304d8:	9b05      	ldr	r3, [sp, #20]
 80304da:	3301      	adds	r3, #1
 80304dc:	9305      	str	r3, [sp, #20]
 80304de:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80304e2:	2400      	movs	r4, #0
 80304e4:	00e3      	lsls	r3, r4, #3
 80304e6:	9307      	str	r3, [sp, #28]
 80304e8:	4bc7      	ldr	r3, [pc, #796]	; (8030808 <__ieee754_pow+0x768>)
 80304ea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80304ee:	ed93 7b00 	vldr	d7, [r3]
 80304f2:	4629      	mov	r1, r5
 80304f4:	ec53 2b17 	vmov	r2, r3, d7
 80304f8:	eeb0 9a47 	vmov.f32	s18, s14
 80304fc:	eef0 9a67 	vmov.f32	s19, s15
 8030500:	4682      	mov	sl, r0
 8030502:	f7cf fecb 	bl	800029c <__aeabi_dsub>
 8030506:	4652      	mov	r2, sl
 8030508:	4606      	mov	r6, r0
 803050a:	460f      	mov	r7, r1
 803050c:	462b      	mov	r3, r5
 803050e:	ec51 0b19 	vmov	r0, r1, d9
 8030512:	f7cf fec5 	bl	80002a0 <__adddf3>
 8030516:	4602      	mov	r2, r0
 8030518:	460b      	mov	r3, r1
 803051a:	2000      	movs	r0, #0
 803051c:	49bb      	ldr	r1, [pc, #748]	; (803080c <__ieee754_pow+0x76c>)
 803051e:	f7d0 f99f 	bl	8000860 <__aeabi_ddiv>
 8030522:	ec41 0b1a 	vmov	d10, r0, r1
 8030526:	4602      	mov	r2, r0
 8030528:	460b      	mov	r3, r1
 803052a:	4630      	mov	r0, r6
 803052c:	4639      	mov	r1, r7
 803052e:	f7d0 f86d 	bl	800060c <__aeabi_dmul>
 8030532:	2300      	movs	r3, #0
 8030534:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8030538:	9302      	str	r3, [sp, #8]
 803053a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 803053e:	46ab      	mov	fp, r5
 8030540:	106d      	asrs	r5, r5, #1
 8030542:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8030546:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 803054a:	ec41 0b18 	vmov	d8, r0, r1
 803054e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8030552:	2200      	movs	r2, #0
 8030554:	4640      	mov	r0, r8
 8030556:	4649      	mov	r1, r9
 8030558:	4614      	mov	r4, r2
 803055a:	461d      	mov	r5, r3
 803055c:	f7d0 f856 	bl	800060c <__aeabi_dmul>
 8030560:	4602      	mov	r2, r0
 8030562:	460b      	mov	r3, r1
 8030564:	4630      	mov	r0, r6
 8030566:	4639      	mov	r1, r7
 8030568:	f7cf fe98 	bl	800029c <__aeabi_dsub>
 803056c:	ec53 2b19 	vmov	r2, r3, d9
 8030570:	4606      	mov	r6, r0
 8030572:	460f      	mov	r7, r1
 8030574:	4620      	mov	r0, r4
 8030576:	4629      	mov	r1, r5
 8030578:	f7cf fe90 	bl	800029c <__aeabi_dsub>
 803057c:	4602      	mov	r2, r0
 803057e:	460b      	mov	r3, r1
 8030580:	4650      	mov	r0, sl
 8030582:	4659      	mov	r1, fp
 8030584:	f7cf fe8a 	bl	800029c <__aeabi_dsub>
 8030588:	4642      	mov	r2, r8
 803058a:	464b      	mov	r3, r9
 803058c:	f7d0 f83e 	bl	800060c <__aeabi_dmul>
 8030590:	4602      	mov	r2, r0
 8030592:	460b      	mov	r3, r1
 8030594:	4630      	mov	r0, r6
 8030596:	4639      	mov	r1, r7
 8030598:	f7cf fe80 	bl	800029c <__aeabi_dsub>
 803059c:	ec53 2b1a 	vmov	r2, r3, d10
 80305a0:	f7d0 f834 	bl	800060c <__aeabi_dmul>
 80305a4:	ec53 2b18 	vmov	r2, r3, d8
 80305a8:	ec41 0b19 	vmov	d9, r0, r1
 80305ac:	ec51 0b18 	vmov	r0, r1, d8
 80305b0:	f7d0 f82c 	bl	800060c <__aeabi_dmul>
 80305b4:	a37c      	add	r3, pc, #496	; (adr r3, 80307a8 <__ieee754_pow+0x708>)
 80305b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80305ba:	4604      	mov	r4, r0
 80305bc:	460d      	mov	r5, r1
 80305be:	f7d0 f825 	bl	800060c <__aeabi_dmul>
 80305c2:	a37b      	add	r3, pc, #492	; (adr r3, 80307b0 <__ieee754_pow+0x710>)
 80305c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80305c8:	f7cf fe6a 	bl	80002a0 <__adddf3>
 80305cc:	4622      	mov	r2, r4
 80305ce:	462b      	mov	r3, r5
 80305d0:	f7d0 f81c 	bl	800060c <__aeabi_dmul>
 80305d4:	a378      	add	r3, pc, #480	; (adr r3, 80307b8 <__ieee754_pow+0x718>)
 80305d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80305da:	f7cf fe61 	bl	80002a0 <__adddf3>
 80305de:	4622      	mov	r2, r4
 80305e0:	462b      	mov	r3, r5
 80305e2:	f7d0 f813 	bl	800060c <__aeabi_dmul>
 80305e6:	a376      	add	r3, pc, #472	; (adr r3, 80307c0 <__ieee754_pow+0x720>)
 80305e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80305ec:	f7cf fe58 	bl	80002a0 <__adddf3>
 80305f0:	4622      	mov	r2, r4
 80305f2:	462b      	mov	r3, r5
 80305f4:	f7d0 f80a 	bl	800060c <__aeabi_dmul>
 80305f8:	a373      	add	r3, pc, #460	; (adr r3, 80307c8 <__ieee754_pow+0x728>)
 80305fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80305fe:	f7cf fe4f 	bl	80002a0 <__adddf3>
 8030602:	4622      	mov	r2, r4
 8030604:	462b      	mov	r3, r5
 8030606:	f7d0 f801 	bl	800060c <__aeabi_dmul>
 803060a:	a371      	add	r3, pc, #452	; (adr r3, 80307d0 <__ieee754_pow+0x730>)
 803060c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030610:	f7cf fe46 	bl	80002a0 <__adddf3>
 8030614:	4622      	mov	r2, r4
 8030616:	4606      	mov	r6, r0
 8030618:	460f      	mov	r7, r1
 803061a:	462b      	mov	r3, r5
 803061c:	4620      	mov	r0, r4
 803061e:	4629      	mov	r1, r5
 8030620:	f7cf fff4 	bl	800060c <__aeabi_dmul>
 8030624:	4602      	mov	r2, r0
 8030626:	460b      	mov	r3, r1
 8030628:	4630      	mov	r0, r6
 803062a:	4639      	mov	r1, r7
 803062c:	f7cf ffee 	bl	800060c <__aeabi_dmul>
 8030630:	4642      	mov	r2, r8
 8030632:	4604      	mov	r4, r0
 8030634:	460d      	mov	r5, r1
 8030636:	464b      	mov	r3, r9
 8030638:	ec51 0b18 	vmov	r0, r1, d8
 803063c:	f7cf fe30 	bl	80002a0 <__adddf3>
 8030640:	ec53 2b19 	vmov	r2, r3, d9
 8030644:	f7cf ffe2 	bl	800060c <__aeabi_dmul>
 8030648:	4622      	mov	r2, r4
 803064a:	462b      	mov	r3, r5
 803064c:	f7cf fe28 	bl	80002a0 <__adddf3>
 8030650:	4642      	mov	r2, r8
 8030652:	4682      	mov	sl, r0
 8030654:	468b      	mov	fp, r1
 8030656:	464b      	mov	r3, r9
 8030658:	4640      	mov	r0, r8
 803065a:	4649      	mov	r1, r9
 803065c:	f7cf ffd6 	bl	800060c <__aeabi_dmul>
 8030660:	4b6b      	ldr	r3, [pc, #428]	; (8030810 <__ieee754_pow+0x770>)
 8030662:	2200      	movs	r2, #0
 8030664:	4606      	mov	r6, r0
 8030666:	460f      	mov	r7, r1
 8030668:	f7cf fe1a 	bl	80002a0 <__adddf3>
 803066c:	4652      	mov	r2, sl
 803066e:	465b      	mov	r3, fp
 8030670:	f7cf fe16 	bl	80002a0 <__adddf3>
 8030674:	2000      	movs	r0, #0
 8030676:	4604      	mov	r4, r0
 8030678:	460d      	mov	r5, r1
 803067a:	4602      	mov	r2, r0
 803067c:	460b      	mov	r3, r1
 803067e:	4640      	mov	r0, r8
 8030680:	4649      	mov	r1, r9
 8030682:	f7cf ffc3 	bl	800060c <__aeabi_dmul>
 8030686:	4b62      	ldr	r3, [pc, #392]	; (8030810 <__ieee754_pow+0x770>)
 8030688:	4680      	mov	r8, r0
 803068a:	4689      	mov	r9, r1
 803068c:	2200      	movs	r2, #0
 803068e:	4620      	mov	r0, r4
 8030690:	4629      	mov	r1, r5
 8030692:	f7cf fe03 	bl	800029c <__aeabi_dsub>
 8030696:	4632      	mov	r2, r6
 8030698:	463b      	mov	r3, r7
 803069a:	f7cf fdff 	bl	800029c <__aeabi_dsub>
 803069e:	4602      	mov	r2, r0
 80306a0:	460b      	mov	r3, r1
 80306a2:	4650      	mov	r0, sl
 80306a4:	4659      	mov	r1, fp
 80306a6:	f7cf fdf9 	bl	800029c <__aeabi_dsub>
 80306aa:	ec53 2b18 	vmov	r2, r3, d8
 80306ae:	f7cf ffad 	bl	800060c <__aeabi_dmul>
 80306b2:	4622      	mov	r2, r4
 80306b4:	4606      	mov	r6, r0
 80306b6:	460f      	mov	r7, r1
 80306b8:	462b      	mov	r3, r5
 80306ba:	ec51 0b19 	vmov	r0, r1, d9
 80306be:	f7cf ffa5 	bl	800060c <__aeabi_dmul>
 80306c2:	4602      	mov	r2, r0
 80306c4:	460b      	mov	r3, r1
 80306c6:	4630      	mov	r0, r6
 80306c8:	4639      	mov	r1, r7
 80306ca:	f7cf fde9 	bl	80002a0 <__adddf3>
 80306ce:	4606      	mov	r6, r0
 80306d0:	460f      	mov	r7, r1
 80306d2:	4602      	mov	r2, r0
 80306d4:	460b      	mov	r3, r1
 80306d6:	4640      	mov	r0, r8
 80306d8:	4649      	mov	r1, r9
 80306da:	f7cf fde1 	bl	80002a0 <__adddf3>
 80306de:	a33e      	add	r3, pc, #248	; (adr r3, 80307d8 <__ieee754_pow+0x738>)
 80306e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80306e4:	2000      	movs	r0, #0
 80306e6:	4604      	mov	r4, r0
 80306e8:	460d      	mov	r5, r1
 80306ea:	f7cf ff8f 	bl	800060c <__aeabi_dmul>
 80306ee:	4642      	mov	r2, r8
 80306f0:	ec41 0b18 	vmov	d8, r0, r1
 80306f4:	464b      	mov	r3, r9
 80306f6:	4620      	mov	r0, r4
 80306f8:	4629      	mov	r1, r5
 80306fa:	f7cf fdcf 	bl	800029c <__aeabi_dsub>
 80306fe:	4602      	mov	r2, r0
 8030700:	460b      	mov	r3, r1
 8030702:	4630      	mov	r0, r6
 8030704:	4639      	mov	r1, r7
 8030706:	f7cf fdc9 	bl	800029c <__aeabi_dsub>
 803070a:	a335      	add	r3, pc, #212	; (adr r3, 80307e0 <__ieee754_pow+0x740>)
 803070c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030710:	f7cf ff7c 	bl	800060c <__aeabi_dmul>
 8030714:	a334      	add	r3, pc, #208	; (adr r3, 80307e8 <__ieee754_pow+0x748>)
 8030716:	e9d3 2300 	ldrd	r2, r3, [r3]
 803071a:	4606      	mov	r6, r0
 803071c:	460f      	mov	r7, r1
 803071e:	4620      	mov	r0, r4
 8030720:	4629      	mov	r1, r5
 8030722:	f7cf ff73 	bl	800060c <__aeabi_dmul>
 8030726:	4602      	mov	r2, r0
 8030728:	460b      	mov	r3, r1
 803072a:	4630      	mov	r0, r6
 803072c:	4639      	mov	r1, r7
 803072e:	f7cf fdb7 	bl	80002a0 <__adddf3>
 8030732:	9a07      	ldr	r2, [sp, #28]
 8030734:	4b37      	ldr	r3, [pc, #220]	; (8030814 <__ieee754_pow+0x774>)
 8030736:	4413      	add	r3, r2
 8030738:	e9d3 2300 	ldrd	r2, r3, [r3]
 803073c:	f7cf fdb0 	bl	80002a0 <__adddf3>
 8030740:	4682      	mov	sl, r0
 8030742:	9805      	ldr	r0, [sp, #20]
 8030744:	468b      	mov	fp, r1
 8030746:	f7cf fef7 	bl	8000538 <__aeabi_i2d>
 803074a:	9a07      	ldr	r2, [sp, #28]
 803074c:	4b32      	ldr	r3, [pc, #200]	; (8030818 <__ieee754_pow+0x778>)
 803074e:	4413      	add	r3, r2
 8030750:	e9d3 8900 	ldrd	r8, r9, [r3]
 8030754:	4606      	mov	r6, r0
 8030756:	460f      	mov	r7, r1
 8030758:	4652      	mov	r2, sl
 803075a:	465b      	mov	r3, fp
 803075c:	ec51 0b18 	vmov	r0, r1, d8
 8030760:	f7cf fd9e 	bl	80002a0 <__adddf3>
 8030764:	4642      	mov	r2, r8
 8030766:	464b      	mov	r3, r9
 8030768:	f7cf fd9a 	bl	80002a0 <__adddf3>
 803076c:	4632      	mov	r2, r6
 803076e:	463b      	mov	r3, r7
 8030770:	f7cf fd96 	bl	80002a0 <__adddf3>
 8030774:	2000      	movs	r0, #0
 8030776:	4632      	mov	r2, r6
 8030778:	463b      	mov	r3, r7
 803077a:	4604      	mov	r4, r0
 803077c:	460d      	mov	r5, r1
 803077e:	f7cf fd8d 	bl	800029c <__aeabi_dsub>
 8030782:	4642      	mov	r2, r8
 8030784:	464b      	mov	r3, r9
 8030786:	f7cf fd89 	bl	800029c <__aeabi_dsub>
 803078a:	ec53 2b18 	vmov	r2, r3, d8
 803078e:	f7cf fd85 	bl	800029c <__aeabi_dsub>
 8030792:	4602      	mov	r2, r0
 8030794:	460b      	mov	r3, r1
 8030796:	4650      	mov	r0, sl
 8030798:	4659      	mov	r1, fp
 803079a:	e610      	b.n	80303be <__ieee754_pow+0x31e>
 803079c:	2401      	movs	r4, #1
 803079e:	e6a1      	b.n	80304e4 <__ieee754_pow+0x444>
 80307a0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80307f0 <__ieee754_pow+0x750>
 80307a4:	e617      	b.n	80303d6 <__ieee754_pow+0x336>
 80307a6:	bf00      	nop
 80307a8:	4a454eef 	.word	0x4a454eef
 80307ac:	3fca7e28 	.word	0x3fca7e28
 80307b0:	93c9db65 	.word	0x93c9db65
 80307b4:	3fcd864a 	.word	0x3fcd864a
 80307b8:	a91d4101 	.word	0xa91d4101
 80307bc:	3fd17460 	.word	0x3fd17460
 80307c0:	518f264d 	.word	0x518f264d
 80307c4:	3fd55555 	.word	0x3fd55555
 80307c8:	db6fabff 	.word	0xdb6fabff
 80307cc:	3fdb6db6 	.word	0x3fdb6db6
 80307d0:	33333303 	.word	0x33333303
 80307d4:	3fe33333 	.word	0x3fe33333
 80307d8:	e0000000 	.word	0xe0000000
 80307dc:	3feec709 	.word	0x3feec709
 80307e0:	dc3a03fd 	.word	0xdc3a03fd
 80307e4:	3feec709 	.word	0x3feec709
 80307e8:	145b01f5 	.word	0x145b01f5
 80307ec:	be3e2fe0 	.word	0xbe3e2fe0
 80307f0:	00000000 	.word	0x00000000
 80307f4:	3ff00000 	.word	0x3ff00000
 80307f8:	7ff00000 	.word	0x7ff00000
 80307fc:	43400000 	.word	0x43400000
 8030800:	0003988e 	.word	0x0003988e
 8030804:	000bb679 	.word	0x000bb679
 8030808:	08037f60 	.word	0x08037f60
 803080c:	3ff00000 	.word	0x3ff00000
 8030810:	40080000 	.word	0x40080000
 8030814:	08037f80 	.word	0x08037f80
 8030818:	08037f70 	.word	0x08037f70
 803081c:	a3b5      	add	r3, pc, #724	; (adr r3, 8030af4 <__ieee754_pow+0xa54>)
 803081e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030822:	4640      	mov	r0, r8
 8030824:	4649      	mov	r1, r9
 8030826:	f7cf fd3b 	bl	80002a0 <__adddf3>
 803082a:	4622      	mov	r2, r4
 803082c:	ec41 0b1a 	vmov	d10, r0, r1
 8030830:	462b      	mov	r3, r5
 8030832:	4630      	mov	r0, r6
 8030834:	4639      	mov	r1, r7
 8030836:	f7cf fd31 	bl	800029c <__aeabi_dsub>
 803083a:	4602      	mov	r2, r0
 803083c:	460b      	mov	r3, r1
 803083e:	ec51 0b1a 	vmov	r0, r1, d10
 8030842:	f7d0 f973 	bl	8000b2c <__aeabi_dcmpgt>
 8030846:	2800      	cmp	r0, #0
 8030848:	f47f ae04 	bne.w	8030454 <__ieee754_pow+0x3b4>
 803084c:	4aa4      	ldr	r2, [pc, #656]	; (8030ae0 <__ieee754_pow+0xa40>)
 803084e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8030852:	4293      	cmp	r3, r2
 8030854:	f340 8108 	ble.w	8030a68 <__ieee754_pow+0x9c8>
 8030858:	151b      	asrs	r3, r3, #20
 803085a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 803085e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8030862:	fa4a f303 	asr.w	r3, sl, r3
 8030866:	445b      	add	r3, fp
 8030868:	f3c3 520a 	ubfx	r2, r3, #20, #11
 803086c:	4e9d      	ldr	r6, [pc, #628]	; (8030ae4 <__ieee754_pow+0xa44>)
 803086e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8030872:	4116      	asrs	r6, r2
 8030874:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8030878:	2000      	movs	r0, #0
 803087a:	ea23 0106 	bic.w	r1, r3, r6
 803087e:	f1c2 0214 	rsb	r2, r2, #20
 8030882:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8030886:	fa4a fa02 	asr.w	sl, sl, r2
 803088a:	f1bb 0f00 	cmp.w	fp, #0
 803088e:	4602      	mov	r2, r0
 8030890:	460b      	mov	r3, r1
 8030892:	4620      	mov	r0, r4
 8030894:	4629      	mov	r1, r5
 8030896:	bfb8      	it	lt
 8030898:	f1ca 0a00 	rsblt	sl, sl, #0
 803089c:	f7cf fcfe 	bl	800029c <__aeabi_dsub>
 80308a0:	ec41 0b19 	vmov	d9, r0, r1
 80308a4:	4642      	mov	r2, r8
 80308a6:	464b      	mov	r3, r9
 80308a8:	ec51 0b19 	vmov	r0, r1, d9
 80308ac:	f7cf fcf8 	bl	80002a0 <__adddf3>
 80308b0:	a37b      	add	r3, pc, #492	; (adr r3, 8030aa0 <__ieee754_pow+0xa00>)
 80308b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80308b6:	2000      	movs	r0, #0
 80308b8:	4604      	mov	r4, r0
 80308ba:	460d      	mov	r5, r1
 80308bc:	f7cf fea6 	bl	800060c <__aeabi_dmul>
 80308c0:	ec53 2b19 	vmov	r2, r3, d9
 80308c4:	4606      	mov	r6, r0
 80308c6:	460f      	mov	r7, r1
 80308c8:	4620      	mov	r0, r4
 80308ca:	4629      	mov	r1, r5
 80308cc:	f7cf fce6 	bl	800029c <__aeabi_dsub>
 80308d0:	4602      	mov	r2, r0
 80308d2:	460b      	mov	r3, r1
 80308d4:	4640      	mov	r0, r8
 80308d6:	4649      	mov	r1, r9
 80308d8:	f7cf fce0 	bl	800029c <__aeabi_dsub>
 80308dc:	a372      	add	r3, pc, #456	; (adr r3, 8030aa8 <__ieee754_pow+0xa08>)
 80308de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80308e2:	f7cf fe93 	bl	800060c <__aeabi_dmul>
 80308e6:	a372      	add	r3, pc, #456	; (adr r3, 8030ab0 <__ieee754_pow+0xa10>)
 80308e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80308ec:	4680      	mov	r8, r0
 80308ee:	4689      	mov	r9, r1
 80308f0:	4620      	mov	r0, r4
 80308f2:	4629      	mov	r1, r5
 80308f4:	f7cf fe8a 	bl	800060c <__aeabi_dmul>
 80308f8:	4602      	mov	r2, r0
 80308fa:	460b      	mov	r3, r1
 80308fc:	4640      	mov	r0, r8
 80308fe:	4649      	mov	r1, r9
 8030900:	f7cf fcce 	bl	80002a0 <__adddf3>
 8030904:	4604      	mov	r4, r0
 8030906:	460d      	mov	r5, r1
 8030908:	4602      	mov	r2, r0
 803090a:	460b      	mov	r3, r1
 803090c:	4630      	mov	r0, r6
 803090e:	4639      	mov	r1, r7
 8030910:	f7cf fcc6 	bl	80002a0 <__adddf3>
 8030914:	4632      	mov	r2, r6
 8030916:	463b      	mov	r3, r7
 8030918:	4680      	mov	r8, r0
 803091a:	4689      	mov	r9, r1
 803091c:	f7cf fcbe 	bl	800029c <__aeabi_dsub>
 8030920:	4602      	mov	r2, r0
 8030922:	460b      	mov	r3, r1
 8030924:	4620      	mov	r0, r4
 8030926:	4629      	mov	r1, r5
 8030928:	f7cf fcb8 	bl	800029c <__aeabi_dsub>
 803092c:	4642      	mov	r2, r8
 803092e:	4606      	mov	r6, r0
 8030930:	460f      	mov	r7, r1
 8030932:	464b      	mov	r3, r9
 8030934:	4640      	mov	r0, r8
 8030936:	4649      	mov	r1, r9
 8030938:	f7cf fe68 	bl	800060c <__aeabi_dmul>
 803093c:	a35e      	add	r3, pc, #376	; (adr r3, 8030ab8 <__ieee754_pow+0xa18>)
 803093e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030942:	4604      	mov	r4, r0
 8030944:	460d      	mov	r5, r1
 8030946:	f7cf fe61 	bl	800060c <__aeabi_dmul>
 803094a:	a35d      	add	r3, pc, #372	; (adr r3, 8030ac0 <__ieee754_pow+0xa20>)
 803094c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030950:	f7cf fca4 	bl	800029c <__aeabi_dsub>
 8030954:	4622      	mov	r2, r4
 8030956:	462b      	mov	r3, r5
 8030958:	f7cf fe58 	bl	800060c <__aeabi_dmul>
 803095c:	a35a      	add	r3, pc, #360	; (adr r3, 8030ac8 <__ieee754_pow+0xa28>)
 803095e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030962:	f7cf fc9d 	bl	80002a0 <__adddf3>
 8030966:	4622      	mov	r2, r4
 8030968:	462b      	mov	r3, r5
 803096a:	f7cf fe4f 	bl	800060c <__aeabi_dmul>
 803096e:	a358      	add	r3, pc, #352	; (adr r3, 8030ad0 <__ieee754_pow+0xa30>)
 8030970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030974:	f7cf fc92 	bl	800029c <__aeabi_dsub>
 8030978:	4622      	mov	r2, r4
 803097a:	462b      	mov	r3, r5
 803097c:	f7cf fe46 	bl	800060c <__aeabi_dmul>
 8030980:	a355      	add	r3, pc, #340	; (adr r3, 8030ad8 <__ieee754_pow+0xa38>)
 8030982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030986:	f7cf fc8b 	bl	80002a0 <__adddf3>
 803098a:	4622      	mov	r2, r4
 803098c:	462b      	mov	r3, r5
 803098e:	f7cf fe3d 	bl	800060c <__aeabi_dmul>
 8030992:	4602      	mov	r2, r0
 8030994:	460b      	mov	r3, r1
 8030996:	4640      	mov	r0, r8
 8030998:	4649      	mov	r1, r9
 803099a:	f7cf fc7f 	bl	800029c <__aeabi_dsub>
 803099e:	4604      	mov	r4, r0
 80309a0:	460d      	mov	r5, r1
 80309a2:	4602      	mov	r2, r0
 80309a4:	460b      	mov	r3, r1
 80309a6:	4640      	mov	r0, r8
 80309a8:	4649      	mov	r1, r9
 80309aa:	f7cf fe2f 	bl	800060c <__aeabi_dmul>
 80309ae:	2200      	movs	r2, #0
 80309b0:	ec41 0b19 	vmov	d9, r0, r1
 80309b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80309b8:	4620      	mov	r0, r4
 80309ba:	4629      	mov	r1, r5
 80309bc:	f7cf fc6e 	bl	800029c <__aeabi_dsub>
 80309c0:	4602      	mov	r2, r0
 80309c2:	460b      	mov	r3, r1
 80309c4:	ec51 0b19 	vmov	r0, r1, d9
 80309c8:	f7cf ff4a 	bl	8000860 <__aeabi_ddiv>
 80309cc:	4632      	mov	r2, r6
 80309ce:	4604      	mov	r4, r0
 80309d0:	460d      	mov	r5, r1
 80309d2:	463b      	mov	r3, r7
 80309d4:	4640      	mov	r0, r8
 80309d6:	4649      	mov	r1, r9
 80309d8:	f7cf fe18 	bl	800060c <__aeabi_dmul>
 80309dc:	4632      	mov	r2, r6
 80309de:	463b      	mov	r3, r7
 80309e0:	f7cf fc5e 	bl	80002a0 <__adddf3>
 80309e4:	4602      	mov	r2, r0
 80309e6:	460b      	mov	r3, r1
 80309e8:	4620      	mov	r0, r4
 80309ea:	4629      	mov	r1, r5
 80309ec:	f7cf fc56 	bl	800029c <__aeabi_dsub>
 80309f0:	4642      	mov	r2, r8
 80309f2:	464b      	mov	r3, r9
 80309f4:	f7cf fc52 	bl	800029c <__aeabi_dsub>
 80309f8:	460b      	mov	r3, r1
 80309fa:	4602      	mov	r2, r0
 80309fc:	493a      	ldr	r1, [pc, #232]	; (8030ae8 <__ieee754_pow+0xa48>)
 80309fe:	2000      	movs	r0, #0
 8030a00:	f7cf fc4c 	bl	800029c <__aeabi_dsub>
 8030a04:	ec41 0b10 	vmov	d0, r0, r1
 8030a08:	ee10 3a90 	vmov	r3, s1
 8030a0c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8030a10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8030a14:	da2b      	bge.n	8030a6e <__ieee754_pow+0x9ce>
 8030a16:	4650      	mov	r0, sl
 8030a18:	f001 fa86 	bl	8031f28 <scalbn>
 8030a1c:	ec51 0b10 	vmov	r0, r1, d0
 8030a20:	ec53 2b18 	vmov	r2, r3, d8
 8030a24:	f7ff bbed 	b.w	8030202 <__ieee754_pow+0x162>
 8030a28:	4b30      	ldr	r3, [pc, #192]	; (8030aec <__ieee754_pow+0xa4c>)
 8030a2a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8030a2e:	429e      	cmp	r6, r3
 8030a30:	f77f af0c 	ble.w	803084c <__ieee754_pow+0x7ac>
 8030a34:	4b2e      	ldr	r3, [pc, #184]	; (8030af0 <__ieee754_pow+0xa50>)
 8030a36:	440b      	add	r3, r1
 8030a38:	4303      	orrs	r3, r0
 8030a3a:	d009      	beq.n	8030a50 <__ieee754_pow+0x9b0>
 8030a3c:	ec51 0b18 	vmov	r0, r1, d8
 8030a40:	2200      	movs	r2, #0
 8030a42:	2300      	movs	r3, #0
 8030a44:	f7d0 f854 	bl	8000af0 <__aeabi_dcmplt>
 8030a48:	3800      	subs	r0, #0
 8030a4a:	bf18      	it	ne
 8030a4c:	2001      	movne	r0, #1
 8030a4e:	e447      	b.n	80302e0 <__ieee754_pow+0x240>
 8030a50:	4622      	mov	r2, r4
 8030a52:	462b      	mov	r3, r5
 8030a54:	f7cf fc22 	bl	800029c <__aeabi_dsub>
 8030a58:	4642      	mov	r2, r8
 8030a5a:	464b      	mov	r3, r9
 8030a5c:	f7d0 f85c 	bl	8000b18 <__aeabi_dcmpge>
 8030a60:	2800      	cmp	r0, #0
 8030a62:	f43f aef3 	beq.w	803084c <__ieee754_pow+0x7ac>
 8030a66:	e7e9      	b.n	8030a3c <__ieee754_pow+0x99c>
 8030a68:	f04f 0a00 	mov.w	sl, #0
 8030a6c:	e71a      	b.n	80308a4 <__ieee754_pow+0x804>
 8030a6e:	ec51 0b10 	vmov	r0, r1, d0
 8030a72:	4619      	mov	r1, r3
 8030a74:	e7d4      	b.n	8030a20 <__ieee754_pow+0x980>
 8030a76:	491c      	ldr	r1, [pc, #112]	; (8030ae8 <__ieee754_pow+0xa48>)
 8030a78:	2000      	movs	r0, #0
 8030a7a:	f7ff bb30 	b.w	80300de <__ieee754_pow+0x3e>
 8030a7e:	2000      	movs	r0, #0
 8030a80:	2100      	movs	r1, #0
 8030a82:	f7ff bb2c 	b.w	80300de <__ieee754_pow+0x3e>
 8030a86:	4630      	mov	r0, r6
 8030a88:	4639      	mov	r1, r7
 8030a8a:	f7ff bb28 	b.w	80300de <__ieee754_pow+0x3e>
 8030a8e:	9204      	str	r2, [sp, #16]
 8030a90:	f7ff bb7a 	b.w	8030188 <__ieee754_pow+0xe8>
 8030a94:	2300      	movs	r3, #0
 8030a96:	f7ff bb64 	b.w	8030162 <__ieee754_pow+0xc2>
 8030a9a:	bf00      	nop
 8030a9c:	f3af 8000 	nop.w
 8030aa0:	00000000 	.word	0x00000000
 8030aa4:	3fe62e43 	.word	0x3fe62e43
 8030aa8:	fefa39ef 	.word	0xfefa39ef
 8030aac:	3fe62e42 	.word	0x3fe62e42
 8030ab0:	0ca86c39 	.word	0x0ca86c39
 8030ab4:	be205c61 	.word	0xbe205c61
 8030ab8:	72bea4d0 	.word	0x72bea4d0
 8030abc:	3e663769 	.word	0x3e663769
 8030ac0:	c5d26bf1 	.word	0xc5d26bf1
 8030ac4:	3ebbbd41 	.word	0x3ebbbd41
 8030ac8:	af25de2c 	.word	0xaf25de2c
 8030acc:	3f11566a 	.word	0x3f11566a
 8030ad0:	16bebd93 	.word	0x16bebd93
 8030ad4:	3f66c16c 	.word	0x3f66c16c
 8030ad8:	5555553e 	.word	0x5555553e
 8030adc:	3fc55555 	.word	0x3fc55555
 8030ae0:	3fe00000 	.word	0x3fe00000
 8030ae4:	000fffff 	.word	0x000fffff
 8030ae8:	3ff00000 	.word	0x3ff00000
 8030aec:	4090cbff 	.word	0x4090cbff
 8030af0:	3f6f3400 	.word	0x3f6f3400
 8030af4:	652b82fe 	.word	0x652b82fe
 8030af8:	3c971547 	.word	0x3c971547
 8030afc:	00000000 	.word	0x00000000

08030b00 <__ieee754_rem_pio2>:
 8030b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8030b04:	ed2d 8b02 	vpush	{d8}
 8030b08:	ec55 4b10 	vmov	r4, r5, d0
 8030b0c:	4bca      	ldr	r3, [pc, #808]	; (8030e38 <__ieee754_rem_pio2+0x338>)
 8030b0e:	b08b      	sub	sp, #44	; 0x2c
 8030b10:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8030b14:	4598      	cmp	r8, r3
 8030b16:	4682      	mov	sl, r0
 8030b18:	9502      	str	r5, [sp, #8]
 8030b1a:	dc08      	bgt.n	8030b2e <__ieee754_rem_pio2+0x2e>
 8030b1c:	2200      	movs	r2, #0
 8030b1e:	2300      	movs	r3, #0
 8030b20:	ed80 0b00 	vstr	d0, [r0]
 8030b24:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8030b28:	f04f 0b00 	mov.w	fp, #0
 8030b2c:	e028      	b.n	8030b80 <__ieee754_rem_pio2+0x80>
 8030b2e:	4bc3      	ldr	r3, [pc, #780]	; (8030e3c <__ieee754_rem_pio2+0x33c>)
 8030b30:	4598      	cmp	r8, r3
 8030b32:	dc78      	bgt.n	8030c26 <__ieee754_rem_pio2+0x126>
 8030b34:	9b02      	ldr	r3, [sp, #8]
 8030b36:	4ec2      	ldr	r6, [pc, #776]	; (8030e40 <__ieee754_rem_pio2+0x340>)
 8030b38:	2b00      	cmp	r3, #0
 8030b3a:	ee10 0a10 	vmov	r0, s0
 8030b3e:	a3b0      	add	r3, pc, #704	; (adr r3, 8030e00 <__ieee754_rem_pio2+0x300>)
 8030b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030b44:	4629      	mov	r1, r5
 8030b46:	dd39      	ble.n	8030bbc <__ieee754_rem_pio2+0xbc>
 8030b48:	f7cf fba8 	bl	800029c <__aeabi_dsub>
 8030b4c:	45b0      	cmp	r8, r6
 8030b4e:	4604      	mov	r4, r0
 8030b50:	460d      	mov	r5, r1
 8030b52:	d01b      	beq.n	8030b8c <__ieee754_rem_pio2+0x8c>
 8030b54:	a3ac      	add	r3, pc, #688	; (adr r3, 8030e08 <__ieee754_rem_pio2+0x308>)
 8030b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030b5a:	f7cf fb9f 	bl	800029c <__aeabi_dsub>
 8030b5e:	4602      	mov	r2, r0
 8030b60:	460b      	mov	r3, r1
 8030b62:	e9ca 2300 	strd	r2, r3, [sl]
 8030b66:	4620      	mov	r0, r4
 8030b68:	4629      	mov	r1, r5
 8030b6a:	f7cf fb97 	bl	800029c <__aeabi_dsub>
 8030b6e:	a3a6      	add	r3, pc, #664	; (adr r3, 8030e08 <__ieee754_rem_pio2+0x308>)
 8030b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030b74:	f7cf fb92 	bl	800029c <__aeabi_dsub>
 8030b78:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8030b7c:	f04f 0b01 	mov.w	fp, #1
 8030b80:	4658      	mov	r0, fp
 8030b82:	b00b      	add	sp, #44	; 0x2c
 8030b84:	ecbd 8b02 	vpop	{d8}
 8030b88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8030b8c:	a3a0      	add	r3, pc, #640	; (adr r3, 8030e10 <__ieee754_rem_pio2+0x310>)
 8030b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030b92:	f7cf fb83 	bl	800029c <__aeabi_dsub>
 8030b96:	a3a0      	add	r3, pc, #640	; (adr r3, 8030e18 <__ieee754_rem_pio2+0x318>)
 8030b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030b9c:	4604      	mov	r4, r0
 8030b9e:	460d      	mov	r5, r1
 8030ba0:	f7cf fb7c 	bl	800029c <__aeabi_dsub>
 8030ba4:	4602      	mov	r2, r0
 8030ba6:	460b      	mov	r3, r1
 8030ba8:	e9ca 2300 	strd	r2, r3, [sl]
 8030bac:	4620      	mov	r0, r4
 8030bae:	4629      	mov	r1, r5
 8030bb0:	f7cf fb74 	bl	800029c <__aeabi_dsub>
 8030bb4:	a398      	add	r3, pc, #608	; (adr r3, 8030e18 <__ieee754_rem_pio2+0x318>)
 8030bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030bba:	e7db      	b.n	8030b74 <__ieee754_rem_pio2+0x74>
 8030bbc:	f7cf fb70 	bl	80002a0 <__adddf3>
 8030bc0:	45b0      	cmp	r8, r6
 8030bc2:	4604      	mov	r4, r0
 8030bc4:	460d      	mov	r5, r1
 8030bc6:	d016      	beq.n	8030bf6 <__ieee754_rem_pio2+0xf6>
 8030bc8:	a38f      	add	r3, pc, #572	; (adr r3, 8030e08 <__ieee754_rem_pio2+0x308>)
 8030bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030bce:	f7cf fb67 	bl	80002a0 <__adddf3>
 8030bd2:	4602      	mov	r2, r0
 8030bd4:	460b      	mov	r3, r1
 8030bd6:	e9ca 2300 	strd	r2, r3, [sl]
 8030bda:	4620      	mov	r0, r4
 8030bdc:	4629      	mov	r1, r5
 8030bde:	f7cf fb5d 	bl	800029c <__aeabi_dsub>
 8030be2:	a389      	add	r3, pc, #548	; (adr r3, 8030e08 <__ieee754_rem_pio2+0x308>)
 8030be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030be8:	f7cf fb5a 	bl	80002a0 <__adddf3>
 8030bec:	f04f 3bff 	mov.w	fp, #4294967295
 8030bf0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8030bf4:	e7c4      	b.n	8030b80 <__ieee754_rem_pio2+0x80>
 8030bf6:	a386      	add	r3, pc, #536	; (adr r3, 8030e10 <__ieee754_rem_pio2+0x310>)
 8030bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030bfc:	f7cf fb50 	bl	80002a0 <__adddf3>
 8030c00:	a385      	add	r3, pc, #532	; (adr r3, 8030e18 <__ieee754_rem_pio2+0x318>)
 8030c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030c06:	4604      	mov	r4, r0
 8030c08:	460d      	mov	r5, r1
 8030c0a:	f7cf fb49 	bl	80002a0 <__adddf3>
 8030c0e:	4602      	mov	r2, r0
 8030c10:	460b      	mov	r3, r1
 8030c12:	e9ca 2300 	strd	r2, r3, [sl]
 8030c16:	4620      	mov	r0, r4
 8030c18:	4629      	mov	r1, r5
 8030c1a:	f7cf fb3f 	bl	800029c <__aeabi_dsub>
 8030c1e:	a37e      	add	r3, pc, #504	; (adr r3, 8030e18 <__ieee754_rem_pio2+0x318>)
 8030c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030c24:	e7e0      	b.n	8030be8 <__ieee754_rem_pio2+0xe8>
 8030c26:	4b87      	ldr	r3, [pc, #540]	; (8030e44 <__ieee754_rem_pio2+0x344>)
 8030c28:	4598      	cmp	r8, r3
 8030c2a:	f300 80d9 	bgt.w	8030de0 <__ieee754_rem_pio2+0x2e0>
 8030c2e:	f001 f967 	bl	8031f00 <fabs>
 8030c32:	ec55 4b10 	vmov	r4, r5, d0
 8030c36:	ee10 0a10 	vmov	r0, s0
 8030c3a:	a379      	add	r3, pc, #484	; (adr r3, 8030e20 <__ieee754_rem_pio2+0x320>)
 8030c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030c40:	4629      	mov	r1, r5
 8030c42:	f7cf fce3 	bl	800060c <__aeabi_dmul>
 8030c46:	4b80      	ldr	r3, [pc, #512]	; (8030e48 <__ieee754_rem_pio2+0x348>)
 8030c48:	2200      	movs	r2, #0
 8030c4a:	f7cf fb29 	bl	80002a0 <__adddf3>
 8030c4e:	f7cf ff8d 	bl	8000b6c <__aeabi_d2iz>
 8030c52:	4683      	mov	fp, r0
 8030c54:	f7cf fc70 	bl	8000538 <__aeabi_i2d>
 8030c58:	4602      	mov	r2, r0
 8030c5a:	460b      	mov	r3, r1
 8030c5c:	ec43 2b18 	vmov	d8, r2, r3
 8030c60:	a367      	add	r3, pc, #412	; (adr r3, 8030e00 <__ieee754_rem_pio2+0x300>)
 8030c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030c66:	f7cf fcd1 	bl	800060c <__aeabi_dmul>
 8030c6a:	4602      	mov	r2, r0
 8030c6c:	460b      	mov	r3, r1
 8030c6e:	4620      	mov	r0, r4
 8030c70:	4629      	mov	r1, r5
 8030c72:	f7cf fb13 	bl	800029c <__aeabi_dsub>
 8030c76:	a364      	add	r3, pc, #400	; (adr r3, 8030e08 <__ieee754_rem_pio2+0x308>)
 8030c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030c7c:	4606      	mov	r6, r0
 8030c7e:	460f      	mov	r7, r1
 8030c80:	ec51 0b18 	vmov	r0, r1, d8
 8030c84:	f7cf fcc2 	bl	800060c <__aeabi_dmul>
 8030c88:	f1bb 0f1f 	cmp.w	fp, #31
 8030c8c:	4604      	mov	r4, r0
 8030c8e:	460d      	mov	r5, r1
 8030c90:	dc0d      	bgt.n	8030cae <__ieee754_rem_pio2+0x1ae>
 8030c92:	4b6e      	ldr	r3, [pc, #440]	; (8030e4c <__ieee754_rem_pio2+0x34c>)
 8030c94:	f10b 32ff 	add.w	r2, fp, #4294967295
 8030c98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8030c9c:	4543      	cmp	r3, r8
 8030c9e:	d006      	beq.n	8030cae <__ieee754_rem_pio2+0x1ae>
 8030ca0:	4622      	mov	r2, r4
 8030ca2:	462b      	mov	r3, r5
 8030ca4:	4630      	mov	r0, r6
 8030ca6:	4639      	mov	r1, r7
 8030ca8:	f7cf faf8 	bl	800029c <__aeabi_dsub>
 8030cac:	e00f      	b.n	8030cce <__ieee754_rem_pio2+0x1ce>
 8030cae:	462b      	mov	r3, r5
 8030cb0:	4622      	mov	r2, r4
 8030cb2:	4630      	mov	r0, r6
 8030cb4:	4639      	mov	r1, r7
 8030cb6:	f7cf faf1 	bl	800029c <__aeabi_dsub>
 8030cba:	ea4f 5328 	mov.w	r3, r8, asr #20
 8030cbe:	9303      	str	r3, [sp, #12]
 8030cc0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8030cc4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8030cc8:	f1b8 0f10 	cmp.w	r8, #16
 8030ccc:	dc02      	bgt.n	8030cd4 <__ieee754_rem_pio2+0x1d4>
 8030cce:	e9ca 0100 	strd	r0, r1, [sl]
 8030cd2:	e039      	b.n	8030d48 <__ieee754_rem_pio2+0x248>
 8030cd4:	a34e      	add	r3, pc, #312	; (adr r3, 8030e10 <__ieee754_rem_pio2+0x310>)
 8030cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030cda:	ec51 0b18 	vmov	r0, r1, d8
 8030cde:	f7cf fc95 	bl	800060c <__aeabi_dmul>
 8030ce2:	4604      	mov	r4, r0
 8030ce4:	460d      	mov	r5, r1
 8030ce6:	4602      	mov	r2, r0
 8030ce8:	460b      	mov	r3, r1
 8030cea:	4630      	mov	r0, r6
 8030cec:	4639      	mov	r1, r7
 8030cee:	f7cf fad5 	bl	800029c <__aeabi_dsub>
 8030cf2:	4602      	mov	r2, r0
 8030cf4:	460b      	mov	r3, r1
 8030cf6:	4680      	mov	r8, r0
 8030cf8:	4689      	mov	r9, r1
 8030cfa:	4630      	mov	r0, r6
 8030cfc:	4639      	mov	r1, r7
 8030cfe:	f7cf facd 	bl	800029c <__aeabi_dsub>
 8030d02:	4622      	mov	r2, r4
 8030d04:	462b      	mov	r3, r5
 8030d06:	f7cf fac9 	bl	800029c <__aeabi_dsub>
 8030d0a:	a343      	add	r3, pc, #268	; (adr r3, 8030e18 <__ieee754_rem_pio2+0x318>)
 8030d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030d10:	4604      	mov	r4, r0
 8030d12:	460d      	mov	r5, r1
 8030d14:	ec51 0b18 	vmov	r0, r1, d8
 8030d18:	f7cf fc78 	bl	800060c <__aeabi_dmul>
 8030d1c:	4622      	mov	r2, r4
 8030d1e:	462b      	mov	r3, r5
 8030d20:	f7cf fabc 	bl	800029c <__aeabi_dsub>
 8030d24:	4602      	mov	r2, r0
 8030d26:	460b      	mov	r3, r1
 8030d28:	4604      	mov	r4, r0
 8030d2a:	460d      	mov	r5, r1
 8030d2c:	4640      	mov	r0, r8
 8030d2e:	4649      	mov	r1, r9
 8030d30:	f7cf fab4 	bl	800029c <__aeabi_dsub>
 8030d34:	9a03      	ldr	r2, [sp, #12]
 8030d36:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8030d3a:	1ad3      	subs	r3, r2, r3
 8030d3c:	2b31      	cmp	r3, #49	; 0x31
 8030d3e:	dc24      	bgt.n	8030d8a <__ieee754_rem_pio2+0x28a>
 8030d40:	e9ca 0100 	strd	r0, r1, [sl]
 8030d44:	4646      	mov	r6, r8
 8030d46:	464f      	mov	r7, r9
 8030d48:	e9da 8900 	ldrd	r8, r9, [sl]
 8030d4c:	4630      	mov	r0, r6
 8030d4e:	4642      	mov	r2, r8
 8030d50:	464b      	mov	r3, r9
 8030d52:	4639      	mov	r1, r7
 8030d54:	f7cf faa2 	bl	800029c <__aeabi_dsub>
 8030d58:	462b      	mov	r3, r5
 8030d5a:	4622      	mov	r2, r4
 8030d5c:	f7cf fa9e 	bl	800029c <__aeabi_dsub>
 8030d60:	9b02      	ldr	r3, [sp, #8]
 8030d62:	2b00      	cmp	r3, #0
 8030d64:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8030d68:	f6bf af0a 	bge.w	8030b80 <__ieee754_rem_pio2+0x80>
 8030d6c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8030d70:	f8ca 3004 	str.w	r3, [sl, #4]
 8030d74:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8030d78:	f8ca 8000 	str.w	r8, [sl]
 8030d7c:	f8ca 0008 	str.w	r0, [sl, #8]
 8030d80:	f8ca 300c 	str.w	r3, [sl, #12]
 8030d84:	f1cb 0b00 	rsb	fp, fp, #0
 8030d88:	e6fa      	b.n	8030b80 <__ieee754_rem_pio2+0x80>
 8030d8a:	a327      	add	r3, pc, #156	; (adr r3, 8030e28 <__ieee754_rem_pio2+0x328>)
 8030d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030d90:	ec51 0b18 	vmov	r0, r1, d8
 8030d94:	f7cf fc3a 	bl	800060c <__aeabi_dmul>
 8030d98:	4604      	mov	r4, r0
 8030d9a:	460d      	mov	r5, r1
 8030d9c:	4602      	mov	r2, r0
 8030d9e:	460b      	mov	r3, r1
 8030da0:	4640      	mov	r0, r8
 8030da2:	4649      	mov	r1, r9
 8030da4:	f7cf fa7a 	bl	800029c <__aeabi_dsub>
 8030da8:	4602      	mov	r2, r0
 8030daa:	460b      	mov	r3, r1
 8030dac:	4606      	mov	r6, r0
 8030dae:	460f      	mov	r7, r1
 8030db0:	4640      	mov	r0, r8
 8030db2:	4649      	mov	r1, r9
 8030db4:	f7cf fa72 	bl	800029c <__aeabi_dsub>
 8030db8:	4622      	mov	r2, r4
 8030dba:	462b      	mov	r3, r5
 8030dbc:	f7cf fa6e 	bl	800029c <__aeabi_dsub>
 8030dc0:	a31b      	add	r3, pc, #108	; (adr r3, 8030e30 <__ieee754_rem_pio2+0x330>)
 8030dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030dc6:	4604      	mov	r4, r0
 8030dc8:	460d      	mov	r5, r1
 8030dca:	ec51 0b18 	vmov	r0, r1, d8
 8030dce:	f7cf fc1d 	bl	800060c <__aeabi_dmul>
 8030dd2:	4622      	mov	r2, r4
 8030dd4:	462b      	mov	r3, r5
 8030dd6:	f7cf fa61 	bl	800029c <__aeabi_dsub>
 8030dda:	4604      	mov	r4, r0
 8030ddc:	460d      	mov	r5, r1
 8030dde:	e75f      	b.n	8030ca0 <__ieee754_rem_pio2+0x1a0>
 8030de0:	4b1b      	ldr	r3, [pc, #108]	; (8030e50 <__ieee754_rem_pio2+0x350>)
 8030de2:	4598      	cmp	r8, r3
 8030de4:	dd36      	ble.n	8030e54 <__ieee754_rem_pio2+0x354>
 8030de6:	ee10 2a10 	vmov	r2, s0
 8030dea:	462b      	mov	r3, r5
 8030dec:	4620      	mov	r0, r4
 8030dee:	4629      	mov	r1, r5
 8030df0:	f7cf fa54 	bl	800029c <__aeabi_dsub>
 8030df4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8030df8:	e9ca 0100 	strd	r0, r1, [sl]
 8030dfc:	e694      	b.n	8030b28 <__ieee754_rem_pio2+0x28>
 8030dfe:	bf00      	nop
 8030e00:	54400000 	.word	0x54400000
 8030e04:	3ff921fb 	.word	0x3ff921fb
 8030e08:	1a626331 	.word	0x1a626331
 8030e0c:	3dd0b461 	.word	0x3dd0b461
 8030e10:	1a600000 	.word	0x1a600000
 8030e14:	3dd0b461 	.word	0x3dd0b461
 8030e18:	2e037073 	.word	0x2e037073
 8030e1c:	3ba3198a 	.word	0x3ba3198a
 8030e20:	6dc9c883 	.word	0x6dc9c883
 8030e24:	3fe45f30 	.word	0x3fe45f30
 8030e28:	2e000000 	.word	0x2e000000
 8030e2c:	3ba3198a 	.word	0x3ba3198a
 8030e30:	252049c1 	.word	0x252049c1
 8030e34:	397b839a 	.word	0x397b839a
 8030e38:	3fe921fb 	.word	0x3fe921fb
 8030e3c:	4002d97b 	.word	0x4002d97b
 8030e40:	3ff921fb 	.word	0x3ff921fb
 8030e44:	413921fb 	.word	0x413921fb
 8030e48:	3fe00000 	.word	0x3fe00000
 8030e4c:	08037f90 	.word	0x08037f90
 8030e50:	7fefffff 	.word	0x7fefffff
 8030e54:	ea4f 5428 	mov.w	r4, r8, asr #20
 8030e58:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8030e5c:	ee10 0a10 	vmov	r0, s0
 8030e60:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8030e64:	ee10 6a10 	vmov	r6, s0
 8030e68:	460f      	mov	r7, r1
 8030e6a:	f7cf fe7f 	bl	8000b6c <__aeabi_d2iz>
 8030e6e:	f7cf fb63 	bl	8000538 <__aeabi_i2d>
 8030e72:	4602      	mov	r2, r0
 8030e74:	460b      	mov	r3, r1
 8030e76:	4630      	mov	r0, r6
 8030e78:	4639      	mov	r1, r7
 8030e7a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8030e7e:	f7cf fa0d 	bl	800029c <__aeabi_dsub>
 8030e82:	4b23      	ldr	r3, [pc, #140]	; (8030f10 <__ieee754_rem_pio2+0x410>)
 8030e84:	2200      	movs	r2, #0
 8030e86:	f7cf fbc1 	bl	800060c <__aeabi_dmul>
 8030e8a:	460f      	mov	r7, r1
 8030e8c:	4606      	mov	r6, r0
 8030e8e:	f7cf fe6d 	bl	8000b6c <__aeabi_d2iz>
 8030e92:	f7cf fb51 	bl	8000538 <__aeabi_i2d>
 8030e96:	4602      	mov	r2, r0
 8030e98:	460b      	mov	r3, r1
 8030e9a:	4630      	mov	r0, r6
 8030e9c:	4639      	mov	r1, r7
 8030e9e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8030ea2:	f7cf f9fb 	bl	800029c <__aeabi_dsub>
 8030ea6:	4b1a      	ldr	r3, [pc, #104]	; (8030f10 <__ieee754_rem_pio2+0x410>)
 8030ea8:	2200      	movs	r2, #0
 8030eaa:	f7cf fbaf 	bl	800060c <__aeabi_dmul>
 8030eae:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8030eb2:	ad04      	add	r5, sp, #16
 8030eb4:	f04f 0803 	mov.w	r8, #3
 8030eb8:	46a9      	mov	r9, r5
 8030eba:	2600      	movs	r6, #0
 8030ebc:	2700      	movs	r7, #0
 8030ebe:	4632      	mov	r2, r6
 8030ec0:	463b      	mov	r3, r7
 8030ec2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8030ec6:	46c3      	mov	fp, r8
 8030ec8:	3d08      	subs	r5, #8
 8030eca:	f108 38ff 	add.w	r8, r8, #4294967295
 8030ece:	f7cf fe05 	bl	8000adc <__aeabi_dcmpeq>
 8030ed2:	2800      	cmp	r0, #0
 8030ed4:	d1f3      	bne.n	8030ebe <__ieee754_rem_pio2+0x3be>
 8030ed6:	4b0f      	ldr	r3, [pc, #60]	; (8030f14 <__ieee754_rem_pio2+0x414>)
 8030ed8:	9301      	str	r3, [sp, #4]
 8030eda:	2302      	movs	r3, #2
 8030edc:	9300      	str	r3, [sp, #0]
 8030ede:	4622      	mov	r2, r4
 8030ee0:	465b      	mov	r3, fp
 8030ee2:	4651      	mov	r1, sl
 8030ee4:	4648      	mov	r0, r9
 8030ee6:	f000 fbab 	bl	8031640 <__kernel_rem_pio2>
 8030eea:	9b02      	ldr	r3, [sp, #8]
 8030eec:	2b00      	cmp	r3, #0
 8030eee:	4683      	mov	fp, r0
 8030ef0:	f6bf ae46 	bge.w	8030b80 <__ieee754_rem_pio2+0x80>
 8030ef4:	e9da 2100 	ldrd	r2, r1, [sl]
 8030ef8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8030efc:	e9ca 2300 	strd	r2, r3, [sl]
 8030f00:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8030f04:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8030f08:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8030f0c:	e73a      	b.n	8030d84 <__ieee754_rem_pio2+0x284>
 8030f0e:	bf00      	nop
 8030f10:	41700000 	.word	0x41700000
 8030f14:	08038010 	.word	0x08038010

08030f18 <__ieee754_sqrt>:
 8030f18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8030f1c:	ec55 4b10 	vmov	r4, r5, d0
 8030f20:	4e55      	ldr	r6, [pc, #340]	; (8031078 <__ieee754_sqrt+0x160>)
 8030f22:	43ae      	bics	r6, r5
 8030f24:	ee10 0a10 	vmov	r0, s0
 8030f28:	ee10 3a10 	vmov	r3, s0
 8030f2c:	462a      	mov	r2, r5
 8030f2e:	4629      	mov	r1, r5
 8030f30:	d110      	bne.n	8030f54 <__ieee754_sqrt+0x3c>
 8030f32:	ee10 2a10 	vmov	r2, s0
 8030f36:	462b      	mov	r3, r5
 8030f38:	f7cf fb68 	bl	800060c <__aeabi_dmul>
 8030f3c:	4602      	mov	r2, r0
 8030f3e:	460b      	mov	r3, r1
 8030f40:	4620      	mov	r0, r4
 8030f42:	4629      	mov	r1, r5
 8030f44:	f7cf f9ac 	bl	80002a0 <__adddf3>
 8030f48:	4604      	mov	r4, r0
 8030f4a:	460d      	mov	r5, r1
 8030f4c:	ec45 4b10 	vmov	d0, r4, r5
 8030f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8030f54:	2d00      	cmp	r5, #0
 8030f56:	dc10      	bgt.n	8030f7a <__ieee754_sqrt+0x62>
 8030f58:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8030f5c:	4330      	orrs	r0, r6
 8030f5e:	d0f5      	beq.n	8030f4c <__ieee754_sqrt+0x34>
 8030f60:	b15d      	cbz	r5, 8030f7a <__ieee754_sqrt+0x62>
 8030f62:	ee10 2a10 	vmov	r2, s0
 8030f66:	462b      	mov	r3, r5
 8030f68:	ee10 0a10 	vmov	r0, s0
 8030f6c:	f7cf f996 	bl	800029c <__aeabi_dsub>
 8030f70:	4602      	mov	r2, r0
 8030f72:	460b      	mov	r3, r1
 8030f74:	f7cf fc74 	bl	8000860 <__aeabi_ddiv>
 8030f78:	e7e6      	b.n	8030f48 <__ieee754_sqrt+0x30>
 8030f7a:	1512      	asrs	r2, r2, #20
 8030f7c:	d074      	beq.n	8031068 <__ieee754_sqrt+0x150>
 8030f7e:	07d4      	lsls	r4, r2, #31
 8030f80:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8030f84:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8030f88:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8030f8c:	bf5e      	ittt	pl
 8030f8e:	0fda      	lsrpl	r2, r3, #31
 8030f90:	005b      	lslpl	r3, r3, #1
 8030f92:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8030f96:	2400      	movs	r4, #0
 8030f98:	0fda      	lsrs	r2, r3, #31
 8030f9a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8030f9e:	107f      	asrs	r7, r7, #1
 8030fa0:	005b      	lsls	r3, r3, #1
 8030fa2:	2516      	movs	r5, #22
 8030fa4:	4620      	mov	r0, r4
 8030fa6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8030faa:	1886      	adds	r6, r0, r2
 8030fac:	428e      	cmp	r6, r1
 8030fae:	bfde      	ittt	le
 8030fb0:	1b89      	suble	r1, r1, r6
 8030fb2:	18b0      	addle	r0, r6, r2
 8030fb4:	18a4      	addle	r4, r4, r2
 8030fb6:	0049      	lsls	r1, r1, #1
 8030fb8:	3d01      	subs	r5, #1
 8030fba:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8030fbe:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8030fc2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8030fc6:	d1f0      	bne.n	8030faa <__ieee754_sqrt+0x92>
 8030fc8:	462a      	mov	r2, r5
 8030fca:	f04f 0e20 	mov.w	lr, #32
 8030fce:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8030fd2:	4281      	cmp	r1, r0
 8030fd4:	eb06 0c05 	add.w	ip, r6, r5
 8030fd8:	dc02      	bgt.n	8030fe0 <__ieee754_sqrt+0xc8>
 8030fda:	d113      	bne.n	8031004 <__ieee754_sqrt+0xec>
 8030fdc:	459c      	cmp	ip, r3
 8030fde:	d811      	bhi.n	8031004 <__ieee754_sqrt+0xec>
 8030fe0:	f1bc 0f00 	cmp.w	ip, #0
 8030fe4:	eb0c 0506 	add.w	r5, ip, r6
 8030fe8:	da43      	bge.n	8031072 <__ieee754_sqrt+0x15a>
 8030fea:	2d00      	cmp	r5, #0
 8030fec:	db41      	blt.n	8031072 <__ieee754_sqrt+0x15a>
 8030fee:	f100 0801 	add.w	r8, r0, #1
 8030ff2:	1a09      	subs	r1, r1, r0
 8030ff4:	459c      	cmp	ip, r3
 8030ff6:	bf88      	it	hi
 8030ff8:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8030ffc:	eba3 030c 	sub.w	r3, r3, ip
 8031000:	4432      	add	r2, r6
 8031002:	4640      	mov	r0, r8
 8031004:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8031008:	f1be 0e01 	subs.w	lr, lr, #1
 803100c:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8031010:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8031014:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8031018:	d1db      	bne.n	8030fd2 <__ieee754_sqrt+0xba>
 803101a:	430b      	orrs	r3, r1
 803101c:	d006      	beq.n	803102c <__ieee754_sqrt+0x114>
 803101e:	1c50      	adds	r0, r2, #1
 8031020:	bf13      	iteet	ne
 8031022:	3201      	addne	r2, #1
 8031024:	3401      	addeq	r4, #1
 8031026:	4672      	moveq	r2, lr
 8031028:	f022 0201 	bicne.w	r2, r2, #1
 803102c:	1063      	asrs	r3, r4, #1
 803102e:	0852      	lsrs	r2, r2, #1
 8031030:	07e1      	lsls	r1, r4, #31
 8031032:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8031036:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 803103a:	bf48      	it	mi
 803103c:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8031040:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8031044:	4614      	mov	r4, r2
 8031046:	e781      	b.n	8030f4c <__ieee754_sqrt+0x34>
 8031048:	0ad9      	lsrs	r1, r3, #11
 803104a:	3815      	subs	r0, #21
 803104c:	055b      	lsls	r3, r3, #21
 803104e:	2900      	cmp	r1, #0
 8031050:	d0fa      	beq.n	8031048 <__ieee754_sqrt+0x130>
 8031052:	02cd      	lsls	r5, r1, #11
 8031054:	d50a      	bpl.n	803106c <__ieee754_sqrt+0x154>
 8031056:	f1c2 0420 	rsb	r4, r2, #32
 803105a:	fa23 f404 	lsr.w	r4, r3, r4
 803105e:	1e55      	subs	r5, r2, #1
 8031060:	4093      	lsls	r3, r2
 8031062:	4321      	orrs	r1, r4
 8031064:	1b42      	subs	r2, r0, r5
 8031066:	e78a      	b.n	8030f7e <__ieee754_sqrt+0x66>
 8031068:	4610      	mov	r0, r2
 803106a:	e7f0      	b.n	803104e <__ieee754_sqrt+0x136>
 803106c:	0049      	lsls	r1, r1, #1
 803106e:	3201      	adds	r2, #1
 8031070:	e7ef      	b.n	8031052 <__ieee754_sqrt+0x13a>
 8031072:	4680      	mov	r8, r0
 8031074:	e7bd      	b.n	8030ff2 <__ieee754_sqrt+0xda>
 8031076:	bf00      	nop
 8031078:	7ff00000 	.word	0x7ff00000

0803107c <__ieee754_expf>:
 803107c:	ee10 2a10 	vmov	r2, s0
 8031080:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8031084:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8031088:	d902      	bls.n	8031090 <__ieee754_expf+0x14>
 803108a:	ee30 0a00 	vadd.f32	s0, s0, s0
 803108e:	4770      	bx	lr
 8031090:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 8031094:	d106      	bne.n	80310a4 <__ieee754_expf+0x28>
 8031096:	eddf 7a4e 	vldr	s15, [pc, #312]	; 80311d0 <__ieee754_expf+0x154>
 803109a:	2b00      	cmp	r3, #0
 803109c:	bf18      	it	ne
 803109e:	eeb0 0a67 	vmovne.f32	s0, s15
 80310a2:	4770      	bx	lr
 80310a4:	484b      	ldr	r0, [pc, #300]	; (80311d4 <__ieee754_expf+0x158>)
 80310a6:	4282      	cmp	r2, r0
 80310a8:	dd02      	ble.n	80310b0 <__ieee754_expf+0x34>
 80310aa:	2000      	movs	r0, #0
 80310ac:	f000 bf22 	b.w	8031ef4 <__math_oflowf>
 80310b0:	2a00      	cmp	r2, #0
 80310b2:	da05      	bge.n	80310c0 <__ieee754_expf+0x44>
 80310b4:	4a48      	ldr	r2, [pc, #288]	; (80311d8 <__ieee754_expf+0x15c>)
 80310b6:	4291      	cmp	r1, r2
 80310b8:	d902      	bls.n	80310c0 <__ieee754_expf+0x44>
 80310ba:	2000      	movs	r0, #0
 80310bc:	f000 bf14 	b.w	8031ee8 <__math_uflowf>
 80310c0:	4a46      	ldr	r2, [pc, #280]	; (80311dc <__ieee754_expf+0x160>)
 80310c2:	4291      	cmp	r1, r2
 80310c4:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80310c8:	d952      	bls.n	8031170 <__ieee754_expf+0xf4>
 80310ca:	4a45      	ldr	r2, [pc, #276]	; (80311e0 <__ieee754_expf+0x164>)
 80310cc:	4291      	cmp	r1, r2
 80310ce:	ea4f 0283 	mov.w	r2, r3, lsl #2
 80310d2:	d834      	bhi.n	803113e <__ieee754_expf+0xc2>
 80310d4:	4943      	ldr	r1, [pc, #268]	; (80311e4 <__ieee754_expf+0x168>)
 80310d6:	4411      	add	r1, r2
 80310d8:	ed91 7a00 	vldr	s14, [r1]
 80310dc:	4942      	ldr	r1, [pc, #264]	; (80311e8 <__ieee754_expf+0x16c>)
 80310de:	440a      	add	r2, r1
 80310e0:	edd2 7a00 	vldr	s15, [r2]
 80310e4:	ee30 7a47 	vsub.f32	s14, s0, s14
 80310e8:	f1c3 0201 	rsb	r2, r3, #1
 80310ec:	1ad2      	subs	r2, r2, r3
 80310ee:	ee37 0a67 	vsub.f32	s0, s14, s15
 80310f2:	ee20 6a00 	vmul.f32	s12, s0, s0
 80310f6:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 80311ec <__ieee754_expf+0x170>
 80310fa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80311f0 <__ieee754_expf+0x174>
 80310fe:	eee6 6a05 	vfma.f32	s13, s12, s10
 8031102:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 80311f4 <__ieee754_expf+0x178>
 8031106:	eea6 5a86 	vfma.f32	s10, s13, s12
 803110a:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80311f8 <__ieee754_expf+0x17c>
 803110e:	eee5 6a06 	vfma.f32	s13, s10, s12
 8031112:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 80311fc <__ieee754_expf+0x180>
 8031116:	eea6 5a86 	vfma.f32	s10, s13, s12
 803111a:	eef0 6a40 	vmov.f32	s13, s0
 803111e:	eee5 6a46 	vfms.f32	s13, s10, s12
 8031122:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8031126:	ee20 5a26 	vmul.f32	s10, s0, s13
 803112a:	bb92      	cbnz	r2, 8031192 <__ieee754_expf+0x116>
 803112c:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8031130:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8031134:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8031138:	ee35 0ac0 	vsub.f32	s0, s11, s0
 803113c:	4770      	bx	lr
 803113e:	4b30      	ldr	r3, [pc, #192]	; (8031200 <__ieee754_expf+0x184>)
 8031140:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8031204 <__ieee754_expf+0x188>
 8031144:	eddf 6a30 	vldr	s13, [pc, #192]	; 8031208 <__ieee754_expf+0x18c>
 8031148:	4413      	add	r3, r2
 803114a:	edd3 7a00 	vldr	s15, [r3]
 803114e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8031152:	eeb0 7a40 	vmov.f32	s14, s0
 8031156:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 803115a:	ee17 2a90 	vmov	r2, s15
 803115e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8031162:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8031166:	eddf 6a29 	vldr	s13, [pc, #164]	; 803120c <__ieee754_expf+0x190>
 803116a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 803116e:	e7be      	b.n	80310ee <__ieee754_expf+0x72>
 8031170:	f1b1 5f50 	cmp.w	r1, #872415232	; 0x34000000
 8031174:	d20b      	bcs.n	803118e <__ieee754_expf+0x112>
 8031176:	eddf 6a26 	vldr	s13, [pc, #152]	; 8031210 <__ieee754_expf+0x194>
 803117a:	ee70 6a26 	vadd.f32	s13, s0, s13
 803117e:	eef4 6ae5 	vcmpe.f32	s13, s11
 8031182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8031186:	dd02      	ble.n	803118e <__ieee754_expf+0x112>
 8031188:	ee30 0a25 	vadd.f32	s0, s0, s11
 803118c:	4770      	bx	lr
 803118e:	2200      	movs	r2, #0
 8031190:	e7af      	b.n	80310f2 <__ieee754_expf+0x76>
 8031192:	ee76 6a66 	vsub.f32	s13, s12, s13
 8031196:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 803119a:	ee85 0a26 	vdiv.f32	s0, s10, s13
 803119e:	bfb8      	it	lt
 80311a0:	3264      	addlt	r2, #100	; 0x64
 80311a2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80311a6:	ee37 0ac7 	vsub.f32	s0, s15, s14
 80311aa:	ee75 7ac0 	vsub.f32	s15, s11, s0
 80311ae:	ee17 3a90 	vmov	r3, s15
 80311b2:	bfab      	itete	ge
 80311b4:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 80311b8:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 80311bc:	ee00 3a10 	vmovge	s0, r3
 80311c0:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 8031214 <__ieee754_expf+0x198>
 80311c4:	bfbc      	itt	lt
 80311c6:	ee00 3a10 	vmovlt	s0, r3
 80311ca:	ee20 0a27 	vmullt.f32	s0, s0, s15
 80311ce:	4770      	bx	lr
 80311d0:	00000000 	.word	0x00000000
 80311d4:	42b17217 	.word	0x42b17217
 80311d8:	42cff1b5 	.word	0x42cff1b5
 80311dc:	3eb17218 	.word	0x3eb17218
 80311e0:	3f851591 	.word	0x3f851591
 80311e4:	08038120 	.word	0x08038120
 80311e8:	08038128 	.word	0x08038128
 80311ec:	3331bb4c 	.word	0x3331bb4c
 80311f0:	b5ddea0e 	.word	0xb5ddea0e
 80311f4:	388ab355 	.word	0x388ab355
 80311f8:	bb360b61 	.word	0xbb360b61
 80311fc:	3e2aaaab 	.word	0x3e2aaaab
 8031200:	08038118 	.word	0x08038118
 8031204:	3fb8aa3b 	.word	0x3fb8aa3b
 8031208:	3f317180 	.word	0x3f317180
 803120c:	3717f7d1 	.word	0x3717f7d1
 8031210:	7149f2ca 	.word	0x7149f2ca
 8031214:	0d800000 	.word	0x0d800000

08031218 <__ieee754_logf>:
 8031218:	ee10 3a10 	vmov	r3, s0
 803121c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8031220:	d106      	bne.n	8031230 <__ieee754_logf+0x18>
 8031222:	ed9f 7a65 	vldr	s14, [pc, #404]	; 80313b8 <__ieee754_logf+0x1a0>
 8031226:	eddf 7a65 	vldr	s15, [pc, #404]	; 80313bc <__ieee754_logf+0x1a4>
 803122a:	ee87 0a27 	vdiv.f32	s0, s14, s15
 803122e:	4770      	bx	lr
 8031230:	2b00      	cmp	r3, #0
 8031232:	da02      	bge.n	803123a <__ieee754_logf+0x22>
 8031234:	ee30 7a40 	vsub.f32	s14, s0, s0
 8031238:	e7f5      	b.n	8031226 <__ieee754_logf+0xe>
 803123a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 803123e:	db02      	blt.n	8031246 <__ieee754_logf+0x2e>
 8031240:	ee30 0a00 	vadd.f32	s0, s0, s0
 8031244:	4770      	bx	lr
 8031246:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 803124a:	bfb8      	it	lt
 803124c:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 80313c0 <__ieee754_logf+0x1a8>
 8031250:	485c      	ldr	r0, [pc, #368]	; (80313c4 <__ieee754_logf+0x1ac>)
 8031252:	bfbe      	ittt	lt
 8031254:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8031258:	f06f 0118 	mvnlt.w	r1, #24
 803125c:	ee17 3a90 	vmovlt	r3, s15
 8031260:	ea4f 52e3 	mov.w	r2, r3, asr #23
 8031264:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8031268:	4418      	add	r0, r3
 803126a:	bfa8      	it	ge
 803126c:	2100      	movge	r1, #0
 803126e:	3a7f      	subs	r2, #127	; 0x7f
 8031270:	440a      	add	r2, r1
 8031272:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 8031276:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 803127a:	4319      	orrs	r1, r3
 803127c:	ee00 1a10 	vmov	s0, r1
 8031280:	4951      	ldr	r1, [pc, #324]	; (80313c8 <__ieee754_logf+0x1b0>)
 8031282:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 8031286:	f103 000f 	add.w	r0, r3, #15
 803128a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 803128e:	4001      	ands	r1, r0
 8031290:	ee30 0a67 	vsub.f32	s0, s0, s15
 8031294:	bb89      	cbnz	r1, 80312fa <__ieee754_logf+0xe2>
 8031296:	eeb5 0a40 	vcmp.f32	s0, #0.0
 803129a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 803129e:	d10f      	bne.n	80312c0 <__ieee754_logf+0xa8>
 80312a0:	2a00      	cmp	r2, #0
 80312a2:	f000 8085 	beq.w	80313b0 <__ieee754_logf+0x198>
 80312a6:	ee07 2a90 	vmov	s15, r2
 80312aa:	ed9f 0a48 	vldr	s0, [pc, #288]	; 80313cc <__ieee754_logf+0x1b4>
 80312ae:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80313d0 <__ieee754_logf+0x1b8>
 80312b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80312b6:	ee27 0a80 	vmul.f32	s0, s15, s0
 80312ba:	eea7 0a87 	vfma.f32	s0, s15, s14
 80312be:	4770      	bx	lr
 80312c0:	eddf 6a44 	vldr	s13, [pc, #272]	; 80313d4 <__ieee754_logf+0x1bc>
 80312c4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80312c8:	eee0 7a66 	vfms.f32	s15, s0, s13
 80312cc:	ee20 7a00 	vmul.f32	s14, s0, s0
 80312d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80312d4:	b912      	cbnz	r2, 80312dc <__ieee754_logf+0xc4>
 80312d6:	ee30 0a47 	vsub.f32	s0, s0, s14
 80312da:	4770      	bx	lr
 80312dc:	ee07 2a90 	vmov	s15, r2
 80312e0:	eddf 6a3a 	vldr	s13, [pc, #232]	; 80313cc <__ieee754_logf+0x1b4>
 80312e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80312e8:	eea7 7ae6 	vfms.f32	s14, s15, s13
 80312ec:	ee37 0a40 	vsub.f32	s0, s14, s0
 80312f0:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80313d0 <__ieee754_logf+0x1b8>
 80312f4:	ee97 0a87 	vfnms.f32	s0, s15, s14
 80312f8:	4770      	bx	lr
 80312fa:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80312fe:	ee70 7a27 	vadd.f32	s15, s0, s15
 8031302:	eddf 5a35 	vldr	s11, [pc, #212]	; 80313d8 <__ieee754_logf+0x1c0>
 8031306:	eddf 4a35 	vldr	s9, [pc, #212]	; 80313dc <__ieee754_logf+0x1c4>
 803130a:	4935      	ldr	r1, [pc, #212]	; (80313e0 <__ieee754_logf+0x1c8>)
 803130c:	ee80 6a27 	vdiv.f32	s12, s0, s15
 8031310:	4419      	add	r1, r3
 8031312:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 8031316:	f503 7322 	add.w	r3, r3, #648	; 0x288
 803131a:	430b      	orrs	r3, r1
 803131c:	2b00      	cmp	r3, #0
 803131e:	ee07 2a90 	vmov	s15, r2
 8031322:	ee26 5a06 	vmul.f32	s10, s12, s12
 8031326:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 803132a:	ee25 7a05 	vmul.f32	s14, s10, s10
 803132e:	eddf 7a2d 	vldr	s15, [pc, #180]	; 80313e4 <__ieee754_logf+0x1cc>
 8031332:	eee7 7a25 	vfma.f32	s15, s14, s11
 8031336:	eddf 5a2c 	vldr	s11, [pc, #176]	; 80313e8 <__ieee754_logf+0x1d0>
 803133a:	eee7 5a87 	vfma.f32	s11, s15, s14
 803133e:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80313ec <__ieee754_logf+0x1d4>
 8031342:	eee7 7a24 	vfma.f32	s15, s14, s9
 8031346:	eddf 4a2a 	vldr	s9, [pc, #168]	; 80313f0 <__ieee754_logf+0x1d8>
 803134a:	eee7 4a87 	vfma.f32	s9, s15, s14
 803134e:	eddf 7a29 	vldr	s15, [pc, #164]	; 80313f4 <__ieee754_logf+0x1dc>
 8031352:	eee4 7a87 	vfma.f32	s15, s9, s14
 8031356:	ee67 7a85 	vmul.f32	s15, s15, s10
 803135a:	eee5 7a87 	vfma.f32	s15, s11, s14
 803135e:	dd1c      	ble.n	803139a <__ieee754_logf+0x182>
 8031360:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8031364:	ee20 7a07 	vmul.f32	s14, s0, s14
 8031368:	ee27 7a00 	vmul.f32	s14, s14, s0
 803136c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8031370:	ee67 7a86 	vmul.f32	s15, s15, s12
 8031374:	b922      	cbnz	r2, 8031380 <__ieee754_logf+0x168>
 8031376:	ee77 7a67 	vsub.f32	s15, s14, s15
 803137a:	ee30 0a67 	vsub.f32	s0, s0, s15
 803137e:	4770      	bx	lr
 8031380:	ed9f 6a12 	vldr	s12, [pc, #72]	; 80313cc <__ieee754_logf+0x1b4>
 8031384:	eee6 7a86 	vfma.f32	s15, s13, s12
 8031388:	ee77 7a67 	vsub.f32	s15, s14, s15
 803138c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8031390:	eddf 7a0f 	vldr	s15, [pc, #60]	; 80313d0 <__ieee754_logf+0x1b8>
 8031394:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 8031398:	4770      	bx	lr
 803139a:	ee70 7a67 	vsub.f32	s15, s0, s15
 803139e:	ee67 7a86 	vmul.f32	s15, s15, s12
 80313a2:	2a00      	cmp	r2, #0
 80313a4:	d0e9      	beq.n	803137a <__ieee754_logf+0x162>
 80313a6:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80313cc <__ieee754_logf+0x1b4>
 80313aa:	eee6 7ac7 	vfms.f32	s15, s13, s14
 80313ae:	e7ed      	b.n	803138c <__ieee754_logf+0x174>
 80313b0:	ed9f 0a02 	vldr	s0, [pc, #8]	; 80313bc <__ieee754_logf+0x1a4>
 80313b4:	4770      	bx	lr
 80313b6:	bf00      	nop
 80313b8:	cc000000 	.word	0xcc000000
 80313bc:	00000000 	.word	0x00000000
 80313c0:	4c000000 	.word	0x4c000000
 80313c4:	004afb20 	.word	0x004afb20
 80313c8:	007ffff0 	.word	0x007ffff0
 80313cc:	3717f7d1 	.word	0x3717f7d1
 80313d0:	3f317180 	.word	0x3f317180
 80313d4:	3eaaaaab 	.word	0x3eaaaaab
 80313d8:	3e1cd04f 	.word	0x3e1cd04f
 80313dc:	3e178897 	.word	0x3e178897
 80313e0:	ffcf5c30 	.word	0xffcf5c30
 80313e4:	3e638e29 	.word	0x3e638e29
 80313e8:	3ecccccd 	.word	0x3ecccccd
 80313ec:	3e3a3325 	.word	0x3e3a3325
 80313f0:	3e924925 	.word	0x3e924925
 80313f4:	3f2aaaab 	.word	0x3f2aaaab

080313f8 <__ieee754_log10f>:
 80313f8:	b508      	push	{r3, lr}
 80313fa:	ee10 2a10 	vmov	r2, s0
 80313fe:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8031402:	ed2d 8b02 	vpush	{d8}
 8031406:	d108      	bne.n	803141a <__ieee754_log10f+0x22>
 8031408:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8031490 <__ieee754_log10f+0x98>
 803140c:	eddf 7a21 	vldr	s15, [pc, #132]	; 8031494 <__ieee754_log10f+0x9c>
 8031410:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8031414:	ecbd 8b02 	vpop	{d8}
 8031418:	bd08      	pop	{r3, pc}
 803141a:	2a00      	cmp	r2, #0
 803141c:	da02      	bge.n	8031424 <__ieee754_log10f+0x2c>
 803141e:	ee30 7a40 	vsub.f32	s14, s0, s0
 8031422:	e7f3      	b.n	803140c <__ieee754_log10f+0x14>
 8031424:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8031428:	db02      	blt.n	8031430 <__ieee754_log10f+0x38>
 803142a:	ee30 0a00 	vadd.f32	s0, s0, s0
 803142e:	e7f1      	b.n	8031414 <__ieee754_log10f+0x1c>
 8031430:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8031434:	bfbf      	itttt	lt
 8031436:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 8031498 <__ieee754_log10f+0xa0>
 803143a:	ee60 7a27 	vmullt.f32	s15, s0, s15
 803143e:	f06f 0118 	mvnlt.w	r1, #24
 8031442:	ee17 2a90 	vmovlt	r2, s15
 8031446:	ea4f 53e2 	mov.w	r3, r2, asr #23
 803144a:	bfa8      	it	ge
 803144c:	2100      	movge	r1, #0
 803144e:	3b7f      	subs	r3, #127	; 0x7f
 8031450:	440b      	add	r3, r1
 8031452:	0fd9      	lsrs	r1, r3, #31
 8031454:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8031458:	ee07 3a90 	vmov	s15, r3
 803145c:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8031460:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
 8031464:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8031468:	ee00 3a10 	vmov	s0, r3
 803146c:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8031470:	f7ff fed2 	bl	8031218 <__ieee754_logf>
 8031474:	eddf 7a09 	vldr	s15, [pc, #36]	; 803149c <__ieee754_log10f+0xa4>
 8031478:	ee20 0a27 	vmul.f32	s0, s0, s15
 803147c:	eddf 7a08 	vldr	s15, [pc, #32]	; 80314a0 <__ieee754_log10f+0xa8>
 8031480:	eea8 0a27 	vfma.f32	s0, s16, s15
 8031484:	eddf 7a07 	vldr	s15, [pc, #28]	; 80314a4 <__ieee754_log10f+0xac>
 8031488:	eea8 0a27 	vfma.f32	s0, s16, s15
 803148c:	e7c2      	b.n	8031414 <__ieee754_log10f+0x1c>
 803148e:	bf00      	nop
 8031490:	cc000000 	.word	0xcc000000
 8031494:	00000000 	.word	0x00000000
 8031498:	4c000000 	.word	0x4c000000
 803149c:	3ede5bd9 	.word	0x3ede5bd9
 80314a0:	355427db 	.word	0x355427db
 80314a4:	3e9a2080 	.word	0x3e9a2080

080314a8 <__ieee754_sqrtf>:
 80314a8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80314ac:	4770      	bx	lr
	...

080314b0 <__kernel_cos>:
 80314b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80314b4:	ec57 6b10 	vmov	r6, r7, d0
 80314b8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80314bc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80314c0:	ed8d 1b00 	vstr	d1, [sp]
 80314c4:	da07      	bge.n	80314d6 <__kernel_cos+0x26>
 80314c6:	ee10 0a10 	vmov	r0, s0
 80314ca:	4639      	mov	r1, r7
 80314cc:	f7cf fb4e 	bl	8000b6c <__aeabi_d2iz>
 80314d0:	2800      	cmp	r0, #0
 80314d2:	f000 8088 	beq.w	80315e6 <__kernel_cos+0x136>
 80314d6:	4632      	mov	r2, r6
 80314d8:	463b      	mov	r3, r7
 80314da:	4630      	mov	r0, r6
 80314dc:	4639      	mov	r1, r7
 80314de:	f7cf f895 	bl	800060c <__aeabi_dmul>
 80314e2:	4b51      	ldr	r3, [pc, #324]	; (8031628 <__kernel_cos+0x178>)
 80314e4:	2200      	movs	r2, #0
 80314e6:	4604      	mov	r4, r0
 80314e8:	460d      	mov	r5, r1
 80314ea:	f7cf f88f 	bl	800060c <__aeabi_dmul>
 80314ee:	a340      	add	r3, pc, #256	; (adr r3, 80315f0 <__kernel_cos+0x140>)
 80314f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80314f4:	4682      	mov	sl, r0
 80314f6:	468b      	mov	fp, r1
 80314f8:	4620      	mov	r0, r4
 80314fa:	4629      	mov	r1, r5
 80314fc:	f7cf f886 	bl	800060c <__aeabi_dmul>
 8031500:	a33d      	add	r3, pc, #244	; (adr r3, 80315f8 <__kernel_cos+0x148>)
 8031502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8031506:	f7ce fecb 	bl	80002a0 <__adddf3>
 803150a:	4622      	mov	r2, r4
 803150c:	462b      	mov	r3, r5
 803150e:	f7cf f87d 	bl	800060c <__aeabi_dmul>
 8031512:	a33b      	add	r3, pc, #236	; (adr r3, 8031600 <__kernel_cos+0x150>)
 8031514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8031518:	f7ce fec0 	bl	800029c <__aeabi_dsub>
 803151c:	4622      	mov	r2, r4
 803151e:	462b      	mov	r3, r5
 8031520:	f7cf f874 	bl	800060c <__aeabi_dmul>
 8031524:	a338      	add	r3, pc, #224	; (adr r3, 8031608 <__kernel_cos+0x158>)
 8031526:	e9d3 2300 	ldrd	r2, r3, [r3]
 803152a:	f7ce feb9 	bl	80002a0 <__adddf3>
 803152e:	4622      	mov	r2, r4
 8031530:	462b      	mov	r3, r5
 8031532:	f7cf f86b 	bl	800060c <__aeabi_dmul>
 8031536:	a336      	add	r3, pc, #216	; (adr r3, 8031610 <__kernel_cos+0x160>)
 8031538:	e9d3 2300 	ldrd	r2, r3, [r3]
 803153c:	f7ce feae 	bl	800029c <__aeabi_dsub>
 8031540:	4622      	mov	r2, r4
 8031542:	462b      	mov	r3, r5
 8031544:	f7cf f862 	bl	800060c <__aeabi_dmul>
 8031548:	a333      	add	r3, pc, #204	; (adr r3, 8031618 <__kernel_cos+0x168>)
 803154a:	e9d3 2300 	ldrd	r2, r3, [r3]
 803154e:	f7ce fea7 	bl	80002a0 <__adddf3>
 8031552:	4622      	mov	r2, r4
 8031554:	462b      	mov	r3, r5
 8031556:	f7cf f859 	bl	800060c <__aeabi_dmul>
 803155a:	4622      	mov	r2, r4
 803155c:	462b      	mov	r3, r5
 803155e:	f7cf f855 	bl	800060c <__aeabi_dmul>
 8031562:	e9dd 2300 	ldrd	r2, r3, [sp]
 8031566:	4604      	mov	r4, r0
 8031568:	460d      	mov	r5, r1
 803156a:	4630      	mov	r0, r6
 803156c:	4639      	mov	r1, r7
 803156e:	f7cf f84d 	bl	800060c <__aeabi_dmul>
 8031572:	460b      	mov	r3, r1
 8031574:	4602      	mov	r2, r0
 8031576:	4629      	mov	r1, r5
 8031578:	4620      	mov	r0, r4
 803157a:	f7ce fe8f 	bl	800029c <__aeabi_dsub>
 803157e:	4b2b      	ldr	r3, [pc, #172]	; (803162c <__kernel_cos+0x17c>)
 8031580:	4598      	cmp	r8, r3
 8031582:	4606      	mov	r6, r0
 8031584:	460f      	mov	r7, r1
 8031586:	dc10      	bgt.n	80315aa <__kernel_cos+0xfa>
 8031588:	4602      	mov	r2, r0
 803158a:	460b      	mov	r3, r1
 803158c:	4650      	mov	r0, sl
 803158e:	4659      	mov	r1, fp
 8031590:	f7ce fe84 	bl	800029c <__aeabi_dsub>
 8031594:	460b      	mov	r3, r1
 8031596:	4926      	ldr	r1, [pc, #152]	; (8031630 <__kernel_cos+0x180>)
 8031598:	4602      	mov	r2, r0
 803159a:	2000      	movs	r0, #0
 803159c:	f7ce fe7e 	bl	800029c <__aeabi_dsub>
 80315a0:	ec41 0b10 	vmov	d0, r0, r1
 80315a4:	b003      	add	sp, #12
 80315a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80315aa:	4b22      	ldr	r3, [pc, #136]	; (8031634 <__kernel_cos+0x184>)
 80315ac:	4920      	ldr	r1, [pc, #128]	; (8031630 <__kernel_cos+0x180>)
 80315ae:	4598      	cmp	r8, r3
 80315b0:	bfcc      	ite	gt
 80315b2:	4d21      	ldrgt	r5, [pc, #132]	; (8031638 <__kernel_cos+0x188>)
 80315b4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80315b8:	2400      	movs	r4, #0
 80315ba:	4622      	mov	r2, r4
 80315bc:	462b      	mov	r3, r5
 80315be:	2000      	movs	r0, #0
 80315c0:	f7ce fe6c 	bl	800029c <__aeabi_dsub>
 80315c4:	4622      	mov	r2, r4
 80315c6:	4680      	mov	r8, r0
 80315c8:	4689      	mov	r9, r1
 80315ca:	462b      	mov	r3, r5
 80315cc:	4650      	mov	r0, sl
 80315ce:	4659      	mov	r1, fp
 80315d0:	f7ce fe64 	bl	800029c <__aeabi_dsub>
 80315d4:	4632      	mov	r2, r6
 80315d6:	463b      	mov	r3, r7
 80315d8:	f7ce fe60 	bl	800029c <__aeabi_dsub>
 80315dc:	4602      	mov	r2, r0
 80315de:	460b      	mov	r3, r1
 80315e0:	4640      	mov	r0, r8
 80315e2:	4649      	mov	r1, r9
 80315e4:	e7da      	b.n	803159c <__kernel_cos+0xec>
 80315e6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8031620 <__kernel_cos+0x170>
 80315ea:	e7db      	b.n	80315a4 <__kernel_cos+0xf4>
 80315ec:	f3af 8000 	nop.w
 80315f0:	be8838d4 	.word	0xbe8838d4
 80315f4:	bda8fae9 	.word	0xbda8fae9
 80315f8:	bdb4b1c4 	.word	0xbdb4b1c4
 80315fc:	3e21ee9e 	.word	0x3e21ee9e
 8031600:	809c52ad 	.word	0x809c52ad
 8031604:	3e927e4f 	.word	0x3e927e4f
 8031608:	19cb1590 	.word	0x19cb1590
 803160c:	3efa01a0 	.word	0x3efa01a0
 8031610:	16c15177 	.word	0x16c15177
 8031614:	3f56c16c 	.word	0x3f56c16c
 8031618:	5555554c 	.word	0x5555554c
 803161c:	3fa55555 	.word	0x3fa55555
 8031620:	00000000 	.word	0x00000000
 8031624:	3ff00000 	.word	0x3ff00000
 8031628:	3fe00000 	.word	0x3fe00000
 803162c:	3fd33332 	.word	0x3fd33332
 8031630:	3ff00000 	.word	0x3ff00000
 8031634:	3fe90000 	.word	0x3fe90000
 8031638:	3fd20000 	.word	0x3fd20000
 803163c:	00000000 	.word	0x00000000

08031640 <__kernel_rem_pio2>:
 8031640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8031644:	ed2d 8b02 	vpush	{d8}
 8031648:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 803164c:	f112 0f14 	cmn.w	r2, #20
 8031650:	9308      	str	r3, [sp, #32]
 8031652:	9101      	str	r1, [sp, #4]
 8031654:	4bc4      	ldr	r3, [pc, #784]	; (8031968 <__kernel_rem_pio2+0x328>)
 8031656:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8031658:	900b      	str	r0, [sp, #44]	; 0x2c
 803165a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 803165e:	9302      	str	r3, [sp, #8]
 8031660:	9b08      	ldr	r3, [sp, #32]
 8031662:	f103 33ff 	add.w	r3, r3, #4294967295
 8031666:	bfa8      	it	ge
 8031668:	1ed4      	subge	r4, r2, #3
 803166a:	9306      	str	r3, [sp, #24]
 803166c:	bfb2      	itee	lt
 803166e:	2400      	movlt	r4, #0
 8031670:	2318      	movge	r3, #24
 8031672:	fb94 f4f3 	sdivge	r4, r4, r3
 8031676:	f06f 0317 	mvn.w	r3, #23
 803167a:	fb04 3303 	mla	r3, r4, r3, r3
 803167e:	eb03 0a02 	add.w	sl, r3, r2
 8031682:	9b02      	ldr	r3, [sp, #8]
 8031684:	9a06      	ldr	r2, [sp, #24]
 8031686:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8031958 <__kernel_rem_pio2+0x318>
 803168a:	eb03 0802 	add.w	r8, r3, r2
 803168e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8031690:	1aa7      	subs	r7, r4, r2
 8031692:	ae22      	add	r6, sp, #136	; 0x88
 8031694:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8031698:	2500      	movs	r5, #0
 803169a:	4545      	cmp	r5, r8
 803169c:	dd13      	ble.n	80316c6 <__kernel_rem_pio2+0x86>
 803169e:	9b08      	ldr	r3, [sp, #32]
 80316a0:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8031958 <__kernel_rem_pio2+0x318>
 80316a4:	aa22      	add	r2, sp, #136	; 0x88
 80316a6:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80316aa:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80316ae:	f04f 0800 	mov.w	r8, #0
 80316b2:	9b02      	ldr	r3, [sp, #8]
 80316b4:	4598      	cmp	r8, r3
 80316b6:	dc2f      	bgt.n	8031718 <__kernel_rem_pio2+0xd8>
 80316b8:	ed8d 8b04 	vstr	d8, [sp, #16]
 80316bc:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 80316c0:	462f      	mov	r7, r5
 80316c2:	2600      	movs	r6, #0
 80316c4:	e01b      	b.n	80316fe <__kernel_rem_pio2+0xbe>
 80316c6:	42ef      	cmn	r7, r5
 80316c8:	d407      	bmi.n	80316da <__kernel_rem_pio2+0x9a>
 80316ca:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80316ce:	f7ce ff33 	bl	8000538 <__aeabi_i2d>
 80316d2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80316d6:	3501      	adds	r5, #1
 80316d8:	e7df      	b.n	803169a <__kernel_rem_pio2+0x5a>
 80316da:	ec51 0b18 	vmov	r0, r1, d8
 80316de:	e7f8      	b.n	80316d2 <__kernel_rem_pio2+0x92>
 80316e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80316e4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80316e8:	f7ce ff90 	bl	800060c <__aeabi_dmul>
 80316ec:	4602      	mov	r2, r0
 80316ee:	460b      	mov	r3, r1
 80316f0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80316f4:	f7ce fdd4 	bl	80002a0 <__adddf3>
 80316f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80316fc:	3601      	adds	r6, #1
 80316fe:	9b06      	ldr	r3, [sp, #24]
 8031700:	429e      	cmp	r6, r3
 8031702:	f1a7 0708 	sub.w	r7, r7, #8
 8031706:	ddeb      	ble.n	80316e0 <__kernel_rem_pio2+0xa0>
 8031708:	ed9d 7b04 	vldr	d7, [sp, #16]
 803170c:	f108 0801 	add.w	r8, r8, #1
 8031710:	ecab 7b02 	vstmia	fp!, {d7}
 8031714:	3508      	adds	r5, #8
 8031716:	e7cc      	b.n	80316b2 <__kernel_rem_pio2+0x72>
 8031718:	9b02      	ldr	r3, [sp, #8]
 803171a:	aa0e      	add	r2, sp, #56	; 0x38
 803171c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8031720:	930d      	str	r3, [sp, #52]	; 0x34
 8031722:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8031724:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8031728:	9c02      	ldr	r4, [sp, #8]
 803172a:	930c      	str	r3, [sp, #48]	; 0x30
 803172c:	00e3      	lsls	r3, r4, #3
 803172e:	930a      	str	r3, [sp, #40]	; 0x28
 8031730:	ab9a      	add	r3, sp, #616	; 0x268
 8031732:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8031736:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 803173a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 803173e:	ab72      	add	r3, sp, #456	; 0x1c8
 8031740:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8031744:	46c3      	mov	fp, r8
 8031746:	46a1      	mov	r9, r4
 8031748:	f1b9 0f00 	cmp.w	r9, #0
 803174c:	f1a5 0508 	sub.w	r5, r5, #8
 8031750:	dc77      	bgt.n	8031842 <__kernel_rem_pio2+0x202>
 8031752:	ec47 6b10 	vmov	d0, r6, r7
 8031756:	4650      	mov	r0, sl
 8031758:	f000 fbe6 	bl	8031f28 <scalbn>
 803175c:	ec57 6b10 	vmov	r6, r7, d0
 8031760:	2200      	movs	r2, #0
 8031762:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8031766:	ee10 0a10 	vmov	r0, s0
 803176a:	4639      	mov	r1, r7
 803176c:	f7ce ff4e 	bl	800060c <__aeabi_dmul>
 8031770:	ec41 0b10 	vmov	d0, r0, r1
 8031774:	f7fe f94c 	bl	802fa10 <floor>
 8031778:	4b7c      	ldr	r3, [pc, #496]	; (803196c <__kernel_rem_pio2+0x32c>)
 803177a:	ec51 0b10 	vmov	r0, r1, d0
 803177e:	2200      	movs	r2, #0
 8031780:	f7ce ff44 	bl	800060c <__aeabi_dmul>
 8031784:	4602      	mov	r2, r0
 8031786:	460b      	mov	r3, r1
 8031788:	4630      	mov	r0, r6
 803178a:	4639      	mov	r1, r7
 803178c:	f7ce fd86 	bl	800029c <__aeabi_dsub>
 8031790:	460f      	mov	r7, r1
 8031792:	4606      	mov	r6, r0
 8031794:	f7cf f9ea 	bl	8000b6c <__aeabi_d2iz>
 8031798:	9004      	str	r0, [sp, #16]
 803179a:	f7ce fecd 	bl	8000538 <__aeabi_i2d>
 803179e:	4602      	mov	r2, r0
 80317a0:	460b      	mov	r3, r1
 80317a2:	4630      	mov	r0, r6
 80317a4:	4639      	mov	r1, r7
 80317a6:	f7ce fd79 	bl	800029c <__aeabi_dsub>
 80317aa:	f1ba 0f00 	cmp.w	sl, #0
 80317ae:	4606      	mov	r6, r0
 80317b0:	460f      	mov	r7, r1
 80317b2:	dd6d      	ble.n	8031890 <__kernel_rem_pio2+0x250>
 80317b4:	1e62      	subs	r2, r4, #1
 80317b6:	ab0e      	add	r3, sp, #56	; 0x38
 80317b8:	9d04      	ldr	r5, [sp, #16]
 80317ba:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80317be:	f1ca 0118 	rsb	r1, sl, #24
 80317c2:	fa40 f301 	asr.w	r3, r0, r1
 80317c6:	441d      	add	r5, r3
 80317c8:	408b      	lsls	r3, r1
 80317ca:	1ac0      	subs	r0, r0, r3
 80317cc:	ab0e      	add	r3, sp, #56	; 0x38
 80317ce:	9504      	str	r5, [sp, #16]
 80317d0:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80317d4:	f1ca 0317 	rsb	r3, sl, #23
 80317d8:	fa40 fb03 	asr.w	fp, r0, r3
 80317dc:	f1bb 0f00 	cmp.w	fp, #0
 80317e0:	dd65      	ble.n	80318ae <__kernel_rem_pio2+0x26e>
 80317e2:	9b04      	ldr	r3, [sp, #16]
 80317e4:	2200      	movs	r2, #0
 80317e6:	3301      	adds	r3, #1
 80317e8:	9304      	str	r3, [sp, #16]
 80317ea:	4615      	mov	r5, r2
 80317ec:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80317f0:	4294      	cmp	r4, r2
 80317f2:	f300 809c 	bgt.w	803192e <__kernel_rem_pio2+0x2ee>
 80317f6:	f1ba 0f00 	cmp.w	sl, #0
 80317fa:	dd07      	ble.n	803180c <__kernel_rem_pio2+0x1cc>
 80317fc:	f1ba 0f01 	cmp.w	sl, #1
 8031800:	f000 80c0 	beq.w	8031984 <__kernel_rem_pio2+0x344>
 8031804:	f1ba 0f02 	cmp.w	sl, #2
 8031808:	f000 80c6 	beq.w	8031998 <__kernel_rem_pio2+0x358>
 803180c:	f1bb 0f02 	cmp.w	fp, #2
 8031810:	d14d      	bne.n	80318ae <__kernel_rem_pio2+0x26e>
 8031812:	4632      	mov	r2, r6
 8031814:	463b      	mov	r3, r7
 8031816:	4956      	ldr	r1, [pc, #344]	; (8031970 <__kernel_rem_pio2+0x330>)
 8031818:	2000      	movs	r0, #0
 803181a:	f7ce fd3f 	bl	800029c <__aeabi_dsub>
 803181e:	4606      	mov	r6, r0
 8031820:	460f      	mov	r7, r1
 8031822:	2d00      	cmp	r5, #0
 8031824:	d043      	beq.n	80318ae <__kernel_rem_pio2+0x26e>
 8031826:	4650      	mov	r0, sl
 8031828:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8031960 <__kernel_rem_pio2+0x320>
 803182c:	f000 fb7c 	bl	8031f28 <scalbn>
 8031830:	4630      	mov	r0, r6
 8031832:	4639      	mov	r1, r7
 8031834:	ec53 2b10 	vmov	r2, r3, d0
 8031838:	f7ce fd30 	bl	800029c <__aeabi_dsub>
 803183c:	4606      	mov	r6, r0
 803183e:	460f      	mov	r7, r1
 8031840:	e035      	b.n	80318ae <__kernel_rem_pio2+0x26e>
 8031842:	4b4c      	ldr	r3, [pc, #304]	; (8031974 <__kernel_rem_pio2+0x334>)
 8031844:	2200      	movs	r2, #0
 8031846:	4630      	mov	r0, r6
 8031848:	4639      	mov	r1, r7
 803184a:	f7ce fedf 	bl	800060c <__aeabi_dmul>
 803184e:	f7cf f98d 	bl	8000b6c <__aeabi_d2iz>
 8031852:	f7ce fe71 	bl	8000538 <__aeabi_i2d>
 8031856:	4602      	mov	r2, r0
 8031858:	460b      	mov	r3, r1
 803185a:	ec43 2b18 	vmov	d8, r2, r3
 803185e:	4b46      	ldr	r3, [pc, #280]	; (8031978 <__kernel_rem_pio2+0x338>)
 8031860:	2200      	movs	r2, #0
 8031862:	f7ce fed3 	bl	800060c <__aeabi_dmul>
 8031866:	4602      	mov	r2, r0
 8031868:	460b      	mov	r3, r1
 803186a:	4630      	mov	r0, r6
 803186c:	4639      	mov	r1, r7
 803186e:	f7ce fd15 	bl	800029c <__aeabi_dsub>
 8031872:	f7cf f97b 	bl	8000b6c <__aeabi_d2iz>
 8031876:	e9d5 2300 	ldrd	r2, r3, [r5]
 803187a:	f84b 0b04 	str.w	r0, [fp], #4
 803187e:	ec51 0b18 	vmov	r0, r1, d8
 8031882:	f7ce fd0d 	bl	80002a0 <__adddf3>
 8031886:	f109 39ff 	add.w	r9, r9, #4294967295
 803188a:	4606      	mov	r6, r0
 803188c:	460f      	mov	r7, r1
 803188e:	e75b      	b.n	8031748 <__kernel_rem_pio2+0x108>
 8031890:	d106      	bne.n	80318a0 <__kernel_rem_pio2+0x260>
 8031892:	1e63      	subs	r3, r4, #1
 8031894:	aa0e      	add	r2, sp, #56	; 0x38
 8031896:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 803189a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 803189e:	e79d      	b.n	80317dc <__kernel_rem_pio2+0x19c>
 80318a0:	4b36      	ldr	r3, [pc, #216]	; (803197c <__kernel_rem_pio2+0x33c>)
 80318a2:	2200      	movs	r2, #0
 80318a4:	f7cf f938 	bl	8000b18 <__aeabi_dcmpge>
 80318a8:	2800      	cmp	r0, #0
 80318aa:	d13d      	bne.n	8031928 <__kernel_rem_pio2+0x2e8>
 80318ac:	4683      	mov	fp, r0
 80318ae:	2200      	movs	r2, #0
 80318b0:	2300      	movs	r3, #0
 80318b2:	4630      	mov	r0, r6
 80318b4:	4639      	mov	r1, r7
 80318b6:	f7cf f911 	bl	8000adc <__aeabi_dcmpeq>
 80318ba:	2800      	cmp	r0, #0
 80318bc:	f000 80c0 	beq.w	8031a40 <__kernel_rem_pio2+0x400>
 80318c0:	1e65      	subs	r5, r4, #1
 80318c2:	462b      	mov	r3, r5
 80318c4:	2200      	movs	r2, #0
 80318c6:	9902      	ldr	r1, [sp, #8]
 80318c8:	428b      	cmp	r3, r1
 80318ca:	da6c      	bge.n	80319a6 <__kernel_rem_pio2+0x366>
 80318cc:	2a00      	cmp	r2, #0
 80318ce:	f000 8089 	beq.w	80319e4 <__kernel_rem_pio2+0x3a4>
 80318d2:	ab0e      	add	r3, sp, #56	; 0x38
 80318d4:	f1aa 0a18 	sub.w	sl, sl, #24
 80318d8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80318dc:	2b00      	cmp	r3, #0
 80318de:	f000 80ad 	beq.w	8031a3c <__kernel_rem_pio2+0x3fc>
 80318e2:	4650      	mov	r0, sl
 80318e4:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8031960 <__kernel_rem_pio2+0x320>
 80318e8:	f000 fb1e 	bl	8031f28 <scalbn>
 80318ec:	ab9a      	add	r3, sp, #616	; 0x268
 80318ee:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80318f2:	ec57 6b10 	vmov	r6, r7, d0
 80318f6:	00ec      	lsls	r4, r5, #3
 80318f8:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 80318fc:	46aa      	mov	sl, r5
 80318fe:	f1ba 0f00 	cmp.w	sl, #0
 8031902:	f280 80d6 	bge.w	8031ab2 <__kernel_rem_pio2+0x472>
 8031906:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8031958 <__kernel_rem_pio2+0x318>
 803190a:	462e      	mov	r6, r5
 803190c:	2e00      	cmp	r6, #0
 803190e:	f2c0 8104 	blt.w	8031b1a <__kernel_rem_pio2+0x4da>
 8031912:	ab72      	add	r3, sp, #456	; 0x1c8
 8031914:	ed8d 8b06 	vstr	d8, [sp, #24]
 8031918:	f8df a064 	ldr.w	sl, [pc, #100]	; 8031980 <__kernel_rem_pio2+0x340>
 803191c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8031920:	f04f 0800 	mov.w	r8, #0
 8031924:	1baf      	subs	r7, r5, r6
 8031926:	e0ea      	b.n	8031afe <__kernel_rem_pio2+0x4be>
 8031928:	f04f 0b02 	mov.w	fp, #2
 803192c:	e759      	b.n	80317e2 <__kernel_rem_pio2+0x1a2>
 803192e:	f8d8 3000 	ldr.w	r3, [r8]
 8031932:	b955      	cbnz	r5, 803194a <__kernel_rem_pio2+0x30a>
 8031934:	b123      	cbz	r3, 8031940 <__kernel_rem_pio2+0x300>
 8031936:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 803193a:	f8c8 3000 	str.w	r3, [r8]
 803193e:	2301      	movs	r3, #1
 8031940:	3201      	adds	r2, #1
 8031942:	f108 0804 	add.w	r8, r8, #4
 8031946:	461d      	mov	r5, r3
 8031948:	e752      	b.n	80317f0 <__kernel_rem_pio2+0x1b0>
 803194a:	1acb      	subs	r3, r1, r3
 803194c:	f8c8 3000 	str.w	r3, [r8]
 8031950:	462b      	mov	r3, r5
 8031952:	e7f5      	b.n	8031940 <__kernel_rem_pio2+0x300>
 8031954:	f3af 8000 	nop.w
	...
 8031964:	3ff00000 	.word	0x3ff00000
 8031968:	08038170 	.word	0x08038170
 803196c:	40200000 	.word	0x40200000
 8031970:	3ff00000 	.word	0x3ff00000
 8031974:	3e700000 	.word	0x3e700000
 8031978:	41700000 	.word	0x41700000
 803197c:	3fe00000 	.word	0x3fe00000
 8031980:	08038130 	.word	0x08038130
 8031984:	1e62      	subs	r2, r4, #1
 8031986:	ab0e      	add	r3, sp, #56	; 0x38
 8031988:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803198c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8031990:	a90e      	add	r1, sp, #56	; 0x38
 8031992:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8031996:	e739      	b.n	803180c <__kernel_rem_pio2+0x1cc>
 8031998:	1e62      	subs	r2, r4, #1
 803199a:	ab0e      	add	r3, sp, #56	; 0x38
 803199c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80319a0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80319a4:	e7f4      	b.n	8031990 <__kernel_rem_pio2+0x350>
 80319a6:	a90e      	add	r1, sp, #56	; 0x38
 80319a8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80319ac:	3b01      	subs	r3, #1
 80319ae:	430a      	orrs	r2, r1
 80319b0:	e789      	b.n	80318c6 <__kernel_rem_pio2+0x286>
 80319b2:	3301      	adds	r3, #1
 80319b4:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80319b8:	2900      	cmp	r1, #0
 80319ba:	d0fa      	beq.n	80319b2 <__kernel_rem_pio2+0x372>
 80319bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80319be:	f502 721a 	add.w	r2, r2, #616	; 0x268
 80319c2:	446a      	add	r2, sp
 80319c4:	3a98      	subs	r2, #152	; 0x98
 80319c6:	920a      	str	r2, [sp, #40]	; 0x28
 80319c8:	9a08      	ldr	r2, [sp, #32]
 80319ca:	18e3      	adds	r3, r4, r3
 80319cc:	18a5      	adds	r5, r4, r2
 80319ce:	aa22      	add	r2, sp, #136	; 0x88
 80319d0:	f104 0801 	add.w	r8, r4, #1
 80319d4:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 80319d8:	9304      	str	r3, [sp, #16]
 80319da:	9b04      	ldr	r3, [sp, #16]
 80319dc:	4543      	cmp	r3, r8
 80319de:	da04      	bge.n	80319ea <__kernel_rem_pio2+0x3aa>
 80319e0:	461c      	mov	r4, r3
 80319e2:	e6a3      	b.n	803172c <__kernel_rem_pio2+0xec>
 80319e4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80319e6:	2301      	movs	r3, #1
 80319e8:	e7e4      	b.n	80319b4 <__kernel_rem_pio2+0x374>
 80319ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80319ec:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80319f0:	f7ce fda2 	bl	8000538 <__aeabi_i2d>
 80319f4:	e8e5 0102 	strd	r0, r1, [r5], #8
 80319f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80319fa:	46ab      	mov	fp, r5
 80319fc:	461c      	mov	r4, r3
 80319fe:	f04f 0900 	mov.w	r9, #0
 8031a02:	2600      	movs	r6, #0
 8031a04:	2700      	movs	r7, #0
 8031a06:	9b06      	ldr	r3, [sp, #24]
 8031a08:	4599      	cmp	r9, r3
 8031a0a:	dd06      	ble.n	8031a1a <__kernel_rem_pio2+0x3da>
 8031a0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8031a0e:	e8e3 6702 	strd	r6, r7, [r3], #8
 8031a12:	f108 0801 	add.w	r8, r8, #1
 8031a16:	930a      	str	r3, [sp, #40]	; 0x28
 8031a18:	e7df      	b.n	80319da <__kernel_rem_pio2+0x39a>
 8031a1a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8031a1e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8031a22:	f7ce fdf3 	bl	800060c <__aeabi_dmul>
 8031a26:	4602      	mov	r2, r0
 8031a28:	460b      	mov	r3, r1
 8031a2a:	4630      	mov	r0, r6
 8031a2c:	4639      	mov	r1, r7
 8031a2e:	f7ce fc37 	bl	80002a0 <__adddf3>
 8031a32:	f109 0901 	add.w	r9, r9, #1
 8031a36:	4606      	mov	r6, r0
 8031a38:	460f      	mov	r7, r1
 8031a3a:	e7e4      	b.n	8031a06 <__kernel_rem_pio2+0x3c6>
 8031a3c:	3d01      	subs	r5, #1
 8031a3e:	e748      	b.n	80318d2 <__kernel_rem_pio2+0x292>
 8031a40:	ec47 6b10 	vmov	d0, r6, r7
 8031a44:	f1ca 0000 	rsb	r0, sl, #0
 8031a48:	f000 fa6e 	bl	8031f28 <scalbn>
 8031a4c:	ec57 6b10 	vmov	r6, r7, d0
 8031a50:	4ba0      	ldr	r3, [pc, #640]	; (8031cd4 <__kernel_rem_pio2+0x694>)
 8031a52:	ee10 0a10 	vmov	r0, s0
 8031a56:	2200      	movs	r2, #0
 8031a58:	4639      	mov	r1, r7
 8031a5a:	f7cf f85d 	bl	8000b18 <__aeabi_dcmpge>
 8031a5e:	b1f8      	cbz	r0, 8031aa0 <__kernel_rem_pio2+0x460>
 8031a60:	4b9d      	ldr	r3, [pc, #628]	; (8031cd8 <__kernel_rem_pio2+0x698>)
 8031a62:	2200      	movs	r2, #0
 8031a64:	4630      	mov	r0, r6
 8031a66:	4639      	mov	r1, r7
 8031a68:	f7ce fdd0 	bl	800060c <__aeabi_dmul>
 8031a6c:	f7cf f87e 	bl	8000b6c <__aeabi_d2iz>
 8031a70:	4680      	mov	r8, r0
 8031a72:	f7ce fd61 	bl	8000538 <__aeabi_i2d>
 8031a76:	4b97      	ldr	r3, [pc, #604]	; (8031cd4 <__kernel_rem_pio2+0x694>)
 8031a78:	2200      	movs	r2, #0
 8031a7a:	f7ce fdc7 	bl	800060c <__aeabi_dmul>
 8031a7e:	460b      	mov	r3, r1
 8031a80:	4602      	mov	r2, r0
 8031a82:	4639      	mov	r1, r7
 8031a84:	4630      	mov	r0, r6
 8031a86:	f7ce fc09 	bl	800029c <__aeabi_dsub>
 8031a8a:	f7cf f86f 	bl	8000b6c <__aeabi_d2iz>
 8031a8e:	1c65      	adds	r5, r4, #1
 8031a90:	ab0e      	add	r3, sp, #56	; 0x38
 8031a92:	f10a 0a18 	add.w	sl, sl, #24
 8031a96:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8031a9a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8031a9e:	e720      	b.n	80318e2 <__kernel_rem_pio2+0x2a2>
 8031aa0:	4630      	mov	r0, r6
 8031aa2:	4639      	mov	r1, r7
 8031aa4:	f7cf f862 	bl	8000b6c <__aeabi_d2iz>
 8031aa8:	ab0e      	add	r3, sp, #56	; 0x38
 8031aaa:	4625      	mov	r5, r4
 8031aac:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8031ab0:	e717      	b.n	80318e2 <__kernel_rem_pio2+0x2a2>
 8031ab2:	ab0e      	add	r3, sp, #56	; 0x38
 8031ab4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8031ab8:	f7ce fd3e 	bl	8000538 <__aeabi_i2d>
 8031abc:	4632      	mov	r2, r6
 8031abe:	463b      	mov	r3, r7
 8031ac0:	f7ce fda4 	bl	800060c <__aeabi_dmul>
 8031ac4:	4b84      	ldr	r3, [pc, #528]	; (8031cd8 <__kernel_rem_pio2+0x698>)
 8031ac6:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8031aca:	2200      	movs	r2, #0
 8031acc:	4630      	mov	r0, r6
 8031ace:	4639      	mov	r1, r7
 8031ad0:	f7ce fd9c 	bl	800060c <__aeabi_dmul>
 8031ad4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8031ad8:	4606      	mov	r6, r0
 8031ada:	460f      	mov	r7, r1
 8031adc:	e70f      	b.n	80318fe <__kernel_rem_pio2+0x2be>
 8031ade:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8031ae2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8031ae6:	f7ce fd91 	bl	800060c <__aeabi_dmul>
 8031aea:	4602      	mov	r2, r0
 8031aec:	460b      	mov	r3, r1
 8031aee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8031af2:	f7ce fbd5 	bl	80002a0 <__adddf3>
 8031af6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8031afa:	f108 0801 	add.w	r8, r8, #1
 8031afe:	9b02      	ldr	r3, [sp, #8]
 8031b00:	4598      	cmp	r8, r3
 8031b02:	dc01      	bgt.n	8031b08 <__kernel_rem_pio2+0x4c8>
 8031b04:	45b8      	cmp	r8, r7
 8031b06:	ddea      	ble.n	8031ade <__kernel_rem_pio2+0x49e>
 8031b08:	ed9d 7b06 	vldr	d7, [sp, #24]
 8031b0c:	ab4a      	add	r3, sp, #296	; 0x128
 8031b0e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8031b12:	ed87 7b00 	vstr	d7, [r7]
 8031b16:	3e01      	subs	r6, #1
 8031b18:	e6f8      	b.n	803190c <__kernel_rem_pio2+0x2cc>
 8031b1a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8031b1c:	2b02      	cmp	r3, #2
 8031b1e:	dc0b      	bgt.n	8031b38 <__kernel_rem_pio2+0x4f8>
 8031b20:	2b00      	cmp	r3, #0
 8031b22:	dc35      	bgt.n	8031b90 <__kernel_rem_pio2+0x550>
 8031b24:	d059      	beq.n	8031bda <__kernel_rem_pio2+0x59a>
 8031b26:	9b04      	ldr	r3, [sp, #16]
 8031b28:	f003 0007 	and.w	r0, r3, #7
 8031b2c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8031b30:	ecbd 8b02 	vpop	{d8}
 8031b34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8031b38:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8031b3a:	2b03      	cmp	r3, #3
 8031b3c:	d1f3      	bne.n	8031b26 <__kernel_rem_pio2+0x4e6>
 8031b3e:	ab4a      	add	r3, sp, #296	; 0x128
 8031b40:	4423      	add	r3, r4
 8031b42:	9306      	str	r3, [sp, #24]
 8031b44:	461c      	mov	r4, r3
 8031b46:	469a      	mov	sl, r3
 8031b48:	9502      	str	r5, [sp, #8]
 8031b4a:	9b02      	ldr	r3, [sp, #8]
 8031b4c:	2b00      	cmp	r3, #0
 8031b4e:	f1aa 0a08 	sub.w	sl, sl, #8
 8031b52:	dc6b      	bgt.n	8031c2c <__kernel_rem_pio2+0x5ec>
 8031b54:	46aa      	mov	sl, r5
 8031b56:	f1ba 0f01 	cmp.w	sl, #1
 8031b5a:	f1a4 0408 	sub.w	r4, r4, #8
 8031b5e:	f300 8085 	bgt.w	8031c6c <__kernel_rem_pio2+0x62c>
 8031b62:	9c06      	ldr	r4, [sp, #24]
 8031b64:	2000      	movs	r0, #0
 8031b66:	3408      	adds	r4, #8
 8031b68:	2100      	movs	r1, #0
 8031b6a:	2d01      	cmp	r5, #1
 8031b6c:	f300 809d 	bgt.w	8031caa <__kernel_rem_pio2+0x66a>
 8031b70:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8031b74:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8031b78:	f1bb 0f00 	cmp.w	fp, #0
 8031b7c:	f040 809b 	bne.w	8031cb6 <__kernel_rem_pio2+0x676>
 8031b80:	9b01      	ldr	r3, [sp, #4]
 8031b82:	e9c3 5600 	strd	r5, r6, [r3]
 8031b86:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8031b8a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8031b8e:	e7ca      	b.n	8031b26 <__kernel_rem_pio2+0x4e6>
 8031b90:	3408      	adds	r4, #8
 8031b92:	ab4a      	add	r3, sp, #296	; 0x128
 8031b94:	441c      	add	r4, r3
 8031b96:	462e      	mov	r6, r5
 8031b98:	2000      	movs	r0, #0
 8031b9a:	2100      	movs	r1, #0
 8031b9c:	2e00      	cmp	r6, #0
 8031b9e:	da36      	bge.n	8031c0e <__kernel_rem_pio2+0x5ce>
 8031ba0:	f1bb 0f00 	cmp.w	fp, #0
 8031ba4:	d039      	beq.n	8031c1a <__kernel_rem_pio2+0x5da>
 8031ba6:	4602      	mov	r2, r0
 8031ba8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8031bac:	9c01      	ldr	r4, [sp, #4]
 8031bae:	e9c4 2300 	strd	r2, r3, [r4]
 8031bb2:	4602      	mov	r2, r0
 8031bb4:	460b      	mov	r3, r1
 8031bb6:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8031bba:	f7ce fb6f 	bl	800029c <__aeabi_dsub>
 8031bbe:	ae4c      	add	r6, sp, #304	; 0x130
 8031bc0:	2401      	movs	r4, #1
 8031bc2:	42a5      	cmp	r5, r4
 8031bc4:	da2c      	bge.n	8031c20 <__kernel_rem_pio2+0x5e0>
 8031bc6:	f1bb 0f00 	cmp.w	fp, #0
 8031bca:	d002      	beq.n	8031bd2 <__kernel_rem_pio2+0x592>
 8031bcc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8031bd0:	4619      	mov	r1, r3
 8031bd2:	9b01      	ldr	r3, [sp, #4]
 8031bd4:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8031bd8:	e7a5      	b.n	8031b26 <__kernel_rem_pio2+0x4e6>
 8031bda:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8031bde:	eb0d 0403 	add.w	r4, sp, r3
 8031be2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8031be6:	2000      	movs	r0, #0
 8031be8:	2100      	movs	r1, #0
 8031bea:	2d00      	cmp	r5, #0
 8031bec:	da09      	bge.n	8031c02 <__kernel_rem_pio2+0x5c2>
 8031bee:	f1bb 0f00 	cmp.w	fp, #0
 8031bf2:	d002      	beq.n	8031bfa <__kernel_rem_pio2+0x5ba>
 8031bf4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8031bf8:	4619      	mov	r1, r3
 8031bfa:	9b01      	ldr	r3, [sp, #4]
 8031bfc:	e9c3 0100 	strd	r0, r1, [r3]
 8031c00:	e791      	b.n	8031b26 <__kernel_rem_pio2+0x4e6>
 8031c02:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8031c06:	f7ce fb4b 	bl	80002a0 <__adddf3>
 8031c0a:	3d01      	subs	r5, #1
 8031c0c:	e7ed      	b.n	8031bea <__kernel_rem_pio2+0x5aa>
 8031c0e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8031c12:	f7ce fb45 	bl	80002a0 <__adddf3>
 8031c16:	3e01      	subs	r6, #1
 8031c18:	e7c0      	b.n	8031b9c <__kernel_rem_pio2+0x55c>
 8031c1a:	4602      	mov	r2, r0
 8031c1c:	460b      	mov	r3, r1
 8031c1e:	e7c5      	b.n	8031bac <__kernel_rem_pio2+0x56c>
 8031c20:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8031c24:	f7ce fb3c 	bl	80002a0 <__adddf3>
 8031c28:	3401      	adds	r4, #1
 8031c2a:	e7ca      	b.n	8031bc2 <__kernel_rem_pio2+0x582>
 8031c2c:	e9da 8900 	ldrd	r8, r9, [sl]
 8031c30:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8031c34:	9b02      	ldr	r3, [sp, #8]
 8031c36:	3b01      	subs	r3, #1
 8031c38:	9302      	str	r3, [sp, #8]
 8031c3a:	4632      	mov	r2, r6
 8031c3c:	463b      	mov	r3, r7
 8031c3e:	4640      	mov	r0, r8
 8031c40:	4649      	mov	r1, r9
 8031c42:	f7ce fb2d 	bl	80002a0 <__adddf3>
 8031c46:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8031c4a:	4602      	mov	r2, r0
 8031c4c:	460b      	mov	r3, r1
 8031c4e:	4640      	mov	r0, r8
 8031c50:	4649      	mov	r1, r9
 8031c52:	f7ce fb23 	bl	800029c <__aeabi_dsub>
 8031c56:	4632      	mov	r2, r6
 8031c58:	463b      	mov	r3, r7
 8031c5a:	f7ce fb21 	bl	80002a0 <__adddf3>
 8031c5e:	ed9d 7b08 	vldr	d7, [sp, #32]
 8031c62:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8031c66:	ed8a 7b00 	vstr	d7, [sl]
 8031c6a:	e76e      	b.n	8031b4a <__kernel_rem_pio2+0x50a>
 8031c6c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8031c70:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8031c74:	4640      	mov	r0, r8
 8031c76:	4632      	mov	r2, r6
 8031c78:	463b      	mov	r3, r7
 8031c7a:	4649      	mov	r1, r9
 8031c7c:	f7ce fb10 	bl	80002a0 <__adddf3>
 8031c80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8031c84:	4602      	mov	r2, r0
 8031c86:	460b      	mov	r3, r1
 8031c88:	4640      	mov	r0, r8
 8031c8a:	4649      	mov	r1, r9
 8031c8c:	f7ce fb06 	bl	800029c <__aeabi_dsub>
 8031c90:	4632      	mov	r2, r6
 8031c92:	463b      	mov	r3, r7
 8031c94:	f7ce fb04 	bl	80002a0 <__adddf3>
 8031c98:	ed9d 7b02 	vldr	d7, [sp, #8]
 8031c9c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8031ca0:	ed84 7b00 	vstr	d7, [r4]
 8031ca4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8031ca8:	e755      	b.n	8031b56 <__kernel_rem_pio2+0x516>
 8031caa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8031cae:	f7ce faf7 	bl	80002a0 <__adddf3>
 8031cb2:	3d01      	subs	r5, #1
 8031cb4:	e759      	b.n	8031b6a <__kernel_rem_pio2+0x52a>
 8031cb6:	9b01      	ldr	r3, [sp, #4]
 8031cb8:	9a01      	ldr	r2, [sp, #4]
 8031cba:	601d      	str	r5, [r3, #0]
 8031cbc:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8031cc0:	605c      	str	r4, [r3, #4]
 8031cc2:	609f      	str	r7, [r3, #8]
 8031cc4:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8031cc8:	60d3      	str	r3, [r2, #12]
 8031cca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8031cce:	6110      	str	r0, [r2, #16]
 8031cd0:	6153      	str	r3, [r2, #20]
 8031cd2:	e728      	b.n	8031b26 <__kernel_rem_pio2+0x4e6>
 8031cd4:	41700000 	.word	0x41700000
 8031cd8:	3e700000 	.word	0x3e700000
 8031cdc:	00000000 	.word	0x00000000

08031ce0 <__kernel_sin>:
 8031ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8031ce4:	ed2d 8b04 	vpush	{d8-d9}
 8031ce8:	eeb0 8a41 	vmov.f32	s16, s2
 8031cec:	eef0 8a61 	vmov.f32	s17, s3
 8031cf0:	ec55 4b10 	vmov	r4, r5, d0
 8031cf4:	b083      	sub	sp, #12
 8031cf6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8031cfa:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8031cfe:	9001      	str	r0, [sp, #4]
 8031d00:	da06      	bge.n	8031d10 <__kernel_sin+0x30>
 8031d02:	ee10 0a10 	vmov	r0, s0
 8031d06:	4629      	mov	r1, r5
 8031d08:	f7ce ff30 	bl	8000b6c <__aeabi_d2iz>
 8031d0c:	2800      	cmp	r0, #0
 8031d0e:	d051      	beq.n	8031db4 <__kernel_sin+0xd4>
 8031d10:	4622      	mov	r2, r4
 8031d12:	462b      	mov	r3, r5
 8031d14:	4620      	mov	r0, r4
 8031d16:	4629      	mov	r1, r5
 8031d18:	f7ce fc78 	bl	800060c <__aeabi_dmul>
 8031d1c:	4682      	mov	sl, r0
 8031d1e:	468b      	mov	fp, r1
 8031d20:	4602      	mov	r2, r0
 8031d22:	460b      	mov	r3, r1
 8031d24:	4620      	mov	r0, r4
 8031d26:	4629      	mov	r1, r5
 8031d28:	f7ce fc70 	bl	800060c <__aeabi_dmul>
 8031d2c:	a341      	add	r3, pc, #260	; (adr r3, 8031e34 <__kernel_sin+0x154>)
 8031d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8031d32:	4680      	mov	r8, r0
 8031d34:	4689      	mov	r9, r1
 8031d36:	4650      	mov	r0, sl
 8031d38:	4659      	mov	r1, fp
 8031d3a:	f7ce fc67 	bl	800060c <__aeabi_dmul>
 8031d3e:	a33f      	add	r3, pc, #252	; (adr r3, 8031e3c <__kernel_sin+0x15c>)
 8031d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8031d44:	f7ce faaa 	bl	800029c <__aeabi_dsub>
 8031d48:	4652      	mov	r2, sl
 8031d4a:	465b      	mov	r3, fp
 8031d4c:	f7ce fc5e 	bl	800060c <__aeabi_dmul>
 8031d50:	a33c      	add	r3, pc, #240	; (adr r3, 8031e44 <__kernel_sin+0x164>)
 8031d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8031d56:	f7ce faa3 	bl	80002a0 <__adddf3>
 8031d5a:	4652      	mov	r2, sl
 8031d5c:	465b      	mov	r3, fp
 8031d5e:	f7ce fc55 	bl	800060c <__aeabi_dmul>
 8031d62:	a33a      	add	r3, pc, #232	; (adr r3, 8031e4c <__kernel_sin+0x16c>)
 8031d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8031d68:	f7ce fa98 	bl	800029c <__aeabi_dsub>
 8031d6c:	4652      	mov	r2, sl
 8031d6e:	465b      	mov	r3, fp
 8031d70:	f7ce fc4c 	bl	800060c <__aeabi_dmul>
 8031d74:	a337      	add	r3, pc, #220	; (adr r3, 8031e54 <__kernel_sin+0x174>)
 8031d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8031d7a:	f7ce fa91 	bl	80002a0 <__adddf3>
 8031d7e:	9b01      	ldr	r3, [sp, #4]
 8031d80:	4606      	mov	r6, r0
 8031d82:	460f      	mov	r7, r1
 8031d84:	b9eb      	cbnz	r3, 8031dc2 <__kernel_sin+0xe2>
 8031d86:	4602      	mov	r2, r0
 8031d88:	460b      	mov	r3, r1
 8031d8a:	4650      	mov	r0, sl
 8031d8c:	4659      	mov	r1, fp
 8031d8e:	f7ce fc3d 	bl	800060c <__aeabi_dmul>
 8031d92:	a325      	add	r3, pc, #148	; (adr r3, 8031e28 <__kernel_sin+0x148>)
 8031d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8031d98:	f7ce fa80 	bl	800029c <__aeabi_dsub>
 8031d9c:	4642      	mov	r2, r8
 8031d9e:	464b      	mov	r3, r9
 8031da0:	f7ce fc34 	bl	800060c <__aeabi_dmul>
 8031da4:	4602      	mov	r2, r0
 8031da6:	460b      	mov	r3, r1
 8031da8:	4620      	mov	r0, r4
 8031daa:	4629      	mov	r1, r5
 8031dac:	f7ce fa78 	bl	80002a0 <__adddf3>
 8031db0:	4604      	mov	r4, r0
 8031db2:	460d      	mov	r5, r1
 8031db4:	ec45 4b10 	vmov	d0, r4, r5
 8031db8:	b003      	add	sp, #12
 8031dba:	ecbd 8b04 	vpop	{d8-d9}
 8031dbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8031dc2:	4b1b      	ldr	r3, [pc, #108]	; (8031e30 <__kernel_sin+0x150>)
 8031dc4:	ec51 0b18 	vmov	r0, r1, d8
 8031dc8:	2200      	movs	r2, #0
 8031dca:	f7ce fc1f 	bl	800060c <__aeabi_dmul>
 8031dce:	4632      	mov	r2, r6
 8031dd0:	ec41 0b19 	vmov	d9, r0, r1
 8031dd4:	463b      	mov	r3, r7
 8031dd6:	4640      	mov	r0, r8
 8031dd8:	4649      	mov	r1, r9
 8031dda:	f7ce fc17 	bl	800060c <__aeabi_dmul>
 8031dde:	4602      	mov	r2, r0
 8031de0:	460b      	mov	r3, r1
 8031de2:	ec51 0b19 	vmov	r0, r1, d9
 8031de6:	f7ce fa59 	bl	800029c <__aeabi_dsub>
 8031dea:	4652      	mov	r2, sl
 8031dec:	465b      	mov	r3, fp
 8031dee:	f7ce fc0d 	bl	800060c <__aeabi_dmul>
 8031df2:	ec53 2b18 	vmov	r2, r3, d8
 8031df6:	f7ce fa51 	bl	800029c <__aeabi_dsub>
 8031dfa:	a30b      	add	r3, pc, #44	; (adr r3, 8031e28 <__kernel_sin+0x148>)
 8031dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8031e00:	4606      	mov	r6, r0
 8031e02:	460f      	mov	r7, r1
 8031e04:	4640      	mov	r0, r8
 8031e06:	4649      	mov	r1, r9
 8031e08:	f7ce fc00 	bl	800060c <__aeabi_dmul>
 8031e0c:	4602      	mov	r2, r0
 8031e0e:	460b      	mov	r3, r1
 8031e10:	4630      	mov	r0, r6
 8031e12:	4639      	mov	r1, r7
 8031e14:	f7ce fa44 	bl	80002a0 <__adddf3>
 8031e18:	4602      	mov	r2, r0
 8031e1a:	460b      	mov	r3, r1
 8031e1c:	4620      	mov	r0, r4
 8031e1e:	4629      	mov	r1, r5
 8031e20:	f7ce fa3c 	bl	800029c <__aeabi_dsub>
 8031e24:	e7c4      	b.n	8031db0 <__kernel_sin+0xd0>
 8031e26:	bf00      	nop
 8031e28:	55555549 	.word	0x55555549
 8031e2c:	3fc55555 	.word	0x3fc55555
 8031e30:	3fe00000 	.word	0x3fe00000
 8031e34:	5acfd57c 	.word	0x5acfd57c
 8031e38:	3de5d93a 	.word	0x3de5d93a
 8031e3c:	8a2b9ceb 	.word	0x8a2b9ceb
 8031e40:	3e5ae5e6 	.word	0x3e5ae5e6
 8031e44:	57b1fe7d 	.word	0x57b1fe7d
 8031e48:	3ec71de3 	.word	0x3ec71de3
 8031e4c:	19c161d5 	.word	0x19c161d5
 8031e50:	3f2a01a0 	.word	0x3f2a01a0
 8031e54:	1110f8a6 	.word	0x1110f8a6
 8031e58:	3f811111 	.word	0x3f811111

08031e5c <with_errno>:
 8031e5c:	b570      	push	{r4, r5, r6, lr}
 8031e5e:	4604      	mov	r4, r0
 8031e60:	460d      	mov	r5, r1
 8031e62:	4616      	mov	r6, r2
 8031e64:	f000 f928 	bl	80320b8 <__errno>
 8031e68:	4629      	mov	r1, r5
 8031e6a:	6006      	str	r6, [r0, #0]
 8031e6c:	4620      	mov	r0, r4
 8031e6e:	bd70      	pop	{r4, r5, r6, pc}

08031e70 <xflow>:
 8031e70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8031e72:	4614      	mov	r4, r2
 8031e74:	461d      	mov	r5, r3
 8031e76:	b108      	cbz	r0, 8031e7c <xflow+0xc>
 8031e78:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8031e7c:	e9cd 2300 	strd	r2, r3, [sp]
 8031e80:	e9dd 2300 	ldrd	r2, r3, [sp]
 8031e84:	4620      	mov	r0, r4
 8031e86:	4629      	mov	r1, r5
 8031e88:	f7ce fbc0 	bl	800060c <__aeabi_dmul>
 8031e8c:	2222      	movs	r2, #34	; 0x22
 8031e8e:	b003      	add	sp, #12
 8031e90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8031e94:	f7ff bfe2 	b.w	8031e5c <with_errno>

08031e98 <__math_uflow>:
 8031e98:	b508      	push	{r3, lr}
 8031e9a:	2200      	movs	r2, #0
 8031e9c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8031ea0:	f7ff ffe6 	bl	8031e70 <xflow>
 8031ea4:	ec41 0b10 	vmov	d0, r0, r1
 8031ea8:	bd08      	pop	{r3, pc}

08031eaa <__math_oflow>:
 8031eaa:	b508      	push	{r3, lr}
 8031eac:	2200      	movs	r2, #0
 8031eae:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8031eb2:	f7ff ffdd 	bl	8031e70 <xflow>
 8031eb6:	ec41 0b10 	vmov	d0, r0, r1
 8031eba:	bd08      	pop	{r3, pc}

08031ebc <with_errnof>:
 8031ebc:	b513      	push	{r0, r1, r4, lr}
 8031ebe:	4604      	mov	r4, r0
 8031ec0:	ed8d 0a01 	vstr	s0, [sp, #4]
 8031ec4:	f000 f8f8 	bl	80320b8 <__errno>
 8031ec8:	ed9d 0a01 	vldr	s0, [sp, #4]
 8031ecc:	6004      	str	r4, [r0, #0]
 8031ece:	b002      	add	sp, #8
 8031ed0:	bd10      	pop	{r4, pc}

08031ed2 <xflowf>:
 8031ed2:	b130      	cbz	r0, 8031ee2 <xflowf+0x10>
 8031ed4:	eef1 7a40 	vneg.f32	s15, s0
 8031ed8:	ee27 0a80 	vmul.f32	s0, s15, s0
 8031edc:	2022      	movs	r0, #34	; 0x22
 8031ede:	f7ff bfed 	b.w	8031ebc <with_errnof>
 8031ee2:	eef0 7a40 	vmov.f32	s15, s0
 8031ee6:	e7f7      	b.n	8031ed8 <xflowf+0x6>

08031ee8 <__math_uflowf>:
 8031ee8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8031ef0 <__math_uflowf+0x8>
 8031eec:	f7ff bff1 	b.w	8031ed2 <xflowf>
 8031ef0:	10000000 	.word	0x10000000

08031ef4 <__math_oflowf>:
 8031ef4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8031efc <__math_oflowf+0x8>
 8031ef8:	f7ff bfeb 	b.w	8031ed2 <xflowf>
 8031efc:	70000000 	.word	0x70000000

08031f00 <fabs>:
 8031f00:	ec51 0b10 	vmov	r0, r1, d0
 8031f04:	ee10 2a10 	vmov	r2, s0
 8031f08:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8031f0c:	ec43 2b10 	vmov	d0, r2, r3
 8031f10:	4770      	bx	lr

08031f12 <finite>:
 8031f12:	b082      	sub	sp, #8
 8031f14:	ed8d 0b00 	vstr	d0, [sp]
 8031f18:	9801      	ldr	r0, [sp, #4]
 8031f1a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8031f1e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8031f22:	0fc0      	lsrs	r0, r0, #31
 8031f24:	b002      	add	sp, #8
 8031f26:	4770      	bx	lr

08031f28 <scalbn>:
 8031f28:	b570      	push	{r4, r5, r6, lr}
 8031f2a:	ec55 4b10 	vmov	r4, r5, d0
 8031f2e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8031f32:	4606      	mov	r6, r0
 8031f34:	462b      	mov	r3, r5
 8031f36:	b99a      	cbnz	r2, 8031f60 <scalbn+0x38>
 8031f38:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8031f3c:	4323      	orrs	r3, r4
 8031f3e:	d036      	beq.n	8031fae <scalbn+0x86>
 8031f40:	4b39      	ldr	r3, [pc, #228]	; (8032028 <scalbn+0x100>)
 8031f42:	4629      	mov	r1, r5
 8031f44:	ee10 0a10 	vmov	r0, s0
 8031f48:	2200      	movs	r2, #0
 8031f4a:	f7ce fb5f 	bl	800060c <__aeabi_dmul>
 8031f4e:	4b37      	ldr	r3, [pc, #220]	; (803202c <scalbn+0x104>)
 8031f50:	429e      	cmp	r6, r3
 8031f52:	4604      	mov	r4, r0
 8031f54:	460d      	mov	r5, r1
 8031f56:	da10      	bge.n	8031f7a <scalbn+0x52>
 8031f58:	a32b      	add	r3, pc, #172	; (adr r3, 8032008 <scalbn+0xe0>)
 8031f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8031f5e:	e03a      	b.n	8031fd6 <scalbn+0xae>
 8031f60:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8031f64:	428a      	cmp	r2, r1
 8031f66:	d10c      	bne.n	8031f82 <scalbn+0x5a>
 8031f68:	ee10 2a10 	vmov	r2, s0
 8031f6c:	4620      	mov	r0, r4
 8031f6e:	4629      	mov	r1, r5
 8031f70:	f7ce f996 	bl	80002a0 <__adddf3>
 8031f74:	4604      	mov	r4, r0
 8031f76:	460d      	mov	r5, r1
 8031f78:	e019      	b.n	8031fae <scalbn+0x86>
 8031f7a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8031f7e:	460b      	mov	r3, r1
 8031f80:	3a36      	subs	r2, #54	; 0x36
 8031f82:	4432      	add	r2, r6
 8031f84:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8031f88:	428a      	cmp	r2, r1
 8031f8a:	dd08      	ble.n	8031f9e <scalbn+0x76>
 8031f8c:	2d00      	cmp	r5, #0
 8031f8e:	a120      	add	r1, pc, #128	; (adr r1, 8032010 <scalbn+0xe8>)
 8031f90:	e9d1 0100 	ldrd	r0, r1, [r1]
 8031f94:	da1c      	bge.n	8031fd0 <scalbn+0xa8>
 8031f96:	a120      	add	r1, pc, #128	; (adr r1, 8032018 <scalbn+0xf0>)
 8031f98:	e9d1 0100 	ldrd	r0, r1, [r1]
 8031f9c:	e018      	b.n	8031fd0 <scalbn+0xa8>
 8031f9e:	2a00      	cmp	r2, #0
 8031fa0:	dd08      	ble.n	8031fb4 <scalbn+0x8c>
 8031fa2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8031fa6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8031faa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8031fae:	ec45 4b10 	vmov	d0, r4, r5
 8031fb2:	bd70      	pop	{r4, r5, r6, pc}
 8031fb4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8031fb8:	da19      	bge.n	8031fee <scalbn+0xc6>
 8031fba:	f24c 3350 	movw	r3, #50000	; 0xc350
 8031fbe:	429e      	cmp	r6, r3
 8031fc0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8031fc4:	dd0a      	ble.n	8031fdc <scalbn+0xb4>
 8031fc6:	a112      	add	r1, pc, #72	; (adr r1, 8032010 <scalbn+0xe8>)
 8031fc8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8031fcc:	2b00      	cmp	r3, #0
 8031fce:	d1e2      	bne.n	8031f96 <scalbn+0x6e>
 8031fd0:	a30f      	add	r3, pc, #60	; (adr r3, 8032010 <scalbn+0xe8>)
 8031fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8031fd6:	f7ce fb19 	bl	800060c <__aeabi_dmul>
 8031fda:	e7cb      	b.n	8031f74 <scalbn+0x4c>
 8031fdc:	a10a      	add	r1, pc, #40	; (adr r1, 8032008 <scalbn+0xe0>)
 8031fde:	e9d1 0100 	ldrd	r0, r1, [r1]
 8031fe2:	2b00      	cmp	r3, #0
 8031fe4:	d0b8      	beq.n	8031f58 <scalbn+0x30>
 8031fe6:	a10e      	add	r1, pc, #56	; (adr r1, 8032020 <scalbn+0xf8>)
 8031fe8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8031fec:	e7b4      	b.n	8031f58 <scalbn+0x30>
 8031fee:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8031ff2:	3236      	adds	r2, #54	; 0x36
 8031ff4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8031ff8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8031ffc:	4620      	mov	r0, r4
 8031ffe:	4b0c      	ldr	r3, [pc, #48]	; (8032030 <scalbn+0x108>)
 8032000:	2200      	movs	r2, #0
 8032002:	e7e8      	b.n	8031fd6 <scalbn+0xae>
 8032004:	f3af 8000 	nop.w
 8032008:	c2f8f359 	.word	0xc2f8f359
 803200c:	01a56e1f 	.word	0x01a56e1f
 8032010:	8800759c 	.word	0x8800759c
 8032014:	7e37e43c 	.word	0x7e37e43c
 8032018:	8800759c 	.word	0x8800759c
 803201c:	fe37e43c 	.word	0xfe37e43c
 8032020:	c2f8f359 	.word	0xc2f8f359
 8032024:	81a56e1f 	.word	0x81a56e1f
 8032028:	43500000 	.word	0x43500000
 803202c:	ffff3cb0 	.word	0xffff3cb0
 8032030:	3c900000 	.word	0x3c900000

08032034 <finitef>:
 8032034:	b082      	sub	sp, #8
 8032036:	ed8d 0a01 	vstr	s0, [sp, #4]
 803203a:	9801      	ldr	r0, [sp, #4]
 803203c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8032040:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8032044:	bfac      	ite	ge
 8032046:	2000      	movge	r0, #0
 8032048:	2001      	movlt	r0, #1
 803204a:	b002      	add	sp, #8
 803204c:	4770      	bx	lr
	...

08032050 <nanf>:
 8032050:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8032058 <nanf+0x8>
 8032054:	4770      	bx	lr
 8032056:	bf00      	nop
 8032058:	7fc00000 	.word	0x7fc00000

0803205c <abort>:
 803205c:	b508      	push	{r3, lr}
 803205e:	2006      	movs	r0, #6
 8032060:	f000 fcc6 	bl	80329f0 <raise>
 8032064:	2001      	movs	r0, #1
 8032066:	f7d5 fafb 	bl	8007660 <_exit>
	...

0803206c <__assert_func>:
 803206c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 803206e:	4614      	mov	r4, r2
 8032070:	461a      	mov	r2, r3
 8032072:	4b09      	ldr	r3, [pc, #36]	; (8032098 <__assert_func+0x2c>)
 8032074:	681b      	ldr	r3, [r3, #0]
 8032076:	4605      	mov	r5, r0
 8032078:	68d8      	ldr	r0, [r3, #12]
 803207a:	b14c      	cbz	r4, 8032090 <__assert_func+0x24>
 803207c:	4b07      	ldr	r3, [pc, #28]	; (803209c <__assert_func+0x30>)
 803207e:	9100      	str	r1, [sp, #0]
 8032080:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8032084:	4906      	ldr	r1, [pc, #24]	; (80320a0 <__assert_func+0x34>)
 8032086:	462b      	mov	r3, r5
 8032088:	f000 f81c 	bl	80320c4 <fiprintf>
 803208c:	f7ff ffe6 	bl	803205c <abort>
 8032090:	4b04      	ldr	r3, [pc, #16]	; (80320a4 <__assert_func+0x38>)
 8032092:	461c      	mov	r4, r3
 8032094:	e7f3      	b.n	803207e <__assert_func+0x12>
 8032096:	bf00      	nop
 8032098:	200006c4 	.word	0x200006c4
 803209c:	08038180 	.word	0x08038180
 80320a0:	0803818d 	.word	0x0803818d
 80320a4:	080381bb 	.word	0x080381bb

080320a8 <calloc>:
 80320a8:	4b02      	ldr	r3, [pc, #8]	; (80320b4 <calloc+0xc>)
 80320aa:	460a      	mov	r2, r1
 80320ac:	4601      	mov	r1, r0
 80320ae:	6818      	ldr	r0, [r3, #0]
 80320b0:	f000 b882 	b.w	80321b8 <_calloc_r>
 80320b4:	200006c4 	.word	0x200006c4

080320b8 <__errno>:
 80320b8:	4b01      	ldr	r3, [pc, #4]	; (80320c0 <__errno+0x8>)
 80320ba:	6818      	ldr	r0, [r3, #0]
 80320bc:	4770      	bx	lr
 80320be:	bf00      	nop
 80320c0:	200006c4 	.word	0x200006c4

080320c4 <fiprintf>:
 80320c4:	b40e      	push	{r1, r2, r3}
 80320c6:	b503      	push	{r0, r1, lr}
 80320c8:	4601      	mov	r1, r0
 80320ca:	ab03      	add	r3, sp, #12
 80320cc:	4805      	ldr	r0, [pc, #20]	; (80320e4 <fiprintf+0x20>)
 80320ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80320d2:	6800      	ldr	r0, [r0, #0]
 80320d4:	9301      	str	r3, [sp, #4]
 80320d6:	f000 f98f 	bl	80323f8 <_vfiprintf_r>
 80320da:	b002      	add	sp, #8
 80320dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80320e0:	b003      	add	sp, #12
 80320e2:	4770      	bx	lr
 80320e4:	200006c4 	.word	0x200006c4

080320e8 <__libc_init_array>:
 80320e8:	b570      	push	{r4, r5, r6, lr}
 80320ea:	4d0d      	ldr	r5, [pc, #52]	; (8032120 <__libc_init_array+0x38>)
 80320ec:	4c0d      	ldr	r4, [pc, #52]	; (8032124 <__libc_init_array+0x3c>)
 80320ee:	1b64      	subs	r4, r4, r5
 80320f0:	10a4      	asrs	r4, r4, #2
 80320f2:	2600      	movs	r6, #0
 80320f4:	42a6      	cmp	r6, r4
 80320f6:	d109      	bne.n	803210c <__libc_init_array+0x24>
 80320f8:	4d0b      	ldr	r5, [pc, #44]	; (8032128 <__libc_init_array+0x40>)
 80320fa:	4c0c      	ldr	r4, [pc, #48]	; (803212c <__libc_init_array+0x44>)
 80320fc:	f001 f9da 	bl	80334b4 <_init>
 8032100:	1b64      	subs	r4, r4, r5
 8032102:	10a4      	asrs	r4, r4, #2
 8032104:	2600      	movs	r6, #0
 8032106:	42a6      	cmp	r6, r4
 8032108:	d105      	bne.n	8032116 <__libc_init_array+0x2e>
 803210a:	bd70      	pop	{r4, r5, r6, pc}
 803210c:	f855 3b04 	ldr.w	r3, [r5], #4
 8032110:	4798      	blx	r3
 8032112:	3601      	adds	r6, #1
 8032114:	e7ee      	b.n	80320f4 <__libc_init_array+0xc>
 8032116:	f855 3b04 	ldr.w	r3, [r5], #4
 803211a:	4798      	blx	r3
 803211c:	3601      	adds	r6, #1
 803211e:	e7f2      	b.n	8032106 <__libc_init_array+0x1e>
 8032120:	0803825c 	.word	0x0803825c
 8032124:	0803825c 	.word	0x0803825c
 8032128:	0803825c 	.word	0x0803825c
 803212c:	08038264 	.word	0x08038264

08032130 <__retarget_lock_init_recursive>:
 8032130:	4770      	bx	lr

08032132 <__retarget_lock_acquire_recursive>:
 8032132:	4770      	bx	lr

08032134 <__retarget_lock_release_recursive>:
 8032134:	4770      	bx	lr
	...

08032138 <malloc>:
 8032138:	4b02      	ldr	r3, [pc, #8]	; (8032144 <malloc+0xc>)
 803213a:	4601      	mov	r1, r0
 803213c:	6818      	ldr	r0, [r3, #0]
 803213e:	f000 b8bd 	b.w	80322bc <_malloc_r>
 8032142:	bf00      	nop
 8032144:	200006c4 	.word	0x200006c4

08032148 <free>:
 8032148:	4b02      	ldr	r3, [pc, #8]	; (8032154 <free+0xc>)
 803214a:	4601      	mov	r1, r0
 803214c:	6818      	ldr	r0, [r3, #0]
 803214e:	f000 b849 	b.w	80321e4 <_free_r>
 8032152:	bf00      	nop
 8032154:	200006c4 	.word	0x200006c4

08032158 <memcpy>:
 8032158:	440a      	add	r2, r1
 803215a:	4291      	cmp	r1, r2
 803215c:	f100 33ff 	add.w	r3, r0, #4294967295
 8032160:	d100      	bne.n	8032164 <memcpy+0xc>
 8032162:	4770      	bx	lr
 8032164:	b510      	push	{r4, lr}
 8032166:	f811 4b01 	ldrb.w	r4, [r1], #1
 803216a:	f803 4f01 	strb.w	r4, [r3, #1]!
 803216e:	4291      	cmp	r1, r2
 8032170:	d1f9      	bne.n	8032166 <memcpy+0xe>
 8032172:	bd10      	pop	{r4, pc}

08032174 <memmove>:
 8032174:	4288      	cmp	r0, r1
 8032176:	b510      	push	{r4, lr}
 8032178:	eb01 0402 	add.w	r4, r1, r2
 803217c:	d902      	bls.n	8032184 <memmove+0x10>
 803217e:	4284      	cmp	r4, r0
 8032180:	4623      	mov	r3, r4
 8032182:	d807      	bhi.n	8032194 <memmove+0x20>
 8032184:	1e43      	subs	r3, r0, #1
 8032186:	42a1      	cmp	r1, r4
 8032188:	d008      	beq.n	803219c <memmove+0x28>
 803218a:	f811 2b01 	ldrb.w	r2, [r1], #1
 803218e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8032192:	e7f8      	b.n	8032186 <memmove+0x12>
 8032194:	4402      	add	r2, r0
 8032196:	4601      	mov	r1, r0
 8032198:	428a      	cmp	r2, r1
 803219a:	d100      	bne.n	803219e <memmove+0x2a>
 803219c:	bd10      	pop	{r4, pc}
 803219e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80321a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80321a6:	e7f7      	b.n	8032198 <memmove+0x24>

080321a8 <memset>:
 80321a8:	4402      	add	r2, r0
 80321aa:	4603      	mov	r3, r0
 80321ac:	4293      	cmp	r3, r2
 80321ae:	d100      	bne.n	80321b2 <memset+0xa>
 80321b0:	4770      	bx	lr
 80321b2:	f803 1b01 	strb.w	r1, [r3], #1
 80321b6:	e7f9      	b.n	80321ac <memset+0x4>

080321b8 <_calloc_r>:
 80321b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80321ba:	fba1 2402 	umull	r2, r4, r1, r2
 80321be:	b94c      	cbnz	r4, 80321d4 <_calloc_r+0x1c>
 80321c0:	4611      	mov	r1, r2
 80321c2:	9201      	str	r2, [sp, #4]
 80321c4:	f000 f87a 	bl	80322bc <_malloc_r>
 80321c8:	9a01      	ldr	r2, [sp, #4]
 80321ca:	4605      	mov	r5, r0
 80321cc:	b930      	cbnz	r0, 80321dc <_calloc_r+0x24>
 80321ce:	4628      	mov	r0, r5
 80321d0:	b003      	add	sp, #12
 80321d2:	bd30      	pop	{r4, r5, pc}
 80321d4:	220c      	movs	r2, #12
 80321d6:	6002      	str	r2, [r0, #0]
 80321d8:	2500      	movs	r5, #0
 80321da:	e7f8      	b.n	80321ce <_calloc_r+0x16>
 80321dc:	4621      	mov	r1, r4
 80321de:	f7ff ffe3 	bl	80321a8 <memset>
 80321e2:	e7f4      	b.n	80321ce <_calloc_r+0x16>

080321e4 <_free_r>:
 80321e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80321e6:	2900      	cmp	r1, #0
 80321e8:	d044      	beq.n	8032274 <_free_r+0x90>
 80321ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80321ee:	9001      	str	r0, [sp, #4]
 80321f0:	2b00      	cmp	r3, #0
 80321f2:	f1a1 0404 	sub.w	r4, r1, #4
 80321f6:	bfb8      	it	lt
 80321f8:	18e4      	addlt	r4, r4, r3
 80321fa:	f000 ff11 	bl	8033020 <__malloc_lock>
 80321fe:	4a1e      	ldr	r2, [pc, #120]	; (8032278 <_free_r+0x94>)
 8032200:	9801      	ldr	r0, [sp, #4]
 8032202:	6813      	ldr	r3, [r2, #0]
 8032204:	b933      	cbnz	r3, 8032214 <_free_r+0x30>
 8032206:	6063      	str	r3, [r4, #4]
 8032208:	6014      	str	r4, [r2, #0]
 803220a:	b003      	add	sp, #12
 803220c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8032210:	f000 bf0c 	b.w	803302c <__malloc_unlock>
 8032214:	42a3      	cmp	r3, r4
 8032216:	d908      	bls.n	803222a <_free_r+0x46>
 8032218:	6825      	ldr	r5, [r4, #0]
 803221a:	1961      	adds	r1, r4, r5
 803221c:	428b      	cmp	r3, r1
 803221e:	bf01      	itttt	eq
 8032220:	6819      	ldreq	r1, [r3, #0]
 8032222:	685b      	ldreq	r3, [r3, #4]
 8032224:	1949      	addeq	r1, r1, r5
 8032226:	6021      	streq	r1, [r4, #0]
 8032228:	e7ed      	b.n	8032206 <_free_r+0x22>
 803222a:	461a      	mov	r2, r3
 803222c:	685b      	ldr	r3, [r3, #4]
 803222e:	b10b      	cbz	r3, 8032234 <_free_r+0x50>
 8032230:	42a3      	cmp	r3, r4
 8032232:	d9fa      	bls.n	803222a <_free_r+0x46>
 8032234:	6811      	ldr	r1, [r2, #0]
 8032236:	1855      	adds	r5, r2, r1
 8032238:	42a5      	cmp	r5, r4
 803223a:	d10b      	bne.n	8032254 <_free_r+0x70>
 803223c:	6824      	ldr	r4, [r4, #0]
 803223e:	4421      	add	r1, r4
 8032240:	1854      	adds	r4, r2, r1
 8032242:	42a3      	cmp	r3, r4
 8032244:	6011      	str	r1, [r2, #0]
 8032246:	d1e0      	bne.n	803220a <_free_r+0x26>
 8032248:	681c      	ldr	r4, [r3, #0]
 803224a:	685b      	ldr	r3, [r3, #4]
 803224c:	6053      	str	r3, [r2, #4]
 803224e:	4421      	add	r1, r4
 8032250:	6011      	str	r1, [r2, #0]
 8032252:	e7da      	b.n	803220a <_free_r+0x26>
 8032254:	d902      	bls.n	803225c <_free_r+0x78>
 8032256:	230c      	movs	r3, #12
 8032258:	6003      	str	r3, [r0, #0]
 803225a:	e7d6      	b.n	803220a <_free_r+0x26>
 803225c:	6825      	ldr	r5, [r4, #0]
 803225e:	1961      	adds	r1, r4, r5
 8032260:	428b      	cmp	r3, r1
 8032262:	bf04      	itt	eq
 8032264:	6819      	ldreq	r1, [r3, #0]
 8032266:	685b      	ldreq	r3, [r3, #4]
 8032268:	6063      	str	r3, [r4, #4]
 803226a:	bf04      	itt	eq
 803226c:	1949      	addeq	r1, r1, r5
 803226e:	6021      	streq	r1, [r4, #0]
 8032270:	6054      	str	r4, [r2, #4]
 8032272:	e7ca      	b.n	803220a <_free_r+0x26>
 8032274:	b003      	add	sp, #12
 8032276:	bd30      	pop	{r4, r5, pc}
 8032278:	200024c8 	.word	0x200024c8

0803227c <sbrk_aligned>:
 803227c:	b570      	push	{r4, r5, r6, lr}
 803227e:	4e0e      	ldr	r6, [pc, #56]	; (80322b8 <sbrk_aligned+0x3c>)
 8032280:	460c      	mov	r4, r1
 8032282:	6831      	ldr	r1, [r6, #0]
 8032284:	4605      	mov	r5, r0
 8032286:	b911      	cbnz	r1, 803228e <sbrk_aligned+0x12>
 8032288:	f000 fb7a 	bl	8032980 <_sbrk_r>
 803228c:	6030      	str	r0, [r6, #0]
 803228e:	4621      	mov	r1, r4
 8032290:	4628      	mov	r0, r5
 8032292:	f000 fb75 	bl	8032980 <_sbrk_r>
 8032296:	1c43      	adds	r3, r0, #1
 8032298:	d00a      	beq.n	80322b0 <sbrk_aligned+0x34>
 803229a:	1cc4      	adds	r4, r0, #3
 803229c:	f024 0403 	bic.w	r4, r4, #3
 80322a0:	42a0      	cmp	r0, r4
 80322a2:	d007      	beq.n	80322b4 <sbrk_aligned+0x38>
 80322a4:	1a21      	subs	r1, r4, r0
 80322a6:	4628      	mov	r0, r5
 80322a8:	f000 fb6a 	bl	8032980 <_sbrk_r>
 80322ac:	3001      	adds	r0, #1
 80322ae:	d101      	bne.n	80322b4 <sbrk_aligned+0x38>
 80322b0:	f04f 34ff 	mov.w	r4, #4294967295
 80322b4:	4620      	mov	r0, r4
 80322b6:	bd70      	pop	{r4, r5, r6, pc}
 80322b8:	200024cc 	.word	0x200024cc

080322bc <_malloc_r>:
 80322bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80322c0:	1ccd      	adds	r5, r1, #3
 80322c2:	f025 0503 	bic.w	r5, r5, #3
 80322c6:	3508      	adds	r5, #8
 80322c8:	2d0c      	cmp	r5, #12
 80322ca:	bf38      	it	cc
 80322cc:	250c      	movcc	r5, #12
 80322ce:	2d00      	cmp	r5, #0
 80322d0:	4607      	mov	r7, r0
 80322d2:	db01      	blt.n	80322d8 <_malloc_r+0x1c>
 80322d4:	42a9      	cmp	r1, r5
 80322d6:	d905      	bls.n	80322e4 <_malloc_r+0x28>
 80322d8:	230c      	movs	r3, #12
 80322da:	603b      	str	r3, [r7, #0]
 80322dc:	2600      	movs	r6, #0
 80322de:	4630      	mov	r0, r6
 80322e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80322e4:	4e2e      	ldr	r6, [pc, #184]	; (80323a0 <_malloc_r+0xe4>)
 80322e6:	f000 fe9b 	bl	8033020 <__malloc_lock>
 80322ea:	6833      	ldr	r3, [r6, #0]
 80322ec:	461c      	mov	r4, r3
 80322ee:	bb34      	cbnz	r4, 803233e <_malloc_r+0x82>
 80322f0:	4629      	mov	r1, r5
 80322f2:	4638      	mov	r0, r7
 80322f4:	f7ff ffc2 	bl	803227c <sbrk_aligned>
 80322f8:	1c43      	adds	r3, r0, #1
 80322fa:	4604      	mov	r4, r0
 80322fc:	d14d      	bne.n	803239a <_malloc_r+0xde>
 80322fe:	6834      	ldr	r4, [r6, #0]
 8032300:	4626      	mov	r6, r4
 8032302:	2e00      	cmp	r6, #0
 8032304:	d140      	bne.n	8032388 <_malloc_r+0xcc>
 8032306:	6823      	ldr	r3, [r4, #0]
 8032308:	4631      	mov	r1, r6
 803230a:	4638      	mov	r0, r7
 803230c:	eb04 0803 	add.w	r8, r4, r3
 8032310:	f000 fb36 	bl	8032980 <_sbrk_r>
 8032314:	4580      	cmp	r8, r0
 8032316:	d13a      	bne.n	803238e <_malloc_r+0xd2>
 8032318:	6821      	ldr	r1, [r4, #0]
 803231a:	3503      	adds	r5, #3
 803231c:	1a6d      	subs	r5, r5, r1
 803231e:	f025 0503 	bic.w	r5, r5, #3
 8032322:	3508      	adds	r5, #8
 8032324:	2d0c      	cmp	r5, #12
 8032326:	bf38      	it	cc
 8032328:	250c      	movcc	r5, #12
 803232a:	4629      	mov	r1, r5
 803232c:	4638      	mov	r0, r7
 803232e:	f7ff ffa5 	bl	803227c <sbrk_aligned>
 8032332:	3001      	adds	r0, #1
 8032334:	d02b      	beq.n	803238e <_malloc_r+0xd2>
 8032336:	6823      	ldr	r3, [r4, #0]
 8032338:	442b      	add	r3, r5
 803233a:	6023      	str	r3, [r4, #0]
 803233c:	e00e      	b.n	803235c <_malloc_r+0xa0>
 803233e:	6822      	ldr	r2, [r4, #0]
 8032340:	1b52      	subs	r2, r2, r5
 8032342:	d41e      	bmi.n	8032382 <_malloc_r+0xc6>
 8032344:	2a0b      	cmp	r2, #11
 8032346:	d916      	bls.n	8032376 <_malloc_r+0xba>
 8032348:	1961      	adds	r1, r4, r5
 803234a:	42a3      	cmp	r3, r4
 803234c:	6025      	str	r5, [r4, #0]
 803234e:	bf18      	it	ne
 8032350:	6059      	strne	r1, [r3, #4]
 8032352:	6863      	ldr	r3, [r4, #4]
 8032354:	bf08      	it	eq
 8032356:	6031      	streq	r1, [r6, #0]
 8032358:	5162      	str	r2, [r4, r5]
 803235a:	604b      	str	r3, [r1, #4]
 803235c:	4638      	mov	r0, r7
 803235e:	f104 060b 	add.w	r6, r4, #11
 8032362:	f000 fe63 	bl	803302c <__malloc_unlock>
 8032366:	f026 0607 	bic.w	r6, r6, #7
 803236a:	1d23      	adds	r3, r4, #4
 803236c:	1af2      	subs	r2, r6, r3
 803236e:	d0b6      	beq.n	80322de <_malloc_r+0x22>
 8032370:	1b9b      	subs	r3, r3, r6
 8032372:	50a3      	str	r3, [r4, r2]
 8032374:	e7b3      	b.n	80322de <_malloc_r+0x22>
 8032376:	6862      	ldr	r2, [r4, #4]
 8032378:	42a3      	cmp	r3, r4
 803237a:	bf0c      	ite	eq
 803237c:	6032      	streq	r2, [r6, #0]
 803237e:	605a      	strne	r2, [r3, #4]
 8032380:	e7ec      	b.n	803235c <_malloc_r+0xa0>
 8032382:	4623      	mov	r3, r4
 8032384:	6864      	ldr	r4, [r4, #4]
 8032386:	e7b2      	b.n	80322ee <_malloc_r+0x32>
 8032388:	4634      	mov	r4, r6
 803238a:	6876      	ldr	r6, [r6, #4]
 803238c:	e7b9      	b.n	8032302 <_malloc_r+0x46>
 803238e:	230c      	movs	r3, #12
 8032390:	603b      	str	r3, [r7, #0]
 8032392:	4638      	mov	r0, r7
 8032394:	f000 fe4a 	bl	803302c <__malloc_unlock>
 8032398:	e7a1      	b.n	80322de <_malloc_r+0x22>
 803239a:	6025      	str	r5, [r4, #0]
 803239c:	e7de      	b.n	803235c <_malloc_r+0xa0>
 803239e:	bf00      	nop
 80323a0:	200024c8 	.word	0x200024c8

080323a4 <__sfputc_r>:
 80323a4:	6893      	ldr	r3, [r2, #8]
 80323a6:	3b01      	subs	r3, #1
 80323a8:	2b00      	cmp	r3, #0
 80323aa:	b410      	push	{r4}
 80323ac:	6093      	str	r3, [r2, #8]
 80323ae:	da08      	bge.n	80323c2 <__sfputc_r+0x1e>
 80323b0:	6994      	ldr	r4, [r2, #24]
 80323b2:	42a3      	cmp	r3, r4
 80323b4:	db01      	blt.n	80323ba <__sfputc_r+0x16>
 80323b6:	290a      	cmp	r1, #10
 80323b8:	d103      	bne.n	80323c2 <__sfputc_r+0x1e>
 80323ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80323be:	f000 bb53 	b.w	8032a68 <__swbuf_r>
 80323c2:	6813      	ldr	r3, [r2, #0]
 80323c4:	1c58      	adds	r0, r3, #1
 80323c6:	6010      	str	r0, [r2, #0]
 80323c8:	7019      	strb	r1, [r3, #0]
 80323ca:	4608      	mov	r0, r1
 80323cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80323d0:	4770      	bx	lr

080323d2 <__sfputs_r>:
 80323d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80323d4:	4606      	mov	r6, r0
 80323d6:	460f      	mov	r7, r1
 80323d8:	4614      	mov	r4, r2
 80323da:	18d5      	adds	r5, r2, r3
 80323dc:	42ac      	cmp	r4, r5
 80323de:	d101      	bne.n	80323e4 <__sfputs_r+0x12>
 80323e0:	2000      	movs	r0, #0
 80323e2:	e007      	b.n	80323f4 <__sfputs_r+0x22>
 80323e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80323e8:	463a      	mov	r2, r7
 80323ea:	4630      	mov	r0, r6
 80323ec:	f7ff ffda 	bl	80323a4 <__sfputc_r>
 80323f0:	1c43      	adds	r3, r0, #1
 80323f2:	d1f3      	bne.n	80323dc <__sfputs_r+0xa>
 80323f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080323f8 <_vfiprintf_r>:
 80323f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80323fc:	460d      	mov	r5, r1
 80323fe:	b09d      	sub	sp, #116	; 0x74
 8032400:	4614      	mov	r4, r2
 8032402:	4698      	mov	r8, r3
 8032404:	4606      	mov	r6, r0
 8032406:	b118      	cbz	r0, 8032410 <_vfiprintf_r+0x18>
 8032408:	6983      	ldr	r3, [r0, #24]
 803240a:	b90b      	cbnz	r3, 8032410 <_vfiprintf_r+0x18>
 803240c:	f000 fd06 	bl	8032e1c <__sinit>
 8032410:	4b89      	ldr	r3, [pc, #548]	; (8032638 <_vfiprintf_r+0x240>)
 8032412:	429d      	cmp	r5, r3
 8032414:	d11b      	bne.n	803244e <_vfiprintf_r+0x56>
 8032416:	6875      	ldr	r5, [r6, #4]
 8032418:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 803241a:	07d9      	lsls	r1, r3, #31
 803241c:	d405      	bmi.n	803242a <_vfiprintf_r+0x32>
 803241e:	89ab      	ldrh	r3, [r5, #12]
 8032420:	059a      	lsls	r2, r3, #22
 8032422:	d402      	bmi.n	803242a <_vfiprintf_r+0x32>
 8032424:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8032426:	f7ff fe84 	bl	8032132 <__retarget_lock_acquire_recursive>
 803242a:	89ab      	ldrh	r3, [r5, #12]
 803242c:	071b      	lsls	r3, r3, #28
 803242e:	d501      	bpl.n	8032434 <_vfiprintf_r+0x3c>
 8032430:	692b      	ldr	r3, [r5, #16]
 8032432:	b9eb      	cbnz	r3, 8032470 <_vfiprintf_r+0x78>
 8032434:	4629      	mov	r1, r5
 8032436:	4630      	mov	r0, r6
 8032438:	f000 fb68 	bl	8032b0c <__swsetup_r>
 803243c:	b1c0      	cbz	r0, 8032470 <_vfiprintf_r+0x78>
 803243e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8032440:	07dc      	lsls	r4, r3, #31
 8032442:	d50e      	bpl.n	8032462 <_vfiprintf_r+0x6a>
 8032444:	f04f 30ff 	mov.w	r0, #4294967295
 8032448:	b01d      	add	sp, #116	; 0x74
 803244a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803244e:	4b7b      	ldr	r3, [pc, #492]	; (803263c <_vfiprintf_r+0x244>)
 8032450:	429d      	cmp	r5, r3
 8032452:	d101      	bne.n	8032458 <_vfiprintf_r+0x60>
 8032454:	68b5      	ldr	r5, [r6, #8]
 8032456:	e7df      	b.n	8032418 <_vfiprintf_r+0x20>
 8032458:	4b79      	ldr	r3, [pc, #484]	; (8032640 <_vfiprintf_r+0x248>)
 803245a:	429d      	cmp	r5, r3
 803245c:	bf08      	it	eq
 803245e:	68f5      	ldreq	r5, [r6, #12]
 8032460:	e7da      	b.n	8032418 <_vfiprintf_r+0x20>
 8032462:	89ab      	ldrh	r3, [r5, #12]
 8032464:	0598      	lsls	r0, r3, #22
 8032466:	d4ed      	bmi.n	8032444 <_vfiprintf_r+0x4c>
 8032468:	6da8      	ldr	r0, [r5, #88]	; 0x58
 803246a:	f7ff fe63 	bl	8032134 <__retarget_lock_release_recursive>
 803246e:	e7e9      	b.n	8032444 <_vfiprintf_r+0x4c>
 8032470:	2300      	movs	r3, #0
 8032472:	9309      	str	r3, [sp, #36]	; 0x24
 8032474:	2320      	movs	r3, #32
 8032476:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 803247a:	f8cd 800c 	str.w	r8, [sp, #12]
 803247e:	2330      	movs	r3, #48	; 0x30
 8032480:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8032644 <_vfiprintf_r+0x24c>
 8032484:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8032488:	f04f 0901 	mov.w	r9, #1
 803248c:	4623      	mov	r3, r4
 803248e:	469a      	mov	sl, r3
 8032490:	f813 2b01 	ldrb.w	r2, [r3], #1
 8032494:	b10a      	cbz	r2, 803249a <_vfiprintf_r+0xa2>
 8032496:	2a25      	cmp	r2, #37	; 0x25
 8032498:	d1f9      	bne.n	803248e <_vfiprintf_r+0x96>
 803249a:	ebba 0b04 	subs.w	fp, sl, r4
 803249e:	d00b      	beq.n	80324b8 <_vfiprintf_r+0xc0>
 80324a0:	465b      	mov	r3, fp
 80324a2:	4622      	mov	r2, r4
 80324a4:	4629      	mov	r1, r5
 80324a6:	4630      	mov	r0, r6
 80324a8:	f7ff ff93 	bl	80323d2 <__sfputs_r>
 80324ac:	3001      	adds	r0, #1
 80324ae:	f000 80aa 	beq.w	8032606 <_vfiprintf_r+0x20e>
 80324b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80324b4:	445a      	add	r2, fp
 80324b6:	9209      	str	r2, [sp, #36]	; 0x24
 80324b8:	f89a 3000 	ldrb.w	r3, [sl]
 80324bc:	2b00      	cmp	r3, #0
 80324be:	f000 80a2 	beq.w	8032606 <_vfiprintf_r+0x20e>
 80324c2:	2300      	movs	r3, #0
 80324c4:	f04f 32ff 	mov.w	r2, #4294967295
 80324c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80324cc:	f10a 0a01 	add.w	sl, sl, #1
 80324d0:	9304      	str	r3, [sp, #16]
 80324d2:	9307      	str	r3, [sp, #28]
 80324d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80324d8:	931a      	str	r3, [sp, #104]	; 0x68
 80324da:	4654      	mov	r4, sl
 80324dc:	2205      	movs	r2, #5
 80324de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80324e2:	4858      	ldr	r0, [pc, #352]	; (8032644 <_vfiprintf_r+0x24c>)
 80324e4:	f7cd fe74 	bl	80001d0 <memchr>
 80324e8:	9a04      	ldr	r2, [sp, #16]
 80324ea:	b9d8      	cbnz	r0, 8032524 <_vfiprintf_r+0x12c>
 80324ec:	06d1      	lsls	r1, r2, #27
 80324ee:	bf44      	itt	mi
 80324f0:	2320      	movmi	r3, #32
 80324f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80324f6:	0713      	lsls	r3, r2, #28
 80324f8:	bf44      	itt	mi
 80324fa:	232b      	movmi	r3, #43	; 0x2b
 80324fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8032500:	f89a 3000 	ldrb.w	r3, [sl]
 8032504:	2b2a      	cmp	r3, #42	; 0x2a
 8032506:	d015      	beq.n	8032534 <_vfiprintf_r+0x13c>
 8032508:	9a07      	ldr	r2, [sp, #28]
 803250a:	4654      	mov	r4, sl
 803250c:	2000      	movs	r0, #0
 803250e:	f04f 0c0a 	mov.w	ip, #10
 8032512:	4621      	mov	r1, r4
 8032514:	f811 3b01 	ldrb.w	r3, [r1], #1
 8032518:	3b30      	subs	r3, #48	; 0x30
 803251a:	2b09      	cmp	r3, #9
 803251c:	d94e      	bls.n	80325bc <_vfiprintf_r+0x1c4>
 803251e:	b1b0      	cbz	r0, 803254e <_vfiprintf_r+0x156>
 8032520:	9207      	str	r2, [sp, #28]
 8032522:	e014      	b.n	803254e <_vfiprintf_r+0x156>
 8032524:	eba0 0308 	sub.w	r3, r0, r8
 8032528:	fa09 f303 	lsl.w	r3, r9, r3
 803252c:	4313      	orrs	r3, r2
 803252e:	9304      	str	r3, [sp, #16]
 8032530:	46a2      	mov	sl, r4
 8032532:	e7d2      	b.n	80324da <_vfiprintf_r+0xe2>
 8032534:	9b03      	ldr	r3, [sp, #12]
 8032536:	1d19      	adds	r1, r3, #4
 8032538:	681b      	ldr	r3, [r3, #0]
 803253a:	9103      	str	r1, [sp, #12]
 803253c:	2b00      	cmp	r3, #0
 803253e:	bfbb      	ittet	lt
 8032540:	425b      	neglt	r3, r3
 8032542:	f042 0202 	orrlt.w	r2, r2, #2
 8032546:	9307      	strge	r3, [sp, #28]
 8032548:	9307      	strlt	r3, [sp, #28]
 803254a:	bfb8      	it	lt
 803254c:	9204      	strlt	r2, [sp, #16]
 803254e:	7823      	ldrb	r3, [r4, #0]
 8032550:	2b2e      	cmp	r3, #46	; 0x2e
 8032552:	d10c      	bne.n	803256e <_vfiprintf_r+0x176>
 8032554:	7863      	ldrb	r3, [r4, #1]
 8032556:	2b2a      	cmp	r3, #42	; 0x2a
 8032558:	d135      	bne.n	80325c6 <_vfiprintf_r+0x1ce>
 803255a:	9b03      	ldr	r3, [sp, #12]
 803255c:	1d1a      	adds	r2, r3, #4
 803255e:	681b      	ldr	r3, [r3, #0]
 8032560:	9203      	str	r2, [sp, #12]
 8032562:	2b00      	cmp	r3, #0
 8032564:	bfb8      	it	lt
 8032566:	f04f 33ff 	movlt.w	r3, #4294967295
 803256a:	3402      	adds	r4, #2
 803256c:	9305      	str	r3, [sp, #20]
 803256e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8032654 <_vfiprintf_r+0x25c>
 8032572:	7821      	ldrb	r1, [r4, #0]
 8032574:	2203      	movs	r2, #3
 8032576:	4650      	mov	r0, sl
 8032578:	f7cd fe2a 	bl	80001d0 <memchr>
 803257c:	b140      	cbz	r0, 8032590 <_vfiprintf_r+0x198>
 803257e:	2340      	movs	r3, #64	; 0x40
 8032580:	eba0 000a 	sub.w	r0, r0, sl
 8032584:	fa03 f000 	lsl.w	r0, r3, r0
 8032588:	9b04      	ldr	r3, [sp, #16]
 803258a:	4303      	orrs	r3, r0
 803258c:	3401      	adds	r4, #1
 803258e:	9304      	str	r3, [sp, #16]
 8032590:	f814 1b01 	ldrb.w	r1, [r4], #1
 8032594:	482c      	ldr	r0, [pc, #176]	; (8032648 <_vfiprintf_r+0x250>)
 8032596:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 803259a:	2206      	movs	r2, #6
 803259c:	f7cd fe18 	bl	80001d0 <memchr>
 80325a0:	2800      	cmp	r0, #0
 80325a2:	d03f      	beq.n	8032624 <_vfiprintf_r+0x22c>
 80325a4:	4b29      	ldr	r3, [pc, #164]	; (803264c <_vfiprintf_r+0x254>)
 80325a6:	bb1b      	cbnz	r3, 80325f0 <_vfiprintf_r+0x1f8>
 80325a8:	9b03      	ldr	r3, [sp, #12]
 80325aa:	3307      	adds	r3, #7
 80325ac:	f023 0307 	bic.w	r3, r3, #7
 80325b0:	3308      	adds	r3, #8
 80325b2:	9303      	str	r3, [sp, #12]
 80325b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80325b6:	443b      	add	r3, r7
 80325b8:	9309      	str	r3, [sp, #36]	; 0x24
 80325ba:	e767      	b.n	803248c <_vfiprintf_r+0x94>
 80325bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80325c0:	460c      	mov	r4, r1
 80325c2:	2001      	movs	r0, #1
 80325c4:	e7a5      	b.n	8032512 <_vfiprintf_r+0x11a>
 80325c6:	2300      	movs	r3, #0
 80325c8:	3401      	adds	r4, #1
 80325ca:	9305      	str	r3, [sp, #20]
 80325cc:	4619      	mov	r1, r3
 80325ce:	f04f 0c0a 	mov.w	ip, #10
 80325d2:	4620      	mov	r0, r4
 80325d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80325d8:	3a30      	subs	r2, #48	; 0x30
 80325da:	2a09      	cmp	r2, #9
 80325dc:	d903      	bls.n	80325e6 <_vfiprintf_r+0x1ee>
 80325de:	2b00      	cmp	r3, #0
 80325e0:	d0c5      	beq.n	803256e <_vfiprintf_r+0x176>
 80325e2:	9105      	str	r1, [sp, #20]
 80325e4:	e7c3      	b.n	803256e <_vfiprintf_r+0x176>
 80325e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80325ea:	4604      	mov	r4, r0
 80325ec:	2301      	movs	r3, #1
 80325ee:	e7f0      	b.n	80325d2 <_vfiprintf_r+0x1da>
 80325f0:	ab03      	add	r3, sp, #12
 80325f2:	9300      	str	r3, [sp, #0]
 80325f4:	462a      	mov	r2, r5
 80325f6:	4b16      	ldr	r3, [pc, #88]	; (8032650 <_vfiprintf_r+0x258>)
 80325f8:	a904      	add	r1, sp, #16
 80325fa:	4630      	mov	r0, r6
 80325fc:	f3af 8000 	nop.w
 8032600:	4607      	mov	r7, r0
 8032602:	1c78      	adds	r0, r7, #1
 8032604:	d1d6      	bne.n	80325b4 <_vfiprintf_r+0x1bc>
 8032606:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8032608:	07d9      	lsls	r1, r3, #31
 803260a:	d405      	bmi.n	8032618 <_vfiprintf_r+0x220>
 803260c:	89ab      	ldrh	r3, [r5, #12]
 803260e:	059a      	lsls	r2, r3, #22
 8032610:	d402      	bmi.n	8032618 <_vfiprintf_r+0x220>
 8032612:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8032614:	f7ff fd8e 	bl	8032134 <__retarget_lock_release_recursive>
 8032618:	89ab      	ldrh	r3, [r5, #12]
 803261a:	065b      	lsls	r3, r3, #25
 803261c:	f53f af12 	bmi.w	8032444 <_vfiprintf_r+0x4c>
 8032620:	9809      	ldr	r0, [sp, #36]	; 0x24
 8032622:	e711      	b.n	8032448 <_vfiprintf_r+0x50>
 8032624:	ab03      	add	r3, sp, #12
 8032626:	9300      	str	r3, [sp, #0]
 8032628:	462a      	mov	r2, r5
 803262a:	4b09      	ldr	r3, [pc, #36]	; (8032650 <_vfiprintf_r+0x258>)
 803262c:	a904      	add	r1, sp, #16
 803262e:	4630      	mov	r0, r6
 8032630:	f000 f880 	bl	8032734 <_printf_i>
 8032634:	e7e4      	b.n	8032600 <_vfiprintf_r+0x208>
 8032636:	bf00      	nop
 8032638:	08038214 	.word	0x08038214
 803263c:	08038234 	.word	0x08038234
 8032640:	080381f4 	.word	0x080381f4
 8032644:	080381c0 	.word	0x080381c0
 8032648:	080381ca 	.word	0x080381ca
 803264c:	00000000 	.word	0x00000000
 8032650:	080323d3 	.word	0x080323d3
 8032654:	080381c6 	.word	0x080381c6

08032658 <_printf_common>:
 8032658:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 803265c:	4616      	mov	r6, r2
 803265e:	4699      	mov	r9, r3
 8032660:	688a      	ldr	r2, [r1, #8]
 8032662:	690b      	ldr	r3, [r1, #16]
 8032664:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8032668:	4293      	cmp	r3, r2
 803266a:	bfb8      	it	lt
 803266c:	4613      	movlt	r3, r2
 803266e:	6033      	str	r3, [r6, #0]
 8032670:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8032674:	4607      	mov	r7, r0
 8032676:	460c      	mov	r4, r1
 8032678:	b10a      	cbz	r2, 803267e <_printf_common+0x26>
 803267a:	3301      	adds	r3, #1
 803267c:	6033      	str	r3, [r6, #0]
 803267e:	6823      	ldr	r3, [r4, #0]
 8032680:	0699      	lsls	r1, r3, #26
 8032682:	bf42      	ittt	mi
 8032684:	6833      	ldrmi	r3, [r6, #0]
 8032686:	3302      	addmi	r3, #2
 8032688:	6033      	strmi	r3, [r6, #0]
 803268a:	6825      	ldr	r5, [r4, #0]
 803268c:	f015 0506 	ands.w	r5, r5, #6
 8032690:	d106      	bne.n	80326a0 <_printf_common+0x48>
 8032692:	f104 0a19 	add.w	sl, r4, #25
 8032696:	68e3      	ldr	r3, [r4, #12]
 8032698:	6832      	ldr	r2, [r6, #0]
 803269a:	1a9b      	subs	r3, r3, r2
 803269c:	42ab      	cmp	r3, r5
 803269e:	dc26      	bgt.n	80326ee <_printf_common+0x96>
 80326a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80326a4:	1e13      	subs	r3, r2, #0
 80326a6:	6822      	ldr	r2, [r4, #0]
 80326a8:	bf18      	it	ne
 80326aa:	2301      	movne	r3, #1
 80326ac:	0692      	lsls	r2, r2, #26
 80326ae:	d42b      	bmi.n	8032708 <_printf_common+0xb0>
 80326b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80326b4:	4649      	mov	r1, r9
 80326b6:	4638      	mov	r0, r7
 80326b8:	47c0      	blx	r8
 80326ba:	3001      	adds	r0, #1
 80326bc:	d01e      	beq.n	80326fc <_printf_common+0xa4>
 80326be:	6823      	ldr	r3, [r4, #0]
 80326c0:	68e5      	ldr	r5, [r4, #12]
 80326c2:	6832      	ldr	r2, [r6, #0]
 80326c4:	f003 0306 	and.w	r3, r3, #6
 80326c8:	2b04      	cmp	r3, #4
 80326ca:	bf08      	it	eq
 80326cc:	1aad      	subeq	r5, r5, r2
 80326ce:	68a3      	ldr	r3, [r4, #8]
 80326d0:	6922      	ldr	r2, [r4, #16]
 80326d2:	bf0c      	ite	eq
 80326d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80326d8:	2500      	movne	r5, #0
 80326da:	4293      	cmp	r3, r2
 80326dc:	bfc4      	itt	gt
 80326de:	1a9b      	subgt	r3, r3, r2
 80326e0:	18ed      	addgt	r5, r5, r3
 80326e2:	2600      	movs	r6, #0
 80326e4:	341a      	adds	r4, #26
 80326e6:	42b5      	cmp	r5, r6
 80326e8:	d11a      	bne.n	8032720 <_printf_common+0xc8>
 80326ea:	2000      	movs	r0, #0
 80326ec:	e008      	b.n	8032700 <_printf_common+0xa8>
 80326ee:	2301      	movs	r3, #1
 80326f0:	4652      	mov	r2, sl
 80326f2:	4649      	mov	r1, r9
 80326f4:	4638      	mov	r0, r7
 80326f6:	47c0      	blx	r8
 80326f8:	3001      	adds	r0, #1
 80326fa:	d103      	bne.n	8032704 <_printf_common+0xac>
 80326fc:	f04f 30ff 	mov.w	r0, #4294967295
 8032700:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8032704:	3501      	adds	r5, #1
 8032706:	e7c6      	b.n	8032696 <_printf_common+0x3e>
 8032708:	18e1      	adds	r1, r4, r3
 803270a:	1c5a      	adds	r2, r3, #1
 803270c:	2030      	movs	r0, #48	; 0x30
 803270e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8032712:	4422      	add	r2, r4
 8032714:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8032718:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 803271c:	3302      	adds	r3, #2
 803271e:	e7c7      	b.n	80326b0 <_printf_common+0x58>
 8032720:	2301      	movs	r3, #1
 8032722:	4622      	mov	r2, r4
 8032724:	4649      	mov	r1, r9
 8032726:	4638      	mov	r0, r7
 8032728:	47c0      	blx	r8
 803272a:	3001      	adds	r0, #1
 803272c:	d0e6      	beq.n	80326fc <_printf_common+0xa4>
 803272e:	3601      	adds	r6, #1
 8032730:	e7d9      	b.n	80326e6 <_printf_common+0x8e>
	...

08032734 <_printf_i>:
 8032734:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8032738:	7e0f      	ldrb	r7, [r1, #24]
 803273a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 803273c:	2f78      	cmp	r7, #120	; 0x78
 803273e:	4691      	mov	r9, r2
 8032740:	4680      	mov	r8, r0
 8032742:	460c      	mov	r4, r1
 8032744:	469a      	mov	sl, r3
 8032746:	f101 0243 	add.w	r2, r1, #67	; 0x43
 803274a:	d807      	bhi.n	803275c <_printf_i+0x28>
 803274c:	2f62      	cmp	r7, #98	; 0x62
 803274e:	d80a      	bhi.n	8032766 <_printf_i+0x32>
 8032750:	2f00      	cmp	r7, #0
 8032752:	f000 80d8 	beq.w	8032906 <_printf_i+0x1d2>
 8032756:	2f58      	cmp	r7, #88	; 0x58
 8032758:	f000 80a3 	beq.w	80328a2 <_printf_i+0x16e>
 803275c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8032760:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8032764:	e03a      	b.n	80327dc <_printf_i+0xa8>
 8032766:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 803276a:	2b15      	cmp	r3, #21
 803276c:	d8f6      	bhi.n	803275c <_printf_i+0x28>
 803276e:	a101      	add	r1, pc, #4	; (adr r1, 8032774 <_printf_i+0x40>)
 8032770:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8032774:	080327cd 	.word	0x080327cd
 8032778:	080327e1 	.word	0x080327e1
 803277c:	0803275d 	.word	0x0803275d
 8032780:	0803275d 	.word	0x0803275d
 8032784:	0803275d 	.word	0x0803275d
 8032788:	0803275d 	.word	0x0803275d
 803278c:	080327e1 	.word	0x080327e1
 8032790:	0803275d 	.word	0x0803275d
 8032794:	0803275d 	.word	0x0803275d
 8032798:	0803275d 	.word	0x0803275d
 803279c:	0803275d 	.word	0x0803275d
 80327a0:	080328ed 	.word	0x080328ed
 80327a4:	08032811 	.word	0x08032811
 80327a8:	080328cf 	.word	0x080328cf
 80327ac:	0803275d 	.word	0x0803275d
 80327b0:	0803275d 	.word	0x0803275d
 80327b4:	0803290f 	.word	0x0803290f
 80327b8:	0803275d 	.word	0x0803275d
 80327bc:	08032811 	.word	0x08032811
 80327c0:	0803275d 	.word	0x0803275d
 80327c4:	0803275d 	.word	0x0803275d
 80327c8:	080328d7 	.word	0x080328d7
 80327cc:	682b      	ldr	r3, [r5, #0]
 80327ce:	1d1a      	adds	r2, r3, #4
 80327d0:	681b      	ldr	r3, [r3, #0]
 80327d2:	602a      	str	r2, [r5, #0]
 80327d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80327d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80327dc:	2301      	movs	r3, #1
 80327de:	e0a3      	b.n	8032928 <_printf_i+0x1f4>
 80327e0:	6820      	ldr	r0, [r4, #0]
 80327e2:	6829      	ldr	r1, [r5, #0]
 80327e4:	0606      	lsls	r6, r0, #24
 80327e6:	f101 0304 	add.w	r3, r1, #4
 80327ea:	d50a      	bpl.n	8032802 <_printf_i+0xce>
 80327ec:	680e      	ldr	r6, [r1, #0]
 80327ee:	602b      	str	r3, [r5, #0]
 80327f0:	2e00      	cmp	r6, #0
 80327f2:	da03      	bge.n	80327fc <_printf_i+0xc8>
 80327f4:	232d      	movs	r3, #45	; 0x2d
 80327f6:	4276      	negs	r6, r6
 80327f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80327fc:	485e      	ldr	r0, [pc, #376]	; (8032978 <_printf_i+0x244>)
 80327fe:	230a      	movs	r3, #10
 8032800:	e019      	b.n	8032836 <_printf_i+0x102>
 8032802:	680e      	ldr	r6, [r1, #0]
 8032804:	602b      	str	r3, [r5, #0]
 8032806:	f010 0f40 	tst.w	r0, #64	; 0x40
 803280a:	bf18      	it	ne
 803280c:	b236      	sxthne	r6, r6
 803280e:	e7ef      	b.n	80327f0 <_printf_i+0xbc>
 8032810:	682b      	ldr	r3, [r5, #0]
 8032812:	6820      	ldr	r0, [r4, #0]
 8032814:	1d19      	adds	r1, r3, #4
 8032816:	6029      	str	r1, [r5, #0]
 8032818:	0601      	lsls	r1, r0, #24
 803281a:	d501      	bpl.n	8032820 <_printf_i+0xec>
 803281c:	681e      	ldr	r6, [r3, #0]
 803281e:	e002      	b.n	8032826 <_printf_i+0xf2>
 8032820:	0646      	lsls	r6, r0, #25
 8032822:	d5fb      	bpl.n	803281c <_printf_i+0xe8>
 8032824:	881e      	ldrh	r6, [r3, #0]
 8032826:	4854      	ldr	r0, [pc, #336]	; (8032978 <_printf_i+0x244>)
 8032828:	2f6f      	cmp	r7, #111	; 0x6f
 803282a:	bf0c      	ite	eq
 803282c:	2308      	moveq	r3, #8
 803282e:	230a      	movne	r3, #10
 8032830:	2100      	movs	r1, #0
 8032832:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8032836:	6865      	ldr	r5, [r4, #4]
 8032838:	60a5      	str	r5, [r4, #8]
 803283a:	2d00      	cmp	r5, #0
 803283c:	bfa2      	ittt	ge
 803283e:	6821      	ldrge	r1, [r4, #0]
 8032840:	f021 0104 	bicge.w	r1, r1, #4
 8032844:	6021      	strge	r1, [r4, #0]
 8032846:	b90e      	cbnz	r6, 803284c <_printf_i+0x118>
 8032848:	2d00      	cmp	r5, #0
 803284a:	d04d      	beq.n	80328e8 <_printf_i+0x1b4>
 803284c:	4615      	mov	r5, r2
 803284e:	fbb6 f1f3 	udiv	r1, r6, r3
 8032852:	fb03 6711 	mls	r7, r3, r1, r6
 8032856:	5dc7      	ldrb	r7, [r0, r7]
 8032858:	f805 7d01 	strb.w	r7, [r5, #-1]!
 803285c:	4637      	mov	r7, r6
 803285e:	42bb      	cmp	r3, r7
 8032860:	460e      	mov	r6, r1
 8032862:	d9f4      	bls.n	803284e <_printf_i+0x11a>
 8032864:	2b08      	cmp	r3, #8
 8032866:	d10b      	bne.n	8032880 <_printf_i+0x14c>
 8032868:	6823      	ldr	r3, [r4, #0]
 803286a:	07de      	lsls	r6, r3, #31
 803286c:	d508      	bpl.n	8032880 <_printf_i+0x14c>
 803286e:	6923      	ldr	r3, [r4, #16]
 8032870:	6861      	ldr	r1, [r4, #4]
 8032872:	4299      	cmp	r1, r3
 8032874:	bfde      	ittt	le
 8032876:	2330      	movle	r3, #48	; 0x30
 8032878:	f805 3c01 	strble.w	r3, [r5, #-1]
 803287c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8032880:	1b52      	subs	r2, r2, r5
 8032882:	6122      	str	r2, [r4, #16]
 8032884:	f8cd a000 	str.w	sl, [sp]
 8032888:	464b      	mov	r3, r9
 803288a:	aa03      	add	r2, sp, #12
 803288c:	4621      	mov	r1, r4
 803288e:	4640      	mov	r0, r8
 8032890:	f7ff fee2 	bl	8032658 <_printf_common>
 8032894:	3001      	adds	r0, #1
 8032896:	d14c      	bne.n	8032932 <_printf_i+0x1fe>
 8032898:	f04f 30ff 	mov.w	r0, #4294967295
 803289c:	b004      	add	sp, #16
 803289e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80328a2:	4835      	ldr	r0, [pc, #212]	; (8032978 <_printf_i+0x244>)
 80328a4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80328a8:	6829      	ldr	r1, [r5, #0]
 80328aa:	6823      	ldr	r3, [r4, #0]
 80328ac:	f851 6b04 	ldr.w	r6, [r1], #4
 80328b0:	6029      	str	r1, [r5, #0]
 80328b2:	061d      	lsls	r5, r3, #24
 80328b4:	d514      	bpl.n	80328e0 <_printf_i+0x1ac>
 80328b6:	07df      	lsls	r7, r3, #31
 80328b8:	bf44      	itt	mi
 80328ba:	f043 0320 	orrmi.w	r3, r3, #32
 80328be:	6023      	strmi	r3, [r4, #0]
 80328c0:	b91e      	cbnz	r6, 80328ca <_printf_i+0x196>
 80328c2:	6823      	ldr	r3, [r4, #0]
 80328c4:	f023 0320 	bic.w	r3, r3, #32
 80328c8:	6023      	str	r3, [r4, #0]
 80328ca:	2310      	movs	r3, #16
 80328cc:	e7b0      	b.n	8032830 <_printf_i+0xfc>
 80328ce:	6823      	ldr	r3, [r4, #0]
 80328d0:	f043 0320 	orr.w	r3, r3, #32
 80328d4:	6023      	str	r3, [r4, #0]
 80328d6:	2378      	movs	r3, #120	; 0x78
 80328d8:	4828      	ldr	r0, [pc, #160]	; (803297c <_printf_i+0x248>)
 80328da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80328de:	e7e3      	b.n	80328a8 <_printf_i+0x174>
 80328e0:	0659      	lsls	r1, r3, #25
 80328e2:	bf48      	it	mi
 80328e4:	b2b6      	uxthmi	r6, r6
 80328e6:	e7e6      	b.n	80328b6 <_printf_i+0x182>
 80328e8:	4615      	mov	r5, r2
 80328ea:	e7bb      	b.n	8032864 <_printf_i+0x130>
 80328ec:	682b      	ldr	r3, [r5, #0]
 80328ee:	6826      	ldr	r6, [r4, #0]
 80328f0:	6961      	ldr	r1, [r4, #20]
 80328f2:	1d18      	adds	r0, r3, #4
 80328f4:	6028      	str	r0, [r5, #0]
 80328f6:	0635      	lsls	r5, r6, #24
 80328f8:	681b      	ldr	r3, [r3, #0]
 80328fa:	d501      	bpl.n	8032900 <_printf_i+0x1cc>
 80328fc:	6019      	str	r1, [r3, #0]
 80328fe:	e002      	b.n	8032906 <_printf_i+0x1d2>
 8032900:	0670      	lsls	r0, r6, #25
 8032902:	d5fb      	bpl.n	80328fc <_printf_i+0x1c8>
 8032904:	8019      	strh	r1, [r3, #0]
 8032906:	2300      	movs	r3, #0
 8032908:	6123      	str	r3, [r4, #16]
 803290a:	4615      	mov	r5, r2
 803290c:	e7ba      	b.n	8032884 <_printf_i+0x150>
 803290e:	682b      	ldr	r3, [r5, #0]
 8032910:	1d1a      	adds	r2, r3, #4
 8032912:	602a      	str	r2, [r5, #0]
 8032914:	681d      	ldr	r5, [r3, #0]
 8032916:	6862      	ldr	r2, [r4, #4]
 8032918:	2100      	movs	r1, #0
 803291a:	4628      	mov	r0, r5
 803291c:	f7cd fc58 	bl	80001d0 <memchr>
 8032920:	b108      	cbz	r0, 8032926 <_printf_i+0x1f2>
 8032922:	1b40      	subs	r0, r0, r5
 8032924:	6060      	str	r0, [r4, #4]
 8032926:	6863      	ldr	r3, [r4, #4]
 8032928:	6123      	str	r3, [r4, #16]
 803292a:	2300      	movs	r3, #0
 803292c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8032930:	e7a8      	b.n	8032884 <_printf_i+0x150>
 8032932:	6923      	ldr	r3, [r4, #16]
 8032934:	462a      	mov	r2, r5
 8032936:	4649      	mov	r1, r9
 8032938:	4640      	mov	r0, r8
 803293a:	47d0      	blx	sl
 803293c:	3001      	adds	r0, #1
 803293e:	d0ab      	beq.n	8032898 <_printf_i+0x164>
 8032940:	6823      	ldr	r3, [r4, #0]
 8032942:	079b      	lsls	r3, r3, #30
 8032944:	d413      	bmi.n	803296e <_printf_i+0x23a>
 8032946:	68e0      	ldr	r0, [r4, #12]
 8032948:	9b03      	ldr	r3, [sp, #12]
 803294a:	4298      	cmp	r0, r3
 803294c:	bfb8      	it	lt
 803294e:	4618      	movlt	r0, r3
 8032950:	e7a4      	b.n	803289c <_printf_i+0x168>
 8032952:	2301      	movs	r3, #1
 8032954:	4632      	mov	r2, r6
 8032956:	4649      	mov	r1, r9
 8032958:	4640      	mov	r0, r8
 803295a:	47d0      	blx	sl
 803295c:	3001      	adds	r0, #1
 803295e:	d09b      	beq.n	8032898 <_printf_i+0x164>
 8032960:	3501      	adds	r5, #1
 8032962:	68e3      	ldr	r3, [r4, #12]
 8032964:	9903      	ldr	r1, [sp, #12]
 8032966:	1a5b      	subs	r3, r3, r1
 8032968:	42ab      	cmp	r3, r5
 803296a:	dcf2      	bgt.n	8032952 <_printf_i+0x21e>
 803296c:	e7eb      	b.n	8032946 <_printf_i+0x212>
 803296e:	2500      	movs	r5, #0
 8032970:	f104 0619 	add.w	r6, r4, #25
 8032974:	e7f5      	b.n	8032962 <_printf_i+0x22e>
 8032976:	bf00      	nop
 8032978:	080381d1 	.word	0x080381d1
 803297c:	080381e2 	.word	0x080381e2

08032980 <_sbrk_r>:
 8032980:	b538      	push	{r3, r4, r5, lr}
 8032982:	4d06      	ldr	r5, [pc, #24]	; (803299c <_sbrk_r+0x1c>)
 8032984:	2300      	movs	r3, #0
 8032986:	4604      	mov	r4, r0
 8032988:	4608      	mov	r0, r1
 803298a:	602b      	str	r3, [r5, #0]
 803298c:	f7d4 fee0 	bl	8007750 <_sbrk>
 8032990:	1c43      	adds	r3, r0, #1
 8032992:	d102      	bne.n	803299a <_sbrk_r+0x1a>
 8032994:	682b      	ldr	r3, [r5, #0]
 8032996:	b103      	cbz	r3, 803299a <_sbrk_r+0x1a>
 8032998:	6023      	str	r3, [r4, #0]
 803299a:	bd38      	pop	{r3, r4, r5, pc}
 803299c:	200024d0 	.word	0x200024d0

080329a0 <_raise_r>:
 80329a0:	291f      	cmp	r1, #31
 80329a2:	b538      	push	{r3, r4, r5, lr}
 80329a4:	4604      	mov	r4, r0
 80329a6:	460d      	mov	r5, r1
 80329a8:	d904      	bls.n	80329b4 <_raise_r+0x14>
 80329aa:	2316      	movs	r3, #22
 80329ac:	6003      	str	r3, [r0, #0]
 80329ae:	f04f 30ff 	mov.w	r0, #4294967295
 80329b2:	bd38      	pop	{r3, r4, r5, pc}
 80329b4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80329b6:	b112      	cbz	r2, 80329be <_raise_r+0x1e>
 80329b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80329bc:	b94b      	cbnz	r3, 80329d2 <_raise_r+0x32>
 80329be:	4620      	mov	r0, r4
 80329c0:	f000 f830 	bl	8032a24 <_getpid_r>
 80329c4:	462a      	mov	r2, r5
 80329c6:	4601      	mov	r1, r0
 80329c8:	4620      	mov	r0, r4
 80329ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80329ce:	f000 b817 	b.w	8032a00 <_kill_r>
 80329d2:	2b01      	cmp	r3, #1
 80329d4:	d00a      	beq.n	80329ec <_raise_r+0x4c>
 80329d6:	1c59      	adds	r1, r3, #1
 80329d8:	d103      	bne.n	80329e2 <_raise_r+0x42>
 80329da:	2316      	movs	r3, #22
 80329dc:	6003      	str	r3, [r0, #0]
 80329de:	2001      	movs	r0, #1
 80329e0:	e7e7      	b.n	80329b2 <_raise_r+0x12>
 80329e2:	2400      	movs	r4, #0
 80329e4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80329e8:	4628      	mov	r0, r5
 80329ea:	4798      	blx	r3
 80329ec:	2000      	movs	r0, #0
 80329ee:	e7e0      	b.n	80329b2 <_raise_r+0x12>

080329f0 <raise>:
 80329f0:	4b02      	ldr	r3, [pc, #8]	; (80329fc <raise+0xc>)
 80329f2:	4601      	mov	r1, r0
 80329f4:	6818      	ldr	r0, [r3, #0]
 80329f6:	f7ff bfd3 	b.w	80329a0 <_raise_r>
 80329fa:	bf00      	nop
 80329fc:	200006c4 	.word	0x200006c4

08032a00 <_kill_r>:
 8032a00:	b538      	push	{r3, r4, r5, lr}
 8032a02:	4d07      	ldr	r5, [pc, #28]	; (8032a20 <_kill_r+0x20>)
 8032a04:	2300      	movs	r3, #0
 8032a06:	4604      	mov	r4, r0
 8032a08:	4608      	mov	r0, r1
 8032a0a:	4611      	mov	r1, r2
 8032a0c:	602b      	str	r3, [r5, #0]
 8032a0e:	f7d4 fe17 	bl	8007640 <_kill>
 8032a12:	1c43      	adds	r3, r0, #1
 8032a14:	d102      	bne.n	8032a1c <_kill_r+0x1c>
 8032a16:	682b      	ldr	r3, [r5, #0]
 8032a18:	b103      	cbz	r3, 8032a1c <_kill_r+0x1c>
 8032a1a:	6023      	str	r3, [r4, #0]
 8032a1c:	bd38      	pop	{r3, r4, r5, pc}
 8032a1e:	bf00      	nop
 8032a20:	200024d0 	.word	0x200024d0

08032a24 <_getpid_r>:
 8032a24:	f7d4 be04 	b.w	8007630 <_getpid>

08032a28 <_vsiprintf_r>:
 8032a28:	b500      	push	{lr}
 8032a2a:	b09b      	sub	sp, #108	; 0x6c
 8032a2c:	9100      	str	r1, [sp, #0]
 8032a2e:	9104      	str	r1, [sp, #16]
 8032a30:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8032a34:	9105      	str	r1, [sp, #20]
 8032a36:	9102      	str	r1, [sp, #8]
 8032a38:	4905      	ldr	r1, [pc, #20]	; (8032a50 <_vsiprintf_r+0x28>)
 8032a3a:	9103      	str	r1, [sp, #12]
 8032a3c:	4669      	mov	r1, sp
 8032a3e:	f000 fb85 	bl	803314c <_svfiprintf_r>
 8032a42:	9b00      	ldr	r3, [sp, #0]
 8032a44:	2200      	movs	r2, #0
 8032a46:	701a      	strb	r2, [r3, #0]
 8032a48:	b01b      	add	sp, #108	; 0x6c
 8032a4a:	f85d fb04 	ldr.w	pc, [sp], #4
 8032a4e:	bf00      	nop
 8032a50:	ffff0208 	.word	0xffff0208

08032a54 <vsiprintf>:
 8032a54:	4613      	mov	r3, r2
 8032a56:	460a      	mov	r2, r1
 8032a58:	4601      	mov	r1, r0
 8032a5a:	4802      	ldr	r0, [pc, #8]	; (8032a64 <vsiprintf+0x10>)
 8032a5c:	6800      	ldr	r0, [r0, #0]
 8032a5e:	f7ff bfe3 	b.w	8032a28 <_vsiprintf_r>
 8032a62:	bf00      	nop
 8032a64:	200006c4 	.word	0x200006c4

08032a68 <__swbuf_r>:
 8032a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8032a6a:	460e      	mov	r6, r1
 8032a6c:	4614      	mov	r4, r2
 8032a6e:	4605      	mov	r5, r0
 8032a70:	b118      	cbz	r0, 8032a7a <__swbuf_r+0x12>
 8032a72:	6983      	ldr	r3, [r0, #24]
 8032a74:	b90b      	cbnz	r3, 8032a7a <__swbuf_r+0x12>
 8032a76:	f000 f9d1 	bl	8032e1c <__sinit>
 8032a7a:	4b21      	ldr	r3, [pc, #132]	; (8032b00 <__swbuf_r+0x98>)
 8032a7c:	429c      	cmp	r4, r3
 8032a7e:	d12b      	bne.n	8032ad8 <__swbuf_r+0x70>
 8032a80:	686c      	ldr	r4, [r5, #4]
 8032a82:	69a3      	ldr	r3, [r4, #24]
 8032a84:	60a3      	str	r3, [r4, #8]
 8032a86:	89a3      	ldrh	r3, [r4, #12]
 8032a88:	071a      	lsls	r2, r3, #28
 8032a8a:	d52f      	bpl.n	8032aec <__swbuf_r+0x84>
 8032a8c:	6923      	ldr	r3, [r4, #16]
 8032a8e:	b36b      	cbz	r3, 8032aec <__swbuf_r+0x84>
 8032a90:	6923      	ldr	r3, [r4, #16]
 8032a92:	6820      	ldr	r0, [r4, #0]
 8032a94:	1ac0      	subs	r0, r0, r3
 8032a96:	6963      	ldr	r3, [r4, #20]
 8032a98:	b2f6      	uxtb	r6, r6
 8032a9a:	4283      	cmp	r3, r0
 8032a9c:	4637      	mov	r7, r6
 8032a9e:	dc04      	bgt.n	8032aaa <__swbuf_r+0x42>
 8032aa0:	4621      	mov	r1, r4
 8032aa2:	4628      	mov	r0, r5
 8032aa4:	f000 f926 	bl	8032cf4 <_fflush_r>
 8032aa8:	bb30      	cbnz	r0, 8032af8 <__swbuf_r+0x90>
 8032aaa:	68a3      	ldr	r3, [r4, #8]
 8032aac:	3b01      	subs	r3, #1
 8032aae:	60a3      	str	r3, [r4, #8]
 8032ab0:	6823      	ldr	r3, [r4, #0]
 8032ab2:	1c5a      	adds	r2, r3, #1
 8032ab4:	6022      	str	r2, [r4, #0]
 8032ab6:	701e      	strb	r6, [r3, #0]
 8032ab8:	6963      	ldr	r3, [r4, #20]
 8032aba:	3001      	adds	r0, #1
 8032abc:	4283      	cmp	r3, r0
 8032abe:	d004      	beq.n	8032aca <__swbuf_r+0x62>
 8032ac0:	89a3      	ldrh	r3, [r4, #12]
 8032ac2:	07db      	lsls	r3, r3, #31
 8032ac4:	d506      	bpl.n	8032ad4 <__swbuf_r+0x6c>
 8032ac6:	2e0a      	cmp	r6, #10
 8032ac8:	d104      	bne.n	8032ad4 <__swbuf_r+0x6c>
 8032aca:	4621      	mov	r1, r4
 8032acc:	4628      	mov	r0, r5
 8032ace:	f000 f911 	bl	8032cf4 <_fflush_r>
 8032ad2:	b988      	cbnz	r0, 8032af8 <__swbuf_r+0x90>
 8032ad4:	4638      	mov	r0, r7
 8032ad6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8032ad8:	4b0a      	ldr	r3, [pc, #40]	; (8032b04 <__swbuf_r+0x9c>)
 8032ada:	429c      	cmp	r4, r3
 8032adc:	d101      	bne.n	8032ae2 <__swbuf_r+0x7a>
 8032ade:	68ac      	ldr	r4, [r5, #8]
 8032ae0:	e7cf      	b.n	8032a82 <__swbuf_r+0x1a>
 8032ae2:	4b09      	ldr	r3, [pc, #36]	; (8032b08 <__swbuf_r+0xa0>)
 8032ae4:	429c      	cmp	r4, r3
 8032ae6:	bf08      	it	eq
 8032ae8:	68ec      	ldreq	r4, [r5, #12]
 8032aea:	e7ca      	b.n	8032a82 <__swbuf_r+0x1a>
 8032aec:	4621      	mov	r1, r4
 8032aee:	4628      	mov	r0, r5
 8032af0:	f000 f80c 	bl	8032b0c <__swsetup_r>
 8032af4:	2800      	cmp	r0, #0
 8032af6:	d0cb      	beq.n	8032a90 <__swbuf_r+0x28>
 8032af8:	f04f 37ff 	mov.w	r7, #4294967295
 8032afc:	e7ea      	b.n	8032ad4 <__swbuf_r+0x6c>
 8032afe:	bf00      	nop
 8032b00:	08038214 	.word	0x08038214
 8032b04:	08038234 	.word	0x08038234
 8032b08:	080381f4 	.word	0x080381f4

08032b0c <__swsetup_r>:
 8032b0c:	4b32      	ldr	r3, [pc, #200]	; (8032bd8 <__swsetup_r+0xcc>)
 8032b0e:	b570      	push	{r4, r5, r6, lr}
 8032b10:	681d      	ldr	r5, [r3, #0]
 8032b12:	4606      	mov	r6, r0
 8032b14:	460c      	mov	r4, r1
 8032b16:	b125      	cbz	r5, 8032b22 <__swsetup_r+0x16>
 8032b18:	69ab      	ldr	r3, [r5, #24]
 8032b1a:	b913      	cbnz	r3, 8032b22 <__swsetup_r+0x16>
 8032b1c:	4628      	mov	r0, r5
 8032b1e:	f000 f97d 	bl	8032e1c <__sinit>
 8032b22:	4b2e      	ldr	r3, [pc, #184]	; (8032bdc <__swsetup_r+0xd0>)
 8032b24:	429c      	cmp	r4, r3
 8032b26:	d10f      	bne.n	8032b48 <__swsetup_r+0x3c>
 8032b28:	686c      	ldr	r4, [r5, #4]
 8032b2a:	89a3      	ldrh	r3, [r4, #12]
 8032b2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8032b30:	0719      	lsls	r1, r3, #28
 8032b32:	d42c      	bmi.n	8032b8e <__swsetup_r+0x82>
 8032b34:	06dd      	lsls	r5, r3, #27
 8032b36:	d411      	bmi.n	8032b5c <__swsetup_r+0x50>
 8032b38:	2309      	movs	r3, #9
 8032b3a:	6033      	str	r3, [r6, #0]
 8032b3c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8032b40:	81a3      	strh	r3, [r4, #12]
 8032b42:	f04f 30ff 	mov.w	r0, #4294967295
 8032b46:	e03e      	b.n	8032bc6 <__swsetup_r+0xba>
 8032b48:	4b25      	ldr	r3, [pc, #148]	; (8032be0 <__swsetup_r+0xd4>)
 8032b4a:	429c      	cmp	r4, r3
 8032b4c:	d101      	bne.n	8032b52 <__swsetup_r+0x46>
 8032b4e:	68ac      	ldr	r4, [r5, #8]
 8032b50:	e7eb      	b.n	8032b2a <__swsetup_r+0x1e>
 8032b52:	4b24      	ldr	r3, [pc, #144]	; (8032be4 <__swsetup_r+0xd8>)
 8032b54:	429c      	cmp	r4, r3
 8032b56:	bf08      	it	eq
 8032b58:	68ec      	ldreq	r4, [r5, #12]
 8032b5a:	e7e6      	b.n	8032b2a <__swsetup_r+0x1e>
 8032b5c:	0758      	lsls	r0, r3, #29
 8032b5e:	d512      	bpl.n	8032b86 <__swsetup_r+0x7a>
 8032b60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8032b62:	b141      	cbz	r1, 8032b76 <__swsetup_r+0x6a>
 8032b64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8032b68:	4299      	cmp	r1, r3
 8032b6a:	d002      	beq.n	8032b72 <__swsetup_r+0x66>
 8032b6c:	4630      	mov	r0, r6
 8032b6e:	f7ff fb39 	bl	80321e4 <_free_r>
 8032b72:	2300      	movs	r3, #0
 8032b74:	6363      	str	r3, [r4, #52]	; 0x34
 8032b76:	89a3      	ldrh	r3, [r4, #12]
 8032b78:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8032b7c:	81a3      	strh	r3, [r4, #12]
 8032b7e:	2300      	movs	r3, #0
 8032b80:	6063      	str	r3, [r4, #4]
 8032b82:	6923      	ldr	r3, [r4, #16]
 8032b84:	6023      	str	r3, [r4, #0]
 8032b86:	89a3      	ldrh	r3, [r4, #12]
 8032b88:	f043 0308 	orr.w	r3, r3, #8
 8032b8c:	81a3      	strh	r3, [r4, #12]
 8032b8e:	6923      	ldr	r3, [r4, #16]
 8032b90:	b94b      	cbnz	r3, 8032ba6 <__swsetup_r+0x9a>
 8032b92:	89a3      	ldrh	r3, [r4, #12]
 8032b94:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8032b98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8032b9c:	d003      	beq.n	8032ba6 <__swsetup_r+0x9a>
 8032b9e:	4621      	mov	r1, r4
 8032ba0:	4630      	mov	r0, r6
 8032ba2:	f000 f9fd 	bl	8032fa0 <__smakebuf_r>
 8032ba6:	89a0      	ldrh	r0, [r4, #12]
 8032ba8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8032bac:	f010 0301 	ands.w	r3, r0, #1
 8032bb0:	d00a      	beq.n	8032bc8 <__swsetup_r+0xbc>
 8032bb2:	2300      	movs	r3, #0
 8032bb4:	60a3      	str	r3, [r4, #8]
 8032bb6:	6963      	ldr	r3, [r4, #20]
 8032bb8:	425b      	negs	r3, r3
 8032bba:	61a3      	str	r3, [r4, #24]
 8032bbc:	6923      	ldr	r3, [r4, #16]
 8032bbe:	b943      	cbnz	r3, 8032bd2 <__swsetup_r+0xc6>
 8032bc0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8032bc4:	d1ba      	bne.n	8032b3c <__swsetup_r+0x30>
 8032bc6:	bd70      	pop	{r4, r5, r6, pc}
 8032bc8:	0781      	lsls	r1, r0, #30
 8032bca:	bf58      	it	pl
 8032bcc:	6963      	ldrpl	r3, [r4, #20]
 8032bce:	60a3      	str	r3, [r4, #8]
 8032bd0:	e7f4      	b.n	8032bbc <__swsetup_r+0xb0>
 8032bd2:	2000      	movs	r0, #0
 8032bd4:	e7f7      	b.n	8032bc6 <__swsetup_r+0xba>
 8032bd6:	bf00      	nop
 8032bd8:	200006c4 	.word	0x200006c4
 8032bdc:	08038214 	.word	0x08038214
 8032be0:	08038234 	.word	0x08038234
 8032be4:	080381f4 	.word	0x080381f4

08032be8 <__sflush_r>:
 8032be8:	898a      	ldrh	r2, [r1, #12]
 8032bea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8032bee:	4605      	mov	r5, r0
 8032bf0:	0710      	lsls	r0, r2, #28
 8032bf2:	460c      	mov	r4, r1
 8032bf4:	d458      	bmi.n	8032ca8 <__sflush_r+0xc0>
 8032bf6:	684b      	ldr	r3, [r1, #4]
 8032bf8:	2b00      	cmp	r3, #0
 8032bfa:	dc05      	bgt.n	8032c08 <__sflush_r+0x20>
 8032bfc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8032bfe:	2b00      	cmp	r3, #0
 8032c00:	dc02      	bgt.n	8032c08 <__sflush_r+0x20>
 8032c02:	2000      	movs	r0, #0
 8032c04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8032c08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8032c0a:	2e00      	cmp	r6, #0
 8032c0c:	d0f9      	beq.n	8032c02 <__sflush_r+0x1a>
 8032c0e:	2300      	movs	r3, #0
 8032c10:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8032c14:	682f      	ldr	r7, [r5, #0]
 8032c16:	602b      	str	r3, [r5, #0]
 8032c18:	d032      	beq.n	8032c80 <__sflush_r+0x98>
 8032c1a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8032c1c:	89a3      	ldrh	r3, [r4, #12]
 8032c1e:	075a      	lsls	r2, r3, #29
 8032c20:	d505      	bpl.n	8032c2e <__sflush_r+0x46>
 8032c22:	6863      	ldr	r3, [r4, #4]
 8032c24:	1ac0      	subs	r0, r0, r3
 8032c26:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8032c28:	b10b      	cbz	r3, 8032c2e <__sflush_r+0x46>
 8032c2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8032c2c:	1ac0      	subs	r0, r0, r3
 8032c2e:	2300      	movs	r3, #0
 8032c30:	4602      	mov	r2, r0
 8032c32:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8032c34:	6a21      	ldr	r1, [r4, #32]
 8032c36:	4628      	mov	r0, r5
 8032c38:	47b0      	blx	r6
 8032c3a:	1c43      	adds	r3, r0, #1
 8032c3c:	89a3      	ldrh	r3, [r4, #12]
 8032c3e:	d106      	bne.n	8032c4e <__sflush_r+0x66>
 8032c40:	6829      	ldr	r1, [r5, #0]
 8032c42:	291d      	cmp	r1, #29
 8032c44:	d82c      	bhi.n	8032ca0 <__sflush_r+0xb8>
 8032c46:	4a2a      	ldr	r2, [pc, #168]	; (8032cf0 <__sflush_r+0x108>)
 8032c48:	40ca      	lsrs	r2, r1
 8032c4a:	07d6      	lsls	r6, r2, #31
 8032c4c:	d528      	bpl.n	8032ca0 <__sflush_r+0xb8>
 8032c4e:	2200      	movs	r2, #0
 8032c50:	6062      	str	r2, [r4, #4]
 8032c52:	04d9      	lsls	r1, r3, #19
 8032c54:	6922      	ldr	r2, [r4, #16]
 8032c56:	6022      	str	r2, [r4, #0]
 8032c58:	d504      	bpl.n	8032c64 <__sflush_r+0x7c>
 8032c5a:	1c42      	adds	r2, r0, #1
 8032c5c:	d101      	bne.n	8032c62 <__sflush_r+0x7a>
 8032c5e:	682b      	ldr	r3, [r5, #0]
 8032c60:	b903      	cbnz	r3, 8032c64 <__sflush_r+0x7c>
 8032c62:	6560      	str	r0, [r4, #84]	; 0x54
 8032c64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8032c66:	602f      	str	r7, [r5, #0]
 8032c68:	2900      	cmp	r1, #0
 8032c6a:	d0ca      	beq.n	8032c02 <__sflush_r+0x1a>
 8032c6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8032c70:	4299      	cmp	r1, r3
 8032c72:	d002      	beq.n	8032c7a <__sflush_r+0x92>
 8032c74:	4628      	mov	r0, r5
 8032c76:	f7ff fab5 	bl	80321e4 <_free_r>
 8032c7a:	2000      	movs	r0, #0
 8032c7c:	6360      	str	r0, [r4, #52]	; 0x34
 8032c7e:	e7c1      	b.n	8032c04 <__sflush_r+0x1c>
 8032c80:	6a21      	ldr	r1, [r4, #32]
 8032c82:	2301      	movs	r3, #1
 8032c84:	4628      	mov	r0, r5
 8032c86:	47b0      	blx	r6
 8032c88:	1c41      	adds	r1, r0, #1
 8032c8a:	d1c7      	bne.n	8032c1c <__sflush_r+0x34>
 8032c8c:	682b      	ldr	r3, [r5, #0]
 8032c8e:	2b00      	cmp	r3, #0
 8032c90:	d0c4      	beq.n	8032c1c <__sflush_r+0x34>
 8032c92:	2b1d      	cmp	r3, #29
 8032c94:	d001      	beq.n	8032c9a <__sflush_r+0xb2>
 8032c96:	2b16      	cmp	r3, #22
 8032c98:	d101      	bne.n	8032c9e <__sflush_r+0xb6>
 8032c9a:	602f      	str	r7, [r5, #0]
 8032c9c:	e7b1      	b.n	8032c02 <__sflush_r+0x1a>
 8032c9e:	89a3      	ldrh	r3, [r4, #12]
 8032ca0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8032ca4:	81a3      	strh	r3, [r4, #12]
 8032ca6:	e7ad      	b.n	8032c04 <__sflush_r+0x1c>
 8032ca8:	690f      	ldr	r7, [r1, #16]
 8032caa:	2f00      	cmp	r7, #0
 8032cac:	d0a9      	beq.n	8032c02 <__sflush_r+0x1a>
 8032cae:	0793      	lsls	r3, r2, #30
 8032cb0:	680e      	ldr	r6, [r1, #0]
 8032cb2:	bf08      	it	eq
 8032cb4:	694b      	ldreq	r3, [r1, #20]
 8032cb6:	600f      	str	r7, [r1, #0]
 8032cb8:	bf18      	it	ne
 8032cba:	2300      	movne	r3, #0
 8032cbc:	eba6 0807 	sub.w	r8, r6, r7
 8032cc0:	608b      	str	r3, [r1, #8]
 8032cc2:	f1b8 0f00 	cmp.w	r8, #0
 8032cc6:	dd9c      	ble.n	8032c02 <__sflush_r+0x1a>
 8032cc8:	6a21      	ldr	r1, [r4, #32]
 8032cca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8032ccc:	4643      	mov	r3, r8
 8032cce:	463a      	mov	r2, r7
 8032cd0:	4628      	mov	r0, r5
 8032cd2:	47b0      	blx	r6
 8032cd4:	2800      	cmp	r0, #0
 8032cd6:	dc06      	bgt.n	8032ce6 <__sflush_r+0xfe>
 8032cd8:	89a3      	ldrh	r3, [r4, #12]
 8032cda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8032cde:	81a3      	strh	r3, [r4, #12]
 8032ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8032ce4:	e78e      	b.n	8032c04 <__sflush_r+0x1c>
 8032ce6:	4407      	add	r7, r0
 8032ce8:	eba8 0800 	sub.w	r8, r8, r0
 8032cec:	e7e9      	b.n	8032cc2 <__sflush_r+0xda>
 8032cee:	bf00      	nop
 8032cf0:	20400001 	.word	0x20400001

08032cf4 <_fflush_r>:
 8032cf4:	b538      	push	{r3, r4, r5, lr}
 8032cf6:	690b      	ldr	r3, [r1, #16]
 8032cf8:	4605      	mov	r5, r0
 8032cfa:	460c      	mov	r4, r1
 8032cfc:	b913      	cbnz	r3, 8032d04 <_fflush_r+0x10>
 8032cfe:	2500      	movs	r5, #0
 8032d00:	4628      	mov	r0, r5
 8032d02:	bd38      	pop	{r3, r4, r5, pc}
 8032d04:	b118      	cbz	r0, 8032d0e <_fflush_r+0x1a>
 8032d06:	6983      	ldr	r3, [r0, #24]
 8032d08:	b90b      	cbnz	r3, 8032d0e <_fflush_r+0x1a>
 8032d0a:	f000 f887 	bl	8032e1c <__sinit>
 8032d0e:	4b14      	ldr	r3, [pc, #80]	; (8032d60 <_fflush_r+0x6c>)
 8032d10:	429c      	cmp	r4, r3
 8032d12:	d11b      	bne.n	8032d4c <_fflush_r+0x58>
 8032d14:	686c      	ldr	r4, [r5, #4]
 8032d16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8032d1a:	2b00      	cmp	r3, #0
 8032d1c:	d0ef      	beq.n	8032cfe <_fflush_r+0xa>
 8032d1e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8032d20:	07d0      	lsls	r0, r2, #31
 8032d22:	d404      	bmi.n	8032d2e <_fflush_r+0x3a>
 8032d24:	0599      	lsls	r1, r3, #22
 8032d26:	d402      	bmi.n	8032d2e <_fflush_r+0x3a>
 8032d28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8032d2a:	f7ff fa02 	bl	8032132 <__retarget_lock_acquire_recursive>
 8032d2e:	4628      	mov	r0, r5
 8032d30:	4621      	mov	r1, r4
 8032d32:	f7ff ff59 	bl	8032be8 <__sflush_r>
 8032d36:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8032d38:	07da      	lsls	r2, r3, #31
 8032d3a:	4605      	mov	r5, r0
 8032d3c:	d4e0      	bmi.n	8032d00 <_fflush_r+0xc>
 8032d3e:	89a3      	ldrh	r3, [r4, #12]
 8032d40:	059b      	lsls	r3, r3, #22
 8032d42:	d4dd      	bmi.n	8032d00 <_fflush_r+0xc>
 8032d44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8032d46:	f7ff f9f5 	bl	8032134 <__retarget_lock_release_recursive>
 8032d4a:	e7d9      	b.n	8032d00 <_fflush_r+0xc>
 8032d4c:	4b05      	ldr	r3, [pc, #20]	; (8032d64 <_fflush_r+0x70>)
 8032d4e:	429c      	cmp	r4, r3
 8032d50:	d101      	bne.n	8032d56 <_fflush_r+0x62>
 8032d52:	68ac      	ldr	r4, [r5, #8]
 8032d54:	e7df      	b.n	8032d16 <_fflush_r+0x22>
 8032d56:	4b04      	ldr	r3, [pc, #16]	; (8032d68 <_fflush_r+0x74>)
 8032d58:	429c      	cmp	r4, r3
 8032d5a:	bf08      	it	eq
 8032d5c:	68ec      	ldreq	r4, [r5, #12]
 8032d5e:	e7da      	b.n	8032d16 <_fflush_r+0x22>
 8032d60:	08038214 	.word	0x08038214
 8032d64:	08038234 	.word	0x08038234
 8032d68:	080381f4 	.word	0x080381f4

08032d6c <std>:
 8032d6c:	2300      	movs	r3, #0
 8032d6e:	b510      	push	{r4, lr}
 8032d70:	4604      	mov	r4, r0
 8032d72:	e9c0 3300 	strd	r3, r3, [r0]
 8032d76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8032d7a:	6083      	str	r3, [r0, #8]
 8032d7c:	8181      	strh	r1, [r0, #12]
 8032d7e:	6643      	str	r3, [r0, #100]	; 0x64
 8032d80:	81c2      	strh	r2, [r0, #14]
 8032d82:	6183      	str	r3, [r0, #24]
 8032d84:	4619      	mov	r1, r3
 8032d86:	2208      	movs	r2, #8
 8032d88:	305c      	adds	r0, #92	; 0x5c
 8032d8a:	f7ff fa0d 	bl	80321a8 <memset>
 8032d8e:	4b05      	ldr	r3, [pc, #20]	; (8032da4 <std+0x38>)
 8032d90:	6263      	str	r3, [r4, #36]	; 0x24
 8032d92:	4b05      	ldr	r3, [pc, #20]	; (8032da8 <std+0x3c>)
 8032d94:	62a3      	str	r3, [r4, #40]	; 0x28
 8032d96:	4b05      	ldr	r3, [pc, #20]	; (8032dac <std+0x40>)
 8032d98:	62e3      	str	r3, [r4, #44]	; 0x2c
 8032d9a:	4b05      	ldr	r3, [pc, #20]	; (8032db0 <std+0x44>)
 8032d9c:	6224      	str	r4, [r4, #32]
 8032d9e:	6323      	str	r3, [r4, #48]	; 0x30
 8032da0:	bd10      	pop	{r4, pc}
 8032da2:	bf00      	nop
 8032da4:	0803334d 	.word	0x0803334d
 8032da8:	0803336f 	.word	0x0803336f
 8032dac:	080333a7 	.word	0x080333a7
 8032db0:	080333cb 	.word	0x080333cb

08032db4 <_cleanup_r>:
 8032db4:	4901      	ldr	r1, [pc, #4]	; (8032dbc <_cleanup_r+0x8>)
 8032db6:	f000 b8af 	b.w	8032f18 <_fwalk_reent>
 8032dba:	bf00      	nop
 8032dbc:	08032cf5 	.word	0x08032cf5

08032dc0 <__sfmoreglue>:
 8032dc0:	b570      	push	{r4, r5, r6, lr}
 8032dc2:	2268      	movs	r2, #104	; 0x68
 8032dc4:	1e4d      	subs	r5, r1, #1
 8032dc6:	4355      	muls	r5, r2
 8032dc8:	460e      	mov	r6, r1
 8032dca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8032dce:	f7ff fa75 	bl	80322bc <_malloc_r>
 8032dd2:	4604      	mov	r4, r0
 8032dd4:	b140      	cbz	r0, 8032de8 <__sfmoreglue+0x28>
 8032dd6:	2100      	movs	r1, #0
 8032dd8:	e9c0 1600 	strd	r1, r6, [r0]
 8032ddc:	300c      	adds	r0, #12
 8032dde:	60a0      	str	r0, [r4, #8]
 8032de0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8032de4:	f7ff f9e0 	bl	80321a8 <memset>
 8032de8:	4620      	mov	r0, r4
 8032dea:	bd70      	pop	{r4, r5, r6, pc}

08032dec <__sfp_lock_acquire>:
 8032dec:	4801      	ldr	r0, [pc, #4]	; (8032df4 <__sfp_lock_acquire+0x8>)
 8032dee:	f7ff b9a0 	b.w	8032132 <__retarget_lock_acquire_recursive>
 8032df2:	bf00      	nop
 8032df4:	200024c5 	.word	0x200024c5

08032df8 <__sfp_lock_release>:
 8032df8:	4801      	ldr	r0, [pc, #4]	; (8032e00 <__sfp_lock_release+0x8>)
 8032dfa:	f7ff b99b 	b.w	8032134 <__retarget_lock_release_recursive>
 8032dfe:	bf00      	nop
 8032e00:	200024c5 	.word	0x200024c5

08032e04 <__sinit_lock_acquire>:
 8032e04:	4801      	ldr	r0, [pc, #4]	; (8032e0c <__sinit_lock_acquire+0x8>)
 8032e06:	f7ff b994 	b.w	8032132 <__retarget_lock_acquire_recursive>
 8032e0a:	bf00      	nop
 8032e0c:	200024c6 	.word	0x200024c6

08032e10 <__sinit_lock_release>:
 8032e10:	4801      	ldr	r0, [pc, #4]	; (8032e18 <__sinit_lock_release+0x8>)
 8032e12:	f7ff b98f 	b.w	8032134 <__retarget_lock_release_recursive>
 8032e16:	bf00      	nop
 8032e18:	200024c6 	.word	0x200024c6

08032e1c <__sinit>:
 8032e1c:	b510      	push	{r4, lr}
 8032e1e:	4604      	mov	r4, r0
 8032e20:	f7ff fff0 	bl	8032e04 <__sinit_lock_acquire>
 8032e24:	69a3      	ldr	r3, [r4, #24]
 8032e26:	b11b      	cbz	r3, 8032e30 <__sinit+0x14>
 8032e28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8032e2c:	f7ff bff0 	b.w	8032e10 <__sinit_lock_release>
 8032e30:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8032e34:	6523      	str	r3, [r4, #80]	; 0x50
 8032e36:	4b13      	ldr	r3, [pc, #76]	; (8032e84 <__sinit+0x68>)
 8032e38:	4a13      	ldr	r2, [pc, #76]	; (8032e88 <__sinit+0x6c>)
 8032e3a:	681b      	ldr	r3, [r3, #0]
 8032e3c:	62a2      	str	r2, [r4, #40]	; 0x28
 8032e3e:	42a3      	cmp	r3, r4
 8032e40:	bf04      	itt	eq
 8032e42:	2301      	moveq	r3, #1
 8032e44:	61a3      	streq	r3, [r4, #24]
 8032e46:	4620      	mov	r0, r4
 8032e48:	f000 f820 	bl	8032e8c <__sfp>
 8032e4c:	6060      	str	r0, [r4, #4]
 8032e4e:	4620      	mov	r0, r4
 8032e50:	f000 f81c 	bl	8032e8c <__sfp>
 8032e54:	60a0      	str	r0, [r4, #8]
 8032e56:	4620      	mov	r0, r4
 8032e58:	f000 f818 	bl	8032e8c <__sfp>
 8032e5c:	2200      	movs	r2, #0
 8032e5e:	60e0      	str	r0, [r4, #12]
 8032e60:	2104      	movs	r1, #4
 8032e62:	6860      	ldr	r0, [r4, #4]
 8032e64:	f7ff ff82 	bl	8032d6c <std>
 8032e68:	68a0      	ldr	r0, [r4, #8]
 8032e6a:	2201      	movs	r2, #1
 8032e6c:	2109      	movs	r1, #9
 8032e6e:	f7ff ff7d 	bl	8032d6c <std>
 8032e72:	68e0      	ldr	r0, [r4, #12]
 8032e74:	2202      	movs	r2, #2
 8032e76:	2112      	movs	r1, #18
 8032e78:	f7ff ff78 	bl	8032d6c <std>
 8032e7c:	2301      	movs	r3, #1
 8032e7e:	61a3      	str	r3, [r4, #24]
 8032e80:	e7d2      	b.n	8032e28 <__sinit+0xc>
 8032e82:	bf00      	nop
 8032e84:	080381bc 	.word	0x080381bc
 8032e88:	08032db5 	.word	0x08032db5

08032e8c <__sfp>:
 8032e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8032e8e:	4607      	mov	r7, r0
 8032e90:	f7ff ffac 	bl	8032dec <__sfp_lock_acquire>
 8032e94:	4b1e      	ldr	r3, [pc, #120]	; (8032f10 <__sfp+0x84>)
 8032e96:	681e      	ldr	r6, [r3, #0]
 8032e98:	69b3      	ldr	r3, [r6, #24]
 8032e9a:	b913      	cbnz	r3, 8032ea2 <__sfp+0x16>
 8032e9c:	4630      	mov	r0, r6
 8032e9e:	f7ff ffbd 	bl	8032e1c <__sinit>
 8032ea2:	3648      	adds	r6, #72	; 0x48
 8032ea4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8032ea8:	3b01      	subs	r3, #1
 8032eaa:	d503      	bpl.n	8032eb4 <__sfp+0x28>
 8032eac:	6833      	ldr	r3, [r6, #0]
 8032eae:	b30b      	cbz	r3, 8032ef4 <__sfp+0x68>
 8032eb0:	6836      	ldr	r6, [r6, #0]
 8032eb2:	e7f7      	b.n	8032ea4 <__sfp+0x18>
 8032eb4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8032eb8:	b9d5      	cbnz	r5, 8032ef0 <__sfp+0x64>
 8032eba:	4b16      	ldr	r3, [pc, #88]	; (8032f14 <__sfp+0x88>)
 8032ebc:	60e3      	str	r3, [r4, #12]
 8032ebe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8032ec2:	6665      	str	r5, [r4, #100]	; 0x64
 8032ec4:	f7ff f934 	bl	8032130 <__retarget_lock_init_recursive>
 8032ec8:	f7ff ff96 	bl	8032df8 <__sfp_lock_release>
 8032ecc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8032ed0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8032ed4:	6025      	str	r5, [r4, #0]
 8032ed6:	61a5      	str	r5, [r4, #24]
 8032ed8:	2208      	movs	r2, #8
 8032eda:	4629      	mov	r1, r5
 8032edc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8032ee0:	f7ff f962 	bl	80321a8 <memset>
 8032ee4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8032ee8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8032eec:	4620      	mov	r0, r4
 8032eee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8032ef0:	3468      	adds	r4, #104	; 0x68
 8032ef2:	e7d9      	b.n	8032ea8 <__sfp+0x1c>
 8032ef4:	2104      	movs	r1, #4
 8032ef6:	4638      	mov	r0, r7
 8032ef8:	f7ff ff62 	bl	8032dc0 <__sfmoreglue>
 8032efc:	4604      	mov	r4, r0
 8032efe:	6030      	str	r0, [r6, #0]
 8032f00:	2800      	cmp	r0, #0
 8032f02:	d1d5      	bne.n	8032eb0 <__sfp+0x24>
 8032f04:	f7ff ff78 	bl	8032df8 <__sfp_lock_release>
 8032f08:	230c      	movs	r3, #12
 8032f0a:	603b      	str	r3, [r7, #0]
 8032f0c:	e7ee      	b.n	8032eec <__sfp+0x60>
 8032f0e:	bf00      	nop
 8032f10:	080381bc 	.word	0x080381bc
 8032f14:	ffff0001 	.word	0xffff0001

08032f18 <_fwalk_reent>:
 8032f18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8032f1c:	4606      	mov	r6, r0
 8032f1e:	4688      	mov	r8, r1
 8032f20:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8032f24:	2700      	movs	r7, #0
 8032f26:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8032f2a:	f1b9 0901 	subs.w	r9, r9, #1
 8032f2e:	d505      	bpl.n	8032f3c <_fwalk_reent+0x24>
 8032f30:	6824      	ldr	r4, [r4, #0]
 8032f32:	2c00      	cmp	r4, #0
 8032f34:	d1f7      	bne.n	8032f26 <_fwalk_reent+0xe>
 8032f36:	4638      	mov	r0, r7
 8032f38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8032f3c:	89ab      	ldrh	r3, [r5, #12]
 8032f3e:	2b01      	cmp	r3, #1
 8032f40:	d907      	bls.n	8032f52 <_fwalk_reent+0x3a>
 8032f42:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8032f46:	3301      	adds	r3, #1
 8032f48:	d003      	beq.n	8032f52 <_fwalk_reent+0x3a>
 8032f4a:	4629      	mov	r1, r5
 8032f4c:	4630      	mov	r0, r6
 8032f4e:	47c0      	blx	r8
 8032f50:	4307      	orrs	r7, r0
 8032f52:	3568      	adds	r5, #104	; 0x68
 8032f54:	e7e9      	b.n	8032f2a <_fwalk_reent+0x12>

08032f56 <__swhatbuf_r>:
 8032f56:	b570      	push	{r4, r5, r6, lr}
 8032f58:	460e      	mov	r6, r1
 8032f5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8032f5e:	2900      	cmp	r1, #0
 8032f60:	b096      	sub	sp, #88	; 0x58
 8032f62:	4614      	mov	r4, r2
 8032f64:	461d      	mov	r5, r3
 8032f66:	da08      	bge.n	8032f7a <__swhatbuf_r+0x24>
 8032f68:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8032f6c:	2200      	movs	r2, #0
 8032f6e:	602a      	str	r2, [r5, #0]
 8032f70:	061a      	lsls	r2, r3, #24
 8032f72:	d410      	bmi.n	8032f96 <__swhatbuf_r+0x40>
 8032f74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8032f78:	e00e      	b.n	8032f98 <__swhatbuf_r+0x42>
 8032f7a:	466a      	mov	r2, sp
 8032f7c:	f000 fa4c 	bl	8033418 <_fstat_r>
 8032f80:	2800      	cmp	r0, #0
 8032f82:	dbf1      	blt.n	8032f68 <__swhatbuf_r+0x12>
 8032f84:	9a01      	ldr	r2, [sp, #4]
 8032f86:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8032f8a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8032f8e:	425a      	negs	r2, r3
 8032f90:	415a      	adcs	r2, r3
 8032f92:	602a      	str	r2, [r5, #0]
 8032f94:	e7ee      	b.n	8032f74 <__swhatbuf_r+0x1e>
 8032f96:	2340      	movs	r3, #64	; 0x40
 8032f98:	2000      	movs	r0, #0
 8032f9a:	6023      	str	r3, [r4, #0]
 8032f9c:	b016      	add	sp, #88	; 0x58
 8032f9e:	bd70      	pop	{r4, r5, r6, pc}

08032fa0 <__smakebuf_r>:
 8032fa0:	898b      	ldrh	r3, [r1, #12]
 8032fa2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8032fa4:	079d      	lsls	r5, r3, #30
 8032fa6:	4606      	mov	r6, r0
 8032fa8:	460c      	mov	r4, r1
 8032faa:	d507      	bpl.n	8032fbc <__smakebuf_r+0x1c>
 8032fac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8032fb0:	6023      	str	r3, [r4, #0]
 8032fb2:	6123      	str	r3, [r4, #16]
 8032fb4:	2301      	movs	r3, #1
 8032fb6:	6163      	str	r3, [r4, #20]
 8032fb8:	b002      	add	sp, #8
 8032fba:	bd70      	pop	{r4, r5, r6, pc}
 8032fbc:	ab01      	add	r3, sp, #4
 8032fbe:	466a      	mov	r2, sp
 8032fc0:	f7ff ffc9 	bl	8032f56 <__swhatbuf_r>
 8032fc4:	9900      	ldr	r1, [sp, #0]
 8032fc6:	4605      	mov	r5, r0
 8032fc8:	4630      	mov	r0, r6
 8032fca:	f7ff f977 	bl	80322bc <_malloc_r>
 8032fce:	b948      	cbnz	r0, 8032fe4 <__smakebuf_r+0x44>
 8032fd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8032fd4:	059a      	lsls	r2, r3, #22
 8032fd6:	d4ef      	bmi.n	8032fb8 <__smakebuf_r+0x18>
 8032fd8:	f023 0303 	bic.w	r3, r3, #3
 8032fdc:	f043 0302 	orr.w	r3, r3, #2
 8032fe0:	81a3      	strh	r3, [r4, #12]
 8032fe2:	e7e3      	b.n	8032fac <__smakebuf_r+0xc>
 8032fe4:	4b0d      	ldr	r3, [pc, #52]	; (803301c <__smakebuf_r+0x7c>)
 8032fe6:	62b3      	str	r3, [r6, #40]	; 0x28
 8032fe8:	89a3      	ldrh	r3, [r4, #12]
 8032fea:	6020      	str	r0, [r4, #0]
 8032fec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8032ff0:	81a3      	strh	r3, [r4, #12]
 8032ff2:	9b00      	ldr	r3, [sp, #0]
 8032ff4:	6163      	str	r3, [r4, #20]
 8032ff6:	9b01      	ldr	r3, [sp, #4]
 8032ff8:	6120      	str	r0, [r4, #16]
 8032ffa:	b15b      	cbz	r3, 8033014 <__smakebuf_r+0x74>
 8032ffc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8033000:	4630      	mov	r0, r6
 8033002:	f000 fa1b 	bl	803343c <_isatty_r>
 8033006:	b128      	cbz	r0, 8033014 <__smakebuf_r+0x74>
 8033008:	89a3      	ldrh	r3, [r4, #12]
 803300a:	f023 0303 	bic.w	r3, r3, #3
 803300e:	f043 0301 	orr.w	r3, r3, #1
 8033012:	81a3      	strh	r3, [r4, #12]
 8033014:	89a0      	ldrh	r0, [r4, #12]
 8033016:	4305      	orrs	r5, r0
 8033018:	81a5      	strh	r5, [r4, #12]
 803301a:	e7cd      	b.n	8032fb8 <__smakebuf_r+0x18>
 803301c:	08032db5 	.word	0x08032db5

08033020 <__malloc_lock>:
 8033020:	4801      	ldr	r0, [pc, #4]	; (8033028 <__malloc_lock+0x8>)
 8033022:	f7ff b886 	b.w	8032132 <__retarget_lock_acquire_recursive>
 8033026:	bf00      	nop
 8033028:	200024c4 	.word	0x200024c4

0803302c <__malloc_unlock>:
 803302c:	4801      	ldr	r0, [pc, #4]	; (8033034 <__malloc_unlock+0x8>)
 803302e:	f7ff b881 	b.w	8032134 <__retarget_lock_release_recursive>
 8033032:	bf00      	nop
 8033034:	200024c4 	.word	0x200024c4

08033038 <_realloc_r>:
 8033038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 803303c:	4680      	mov	r8, r0
 803303e:	4614      	mov	r4, r2
 8033040:	460e      	mov	r6, r1
 8033042:	b921      	cbnz	r1, 803304e <_realloc_r+0x16>
 8033044:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8033048:	4611      	mov	r1, r2
 803304a:	f7ff b937 	b.w	80322bc <_malloc_r>
 803304e:	b92a      	cbnz	r2, 803305c <_realloc_r+0x24>
 8033050:	f7ff f8c8 	bl	80321e4 <_free_r>
 8033054:	4625      	mov	r5, r4
 8033056:	4628      	mov	r0, r5
 8033058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 803305c:	f000 fa10 	bl	8033480 <_malloc_usable_size_r>
 8033060:	4284      	cmp	r4, r0
 8033062:	4607      	mov	r7, r0
 8033064:	d802      	bhi.n	803306c <_realloc_r+0x34>
 8033066:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 803306a:	d812      	bhi.n	8033092 <_realloc_r+0x5a>
 803306c:	4621      	mov	r1, r4
 803306e:	4640      	mov	r0, r8
 8033070:	f7ff f924 	bl	80322bc <_malloc_r>
 8033074:	4605      	mov	r5, r0
 8033076:	2800      	cmp	r0, #0
 8033078:	d0ed      	beq.n	8033056 <_realloc_r+0x1e>
 803307a:	42bc      	cmp	r4, r7
 803307c:	4622      	mov	r2, r4
 803307e:	4631      	mov	r1, r6
 8033080:	bf28      	it	cs
 8033082:	463a      	movcs	r2, r7
 8033084:	f7ff f868 	bl	8032158 <memcpy>
 8033088:	4631      	mov	r1, r6
 803308a:	4640      	mov	r0, r8
 803308c:	f7ff f8aa 	bl	80321e4 <_free_r>
 8033090:	e7e1      	b.n	8033056 <_realloc_r+0x1e>
 8033092:	4635      	mov	r5, r6
 8033094:	e7df      	b.n	8033056 <_realloc_r+0x1e>

08033096 <__ssputs_r>:
 8033096:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 803309a:	688e      	ldr	r6, [r1, #8]
 803309c:	429e      	cmp	r6, r3
 803309e:	4682      	mov	sl, r0
 80330a0:	460c      	mov	r4, r1
 80330a2:	4690      	mov	r8, r2
 80330a4:	461f      	mov	r7, r3
 80330a6:	d838      	bhi.n	803311a <__ssputs_r+0x84>
 80330a8:	898a      	ldrh	r2, [r1, #12]
 80330aa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80330ae:	d032      	beq.n	8033116 <__ssputs_r+0x80>
 80330b0:	6825      	ldr	r5, [r4, #0]
 80330b2:	6909      	ldr	r1, [r1, #16]
 80330b4:	eba5 0901 	sub.w	r9, r5, r1
 80330b8:	6965      	ldr	r5, [r4, #20]
 80330ba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80330be:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80330c2:	3301      	adds	r3, #1
 80330c4:	444b      	add	r3, r9
 80330c6:	106d      	asrs	r5, r5, #1
 80330c8:	429d      	cmp	r5, r3
 80330ca:	bf38      	it	cc
 80330cc:	461d      	movcc	r5, r3
 80330ce:	0553      	lsls	r3, r2, #21
 80330d0:	d531      	bpl.n	8033136 <__ssputs_r+0xa0>
 80330d2:	4629      	mov	r1, r5
 80330d4:	f7ff f8f2 	bl	80322bc <_malloc_r>
 80330d8:	4606      	mov	r6, r0
 80330da:	b950      	cbnz	r0, 80330f2 <__ssputs_r+0x5c>
 80330dc:	230c      	movs	r3, #12
 80330de:	f8ca 3000 	str.w	r3, [sl]
 80330e2:	89a3      	ldrh	r3, [r4, #12]
 80330e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80330e8:	81a3      	strh	r3, [r4, #12]
 80330ea:	f04f 30ff 	mov.w	r0, #4294967295
 80330ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80330f2:	6921      	ldr	r1, [r4, #16]
 80330f4:	464a      	mov	r2, r9
 80330f6:	f7ff f82f 	bl	8032158 <memcpy>
 80330fa:	89a3      	ldrh	r3, [r4, #12]
 80330fc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8033100:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8033104:	81a3      	strh	r3, [r4, #12]
 8033106:	6126      	str	r6, [r4, #16]
 8033108:	6165      	str	r5, [r4, #20]
 803310a:	444e      	add	r6, r9
 803310c:	eba5 0509 	sub.w	r5, r5, r9
 8033110:	6026      	str	r6, [r4, #0]
 8033112:	60a5      	str	r5, [r4, #8]
 8033114:	463e      	mov	r6, r7
 8033116:	42be      	cmp	r6, r7
 8033118:	d900      	bls.n	803311c <__ssputs_r+0x86>
 803311a:	463e      	mov	r6, r7
 803311c:	6820      	ldr	r0, [r4, #0]
 803311e:	4632      	mov	r2, r6
 8033120:	4641      	mov	r1, r8
 8033122:	f7ff f827 	bl	8032174 <memmove>
 8033126:	68a3      	ldr	r3, [r4, #8]
 8033128:	1b9b      	subs	r3, r3, r6
 803312a:	60a3      	str	r3, [r4, #8]
 803312c:	6823      	ldr	r3, [r4, #0]
 803312e:	4433      	add	r3, r6
 8033130:	6023      	str	r3, [r4, #0]
 8033132:	2000      	movs	r0, #0
 8033134:	e7db      	b.n	80330ee <__ssputs_r+0x58>
 8033136:	462a      	mov	r2, r5
 8033138:	f7ff ff7e 	bl	8033038 <_realloc_r>
 803313c:	4606      	mov	r6, r0
 803313e:	2800      	cmp	r0, #0
 8033140:	d1e1      	bne.n	8033106 <__ssputs_r+0x70>
 8033142:	6921      	ldr	r1, [r4, #16]
 8033144:	4650      	mov	r0, sl
 8033146:	f7ff f84d 	bl	80321e4 <_free_r>
 803314a:	e7c7      	b.n	80330dc <__ssputs_r+0x46>

0803314c <_svfiprintf_r>:
 803314c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8033150:	4698      	mov	r8, r3
 8033152:	898b      	ldrh	r3, [r1, #12]
 8033154:	061b      	lsls	r3, r3, #24
 8033156:	b09d      	sub	sp, #116	; 0x74
 8033158:	4607      	mov	r7, r0
 803315a:	460d      	mov	r5, r1
 803315c:	4614      	mov	r4, r2
 803315e:	d50e      	bpl.n	803317e <_svfiprintf_r+0x32>
 8033160:	690b      	ldr	r3, [r1, #16]
 8033162:	b963      	cbnz	r3, 803317e <_svfiprintf_r+0x32>
 8033164:	2140      	movs	r1, #64	; 0x40
 8033166:	f7ff f8a9 	bl	80322bc <_malloc_r>
 803316a:	6028      	str	r0, [r5, #0]
 803316c:	6128      	str	r0, [r5, #16]
 803316e:	b920      	cbnz	r0, 803317a <_svfiprintf_r+0x2e>
 8033170:	230c      	movs	r3, #12
 8033172:	603b      	str	r3, [r7, #0]
 8033174:	f04f 30ff 	mov.w	r0, #4294967295
 8033178:	e0d1      	b.n	803331e <_svfiprintf_r+0x1d2>
 803317a:	2340      	movs	r3, #64	; 0x40
 803317c:	616b      	str	r3, [r5, #20]
 803317e:	2300      	movs	r3, #0
 8033180:	9309      	str	r3, [sp, #36]	; 0x24
 8033182:	2320      	movs	r3, #32
 8033184:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8033188:	f8cd 800c 	str.w	r8, [sp, #12]
 803318c:	2330      	movs	r3, #48	; 0x30
 803318e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8033338 <_svfiprintf_r+0x1ec>
 8033192:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8033196:	f04f 0901 	mov.w	r9, #1
 803319a:	4623      	mov	r3, r4
 803319c:	469a      	mov	sl, r3
 803319e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80331a2:	b10a      	cbz	r2, 80331a8 <_svfiprintf_r+0x5c>
 80331a4:	2a25      	cmp	r2, #37	; 0x25
 80331a6:	d1f9      	bne.n	803319c <_svfiprintf_r+0x50>
 80331a8:	ebba 0b04 	subs.w	fp, sl, r4
 80331ac:	d00b      	beq.n	80331c6 <_svfiprintf_r+0x7a>
 80331ae:	465b      	mov	r3, fp
 80331b0:	4622      	mov	r2, r4
 80331b2:	4629      	mov	r1, r5
 80331b4:	4638      	mov	r0, r7
 80331b6:	f7ff ff6e 	bl	8033096 <__ssputs_r>
 80331ba:	3001      	adds	r0, #1
 80331bc:	f000 80aa 	beq.w	8033314 <_svfiprintf_r+0x1c8>
 80331c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80331c2:	445a      	add	r2, fp
 80331c4:	9209      	str	r2, [sp, #36]	; 0x24
 80331c6:	f89a 3000 	ldrb.w	r3, [sl]
 80331ca:	2b00      	cmp	r3, #0
 80331cc:	f000 80a2 	beq.w	8033314 <_svfiprintf_r+0x1c8>
 80331d0:	2300      	movs	r3, #0
 80331d2:	f04f 32ff 	mov.w	r2, #4294967295
 80331d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80331da:	f10a 0a01 	add.w	sl, sl, #1
 80331de:	9304      	str	r3, [sp, #16]
 80331e0:	9307      	str	r3, [sp, #28]
 80331e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80331e6:	931a      	str	r3, [sp, #104]	; 0x68
 80331e8:	4654      	mov	r4, sl
 80331ea:	2205      	movs	r2, #5
 80331ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80331f0:	4851      	ldr	r0, [pc, #324]	; (8033338 <_svfiprintf_r+0x1ec>)
 80331f2:	f7cc ffed 	bl	80001d0 <memchr>
 80331f6:	9a04      	ldr	r2, [sp, #16]
 80331f8:	b9d8      	cbnz	r0, 8033232 <_svfiprintf_r+0xe6>
 80331fa:	06d0      	lsls	r0, r2, #27
 80331fc:	bf44      	itt	mi
 80331fe:	2320      	movmi	r3, #32
 8033200:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8033204:	0711      	lsls	r1, r2, #28
 8033206:	bf44      	itt	mi
 8033208:	232b      	movmi	r3, #43	; 0x2b
 803320a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 803320e:	f89a 3000 	ldrb.w	r3, [sl]
 8033212:	2b2a      	cmp	r3, #42	; 0x2a
 8033214:	d015      	beq.n	8033242 <_svfiprintf_r+0xf6>
 8033216:	9a07      	ldr	r2, [sp, #28]
 8033218:	4654      	mov	r4, sl
 803321a:	2000      	movs	r0, #0
 803321c:	f04f 0c0a 	mov.w	ip, #10
 8033220:	4621      	mov	r1, r4
 8033222:	f811 3b01 	ldrb.w	r3, [r1], #1
 8033226:	3b30      	subs	r3, #48	; 0x30
 8033228:	2b09      	cmp	r3, #9
 803322a:	d94e      	bls.n	80332ca <_svfiprintf_r+0x17e>
 803322c:	b1b0      	cbz	r0, 803325c <_svfiprintf_r+0x110>
 803322e:	9207      	str	r2, [sp, #28]
 8033230:	e014      	b.n	803325c <_svfiprintf_r+0x110>
 8033232:	eba0 0308 	sub.w	r3, r0, r8
 8033236:	fa09 f303 	lsl.w	r3, r9, r3
 803323a:	4313      	orrs	r3, r2
 803323c:	9304      	str	r3, [sp, #16]
 803323e:	46a2      	mov	sl, r4
 8033240:	e7d2      	b.n	80331e8 <_svfiprintf_r+0x9c>
 8033242:	9b03      	ldr	r3, [sp, #12]
 8033244:	1d19      	adds	r1, r3, #4
 8033246:	681b      	ldr	r3, [r3, #0]
 8033248:	9103      	str	r1, [sp, #12]
 803324a:	2b00      	cmp	r3, #0
 803324c:	bfbb      	ittet	lt
 803324e:	425b      	neglt	r3, r3
 8033250:	f042 0202 	orrlt.w	r2, r2, #2
 8033254:	9307      	strge	r3, [sp, #28]
 8033256:	9307      	strlt	r3, [sp, #28]
 8033258:	bfb8      	it	lt
 803325a:	9204      	strlt	r2, [sp, #16]
 803325c:	7823      	ldrb	r3, [r4, #0]
 803325e:	2b2e      	cmp	r3, #46	; 0x2e
 8033260:	d10c      	bne.n	803327c <_svfiprintf_r+0x130>
 8033262:	7863      	ldrb	r3, [r4, #1]
 8033264:	2b2a      	cmp	r3, #42	; 0x2a
 8033266:	d135      	bne.n	80332d4 <_svfiprintf_r+0x188>
 8033268:	9b03      	ldr	r3, [sp, #12]
 803326a:	1d1a      	adds	r2, r3, #4
 803326c:	681b      	ldr	r3, [r3, #0]
 803326e:	9203      	str	r2, [sp, #12]
 8033270:	2b00      	cmp	r3, #0
 8033272:	bfb8      	it	lt
 8033274:	f04f 33ff 	movlt.w	r3, #4294967295
 8033278:	3402      	adds	r4, #2
 803327a:	9305      	str	r3, [sp, #20]
 803327c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8033348 <_svfiprintf_r+0x1fc>
 8033280:	7821      	ldrb	r1, [r4, #0]
 8033282:	2203      	movs	r2, #3
 8033284:	4650      	mov	r0, sl
 8033286:	f7cc ffa3 	bl	80001d0 <memchr>
 803328a:	b140      	cbz	r0, 803329e <_svfiprintf_r+0x152>
 803328c:	2340      	movs	r3, #64	; 0x40
 803328e:	eba0 000a 	sub.w	r0, r0, sl
 8033292:	fa03 f000 	lsl.w	r0, r3, r0
 8033296:	9b04      	ldr	r3, [sp, #16]
 8033298:	4303      	orrs	r3, r0
 803329a:	3401      	adds	r4, #1
 803329c:	9304      	str	r3, [sp, #16]
 803329e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80332a2:	4826      	ldr	r0, [pc, #152]	; (803333c <_svfiprintf_r+0x1f0>)
 80332a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80332a8:	2206      	movs	r2, #6
 80332aa:	f7cc ff91 	bl	80001d0 <memchr>
 80332ae:	2800      	cmp	r0, #0
 80332b0:	d038      	beq.n	8033324 <_svfiprintf_r+0x1d8>
 80332b2:	4b23      	ldr	r3, [pc, #140]	; (8033340 <_svfiprintf_r+0x1f4>)
 80332b4:	bb1b      	cbnz	r3, 80332fe <_svfiprintf_r+0x1b2>
 80332b6:	9b03      	ldr	r3, [sp, #12]
 80332b8:	3307      	adds	r3, #7
 80332ba:	f023 0307 	bic.w	r3, r3, #7
 80332be:	3308      	adds	r3, #8
 80332c0:	9303      	str	r3, [sp, #12]
 80332c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80332c4:	4433      	add	r3, r6
 80332c6:	9309      	str	r3, [sp, #36]	; 0x24
 80332c8:	e767      	b.n	803319a <_svfiprintf_r+0x4e>
 80332ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80332ce:	460c      	mov	r4, r1
 80332d0:	2001      	movs	r0, #1
 80332d2:	e7a5      	b.n	8033220 <_svfiprintf_r+0xd4>
 80332d4:	2300      	movs	r3, #0
 80332d6:	3401      	adds	r4, #1
 80332d8:	9305      	str	r3, [sp, #20]
 80332da:	4619      	mov	r1, r3
 80332dc:	f04f 0c0a 	mov.w	ip, #10
 80332e0:	4620      	mov	r0, r4
 80332e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80332e6:	3a30      	subs	r2, #48	; 0x30
 80332e8:	2a09      	cmp	r2, #9
 80332ea:	d903      	bls.n	80332f4 <_svfiprintf_r+0x1a8>
 80332ec:	2b00      	cmp	r3, #0
 80332ee:	d0c5      	beq.n	803327c <_svfiprintf_r+0x130>
 80332f0:	9105      	str	r1, [sp, #20]
 80332f2:	e7c3      	b.n	803327c <_svfiprintf_r+0x130>
 80332f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80332f8:	4604      	mov	r4, r0
 80332fa:	2301      	movs	r3, #1
 80332fc:	e7f0      	b.n	80332e0 <_svfiprintf_r+0x194>
 80332fe:	ab03      	add	r3, sp, #12
 8033300:	9300      	str	r3, [sp, #0]
 8033302:	462a      	mov	r2, r5
 8033304:	4b0f      	ldr	r3, [pc, #60]	; (8033344 <_svfiprintf_r+0x1f8>)
 8033306:	a904      	add	r1, sp, #16
 8033308:	4638      	mov	r0, r7
 803330a:	f3af 8000 	nop.w
 803330e:	1c42      	adds	r2, r0, #1
 8033310:	4606      	mov	r6, r0
 8033312:	d1d6      	bne.n	80332c2 <_svfiprintf_r+0x176>
 8033314:	89ab      	ldrh	r3, [r5, #12]
 8033316:	065b      	lsls	r3, r3, #25
 8033318:	f53f af2c 	bmi.w	8033174 <_svfiprintf_r+0x28>
 803331c:	9809      	ldr	r0, [sp, #36]	; 0x24
 803331e:	b01d      	add	sp, #116	; 0x74
 8033320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8033324:	ab03      	add	r3, sp, #12
 8033326:	9300      	str	r3, [sp, #0]
 8033328:	462a      	mov	r2, r5
 803332a:	4b06      	ldr	r3, [pc, #24]	; (8033344 <_svfiprintf_r+0x1f8>)
 803332c:	a904      	add	r1, sp, #16
 803332e:	4638      	mov	r0, r7
 8033330:	f7ff fa00 	bl	8032734 <_printf_i>
 8033334:	e7eb      	b.n	803330e <_svfiprintf_r+0x1c2>
 8033336:	bf00      	nop
 8033338:	080381c0 	.word	0x080381c0
 803333c:	080381ca 	.word	0x080381ca
 8033340:	00000000 	.word	0x00000000
 8033344:	08033097 	.word	0x08033097
 8033348:	080381c6 	.word	0x080381c6

0803334c <__sread>:
 803334c:	b510      	push	{r4, lr}
 803334e:	460c      	mov	r4, r1
 8033350:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8033354:	f000 f89c 	bl	8033490 <_read_r>
 8033358:	2800      	cmp	r0, #0
 803335a:	bfab      	itete	ge
 803335c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 803335e:	89a3      	ldrhlt	r3, [r4, #12]
 8033360:	181b      	addge	r3, r3, r0
 8033362:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8033366:	bfac      	ite	ge
 8033368:	6563      	strge	r3, [r4, #84]	; 0x54
 803336a:	81a3      	strhlt	r3, [r4, #12]
 803336c:	bd10      	pop	{r4, pc}

0803336e <__swrite>:
 803336e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8033372:	461f      	mov	r7, r3
 8033374:	898b      	ldrh	r3, [r1, #12]
 8033376:	05db      	lsls	r3, r3, #23
 8033378:	4605      	mov	r5, r0
 803337a:	460c      	mov	r4, r1
 803337c:	4616      	mov	r6, r2
 803337e:	d505      	bpl.n	803338c <__swrite+0x1e>
 8033380:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8033384:	2302      	movs	r3, #2
 8033386:	2200      	movs	r2, #0
 8033388:	f000 f868 	bl	803345c <_lseek_r>
 803338c:	89a3      	ldrh	r3, [r4, #12]
 803338e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8033392:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8033396:	81a3      	strh	r3, [r4, #12]
 8033398:	4632      	mov	r2, r6
 803339a:	463b      	mov	r3, r7
 803339c:	4628      	mov	r0, r5
 803339e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80333a2:	f000 b817 	b.w	80333d4 <_write_r>

080333a6 <__sseek>:
 80333a6:	b510      	push	{r4, lr}
 80333a8:	460c      	mov	r4, r1
 80333aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80333ae:	f000 f855 	bl	803345c <_lseek_r>
 80333b2:	1c43      	adds	r3, r0, #1
 80333b4:	89a3      	ldrh	r3, [r4, #12]
 80333b6:	bf15      	itete	ne
 80333b8:	6560      	strne	r0, [r4, #84]	; 0x54
 80333ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80333be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80333c2:	81a3      	strheq	r3, [r4, #12]
 80333c4:	bf18      	it	ne
 80333c6:	81a3      	strhne	r3, [r4, #12]
 80333c8:	bd10      	pop	{r4, pc}

080333ca <__sclose>:
 80333ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80333ce:	f000 b813 	b.w	80333f8 <_close_r>
	...

080333d4 <_write_r>:
 80333d4:	b538      	push	{r3, r4, r5, lr}
 80333d6:	4d07      	ldr	r5, [pc, #28]	; (80333f4 <_write_r+0x20>)
 80333d8:	4604      	mov	r4, r0
 80333da:	4608      	mov	r0, r1
 80333dc:	4611      	mov	r1, r2
 80333de:	2200      	movs	r2, #0
 80333e0:	602a      	str	r2, [r5, #0]
 80333e2:	461a      	mov	r2, r3
 80333e4:	f7d4 f963 	bl	80076ae <_write>
 80333e8:	1c43      	adds	r3, r0, #1
 80333ea:	d102      	bne.n	80333f2 <_write_r+0x1e>
 80333ec:	682b      	ldr	r3, [r5, #0]
 80333ee:	b103      	cbz	r3, 80333f2 <_write_r+0x1e>
 80333f0:	6023      	str	r3, [r4, #0]
 80333f2:	bd38      	pop	{r3, r4, r5, pc}
 80333f4:	200024d0 	.word	0x200024d0

080333f8 <_close_r>:
 80333f8:	b538      	push	{r3, r4, r5, lr}
 80333fa:	4d06      	ldr	r5, [pc, #24]	; (8033414 <_close_r+0x1c>)
 80333fc:	2300      	movs	r3, #0
 80333fe:	4604      	mov	r4, r0
 8033400:	4608      	mov	r0, r1
 8033402:	602b      	str	r3, [r5, #0]
 8033404:	f7d4 f96f 	bl	80076e6 <_close>
 8033408:	1c43      	adds	r3, r0, #1
 803340a:	d102      	bne.n	8033412 <_close_r+0x1a>
 803340c:	682b      	ldr	r3, [r5, #0]
 803340e:	b103      	cbz	r3, 8033412 <_close_r+0x1a>
 8033410:	6023      	str	r3, [r4, #0]
 8033412:	bd38      	pop	{r3, r4, r5, pc}
 8033414:	200024d0 	.word	0x200024d0

08033418 <_fstat_r>:
 8033418:	b538      	push	{r3, r4, r5, lr}
 803341a:	4d07      	ldr	r5, [pc, #28]	; (8033438 <_fstat_r+0x20>)
 803341c:	2300      	movs	r3, #0
 803341e:	4604      	mov	r4, r0
 8033420:	4608      	mov	r0, r1
 8033422:	4611      	mov	r1, r2
 8033424:	602b      	str	r3, [r5, #0]
 8033426:	f7d4 f96a 	bl	80076fe <_fstat>
 803342a:	1c43      	adds	r3, r0, #1
 803342c:	d102      	bne.n	8033434 <_fstat_r+0x1c>
 803342e:	682b      	ldr	r3, [r5, #0]
 8033430:	b103      	cbz	r3, 8033434 <_fstat_r+0x1c>
 8033432:	6023      	str	r3, [r4, #0]
 8033434:	bd38      	pop	{r3, r4, r5, pc}
 8033436:	bf00      	nop
 8033438:	200024d0 	.word	0x200024d0

0803343c <_isatty_r>:
 803343c:	b538      	push	{r3, r4, r5, lr}
 803343e:	4d06      	ldr	r5, [pc, #24]	; (8033458 <_isatty_r+0x1c>)
 8033440:	2300      	movs	r3, #0
 8033442:	4604      	mov	r4, r0
 8033444:	4608      	mov	r0, r1
 8033446:	602b      	str	r3, [r5, #0]
 8033448:	f7d4 f969 	bl	800771e <_isatty>
 803344c:	1c43      	adds	r3, r0, #1
 803344e:	d102      	bne.n	8033456 <_isatty_r+0x1a>
 8033450:	682b      	ldr	r3, [r5, #0]
 8033452:	b103      	cbz	r3, 8033456 <_isatty_r+0x1a>
 8033454:	6023      	str	r3, [r4, #0]
 8033456:	bd38      	pop	{r3, r4, r5, pc}
 8033458:	200024d0 	.word	0x200024d0

0803345c <_lseek_r>:
 803345c:	b538      	push	{r3, r4, r5, lr}
 803345e:	4d07      	ldr	r5, [pc, #28]	; (803347c <_lseek_r+0x20>)
 8033460:	4604      	mov	r4, r0
 8033462:	4608      	mov	r0, r1
 8033464:	4611      	mov	r1, r2
 8033466:	2200      	movs	r2, #0
 8033468:	602a      	str	r2, [r5, #0]
 803346a:	461a      	mov	r2, r3
 803346c:	f7d4 f962 	bl	8007734 <_lseek>
 8033470:	1c43      	adds	r3, r0, #1
 8033472:	d102      	bne.n	803347a <_lseek_r+0x1e>
 8033474:	682b      	ldr	r3, [r5, #0]
 8033476:	b103      	cbz	r3, 803347a <_lseek_r+0x1e>
 8033478:	6023      	str	r3, [r4, #0]
 803347a:	bd38      	pop	{r3, r4, r5, pc}
 803347c:	200024d0 	.word	0x200024d0

08033480 <_malloc_usable_size_r>:
 8033480:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8033484:	1f18      	subs	r0, r3, #4
 8033486:	2b00      	cmp	r3, #0
 8033488:	bfbc      	itt	lt
 803348a:	580b      	ldrlt	r3, [r1, r0]
 803348c:	18c0      	addlt	r0, r0, r3
 803348e:	4770      	bx	lr

08033490 <_read_r>:
 8033490:	b538      	push	{r3, r4, r5, lr}
 8033492:	4d07      	ldr	r5, [pc, #28]	; (80334b0 <_read_r+0x20>)
 8033494:	4604      	mov	r4, r0
 8033496:	4608      	mov	r0, r1
 8033498:	4611      	mov	r1, r2
 803349a:	2200      	movs	r2, #0
 803349c:	602a      	str	r2, [r5, #0]
 803349e:	461a      	mov	r2, r3
 80334a0:	f7d4 f8e8 	bl	8007674 <_read>
 80334a4:	1c43      	adds	r3, r0, #1
 80334a6:	d102      	bne.n	80334ae <_read_r+0x1e>
 80334a8:	682b      	ldr	r3, [r5, #0]
 80334aa:	b103      	cbz	r3, 80334ae <_read_r+0x1e>
 80334ac:	6023      	str	r3, [r4, #0]
 80334ae:	bd38      	pop	{r3, r4, r5, pc}
 80334b0:	200024d0 	.word	0x200024d0

080334b4 <_init>:
 80334b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80334b6:	bf00      	nop
 80334b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80334ba:	bc08      	pop	{r3}
 80334bc:	469e      	mov	lr, r3
 80334be:	4770      	bx	lr

080334c0 <_fini>:
 80334c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80334c2:	bf00      	nop
 80334c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80334c6:	bc08      	pop	{r3}
 80334c8:	469e      	mov	lr, r3
 80334ca:	4770      	bx	lr
