
APPSC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005494  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000810  08005624  08005624  00015624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e34  08005e34  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08005e34  08005e34  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005e34  08005e34  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e34  08005e34  00015e34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e38  08005e38  00015e38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005e3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          000006a8  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000071c  2000071c  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016442  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000033cd  00000000  00000000  000364e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001390  00000000  00000000  000398b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000011f8  00000000  00000000  0003ac48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020319  00000000  00000000  0003be40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018da1  00000000  00000000  0005c159  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bb01c  00000000  00000000  00074efa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012ff16  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005580  00000000  00000000  0012ff68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800560c 	.word	0x0800560c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	0800560c 	.word	0x0800560c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b08c      	sub	sp, #48	; 0x30
 8000274:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000276:	f107 031c 	add.w	r3, r7, #28
 800027a:	2200      	movs	r2, #0
 800027c:	601a      	str	r2, [r3, #0]
 800027e:	605a      	str	r2, [r3, #4]
 8000280:	609a      	str	r2, [r3, #8]
 8000282:	60da      	str	r2, [r3, #12]
 8000284:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000286:	4b57      	ldr	r3, [pc, #348]	; (80003e4 <MX_GPIO_Init+0x174>)
 8000288:	695b      	ldr	r3, [r3, #20]
 800028a:	4a56      	ldr	r2, [pc, #344]	; (80003e4 <MX_GPIO_Init+0x174>)
 800028c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000290:	6153      	str	r3, [r2, #20]
 8000292:	4b54      	ldr	r3, [pc, #336]	; (80003e4 <MX_GPIO_Init+0x174>)
 8000294:	695b      	ldr	r3, [r3, #20]
 8000296:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800029a:	61bb      	str	r3, [r7, #24]
 800029c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800029e:	4b51      	ldr	r3, [pc, #324]	; (80003e4 <MX_GPIO_Init+0x174>)
 80002a0:	695b      	ldr	r3, [r3, #20]
 80002a2:	4a50      	ldr	r2, [pc, #320]	; (80003e4 <MX_GPIO_Init+0x174>)
 80002a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80002a8:	6153      	str	r3, [r2, #20]
 80002aa:	4b4e      	ldr	r3, [pc, #312]	; (80003e4 <MX_GPIO_Init+0x174>)
 80002ac:	695b      	ldr	r3, [r3, #20]
 80002ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80002b2:	617b      	str	r3, [r7, #20]
 80002b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80002b6:	4b4b      	ldr	r3, [pc, #300]	; (80003e4 <MX_GPIO_Init+0x174>)
 80002b8:	695b      	ldr	r3, [r3, #20]
 80002ba:	4a4a      	ldr	r2, [pc, #296]	; (80003e4 <MX_GPIO_Init+0x174>)
 80002bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80002c0:	6153      	str	r3, [r2, #20]
 80002c2:	4b48      	ldr	r3, [pc, #288]	; (80003e4 <MX_GPIO_Init+0x174>)
 80002c4:	695b      	ldr	r3, [r3, #20]
 80002c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80002ca:	613b      	str	r3, [r7, #16]
 80002cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002ce:	4b45      	ldr	r3, [pc, #276]	; (80003e4 <MX_GPIO_Init+0x174>)
 80002d0:	695b      	ldr	r3, [r3, #20]
 80002d2:	4a44      	ldr	r2, [pc, #272]	; (80003e4 <MX_GPIO_Init+0x174>)
 80002d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002d8:	6153      	str	r3, [r2, #20]
 80002da:	4b42      	ldr	r3, [pc, #264]	; (80003e4 <MX_GPIO_Init+0x174>)
 80002dc:	695b      	ldr	r3, [r3, #20]
 80002de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002e2:	60fb      	str	r3, [r7, #12]
 80002e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002e6:	4b3f      	ldr	r3, [pc, #252]	; (80003e4 <MX_GPIO_Init+0x174>)
 80002e8:	695b      	ldr	r3, [r3, #20]
 80002ea:	4a3e      	ldr	r2, [pc, #248]	; (80003e4 <MX_GPIO_Init+0x174>)
 80002ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80002f0:	6153      	str	r3, [r2, #20]
 80002f2:	4b3c      	ldr	r3, [pc, #240]	; (80003e4 <MX_GPIO_Init+0x174>)
 80002f4:	695b      	ldr	r3, [r3, #20]
 80002f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80002fa:	60bb      	str	r3, [r7, #8]
 80002fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002fe:	4b39      	ldr	r3, [pc, #228]	; (80003e4 <MX_GPIO_Init+0x174>)
 8000300:	695b      	ldr	r3, [r3, #20]
 8000302:	4a38      	ldr	r2, [pc, #224]	; (80003e4 <MX_GPIO_Init+0x174>)
 8000304:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000308:	6153      	str	r3, [r2, #20]
 800030a:	4b36      	ldr	r3, [pc, #216]	; (80003e4 <MX_GPIO_Init+0x174>)
 800030c:	695b      	ldr	r3, [r3, #20]
 800030e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000312:	607b      	str	r3, [r7, #4]
 8000314:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000316:	2200      	movs	r2, #0
 8000318:	f64f 7108 	movw	r1, #65288	; 0xff08
 800031c:	4832      	ldr	r0, [pc, #200]	; (80003e8 <MX_GPIO_Init+0x178>)
 800031e:	f001 fe2f 	bl	8001f80 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin|LCD_DC_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 8000322:	2200      	movs	r2, #0
 8000324:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8000328:	4830      	ldr	r0, [pc, #192]	; (80003ec <MX_GPIO_Init+0x17c>)
 800032a:	f001 fe29 	bl	8001f80 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 800032e:	2337      	movs	r3, #55	; 0x37
 8000330:	61fb      	str	r3, [r7, #28]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000332:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000336:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000338:	2300      	movs	r3, #0
 800033a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800033c:	f107 031c 	add.w	r3, r7, #28
 8000340:	4619      	mov	r1, r3
 8000342:	4829      	ldr	r0, [pc, #164]	; (80003e8 <MX_GPIO_Init+0x178>)
 8000344:	f001 fc8a 	bl	8001c5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000348:	f64f 7308 	movw	r3, #65288	; 0xff08
 800034c:	61fb      	str	r3, [r7, #28]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800034e:	2301      	movs	r3, #1
 8000350:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000352:	2300      	movs	r3, #0
 8000354:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000356:	2300      	movs	r3, #0
 8000358:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800035a:	f107 031c 	add.w	r3, r7, #28
 800035e:	4619      	mov	r1, r3
 8000360:	4821      	ldr	r0, [pc, #132]	; (80003e8 <MX_GPIO_Init+0x178>)
 8000362:	f001 fc7b 	bl	8001c5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000366:	2301      	movs	r3, #1
 8000368:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800036a:	2300      	movs	r3, #0
 800036c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800036e:	2300      	movs	r3, #0
 8000370:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000372:	f107 031c 	add.w	r3, r7, #28
 8000376:	4619      	mov	r1, r3
 8000378:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800037c:	f001 fc6e 	bl	8001c5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_DC_Pin|LCD_RST_Pin;
 8000380:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000384:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000386:	2301      	movs	r3, #1
 8000388:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800038a:	2300      	movs	r3, #0
 800038c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800038e:	2300      	movs	r3, #0
 8000390:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000392:	f107 031c 	add.w	r3, r7, #28
 8000396:	4619      	mov	r1, r3
 8000398:	4814      	ldr	r0, [pc, #80]	; (80003ec <MX_GPIO_Init+0x17c>)
 800039a:	f001 fc5f 	bl	8001c5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = OPPOSITEHIT_BTN_Pin|TABLEHIT_BTN_Pin;
 800039e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80003a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80003a4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80003a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80003aa:	2301      	movs	r3, #1
 80003ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80003ae:	f107 031c 	add.w	r3, r7, #28
 80003b2:	4619      	mov	r1, r3
 80003b4:	480e      	ldr	r0, [pc, #56]	; (80003f0 <MX_GPIO_Init+0x180>)
 80003b6:	f001 fc51 	bl	8001c5c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80003ba:	2200      	movs	r2, #0
 80003bc:	2100      	movs	r1, #0
 80003be:	2017      	movs	r0, #23
 80003c0:	f001 fc15 	bl	8001bee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80003c4:	2017      	movs	r0, #23
 80003c6:	f001 fc2e 	bl	8001c26 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80003ca:	2200      	movs	r2, #0
 80003cc:	2100      	movs	r1, #0
 80003ce:	2028      	movs	r0, #40	; 0x28
 80003d0:	f001 fc0d 	bl	8001bee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80003d4:	2028      	movs	r0, #40	; 0x28
 80003d6:	f001 fc26 	bl	8001c26 <HAL_NVIC_EnableIRQ>

}
 80003da:	bf00      	nop
 80003dc:	3730      	adds	r7, #48	; 0x30
 80003de:	46bd      	mov	sp, r7
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	bf00      	nop
 80003e4:	40021000 	.word	0x40021000
 80003e8:	48001000 	.word	0x48001000
 80003ec:	48000400 	.word	0x48000400
 80003f0:	48000c00 	.word	0x48000c00

080003f4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003f8:	4b1b      	ldr	r3, [pc, #108]	; (8000468 <MX_I2C1_Init+0x74>)
 80003fa:	4a1c      	ldr	r2, [pc, #112]	; (800046c <MX_I2C1_Init+0x78>)
 80003fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80003fe:	4b1a      	ldr	r3, [pc, #104]	; (8000468 <MX_I2C1_Init+0x74>)
 8000400:	4a1b      	ldr	r2, [pc, #108]	; (8000470 <MX_I2C1_Init+0x7c>)
 8000402:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000404:	4b18      	ldr	r3, [pc, #96]	; (8000468 <MX_I2C1_Init+0x74>)
 8000406:	2200      	movs	r2, #0
 8000408:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800040a:	4b17      	ldr	r3, [pc, #92]	; (8000468 <MX_I2C1_Init+0x74>)
 800040c:	2201      	movs	r2, #1
 800040e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000410:	4b15      	ldr	r3, [pc, #84]	; (8000468 <MX_I2C1_Init+0x74>)
 8000412:	2200      	movs	r2, #0
 8000414:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000416:	4b14      	ldr	r3, [pc, #80]	; (8000468 <MX_I2C1_Init+0x74>)
 8000418:	2200      	movs	r2, #0
 800041a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800041c:	4b12      	ldr	r3, [pc, #72]	; (8000468 <MX_I2C1_Init+0x74>)
 800041e:	2200      	movs	r2, #0
 8000420:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000422:	4b11      	ldr	r3, [pc, #68]	; (8000468 <MX_I2C1_Init+0x74>)
 8000424:	2200      	movs	r2, #0
 8000426:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000428:	4b0f      	ldr	r3, [pc, #60]	; (8000468 <MX_I2C1_Init+0x74>)
 800042a:	2200      	movs	r2, #0
 800042c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800042e:	480e      	ldr	r0, [pc, #56]	; (8000468 <MX_I2C1_Init+0x74>)
 8000430:	f001 fdd6 	bl	8001fe0 <HAL_I2C_Init>
 8000434:	4603      	mov	r3, r0
 8000436:	2b00      	cmp	r3, #0
 8000438:	d001      	beq.n	800043e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800043a:	f000 ff8f 	bl	800135c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800043e:	2100      	movs	r1, #0
 8000440:	4809      	ldr	r0, [pc, #36]	; (8000468 <MX_I2C1_Init+0x74>)
 8000442:	f001 fe5c 	bl	80020fe <HAL_I2CEx_ConfigAnalogFilter>
 8000446:	4603      	mov	r3, r0
 8000448:	2b00      	cmp	r3, #0
 800044a:	d001      	beq.n	8000450 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800044c:	f000 ff86 	bl	800135c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000450:	2100      	movs	r1, #0
 8000452:	4805      	ldr	r0, [pc, #20]	; (8000468 <MX_I2C1_Init+0x74>)
 8000454:	f001 fe9e 	bl	8002194 <HAL_I2CEx_ConfigDigitalFilter>
 8000458:	4603      	mov	r3, r0
 800045a:	2b00      	cmp	r3, #0
 800045c:	d001      	beq.n	8000462 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800045e:	f000 ff7d 	bl	800135c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000462:	bf00      	nop
 8000464:	bd80      	pop	{r7, pc}
 8000466:	bf00      	nop
 8000468:	20000090 	.word	0x20000090
 800046c:	40005400 	.word	0x40005400
 8000470:	2000090e 	.word	0x2000090e

08000474 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b08a      	sub	sp, #40	; 0x28
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800047c:	f107 0314 	add.w	r3, r7, #20
 8000480:	2200      	movs	r2, #0
 8000482:	601a      	str	r2, [r3, #0]
 8000484:	605a      	str	r2, [r3, #4]
 8000486:	609a      	str	r2, [r3, #8]
 8000488:	60da      	str	r2, [r3, #12]
 800048a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	4a17      	ldr	r2, [pc, #92]	; (80004f0 <HAL_I2C_MspInit+0x7c>)
 8000492:	4293      	cmp	r3, r2
 8000494:	d127      	bne.n	80004e6 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000496:	4b17      	ldr	r3, [pc, #92]	; (80004f4 <HAL_I2C_MspInit+0x80>)
 8000498:	695b      	ldr	r3, [r3, #20]
 800049a:	4a16      	ldr	r2, [pc, #88]	; (80004f4 <HAL_I2C_MspInit+0x80>)
 800049c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80004a0:	6153      	str	r3, [r2, #20]
 80004a2:	4b14      	ldr	r3, [pc, #80]	; (80004f4 <HAL_I2C_MspInit+0x80>)
 80004a4:	695b      	ldr	r3, [r3, #20]
 80004a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80004aa:	613b      	str	r3, [r7, #16]
 80004ac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80004ae:	23c0      	movs	r3, #192	; 0xc0
 80004b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80004b2:	2312      	movs	r3, #18
 80004b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004b6:	2301      	movs	r3, #1
 80004b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004ba:	2303      	movs	r3, #3
 80004bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80004be:	2304      	movs	r3, #4
 80004c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004c2:	f107 0314 	add.w	r3, r7, #20
 80004c6:	4619      	mov	r1, r3
 80004c8:	480b      	ldr	r0, [pc, #44]	; (80004f8 <HAL_I2C_MspInit+0x84>)
 80004ca:	f001 fbc7 	bl	8001c5c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80004ce:	4b09      	ldr	r3, [pc, #36]	; (80004f4 <HAL_I2C_MspInit+0x80>)
 80004d0:	69db      	ldr	r3, [r3, #28]
 80004d2:	4a08      	ldr	r2, [pc, #32]	; (80004f4 <HAL_I2C_MspInit+0x80>)
 80004d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80004d8:	61d3      	str	r3, [r2, #28]
 80004da:	4b06      	ldr	r3, [pc, #24]	; (80004f4 <HAL_I2C_MspInit+0x80>)
 80004dc:	69db      	ldr	r3, [r3, #28]
 80004de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80004e2:	60fb      	str	r3, [r7, #12]
 80004e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80004e6:	bf00      	nop
 80004e8:	3728      	adds	r7, #40	; 0x28
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	40005400 	.word	0x40005400
 80004f4:	40021000 	.word	0x40021000
 80004f8:	48000400 	.word	0x48000400

080004fc <LCD5110_refresh>:
	LCD5110_canvas_t def_scr;
} LCD5110_display;


inline void LCD5110_refresh(LCD5110_display* lcd_conf)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
	LCD5110_refresh_ll(&lcd_conf->hw_conf);
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	4618      	mov	r0, r3
 8000508:	f000 fbdb 	bl	8000cc2 <LCD5110_refresh_ll>
}
 800050c:	bf00      	nop
 800050e:	3708      	adds	r7, #8
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}

08000514 <LCD5110_set_cursor>:
void LCD5110_wset_cursor(int x, int y, LCD5110_canvas_t* win, LCD5110_display* lcd_conf);
point_t LCD5110_wget_cursor(LCD5110_canvas_t* win, LCD5110_display* lcd_conf);

// Regarding inline -- C also lcd5110.c.
inline void LCD5110_set_cursor(int x, int y, LCD5110_display* lcd_conf)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b084      	sub	sp, #16
 8000518:	af00      	add	r7, sp, #0
 800051a:	60f8      	str	r0, [r7, #12]
 800051c:	60b9      	str	r1, [r7, #8]
 800051e:	607a      	str	r2, [r7, #4]
	LCD5110_wset_cursor(x, y, &lcd_conf->def_scr, lcd_conf);
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	f503 7205 	add.w	r2, r3, #532	; 0x214
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	68b9      	ldr	r1, [r7, #8]
 800052a:	68f8      	ldr	r0, [r7, #12]
 800052c:	f000 f880 	bl	8000630 <LCD5110_wset_cursor>
}
 8000530:	bf00      	nop
 8000532:	3710      	adds	r7, #16
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}

08000538 <LCD5110_clear_scr>:
inline point_t LCD5110_get_cursor(LCD5110_display* lcd_conf)
{
	return LCD5110_wget_cursor(&lcd_conf->def_scr, lcd_conf);
}

inline void LCD5110_clear_scr(LCD5110_display* lcd_conf){
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
	LCD5110_clrscr(&lcd_conf->hw_conf);
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	4618      	mov	r0, r3
 8000544:	f000 f95f 	bl	8000806 <LCD5110_clrscr>
	LCD5110_set_cursor(0, 0, lcd_conf);
 8000548:	687a      	ldr	r2, [r7, #4]
 800054a:	2100      	movs	r1, #0
 800054c:	2000      	movs	r0, #0
 800054e:	f7ff ffe1 	bl	8000514 <LCD5110_set_cursor>
}
 8000552:	bf00      	nop
 8000554:	3708      	adds	r7, #8
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}

0800055a <LCD5110_print>:

void LCD5110_wprint(const char* str, int color,
						LCD5110_canvas_t* win, LCD5110_display* lcd_conf);
int LCD5110_wprintf( LCD5110_display* lcd_conf, int color, LCD5110_canvas_t* win, char *fmt, ...);

inline void LCD5110_print(const char* str, int color, LCD5110_display* lcd_conf){
 800055a:	b580      	push	{r7, lr}
 800055c:	b084      	sub	sp, #16
 800055e:	af00      	add	r7, sp, #0
 8000560:	60f8      	str	r0, [r7, #12]
 8000562:	60b9      	str	r1, [r7, #8]
 8000564:	607a      	str	r2, [r7, #4]
	LCD5110_wprint(str, color, &lcd_conf->def_scr, lcd_conf);
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	f503 7205 	add.w	r2, r3, #532	; 0x214
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	68b9      	ldr	r1, [r7, #8]
 8000570:	68f8      	ldr	r0, [r7, #12]
 8000572:	f000 f893 	bl	800069c <LCD5110_wprint>
}
 8000576:	bf00      	nop
 8000578:	3710      	adds	r7, #16
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
	...

08000580 <LCD5110_wputchar>:
	LCD5110_drawBitmap(px, py, fontpointer + ch * base_font_width,
						base_font_width, base_font_height, !color, &lcd_conf->hw_conf);
}

void LCD5110_wputchar(int px, int py, char ch, int color,
		LCD5110_canvas_t* win, LCD5110_display* lcd_conf) {
 8000580:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000582:	b08b      	sub	sp, #44	; 0x2c
 8000584:	af04      	add	r7, sp, #16
 8000586:	60f8      	str	r0, [r7, #12]
 8000588:	60b9      	str	r1, [r7, #8]
 800058a:	603b      	str	r3, [r7, #0]
 800058c:	4613      	mov	r3, r2
 800058e:	71fb      	strb	r3, [r7, #7]
	if (win->cursor.y < 0 || win->cursor.x < 0)
 8000590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000592:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000596:	2b00      	cmp	r3, #0
 8000598:	db41      	blt.n	800061e <LCD5110_wputchar+0x9e>
 800059a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800059c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	db3c      	blt.n	800061e <LCD5110_wputchar+0x9e>
		return;
	if ( win->cursor.x + base_font_width > win->frame.width ||
 80005a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80005a6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80005aa:	461a      	mov	r2, r3
 80005ac:	2306      	movs	r3, #6
 80005ae:	4413      	add	r3, r2
 80005b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80005b2:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80005b6:	4293      	cmp	r3, r2
 80005b8:	d833      	bhi.n	8000622 <LCD5110_wputchar+0xa2>
		 win->cursor.y + base_font_height > win->frame.height )
 80005ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80005bc:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80005c0:	461a      	mov	r2, r3
 80005c2:	2308      	movs	r3, #8
 80005c4:	4413      	add	r3, r2
 80005c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80005c8:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
	if ( win->cursor.x + base_font_width > win->frame.width ||
 80005cc:	4293      	cmp	r3, r2
 80005ce:	d828      	bhi.n	8000622 <LCD5110_wputchar+0xa2>
		return;
//! TODO: Print part of char
	const unsigned char *fontpointer = base_font;
 80005d0:	4b16      	ldr	r3, [pc, #88]	; (800062c <LCD5110_wputchar+0xac>)
 80005d2:	617b      	str	r3, [r7, #20]
	LCD5110_drawBitmap(px + win->frame.x0, py + win->frame.y0, fontpointer + ch * base_font_width,
 80005d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80005d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005da:	461a      	mov	r2, r3
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	18d0      	adds	r0, r2, r3
 80005e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80005e2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80005e6:	461a      	mov	r2, r3
 80005e8:	68bb      	ldr	r3, [r7, #8]
 80005ea:	18d1      	adds	r1, r2, r3
 80005ec:	79fb      	ldrb	r3, [r7, #7]
 80005ee:	2206      	movs	r2, #6
 80005f0:	fb02 f303 	mul.w	r3, r2, r3
 80005f4:	697a      	ldr	r2, [r7, #20]
 80005f6:	441a      	add	r2, r3
 80005f8:	2306      	movs	r3, #6
 80005fa:	461e      	mov	r6, r3
 80005fc:	2308      	movs	r3, #8
 80005fe:	461c      	mov	r4, r3
 8000600:	683b      	ldr	r3, [r7, #0]
 8000602:	2b00      	cmp	r3, #0
 8000604:	bf0c      	ite	eq
 8000606:	2301      	moveq	r3, #1
 8000608:	2300      	movne	r3, #0
 800060a:	b2db      	uxtb	r3, r3
 800060c:	461d      	mov	r5, r3
 800060e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000610:	9302      	str	r3, [sp, #8]
 8000612:	9501      	str	r5, [sp, #4]
 8000614:	9400      	str	r4, [sp, #0]
 8000616:	4633      	mov	r3, r6
 8000618:	f000 f950 	bl	80008bc <LCD5110_drawBitmap>
 800061c:	e002      	b.n	8000624 <LCD5110_wputchar+0xa4>
		return;
 800061e:	bf00      	nop
 8000620:	e000      	b.n	8000624 <LCD5110_wputchar+0xa4>
		return;
 8000622:	bf00      	nop
						base_font_width, base_font_height, !color, &lcd_conf->hw_conf);
}
 8000624:	371c      	adds	r7, #28
 8000626:	46bd      	mov	sp, r7
 8000628:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800062a:	bf00      	nop
 800062c:	080056c0 	.word	0x080056c0

08000630 <LCD5110_wset_cursor>:
	LCD5110_wclear_str(x, y, len, color, &lcd_conf->def_scr, lcd_conf);
}


void LCD5110_wset_cursor(int x, int y, LCD5110_canvas_t* win, LCD5110_display* lcd_conf)
{
 8000630:	b480      	push	{r7}
 8000632:	b085      	sub	sp, #20
 8000634:	af00      	add	r7, sp, #0
 8000636:	60f8      	str	r0, [r7, #12]
 8000638:	60b9      	str	r1, [r7, #8]
 800063a:	607a      	str	r2, [r7, #4]
 800063c:	603b      	str	r3, [r7, #0]
	win->cursor.x = x;
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	b21a      	sxth	r2, r3
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	811a      	strh	r2, [r3, #8]
	win->cursor.y = y;
 8000646:	68bb      	ldr	r3, [r7, #8]
 8000648:	b21a      	sxth	r2, r3
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	815a      	strh	r2, [r3, #10]
}
 800064e:	bf00      	nop
 8000650:	3714      	adds	r7, #20
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr

0800065a <LCD5110_wendl>:

point_t LCD5110_wget_cursor(LCD5110_canvas_t* win, LCD5110_display* lcd_conf){
	return win->cursor;
}

void LCD5110_wendl(LCD5110_canvas_t* win, LCD5110_display* lcd_conf) {
 800065a:	b580      	push	{r7, lr}
 800065c:	b082      	sub	sp, #8
 800065e:	af00      	add	r7, sp, #0
 8000660:	6078      	str	r0, [r7, #4]
 8000662:	6039      	str	r1, [r7, #0]
	win->cursor.y += base_font_height + 1;
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800066a:	b29a      	uxth	r2, r3
 800066c:	2308      	movs	r3, #8
 800066e:	b29b      	uxth	r3, r3
 8000670:	4413      	add	r3, r2
 8000672:	b29b      	uxth	r3, r3
 8000674:	3301      	adds	r3, #1
 8000676:	b29b      	uxth	r3, r3
 8000678:	b21a      	sxth	r2, r3
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	815a      	strh	r2, [r3, #10]
	win->cursor.x = 2;
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	2202      	movs	r2, #2
 8000682:	811a      	strh	r2, [r3, #8]
	if (win->refresh_on_endl)
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	7b1b      	ldrb	r3, [r3, #12]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d002      	beq.n	8000692 <LCD5110_wendl+0x38>
		LCD5110_refresh(lcd_conf);
 800068c:	6838      	ldr	r0, [r7, #0]
 800068e:	f7ff ff35 	bl	80004fc <LCD5110_refresh>
}
 8000692:	bf00      	nop
 8000694:	3708      	adds	r7, #8
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
	...

0800069c <LCD5110_wprint>:



void LCD5110_wprint(const char* str, int color, LCD5110_canvas_t* win,
		LCD5110_display* lcd_conf) {
 800069c:	b580      	push	{r7, lr}
 800069e:	b086      	sub	sp, #24
 80006a0:	af02      	add	r7, sp, #8
 80006a2:	60f8      	str	r0, [r7, #12]
 80006a4:	60b9      	str	r1, [r7, #8]
 80006a6:	607a      	str	r2, [r7, #4]
 80006a8:	603b      	str	r3, [r7, #0]
	while (*str != 0) {
 80006aa:	e053      	b.n	8000754 <LCD5110_wprint+0xb8>
		if (*str != '\n') {
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	2b0a      	cmp	r3, #10
 80006b2:	d010      	beq.n	80006d6 <LCD5110_wprint+0x3a>
			LCD5110_wputchar(win->cursor.x, win->cursor.y, *str, color, win, lcd_conf);
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80006ba:	4618      	mov	r0, r3
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80006c2:	4619      	mov	r1, r3
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	781a      	ldrb	r2, [r3, #0]
 80006c8:	683b      	ldr	r3, [r7, #0]
 80006ca:	9301      	str	r3, [sp, #4]
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	9300      	str	r3, [sp, #0]
 80006d0:	68bb      	ldr	r3, [r7, #8]
 80006d2:	f7ff ff55 	bl	8000580 <LCD5110_wputchar>
		}
		win->cursor.x += base_font_width;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80006dc:	b29a      	uxth	r2, r3
 80006de:	2306      	movs	r3, #6
 80006e0:	b29b      	uxth	r3, r3
 80006e2:	4413      	add	r3, r2
 80006e4:	b29b      	uxth	r3, r3
 80006e6:	b21a      	sxth	r2, r3
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	811a      	strh	r2, [r3, #8]

		if (((win->cursor.x + base_font_width > win->frame.width ) &&
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80006f2:	461a      	mov	r2, r3
 80006f4:	2306      	movs	r3, #6
 80006f6:	4413      	add	r3, r2
 80006f8:	687a      	ldr	r2, [r7, #4]
 80006fa:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80006fe:	4293      	cmp	r3, r2
 8000700:	d904      	bls.n	800070c <LCD5110_wprint+0x70>
				*(str + 1) != '\n') || *str == '\n')
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	3301      	adds	r3, #1
 8000706:	781b      	ldrb	r3, [r3, #0]
		if (((win->cursor.x + base_font_width > win->frame.width ) &&
 8000708:	2b0a      	cmp	r3, #10
 800070a:	d103      	bne.n	8000714 <LCD5110_wprint+0x78>
				*(str + 1) != '\n') || *str == '\n')
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	2b0a      	cmp	r3, #10
 8000712:	d111      	bne.n	8000738 <LCD5110_wprint+0x9c>
		{
			LCD5110_wendl(win, lcd_conf);
 8000714:	6839      	ldr	r1, [r7, #0]
 8000716:	6878      	ldr	r0, [r7, #4]
 8000718:	f7ff ff9f 	bl	800065a <LCD5110_wendl>
			if( isspace(*(str + 1)) )
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	3301      	adds	r3, #1
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	3301      	adds	r3, #1
 8000724:	4a10      	ldr	r2, [pc, #64]	; (8000768 <LCD5110_wprint+0xcc>)
 8000726:	4413      	add	r3, r2
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	f003 0308 	and.w	r3, r3, #8
 800072e:	2b00      	cmp	r3, #0
 8000730:	d002      	beq.n	8000738 <LCD5110_wprint+0x9c>
				++str;
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	3301      	adds	r3, #1
 8000736:	60fb      	str	r3, [r7, #12]
		}
		if (win->cursor.y + base_font_height > win->frame.height)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800073e:	461a      	mov	r2, r3
 8000740:	2308      	movs	r3, #8
 8000742:	4413      	add	r3, r2
 8000744:	687a      	ldr	r2, [r7, #4]
 8000746:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800074a:	4293      	cmp	r3, r2
 800074c:	d807      	bhi.n	800075e <LCD5110_wprint+0xc2>
			break;
		str++;
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	3301      	adds	r3, #1
 8000752:	60fb      	str	r3, [r7, #12]
	while (*str != 0) {
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d1a7      	bne.n	80006ac <LCD5110_wprint+0x10>

	}
}
 800075c:	e000      	b.n	8000760 <LCD5110_wprint+0xc4>
			break;
 800075e:	bf00      	nop
}
 8000760:	bf00      	nop
 8000762:	3710      	adds	r7, #16
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	08005d00 	.word	0x08005d00

0800076c <LCD5110_printf>:
	return res;
}


int LCD5110_printf( LCD5110_display* lcd_conf, int color, char *fmt, ...)
{
 800076c:	b40c      	push	{r2, r3}
 800076e:	b580      	push	{r7, lr}
 8000770:	b09e      	sub	sp, #120	; 0x78
 8000772:	af00      	add	r7, sp, #0
 8000774:	6078      	str	r0, [r7, #4]
 8000776:	6039      	str	r1, [r7, #0]
	char buf[100];
	int res;

	va_list vargs;
	va_start(vargs, fmt);
 8000778:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800077c:	60fb      	str	r3, [r7, #12]

	res = vsnprintf(buf, sizeof(buf), fmt, vargs);
 800077e:	f107 0010 	add.w	r0, r7, #16
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8000788:	2164      	movs	r1, #100	; 0x64
 800078a:	f004 fae3 	bl	8004d54 <vsniprintf>
 800078e:	6778      	str	r0, [r7, #116]	; 0x74
	LCD5110_print(buf, color, lcd_conf);
 8000790:	f107 0310 	add.w	r3, r7, #16
 8000794:	687a      	ldr	r2, [r7, #4]
 8000796:	6839      	ldr	r1, [r7, #0]
 8000798:	4618      	mov	r0, r3
 800079a:	f7ff fede 	bl	800055a <LCD5110_print>

	if (lcd_conf->def_scr.refresh_on_endl)
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d002      	beq.n	80007ae <LCD5110_printf+0x42>
		LCD5110_refresh(lcd_conf);
 80007a8:	6878      	ldr	r0, [r7, #4]
 80007aa:	f7ff fea7 	bl	80004fc <LCD5110_refresh>

	va_end(vargs);

	return res;
 80007ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
 80007b0:	4618      	mov	r0, r3
 80007b2:	3778      	adds	r7, #120	; 0x78
 80007b4:	46bd      	mov	sp, r7
 80007b6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80007ba:	b002      	add	sp, #8
 80007bc:	4770      	bx	lr

080007be <xy_to_pix>:
	unsigned int adr;
	unsigned char mask;
} pix_coord;

static inline pix_coord xy_to_pix(int x, int y)
{
 80007be:	b480      	push	{r7}
 80007c0:	b087      	sub	sp, #28
 80007c2:	af00      	add	r7, sp, #0
 80007c4:	60f8      	str	r0, [r7, #12]
 80007c6:	60b9      	str	r1, [r7, #8]
 80007c8:	607a      	str	r2, [r7, #4]
	pix_coord res;
	res.adr = (y >> 3) * LCD_WIDTH + x;
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	10db      	asrs	r3, r3, #3
 80007ce:	2254      	movs	r2, #84	; 0x54
 80007d0:	fb03 f202 	mul.w	r2, r3, r2
 80007d4:	68bb      	ldr	r3, [r7, #8]
 80007d6:	4413      	add	r3, r2
 80007d8:	613b      	str	r3, [r7, #16]
	res.mask = (1 << (y & 0x07));
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	f003 0307 	and.w	r3, r3, #7
 80007e0:	2201      	movs	r2, #1
 80007e2:	fa02 f303 	lsl.w	r3, r2, r3
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	753b      	strb	r3, [r7, #20]

	return res;
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	461a      	mov	r2, r3
 80007ee:	f107 0310 	add.w	r3, r7, #16
 80007f2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80007f6:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80007fa:	68f8      	ldr	r0, [r7, #12]
 80007fc:	371c      	adds	r7, #28
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr

08000806 <LCD5110_clrscr>:

void LCD5110_clrscr(LCD5110_conf* lcd_conf) {
 8000806:	b480      	push	{r7}
 8000808:	b085      	sub	sp, #20
 800080a:	af00      	add	r7, sp, #0
 800080c:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < LCD5110_BUFFER_SIZE; ++i) {
 800080e:	2300      	movs	r3, #0
 8000810:	60fb      	str	r3, [r7, #12]
 8000812:	e008      	b.n	8000826 <LCD5110_clrscr+0x20>
		lcd_conf->video_buffer[i] = 0;
 8000814:	687a      	ldr	r2, [r7, #4]
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	4413      	add	r3, r2
 800081a:	331c      	adds	r3, #28
 800081c:	2200      	movs	r2, #0
 800081e:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < LCD5110_BUFFER_SIZE; ++i) {
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	3301      	adds	r3, #1
 8000824:	60fb      	str	r3, [r7, #12]
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 800082c:	dbf2      	blt.n	8000814 <LCD5110_clrscr+0xe>
	}
}
 800082e:	bf00      	nop
 8000830:	bf00      	nop
 8000832:	3714      	adds	r7, #20
 8000834:	46bd      	mov	sp, r7
 8000836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083a:	4770      	bx	lr

0800083c <LCD5110_putpix>:
	for (int i = 0; i < LCD5110_BUFFER_SIZE; ++i) {
		lcd_conf->video_buffer[i] = 0xFF;
	}
}

void LCD5110_putpix(int x, int y, int color, LCD5110_conf* lcd_conf) {
 800083c:	b580      	push	{r7, lr}
 800083e:	b086      	sub	sp, #24
 8000840:	af00      	add	r7, sp, #0
 8000842:	60f8      	str	r0, [r7, #12]
 8000844:	60b9      	str	r1, [r7, #8]
 8000846:	607a      	str	r2, [r7, #4]
 8000848:	603b      	str	r3, [r7, #0]
	if ( (x < 0) || (y < 0) || (x > LCD_WIDTH-1) || (y > LCD_HEIGHT-1))
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	2b00      	cmp	r3, #0
 800084e:	db31      	blt.n	80008b4 <LCD5110_putpix+0x78>
 8000850:	68bb      	ldr	r3, [r7, #8]
 8000852:	2b00      	cmp	r3, #0
 8000854:	db2e      	blt.n	80008b4 <LCD5110_putpix+0x78>
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	2b53      	cmp	r3, #83	; 0x53
 800085a:	dc2b      	bgt.n	80008b4 <LCD5110_putpix+0x78>
 800085c:	68bb      	ldr	r3, [r7, #8]
 800085e:	2b2f      	cmp	r3, #47	; 0x2f
 8000860:	dc28      	bgt.n	80008b4 <LCD5110_putpix+0x78>
		return;
	pix_coord  c = xy_to_pix(x, y);
 8000862:	f107 0310 	add.w	r3, r7, #16
 8000866:	68ba      	ldr	r2, [r7, #8]
 8000868:	68f9      	ldr	r1, [r7, #12]
 800086a:	4618      	mov	r0, r3
 800086c:	f7ff ffa7 	bl	80007be <xy_to_pix>

	if (color)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d00c      	beq.n	8000890 <LCD5110_putpix+0x54>
		lcd_conf->video_buffer[c.adr] |= c.mask;
 8000876:	693b      	ldr	r3, [r7, #16]
 8000878:	683a      	ldr	r2, [r7, #0]
 800087a:	4413      	add	r3, r2
 800087c:	7f19      	ldrb	r1, [r3, #28]
 800087e:	7d3a      	ldrb	r2, [r7, #20]
 8000880:	693b      	ldr	r3, [r7, #16]
 8000882:	430a      	orrs	r2, r1
 8000884:	b2d1      	uxtb	r1, r2
 8000886:	683a      	ldr	r2, [r7, #0]
 8000888:	4413      	add	r3, r2
 800088a:	460a      	mov	r2, r1
 800088c:	771a      	strb	r2, [r3, #28]
 800088e:	e012      	b.n	80008b6 <LCD5110_putpix+0x7a>
	else
		lcd_conf->video_buffer[c.adr] &= ~c.mask;
 8000890:	693b      	ldr	r3, [r7, #16]
 8000892:	683a      	ldr	r2, [r7, #0]
 8000894:	4413      	add	r3, r2
 8000896:	7f1b      	ldrb	r3, [r3, #28]
 8000898:	b25a      	sxtb	r2, r3
 800089a:	7d3b      	ldrb	r3, [r7, #20]
 800089c:	b25b      	sxtb	r3, r3
 800089e:	43db      	mvns	r3, r3
 80008a0:	b25b      	sxtb	r3, r3
 80008a2:	4013      	ands	r3, r2
 80008a4:	b25a      	sxtb	r2, r3
 80008a6:	693b      	ldr	r3, [r7, #16]
 80008a8:	b2d1      	uxtb	r1, r2
 80008aa:	683a      	ldr	r2, [r7, #0]
 80008ac:	4413      	add	r3, r2
 80008ae:	460a      	mov	r2, r1
 80008b0:	771a      	strb	r2, [r3, #28]
 80008b2:	e000      	b.n	80008b6 <LCD5110_putpix+0x7a>
		return;
 80008b4:	bf00      	nop
}
 80008b6:	3718      	adds	r7, #24
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}

080008bc <LCD5110_drawBitmap>:
}

//! TODO: optimize! Slow!
//! TODO: add different bitmap modes -- OR/AND/XOR
void LCD5110_drawBitmap(int x, int y, const unsigned char* bitmap, int cols, int rows, int invert, LCD5110_conf* lcd_conf)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b088      	sub	sp, #32
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	60f8      	str	r0, [r7, #12]
 80008c4:	60b9      	str	r1, [r7, #8]
 80008c6:	607a      	str	r2, [r7, #4]
 80008c8:	603b      	str	r3, [r7, #0]
	for(int cx=0; cx<cols; cx++)
 80008ca:	2300      	movs	r3, #0
 80008cc:	61fb      	str	r3, [r7, #28]
 80008ce:	e042      	b.n	8000956 <LCD5110_drawBitmap+0x9a>
	{
		for (int cy=0; cy<rows; cy++)
 80008d0:	2300      	movs	r3, #0
 80008d2:	61bb      	str	r3, [r7, #24]
 80008d4:	e038      	b.n	8000948 <LCD5110_drawBitmap+0x8c>
		{
			unsigned char temp = bitmap[(cy/8)*cols + cx];
 80008d6:	69bb      	ldr	r3, [r7, #24]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	da00      	bge.n	80008de <LCD5110_drawBitmap+0x22>
 80008dc:	3307      	adds	r3, #7
 80008de:	10db      	asrs	r3, r3, #3
 80008e0:	461a      	mov	r2, r3
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	fb03 f202 	mul.w	r2, r3, r2
 80008e8:	69fb      	ldr	r3, [r7, #28]
 80008ea:	4413      	add	r3, r2
 80008ec:	461a      	mov	r2, r3
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	4413      	add	r3, r2
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	75fb      	strb	r3, [r7, #23]
			temp &= 1<<(cy%8);
 80008f6:	69bb      	ldr	r3, [r7, #24]
 80008f8:	425a      	negs	r2, r3
 80008fa:	f003 0307 	and.w	r3, r3, #7
 80008fe:	f002 0207 	and.w	r2, r2, #7
 8000902:	bf58      	it	pl
 8000904:	4253      	negpl	r3, r2
 8000906:	2201      	movs	r2, #1
 8000908:	fa02 f303 	lsl.w	r3, r2, r3
 800090c:	b25a      	sxtb	r2, r3
 800090e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000912:	4013      	ands	r3, r2
 8000914:	b25b      	sxtb	r3, r3
 8000916:	75fb      	strb	r3, [r7, #23]
			LCD5110_putpix(x+cx, y+cy,  invert ? !temp : temp, lcd_conf);
 8000918:	68fa      	ldr	r2, [r7, #12]
 800091a:	69fb      	ldr	r3, [r7, #28]
 800091c:	18d0      	adds	r0, r2, r3
 800091e:	68ba      	ldr	r2, [r7, #8]
 8000920:	69bb      	ldr	r3, [r7, #24]
 8000922:	18d1      	adds	r1, r2, r3
 8000924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000926:	2b00      	cmp	r3, #0
 8000928:	d007      	beq.n	800093a <LCD5110_drawBitmap+0x7e>
 800092a:	7dfb      	ldrb	r3, [r7, #23]
 800092c:	2b00      	cmp	r3, #0
 800092e:	bf0c      	ite	eq
 8000930:	2301      	moveq	r3, #1
 8000932:	2300      	movne	r3, #0
 8000934:	b2db      	uxtb	r3, r3
 8000936:	461a      	mov	r2, r3
 8000938:	e000      	b.n	800093c <LCD5110_drawBitmap+0x80>
 800093a:	7dfa      	ldrb	r2, [r7, #23]
 800093c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800093e:	f7ff ff7d 	bl	800083c <LCD5110_putpix>
		for (int cy=0; cy<rows; cy++)
 8000942:	69bb      	ldr	r3, [r7, #24]
 8000944:	3301      	adds	r3, #1
 8000946:	61bb      	str	r3, [r7, #24]
 8000948:	69ba      	ldr	r2, [r7, #24]
 800094a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800094c:	429a      	cmp	r2, r3
 800094e:	dbc2      	blt.n	80008d6 <LCD5110_drawBitmap+0x1a>
	for(int cx=0; cx<cols; cx++)
 8000950:	69fb      	ldr	r3, [r7, #28]
 8000952:	3301      	adds	r3, #1
 8000954:	61fb      	str	r3, [r7, #28]
 8000956:	69fa      	ldr	r2, [r7, #28]
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	429a      	cmp	r2, r3
 800095c:	dbb8      	blt.n	80008d0 <LCD5110_drawBitmap+0x14>
		}
	}
}
 800095e:	bf00      	nop
 8000960:	bf00      	nop
 8000962:	3720      	adds	r7, #32
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}

08000968 <send_byte_to_LCD5110>:
#include <stdio.h>

#define SUPPRESS_WARNING(x) (void)x

static inline HAL_StatusTypeDef send_byte_to_LCD5110(uint8_t dat, LCD5110_conf* lcd_conf)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	4603      	mov	r3, r0
 8000970:	6039      	str	r1, [r7, #0]
 8000972:	71fb      	strb	r3, [r7, #7]
	//! HAL_SPI_Transmit takes care about waiting transmission to finish.
	//! Details: https://habrahabr.ru/post/276605/ -- do not turn command mode off
	//! before transmission finished. (Check BSY flag before DC_on/off, if directly
	//! manipulating SPIx_DR.
	return HAL_SPI_Transmit(lcd_conf->spi_handle, &dat, 1, 1000);
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	6818      	ldr	r0, [r3, #0]
 8000978:	1df9      	adds	r1, r7, #7
 800097a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800097e:	2201      	movs	r2, #1
 8000980:	f003 f9b1 	bl	8003ce6 <HAL_SPI_Transmit>
 8000984:	4603      	mov	r3, r0
}
 8000986:	4618      	mov	r0, r3
 8000988:	3708      	adds	r7, #8
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}

0800098e <send_data_to_LCD5110>:

static inline HAL_StatusTypeDef send_data_to_LCD5110(uint8_t data[], uint16_t size, LCD5110_conf* lcd_conf)
{
 800098e:	b580      	push	{r7, lr}
 8000990:	b084      	sub	sp, #16
 8000992:	af00      	add	r7, sp, #0
 8000994:	60f8      	str	r0, [r7, #12]
 8000996:	460b      	mov	r3, r1
 8000998:	607a      	str	r2, [r7, #4]
 800099a:	817b      	strh	r3, [r7, #10]
	return HAL_SPI_Transmit(lcd_conf->spi_handle, data, size, 1000);
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	6818      	ldr	r0, [r3, #0]
 80009a0:	897a      	ldrh	r2, [r7, #10]
 80009a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009a6:	68f9      	ldr	r1, [r7, #12]
 80009a8:	f003 f99d 	bl	8003ce6 <HAL_SPI_Transmit>
 80009ac:	4603      	mov	r3, r0
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	3710      	adds	r7, #16
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}

080009b6 <LCD5110_CE_off>:

static inline void LCD5110_CE_on(LCD5110_conf* lcd_conf) {
	SUPPRESS_WARNING(LCD5110_CE_on);
	HAL_GPIO_WritePin(lcd_conf->spi_cs_port, lcd_conf->spi_cs_pin, GPIO_PIN_SET);
}
static inline void LCD5110_CE_off(LCD5110_conf* lcd_conf) {
 80009b6:	b580      	push	{r7, lr}
 80009b8:	b082      	sub	sp, #8
 80009ba:	af00      	add	r7, sp, #0
 80009bc:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd_conf->spi_cs_port, lcd_conf->spi_cs_pin, GPIO_PIN_RESET);
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	6898      	ldr	r0, [r3, #8]
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	889b      	ldrh	r3, [r3, #4]
 80009c6:	2200      	movs	r2, #0
 80009c8:	4619      	mov	r1, r3
 80009ca:	f001 fad9 	bl	8001f80 <HAL_GPIO_WritePin>
}
 80009ce:	bf00      	nop
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}

080009d6 <LCD5110_DC_on>:
//! Data mode on
static inline void LCD5110_DC_on(LCD5110_conf* lcd_conf) {
 80009d6:	b580      	push	{r7, lr}
 80009d8:	b082      	sub	sp, #8
 80009da:	af00      	add	r7, sp, #0
 80009dc:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd_conf->dc_port, lcd_conf->dc_pin, GPIO_PIN_SET);
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	6998      	ldr	r0, [r3, #24]
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	8a9b      	ldrh	r3, [r3, #20]
 80009e6:	2201      	movs	r2, #1
 80009e8:	4619      	mov	r1, r3
 80009ea:	f001 fac9 	bl	8001f80 <HAL_GPIO_WritePin>
}
 80009ee:	bf00      	nop
 80009f0:	3708      	adds	r7, #8
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}

080009f6 <LCD5110_DC_off>:
//! Commands mode on
static inline void LCD5110_DC_off(LCD5110_conf* lcd_conf) {
 80009f6:	b580      	push	{r7, lr}
 80009f8:	b082      	sub	sp, #8
 80009fa:	af00      	add	r7, sp, #0
 80009fc:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd_conf->dc_port, lcd_conf->dc_pin, GPIO_PIN_RESET);
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	6998      	ldr	r0, [r3, #24]
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	8a9b      	ldrh	r3, [r3, #20]
 8000a06:	2200      	movs	r2, #0
 8000a08:	4619      	mov	r1, r3
 8000a0a:	f001 fab9 	bl	8001f80 <HAL_GPIO_WritePin>
}
 8000a0e:	bf00      	nop
 8000a10:	3708      	adds	r7, #8
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}

08000a16 <LCD5110_RST_on>:
static inline void LCD5110_RST_on(LCD5110_conf* lcd_conf) {
 8000a16:	b580      	push	{r7, lr}
 8000a18:	b082      	sub	sp, #8
 8000a1a:	af00      	add	r7, sp, #0
 8000a1c:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd_conf->rst_port, lcd_conf->rst_pin, GPIO_PIN_SET);
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	6918      	ldr	r0, [r3, #16]
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	899b      	ldrh	r3, [r3, #12]
 8000a26:	2201      	movs	r2, #1
 8000a28:	4619      	mov	r1, r3
 8000a2a:	f001 faa9 	bl	8001f80 <HAL_GPIO_WritePin>
}
 8000a2e:	bf00      	nop
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}

08000a36 <LCD5110_RST_off>:
static inline void LCD5110_RST_off(LCD5110_conf* lcd_conf) {
 8000a36:	b580      	push	{r7, lr}
 8000a38:	b082      	sub	sp, #8
 8000a3a:	af00      	add	r7, sp, #0
 8000a3c:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd_conf->rst_port, lcd_conf->rst_pin, GPIO_PIN_RESET);
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	6918      	ldr	r0, [r3, #16]
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	899b      	ldrh	r3, [r3, #12]
 8000a46:	2200      	movs	r2, #0
 8000a48:	4619      	mov	r1, r3
 8000a4a:	f001 fa99 	bl	8001f80 <HAL_GPIO_WritePin>
}
 8000a4e:	bf00      	nop
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}

08000a56 <LCD5110_set_function>:

#define FN_SET_MASK (1<<5)

//! Code: 0010 0PVH, accepts both 00100PVH and 0PVH, but no other.
static int LCD5110_set_function(uint8_t fn_byte, LCD5110_conf* lcd_conf)
{
 8000a56:	b580      	push	{r7, lr}
 8000a58:	b082      	sub	sp, #8
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	6039      	str	r1, [r7, #0]
 8000a60:	71fb      	strb	r3, [r7, #7]
	if ( (fn_byte & ~FN_SET_MASK) > 7) //0b111
 8000a62:	79fb      	ldrb	r3, [r7, #7]
 8000a64:	f023 0320 	bic.w	r3, r3, #32
 8000a68:	2b07      	cmp	r3, #7
 8000a6a:	dd01      	ble.n	8000a70 <LCD5110_set_function+0x1a>
	{
		//printf("Seq: err\n");
		return LCD5110_bad_opcode;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	e008      	b.n	8000a82 <LCD5110_set_function+0x2c>
	}
	//printf("Seq: %i, dbg: %i \n", fn_byte | FN_SET_MASK, fn_byte );
	send_byte_to_LCD5110(fn_byte | FN_SET_MASK, lcd_conf);
 8000a70:	79fb      	ldrb	r3, [r7, #7]
 8000a72:	f043 0320 	orr.w	r3, r3, #32
 8000a76:	b2db      	uxtb	r3, r3
 8000a78:	6839      	ldr	r1, [r7, #0]
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f7ff ff74 	bl	8000968 <send_byte_to_LCD5110>
	return LCD5110_OK;
 8000a80:	2300      	movs	r3, #0
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}

08000a8a <LCD5110_set_mode_base>:

//! H==0
static int LCD5110_set_mode_base(LCD5110_modes mode_byte, LCD5110_conf* lcd_conf)
{
 8000a8a:	b580      	push	{r7, lr}
 8000a8c:	b082      	sub	sp, #8
 8000a8e:	af00      	add	r7, sp, #0
 8000a90:	4603      	mov	r3, r0
 8000a92:	6039      	str	r1, [r7, #0]
 8000a94:	71fb      	strb	r3, [r7, #7]
	if ( (mode_byte & (~LCD5110_INVERTED_MODE) ) != 0) //0b10x0y -- only possible values
 8000a96:	79fb      	ldrb	r3, [r7, #7]
 8000a98:	f023 030d 	bic.w	r3, r3, #13
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <LCD5110_set_mode_base+0x1a>
	{
		//printf("Seq: err\n");
		return LCD5110_bad_dmode;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	e005      	b.n	8000ab0 <LCD5110_set_mode_base+0x26>
	}
	//printf("Seq: %i\n", mode_byte);
	send_byte_to_LCD5110(mode_byte, lcd_conf);
 8000aa4:	79fb      	ldrb	r3, [r7, #7]
 8000aa6:	6839      	ldr	r1, [r7, #0]
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f7ff ff5d 	bl	8000968 <send_byte_to_LCD5110>
	return LCD5110_OK;
 8000aae:	2300      	movs	r3, #0
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	3708      	adds	r7, #8
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}

08000ab8 <LCD5110_set_voltage_ext>:

#define LCD5110_VOLTAGE_MASK (1<<7)

//! H==1
static int LCD5110_set_voltage_ext(uint8_t voltage, LCD5110_conf* lcd_conf)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	4603      	mov	r3, r0
 8000ac0:	6039      	str	r1, [r7, #0]
 8000ac2:	71fb      	strb	r3, [r7, #7]
	if ( voltage > 127)
 8000ac4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	da01      	bge.n	8000ad0 <LCD5110_set_voltage_ext+0x18>
	{
		//printf("Seq: err\n");
		return LCD5110_bad_voltage;
 8000acc:	2303      	movs	r3, #3
 8000ace:	e008      	b.n	8000ae2 <LCD5110_set_voltage_ext+0x2a>
	}
	//printf("Seq: %i\n", voltage | LCD5110_VOLTAGE_MASK);
	send_byte_to_LCD5110(voltage | LCD5110_VOLTAGE_MASK, lcd_conf);
 8000ad0:	79fb      	ldrb	r3, [r7, #7]
 8000ad2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	6839      	ldr	r1, [r7, #0]
 8000ada:	4618      	mov	r0, r3
 8000adc:	f7ff ff44 	bl	8000968 <send_byte_to_LCD5110>
	return LCD5110_OK;
 8000ae0:	2300      	movs	r3, #0
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	3708      	adds	r7, #8
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}

08000aea <LCD5110_set_temp_coef_ext>:

#define LCD5110_TEMP_COEFF_MASK (1<<2)
//! H==1
static int LCD5110_set_temp_coef_ext(uint8_t TC, LCD5110_conf* lcd_conf)
{
 8000aea:	b580      	push	{r7, lr}
 8000aec:	b082      	sub	sp, #8
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	4603      	mov	r3, r0
 8000af2:	6039      	str	r1, [r7, #0]
 8000af4:	71fb      	strb	r3, [r7, #7]
	if ( TC > 3)
 8000af6:	79fb      	ldrb	r3, [r7, #7]
 8000af8:	2b03      	cmp	r3, #3
 8000afa:	d901      	bls.n	8000b00 <LCD5110_set_temp_coef_ext+0x16>
	{
		//printf("Seq: err\n");
		return LCD5110_bad_TC;
 8000afc:	2304      	movs	r3, #4
 8000afe:	e008      	b.n	8000b12 <LCD5110_set_temp_coef_ext+0x28>
	}
	//printf("Seq: %i\n", TC | LCD5110_TEMP_COEFF_MASK);
	send_byte_to_LCD5110(TC | LCD5110_TEMP_COEFF_MASK, lcd_conf);
 8000b00:	79fb      	ldrb	r3, [r7, #7]
 8000b02:	f043 0304 	orr.w	r3, r3, #4
 8000b06:	b2db      	uxtb	r3, r3
 8000b08:	6839      	ldr	r1, [r7, #0]
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f7ff ff2c 	bl	8000968 <send_byte_to_LCD5110>
	return LCD5110_OK;
 8000b10:	2300      	movs	r3, #0
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	3708      	adds	r7, #8
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}

08000b1a <LCD5110_set_bias_ext>:
}

#define LCD5110_BIAS_MASK (1<<4)
//! H==1
static int LCD5110_set_bias_ext(uint8_t bias, LCD5110_conf* lcd_conf)
{
 8000b1a:	b580      	push	{r7, lr}
 8000b1c:	b082      	sub	sp, #8
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	4603      	mov	r3, r0
 8000b22:	6039      	str	r1, [r7, #0]
 8000b24:	71fb      	strb	r3, [r7, #7]
	if ( bias > 7)
 8000b26:	79fb      	ldrb	r3, [r7, #7]
 8000b28:	2b07      	cmp	r3, #7
 8000b2a:	d901      	bls.n	8000b30 <LCD5110_set_bias_ext+0x16>
	{
		//printf("Seq: err\n");
		return LCD5110_bad_bias;
 8000b2c:	2305      	movs	r3, #5
 8000b2e:	e008      	b.n	8000b42 <LCD5110_set_bias_ext+0x28>
	}
	//printf("Seq: %i\n", bias | LCD5110_BIAS_MASK);
	send_byte_to_LCD5110(bias | LCD5110_BIAS_MASK, lcd_conf);
 8000b30:	79fb      	ldrb	r3, [r7, #7]
 8000b32:	f043 0310 	orr.w	r3, r3, #16
 8000b36:	b2db      	uxtb	r3, r3
 8000b38:	6839      	ldr	r1, [r7, #0]
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f7ff ff14 	bl	8000968 <send_byte_to_LCD5110>
	return LCD5110_OK;
 8000b40:	2300      	movs	r3, #0
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}

08000b4a <LCD5110_set_X_base>:
#define LCD5110_SET_Y_BIT 6
#define LCD5110_SET_Y_BIT_MASK (1<<LCD5110_SET_Y_BIT)


static inline int LCD5110_set_X_base(int16_t x, LCD5110_conf* lcd_conf)
{
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	b082      	sub	sp, #8
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	4603      	mov	r3, r0
 8000b52:	6039      	str	r1, [r7, #0]
 8000b54:	80fb      	strh	r3, [r7, #6]
	if(x<0 || x>LCD_WIDTH-1)
 8000b56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	db03      	blt.n	8000b66 <LCD5110_set_X_base+0x1c>
 8000b5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b62:	2b53      	cmp	r3, #83	; 0x53
 8000b64:	dd01      	ble.n	8000b6a <LCD5110_set_X_base+0x20>
		return LCD5110_bad_coordinate;
 8000b66:	2307      	movs	r3, #7
 8000b68:	e00a      	b.n	8000b80 <LCD5110_set_X_base+0x36>
	send_byte_to_LCD5110(x | LCD5110_SET_X_BIT_MASK, lcd_conf);
 8000b6a:	88fb      	ldrh	r3, [r7, #6]
 8000b6c:	b25b      	sxtb	r3, r3
 8000b6e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000b72:	b25b      	sxtb	r3, r3
 8000b74:	b2db      	uxtb	r3, r3
 8000b76:	6839      	ldr	r1, [r7, #0]
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f7ff fef5 	bl	8000968 <send_byte_to_LCD5110>
	return LCD5110_OK;
 8000b7e:	2300      	movs	r3, #0
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	3708      	adds	r7, #8
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}

08000b88 <LCD5110_set_Y_base>:

//! Byte addresable!
static inline int LCD5110_set_Y_base(int16_t y, LCD5110_conf* lcd_conf)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	4603      	mov	r3, r0
 8000b90:	6039      	str	r1, [r7, #0]
 8000b92:	80fb      	strh	r3, [r7, #6]
	if(y<0 || y>LCD_HEIGHT/8-1) // Byte addressable!
 8000b94:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	db03      	blt.n	8000ba4 <LCD5110_set_Y_base+0x1c>
 8000b9c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ba0:	2b05      	cmp	r3, #5
 8000ba2:	dd01      	ble.n	8000ba8 <LCD5110_set_Y_base+0x20>
		return LCD5110_bad_coordinate;
 8000ba4:	2307      	movs	r3, #7
 8000ba6:	e00a      	b.n	8000bbe <LCD5110_set_Y_base+0x36>
	send_byte_to_LCD5110(y | LCD5110_SET_Y_BIT_MASK, lcd_conf);
 8000ba8:	88fb      	ldrh	r3, [r7, #6]
 8000baa:	b25b      	sxtb	r3, r3
 8000bac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bb0:	b25b      	sxtb	r3, r3
 8000bb2:	b2db      	uxtb	r3, r3
 8000bb4:	6839      	ldr	r1, [r7, #0]
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f7ff fed6 	bl	8000968 <send_byte_to_LCD5110>
	return LCD5110_OK;
 8000bbc:	2300      	movs	r3, #0
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <LCD5110_set_XY_base>:

static inline int LCD5110_set_XY_base(int16_t x, int16_t y, LCD5110_conf* lcd_conf)
{
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	b084      	sub	sp, #16
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	4603      	mov	r3, r0
 8000bce:	603a      	str	r2, [r7, #0]
 8000bd0:	80fb      	strh	r3, [r7, #6]
 8000bd2:	460b      	mov	r3, r1
 8000bd4:	80bb      	strh	r3, [r7, #4]
	int res;
	res = LCD5110_set_X_base(x, lcd_conf);
 8000bd6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000bda:	6839      	ldr	r1, [r7, #0]
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f7ff ffb4 	bl	8000b4a <LCD5110_set_X_base>
 8000be2:	60f8      	str	r0, [r7, #12]
	if( res != LCD5110_OK)
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <LCD5110_set_XY_base+0x28>
		return res;
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	e00c      	b.n	8000c08 <LCD5110_set_XY_base+0x42>
	res = LCD5110_set_Y_base(y, lcd_conf);
 8000bee:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000bf2:	6839      	ldr	r1, [r7, #0]
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f7ff ffc7 	bl	8000b88 <LCD5110_set_Y_base>
 8000bfa:	60f8      	str	r0, [r7, #12]
	if( res != LCD5110_OK)
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <LCD5110_set_XY_base+0x40>
		return res;
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	e000      	b.n	8000c08 <LCD5110_set_XY_base+0x42>

	return LCD5110_OK;
 8000c06:	2300      	movs	r3, #0
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	3710      	adds	r7, #16
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}

08000c10 <SPI_enable>:


static inline void SPI_enable(LCD5110_conf* lcd_conf)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
	__HAL_SPI_ENABLE( (lcd_conf->spi_handle) );
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	681a      	ldr	r2, [r3, #0]
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000c2a:	601a      	str	r2, [r3, #0]
}
 8000c2c:	bf00      	nop
 8000c2e:	370c      	adds	r7, #12
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr

08000c38 <LCD5110_init>:
int LCD5110_init(LCD5110_conf* 		lcd_conf,
				 LCD5110_modes 		dmode,
				 uint8_t 	  	    voltage,
				 uint8_t		    temp_coeff,
				 uint8_t		    bias
){
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b084      	sub	sp, #16
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
 8000c40:	4608      	mov	r0, r1
 8000c42:	4611      	mov	r1, r2
 8000c44:	461a      	mov	r2, r3
 8000c46:	4603      	mov	r3, r0
 8000c48:	70fb      	strb	r3, [r7, #3]
 8000c4a:	460b      	mov	r3, r1
 8000c4c:	70bb      	strb	r3, [r7, #2]
 8000c4e:	4613      	mov	r3, r2
 8000c50:	707b      	strb	r3, [r7, #1]
	SPI_enable(lcd_conf);
 8000c52:	6878      	ldr	r0, [r7, #4]
 8000c54:	f7ff ffdc 	bl	8000c10 <SPI_enable>
	LCD5110_CE_off(lcd_conf);
 8000c58:	6878      	ldr	r0, [r7, #4]
 8000c5a:	f7ff feac 	bl	80009b6 <LCD5110_CE_off>

	//LCD5110_VCC_on();
	LCD5110_RST_off(lcd_conf); // Minimum 100 ns, maximum not limited (tbl. 12 AC CHARACTERISTICS, pic. 16)
 8000c5e:	6878      	ldr	r0, [r7, #4]
 8000c60:	f7ff fee9 	bl	8000a36 <LCD5110_RST_off>
	volatile int i = 100; // HAL_Delay() too slow, do not want to depend on some delay_us here.
 8000c64:	2364      	movs	r3, #100	; 0x64
 8000c66:	60fb      	str	r3, [r7, #12]
	while (--i){}
 8000c68:	bf00      	nop
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	3b01      	subs	r3, #1
 8000c6e:	60fb      	str	r3, [r7, #12]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d1fa      	bne.n	8000c6a <LCD5110_init+0x32>
	LCD5110_RST_on(lcd_conf);
 8000c74:	6878      	ldr	r0, [r7, #4]
 8000c76:	f7ff fece 	bl	8000a16 <LCD5110_RST_on>

	LCD5110_DC_off(lcd_conf); // Commands mode on
 8000c7a:	6878      	ldr	r0, [r7, #4]
 8000c7c:	f7ff febb 	bl	80009f6 <LCD5110_DC_off>
	//! Extended commands (bit H==1), horizontal addressing
	LCD5110_set_function(LCD5110_FN_SET_H_MASK, lcd_conf);
 8000c80:	6879      	ldr	r1, [r7, #4]
 8000c82:	2001      	movs	r0, #1
 8000c84:	f7ff fee7 	bl	8000a56 <LCD5110_set_function>
	//! Set display voltage
	LCD5110_set_voltage_ext(voltage, lcd_conf);
 8000c88:	78bb      	ldrb	r3, [r7, #2]
 8000c8a:	6879      	ldr	r1, [r7, #4]
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f7ff ff13 	bl	8000ab8 <LCD5110_set_voltage_ext>
	//! Set temperature coefficient
	LCD5110_set_temp_coef_ext(temp_coeff, lcd_conf);
 8000c92:	787b      	ldrb	r3, [r7, #1]
 8000c94:	6879      	ldr	r1, [r7, #4]
 8000c96:	4618      	mov	r0, r3
 8000c98:	f7ff ff27 	bl	8000aea <LCD5110_set_temp_coef_ext>
	//! Set bias
	LCD5110_set_bias_ext(bias, lcd_conf);
 8000c9c:	7e3b      	ldrb	r3, [r7, #24]
 8000c9e:	6879      	ldr	r1, [r7, #4]
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f7ff ff3a 	bl	8000b1a <LCD5110_set_bias_ext>


	//! Basic commands (bit H==0), horizontal addressing
	LCD5110_set_function(0, lcd_conf);
 8000ca6:	6879      	ldr	r1, [r7, #4]
 8000ca8:	2000      	movs	r0, #0
 8000caa:	f7ff fed4 	bl	8000a56 <LCD5110_set_function>
	//! Set display mode
	LCD5110_set_mode_base(dmode, lcd_conf);
 8000cae:	78fb      	ldrb	r3, [r7, #3]
 8000cb0:	6879      	ldr	r1, [r7, #4]
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f7ff fee9 	bl	8000a8a <LCD5110_set_mode_base>

	return LCD5110_OK;
 8000cb8:	2300      	movs	r3, #0
	//!TODO: Check for transmission end and turn CE off (set it to HIGH).
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	3710      	adds	r7, #16
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}

08000cc2 <LCD5110_refresh_ll>:

//
void LCD5110_refresh_ll(LCD5110_conf* lcd_conf)
{
 8000cc2:	b580      	push	{r7, lr}
 8000cc4:	b082      	sub	sp, #8
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	6078      	str	r0, [r7, #4]
	LCD5110_CE_off(lcd_conf);
 8000cca:	6878      	ldr	r0, [r7, #4]
 8000ccc:	f7ff fe73 	bl	80009b6 <LCD5110_CE_off>
	LCD5110_DC_off(lcd_conf);
 8000cd0:	6878      	ldr	r0, [r7, #4]
 8000cd2:	f7ff fe90 	bl	80009f6 <LCD5110_DC_off>
	LCD5110_set_XY_base(0, 0, lcd_conf);
 8000cd6:	687a      	ldr	r2, [r7, #4]
 8000cd8:	2100      	movs	r1, #0
 8000cda:	2000      	movs	r0, #0
 8000cdc:	f7ff ff73 	bl	8000bc6 <LCD5110_set_XY_base>
	LCD5110_DC_on(lcd_conf);
 8000ce0:	6878      	ldr	r0, [r7, #4]
 8000ce2:	f7ff fe78 	bl	80009d6 <LCD5110_DC_on>

	send_data_to_LCD5110(lcd_conf->video_buffer, LCD_HEIGHT*LCD_WIDTH/8, lcd_conf);
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	331c      	adds	r3, #28
 8000cea:	687a      	ldr	r2, [r7, #4]
 8000cec:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff fe4c 	bl	800098e <send_data_to_LCD5110>
//!TODO: Check for transmission end and turn CE off (set it to HIGH).
}
 8000cf6:	bf00      	nop
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
	...

08000d00 <print_score>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void print_score(LCD5110_display *lcd_conf) {
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
	LCD5110_clear_scr(lcd_conf);
 8000d08:	6878      	ldr	r0, [r7, #4]
 8000d0a:	f7ff fc15 	bl	8000538 <LCD5110_clear_scr>
	LCD5110_set_cursor(1, 22, lcd_conf);
 8000d0e:	687a      	ldr	r2, [r7, #4]
 8000d10:	2116      	movs	r1, #22
 8000d12:	2001      	movs	r0, #1
 8000d14:	f7ff fbfe 	bl	8000514 <LCD5110_set_cursor>
	LCD5110_printf(lcd_conf, BLACK, "L:%u", l_score);
 8000d18:	4b22      	ldr	r3, [pc, #136]	; (8000da4 <print_score+0xa4>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	4a22      	ldr	r2, [pc, #136]	; (8000da8 <print_score+0xa8>)
 8000d20:	2101      	movs	r1, #1
 8000d22:	6878      	ldr	r0, [r7, #4]
 8000d24:	f7ff fd22 	bl	800076c <LCD5110_printf>
	LCD5110_set_cursor(60, 22, lcd_conf);
 8000d28:	687a      	ldr	r2, [r7, #4]
 8000d2a:	2116      	movs	r1, #22
 8000d2c:	203c      	movs	r0, #60	; 0x3c
 8000d2e:	f7ff fbf1 	bl	8000514 <LCD5110_set_cursor>
	LCD5110_printf(lcd_conf, BLACK, "R:%u", r_score);
 8000d32:	4b1e      	ldr	r3, [pc, #120]	; (8000dac <print_score+0xac>)
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	b2db      	uxtb	r3, r3
 8000d38:	4a1d      	ldr	r2, [pc, #116]	; (8000db0 <print_score+0xb0>)
 8000d3a:	2101      	movs	r1, #1
 8000d3c:	6878      	ldr	r0, [r7, #4]
 8000d3e:	f7ff fd15 	bl	800076c <LCD5110_printf>
	LCD5110_refresh(lcd_conf);
 8000d42:	6878      	ldr	r0, [r7, #4]
 8000d44:	f7ff fbda 	bl	80004fc <LCD5110_refresh>
	LCD5110_set_cursor(1, 40, lcd_conf);
 8000d48:	687a      	ldr	r2, [r7, #4]
 8000d4a:	2128      	movs	r1, #40	; 0x28
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	f7ff fbe1 	bl	8000514 <LCD5110_set_cursor>
	switch (state) {
 8000d52:	4b18      	ldr	r3, [pc, #96]	; (8000db4 <print_score+0xb4>)
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	b2db      	uxtb	r3, r3
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d002      	beq.n	8000d62 <print_score+0x62>
 8000d5c:	2b08      	cmp	r3, #8
 8000d5e:	d006      	beq.n	8000d6e <print_score+0x6e>
		} else {
			LCD5110_print("RIGHT PLAYER WON\n! ", BLACK, lcd_conf);
		}
		break;
	}
}
 8000d60:	e01b      	b.n	8000d9a <print_score+0x9a>
		LCD5110_print("SELECT PLAYER (L/R)\n", BLACK, lcd_conf);
 8000d62:	687a      	ldr	r2, [r7, #4]
 8000d64:	2101      	movs	r1, #1
 8000d66:	4814      	ldr	r0, [pc, #80]	; (8000db8 <print_score+0xb8>)
 8000d68:	f7ff fbf7 	bl	800055a <LCD5110_print>
		break;
 8000d6c:	e015      	b.n	8000d9a <print_score+0x9a>
		LCD5110_print("GAME OVER!\n", BLACK, lcd_conf);
 8000d6e:	687a      	ldr	r2, [r7, #4]
 8000d70:	2101      	movs	r1, #1
 8000d72:	4812      	ldr	r0, [pc, #72]	; (8000dbc <print_score+0xbc>)
 8000d74:	f7ff fbf1 	bl	800055a <LCD5110_print>
		if (l_score == 11) {
 8000d78:	4b0a      	ldr	r3, [pc, #40]	; (8000da4 <print_score+0xa4>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	2b0b      	cmp	r3, #11
 8000d80:	d105      	bne.n	8000d8e <print_score+0x8e>
			LCD5110_print("LEFT PLAYER WON\n! ", BLACK, lcd_conf);
 8000d82:	687a      	ldr	r2, [r7, #4]
 8000d84:	2101      	movs	r1, #1
 8000d86:	480e      	ldr	r0, [pc, #56]	; (8000dc0 <print_score+0xc0>)
 8000d88:	f7ff fbe7 	bl	800055a <LCD5110_print>
		break;
 8000d8c:	e004      	b.n	8000d98 <print_score+0x98>
			LCD5110_print("RIGHT PLAYER WON\n! ", BLACK, lcd_conf);
 8000d8e:	687a      	ldr	r2, [r7, #4]
 8000d90:	2101      	movs	r1, #1
 8000d92:	480c      	ldr	r0, [pc, #48]	; (8000dc4 <print_score+0xc4>)
 8000d94:	f7ff fbe1 	bl	800055a <LCD5110_print>
		break;
 8000d98:	bf00      	nop
}
 8000d9a:	bf00      	nop
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	200000de 	.word	0x200000de
 8000da8:	08005624 	.word	0x08005624
 8000dac:	200000df 	.word	0x200000df
 8000db0:	0800562c 	.word	0x0800562c
 8000db4:	200000dc 	.word	0x200000dc
 8000db8:	08005634 	.word	0x08005634
 8000dbc:	0800564c 	.word	0x0800564c
 8000dc0:	08005658 	.word	0x08005658
 8000dc4:	0800566c 	.word	0x0800566c

08000dc8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000dc8:	b590      	push	{r4, r7, lr}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000dce:	f000 fdcd 	bl	800196c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000dd2:	f000 f843 	bl	8000e5c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000dd6:	f7ff fa4b 	bl	8000270 <MX_GPIO_Init>
	MX_I2C1_Init();
 8000dda:	f7ff fb0b 	bl	80003f4 <MX_I2C1_Init>
	MX_SPI1_Init();
 8000dde:	f000 fac5 	bl	800136c <MX_SPI1_Init>
	MX_USB_PCD_Init();
 8000de2:	f000 fd33 	bl	800184c <MX_USB_PCD_Init>
	MX_SPI2_Init();
 8000de6:	f000 faff 	bl	80013e8 <MX_SPI2_Init>
	MX_TIM1_Init();
 8000dea:	f000 fc9d 	bl	8001728 <MX_TIM1_Init>
	/* USER CODE BEGIN 2 */
	lcd1.hw_conf.spi_handle = &hspi2;
 8000dee:	4b17      	ldr	r3, [pc, #92]	; (8000e4c <main+0x84>)
 8000df0:	4a17      	ldr	r2, [pc, #92]	; (8000e50 <main+0x88>)
 8000df2:	601a      	str	r2, [r3, #0]
	lcd1.hw_conf.spi_cs_pin = LCD_CS_Pin;
 8000df4:	4b15      	ldr	r3, [pc, #84]	; (8000e4c <main+0x84>)
 8000df6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000dfa:	809a      	strh	r2, [r3, #4]
	lcd1.hw_conf.spi_cs_port = LCD_CS_GPIO_Port;
 8000dfc:	4b13      	ldr	r3, [pc, #76]	; (8000e4c <main+0x84>)
 8000dfe:	4a15      	ldr	r2, [pc, #84]	; (8000e54 <main+0x8c>)
 8000e00:	609a      	str	r2, [r3, #8]
	lcd1.hw_conf.rst_pin = LCD_RST_Pin;
 8000e02:	4b12      	ldr	r3, [pc, #72]	; (8000e4c <main+0x84>)
 8000e04:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e08:	819a      	strh	r2, [r3, #12]
	lcd1.hw_conf.rst_port = LCD_RST_GPIO_Port;
 8000e0a:	4b10      	ldr	r3, [pc, #64]	; (8000e4c <main+0x84>)
 8000e0c:	4a11      	ldr	r2, [pc, #68]	; (8000e54 <main+0x8c>)
 8000e0e:	611a      	str	r2, [r3, #16]
	lcd1.hw_conf.dc_pin = LCD_DC_Pin;
 8000e10:	4b0e      	ldr	r3, [pc, #56]	; (8000e4c <main+0x84>)
 8000e12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e16:	829a      	strh	r2, [r3, #20]
	lcd1.hw_conf.dc_port = LCD_DC_GPIO_Port;
 8000e18:	4b0c      	ldr	r3, [pc, #48]	; (8000e4c <main+0x84>)
 8000e1a:	4a0e      	ldr	r2, [pc, #56]	; (8000e54 <main+0x8c>)
 8000e1c:	619a      	str	r2, [r3, #24]
	lcd1.def_scr = lcd5110_def_scr;
 8000e1e:	4b0b      	ldr	r3, [pc, #44]	; (8000e4c <main+0x84>)
 8000e20:	4a0d      	ldr	r2, [pc, #52]	; (8000e58 <main+0x90>)
 8000e22:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8000e26:	4614      	mov	r4, r2
 8000e28:	6820      	ldr	r0, [r4, #0]
 8000e2a:	6861      	ldr	r1, [r4, #4]
 8000e2c:	68a2      	ldr	r2, [r4, #8]
 8000e2e:	c307      	stmia	r3!, {r0, r1, r2}
 8000e30:	89a2      	ldrh	r2, [r4, #12]
 8000e32:	801a      	strh	r2, [r3, #0]
	LCD5110_init(&lcd1.hw_conf, LCD5110_NORMAL_MODE, 0x40, 2, 3);
 8000e34:	2303      	movs	r3, #3
 8000e36:	9300      	str	r3, [sp, #0]
 8000e38:	2302      	movs	r3, #2
 8000e3a:	2240      	movs	r2, #64	; 0x40
 8000e3c:	210c      	movs	r1, #12
 8000e3e:	4803      	ldr	r0, [pc, #12]	; (8000e4c <main+0x84>)
 8000e40:	f7ff fefa 	bl	8000c38 <LCD5110_init>

	print_score(&lcd1);
 8000e44:	4801      	ldr	r0, [pc, #4]	; (8000e4c <main+0x84>)
 8000e46:	f7ff ff5b 	bl	8000d00 <print_score>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000e4a:	e7fe      	b.n	8000e4a <main+0x82>
 8000e4c:	200000e0 	.word	0x200000e0
 8000e50:	20000368 	.word	0x20000368
 8000e54:	48000400 	.word	0x48000400
 8000e58:	08005cc0 	.word	0x08005cc0

08000e5c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b09e      	sub	sp, #120	; 0x78
 8000e60:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000e62:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000e66:	2228      	movs	r2, #40	; 0x28
 8000e68:	2100      	movs	r1, #0
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f003 ff3e 	bl	8004cec <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000e70:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
 8000e7a:	609a      	str	r2, [r3, #8]
 8000e7c:	60da      	str	r2, [r3, #12]
 8000e7e:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000e80:	463b      	mov	r3, r7
 8000e82:	223c      	movs	r2, #60	; 0x3c
 8000e84:	2100      	movs	r1, #0
 8000e86:	4618      	mov	r0, r3
 8000e88:	f003 ff30 	bl	8004cec <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 8000e8c:	2303      	movs	r3, #3
 8000e8e:	653b      	str	r3, [r7, #80]	; 0x50
			| RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e94:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000e96:	2300      	movs	r3, #0
 8000e98:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e9e:	2310      	movs	r3, #16
 8000ea0:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	66fb      	str	r3, [r7, #108]	; 0x6c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ea6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000eaa:	673b      	str	r3, [r7, #112]	; 0x70
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000eac:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000eb0:	677b      	str	r3, [r7, #116]	; 0x74
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000eb2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f001 fa96 	bl	80023e8 <HAL_RCC_OscConfig>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <SystemClock_Config+0x6a>
		Error_Handler();
 8000ec2:	f000 fa4b 	bl	800135c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000ec6:	230f      	movs	r3, #15
 8000ec8:	63fb      	str	r3, [r7, #60]	; 0x3c
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eca:	2302      	movs	r3, #2
 8000ecc:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ed2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ed6:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	64fb      	str	r3, [r7, #76]	; 0x4c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8000edc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000ee0:	2101      	movs	r1, #1
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f002 fabe 	bl	8003464 <HAL_RCC_ClockConfig>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <SystemClock_Config+0x96>
		Error_Handler();
 8000eee:	f000 fa35 	bl	800135c <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB | RCC_PERIPHCLK_I2C1
 8000ef2:	4b0b      	ldr	r3, [pc, #44]	; (8000f20 <SystemClock_Config+0xc4>)
 8000ef4:	603b      	str	r3, [r7, #0]
			| RCC_PERIPHCLK_TIM1;
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	61fb      	str	r3, [r7, #28]
	PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8000efa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000efe:	63bb      	str	r3, [r7, #56]	; 0x38
	PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000f00:	2300      	movs	r3, #0
 8000f02:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000f04:	463b      	mov	r3, r7
 8000f06:	4618      	mov	r0, r3
 8000f08:	f002 fc92 	bl	8003830 <HAL_RCCEx_PeriphCLKConfig>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <SystemClock_Config+0xba>
		Error_Handler();
 8000f12:	f000 fa23 	bl	800135c <Error_Handler>
	}
}
 8000f16:	bf00      	nop
 8000f18:	3778      	adds	r7, #120	; 0x78
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	00021020 	.word	0x00021020

08000f24 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	80fb      	strh	r3, [r7, #6]
	if (listening) {
 8000f2e:	4b07      	ldr	r3, [pc, #28]	; (8000f4c <HAL_GPIO_EXTI_Callback+0x28>)
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d005      	beq.n	8000f44 <HAL_GPIO_EXTI_Callback+0x20>
		listening = false;
 8000f38:	4b04      	ldr	r3, [pc, #16]	; (8000f4c <HAL_GPIO_EXTI_Callback+0x28>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim1);
 8000f3e:	4804      	ldr	r0, [pc, #16]	; (8000f50 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000f40:	f003 f9fc 	bl	800433c <HAL_TIM_Base_Start_IT>
	}
}
 8000f44:	bf00      	nop
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	20000000 	.word	0x20000000
 8000f50:	200003d0 	.word	0x200003d0

08000f54 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
	LCD5110_set_cursor(0, 0, &lcd1);
 8000f5c:	4aa6      	ldr	r2, [pc, #664]	; (80011f8 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8000f5e:	2100      	movs	r1, #0
 8000f60:	2000      	movs	r0, #0
 8000f62:	f7ff fad7 	bl	8000514 <LCD5110_set_cursor>
	switch (state) {
 8000f66:	4ba5      	ldr	r3, [pc, #660]	; (80011fc <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	2b06      	cmp	r3, #6
 8000f6e:	d83b      	bhi.n	8000fe8 <HAL_TIM_PeriodElapsedCallback+0x94>
 8000f70:	a201      	add	r2, pc, #4	; (adr r2, 8000f78 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f76:	bf00      	nop
 8000f78:	08000f95 	.word	0x08000f95
 8000f7c:	08000fad 	.word	0x08000fad
 8000f80:	08000fa1 	.word	0x08000fa1
 8000f84:	08000fc5 	.word	0x08000fc5
 8000f88:	08000fb9 	.word	0x08000fb9
 8000f8c:	08000fdd 	.word	0x08000fdd
 8000f90:	08000fd1 	.word	0x08000fd1
	case START:
		LCD5110_print("START\n", BLACK, &lcd1);
 8000f94:	4a98      	ldr	r2, [pc, #608]	; (80011f8 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8000f96:	2101      	movs	r1, #1
 8000f98:	4899      	ldr	r0, [pc, #612]	; (8001200 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000f9a:	f7ff fade 	bl	800055a <LCD5110_print>
		break;
 8000f9e:	e023      	b.n	8000fe8 <HAL_TIM_PeriodElapsedCallback+0x94>
	case L_SERVE:
		LCD5110_print("L_SERVE\n", BLACK, &lcd1);
 8000fa0:	4a95      	ldr	r2, [pc, #596]	; (80011f8 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8000fa2:	2101      	movs	r1, #1
 8000fa4:	4897      	ldr	r0, [pc, #604]	; (8001204 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000fa6:	f7ff fad8 	bl	800055a <LCD5110_print>
		break;
 8000faa:	e01d      	b.n	8000fe8 <HAL_TIM_PeriodElapsedCallback+0x94>
	case R_SERVE:
		LCD5110_print("R_SERVE\n", BLACK, &lcd1);
 8000fac:	4a92      	ldr	r2, [pc, #584]	; (80011f8 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8000fae:	2101      	movs	r1, #1
 8000fb0:	4895      	ldr	r0, [pc, #596]	; (8001208 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8000fb2:	f7ff fad2 	bl	800055a <LCD5110_print>
		break;
 8000fb6:	e017      	b.n	8000fe8 <HAL_TIM_PeriodElapsedCallback+0x94>
	case L_WAIT:
		LCD5110_print("L_WAIT\n", BLACK, &lcd1);
 8000fb8:	4a8f      	ldr	r2, [pc, #572]	; (80011f8 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8000fba:	2101      	movs	r1, #1
 8000fbc:	4893      	ldr	r0, [pc, #588]	; (800120c <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000fbe:	f7ff facc 	bl	800055a <LCD5110_print>
		break;
 8000fc2:	e011      	b.n	8000fe8 <HAL_TIM_PeriodElapsedCallback+0x94>
	case R_WAIT:
		LCD5110_print("R_WAIT\n", BLACK, &lcd1);
 8000fc4:	4a8c      	ldr	r2, [pc, #560]	; (80011f8 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8000fc6:	2101      	movs	r1, #1
 8000fc8:	4891      	ldr	r0, [pc, #580]	; (8001210 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000fca:	f7ff fac6 	bl	800055a <LCD5110_print>
		break;
 8000fce:	e00b      	b.n	8000fe8 <HAL_TIM_PeriodElapsedCallback+0x94>
	case L_TURN:
		LCD5110_print("L_TURN\n", BLACK, &lcd1);
 8000fd0:	4a89      	ldr	r2, [pc, #548]	; (80011f8 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8000fd2:	2101      	movs	r1, #1
 8000fd4:	488f      	ldr	r0, [pc, #572]	; (8001214 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000fd6:	f7ff fac0 	bl	800055a <LCD5110_print>
		break;
 8000fda:	e005      	b.n	8000fe8 <HAL_TIM_PeriodElapsedCallback+0x94>
	case R_TURN:
		LCD5110_print("R_TURN\n", BLACK, &lcd1);
 8000fdc:	4a86      	ldr	r2, [pc, #536]	; (80011f8 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8000fde:	2101      	movs	r1, #1
 8000fe0:	488d      	ldr	r0, [pc, #564]	; (8001218 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000fe2:	f7ff faba 	bl	800055a <LCD5110_print>
		break;
 8000fe6:	bf00      	nop
	}
	// tablehit (left side)
	if (!HAL_GPIO_ReadPin(TABLEHIT_BTN_GPIO_Port, TABLEHIT_BTN_Pin)) {
 8000fe8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fec:	488b      	ldr	r0, [pc, #556]	; (800121c <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8000fee:	f000 ffaf 	bl	8001f50 <HAL_GPIO_ReadPin>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	f040 80b1 	bne.w	800115c <HAL_TIM_PeriodElapsedCallback+0x208>
		HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_SET);
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001000:	4887      	ldr	r0, [pc, #540]	; (8001220 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001002:	f000 ffbd 	bl	8001f80 <HAL_GPIO_WritePin>
		if (state == START) {
 8001006:	4b7d      	ldr	r3, [pc, #500]	; (80011fc <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	b2db      	uxtb	r3, r3
 800100c:	2b00      	cmp	r3, #0
 800100e:	d106      	bne.n	800101e <HAL_TIM_PeriodElapsedCallback+0xca>
			state = L_SERVE;
 8001010:	4b7a      	ldr	r3, [pc, #488]	; (80011fc <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001012:	2202      	movs	r2, #2
 8001014:	701a      	strb	r2, [r3, #0]
			server = L_SERVE;
 8001016:	4b83      	ldr	r3, [pc, #524]	; (8001224 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001018:	2202      	movs	r2, #2
 800101a:	701a      	strb	r2, [r3, #0]
 800101c:	e09a      	b.n	8001154 <HAL_TIM_PeriodElapsedCallback+0x200>
		} else if (state == L_SERVE) {
 800101e:	4b77      	ldr	r3, [pc, #476]	; (80011fc <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	b2db      	uxtb	r3, r3
 8001024:	2b02      	cmp	r3, #2
 8001026:	d103      	bne.n	8001030 <HAL_TIM_PeriodElapsedCallback+0xdc>
			state = L_WAIT;
 8001028:	4b74      	ldr	r3, [pc, #464]	; (80011fc <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800102a:	2204      	movs	r2, #4
 800102c:	701a      	strb	r2, [r3, #0]
 800102e:	e091      	b.n	8001154 <HAL_TIM_PeriodElapsedCallback+0x200>
		} else if (state == R_SERVE) {
 8001030:	4b72      	ldr	r3, [pc, #456]	; (80011fc <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	b2db      	uxtb	r3, r3
 8001036:	2b01      	cmp	r3, #1
 8001038:	d122      	bne.n	8001080 <HAL_TIM_PeriodElapsedCallback+0x12c>
			l_score++;
 800103a:	4b7b      	ldr	r3, [pc, #492]	; (8001228 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	b2db      	uxtb	r3, r3
 8001040:	3301      	adds	r3, #1
 8001042:	b2da      	uxtb	r2, r3
 8001044:	4b78      	ldr	r3, [pc, #480]	; (8001228 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001046:	701a      	strb	r2, [r3, #0]
			print_score(&lcd1);
 8001048:	486b      	ldr	r0, [pc, #428]	; (80011f8 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 800104a:	f7ff fe59 	bl	8000d00 <print_score>
			if ((l_score + r_score) % 2 == 0) {
 800104e:	4b76      	ldr	r3, [pc, #472]	; (8001228 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	b2da      	uxtb	r2, r3
 8001054:	4b75      	ldr	r3, [pc, #468]	; (800122c <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	b2db      	uxtb	r3, r3
 800105a:	4413      	add	r3, r2
 800105c:	b2db      	uxtb	r3, r3
 800105e:	f003 0301 	and.w	r3, r3, #1
 8001062:	2b00      	cmp	r3, #0
 8001064:	d103      	bne.n	800106e <HAL_TIM_PeriodElapsedCallback+0x11a>
				state = L_SERVE;
 8001066:	4b65      	ldr	r3, [pc, #404]	; (80011fc <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001068:	2202      	movs	r2, #2
 800106a:	701a      	strb	r2, [r3, #0]
 800106c:	e002      	b.n	8001074 <HAL_TIM_PeriodElapsedCallback+0x120>
			} else {
				state = R_SERVE;
 800106e:	4b63      	ldr	r3, [pc, #396]	; (80011fc <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001070:	2201      	movs	r2, #1
 8001072:	701a      	strb	r2, [r3, #0]
			}
			server = state;
 8001074:	4b61      	ldr	r3, [pc, #388]	; (80011fc <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	b2da      	uxtb	r2, r3
 800107a:	4b6a      	ldr	r3, [pc, #424]	; (8001224 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 800107c:	701a      	strb	r2, [r3, #0]
 800107e:	e069      	b.n	8001154 <HAL_TIM_PeriodElapsedCallback+0x200>
		} else if (state == L_WAIT) {
 8001080:	4b5e      	ldr	r3, [pc, #376]	; (80011fc <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	b2db      	uxtb	r3, r3
 8001086:	2b04      	cmp	r3, #4
 8001088:	d122      	bne.n	80010d0 <HAL_TIM_PeriodElapsedCallback+0x17c>
			r_score++;
 800108a:	4b68      	ldr	r3, [pc, #416]	; (800122c <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	b2db      	uxtb	r3, r3
 8001090:	3301      	adds	r3, #1
 8001092:	b2da      	uxtb	r2, r3
 8001094:	4b65      	ldr	r3, [pc, #404]	; (800122c <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001096:	701a      	strb	r2, [r3, #0]
			print_score(&lcd1);
 8001098:	4857      	ldr	r0, [pc, #348]	; (80011f8 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 800109a:	f7ff fe31 	bl	8000d00 <print_score>
			if ((l_score + r_score) % 2 == 0) {
 800109e:	4b62      	ldr	r3, [pc, #392]	; (8001228 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	b2da      	uxtb	r2, r3
 80010a4:	4b61      	ldr	r3, [pc, #388]	; (800122c <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	4413      	add	r3, r2
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	f003 0301 	and.w	r3, r3, #1
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d103      	bne.n	80010be <HAL_TIM_PeriodElapsedCallback+0x16a>
				state = R_SERVE;
 80010b6:	4b51      	ldr	r3, [pc, #324]	; (80011fc <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80010b8:	2201      	movs	r2, #1
 80010ba:	701a      	strb	r2, [r3, #0]
 80010bc:	e002      	b.n	80010c4 <HAL_TIM_PeriodElapsedCallback+0x170>
			} else {
				state = L_SERVE;
 80010be:	4b4f      	ldr	r3, [pc, #316]	; (80011fc <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80010c0:	2202      	movs	r2, #2
 80010c2:	701a      	strb	r2, [r3, #0]
			}
			server = state;
 80010c4:	4b4d      	ldr	r3, [pc, #308]	; (80011fc <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	b2da      	uxtb	r2, r3
 80010ca:	4b56      	ldr	r3, [pc, #344]	; (8001224 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80010cc:	701a      	strb	r2, [r3, #0]
 80010ce:	e041      	b.n	8001154 <HAL_TIM_PeriodElapsedCallback+0x200>
		} else if (state == R_WAIT) {
 80010d0:	4b4a      	ldr	r3, [pc, #296]	; (80011fc <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	2b03      	cmp	r3, #3
 80010d8:	d103      	bne.n	80010e2 <HAL_TIM_PeriodElapsedCallback+0x18e>
			state = L_TURN;
 80010da:	4b48      	ldr	r3, [pc, #288]	; (80011fc <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80010dc:	2206      	movs	r2, #6
 80010de:	701a      	strb	r2, [r3, #0]
 80010e0:	e038      	b.n	8001154 <HAL_TIM_PeriodElapsedCallback+0x200>
		} else if (state == L_TURN) {
 80010e2:	4b46      	ldr	r3, [pc, #280]	; (80011fc <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	2b06      	cmp	r3, #6
 80010ea:	d12b      	bne.n	8001144 <HAL_TIM_PeriodElapsedCallback+0x1f0>
			r_score++;
 80010ec:	4b4f      	ldr	r3, [pc, #316]	; (800122c <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	3301      	adds	r3, #1
 80010f4:	b2da      	uxtb	r2, r3
 80010f6:	4b4d      	ldr	r3, [pc, #308]	; (800122c <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80010f8:	701a      	strb	r2, [r3, #0]
			print_score(&lcd1);
 80010fa:	483f      	ldr	r0, [pc, #252]	; (80011f8 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80010fc:	f7ff fe00 	bl	8000d00 <print_score>
			if ((l_score + r_score) % 2 == 0) {
 8001100:	4b49      	ldr	r3, [pc, #292]	; (8001228 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	b2da      	uxtb	r2, r3
 8001106:	4b49      	ldr	r3, [pc, #292]	; (800122c <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	b2db      	uxtb	r3, r3
 800110c:	4413      	add	r3, r2
 800110e:	b2db      	uxtb	r3, r3
 8001110:	f003 0301 	and.w	r3, r3, #1
 8001114:	2b00      	cmp	r3, #0
 8001116:	d10a      	bne.n	800112e <HAL_TIM_PeriodElapsedCallback+0x1da>
				state = (server == R_SERVE) ? L_SERVE : R_SERVE;
 8001118:	4b42      	ldr	r3, [pc, #264]	; (8001224 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	b2db      	uxtb	r3, r3
 800111e:	2b01      	cmp	r3, #1
 8001120:	d101      	bne.n	8001126 <HAL_TIM_PeriodElapsedCallback+0x1d2>
 8001122:	2202      	movs	r2, #2
 8001124:	e000      	b.n	8001128 <HAL_TIM_PeriodElapsedCallback+0x1d4>
 8001126:	2201      	movs	r2, #1
 8001128:	4b34      	ldr	r3, [pc, #208]	; (80011fc <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800112a:	701a      	strb	r2, [r3, #0]
 800112c:	e004      	b.n	8001138 <HAL_TIM_PeriodElapsedCallback+0x1e4>
			} else {
				state = server;
 800112e:	4b3d      	ldr	r3, [pc, #244]	; (8001224 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	b2da      	uxtb	r2, r3
 8001134:	4b31      	ldr	r3, [pc, #196]	; (80011fc <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001136:	701a      	strb	r2, [r3, #0]
			}
			server = state;
 8001138:	4b30      	ldr	r3, [pc, #192]	; (80011fc <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	b2da      	uxtb	r2, r3
 800113e:	4b39      	ldr	r3, [pc, #228]	; (8001224 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001140:	701a      	strb	r2, [r3, #0]
 8001142:	e007      	b.n	8001154 <HAL_TIM_PeriodElapsedCallback+0x200>
		} else if (state == R_TURN) {
 8001144:	4b2d      	ldr	r3, [pc, #180]	; (80011fc <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	b2db      	uxtb	r3, r3
 800114a:	2b05      	cmp	r3, #5
 800114c:	d102      	bne.n	8001154 <HAL_TIM_PeriodElapsedCallback+0x200>
			state = L_TURN;
 800114e:	4b2b      	ldr	r3, [pc, #172]	; (80011fc <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001150:	2206      	movs	r2, #6
 8001152:	701a      	strb	r2, [r3, #0]
		}
		HAL_TIM_Base_Start_IT(&htim1);
 8001154:	4836      	ldr	r0, [pc, #216]	; (8001230 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8001156:	f003 f8f1 	bl	800433c <HAL_TIM_Base_Start_IT>
		HAL_GPIO_WritePin(LD7_GPIO_Port, LD7_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_RESET);
		listening = true;
		HAL_TIM_Base_Stop_IT(&htim1);
	}
}
 800115a:	e0eb      	b.n	8001334 <HAL_TIM_PeriodElapsedCallback+0x3e0>
	else if (!HAL_GPIO_ReadPin(OPPOSITEHIT_BTN_GPIO_Port,
 800115c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001160:	482e      	ldr	r0, [pc, #184]	; (800121c <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001162:	f000 fef5 	bl	8001f50 <HAL_GPIO_ReadPin>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	f040 80d1 	bne.w	8001310 <HAL_TIM_PeriodElapsedCallback+0x3bc>
		HAL_GPIO_WritePin(LD7_GPIO_Port, LD7_Pin, GPIO_PIN_SET);
 800116e:	2201      	movs	r2, #1
 8001170:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001174:	482a      	ldr	r0, [pc, #168]	; (8001220 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001176:	f000 ff03 	bl	8001f80 <HAL_GPIO_WritePin>
		if (state == START) {
 800117a:	4b20      	ldr	r3, [pc, #128]	; (80011fc <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	b2db      	uxtb	r3, r3
 8001180:	2b00      	cmp	r3, #0
 8001182:	d108      	bne.n	8001196 <HAL_TIM_PeriodElapsedCallback+0x242>
			state = R_SERVE;
 8001184:	4b1d      	ldr	r3, [pc, #116]	; (80011fc <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001186:	2201      	movs	r2, #1
 8001188:	701a      	strb	r2, [r3, #0]
			server = state;
 800118a:	4b1c      	ldr	r3, [pc, #112]	; (80011fc <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	b2da      	uxtb	r2, r3
 8001190:	4b24      	ldr	r3, [pc, #144]	; (8001224 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001192:	701a      	strb	r2, [r3, #0]
 8001194:	e0b8      	b.n	8001308 <HAL_TIM_PeriodElapsedCallback+0x3b4>
		} else if (state == R_SERVE) {
 8001196:	4b19      	ldr	r3, [pc, #100]	; (80011fc <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	b2db      	uxtb	r3, r3
 800119c:	2b01      	cmp	r3, #1
 800119e:	d103      	bne.n	80011a8 <HAL_TIM_PeriodElapsedCallback+0x254>
			state = R_WAIT;
 80011a0:	4b16      	ldr	r3, [pc, #88]	; (80011fc <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80011a2:	2203      	movs	r2, #3
 80011a4:	701a      	strb	r2, [r3, #0]
 80011a6:	e0af      	b.n	8001308 <HAL_TIM_PeriodElapsedCallback+0x3b4>
		} else if (state == L_SERVE) {
 80011a8:	4b14      	ldr	r3, [pc, #80]	; (80011fc <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	2b02      	cmp	r3, #2
 80011b0:	d140      	bne.n	8001234 <HAL_TIM_PeriodElapsedCallback+0x2e0>
			r_score++;
 80011b2:	4b1e      	ldr	r3, [pc, #120]	; (800122c <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	3301      	adds	r3, #1
 80011ba:	b2da      	uxtb	r2, r3
 80011bc:	4b1b      	ldr	r3, [pc, #108]	; (800122c <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80011be:	701a      	strb	r2, [r3, #0]
			print_score(&lcd1);
 80011c0:	480d      	ldr	r0, [pc, #52]	; (80011f8 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80011c2:	f7ff fd9d 	bl	8000d00 <print_score>
			if ((l_score + r_score) % 2 == 0) {
 80011c6:	4b18      	ldr	r3, [pc, #96]	; (8001228 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	b2da      	uxtb	r2, r3
 80011cc:	4b17      	ldr	r3, [pc, #92]	; (800122c <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	4413      	add	r3, r2
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	f003 0301 	and.w	r3, r3, #1
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d103      	bne.n	80011e6 <HAL_TIM_PeriodElapsedCallback+0x292>
				state = R_SERVE;
 80011de:	4b07      	ldr	r3, [pc, #28]	; (80011fc <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80011e0:	2201      	movs	r2, #1
 80011e2:	701a      	strb	r2, [r3, #0]
 80011e4:	e002      	b.n	80011ec <HAL_TIM_PeriodElapsedCallback+0x298>
				state = L_SERVE;
 80011e6:	4b05      	ldr	r3, [pc, #20]	; (80011fc <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80011e8:	2202      	movs	r2, #2
 80011ea:	701a      	strb	r2, [r3, #0]
			server = state;
 80011ec:	4b03      	ldr	r3, [pc, #12]	; (80011fc <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	b2da      	uxtb	r2, r3
 80011f2:	4b0c      	ldr	r3, [pc, #48]	; (8001224 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80011f4:	701a      	strb	r2, [r3, #0]
 80011f6:	e087      	b.n	8001308 <HAL_TIM_PeriodElapsedCallback+0x3b4>
 80011f8:	200000e0 	.word	0x200000e0
 80011fc:	200000dc 	.word	0x200000dc
 8001200:	08005680 	.word	0x08005680
 8001204:	08005688 	.word	0x08005688
 8001208:	08005694 	.word	0x08005694
 800120c:	080056a0 	.word	0x080056a0
 8001210:	080056a8 	.word	0x080056a8
 8001214:	080056b0 	.word	0x080056b0
 8001218:	080056b8 	.word	0x080056b8
 800121c:	48000c00 	.word	0x48000c00
 8001220:	48001000 	.word	0x48001000
 8001224:	200000dd 	.word	0x200000dd
 8001228:	200000de 	.word	0x200000de
 800122c:	200000df 	.word	0x200000df
 8001230:	200003d0 	.word	0x200003d0
		} else if (state == R_WAIT) {
 8001234:	4b41      	ldr	r3, [pc, #260]	; (800133c <HAL_TIM_PeriodElapsedCallback+0x3e8>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	b2db      	uxtb	r3, r3
 800123a:	2b03      	cmp	r3, #3
 800123c:	d122      	bne.n	8001284 <HAL_TIM_PeriodElapsedCallback+0x330>
			l_score++;
 800123e:	4b40      	ldr	r3, [pc, #256]	; (8001340 <HAL_TIM_PeriodElapsedCallback+0x3ec>)
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	b2db      	uxtb	r3, r3
 8001244:	3301      	adds	r3, #1
 8001246:	b2da      	uxtb	r2, r3
 8001248:	4b3d      	ldr	r3, [pc, #244]	; (8001340 <HAL_TIM_PeriodElapsedCallback+0x3ec>)
 800124a:	701a      	strb	r2, [r3, #0]
			print_score(&lcd1);
 800124c:	483d      	ldr	r0, [pc, #244]	; (8001344 <HAL_TIM_PeriodElapsedCallback+0x3f0>)
 800124e:	f7ff fd57 	bl	8000d00 <print_score>
			if ((l_score + r_score) % 2 == 0) {
 8001252:	4b3b      	ldr	r3, [pc, #236]	; (8001340 <HAL_TIM_PeriodElapsedCallback+0x3ec>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	b2da      	uxtb	r2, r3
 8001258:	4b3b      	ldr	r3, [pc, #236]	; (8001348 <HAL_TIM_PeriodElapsedCallback+0x3f4>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	b2db      	uxtb	r3, r3
 800125e:	4413      	add	r3, r2
 8001260:	b2db      	uxtb	r3, r3
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	2b00      	cmp	r3, #0
 8001268:	d103      	bne.n	8001272 <HAL_TIM_PeriodElapsedCallback+0x31e>
				state = L_SERVE;
 800126a:	4b34      	ldr	r3, [pc, #208]	; (800133c <HAL_TIM_PeriodElapsedCallback+0x3e8>)
 800126c:	2202      	movs	r2, #2
 800126e:	701a      	strb	r2, [r3, #0]
 8001270:	e002      	b.n	8001278 <HAL_TIM_PeriodElapsedCallback+0x324>
				state = R_SERVE;
 8001272:	4b32      	ldr	r3, [pc, #200]	; (800133c <HAL_TIM_PeriodElapsedCallback+0x3e8>)
 8001274:	2201      	movs	r2, #1
 8001276:	701a      	strb	r2, [r3, #0]
			server = state;
 8001278:	4b30      	ldr	r3, [pc, #192]	; (800133c <HAL_TIM_PeriodElapsedCallback+0x3e8>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	b2da      	uxtb	r2, r3
 800127e:	4b33      	ldr	r3, [pc, #204]	; (800134c <HAL_TIM_PeriodElapsedCallback+0x3f8>)
 8001280:	701a      	strb	r2, [r3, #0]
 8001282:	e041      	b.n	8001308 <HAL_TIM_PeriodElapsedCallback+0x3b4>
		} else if (state == L_WAIT) {
 8001284:	4b2d      	ldr	r3, [pc, #180]	; (800133c <HAL_TIM_PeriodElapsedCallback+0x3e8>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	b2db      	uxtb	r3, r3
 800128a:	2b04      	cmp	r3, #4
 800128c:	d103      	bne.n	8001296 <HAL_TIM_PeriodElapsedCallback+0x342>
			state = R_TURN;
 800128e:	4b2b      	ldr	r3, [pc, #172]	; (800133c <HAL_TIM_PeriodElapsedCallback+0x3e8>)
 8001290:	2205      	movs	r2, #5
 8001292:	701a      	strb	r2, [r3, #0]
 8001294:	e038      	b.n	8001308 <HAL_TIM_PeriodElapsedCallback+0x3b4>
		} else if (state == R_TURN) {
 8001296:	4b29      	ldr	r3, [pc, #164]	; (800133c <HAL_TIM_PeriodElapsedCallback+0x3e8>)
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	b2db      	uxtb	r3, r3
 800129c:	2b05      	cmp	r3, #5
 800129e:	d12b      	bne.n	80012f8 <HAL_TIM_PeriodElapsedCallback+0x3a4>
			l_score++;
 80012a0:	4b27      	ldr	r3, [pc, #156]	; (8001340 <HAL_TIM_PeriodElapsedCallback+0x3ec>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	3301      	adds	r3, #1
 80012a8:	b2da      	uxtb	r2, r3
 80012aa:	4b25      	ldr	r3, [pc, #148]	; (8001340 <HAL_TIM_PeriodElapsedCallback+0x3ec>)
 80012ac:	701a      	strb	r2, [r3, #0]
			print_score(&lcd1);
 80012ae:	4825      	ldr	r0, [pc, #148]	; (8001344 <HAL_TIM_PeriodElapsedCallback+0x3f0>)
 80012b0:	f7ff fd26 	bl	8000d00 <print_score>
			if ((l_score + r_score) % 2 == 0) {
 80012b4:	4b22      	ldr	r3, [pc, #136]	; (8001340 <HAL_TIM_PeriodElapsedCallback+0x3ec>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	b2da      	uxtb	r2, r3
 80012ba:	4b23      	ldr	r3, [pc, #140]	; (8001348 <HAL_TIM_PeriodElapsedCallback+0x3f4>)
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	4413      	add	r3, r2
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	f003 0301 	and.w	r3, r3, #1
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d10a      	bne.n	80012e2 <HAL_TIM_PeriodElapsedCallback+0x38e>
				state = (server == R_SERVE) ? L_SERVE : R_SERVE;
 80012cc:	4b1f      	ldr	r3, [pc, #124]	; (800134c <HAL_TIM_PeriodElapsedCallback+0x3f8>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d101      	bne.n	80012da <HAL_TIM_PeriodElapsedCallback+0x386>
 80012d6:	2202      	movs	r2, #2
 80012d8:	e000      	b.n	80012dc <HAL_TIM_PeriodElapsedCallback+0x388>
 80012da:	2201      	movs	r2, #1
 80012dc:	4b17      	ldr	r3, [pc, #92]	; (800133c <HAL_TIM_PeriodElapsedCallback+0x3e8>)
 80012de:	701a      	strb	r2, [r3, #0]
 80012e0:	e004      	b.n	80012ec <HAL_TIM_PeriodElapsedCallback+0x398>
				state = server;
 80012e2:	4b1a      	ldr	r3, [pc, #104]	; (800134c <HAL_TIM_PeriodElapsedCallback+0x3f8>)
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	b2da      	uxtb	r2, r3
 80012e8:	4b14      	ldr	r3, [pc, #80]	; (800133c <HAL_TIM_PeriodElapsedCallback+0x3e8>)
 80012ea:	701a      	strb	r2, [r3, #0]
			server = state;
 80012ec:	4b13      	ldr	r3, [pc, #76]	; (800133c <HAL_TIM_PeriodElapsedCallback+0x3e8>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	b2da      	uxtb	r2, r3
 80012f2:	4b16      	ldr	r3, [pc, #88]	; (800134c <HAL_TIM_PeriodElapsedCallback+0x3f8>)
 80012f4:	701a      	strb	r2, [r3, #0]
 80012f6:	e007      	b.n	8001308 <HAL_TIM_PeriodElapsedCallback+0x3b4>
		} else if (state == L_TURN) {
 80012f8:	4b10      	ldr	r3, [pc, #64]	; (800133c <HAL_TIM_PeriodElapsedCallback+0x3e8>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	2b06      	cmp	r3, #6
 8001300:	d102      	bne.n	8001308 <HAL_TIM_PeriodElapsedCallback+0x3b4>
			state = R_TURN;
 8001302:	4b0e      	ldr	r3, [pc, #56]	; (800133c <HAL_TIM_PeriodElapsedCallback+0x3e8>)
 8001304:	2205      	movs	r2, #5
 8001306:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim1);
 8001308:	4811      	ldr	r0, [pc, #68]	; (8001350 <HAL_TIM_PeriodElapsedCallback+0x3fc>)
 800130a:	f003 f817 	bl	800433c <HAL_TIM_Base_Start_IT>
}
 800130e:	e011      	b.n	8001334 <HAL_TIM_PeriodElapsedCallback+0x3e0>
		HAL_GPIO_WritePin(LD7_GPIO_Port, LD7_Pin, GPIO_PIN_RESET);
 8001310:	2200      	movs	r2, #0
 8001312:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001316:	480f      	ldr	r0, [pc, #60]	; (8001354 <HAL_TIM_PeriodElapsedCallback+0x400>)
 8001318:	f000 fe32 	bl	8001f80 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_RESET);
 800131c:	2200      	movs	r2, #0
 800131e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001322:	480c      	ldr	r0, [pc, #48]	; (8001354 <HAL_TIM_PeriodElapsedCallback+0x400>)
 8001324:	f000 fe2c 	bl	8001f80 <HAL_GPIO_WritePin>
		listening = true;
 8001328:	4b0b      	ldr	r3, [pc, #44]	; (8001358 <HAL_TIM_PeriodElapsedCallback+0x404>)
 800132a:	2201      	movs	r2, #1
 800132c:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT(&htim1);
 800132e:	4808      	ldr	r0, [pc, #32]	; (8001350 <HAL_TIM_PeriodElapsedCallback+0x3fc>)
 8001330:	f003 f86e 	bl	8004410 <HAL_TIM_Base_Stop_IT>
}
 8001334:	bf00      	nop
 8001336:	3708      	adds	r7, #8
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	200000dc 	.word	0x200000dc
 8001340:	200000de 	.word	0x200000de
 8001344:	200000e0 	.word	0x200000e0
 8001348:	200000df 	.word	0x200000df
 800134c:	200000dd 	.word	0x200000dd
 8001350:	200003d0 	.word	0x200003d0
 8001354:	48001000 	.word	0x48001000
 8001358:	20000000 	.word	0x20000000

0800135c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8001360:	bf00      	nop
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
	...

0800136c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001370:	4b1b      	ldr	r3, [pc, #108]	; (80013e0 <MX_SPI1_Init+0x74>)
 8001372:	4a1c      	ldr	r2, [pc, #112]	; (80013e4 <MX_SPI1_Init+0x78>)
 8001374:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001376:	4b1a      	ldr	r3, [pc, #104]	; (80013e0 <MX_SPI1_Init+0x74>)
 8001378:	f44f 7282 	mov.w	r2, #260	; 0x104
 800137c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800137e:	4b18      	ldr	r3, [pc, #96]	; (80013e0 <MX_SPI1_Init+0x74>)
 8001380:	2200      	movs	r2, #0
 8001382:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001384:	4b16      	ldr	r3, [pc, #88]	; (80013e0 <MX_SPI1_Init+0x74>)
 8001386:	f44f 7240 	mov.w	r2, #768	; 0x300
 800138a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800138c:	4b14      	ldr	r3, [pc, #80]	; (80013e0 <MX_SPI1_Init+0x74>)
 800138e:	2200      	movs	r2, #0
 8001390:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001392:	4b13      	ldr	r3, [pc, #76]	; (80013e0 <MX_SPI1_Init+0x74>)
 8001394:	2200      	movs	r2, #0
 8001396:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001398:	4b11      	ldr	r3, [pc, #68]	; (80013e0 <MX_SPI1_Init+0x74>)
 800139a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800139e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80013a0:	4b0f      	ldr	r3, [pc, #60]	; (80013e0 <MX_SPI1_Init+0x74>)
 80013a2:	2208      	movs	r2, #8
 80013a4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013a6:	4b0e      	ldr	r3, [pc, #56]	; (80013e0 <MX_SPI1_Init+0x74>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80013ac:	4b0c      	ldr	r3, [pc, #48]	; (80013e0 <MX_SPI1_Init+0x74>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013b2:	4b0b      	ldr	r3, [pc, #44]	; (80013e0 <MX_SPI1_Init+0x74>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80013b8:	4b09      	ldr	r3, [pc, #36]	; (80013e0 <MX_SPI1_Init+0x74>)
 80013ba:	2207      	movs	r2, #7
 80013bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80013be:	4b08      	ldr	r3, [pc, #32]	; (80013e0 <MX_SPI1_Init+0x74>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80013c4:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <MX_SPI1_Init+0x74>)
 80013c6:	2208      	movs	r2, #8
 80013c8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80013ca:	4805      	ldr	r0, [pc, #20]	; (80013e0 <MX_SPI1_Init+0x74>)
 80013cc:	f002 fbe0 	bl	8003b90 <HAL_SPI_Init>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80013d6:	f7ff ffc1 	bl	800135c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80013da:	bf00      	nop
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	20000304 	.word	0x20000304
 80013e4:	40013000 	.word	0x40013000

080013e8 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80013ec:	4b1b      	ldr	r3, [pc, #108]	; (800145c <MX_SPI2_Init+0x74>)
 80013ee:	4a1c      	ldr	r2, [pc, #112]	; (8001460 <MX_SPI2_Init+0x78>)
 80013f0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80013f2:	4b1a      	ldr	r3, [pc, #104]	; (800145c <MX_SPI2_Init+0x74>)
 80013f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013f8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80013fa:	4b18      	ldr	r3, [pc, #96]	; (800145c <MX_SPI2_Init+0x74>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001400:	4b16      	ldr	r3, [pc, #88]	; (800145c <MX_SPI2_Init+0x74>)
 8001402:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001406:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001408:	4b14      	ldr	r3, [pc, #80]	; (800145c <MX_SPI2_Init+0x74>)
 800140a:	2200      	movs	r2, #0
 800140c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800140e:	4b13      	ldr	r3, [pc, #76]	; (800145c <MX_SPI2_Init+0x74>)
 8001410:	2200      	movs	r2, #0
 8001412:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001414:	4b11      	ldr	r3, [pc, #68]	; (800145c <MX_SPI2_Init+0x74>)
 8001416:	f44f 7200 	mov.w	r2, #512	; 0x200
 800141a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800141c:	4b0f      	ldr	r3, [pc, #60]	; (800145c <MX_SPI2_Init+0x74>)
 800141e:	2210      	movs	r2, #16
 8001420:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001422:	4b0e      	ldr	r3, [pc, #56]	; (800145c <MX_SPI2_Init+0x74>)
 8001424:	2200      	movs	r2, #0
 8001426:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001428:	4b0c      	ldr	r3, [pc, #48]	; (800145c <MX_SPI2_Init+0x74>)
 800142a:	2200      	movs	r2, #0
 800142c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800142e:	4b0b      	ldr	r3, [pc, #44]	; (800145c <MX_SPI2_Init+0x74>)
 8001430:	2200      	movs	r2, #0
 8001432:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001434:	4b09      	ldr	r3, [pc, #36]	; (800145c <MX_SPI2_Init+0x74>)
 8001436:	2207      	movs	r2, #7
 8001438:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800143a:	4b08      	ldr	r3, [pc, #32]	; (800145c <MX_SPI2_Init+0x74>)
 800143c:	2200      	movs	r2, #0
 800143e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001440:	4b06      	ldr	r3, [pc, #24]	; (800145c <MX_SPI2_Init+0x74>)
 8001442:	2208      	movs	r2, #8
 8001444:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001446:	4805      	ldr	r0, [pc, #20]	; (800145c <MX_SPI2_Init+0x74>)
 8001448:	f002 fba2 	bl	8003b90 <HAL_SPI_Init>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001452:	f7ff ff83 	bl	800135c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	20000368 	.word	0x20000368
 8001460:	40003800 	.word	0x40003800

08001464 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b08c      	sub	sp, #48	; 0x30
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146c:	f107 031c 	add.w	r3, r7, #28
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	605a      	str	r2, [r3, #4]
 8001476:	609a      	str	r2, [r3, #8]
 8001478:	60da      	str	r2, [r3, #12]
 800147a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a3d      	ldr	r2, [pc, #244]	; (8001578 <HAL_SPI_MspInit+0x114>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d129      	bne.n	80014da <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001486:	4b3d      	ldr	r3, [pc, #244]	; (800157c <HAL_SPI_MspInit+0x118>)
 8001488:	699b      	ldr	r3, [r3, #24]
 800148a:	4a3c      	ldr	r2, [pc, #240]	; (800157c <HAL_SPI_MspInit+0x118>)
 800148c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001490:	6193      	str	r3, [r2, #24]
 8001492:	4b3a      	ldr	r3, [pc, #232]	; (800157c <HAL_SPI_MspInit+0x118>)
 8001494:	699b      	ldr	r3, [r3, #24]
 8001496:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800149a:	61bb      	str	r3, [r7, #24]
 800149c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800149e:	4b37      	ldr	r3, [pc, #220]	; (800157c <HAL_SPI_MspInit+0x118>)
 80014a0:	695b      	ldr	r3, [r3, #20]
 80014a2:	4a36      	ldr	r2, [pc, #216]	; (800157c <HAL_SPI_MspInit+0x118>)
 80014a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014a8:	6153      	str	r3, [r2, #20]
 80014aa:	4b34      	ldr	r3, [pc, #208]	; (800157c <HAL_SPI_MspInit+0x118>)
 80014ac:	695b      	ldr	r3, [r3, #20]
 80014ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014b2:	617b      	str	r3, [r7, #20]
 80014b4:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 80014b6:	23e0      	movs	r3, #224	; 0xe0
 80014b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ba:	2302      	movs	r3, #2
 80014bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014be:	2300      	movs	r3, #0
 80014c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014c2:	2303      	movs	r3, #3
 80014c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014c6:	2305      	movs	r3, #5
 80014c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ca:	f107 031c 	add.w	r3, r7, #28
 80014ce:	4619      	mov	r1, r3
 80014d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014d4:	f000 fbc2 	bl	8001c5c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80014d8:	e04a      	b.n	8001570 <HAL_SPI_MspInit+0x10c>
  else if(spiHandle->Instance==SPI2)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a28      	ldr	r2, [pc, #160]	; (8001580 <HAL_SPI_MspInit+0x11c>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d145      	bne.n	8001570 <HAL_SPI_MspInit+0x10c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80014e4:	4b25      	ldr	r3, [pc, #148]	; (800157c <HAL_SPI_MspInit+0x118>)
 80014e6:	69db      	ldr	r3, [r3, #28]
 80014e8:	4a24      	ldr	r2, [pc, #144]	; (800157c <HAL_SPI_MspInit+0x118>)
 80014ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014ee:	61d3      	str	r3, [r2, #28]
 80014f0:	4b22      	ldr	r3, [pc, #136]	; (800157c <HAL_SPI_MspInit+0x118>)
 80014f2:	69db      	ldr	r3, [r3, #28]
 80014f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014f8:	613b      	str	r3, [r7, #16]
 80014fa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80014fc:	4b1f      	ldr	r3, [pc, #124]	; (800157c <HAL_SPI_MspInit+0x118>)
 80014fe:	695b      	ldr	r3, [r3, #20]
 8001500:	4a1e      	ldr	r2, [pc, #120]	; (800157c <HAL_SPI_MspInit+0x118>)
 8001502:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001506:	6153      	str	r3, [r2, #20]
 8001508:	4b1c      	ldr	r3, [pc, #112]	; (800157c <HAL_SPI_MspInit+0x118>)
 800150a:	695b      	ldr	r3, [r3, #20]
 800150c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001510:	60fb      	str	r3, [r7, #12]
 8001512:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001514:	4b19      	ldr	r3, [pc, #100]	; (800157c <HAL_SPI_MspInit+0x118>)
 8001516:	695b      	ldr	r3, [r3, #20]
 8001518:	4a18      	ldr	r2, [pc, #96]	; (800157c <HAL_SPI_MspInit+0x118>)
 800151a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800151e:	6153      	str	r3, [r2, #20]
 8001520:	4b16      	ldr	r3, [pc, #88]	; (800157c <HAL_SPI_MspInit+0x118>)
 8001522:	695b      	ldr	r3, [r3, #20]
 8001524:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001528:	60bb      	str	r3, [r7, #8]
 800152a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800152c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001530:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001532:	2302      	movs	r3, #2
 8001534:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001536:	2300      	movs	r3, #0
 8001538:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800153a:	2303      	movs	r3, #3
 800153c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800153e:	2305      	movs	r3, #5
 8001540:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001542:	f107 031c 	add.w	r3, r7, #28
 8001546:	4619      	mov	r1, r3
 8001548:	480e      	ldr	r0, [pc, #56]	; (8001584 <HAL_SPI_MspInit+0x120>)
 800154a:	f000 fb87 	bl	8001c5c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800154e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001552:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001554:	2302      	movs	r3, #2
 8001556:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001558:	2300      	movs	r3, #0
 800155a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800155c:	2303      	movs	r3, #3
 800155e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001560:	2305      	movs	r3, #5
 8001562:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001564:	f107 031c 	add.w	r3, r7, #28
 8001568:	4619      	mov	r1, r3
 800156a:	4807      	ldr	r0, [pc, #28]	; (8001588 <HAL_SPI_MspInit+0x124>)
 800156c:	f000 fb76 	bl	8001c5c <HAL_GPIO_Init>
}
 8001570:	bf00      	nop
 8001572:	3730      	adds	r7, #48	; 0x30
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	40013000 	.word	0x40013000
 800157c:	40021000 	.word	0x40021000
 8001580:	40003800 	.word	0x40003800
 8001584:	48001400 	.word	0x48001400
 8001588:	48000400 	.word	0x48000400

0800158c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001592:	4b0f      	ldr	r3, [pc, #60]	; (80015d0 <HAL_MspInit+0x44>)
 8001594:	699b      	ldr	r3, [r3, #24]
 8001596:	4a0e      	ldr	r2, [pc, #56]	; (80015d0 <HAL_MspInit+0x44>)
 8001598:	f043 0301 	orr.w	r3, r3, #1
 800159c:	6193      	str	r3, [r2, #24]
 800159e:	4b0c      	ldr	r3, [pc, #48]	; (80015d0 <HAL_MspInit+0x44>)
 80015a0:	699b      	ldr	r3, [r3, #24]
 80015a2:	f003 0301 	and.w	r3, r3, #1
 80015a6:	607b      	str	r3, [r7, #4]
 80015a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015aa:	4b09      	ldr	r3, [pc, #36]	; (80015d0 <HAL_MspInit+0x44>)
 80015ac:	69db      	ldr	r3, [r3, #28]
 80015ae:	4a08      	ldr	r2, [pc, #32]	; (80015d0 <HAL_MspInit+0x44>)
 80015b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015b4:	61d3      	str	r3, [r2, #28]
 80015b6:	4b06      	ldr	r3, [pc, #24]	; (80015d0 <HAL_MspInit+0x44>)
 80015b8:	69db      	ldr	r3, [r3, #28]
 80015ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015be:	603b      	str	r3, [r7, #0]
 80015c0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80015c2:	2007      	movs	r0, #7
 80015c4:	f000 fb08 	bl	8001bd8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015c8:	bf00      	nop
 80015ca:	3708      	adds	r7, #8
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	40021000 	.word	0x40021000

080015d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015d8:	e7fe      	b.n	80015d8 <NMI_Handler+0x4>

080015da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015da:	b480      	push	{r7}
 80015dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015de:	e7fe      	b.n	80015de <HardFault_Handler+0x4>

080015e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015e4:	e7fe      	b.n	80015e4 <MemManage_Handler+0x4>

080015e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015e6:	b480      	push	{r7}
 80015e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015ea:	e7fe      	b.n	80015ea <BusFault_Handler+0x4>

080015ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015f0:	e7fe      	b.n	80015f0 <UsageFault_Handler+0x4>

080015f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015f2:	b480      	push	{r7}
 80015f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015f6:	bf00      	nop
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr

08001600 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001604:	bf00      	nop
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr

0800160e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800160e:	b480      	push	{r7}
 8001610:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001612:	bf00      	nop
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001620:	f000 f9ea 	bl	80019f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001624:	bf00      	nop
 8001626:	bd80      	pop	{r7, pc}

08001628 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(OPPOSITEHIT_BTN_Pin);
 800162c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001630:	f000 fcbe 	bl	8001fb0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001634:	bf00      	nop
 8001636:	bd80      	pop	{r7, pc}

08001638 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break and TIM15 interrupts.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800163c:	4802      	ldr	r0, [pc, #8]	; (8001648 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 800163e:	f002 ff16 	bl	800446e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	200003d0 	.word	0x200003d0

0800164c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001650:	4802      	ldr	r0, [pc, #8]	; (800165c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001652:	f002 ff0c 	bl	800446e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001656:	bf00      	nop
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	200003d0 	.word	0x200003d0

08001660 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger, commutation and TIM17 interrupts.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001664:	4802      	ldr	r0, [pc, #8]	; (8001670 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8001666:	f002 ff02 	bl	800446e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 800166a:	bf00      	nop
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	200003d0 	.word	0x200003d0

08001674 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001678:	4802      	ldr	r0, [pc, #8]	; (8001684 <TIM1_CC_IRQHandler+0x10>)
 800167a:	f002 fef8 	bl	800446e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	200003d0 	.word	0x200003d0

08001688 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TABLEHIT_BTN_Pin);
 800168c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001690:	f000 fc8e 	bl	8001fb0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001694:	bf00      	nop
 8001696:	bd80      	pop	{r7, pc}

08001698 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b086      	sub	sp, #24
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016a0:	4a14      	ldr	r2, [pc, #80]	; (80016f4 <_sbrk+0x5c>)
 80016a2:	4b15      	ldr	r3, [pc, #84]	; (80016f8 <_sbrk+0x60>)
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016ac:	4b13      	ldr	r3, [pc, #76]	; (80016fc <_sbrk+0x64>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d102      	bne.n	80016ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016b4:	4b11      	ldr	r3, [pc, #68]	; (80016fc <_sbrk+0x64>)
 80016b6:	4a12      	ldr	r2, [pc, #72]	; (8001700 <_sbrk+0x68>)
 80016b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016ba:	4b10      	ldr	r3, [pc, #64]	; (80016fc <_sbrk+0x64>)
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4413      	add	r3, r2
 80016c2:	693a      	ldr	r2, [r7, #16]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d207      	bcs.n	80016d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016c8:	f003 fae6 	bl	8004c98 <__errno>
 80016cc:	4603      	mov	r3, r0
 80016ce:	220c      	movs	r2, #12
 80016d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016d2:	f04f 33ff 	mov.w	r3, #4294967295
 80016d6:	e009      	b.n	80016ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016d8:	4b08      	ldr	r3, [pc, #32]	; (80016fc <_sbrk+0x64>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016de:	4b07      	ldr	r3, [pc, #28]	; (80016fc <_sbrk+0x64>)
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4413      	add	r3, r2
 80016e6:	4a05      	ldr	r2, [pc, #20]	; (80016fc <_sbrk+0x64>)
 80016e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016ea:	68fb      	ldr	r3, [r7, #12]
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3718      	adds	r7, #24
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	2000a000 	.word	0x2000a000
 80016f8:	00000400 	.word	0x00000400
 80016fc:	200003cc 	.word	0x200003cc
 8001700:	20000720 	.word	0x20000720

08001704 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001708:	4b06      	ldr	r3, [pc, #24]	; (8001724 <SystemInit+0x20>)
 800170a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800170e:	4a05      	ldr	r2, [pc, #20]	; (8001724 <SystemInit+0x20>)
 8001710:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001714:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001718:	bf00      	nop
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	e000ed00 	.word	0xe000ed00

08001728 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b088      	sub	sp, #32
 800172c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800172e:	f107 0310 	add.w	r3, r7, #16
 8001732:	2200      	movs	r2, #0
 8001734:	601a      	str	r2, [r3, #0]
 8001736:	605a      	str	r2, [r3, #4]
 8001738:	609a      	str	r2, [r3, #8]
 800173a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800173c:	1d3b      	adds	r3, r7, #4
 800173e:	2200      	movs	r2, #0
 8001740:	601a      	str	r2, [r3, #0]
 8001742:	605a      	str	r2, [r3, #4]
 8001744:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001746:	4b20      	ldr	r3, [pc, #128]	; (80017c8 <MX_TIM1_Init+0xa0>)
 8001748:	4a20      	ldr	r2, [pc, #128]	; (80017cc <MX_TIM1_Init+0xa4>)
 800174a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 47999;
 800174c:	4b1e      	ldr	r3, [pc, #120]	; (80017c8 <MX_TIM1_Init+0xa0>)
 800174e:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 8001752:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001754:	4b1c      	ldr	r3, [pc, #112]	; (80017c8 <MX_TIM1_Init+0xa0>)
 8001756:	2200      	movs	r2, #0
 8001758:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 800175a:	4b1b      	ldr	r3, [pc, #108]	; (80017c8 <MX_TIM1_Init+0xa0>)
 800175c:	2264      	movs	r2, #100	; 0x64
 800175e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001760:	4b19      	ldr	r3, [pc, #100]	; (80017c8 <MX_TIM1_Init+0xa0>)
 8001762:	2200      	movs	r2, #0
 8001764:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001766:	4b18      	ldr	r3, [pc, #96]	; (80017c8 <MX_TIM1_Init+0xa0>)
 8001768:	2200      	movs	r2, #0
 800176a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800176c:	4b16      	ldr	r3, [pc, #88]	; (80017c8 <MX_TIM1_Init+0xa0>)
 800176e:	2200      	movs	r2, #0
 8001770:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001772:	4815      	ldr	r0, [pc, #84]	; (80017c8 <MX_TIM1_Init+0xa0>)
 8001774:	f002 fd8a 	bl	800428c <HAL_TIM_Base_Init>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800177e:	f7ff fded 	bl	800135c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001782:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001786:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001788:	f107 0310 	add.w	r3, r7, #16
 800178c:	4619      	mov	r1, r3
 800178e:	480e      	ldr	r0, [pc, #56]	; (80017c8 <MX_TIM1_Init+0xa0>)
 8001790:	f002 ff8c 	bl	80046ac <HAL_TIM_ConfigClockSource>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800179a:	f7ff fddf 	bl	800135c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800179e:	2300      	movs	r3, #0
 80017a0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80017a2:	2300      	movs	r3, #0
 80017a4:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017a6:	2300      	movs	r3, #0
 80017a8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80017aa:	1d3b      	adds	r3, r7, #4
 80017ac:	4619      	mov	r1, r3
 80017ae:	4806      	ldr	r0, [pc, #24]	; (80017c8 <MX_TIM1_Init+0xa0>)
 80017b0:	f003 f998 	bl	8004ae4 <HAL_TIMEx_MasterConfigSynchronization>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80017ba:	f7ff fdcf 	bl	800135c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80017be:	bf00      	nop
 80017c0:	3720      	adds	r7, #32
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	200003d0 	.word	0x200003d0
 80017cc:	40012c00 	.word	0x40012c00

080017d0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a19      	ldr	r2, [pc, #100]	; (8001844 <HAL_TIM_Base_MspInit+0x74>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d12b      	bne.n	800183a <HAL_TIM_Base_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80017e2:	4b19      	ldr	r3, [pc, #100]	; (8001848 <HAL_TIM_Base_MspInit+0x78>)
 80017e4:	699b      	ldr	r3, [r3, #24]
 80017e6:	4a18      	ldr	r2, [pc, #96]	; (8001848 <HAL_TIM_Base_MspInit+0x78>)
 80017e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80017ec:	6193      	str	r3, [r2, #24]
 80017ee:	4b16      	ldr	r3, [pc, #88]	; (8001848 <HAL_TIM_Base_MspInit+0x78>)
 80017f0:	699b      	ldr	r3, [r3, #24]
 80017f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017f6:	60fb      	str	r3, [r7, #12]
 80017f8:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80017fa:	2200      	movs	r2, #0
 80017fc:	2100      	movs	r1, #0
 80017fe:	2018      	movs	r0, #24
 8001800:	f000 f9f5 	bl	8001bee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001804:	2018      	movs	r0, #24
 8001806:	f000 fa0e 	bl	8001c26 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800180a:	2200      	movs	r2, #0
 800180c:	2100      	movs	r1, #0
 800180e:	2019      	movs	r0, #25
 8001810:	f000 f9ed 	bl	8001bee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001814:	2019      	movs	r0, #25
 8001816:	f000 fa06 	bl	8001c26 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 800181a:	2200      	movs	r2, #0
 800181c:	2100      	movs	r1, #0
 800181e:	201a      	movs	r0, #26
 8001820:	f000 f9e5 	bl	8001bee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001824:	201a      	movs	r0, #26
 8001826:	f000 f9fe 	bl	8001c26 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800182a:	2200      	movs	r2, #0
 800182c:	2100      	movs	r1, #0
 800182e:	201b      	movs	r0, #27
 8001830:	f000 f9dd 	bl	8001bee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001834:	201b      	movs	r0, #27
 8001836:	f000 f9f6 	bl	8001c26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800183a:	bf00      	nop
 800183c:	3710      	adds	r7, #16
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	40012c00 	.word	0x40012c00
 8001848:	40021000 	.word	0x40021000

0800184c <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8001850:	4b0d      	ldr	r3, [pc, #52]	; (8001888 <MX_USB_PCD_Init+0x3c>)
 8001852:	4a0e      	ldr	r2, [pc, #56]	; (800188c <MX_USB_PCD_Init+0x40>)
 8001854:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8001856:	4b0c      	ldr	r3, [pc, #48]	; (8001888 <MX_USB_PCD_Init+0x3c>)
 8001858:	2208      	movs	r2, #8
 800185a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800185c:	4b0a      	ldr	r3, [pc, #40]	; (8001888 <MX_USB_PCD_Init+0x3c>)
 800185e:	2202      	movs	r2, #2
 8001860:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001862:	4b09      	ldr	r3, [pc, #36]	; (8001888 <MX_USB_PCD_Init+0x3c>)
 8001864:	2202      	movs	r2, #2
 8001866:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001868:	4b07      	ldr	r3, [pc, #28]	; (8001888 <MX_USB_PCD_Init+0x3c>)
 800186a:	2200      	movs	r2, #0
 800186c:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800186e:	4b06      	ldr	r3, [pc, #24]	; (8001888 <MX_USB_PCD_Init+0x3c>)
 8001870:	2200      	movs	r2, #0
 8001872:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001874:	4804      	ldr	r0, [pc, #16]	; (8001888 <MX_USB_PCD_Init+0x3c>)
 8001876:	f000 fcd9 	bl	800222c <HAL_PCD_Init>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8001880:	f7ff fd6c 	bl	800135c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001884:	bf00      	nop
 8001886:	bd80      	pop	{r7, pc}
 8001888:	2000041c 	.word	0x2000041c
 800188c:	40005c00 	.word	0x40005c00

08001890 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b08a      	sub	sp, #40	; 0x28
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001898:	f107 0314 	add.w	r3, r7, #20
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	605a      	str	r2, [r3, #4]
 80018a2:	609a      	str	r2, [r3, #8]
 80018a4:	60da      	str	r2, [r3, #12]
 80018a6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a18      	ldr	r2, [pc, #96]	; (8001910 <HAL_PCD_MspInit+0x80>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d129      	bne.n	8001906 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b2:	4b18      	ldr	r3, [pc, #96]	; (8001914 <HAL_PCD_MspInit+0x84>)
 80018b4:	695b      	ldr	r3, [r3, #20]
 80018b6:	4a17      	ldr	r2, [pc, #92]	; (8001914 <HAL_PCD_MspInit+0x84>)
 80018b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018bc:	6153      	str	r3, [r2, #20]
 80018be:	4b15      	ldr	r3, [pc, #84]	; (8001914 <HAL_PCD_MspInit+0x84>)
 80018c0:	695b      	ldr	r3, [r3, #20]
 80018c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c6:	613b      	str	r3, [r7, #16]
 80018c8:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 80018ca:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80018ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d0:	2302      	movs	r3, #2
 80018d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d4:	2300      	movs	r3, #0
 80018d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018d8:	2303      	movs	r3, #3
 80018da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 80018dc:	230e      	movs	r3, #14
 80018de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018e0:	f107 0314 	add.w	r3, r7, #20
 80018e4:	4619      	mov	r1, r3
 80018e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018ea:	f000 f9b7 	bl	8001c5c <HAL_GPIO_Init>

    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80018ee:	4b09      	ldr	r3, [pc, #36]	; (8001914 <HAL_PCD_MspInit+0x84>)
 80018f0:	69db      	ldr	r3, [r3, #28]
 80018f2:	4a08      	ldr	r2, [pc, #32]	; (8001914 <HAL_PCD_MspInit+0x84>)
 80018f4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80018f8:	61d3      	str	r3, [r2, #28]
 80018fa:	4b06      	ldr	r3, [pc, #24]	; (8001914 <HAL_PCD_MspInit+0x84>)
 80018fc:	69db      	ldr	r3, [r3, #28]
 80018fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8001906:	bf00      	nop
 8001908:	3728      	adds	r7, #40	; 0x28
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	40005c00 	.word	0x40005c00
 8001914:	40021000 	.word	0x40021000

08001918 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001918:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001950 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800191c:	480d      	ldr	r0, [pc, #52]	; (8001954 <LoopForever+0x6>)
  ldr r1, =_edata
 800191e:	490e      	ldr	r1, [pc, #56]	; (8001958 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001920:	4a0e      	ldr	r2, [pc, #56]	; (800195c <LoopForever+0xe>)
  movs r3, #0
 8001922:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001924:	e002      	b.n	800192c <LoopCopyDataInit>

08001926 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001926:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001928:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800192a:	3304      	adds	r3, #4

0800192c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800192c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800192e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001930:	d3f9      	bcc.n	8001926 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001932:	4a0b      	ldr	r2, [pc, #44]	; (8001960 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001934:	4c0b      	ldr	r4, [pc, #44]	; (8001964 <LoopForever+0x16>)
  movs r3, #0
 8001936:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001938:	e001      	b.n	800193e <LoopFillZerobss>

0800193a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800193a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800193c:	3204      	adds	r2, #4

0800193e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800193e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001940:	d3fb      	bcc.n	800193a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001942:	f7ff fedf 	bl	8001704 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001946:	f003 f9ad 	bl	8004ca4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800194a:	f7ff fa3d 	bl	8000dc8 <main>

0800194e <LoopForever>:

LoopForever:
    b LoopForever
 800194e:	e7fe      	b.n	800194e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001950:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001954:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001958:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800195c:	08005e3c 	.word	0x08005e3c
  ldr r2, =_sbss
 8001960:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001964:	2000071c 	.word	0x2000071c

08001968 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001968:	e7fe      	b.n	8001968 <ADC1_2_IRQHandler>
	...

0800196c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001970:	4b08      	ldr	r3, [pc, #32]	; (8001994 <HAL_Init+0x28>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a07      	ldr	r2, [pc, #28]	; (8001994 <HAL_Init+0x28>)
 8001976:	f043 0310 	orr.w	r3, r3, #16
 800197a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800197c:	2003      	movs	r0, #3
 800197e:	f000 f92b 	bl	8001bd8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001982:	2000      	movs	r0, #0
 8001984:	f000 f808 	bl	8001998 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001988:	f7ff fe00 	bl	800158c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800198c:	2300      	movs	r3, #0
}
 800198e:	4618      	mov	r0, r3
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	40022000 	.word	0x40022000

08001998 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019a0:	4b12      	ldr	r3, [pc, #72]	; (80019ec <HAL_InitTick+0x54>)
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	4b12      	ldr	r3, [pc, #72]	; (80019f0 <HAL_InitTick+0x58>)
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	4619      	mov	r1, r3
 80019aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80019b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019b6:	4618      	mov	r0, r3
 80019b8:	f000 f943 	bl	8001c42 <HAL_SYSTICK_Config>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e00e      	b.n	80019e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2b0f      	cmp	r3, #15
 80019ca:	d80a      	bhi.n	80019e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019cc:	2200      	movs	r2, #0
 80019ce:	6879      	ldr	r1, [r7, #4]
 80019d0:	f04f 30ff 	mov.w	r0, #4294967295
 80019d4:	f000 f90b 	bl	8001bee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019d8:	4a06      	ldr	r2, [pc, #24]	; (80019f4 <HAL_InitTick+0x5c>)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80019de:	2300      	movs	r3, #0
 80019e0:	e000      	b.n	80019e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3708      	adds	r7, #8
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	20000004 	.word	0x20000004
 80019f0:	2000000c 	.word	0x2000000c
 80019f4:	20000008 	.word	0x20000008

080019f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019fc:	4b06      	ldr	r3, [pc, #24]	; (8001a18 <HAL_IncTick+0x20>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	461a      	mov	r2, r3
 8001a02:	4b06      	ldr	r3, [pc, #24]	; (8001a1c <HAL_IncTick+0x24>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4413      	add	r3, r2
 8001a08:	4a04      	ldr	r2, [pc, #16]	; (8001a1c <HAL_IncTick+0x24>)
 8001a0a:	6013      	str	r3, [r2, #0]
}
 8001a0c:	bf00      	nop
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	2000000c 	.word	0x2000000c
 8001a1c:	20000708 	.word	0x20000708

08001a20 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  return uwTick;  
 8001a24:	4b03      	ldr	r3, [pc, #12]	; (8001a34 <HAL_GetTick+0x14>)
 8001a26:	681b      	ldr	r3, [r3, #0]
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	20000708 	.word	0x20000708

08001a38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b085      	sub	sp, #20
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f003 0307 	and.w	r3, r3, #7
 8001a46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a48:	4b0c      	ldr	r3, [pc, #48]	; (8001a7c <__NVIC_SetPriorityGrouping+0x44>)
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a4e:	68ba      	ldr	r2, [r7, #8]
 8001a50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a54:	4013      	ands	r3, r2
 8001a56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a6a:	4a04      	ldr	r2, [pc, #16]	; (8001a7c <__NVIC_SetPriorityGrouping+0x44>)
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	60d3      	str	r3, [r2, #12]
}
 8001a70:	bf00      	nop
 8001a72:	3714      	adds	r7, #20
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr
 8001a7c:	e000ed00 	.word	0xe000ed00

08001a80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a84:	4b04      	ldr	r3, [pc, #16]	; (8001a98 <__NVIC_GetPriorityGrouping+0x18>)
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	0a1b      	lsrs	r3, r3, #8
 8001a8a:	f003 0307 	and.w	r3, r3, #7
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr
 8001a98:	e000ed00 	.word	0xe000ed00

08001a9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	db0b      	blt.n	8001ac6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001aae:	79fb      	ldrb	r3, [r7, #7]
 8001ab0:	f003 021f 	and.w	r2, r3, #31
 8001ab4:	4907      	ldr	r1, [pc, #28]	; (8001ad4 <__NVIC_EnableIRQ+0x38>)
 8001ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aba:	095b      	lsrs	r3, r3, #5
 8001abc:	2001      	movs	r0, #1
 8001abe:	fa00 f202 	lsl.w	r2, r0, r2
 8001ac2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ac6:	bf00      	nop
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	e000e100 	.word	0xe000e100

08001ad8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	4603      	mov	r3, r0
 8001ae0:	6039      	str	r1, [r7, #0]
 8001ae2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ae4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	db0a      	blt.n	8001b02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	b2da      	uxtb	r2, r3
 8001af0:	490c      	ldr	r1, [pc, #48]	; (8001b24 <__NVIC_SetPriority+0x4c>)
 8001af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af6:	0112      	lsls	r2, r2, #4
 8001af8:	b2d2      	uxtb	r2, r2
 8001afa:	440b      	add	r3, r1
 8001afc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b00:	e00a      	b.n	8001b18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	b2da      	uxtb	r2, r3
 8001b06:	4908      	ldr	r1, [pc, #32]	; (8001b28 <__NVIC_SetPriority+0x50>)
 8001b08:	79fb      	ldrb	r3, [r7, #7]
 8001b0a:	f003 030f 	and.w	r3, r3, #15
 8001b0e:	3b04      	subs	r3, #4
 8001b10:	0112      	lsls	r2, r2, #4
 8001b12:	b2d2      	uxtb	r2, r2
 8001b14:	440b      	add	r3, r1
 8001b16:	761a      	strb	r2, [r3, #24]
}
 8001b18:	bf00      	nop
 8001b1a:	370c      	adds	r7, #12
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr
 8001b24:	e000e100 	.word	0xe000e100
 8001b28:	e000ed00 	.word	0xe000ed00

08001b2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b089      	sub	sp, #36	; 0x24
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	60f8      	str	r0, [r7, #12]
 8001b34:	60b9      	str	r1, [r7, #8]
 8001b36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	f003 0307 	and.w	r3, r3, #7
 8001b3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	f1c3 0307 	rsb	r3, r3, #7
 8001b46:	2b04      	cmp	r3, #4
 8001b48:	bf28      	it	cs
 8001b4a:	2304      	movcs	r3, #4
 8001b4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	3304      	adds	r3, #4
 8001b52:	2b06      	cmp	r3, #6
 8001b54:	d902      	bls.n	8001b5c <NVIC_EncodePriority+0x30>
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	3b03      	subs	r3, #3
 8001b5a:	e000      	b.n	8001b5e <NVIC_EncodePriority+0x32>
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b60:	f04f 32ff 	mov.w	r2, #4294967295
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6a:	43da      	mvns	r2, r3
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	401a      	ands	r2, r3
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b74:	f04f 31ff 	mov.w	r1, #4294967295
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b7e:	43d9      	mvns	r1, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b84:	4313      	orrs	r3, r2
         );
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3724      	adds	r7, #36	; 0x24
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
	...

08001b94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ba4:	d301      	bcc.n	8001baa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e00f      	b.n	8001bca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001baa:	4a0a      	ldr	r2, [pc, #40]	; (8001bd4 <SysTick_Config+0x40>)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	3b01      	subs	r3, #1
 8001bb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bb2:	210f      	movs	r1, #15
 8001bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8001bb8:	f7ff ff8e 	bl	8001ad8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bbc:	4b05      	ldr	r3, [pc, #20]	; (8001bd4 <SysTick_Config+0x40>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bc2:	4b04      	ldr	r3, [pc, #16]	; (8001bd4 <SysTick_Config+0x40>)
 8001bc4:	2207      	movs	r2, #7
 8001bc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bc8:	2300      	movs	r3, #0
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	e000e010 	.word	0xe000e010

08001bd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f7ff ff29 	bl	8001a38 <__NVIC_SetPriorityGrouping>
}
 8001be6:	bf00      	nop
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}

08001bee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bee:	b580      	push	{r7, lr}
 8001bf0:	b086      	sub	sp, #24
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	60b9      	str	r1, [r7, #8]
 8001bf8:	607a      	str	r2, [r7, #4]
 8001bfa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c00:	f7ff ff3e 	bl	8001a80 <__NVIC_GetPriorityGrouping>
 8001c04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	68b9      	ldr	r1, [r7, #8]
 8001c0a:	6978      	ldr	r0, [r7, #20]
 8001c0c:	f7ff ff8e 	bl	8001b2c <NVIC_EncodePriority>
 8001c10:	4602      	mov	r2, r0
 8001c12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c16:	4611      	mov	r1, r2
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7ff ff5d 	bl	8001ad8 <__NVIC_SetPriority>
}
 8001c1e:	bf00      	nop
 8001c20:	3718      	adds	r7, #24
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b082      	sub	sp, #8
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7ff ff31 	bl	8001a9c <__NVIC_EnableIRQ>
}
 8001c3a:	bf00      	nop
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b082      	sub	sp, #8
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f7ff ffa2 	bl	8001b94 <SysTick_Config>
 8001c50:	4603      	mov	r3, r0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
	...

08001c5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b087      	sub	sp, #28
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c66:	2300      	movs	r3, #0
 8001c68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c6a:	e154      	b.n	8001f16 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	2101      	movs	r1, #1
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	fa01 f303 	lsl.w	r3, r1, r3
 8001c78:	4013      	ands	r3, r2
 8001c7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	f000 8146 	beq.w	8001f10 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f003 0303 	and.w	r3, r3, #3
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d005      	beq.n	8001c9c <HAL_GPIO_Init+0x40>
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f003 0303 	and.w	r3, r3, #3
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d130      	bne.n	8001cfe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	005b      	lsls	r3, r3, #1
 8001ca6:	2203      	movs	r2, #3
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	43db      	mvns	r3, r3
 8001cae:	693a      	ldr	r2, [r7, #16]
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	68da      	ldr	r2, [r3, #12]
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	005b      	lsls	r3, r3, #1
 8001cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc0:	693a      	ldr	r2, [r7, #16]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	693a      	ldr	r2, [r7, #16]
 8001cca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cda:	43db      	mvns	r3, r3
 8001cdc:	693a      	ldr	r2, [r7, #16]
 8001cde:	4013      	ands	r3, r2
 8001ce0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	091b      	lsrs	r3, r3, #4
 8001ce8:	f003 0201 	and.w	r2, r3, #1
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf2:	693a      	ldr	r2, [r7, #16]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	693a      	ldr	r2, [r7, #16]
 8001cfc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f003 0303 	and.w	r3, r3, #3
 8001d06:	2b03      	cmp	r3, #3
 8001d08:	d017      	beq.n	8001d3a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	68db      	ldr	r3, [r3, #12]
 8001d0e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	2203      	movs	r2, #3
 8001d16:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1a:	43db      	mvns	r3, r3
 8001d1c:	693a      	ldr	r2, [r7, #16]
 8001d1e:	4013      	ands	r3, r2
 8001d20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	689a      	ldr	r2, [r3, #8]
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2e:	693a      	ldr	r2, [r7, #16]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	693a      	ldr	r2, [r7, #16]
 8001d38:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f003 0303 	and.w	r3, r3, #3
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d123      	bne.n	8001d8e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	08da      	lsrs	r2, r3, #3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	3208      	adds	r2, #8
 8001d4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d52:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	f003 0307 	and.w	r3, r3, #7
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	220f      	movs	r2, #15
 8001d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d62:	43db      	mvns	r3, r3
 8001d64:	693a      	ldr	r2, [r7, #16]
 8001d66:	4013      	ands	r3, r2
 8001d68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	691a      	ldr	r2, [r3, #16]
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	f003 0307 	and.w	r3, r3, #7
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7a:	693a      	ldr	r2, [r7, #16]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	08da      	lsrs	r2, r3, #3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	3208      	adds	r2, #8
 8001d88:	6939      	ldr	r1, [r7, #16]
 8001d8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	005b      	lsls	r3, r3, #1
 8001d98:	2203      	movs	r2, #3
 8001d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9e:	43db      	mvns	r3, r3
 8001da0:	693a      	ldr	r2, [r7, #16]
 8001da2:	4013      	ands	r3, r2
 8001da4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f003 0203 	and.w	r2, r3, #3
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	fa02 f303 	lsl.w	r3, r2, r3
 8001db6:	693a      	ldr	r2, [r7, #16]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	693a      	ldr	r2, [r7, #16]
 8001dc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	f000 80a0 	beq.w	8001f10 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dd0:	4b58      	ldr	r3, [pc, #352]	; (8001f34 <HAL_GPIO_Init+0x2d8>)
 8001dd2:	699b      	ldr	r3, [r3, #24]
 8001dd4:	4a57      	ldr	r2, [pc, #348]	; (8001f34 <HAL_GPIO_Init+0x2d8>)
 8001dd6:	f043 0301 	orr.w	r3, r3, #1
 8001dda:	6193      	str	r3, [r2, #24]
 8001ddc:	4b55      	ldr	r3, [pc, #340]	; (8001f34 <HAL_GPIO_Init+0x2d8>)
 8001dde:	699b      	ldr	r3, [r3, #24]
 8001de0:	f003 0301 	and.w	r3, r3, #1
 8001de4:	60bb      	str	r3, [r7, #8]
 8001de6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001de8:	4a53      	ldr	r2, [pc, #332]	; (8001f38 <HAL_GPIO_Init+0x2dc>)
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	089b      	lsrs	r3, r3, #2
 8001dee:	3302      	adds	r3, #2
 8001df0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001df4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	f003 0303 	and.w	r3, r3, #3
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	220f      	movs	r2, #15
 8001e00:	fa02 f303 	lsl.w	r3, r2, r3
 8001e04:	43db      	mvns	r3, r3
 8001e06:	693a      	ldr	r2, [r7, #16]
 8001e08:	4013      	ands	r3, r2
 8001e0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001e12:	d019      	beq.n	8001e48 <HAL_GPIO_Init+0x1ec>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	4a49      	ldr	r2, [pc, #292]	; (8001f3c <HAL_GPIO_Init+0x2e0>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d013      	beq.n	8001e44 <HAL_GPIO_Init+0x1e8>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	4a48      	ldr	r2, [pc, #288]	; (8001f40 <HAL_GPIO_Init+0x2e4>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d00d      	beq.n	8001e40 <HAL_GPIO_Init+0x1e4>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	4a47      	ldr	r2, [pc, #284]	; (8001f44 <HAL_GPIO_Init+0x2e8>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d007      	beq.n	8001e3c <HAL_GPIO_Init+0x1e0>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	4a46      	ldr	r2, [pc, #280]	; (8001f48 <HAL_GPIO_Init+0x2ec>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d101      	bne.n	8001e38 <HAL_GPIO_Init+0x1dc>
 8001e34:	2304      	movs	r3, #4
 8001e36:	e008      	b.n	8001e4a <HAL_GPIO_Init+0x1ee>
 8001e38:	2305      	movs	r3, #5
 8001e3a:	e006      	b.n	8001e4a <HAL_GPIO_Init+0x1ee>
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	e004      	b.n	8001e4a <HAL_GPIO_Init+0x1ee>
 8001e40:	2302      	movs	r3, #2
 8001e42:	e002      	b.n	8001e4a <HAL_GPIO_Init+0x1ee>
 8001e44:	2301      	movs	r3, #1
 8001e46:	e000      	b.n	8001e4a <HAL_GPIO_Init+0x1ee>
 8001e48:	2300      	movs	r3, #0
 8001e4a:	697a      	ldr	r2, [r7, #20]
 8001e4c:	f002 0203 	and.w	r2, r2, #3
 8001e50:	0092      	lsls	r2, r2, #2
 8001e52:	4093      	lsls	r3, r2
 8001e54:	693a      	ldr	r2, [r7, #16]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e5a:	4937      	ldr	r1, [pc, #220]	; (8001f38 <HAL_GPIO_Init+0x2dc>)
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	089b      	lsrs	r3, r3, #2
 8001e60:	3302      	adds	r3, #2
 8001e62:	693a      	ldr	r2, [r7, #16]
 8001e64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e68:	4b38      	ldr	r3, [pc, #224]	; (8001f4c <HAL_GPIO_Init+0x2f0>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	43db      	mvns	r3, r3
 8001e72:	693a      	ldr	r2, [r7, #16]
 8001e74:	4013      	ands	r3, r2
 8001e76:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d003      	beq.n	8001e8c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001e84:	693a      	ldr	r2, [r7, #16]
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001e8c:	4a2f      	ldr	r2, [pc, #188]	; (8001f4c <HAL_GPIO_Init+0x2f0>)
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001e92:	4b2e      	ldr	r3, [pc, #184]	; (8001f4c <HAL_GPIO_Init+0x2f0>)
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	43db      	mvns	r3, r3
 8001e9c:	693a      	ldr	r2, [r7, #16]
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d003      	beq.n	8001eb6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001eae:	693a      	ldr	r2, [r7, #16]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001eb6:	4a25      	ldr	r2, [pc, #148]	; (8001f4c <HAL_GPIO_Init+0x2f0>)
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ebc:	4b23      	ldr	r3, [pc, #140]	; (8001f4c <HAL_GPIO_Init+0x2f0>)
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	693a      	ldr	r2, [r7, #16]
 8001ec8:	4013      	ands	r3, r2
 8001eca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d003      	beq.n	8001ee0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001ed8:	693a      	ldr	r2, [r7, #16]
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001ee0:	4a1a      	ldr	r2, [pc, #104]	; (8001f4c <HAL_GPIO_Init+0x2f0>)
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ee6:	4b19      	ldr	r3, [pc, #100]	; (8001f4c <HAL_GPIO_Init+0x2f0>)
 8001ee8:	68db      	ldr	r3, [r3, #12]
 8001eea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	43db      	mvns	r3, r3
 8001ef0:	693a      	ldr	r2, [r7, #16]
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d003      	beq.n	8001f0a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001f02:	693a      	ldr	r2, [r7, #16]
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001f0a:	4a10      	ldr	r2, [pc, #64]	; (8001f4c <HAL_GPIO_Init+0x2f0>)
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	3301      	adds	r3, #1
 8001f14:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	fa22 f303 	lsr.w	r3, r2, r3
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	f47f aea3 	bne.w	8001c6c <HAL_GPIO_Init+0x10>
  }
}
 8001f26:	bf00      	nop
 8001f28:	bf00      	nop
 8001f2a:	371c      	adds	r7, #28
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr
 8001f34:	40021000 	.word	0x40021000
 8001f38:	40010000 	.word	0x40010000
 8001f3c:	48000400 	.word	0x48000400
 8001f40:	48000800 	.word	0x48000800
 8001f44:	48000c00 	.word	0x48000c00
 8001f48:	48001000 	.word	0x48001000
 8001f4c:	40010400 	.word	0x40010400

08001f50 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b085      	sub	sp, #20
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	460b      	mov	r3, r1
 8001f5a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	691a      	ldr	r2, [r3, #16]
 8001f60:	887b      	ldrh	r3, [r7, #2]
 8001f62:	4013      	ands	r3, r2
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d002      	beq.n	8001f6e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	73fb      	strb	r3, [r7, #15]
 8001f6c:	e001      	b.n	8001f72 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f72:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3714      	adds	r7, #20
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr

08001f80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	460b      	mov	r3, r1
 8001f8a:	807b      	strh	r3, [r7, #2]
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f90:	787b      	ldrb	r3, [r7, #1]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d003      	beq.n	8001f9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f96:	887a      	ldrh	r2, [r7, #2]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f9c:	e002      	b.n	8001fa4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f9e:	887a      	ldrh	r2, [r7, #2]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001fa4:	bf00      	nop
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001fba:	4b08      	ldr	r3, [pc, #32]	; (8001fdc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fbc:	695a      	ldr	r2, [r3, #20]
 8001fbe:	88fb      	ldrh	r3, [r7, #6]
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d006      	beq.n	8001fd4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001fc6:	4a05      	ldr	r2, [pc, #20]	; (8001fdc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fc8:	88fb      	ldrh	r3, [r7, #6]
 8001fca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001fcc:	88fb      	ldrh	r3, [r7, #6]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7fe ffa8 	bl	8000f24 <HAL_GPIO_EXTI_Callback>
  }
}
 8001fd4:	bf00      	nop
 8001fd6:	3708      	adds	r7, #8
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	40010400 	.word	0x40010400

08001fe0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d101      	bne.n	8001ff2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e081      	b.n	80020f6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d106      	bne.n	800200c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f7fe fa34 	bl	8000474 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2224      	movs	r2, #36	; 0x24
 8002010:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f022 0201 	bic.w	r2, r2, #1
 8002022:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	685a      	ldr	r2, [r3, #4]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002030:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	689a      	ldr	r2, [r3, #8]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002040:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	68db      	ldr	r3, [r3, #12]
 8002046:	2b01      	cmp	r3, #1
 8002048:	d107      	bne.n	800205a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	689a      	ldr	r2, [r3, #8]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002056:	609a      	str	r2, [r3, #8]
 8002058:	e006      	b.n	8002068 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	689a      	ldr	r2, [r3, #8]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002066:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	2b02      	cmp	r3, #2
 800206e:	d104      	bne.n	800207a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002078:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	6812      	ldr	r2, [r2, #0]
 8002084:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002088:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800208c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	68da      	ldr	r2, [r3, #12]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800209c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	691a      	ldr	r2, [r3, #16]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	695b      	ldr	r3, [r3, #20]
 80020a6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	699b      	ldr	r3, [r3, #24]
 80020ae:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	430a      	orrs	r2, r1
 80020b6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	69d9      	ldr	r1, [r3, #28]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6a1a      	ldr	r2, [r3, #32]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	430a      	orrs	r2, r1
 80020c6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f042 0201 	orr.w	r2, r2, #1
 80020d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2200      	movs	r2, #0
 80020dc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2220      	movs	r2, #32
 80020e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2200      	movs	r2, #0
 80020ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2200      	movs	r2, #0
 80020f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3708      	adds	r7, #8
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}

080020fe <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80020fe:	b480      	push	{r7}
 8002100:	b083      	sub	sp, #12
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
 8002106:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800210e:	b2db      	uxtb	r3, r3
 8002110:	2b20      	cmp	r3, #32
 8002112:	d138      	bne.n	8002186 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800211a:	2b01      	cmp	r3, #1
 800211c:	d101      	bne.n	8002122 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800211e:	2302      	movs	r3, #2
 8002120:	e032      	b.n	8002188 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2201      	movs	r2, #1
 8002126:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2224      	movs	r2, #36	; 0x24
 800212e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f022 0201 	bic.w	r2, r2, #1
 8002140:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002150:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	6819      	ldr	r1, [r3, #0]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	683a      	ldr	r2, [r7, #0]
 800215e:	430a      	orrs	r2, r1
 8002160:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f042 0201 	orr.w	r2, r2, #1
 8002170:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2220      	movs	r2, #32
 8002176:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002182:	2300      	movs	r3, #0
 8002184:	e000      	b.n	8002188 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002186:	2302      	movs	r3, #2
  }
}
 8002188:	4618      	mov	r0, r3
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002194:	b480      	push	{r7}
 8002196:	b085      	sub	sp, #20
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	2b20      	cmp	r3, #32
 80021a8:	d139      	bne.n	800221e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d101      	bne.n	80021b8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80021b4:	2302      	movs	r3, #2
 80021b6:	e033      	b.n	8002220 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2201      	movs	r2, #1
 80021bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2224      	movs	r2, #36	; 0x24
 80021c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f022 0201 	bic.w	r2, r2, #1
 80021d6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80021e6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	021b      	lsls	r3, r3, #8
 80021ec:	68fa      	ldr	r2, [r7, #12]
 80021ee:	4313      	orrs	r3, r2
 80021f0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	68fa      	ldr	r2, [r7, #12]
 80021f8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f042 0201 	orr.w	r2, r2, #1
 8002208:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2220      	movs	r2, #32
 800220e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2200      	movs	r2, #0
 8002216:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800221a:	2300      	movs	r3, #0
 800221c:	e000      	b.n	8002220 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800221e:	2302      	movs	r3, #2
  }
}
 8002220:	4618      	mov	r0, r3
 8002222:	3714      	adds	r7, #20
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800222c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800222e:	b08b      	sub	sp, #44	; 0x2c
 8002230:	af06      	add	r7, sp, #24
 8002232:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d101      	bne.n	800223e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e0d0      	b.n	80023e0 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002244:	b2db      	uxtb	r3, r3
 8002246:	2b00      	cmp	r3, #0
 8002248:	d106      	bne.n	8002258 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2200      	movs	r2, #0
 800224e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f7ff fb1c 	bl	8001890 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2203      	movs	r2, #3
 800225c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4618      	mov	r0, r3
 8002266:	f002 fcdb 	bl	8004c20 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800226a:	2300      	movs	r3, #0
 800226c:	73fb      	strb	r3, [r7, #15]
 800226e:	e04c      	b.n	800230a <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002270:	7bfb      	ldrb	r3, [r7, #15]
 8002272:	6879      	ldr	r1, [r7, #4]
 8002274:	1c5a      	adds	r2, r3, #1
 8002276:	4613      	mov	r3, r2
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	4413      	add	r3, r2
 800227c:	00db      	lsls	r3, r3, #3
 800227e:	440b      	add	r3, r1
 8002280:	3301      	adds	r3, #1
 8002282:	2201      	movs	r2, #1
 8002284:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002286:	7bfb      	ldrb	r3, [r7, #15]
 8002288:	6879      	ldr	r1, [r7, #4]
 800228a:	1c5a      	adds	r2, r3, #1
 800228c:	4613      	mov	r3, r2
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	4413      	add	r3, r2
 8002292:	00db      	lsls	r3, r3, #3
 8002294:	440b      	add	r3, r1
 8002296:	7bfa      	ldrb	r2, [r7, #15]
 8002298:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800229a:	7bfa      	ldrb	r2, [r7, #15]
 800229c:	7bfb      	ldrb	r3, [r7, #15]
 800229e:	b298      	uxth	r0, r3
 80022a0:	6879      	ldr	r1, [r7, #4]
 80022a2:	4613      	mov	r3, r2
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	4413      	add	r3, r2
 80022a8:	00db      	lsls	r3, r3, #3
 80022aa:	440b      	add	r3, r1
 80022ac:	3336      	adds	r3, #54	; 0x36
 80022ae:	4602      	mov	r2, r0
 80022b0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80022b2:	7bfb      	ldrb	r3, [r7, #15]
 80022b4:	6879      	ldr	r1, [r7, #4]
 80022b6:	1c5a      	adds	r2, r3, #1
 80022b8:	4613      	mov	r3, r2
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	4413      	add	r3, r2
 80022be:	00db      	lsls	r3, r3, #3
 80022c0:	440b      	add	r3, r1
 80022c2:	3303      	adds	r3, #3
 80022c4:	2200      	movs	r2, #0
 80022c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80022c8:	7bfa      	ldrb	r2, [r7, #15]
 80022ca:	6879      	ldr	r1, [r7, #4]
 80022cc:	4613      	mov	r3, r2
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	4413      	add	r3, r2
 80022d2:	00db      	lsls	r3, r3, #3
 80022d4:	440b      	add	r3, r1
 80022d6:	3338      	adds	r3, #56	; 0x38
 80022d8:	2200      	movs	r2, #0
 80022da:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80022dc:	7bfa      	ldrb	r2, [r7, #15]
 80022de:	6879      	ldr	r1, [r7, #4]
 80022e0:	4613      	mov	r3, r2
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	4413      	add	r3, r2
 80022e6:	00db      	lsls	r3, r3, #3
 80022e8:	440b      	add	r3, r1
 80022ea:	333c      	adds	r3, #60	; 0x3c
 80022ec:	2200      	movs	r2, #0
 80022ee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80022f0:	7bfa      	ldrb	r2, [r7, #15]
 80022f2:	6879      	ldr	r1, [r7, #4]
 80022f4:	4613      	mov	r3, r2
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	4413      	add	r3, r2
 80022fa:	00db      	lsls	r3, r3, #3
 80022fc:	440b      	add	r3, r1
 80022fe:	3340      	adds	r3, #64	; 0x40
 8002300:	2200      	movs	r2, #0
 8002302:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002304:	7bfb      	ldrb	r3, [r7, #15]
 8002306:	3301      	adds	r3, #1
 8002308:	73fb      	strb	r3, [r7, #15]
 800230a:	7bfa      	ldrb	r2, [r7, #15]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	429a      	cmp	r2, r3
 8002312:	d3ad      	bcc.n	8002270 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002314:	2300      	movs	r3, #0
 8002316:	73fb      	strb	r3, [r7, #15]
 8002318:	e044      	b.n	80023a4 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800231a:	7bfa      	ldrb	r2, [r7, #15]
 800231c:	6879      	ldr	r1, [r7, #4]
 800231e:	4613      	mov	r3, r2
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	4413      	add	r3, r2
 8002324:	00db      	lsls	r3, r3, #3
 8002326:	440b      	add	r3, r1
 8002328:	f203 1369 	addw	r3, r3, #361	; 0x169
 800232c:	2200      	movs	r2, #0
 800232e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002330:	7bfa      	ldrb	r2, [r7, #15]
 8002332:	6879      	ldr	r1, [r7, #4]
 8002334:	4613      	mov	r3, r2
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	4413      	add	r3, r2
 800233a:	00db      	lsls	r3, r3, #3
 800233c:	440b      	add	r3, r1
 800233e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002342:	7bfa      	ldrb	r2, [r7, #15]
 8002344:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002346:	7bfa      	ldrb	r2, [r7, #15]
 8002348:	6879      	ldr	r1, [r7, #4]
 800234a:	4613      	mov	r3, r2
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	4413      	add	r3, r2
 8002350:	00db      	lsls	r3, r3, #3
 8002352:	440b      	add	r3, r1
 8002354:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002358:	2200      	movs	r2, #0
 800235a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800235c:	7bfa      	ldrb	r2, [r7, #15]
 800235e:	6879      	ldr	r1, [r7, #4]
 8002360:	4613      	mov	r3, r2
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	4413      	add	r3, r2
 8002366:	00db      	lsls	r3, r3, #3
 8002368:	440b      	add	r3, r1
 800236a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800236e:	2200      	movs	r2, #0
 8002370:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002372:	7bfa      	ldrb	r2, [r7, #15]
 8002374:	6879      	ldr	r1, [r7, #4]
 8002376:	4613      	mov	r3, r2
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	4413      	add	r3, r2
 800237c:	00db      	lsls	r3, r3, #3
 800237e:	440b      	add	r3, r1
 8002380:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002384:	2200      	movs	r2, #0
 8002386:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002388:	7bfa      	ldrb	r2, [r7, #15]
 800238a:	6879      	ldr	r1, [r7, #4]
 800238c:	4613      	mov	r3, r2
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	4413      	add	r3, r2
 8002392:	00db      	lsls	r3, r3, #3
 8002394:	440b      	add	r3, r1
 8002396:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800239a:	2200      	movs	r2, #0
 800239c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800239e:	7bfb      	ldrb	r3, [r7, #15]
 80023a0:	3301      	adds	r3, #1
 80023a2:	73fb      	strb	r3, [r7, #15]
 80023a4:	7bfa      	ldrb	r2, [r7, #15]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d3b5      	bcc.n	800231a <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	603b      	str	r3, [r7, #0]
 80023b4:	687e      	ldr	r6, [r7, #4]
 80023b6:	466d      	mov	r5, sp
 80023b8:	f106 0410 	add.w	r4, r6, #16
 80023bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023c0:	6823      	ldr	r3, [r4, #0]
 80023c2:	602b      	str	r3, [r5, #0]
 80023c4:	1d33      	adds	r3, r6, #4
 80023c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023c8:	6838      	ldr	r0, [r7, #0]
 80023ca:	f002 fc44 	bl	8004c56 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2201      	movs	r2, #1
 80023da:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 80023de:	2300      	movs	r3, #0
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3714      	adds	r7, #20
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080023e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023f4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023f8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d102      	bne.n	800240e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	f001 b823 	b.w	8003454 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800240e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002412:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0301 	and.w	r3, r3, #1
 800241e:	2b00      	cmp	r3, #0
 8002420:	f000 817d 	beq.w	800271e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002424:	4bbc      	ldr	r3, [pc, #752]	; (8002718 <HAL_RCC_OscConfig+0x330>)
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f003 030c 	and.w	r3, r3, #12
 800242c:	2b04      	cmp	r3, #4
 800242e:	d00c      	beq.n	800244a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002430:	4bb9      	ldr	r3, [pc, #740]	; (8002718 <HAL_RCC_OscConfig+0x330>)
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f003 030c 	and.w	r3, r3, #12
 8002438:	2b08      	cmp	r3, #8
 800243a:	d15c      	bne.n	80024f6 <HAL_RCC_OscConfig+0x10e>
 800243c:	4bb6      	ldr	r3, [pc, #728]	; (8002718 <HAL_RCC_OscConfig+0x330>)
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002444:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002448:	d155      	bne.n	80024f6 <HAL_RCC_OscConfig+0x10e>
 800244a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800244e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002452:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002456:	fa93 f3a3 	rbit	r3, r3
 800245a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800245e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002462:	fab3 f383 	clz	r3, r3
 8002466:	b2db      	uxtb	r3, r3
 8002468:	095b      	lsrs	r3, r3, #5
 800246a:	b2db      	uxtb	r3, r3
 800246c:	f043 0301 	orr.w	r3, r3, #1
 8002470:	b2db      	uxtb	r3, r3
 8002472:	2b01      	cmp	r3, #1
 8002474:	d102      	bne.n	800247c <HAL_RCC_OscConfig+0x94>
 8002476:	4ba8      	ldr	r3, [pc, #672]	; (8002718 <HAL_RCC_OscConfig+0x330>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	e015      	b.n	80024a8 <HAL_RCC_OscConfig+0xc0>
 800247c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002480:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002484:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002488:	fa93 f3a3 	rbit	r3, r3
 800248c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002490:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002494:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002498:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800249c:	fa93 f3a3 	rbit	r3, r3
 80024a0:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80024a4:	4b9c      	ldr	r3, [pc, #624]	; (8002718 <HAL_RCC_OscConfig+0x330>)
 80024a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80024ac:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80024b0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80024b4:	fa92 f2a2 	rbit	r2, r2
 80024b8:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80024bc:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80024c0:	fab2 f282 	clz	r2, r2
 80024c4:	b2d2      	uxtb	r2, r2
 80024c6:	f042 0220 	orr.w	r2, r2, #32
 80024ca:	b2d2      	uxtb	r2, r2
 80024cc:	f002 021f 	and.w	r2, r2, #31
 80024d0:	2101      	movs	r1, #1
 80024d2:	fa01 f202 	lsl.w	r2, r1, r2
 80024d6:	4013      	ands	r3, r2
 80024d8:	2b00      	cmp	r3, #0
 80024da:	f000 811f 	beq.w	800271c <HAL_RCC_OscConfig+0x334>
 80024de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	f040 8116 	bne.w	800271c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	f000 bfaf 	b.w	8003454 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002506:	d106      	bne.n	8002516 <HAL_RCC_OscConfig+0x12e>
 8002508:	4b83      	ldr	r3, [pc, #524]	; (8002718 <HAL_RCC_OscConfig+0x330>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a82      	ldr	r2, [pc, #520]	; (8002718 <HAL_RCC_OscConfig+0x330>)
 800250e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002512:	6013      	str	r3, [r2, #0]
 8002514:	e036      	b.n	8002584 <HAL_RCC_OscConfig+0x19c>
 8002516:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800251a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d10c      	bne.n	8002540 <HAL_RCC_OscConfig+0x158>
 8002526:	4b7c      	ldr	r3, [pc, #496]	; (8002718 <HAL_RCC_OscConfig+0x330>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a7b      	ldr	r2, [pc, #492]	; (8002718 <HAL_RCC_OscConfig+0x330>)
 800252c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002530:	6013      	str	r3, [r2, #0]
 8002532:	4b79      	ldr	r3, [pc, #484]	; (8002718 <HAL_RCC_OscConfig+0x330>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a78      	ldr	r2, [pc, #480]	; (8002718 <HAL_RCC_OscConfig+0x330>)
 8002538:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800253c:	6013      	str	r3, [r2, #0]
 800253e:	e021      	b.n	8002584 <HAL_RCC_OscConfig+0x19c>
 8002540:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002544:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002550:	d10c      	bne.n	800256c <HAL_RCC_OscConfig+0x184>
 8002552:	4b71      	ldr	r3, [pc, #452]	; (8002718 <HAL_RCC_OscConfig+0x330>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a70      	ldr	r2, [pc, #448]	; (8002718 <HAL_RCC_OscConfig+0x330>)
 8002558:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800255c:	6013      	str	r3, [r2, #0]
 800255e:	4b6e      	ldr	r3, [pc, #440]	; (8002718 <HAL_RCC_OscConfig+0x330>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a6d      	ldr	r2, [pc, #436]	; (8002718 <HAL_RCC_OscConfig+0x330>)
 8002564:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002568:	6013      	str	r3, [r2, #0]
 800256a:	e00b      	b.n	8002584 <HAL_RCC_OscConfig+0x19c>
 800256c:	4b6a      	ldr	r3, [pc, #424]	; (8002718 <HAL_RCC_OscConfig+0x330>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a69      	ldr	r2, [pc, #420]	; (8002718 <HAL_RCC_OscConfig+0x330>)
 8002572:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002576:	6013      	str	r3, [r2, #0]
 8002578:	4b67      	ldr	r3, [pc, #412]	; (8002718 <HAL_RCC_OscConfig+0x330>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a66      	ldr	r2, [pc, #408]	; (8002718 <HAL_RCC_OscConfig+0x330>)
 800257e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002582:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002584:	4b64      	ldr	r3, [pc, #400]	; (8002718 <HAL_RCC_OscConfig+0x330>)
 8002586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002588:	f023 020f 	bic.w	r2, r3, #15
 800258c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002590:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	495f      	ldr	r1, [pc, #380]	; (8002718 <HAL_RCC_OscConfig+0x330>)
 800259a:	4313      	orrs	r3, r2
 800259c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800259e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d059      	beq.n	8002662 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ae:	f7ff fa37 	bl	8001a20 <HAL_GetTick>
 80025b2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025b6:	e00a      	b.n	80025ce <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025b8:	f7ff fa32 	bl	8001a20 <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	2b64      	cmp	r3, #100	; 0x64
 80025c6:	d902      	bls.n	80025ce <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80025c8:	2303      	movs	r3, #3
 80025ca:	f000 bf43 	b.w	8003454 <HAL_RCC_OscConfig+0x106c>
 80025ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025d2:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80025da:	fa93 f3a3 	rbit	r3, r3
 80025de:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80025e2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025e6:	fab3 f383 	clz	r3, r3
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	095b      	lsrs	r3, r3, #5
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	f043 0301 	orr.w	r3, r3, #1
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d102      	bne.n	8002600 <HAL_RCC_OscConfig+0x218>
 80025fa:	4b47      	ldr	r3, [pc, #284]	; (8002718 <HAL_RCC_OscConfig+0x330>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	e015      	b.n	800262c <HAL_RCC_OscConfig+0x244>
 8002600:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002604:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002608:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800260c:	fa93 f3a3 	rbit	r3, r3
 8002610:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002614:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002618:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800261c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002620:	fa93 f3a3 	rbit	r3, r3
 8002624:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002628:	4b3b      	ldr	r3, [pc, #236]	; (8002718 <HAL_RCC_OscConfig+0x330>)
 800262a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002630:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002634:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002638:	fa92 f2a2 	rbit	r2, r2
 800263c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002640:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002644:	fab2 f282 	clz	r2, r2
 8002648:	b2d2      	uxtb	r2, r2
 800264a:	f042 0220 	orr.w	r2, r2, #32
 800264e:	b2d2      	uxtb	r2, r2
 8002650:	f002 021f 	and.w	r2, r2, #31
 8002654:	2101      	movs	r1, #1
 8002656:	fa01 f202 	lsl.w	r2, r1, r2
 800265a:	4013      	ands	r3, r2
 800265c:	2b00      	cmp	r3, #0
 800265e:	d0ab      	beq.n	80025b8 <HAL_RCC_OscConfig+0x1d0>
 8002660:	e05d      	b.n	800271e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002662:	f7ff f9dd 	bl	8001a20 <HAL_GetTick>
 8002666:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800266a:	e00a      	b.n	8002682 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800266c:	f7ff f9d8 	bl	8001a20 <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	2b64      	cmp	r3, #100	; 0x64
 800267a:	d902      	bls.n	8002682 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800267c:	2303      	movs	r3, #3
 800267e:	f000 bee9 	b.w	8003454 <HAL_RCC_OscConfig+0x106c>
 8002682:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002686:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800268a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800268e:	fa93 f3a3 	rbit	r3, r3
 8002692:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002696:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800269a:	fab3 f383 	clz	r3, r3
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	095b      	lsrs	r3, r3, #5
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	f043 0301 	orr.w	r3, r3, #1
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d102      	bne.n	80026b4 <HAL_RCC_OscConfig+0x2cc>
 80026ae:	4b1a      	ldr	r3, [pc, #104]	; (8002718 <HAL_RCC_OscConfig+0x330>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	e015      	b.n	80026e0 <HAL_RCC_OscConfig+0x2f8>
 80026b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026b8:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026bc:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80026c0:	fa93 f3a3 	rbit	r3, r3
 80026c4:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80026c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026cc:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80026d0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80026d4:	fa93 f3a3 	rbit	r3, r3
 80026d8:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80026dc:	4b0e      	ldr	r3, [pc, #56]	; (8002718 <HAL_RCC_OscConfig+0x330>)
 80026de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80026e4:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80026e8:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80026ec:	fa92 f2a2 	rbit	r2, r2
 80026f0:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80026f4:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80026f8:	fab2 f282 	clz	r2, r2
 80026fc:	b2d2      	uxtb	r2, r2
 80026fe:	f042 0220 	orr.w	r2, r2, #32
 8002702:	b2d2      	uxtb	r2, r2
 8002704:	f002 021f 	and.w	r2, r2, #31
 8002708:	2101      	movs	r1, #1
 800270a:	fa01 f202 	lsl.w	r2, r1, r2
 800270e:	4013      	ands	r3, r2
 8002710:	2b00      	cmp	r3, #0
 8002712:	d1ab      	bne.n	800266c <HAL_RCC_OscConfig+0x284>
 8002714:	e003      	b.n	800271e <HAL_RCC_OscConfig+0x336>
 8002716:	bf00      	nop
 8002718:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800271c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800271e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002722:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0302 	and.w	r3, r3, #2
 800272e:	2b00      	cmp	r3, #0
 8002730:	f000 817d 	beq.w	8002a2e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002734:	4ba6      	ldr	r3, [pc, #664]	; (80029d0 <HAL_RCC_OscConfig+0x5e8>)
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f003 030c 	and.w	r3, r3, #12
 800273c:	2b00      	cmp	r3, #0
 800273e:	d00b      	beq.n	8002758 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002740:	4ba3      	ldr	r3, [pc, #652]	; (80029d0 <HAL_RCC_OscConfig+0x5e8>)
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f003 030c 	and.w	r3, r3, #12
 8002748:	2b08      	cmp	r3, #8
 800274a:	d172      	bne.n	8002832 <HAL_RCC_OscConfig+0x44a>
 800274c:	4ba0      	ldr	r3, [pc, #640]	; (80029d0 <HAL_RCC_OscConfig+0x5e8>)
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d16c      	bne.n	8002832 <HAL_RCC_OscConfig+0x44a>
 8002758:	2302      	movs	r3, #2
 800275a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800275e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002762:	fa93 f3a3 	rbit	r3, r3
 8002766:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800276a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800276e:	fab3 f383 	clz	r3, r3
 8002772:	b2db      	uxtb	r3, r3
 8002774:	095b      	lsrs	r3, r3, #5
 8002776:	b2db      	uxtb	r3, r3
 8002778:	f043 0301 	orr.w	r3, r3, #1
 800277c:	b2db      	uxtb	r3, r3
 800277e:	2b01      	cmp	r3, #1
 8002780:	d102      	bne.n	8002788 <HAL_RCC_OscConfig+0x3a0>
 8002782:	4b93      	ldr	r3, [pc, #588]	; (80029d0 <HAL_RCC_OscConfig+0x5e8>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	e013      	b.n	80027b0 <HAL_RCC_OscConfig+0x3c8>
 8002788:	2302      	movs	r3, #2
 800278a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002792:	fa93 f3a3 	rbit	r3, r3
 8002796:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800279a:	2302      	movs	r3, #2
 800279c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80027a0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80027a4:	fa93 f3a3 	rbit	r3, r3
 80027a8:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80027ac:	4b88      	ldr	r3, [pc, #544]	; (80029d0 <HAL_RCC_OscConfig+0x5e8>)
 80027ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b0:	2202      	movs	r2, #2
 80027b2:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80027b6:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80027ba:	fa92 f2a2 	rbit	r2, r2
 80027be:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80027c2:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80027c6:	fab2 f282 	clz	r2, r2
 80027ca:	b2d2      	uxtb	r2, r2
 80027cc:	f042 0220 	orr.w	r2, r2, #32
 80027d0:	b2d2      	uxtb	r2, r2
 80027d2:	f002 021f 	and.w	r2, r2, #31
 80027d6:	2101      	movs	r1, #1
 80027d8:	fa01 f202 	lsl.w	r2, r1, r2
 80027dc:	4013      	ands	r3, r2
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d00a      	beq.n	80027f8 <HAL_RCC_OscConfig+0x410>
 80027e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	691b      	ldr	r3, [r3, #16]
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d002      	beq.n	80027f8 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	f000 be2e 	b.w	8003454 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027f8:	4b75      	ldr	r3, [pc, #468]	; (80029d0 <HAL_RCC_OscConfig+0x5e8>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002800:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002804:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	695b      	ldr	r3, [r3, #20]
 800280c:	21f8      	movs	r1, #248	; 0xf8
 800280e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002812:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002816:	fa91 f1a1 	rbit	r1, r1
 800281a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800281e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002822:	fab1 f181 	clz	r1, r1
 8002826:	b2c9      	uxtb	r1, r1
 8002828:	408b      	lsls	r3, r1
 800282a:	4969      	ldr	r1, [pc, #420]	; (80029d0 <HAL_RCC_OscConfig+0x5e8>)
 800282c:	4313      	orrs	r3, r2
 800282e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002830:	e0fd      	b.n	8002a2e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002832:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002836:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	691b      	ldr	r3, [r3, #16]
 800283e:	2b00      	cmp	r3, #0
 8002840:	f000 8088 	beq.w	8002954 <HAL_RCC_OscConfig+0x56c>
 8002844:	2301      	movs	r3, #1
 8002846:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800284a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800284e:	fa93 f3a3 	rbit	r3, r3
 8002852:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002856:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800285a:	fab3 f383 	clz	r3, r3
 800285e:	b2db      	uxtb	r3, r3
 8002860:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002864:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	461a      	mov	r2, r3
 800286c:	2301      	movs	r3, #1
 800286e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002870:	f7ff f8d6 	bl	8001a20 <HAL_GetTick>
 8002874:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002878:	e00a      	b.n	8002890 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800287a:	f7ff f8d1 	bl	8001a20 <HAL_GetTick>
 800287e:	4602      	mov	r2, r0
 8002880:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	2b02      	cmp	r3, #2
 8002888:	d902      	bls.n	8002890 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	f000 bde2 	b.w	8003454 <HAL_RCC_OscConfig+0x106c>
 8002890:	2302      	movs	r3, #2
 8002892:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002896:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800289a:	fa93 f3a3 	rbit	r3, r3
 800289e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80028a2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028a6:	fab3 f383 	clz	r3, r3
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	095b      	lsrs	r3, r3, #5
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	f043 0301 	orr.w	r3, r3, #1
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d102      	bne.n	80028c0 <HAL_RCC_OscConfig+0x4d8>
 80028ba:	4b45      	ldr	r3, [pc, #276]	; (80029d0 <HAL_RCC_OscConfig+0x5e8>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	e013      	b.n	80028e8 <HAL_RCC_OscConfig+0x500>
 80028c0:	2302      	movs	r3, #2
 80028c2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80028ca:	fa93 f3a3 	rbit	r3, r3
 80028ce:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80028d2:	2302      	movs	r3, #2
 80028d4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80028d8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80028dc:	fa93 f3a3 	rbit	r3, r3
 80028e0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80028e4:	4b3a      	ldr	r3, [pc, #232]	; (80029d0 <HAL_RCC_OscConfig+0x5e8>)
 80028e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e8:	2202      	movs	r2, #2
 80028ea:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80028ee:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80028f2:	fa92 f2a2 	rbit	r2, r2
 80028f6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80028fa:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80028fe:	fab2 f282 	clz	r2, r2
 8002902:	b2d2      	uxtb	r2, r2
 8002904:	f042 0220 	orr.w	r2, r2, #32
 8002908:	b2d2      	uxtb	r2, r2
 800290a:	f002 021f 	and.w	r2, r2, #31
 800290e:	2101      	movs	r1, #1
 8002910:	fa01 f202 	lsl.w	r2, r1, r2
 8002914:	4013      	ands	r3, r2
 8002916:	2b00      	cmp	r3, #0
 8002918:	d0af      	beq.n	800287a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800291a:	4b2d      	ldr	r3, [pc, #180]	; (80029d0 <HAL_RCC_OscConfig+0x5e8>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002922:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002926:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	695b      	ldr	r3, [r3, #20]
 800292e:	21f8      	movs	r1, #248	; 0xf8
 8002930:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002934:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002938:	fa91 f1a1 	rbit	r1, r1
 800293c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002940:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002944:	fab1 f181 	clz	r1, r1
 8002948:	b2c9      	uxtb	r1, r1
 800294a:	408b      	lsls	r3, r1
 800294c:	4920      	ldr	r1, [pc, #128]	; (80029d0 <HAL_RCC_OscConfig+0x5e8>)
 800294e:	4313      	orrs	r3, r2
 8002950:	600b      	str	r3, [r1, #0]
 8002952:	e06c      	b.n	8002a2e <HAL_RCC_OscConfig+0x646>
 8002954:	2301      	movs	r3, #1
 8002956:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800295a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800295e:	fa93 f3a3 	rbit	r3, r3
 8002962:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002966:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800296a:	fab3 f383 	clz	r3, r3
 800296e:	b2db      	uxtb	r3, r3
 8002970:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002974:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	461a      	mov	r2, r3
 800297c:	2300      	movs	r3, #0
 800297e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002980:	f7ff f84e 	bl	8001a20 <HAL_GetTick>
 8002984:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002988:	e00a      	b.n	80029a0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800298a:	f7ff f849 	bl	8001a20 <HAL_GetTick>
 800298e:	4602      	mov	r2, r0
 8002990:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	2b02      	cmp	r3, #2
 8002998:	d902      	bls.n	80029a0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	f000 bd5a 	b.w	8003454 <HAL_RCC_OscConfig+0x106c>
 80029a0:	2302      	movs	r3, #2
 80029a2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80029aa:	fa93 f3a3 	rbit	r3, r3
 80029ae:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80029b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029b6:	fab3 f383 	clz	r3, r3
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	095b      	lsrs	r3, r3, #5
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	f043 0301 	orr.w	r3, r3, #1
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d104      	bne.n	80029d4 <HAL_RCC_OscConfig+0x5ec>
 80029ca:	4b01      	ldr	r3, [pc, #4]	; (80029d0 <HAL_RCC_OscConfig+0x5e8>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	e015      	b.n	80029fc <HAL_RCC_OscConfig+0x614>
 80029d0:	40021000 	.word	0x40021000
 80029d4:	2302      	movs	r3, #2
 80029d6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029da:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80029de:	fa93 f3a3 	rbit	r3, r3
 80029e2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80029e6:	2302      	movs	r3, #2
 80029e8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80029ec:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80029f0:	fa93 f3a3 	rbit	r3, r3
 80029f4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80029f8:	4bc8      	ldr	r3, [pc, #800]	; (8002d1c <HAL_RCC_OscConfig+0x934>)
 80029fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fc:	2202      	movs	r2, #2
 80029fe:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002a02:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002a06:	fa92 f2a2 	rbit	r2, r2
 8002a0a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002a0e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002a12:	fab2 f282 	clz	r2, r2
 8002a16:	b2d2      	uxtb	r2, r2
 8002a18:	f042 0220 	orr.w	r2, r2, #32
 8002a1c:	b2d2      	uxtb	r2, r2
 8002a1e:	f002 021f 	and.w	r2, r2, #31
 8002a22:	2101      	movs	r1, #1
 8002a24:	fa01 f202 	lsl.w	r2, r1, r2
 8002a28:	4013      	ands	r3, r2
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d1ad      	bne.n	800298a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a32:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0308 	and.w	r3, r3, #8
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	f000 8110 	beq.w	8002c64 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a48:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	699b      	ldr	r3, [r3, #24]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d079      	beq.n	8002b48 <HAL_RCC_OscConfig+0x760>
 8002a54:	2301      	movs	r3, #1
 8002a56:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002a5e:	fa93 f3a3 	rbit	r3, r3
 8002a62:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002a66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a6a:	fab3 f383 	clz	r3, r3
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	461a      	mov	r2, r3
 8002a72:	4bab      	ldr	r3, [pc, #684]	; (8002d20 <HAL_RCC_OscConfig+0x938>)
 8002a74:	4413      	add	r3, r2
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	461a      	mov	r2, r3
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a7e:	f7fe ffcf 	bl	8001a20 <HAL_GetTick>
 8002a82:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a86:	e00a      	b.n	8002a9e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a88:	f7fe ffca 	bl	8001a20 <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	d902      	bls.n	8002a9e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	f000 bcdb 	b.w	8003454 <HAL_RCC_OscConfig+0x106c>
 8002a9e:	2302      	movs	r3, #2
 8002aa0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002aa8:	fa93 f3a3 	rbit	r3, r3
 8002aac:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002ab0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ab4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002ab8:	2202      	movs	r2, #2
 8002aba:	601a      	str	r2, [r3, #0]
 8002abc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ac0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	fa93 f2a3 	rbit	r2, r3
 8002aca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ace:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002ad2:	601a      	str	r2, [r3, #0]
 8002ad4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ad8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002adc:	2202      	movs	r2, #2
 8002ade:	601a      	str	r2, [r3, #0]
 8002ae0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ae4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	fa93 f2a3 	rbit	r2, r3
 8002aee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002af2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002af6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002af8:	4b88      	ldr	r3, [pc, #544]	; (8002d1c <HAL_RCC_OscConfig+0x934>)
 8002afa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002afc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b00:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002b04:	2102      	movs	r1, #2
 8002b06:	6019      	str	r1, [r3, #0]
 8002b08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b0c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	fa93 f1a3 	rbit	r1, r3
 8002b16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b1a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002b1e:	6019      	str	r1, [r3, #0]
  return result;
 8002b20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b24:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	fab3 f383 	clz	r3, r3
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	f003 031f 	and.w	r3, r3, #31
 8002b3a:	2101      	movs	r1, #1
 8002b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b40:	4013      	ands	r3, r2
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d0a0      	beq.n	8002a88 <HAL_RCC_OscConfig+0x6a0>
 8002b46:	e08d      	b.n	8002c64 <HAL_RCC_OscConfig+0x87c>
 8002b48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b4c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002b50:	2201      	movs	r2, #1
 8002b52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b58:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	fa93 f2a3 	rbit	r2, r3
 8002b62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b66:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002b6a:	601a      	str	r2, [r3, #0]
  return result;
 8002b6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b70:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002b74:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b76:	fab3 f383 	clz	r3, r3
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	4b68      	ldr	r3, [pc, #416]	; (8002d20 <HAL_RCC_OscConfig+0x938>)
 8002b80:	4413      	add	r3, r2
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	461a      	mov	r2, r3
 8002b86:	2300      	movs	r3, #0
 8002b88:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b8a:	f7fe ff49 	bl	8001a20 <HAL_GetTick>
 8002b8e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b92:	e00a      	b.n	8002baa <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b94:	f7fe ff44 	bl	8001a20 <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d902      	bls.n	8002baa <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	f000 bc55 	b.w	8003454 <HAL_RCC_OscConfig+0x106c>
 8002baa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bae:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002bb2:	2202      	movs	r2, #2
 8002bb4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bba:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	fa93 f2a3 	rbit	r2, r3
 8002bc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bc8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002bcc:	601a      	str	r2, [r3, #0]
 8002bce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bd2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002bd6:	2202      	movs	r2, #2
 8002bd8:	601a      	str	r2, [r3, #0]
 8002bda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bde:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	fa93 f2a3 	rbit	r2, r3
 8002be8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002bf0:	601a      	str	r2, [r3, #0]
 8002bf2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bf6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002bfa:	2202      	movs	r2, #2
 8002bfc:	601a      	str	r2, [r3, #0]
 8002bfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	fa93 f2a3 	rbit	r2, r3
 8002c0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c10:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002c14:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c16:	4b41      	ldr	r3, [pc, #260]	; (8002d1c <HAL_RCC_OscConfig+0x934>)
 8002c18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c1e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002c22:	2102      	movs	r1, #2
 8002c24:	6019      	str	r1, [r3, #0]
 8002c26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c2a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	fa93 f1a3 	rbit	r1, r3
 8002c34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c38:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002c3c:	6019      	str	r1, [r3, #0]
  return result;
 8002c3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c42:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	fab3 f383 	clz	r3, r3
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	f003 031f 	and.w	r3, r3, #31
 8002c58:	2101      	movs	r1, #1
 8002c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c5e:	4013      	ands	r3, r2
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d197      	bne.n	8002b94 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c68:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0304 	and.w	r3, r3, #4
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	f000 81a1 	beq.w	8002fbc <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c80:	4b26      	ldr	r3, [pc, #152]	; (8002d1c <HAL_RCC_OscConfig+0x934>)
 8002c82:	69db      	ldr	r3, [r3, #28]
 8002c84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d116      	bne.n	8002cba <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c8c:	4b23      	ldr	r3, [pc, #140]	; (8002d1c <HAL_RCC_OscConfig+0x934>)
 8002c8e:	69db      	ldr	r3, [r3, #28]
 8002c90:	4a22      	ldr	r2, [pc, #136]	; (8002d1c <HAL_RCC_OscConfig+0x934>)
 8002c92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c96:	61d3      	str	r3, [r2, #28]
 8002c98:	4b20      	ldr	r3, [pc, #128]	; (8002d1c <HAL_RCC_OscConfig+0x934>)
 8002c9a:	69db      	ldr	r3, [r3, #28]
 8002c9c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002ca0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ca4:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002ca8:	601a      	str	r2, [r3, #0]
 8002caa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cae:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002cb2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cba:	4b1a      	ldr	r3, [pc, #104]	; (8002d24 <HAL_RCC_OscConfig+0x93c>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d11a      	bne.n	8002cfc <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cc6:	4b17      	ldr	r3, [pc, #92]	; (8002d24 <HAL_RCC_OscConfig+0x93c>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a16      	ldr	r2, [pc, #88]	; (8002d24 <HAL_RCC_OscConfig+0x93c>)
 8002ccc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cd0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cd2:	f7fe fea5 	bl	8001a20 <HAL_GetTick>
 8002cd6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cda:	e009      	b.n	8002cf0 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cdc:	f7fe fea0 	bl	8001a20 <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	2b64      	cmp	r3, #100	; 0x64
 8002cea:	d901      	bls.n	8002cf0 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002cec:	2303      	movs	r3, #3
 8002cee:	e3b1      	b.n	8003454 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cf0:	4b0c      	ldr	r3, [pc, #48]	; (8002d24 <HAL_RCC_OscConfig+0x93c>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d0ef      	beq.n	8002cdc <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d00:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d10d      	bne.n	8002d28 <HAL_RCC_OscConfig+0x940>
 8002d0c:	4b03      	ldr	r3, [pc, #12]	; (8002d1c <HAL_RCC_OscConfig+0x934>)
 8002d0e:	6a1b      	ldr	r3, [r3, #32]
 8002d10:	4a02      	ldr	r2, [pc, #8]	; (8002d1c <HAL_RCC_OscConfig+0x934>)
 8002d12:	f043 0301 	orr.w	r3, r3, #1
 8002d16:	6213      	str	r3, [r2, #32]
 8002d18:	e03c      	b.n	8002d94 <HAL_RCC_OscConfig+0x9ac>
 8002d1a:	bf00      	nop
 8002d1c:	40021000 	.word	0x40021000
 8002d20:	10908120 	.word	0x10908120
 8002d24:	40007000 	.word	0x40007000
 8002d28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d2c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d10c      	bne.n	8002d52 <HAL_RCC_OscConfig+0x96a>
 8002d38:	4bc1      	ldr	r3, [pc, #772]	; (8003040 <HAL_RCC_OscConfig+0xc58>)
 8002d3a:	6a1b      	ldr	r3, [r3, #32]
 8002d3c:	4ac0      	ldr	r2, [pc, #768]	; (8003040 <HAL_RCC_OscConfig+0xc58>)
 8002d3e:	f023 0301 	bic.w	r3, r3, #1
 8002d42:	6213      	str	r3, [r2, #32]
 8002d44:	4bbe      	ldr	r3, [pc, #760]	; (8003040 <HAL_RCC_OscConfig+0xc58>)
 8002d46:	6a1b      	ldr	r3, [r3, #32]
 8002d48:	4abd      	ldr	r2, [pc, #756]	; (8003040 <HAL_RCC_OscConfig+0xc58>)
 8002d4a:	f023 0304 	bic.w	r3, r3, #4
 8002d4e:	6213      	str	r3, [r2, #32]
 8002d50:	e020      	b.n	8002d94 <HAL_RCC_OscConfig+0x9ac>
 8002d52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d56:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	2b05      	cmp	r3, #5
 8002d60:	d10c      	bne.n	8002d7c <HAL_RCC_OscConfig+0x994>
 8002d62:	4bb7      	ldr	r3, [pc, #732]	; (8003040 <HAL_RCC_OscConfig+0xc58>)
 8002d64:	6a1b      	ldr	r3, [r3, #32]
 8002d66:	4ab6      	ldr	r2, [pc, #728]	; (8003040 <HAL_RCC_OscConfig+0xc58>)
 8002d68:	f043 0304 	orr.w	r3, r3, #4
 8002d6c:	6213      	str	r3, [r2, #32]
 8002d6e:	4bb4      	ldr	r3, [pc, #720]	; (8003040 <HAL_RCC_OscConfig+0xc58>)
 8002d70:	6a1b      	ldr	r3, [r3, #32]
 8002d72:	4ab3      	ldr	r2, [pc, #716]	; (8003040 <HAL_RCC_OscConfig+0xc58>)
 8002d74:	f043 0301 	orr.w	r3, r3, #1
 8002d78:	6213      	str	r3, [r2, #32]
 8002d7a:	e00b      	b.n	8002d94 <HAL_RCC_OscConfig+0x9ac>
 8002d7c:	4bb0      	ldr	r3, [pc, #704]	; (8003040 <HAL_RCC_OscConfig+0xc58>)
 8002d7e:	6a1b      	ldr	r3, [r3, #32]
 8002d80:	4aaf      	ldr	r2, [pc, #700]	; (8003040 <HAL_RCC_OscConfig+0xc58>)
 8002d82:	f023 0301 	bic.w	r3, r3, #1
 8002d86:	6213      	str	r3, [r2, #32]
 8002d88:	4bad      	ldr	r3, [pc, #692]	; (8003040 <HAL_RCC_OscConfig+0xc58>)
 8002d8a:	6a1b      	ldr	r3, [r3, #32]
 8002d8c:	4aac      	ldr	r2, [pc, #688]	; (8003040 <HAL_RCC_OscConfig+0xc58>)
 8002d8e:	f023 0304 	bic.w	r3, r3, #4
 8002d92:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d98:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	f000 8081 	beq.w	8002ea8 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002da6:	f7fe fe3b 	bl	8001a20 <HAL_GetTick>
 8002daa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dae:	e00b      	b.n	8002dc8 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002db0:	f7fe fe36 	bl	8001a20 <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d901      	bls.n	8002dc8 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	e345      	b.n	8003454 <HAL_RCC_OscConfig+0x106c>
 8002dc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dcc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002dd0:	2202      	movs	r2, #2
 8002dd2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dd8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	fa93 f2a3 	rbit	r2, r3
 8002de2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002de6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002dea:	601a      	str	r2, [r3, #0]
 8002dec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002df0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002df4:	2202      	movs	r2, #2
 8002df6:	601a      	str	r2, [r3, #0]
 8002df8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dfc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	fa93 f2a3 	rbit	r2, r3
 8002e06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e0a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002e0e:	601a      	str	r2, [r3, #0]
  return result;
 8002e10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e14:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002e18:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e1a:	fab3 f383 	clz	r3, r3
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	095b      	lsrs	r3, r3, #5
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	f043 0302 	orr.w	r3, r3, #2
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d102      	bne.n	8002e34 <HAL_RCC_OscConfig+0xa4c>
 8002e2e:	4b84      	ldr	r3, [pc, #528]	; (8003040 <HAL_RCC_OscConfig+0xc58>)
 8002e30:	6a1b      	ldr	r3, [r3, #32]
 8002e32:	e013      	b.n	8002e5c <HAL_RCC_OscConfig+0xa74>
 8002e34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e38:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002e3c:	2202      	movs	r2, #2
 8002e3e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e44:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	fa93 f2a3 	rbit	r2, r3
 8002e4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e52:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002e56:	601a      	str	r2, [r3, #0]
 8002e58:	4b79      	ldr	r3, [pc, #484]	; (8003040 <HAL_RCC_OscConfig+0xc58>)
 8002e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e60:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002e64:	2102      	movs	r1, #2
 8002e66:	6011      	str	r1, [r2, #0]
 8002e68:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e6c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002e70:	6812      	ldr	r2, [r2, #0]
 8002e72:	fa92 f1a2 	rbit	r1, r2
 8002e76:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e7a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002e7e:	6011      	str	r1, [r2, #0]
  return result;
 8002e80:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e84:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002e88:	6812      	ldr	r2, [r2, #0]
 8002e8a:	fab2 f282 	clz	r2, r2
 8002e8e:	b2d2      	uxtb	r2, r2
 8002e90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e94:	b2d2      	uxtb	r2, r2
 8002e96:	f002 021f 	and.w	r2, r2, #31
 8002e9a:	2101      	movs	r1, #1
 8002e9c:	fa01 f202 	lsl.w	r2, r1, r2
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d084      	beq.n	8002db0 <HAL_RCC_OscConfig+0x9c8>
 8002ea6:	e07f      	b.n	8002fa8 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ea8:	f7fe fdba 	bl	8001a20 <HAL_GetTick>
 8002eac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002eb0:	e00b      	b.n	8002eca <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002eb2:	f7fe fdb5 	bl	8001a20 <HAL_GetTick>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d901      	bls.n	8002eca <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e2c4      	b.n	8003454 <HAL_RCC_OscConfig+0x106c>
 8002eca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ece:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002ed2:	2202      	movs	r2, #2
 8002ed4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eda:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	fa93 f2a3 	rbit	r2, r3
 8002ee4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ee8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002eec:	601a      	str	r2, [r3, #0]
 8002eee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ef2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002ef6:	2202      	movs	r2, #2
 8002ef8:	601a      	str	r2, [r3, #0]
 8002efa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002efe:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	fa93 f2a3 	rbit	r2, r3
 8002f08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f0c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002f10:	601a      	str	r2, [r3, #0]
  return result;
 8002f12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f16:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002f1a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f1c:	fab3 f383 	clz	r3, r3
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	095b      	lsrs	r3, r3, #5
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	f043 0302 	orr.w	r3, r3, #2
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	d102      	bne.n	8002f36 <HAL_RCC_OscConfig+0xb4e>
 8002f30:	4b43      	ldr	r3, [pc, #268]	; (8003040 <HAL_RCC_OscConfig+0xc58>)
 8002f32:	6a1b      	ldr	r3, [r3, #32]
 8002f34:	e013      	b.n	8002f5e <HAL_RCC_OscConfig+0xb76>
 8002f36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f3a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002f3e:	2202      	movs	r2, #2
 8002f40:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f46:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	fa93 f2a3 	rbit	r2, r3
 8002f50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f54:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002f58:	601a      	str	r2, [r3, #0]
 8002f5a:	4b39      	ldr	r3, [pc, #228]	; (8003040 <HAL_RCC_OscConfig+0xc58>)
 8002f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f62:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002f66:	2102      	movs	r1, #2
 8002f68:	6011      	str	r1, [r2, #0]
 8002f6a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f6e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002f72:	6812      	ldr	r2, [r2, #0]
 8002f74:	fa92 f1a2 	rbit	r1, r2
 8002f78:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f7c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002f80:	6011      	str	r1, [r2, #0]
  return result;
 8002f82:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f86:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002f8a:	6812      	ldr	r2, [r2, #0]
 8002f8c:	fab2 f282 	clz	r2, r2
 8002f90:	b2d2      	uxtb	r2, r2
 8002f92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f96:	b2d2      	uxtb	r2, r2
 8002f98:	f002 021f 	and.w	r2, r2, #31
 8002f9c:	2101      	movs	r1, #1
 8002f9e:	fa01 f202 	lsl.w	r2, r1, r2
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d184      	bne.n	8002eb2 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002fa8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d105      	bne.n	8002fbc <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fb0:	4b23      	ldr	r3, [pc, #140]	; (8003040 <HAL_RCC_OscConfig+0xc58>)
 8002fb2:	69db      	ldr	r3, [r3, #28]
 8002fb4:	4a22      	ldr	r2, [pc, #136]	; (8003040 <HAL_RCC_OscConfig+0xc58>)
 8002fb6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fba:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fc0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	69db      	ldr	r3, [r3, #28]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	f000 8242 	beq.w	8003452 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fce:	4b1c      	ldr	r3, [pc, #112]	; (8003040 <HAL_RCC_OscConfig+0xc58>)
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	f003 030c 	and.w	r3, r3, #12
 8002fd6:	2b08      	cmp	r3, #8
 8002fd8:	f000 8213 	beq.w	8003402 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fe0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	69db      	ldr	r3, [r3, #28]
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	f040 8162 	bne.w	80032b2 <HAL_RCC_OscConfig+0xeca>
 8002fee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ff2:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002ff6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002ffa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ffc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003000:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	fa93 f2a3 	rbit	r2, r3
 800300a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800300e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003012:	601a      	str	r2, [r3, #0]
  return result;
 8003014:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003018:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800301c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800301e:	fab3 f383 	clz	r3, r3
 8003022:	b2db      	uxtb	r3, r3
 8003024:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003028:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	461a      	mov	r2, r3
 8003030:	2300      	movs	r3, #0
 8003032:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003034:	f7fe fcf4 	bl	8001a20 <HAL_GetTick>
 8003038:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800303c:	e00c      	b.n	8003058 <HAL_RCC_OscConfig+0xc70>
 800303e:	bf00      	nop
 8003040:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003044:	f7fe fcec 	bl	8001a20 <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	2b02      	cmp	r3, #2
 8003052:	d901      	bls.n	8003058 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003054:	2303      	movs	r3, #3
 8003056:	e1fd      	b.n	8003454 <HAL_RCC_OscConfig+0x106c>
 8003058:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800305c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003060:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003064:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003066:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800306a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	fa93 f2a3 	rbit	r2, r3
 8003074:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003078:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800307c:	601a      	str	r2, [r3, #0]
  return result;
 800307e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003082:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003086:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003088:	fab3 f383 	clz	r3, r3
 800308c:	b2db      	uxtb	r3, r3
 800308e:	095b      	lsrs	r3, r3, #5
 8003090:	b2db      	uxtb	r3, r3
 8003092:	f043 0301 	orr.w	r3, r3, #1
 8003096:	b2db      	uxtb	r3, r3
 8003098:	2b01      	cmp	r3, #1
 800309a:	d102      	bne.n	80030a2 <HAL_RCC_OscConfig+0xcba>
 800309c:	4bb0      	ldr	r3, [pc, #704]	; (8003360 <HAL_RCC_OscConfig+0xf78>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	e027      	b.n	80030f2 <HAL_RCC_OscConfig+0xd0a>
 80030a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030a6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80030aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030b4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	fa93 f2a3 	rbit	r2, r3
 80030be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030c2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80030c6:	601a      	str	r2, [r3, #0]
 80030c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030cc:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80030d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030d4:	601a      	str	r2, [r3, #0]
 80030d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030da:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	fa93 f2a3 	rbit	r2, r3
 80030e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030e8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80030ec:	601a      	str	r2, [r3, #0]
 80030ee:	4b9c      	ldr	r3, [pc, #624]	; (8003360 <HAL_RCC_OscConfig+0xf78>)
 80030f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80030f6:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80030fa:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80030fe:	6011      	str	r1, [r2, #0]
 8003100:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003104:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003108:	6812      	ldr	r2, [r2, #0]
 800310a:	fa92 f1a2 	rbit	r1, r2
 800310e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003112:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003116:	6011      	str	r1, [r2, #0]
  return result;
 8003118:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800311c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003120:	6812      	ldr	r2, [r2, #0]
 8003122:	fab2 f282 	clz	r2, r2
 8003126:	b2d2      	uxtb	r2, r2
 8003128:	f042 0220 	orr.w	r2, r2, #32
 800312c:	b2d2      	uxtb	r2, r2
 800312e:	f002 021f 	and.w	r2, r2, #31
 8003132:	2101      	movs	r1, #1
 8003134:	fa01 f202 	lsl.w	r2, r1, r2
 8003138:	4013      	ands	r3, r2
 800313a:	2b00      	cmp	r3, #0
 800313c:	d182      	bne.n	8003044 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800313e:	4b88      	ldr	r3, [pc, #544]	; (8003360 <HAL_RCC_OscConfig+0xf78>)
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003146:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800314a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003152:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003156:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	6a1b      	ldr	r3, [r3, #32]
 800315e:	430b      	orrs	r3, r1
 8003160:	497f      	ldr	r1, [pc, #508]	; (8003360 <HAL_RCC_OscConfig+0xf78>)
 8003162:	4313      	orrs	r3, r2
 8003164:	604b      	str	r3, [r1, #4]
 8003166:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800316a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800316e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003172:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003174:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003178:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	fa93 f2a3 	rbit	r2, r3
 8003182:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003186:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800318a:	601a      	str	r2, [r3, #0]
  return result;
 800318c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003190:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003194:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003196:	fab3 f383 	clz	r3, r3
 800319a:	b2db      	uxtb	r3, r3
 800319c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80031a0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	461a      	mov	r2, r3
 80031a8:	2301      	movs	r3, #1
 80031aa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ac:	f7fe fc38 	bl	8001a20 <HAL_GetTick>
 80031b0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031b4:	e009      	b.n	80031ca <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031b6:	f7fe fc33 	bl	8001a20 <HAL_GetTick>
 80031ba:	4602      	mov	r2, r0
 80031bc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d901      	bls.n	80031ca <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e144      	b.n	8003454 <HAL_RCC_OscConfig+0x106c>
 80031ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ce:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80031d2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031dc:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	fa93 f2a3 	rbit	r2, r3
 80031e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ea:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80031ee:	601a      	str	r2, [r3, #0]
  return result;
 80031f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031f4:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80031f8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031fa:	fab3 f383 	clz	r3, r3
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	095b      	lsrs	r3, r3, #5
 8003202:	b2db      	uxtb	r3, r3
 8003204:	f043 0301 	orr.w	r3, r3, #1
 8003208:	b2db      	uxtb	r3, r3
 800320a:	2b01      	cmp	r3, #1
 800320c:	d102      	bne.n	8003214 <HAL_RCC_OscConfig+0xe2c>
 800320e:	4b54      	ldr	r3, [pc, #336]	; (8003360 <HAL_RCC_OscConfig+0xf78>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	e027      	b.n	8003264 <HAL_RCC_OscConfig+0xe7c>
 8003214:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003218:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800321c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003220:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003222:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003226:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	fa93 f2a3 	rbit	r2, r3
 8003230:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003234:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003238:	601a      	str	r2, [r3, #0]
 800323a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800323e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003242:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003246:	601a      	str	r2, [r3, #0]
 8003248:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800324c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	fa93 f2a3 	rbit	r2, r3
 8003256:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800325a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800325e:	601a      	str	r2, [r3, #0]
 8003260:	4b3f      	ldr	r3, [pc, #252]	; (8003360 <HAL_RCC_OscConfig+0xf78>)
 8003262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003264:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003268:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800326c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003270:	6011      	str	r1, [r2, #0]
 8003272:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003276:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800327a:	6812      	ldr	r2, [r2, #0]
 800327c:	fa92 f1a2 	rbit	r1, r2
 8003280:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003284:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003288:	6011      	str	r1, [r2, #0]
  return result;
 800328a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800328e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003292:	6812      	ldr	r2, [r2, #0]
 8003294:	fab2 f282 	clz	r2, r2
 8003298:	b2d2      	uxtb	r2, r2
 800329a:	f042 0220 	orr.w	r2, r2, #32
 800329e:	b2d2      	uxtb	r2, r2
 80032a0:	f002 021f 	and.w	r2, r2, #31
 80032a4:	2101      	movs	r1, #1
 80032a6:	fa01 f202 	lsl.w	r2, r1, r2
 80032aa:	4013      	ands	r3, r2
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d082      	beq.n	80031b6 <HAL_RCC_OscConfig+0xdce>
 80032b0:	e0cf      	b.n	8003452 <HAL_RCC_OscConfig+0x106a>
 80032b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032b6:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80032ba:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80032be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032c4:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	fa93 f2a3 	rbit	r2, r3
 80032ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032d2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80032d6:	601a      	str	r2, [r3, #0]
  return result;
 80032d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032dc:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80032e0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032e2:	fab3 f383 	clz	r3, r3
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80032ec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	461a      	mov	r2, r3
 80032f4:	2300      	movs	r3, #0
 80032f6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032f8:	f7fe fb92 	bl	8001a20 <HAL_GetTick>
 80032fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003300:	e009      	b.n	8003316 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003302:	f7fe fb8d 	bl	8001a20 <HAL_GetTick>
 8003306:	4602      	mov	r2, r0
 8003308:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	2b02      	cmp	r3, #2
 8003310:	d901      	bls.n	8003316 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e09e      	b.n	8003454 <HAL_RCC_OscConfig+0x106c>
 8003316:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800331a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800331e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003322:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003324:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003328:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	fa93 f2a3 	rbit	r2, r3
 8003332:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003336:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800333a:	601a      	str	r2, [r3, #0]
  return result;
 800333c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003340:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003344:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003346:	fab3 f383 	clz	r3, r3
 800334a:	b2db      	uxtb	r3, r3
 800334c:	095b      	lsrs	r3, r3, #5
 800334e:	b2db      	uxtb	r3, r3
 8003350:	f043 0301 	orr.w	r3, r3, #1
 8003354:	b2db      	uxtb	r3, r3
 8003356:	2b01      	cmp	r3, #1
 8003358:	d104      	bne.n	8003364 <HAL_RCC_OscConfig+0xf7c>
 800335a:	4b01      	ldr	r3, [pc, #4]	; (8003360 <HAL_RCC_OscConfig+0xf78>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	e029      	b.n	80033b4 <HAL_RCC_OscConfig+0xfcc>
 8003360:	40021000 	.word	0x40021000
 8003364:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003368:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800336c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003370:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003372:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003376:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	fa93 f2a3 	rbit	r2, r3
 8003380:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003384:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003388:	601a      	str	r2, [r3, #0]
 800338a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800338e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003392:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003396:	601a      	str	r2, [r3, #0]
 8003398:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800339c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	fa93 f2a3 	rbit	r2, r3
 80033a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033aa:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80033ae:	601a      	str	r2, [r3, #0]
 80033b0:	4b2b      	ldr	r3, [pc, #172]	; (8003460 <HAL_RCC_OscConfig+0x1078>)
 80033b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80033b8:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80033bc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80033c0:	6011      	str	r1, [r2, #0]
 80033c2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80033c6:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80033ca:	6812      	ldr	r2, [r2, #0]
 80033cc:	fa92 f1a2 	rbit	r1, r2
 80033d0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80033d4:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80033d8:	6011      	str	r1, [r2, #0]
  return result;
 80033da:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80033de:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80033e2:	6812      	ldr	r2, [r2, #0]
 80033e4:	fab2 f282 	clz	r2, r2
 80033e8:	b2d2      	uxtb	r2, r2
 80033ea:	f042 0220 	orr.w	r2, r2, #32
 80033ee:	b2d2      	uxtb	r2, r2
 80033f0:	f002 021f 	and.w	r2, r2, #31
 80033f4:	2101      	movs	r1, #1
 80033f6:	fa01 f202 	lsl.w	r2, r1, r2
 80033fa:	4013      	ands	r3, r2
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d180      	bne.n	8003302 <HAL_RCC_OscConfig+0xf1a>
 8003400:	e027      	b.n	8003452 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003402:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003406:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	69db      	ldr	r3, [r3, #28]
 800340e:	2b01      	cmp	r3, #1
 8003410:	d101      	bne.n	8003416 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e01e      	b.n	8003454 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003416:	4b12      	ldr	r3, [pc, #72]	; (8003460 <HAL_RCC_OscConfig+0x1078>)
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800341e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003422:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003426:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800342a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	6a1b      	ldr	r3, [r3, #32]
 8003432:	429a      	cmp	r2, r3
 8003434:	d10b      	bne.n	800344e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003436:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800343a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800343e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003442:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800344a:	429a      	cmp	r2, r3
 800344c:	d001      	beq.n	8003452 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e000      	b.n	8003454 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003452:	2300      	movs	r3, #0
}
 8003454:	4618      	mov	r0, r3
 8003456:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	40021000 	.word	0x40021000

08003464 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b09e      	sub	sp, #120	; 0x78
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800346e:	2300      	movs	r3, #0
 8003470:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d101      	bne.n	800347c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e162      	b.n	8003742 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800347c:	4b90      	ldr	r3, [pc, #576]	; (80036c0 <HAL_RCC_ClockConfig+0x25c>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 0307 	and.w	r3, r3, #7
 8003484:	683a      	ldr	r2, [r7, #0]
 8003486:	429a      	cmp	r2, r3
 8003488:	d910      	bls.n	80034ac <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800348a:	4b8d      	ldr	r3, [pc, #564]	; (80036c0 <HAL_RCC_ClockConfig+0x25c>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f023 0207 	bic.w	r2, r3, #7
 8003492:	498b      	ldr	r1, [pc, #556]	; (80036c0 <HAL_RCC_ClockConfig+0x25c>)
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	4313      	orrs	r3, r2
 8003498:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800349a:	4b89      	ldr	r3, [pc, #548]	; (80036c0 <HAL_RCC_ClockConfig+0x25c>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 0307 	and.w	r3, r3, #7
 80034a2:	683a      	ldr	r2, [r7, #0]
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d001      	beq.n	80034ac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e14a      	b.n	8003742 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 0302 	and.w	r3, r3, #2
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d008      	beq.n	80034ca <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034b8:	4b82      	ldr	r3, [pc, #520]	; (80036c4 <HAL_RCC_ClockConfig+0x260>)
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	497f      	ldr	r1, [pc, #508]	; (80036c4 <HAL_RCC_ClockConfig+0x260>)
 80034c6:	4313      	orrs	r3, r2
 80034c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0301 	and.w	r3, r3, #1
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	f000 80dc 	beq.w	8003690 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d13c      	bne.n	800355a <HAL_RCC_ClockConfig+0xf6>
 80034e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034e4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80034e8:	fa93 f3a3 	rbit	r3, r3
 80034ec:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80034ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034f0:	fab3 f383 	clz	r3, r3
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	095b      	lsrs	r3, r3, #5
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	f043 0301 	orr.w	r3, r3, #1
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	2b01      	cmp	r3, #1
 8003502:	d102      	bne.n	800350a <HAL_RCC_ClockConfig+0xa6>
 8003504:	4b6f      	ldr	r3, [pc, #444]	; (80036c4 <HAL_RCC_ClockConfig+0x260>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	e00f      	b.n	800352a <HAL_RCC_ClockConfig+0xc6>
 800350a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800350e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003510:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003512:	fa93 f3a3 	rbit	r3, r3
 8003516:	667b      	str	r3, [r7, #100]	; 0x64
 8003518:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800351c:	663b      	str	r3, [r7, #96]	; 0x60
 800351e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003520:	fa93 f3a3 	rbit	r3, r3
 8003524:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003526:	4b67      	ldr	r3, [pc, #412]	; (80036c4 <HAL_RCC_ClockConfig+0x260>)
 8003528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800352e:	65ba      	str	r2, [r7, #88]	; 0x58
 8003530:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003532:	fa92 f2a2 	rbit	r2, r2
 8003536:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003538:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800353a:	fab2 f282 	clz	r2, r2
 800353e:	b2d2      	uxtb	r2, r2
 8003540:	f042 0220 	orr.w	r2, r2, #32
 8003544:	b2d2      	uxtb	r2, r2
 8003546:	f002 021f 	and.w	r2, r2, #31
 800354a:	2101      	movs	r1, #1
 800354c:	fa01 f202 	lsl.w	r2, r1, r2
 8003550:	4013      	ands	r3, r2
 8003552:	2b00      	cmp	r3, #0
 8003554:	d17b      	bne.n	800364e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e0f3      	b.n	8003742 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	2b02      	cmp	r3, #2
 8003560:	d13c      	bne.n	80035dc <HAL_RCC_ClockConfig+0x178>
 8003562:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003566:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003568:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800356a:	fa93 f3a3 	rbit	r3, r3
 800356e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003570:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003572:	fab3 f383 	clz	r3, r3
 8003576:	b2db      	uxtb	r3, r3
 8003578:	095b      	lsrs	r3, r3, #5
 800357a:	b2db      	uxtb	r3, r3
 800357c:	f043 0301 	orr.w	r3, r3, #1
 8003580:	b2db      	uxtb	r3, r3
 8003582:	2b01      	cmp	r3, #1
 8003584:	d102      	bne.n	800358c <HAL_RCC_ClockConfig+0x128>
 8003586:	4b4f      	ldr	r3, [pc, #316]	; (80036c4 <HAL_RCC_ClockConfig+0x260>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	e00f      	b.n	80035ac <HAL_RCC_ClockConfig+0x148>
 800358c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003590:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003592:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003594:	fa93 f3a3 	rbit	r3, r3
 8003598:	647b      	str	r3, [r7, #68]	; 0x44
 800359a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800359e:	643b      	str	r3, [r7, #64]	; 0x40
 80035a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035a2:	fa93 f3a3 	rbit	r3, r3
 80035a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035a8:	4b46      	ldr	r3, [pc, #280]	; (80036c4 <HAL_RCC_ClockConfig+0x260>)
 80035aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035b0:	63ba      	str	r2, [r7, #56]	; 0x38
 80035b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80035b4:	fa92 f2a2 	rbit	r2, r2
 80035b8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80035ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80035bc:	fab2 f282 	clz	r2, r2
 80035c0:	b2d2      	uxtb	r2, r2
 80035c2:	f042 0220 	orr.w	r2, r2, #32
 80035c6:	b2d2      	uxtb	r2, r2
 80035c8:	f002 021f 	and.w	r2, r2, #31
 80035cc:	2101      	movs	r1, #1
 80035ce:	fa01 f202 	lsl.w	r2, r1, r2
 80035d2:	4013      	ands	r3, r2
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d13a      	bne.n	800364e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e0b2      	b.n	8003742 <HAL_RCC_ClockConfig+0x2de>
 80035dc:	2302      	movs	r3, #2
 80035de:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035e2:	fa93 f3a3 	rbit	r3, r3
 80035e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80035e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035ea:	fab3 f383 	clz	r3, r3
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	095b      	lsrs	r3, r3, #5
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	f043 0301 	orr.w	r3, r3, #1
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d102      	bne.n	8003604 <HAL_RCC_ClockConfig+0x1a0>
 80035fe:	4b31      	ldr	r3, [pc, #196]	; (80036c4 <HAL_RCC_ClockConfig+0x260>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	e00d      	b.n	8003620 <HAL_RCC_ClockConfig+0x1bc>
 8003604:	2302      	movs	r3, #2
 8003606:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800360a:	fa93 f3a3 	rbit	r3, r3
 800360e:	627b      	str	r3, [r7, #36]	; 0x24
 8003610:	2302      	movs	r3, #2
 8003612:	623b      	str	r3, [r7, #32]
 8003614:	6a3b      	ldr	r3, [r7, #32]
 8003616:	fa93 f3a3 	rbit	r3, r3
 800361a:	61fb      	str	r3, [r7, #28]
 800361c:	4b29      	ldr	r3, [pc, #164]	; (80036c4 <HAL_RCC_ClockConfig+0x260>)
 800361e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003620:	2202      	movs	r2, #2
 8003622:	61ba      	str	r2, [r7, #24]
 8003624:	69ba      	ldr	r2, [r7, #24]
 8003626:	fa92 f2a2 	rbit	r2, r2
 800362a:	617a      	str	r2, [r7, #20]
  return result;
 800362c:	697a      	ldr	r2, [r7, #20]
 800362e:	fab2 f282 	clz	r2, r2
 8003632:	b2d2      	uxtb	r2, r2
 8003634:	f042 0220 	orr.w	r2, r2, #32
 8003638:	b2d2      	uxtb	r2, r2
 800363a:	f002 021f 	and.w	r2, r2, #31
 800363e:	2101      	movs	r1, #1
 8003640:	fa01 f202 	lsl.w	r2, r1, r2
 8003644:	4013      	ands	r3, r2
 8003646:	2b00      	cmp	r3, #0
 8003648:	d101      	bne.n	800364e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e079      	b.n	8003742 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800364e:	4b1d      	ldr	r3, [pc, #116]	; (80036c4 <HAL_RCC_ClockConfig+0x260>)
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	f023 0203 	bic.w	r2, r3, #3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	491a      	ldr	r1, [pc, #104]	; (80036c4 <HAL_RCC_ClockConfig+0x260>)
 800365c:	4313      	orrs	r3, r2
 800365e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003660:	f7fe f9de 	bl	8001a20 <HAL_GetTick>
 8003664:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003666:	e00a      	b.n	800367e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003668:	f7fe f9da 	bl	8001a20 <HAL_GetTick>
 800366c:	4602      	mov	r2, r0
 800366e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	f241 3288 	movw	r2, #5000	; 0x1388
 8003676:	4293      	cmp	r3, r2
 8003678:	d901      	bls.n	800367e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e061      	b.n	8003742 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800367e:	4b11      	ldr	r3, [pc, #68]	; (80036c4 <HAL_RCC_ClockConfig+0x260>)
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	f003 020c 	and.w	r2, r3, #12
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	429a      	cmp	r2, r3
 800368e:	d1eb      	bne.n	8003668 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003690:	4b0b      	ldr	r3, [pc, #44]	; (80036c0 <HAL_RCC_ClockConfig+0x25c>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0307 	and.w	r3, r3, #7
 8003698:	683a      	ldr	r2, [r7, #0]
 800369a:	429a      	cmp	r2, r3
 800369c:	d214      	bcs.n	80036c8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800369e:	4b08      	ldr	r3, [pc, #32]	; (80036c0 <HAL_RCC_ClockConfig+0x25c>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f023 0207 	bic.w	r2, r3, #7
 80036a6:	4906      	ldr	r1, [pc, #24]	; (80036c0 <HAL_RCC_ClockConfig+0x25c>)
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ae:	4b04      	ldr	r3, [pc, #16]	; (80036c0 <HAL_RCC_ClockConfig+0x25c>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0307 	and.w	r3, r3, #7
 80036b6:	683a      	ldr	r2, [r7, #0]
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d005      	beq.n	80036c8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e040      	b.n	8003742 <HAL_RCC_ClockConfig+0x2de>
 80036c0:	40022000 	.word	0x40022000
 80036c4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0304 	and.w	r3, r3, #4
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d008      	beq.n	80036e6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036d4:	4b1d      	ldr	r3, [pc, #116]	; (800374c <HAL_RCC_ClockConfig+0x2e8>)
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	491a      	ldr	r1, [pc, #104]	; (800374c <HAL_RCC_ClockConfig+0x2e8>)
 80036e2:	4313      	orrs	r3, r2
 80036e4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0308 	and.w	r3, r3, #8
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d009      	beq.n	8003706 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036f2:	4b16      	ldr	r3, [pc, #88]	; (800374c <HAL_RCC_ClockConfig+0x2e8>)
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	691b      	ldr	r3, [r3, #16]
 80036fe:	00db      	lsls	r3, r3, #3
 8003700:	4912      	ldr	r1, [pc, #72]	; (800374c <HAL_RCC_ClockConfig+0x2e8>)
 8003702:	4313      	orrs	r3, r2
 8003704:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003706:	f000 f829 	bl	800375c <HAL_RCC_GetSysClockFreq>
 800370a:	4601      	mov	r1, r0
 800370c:	4b0f      	ldr	r3, [pc, #60]	; (800374c <HAL_RCC_ClockConfig+0x2e8>)
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003714:	22f0      	movs	r2, #240	; 0xf0
 8003716:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003718:	693a      	ldr	r2, [r7, #16]
 800371a:	fa92 f2a2 	rbit	r2, r2
 800371e:	60fa      	str	r2, [r7, #12]
  return result;
 8003720:	68fa      	ldr	r2, [r7, #12]
 8003722:	fab2 f282 	clz	r2, r2
 8003726:	b2d2      	uxtb	r2, r2
 8003728:	40d3      	lsrs	r3, r2
 800372a:	4a09      	ldr	r2, [pc, #36]	; (8003750 <HAL_RCC_ClockConfig+0x2ec>)
 800372c:	5cd3      	ldrb	r3, [r2, r3]
 800372e:	fa21 f303 	lsr.w	r3, r1, r3
 8003732:	4a08      	ldr	r2, [pc, #32]	; (8003754 <HAL_RCC_ClockConfig+0x2f0>)
 8003734:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003736:	4b08      	ldr	r3, [pc, #32]	; (8003758 <HAL_RCC_ClockConfig+0x2f4>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4618      	mov	r0, r3
 800373c:	f7fe f92c 	bl	8001998 <HAL_InitTick>
  
  return HAL_OK;
 8003740:	2300      	movs	r3, #0
}
 8003742:	4618      	mov	r0, r3
 8003744:	3778      	adds	r7, #120	; 0x78
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	40021000 	.word	0x40021000
 8003750:	08005cd0 	.word	0x08005cd0
 8003754:	20000004 	.word	0x20000004
 8003758:	20000008 	.word	0x20000008

0800375c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800375c:	b480      	push	{r7}
 800375e:	b08b      	sub	sp, #44	; 0x2c
 8003760:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003762:	2300      	movs	r3, #0
 8003764:	61fb      	str	r3, [r7, #28]
 8003766:	2300      	movs	r3, #0
 8003768:	61bb      	str	r3, [r7, #24]
 800376a:	2300      	movs	r3, #0
 800376c:	627b      	str	r3, [r7, #36]	; 0x24
 800376e:	2300      	movs	r3, #0
 8003770:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003772:	2300      	movs	r3, #0
 8003774:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003776:	4b29      	ldr	r3, [pc, #164]	; (800381c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	f003 030c 	and.w	r3, r3, #12
 8003782:	2b04      	cmp	r3, #4
 8003784:	d002      	beq.n	800378c <HAL_RCC_GetSysClockFreq+0x30>
 8003786:	2b08      	cmp	r3, #8
 8003788:	d003      	beq.n	8003792 <HAL_RCC_GetSysClockFreq+0x36>
 800378a:	e03c      	b.n	8003806 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800378c:	4b24      	ldr	r3, [pc, #144]	; (8003820 <HAL_RCC_GetSysClockFreq+0xc4>)
 800378e:	623b      	str	r3, [r7, #32]
      break;
 8003790:	e03c      	b.n	800380c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003798:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800379c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800379e:	68ba      	ldr	r2, [r7, #8]
 80037a0:	fa92 f2a2 	rbit	r2, r2
 80037a4:	607a      	str	r2, [r7, #4]
  return result;
 80037a6:	687a      	ldr	r2, [r7, #4]
 80037a8:	fab2 f282 	clz	r2, r2
 80037ac:	b2d2      	uxtb	r2, r2
 80037ae:	40d3      	lsrs	r3, r2
 80037b0:	4a1c      	ldr	r2, [pc, #112]	; (8003824 <HAL_RCC_GetSysClockFreq+0xc8>)
 80037b2:	5cd3      	ldrb	r3, [r2, r3]
 80037b4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80037b6:	4b19      	ldr	r3, [pc, #100]	; (800381c <HAL_RCC_GetSysClockFreq+0xc0>)
 80037b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ba:	f003 030f 	and.w	r3, r3, #15
 80037be:	220f      	movs	r2, #15
 80037c0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037c2:	693a      	ldr	r2, [r7, #16]
 80037c4:	fa92 f2a2 	rbit	r2, r2
 80037c8:	60fa      	str	r2, [r7, #12]
  return result;
 80037ca:	68fa      	ldr	r2, [r7, #12]
 80037cc:	fab2 f282 	clz	r2, r2
 80037d0:	b2d2      	uxtb	r2, r2
 80037d2:	40d3      	lsrs	r3, r2
 80037d4:	4a14      	ldr	r2, [pc, #80]	; (8003828 <HAL_RCC_GetSysClockFreq+0xcc>)
 80037d6:	5cd3      	ldrb	r3, [r2, r3]
 80037d8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d008      	beq.n	80037f6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80037e4:	4a0e      	ldr	r2, [pc, #56]	; (8003820 <HAL_RCC_GetSysClockFreq+0xc4>)
 80037e6:	69bb      	ldr	r3, [r7, #24]
 80037e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	fb02 f303 	mul.w	r3, r2, r3
 80037f2:	627b      	str	r3, [r7, #36]	; 0x24
 80037f4:	e004      	b.n	8003800 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	4a0c      	ldr	r2, [pc, #48]	; (800382c <HAL_RCC_GetSysClockFreq+0xd0>)
 80037fa:	fb02 f303 	mul.w	r3, r2, r3
 80037fe:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003802:	623b      	str	r3, [r7, #32]
      break;
 8003804:	e002      	b.n	800380c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003806:	4b06      	ldr	r3, [pc, #24]	; (8003820 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003808:	623b      	str	r3, [r7, #32]
      break;
 800380a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800380c:	6a3b      	ldr	r3, [r7, #32]
}
 800380e:	4618      	mov	r0, r3
 8003810:	372c      	adds	r7, #44	; 0x2c
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr
 800381a:	bf00      	nop
 800381c:	40021000 	.word	0x40021000
 8003820:	007a1200 	.word	0x007a1200
 8003824:	08005ce0 	.word	0x08005ce0
 8003828:	08005cf0 	.word	0x08005cf0
 800382c:	003d0900 	.word	0x003d0900

08003830 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b092      	sub	sp, #72	; 0x48
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003838:	2300      	movs	r3, #0
 800383a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800383c:	2300      	movs	r3, #0
 800383e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003840:	2300      	movs	r3, #0
 8003842:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800384e:	2b00      	cmp	r3, #0
 8003850:	f000 80d4 	beq.w	80039fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003854:	4b4e      	ldr	r3, [pc, #312]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003856:	69db      	ldr	r3, [r3, #28]
 8003858:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d10e      	bne.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003860:	4b4b      	ldr	r3, [pc, #300]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003862:	69db      	ldr	r3, [r3, #28]
 8003864:	4a4a      	ldr	r2, [pc, #296]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003866:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800386a:	61d3      	str	r3, [r2, #28]
 800386c:	4b48      	ldr	r3, [pc, #288]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800386e:	69db      	ldr	r3, [r3, #28]
 8003870:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003874:	60bb      	str	r3, [r7, #8]
 8003876:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003878:	2301      	movs	r3, #1
 800387a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800387e:	4b45      	ldr	r3, [pc, #276]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003886:	2b00      	cmp	r3, #0
 8003888:	d118      	bne.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800388a:	4b42      	ldr	r3, [pc, #264]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a41      	ldr	r2, [pc, #260]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003890:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003894:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003896:	f7fe f8c3 	bl	8001a20 <HAL_GetTick>
 800389a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800389c:	e008      	b.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800389e:	f7fe f8bf 	bl	8001a20 <HAL_GetTick>
 80038a2:	4602      	mov	r2, r0
 80038a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	2b64      	cmp	r3, #100	; 0x64
 80038aa:	d901      	bls.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80038ac:	2303      	movs	r3, #3
 80038ae:	e169      	b.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038b0:	4b38      	ldr	r3, [pc, #224]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d0f0      	beq.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80038bc:	4b34      	ldr	r3, [pc, #208]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038be:	6a1b      	ldr	r3, [r3, #32]
 80038c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038c4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80038c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	f000 8084 	beq.w	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80038d8:	429a      	cmp	r2, r3
 80038da:	d07c      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80038dc:	4b2c      	ldr	r3, [pc, #176]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038de:	6a1b      	ldr	r3, [r3, #32]
 80038e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80038ea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ee:	fa93 f3a3 	rbit	r3, r3
 80038f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80038f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80038f6:	fab3 f383 	clz	r3, r3
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	461a      	mov	r2, r3
 80038fe:	4b26      	ldr	r3, [pc, #152]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003900:	4413      	add	r3, r2
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	461a      	mov	r2, r3
 8003906:	2301      	movs	r3, #1
 8003908:	6013      	str	r3, [r2, #0]
 800390a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800390e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003912:	fa93 f3a3 	rbit	r3, r3
 8003916:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800391a:	fab3 f383 	clz	r3, r3
 800391e:	b2db      	uxtb	r3, r3
 8003920:	461a      	mov	r2, r3
 8003922:	4b1d      	ldr	r3, [pc, #116]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003924:	4413      	add	r3, r2
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	461a      	mov	r2, r3
 800392a:	2300      	movs	r3, #0
 800392c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800392e:	4a18      	ldr	r2, [pc, #96]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003930:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003932:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003934:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003936:	f003 0301 	and.w	r3, r3, #1
 800393a:	2b00      	cmp	r3, #0
 800393c:	d04b      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800393e:	f7fe f86f 	bl	8001a20 <HAL_GetTick>
 8003942:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003944:	e00a      	b.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003946:	f7fe f86b 	bl	8001a20 <HAL_GetTick>
 800394a:	4602      	mov	r2, r0
 800394c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800394e:	1ad3      	subs	r3, r2, r3
 8003950:	f241 3288 	movw	r2, #5000	; 0x1388
 8003954:	4293      	cmp	r3, r2
 8003956:	d901      	bls.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003958:	2303      	movs	r3, #3
 800395a:	e113      	b.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x354>
 800395c:	2302      	movs	r3, #2
 800395e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003962:	fa93 f3a3 	rbit	r3, r3
 8003966:	627b      	str	r3, [r7, #36]	; 0x24
 8003968:	2302      	movs	r3, #2
 800396a:	623b      	str	r3, [r7, #32]
 800396c:	6a3b      	ldr	r3, [r7, #32]
 800396e:	fa93 f3a3 	rbit	r3, r3
 8003972:	61fb      	str	r3, [r7, #28]
  return result;
 8003974:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003976:	fab3 f383 	clz	r3, r3
 800397a:	b2db      	uxtb	r3, r3
 800397c:	095b      	lsrs	r3, r3, #5
 800397e:	b2db      	uxtb	r3, r3
 8003980:	f043 0302 	orr.w	r3, r3, #2
 8003984:	b2db      	uxtb	r3, r3
 8003986:	2b02      	cmp	r3, #2
 8003988:	d108      	bne.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800398a:	4b01      	ldr	r3, [pc, #4]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800398c:	6a1b      	ldr	r3, [r3, #32]
 800398e:	e00d      	b.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003990:	40021000 	.word	0x40021000
 8003994:	40007000 	.word	0x40007000
 8003998:	10908100 	.word	0x10908100
 800399c:	2302      	movs	r3, #2
 800399e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039a0:	69bb      	ldr	r3, [r7, #24]
 80039a2:	fa93 f3a3 	rbit	r3, r3
 80039a6:	617b      	str	r3, [r7, #20]
 80039a8:	4b78      	ldr	r3, [pc, #480]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ac:	2202      	movs	r2, #2
 80039ae:	613a      	str	r2, [r7, #16]
 80039b0:	693a      	ldr	r2, [r7, #16]
 80039b2:	fa92 f2a2 	rbit	r2, r2
 80039b6:	60fa      	str	r2, [r7, #12]
  return result;
 80039b8:	68fa      	ldr	r2, [r7, #12]
 80039ba:	fab2 f282 	clz	r2, r2
 80039be:	b2d2      	uxtb	r2, r2
 80039c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039c4:	b2d2      	uxtb	r2, r2
 80039c6:	f002 021f 	and.w	r2, r2, #31
 80039ca:	2101      	movs	r1, #1
 80039cc:	fa01 f202 	lsl.w	r2, r1, r2
 80039d0:	4013      	ands	r3, r2
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d0b7      	beq.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80039d6:	4b6d      	ldr	r3, [pc, #436]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039d8:	6a1b      	ldr	r3, [r3, #32]
 80039da:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	496a      	ldr	r1, [pc, #424]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039e4:	4313      	orrs	r3, r2
 80039e6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80039e8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d105      	bne.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039f0:	4b66      	ldr	r3, [pc, #408]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039f2:	69db      	ldr	r3, [r3, #28]
 80039f4:	4a65      	ldr	r2, [pc, #404]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039fa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0301 	and.w	r3, r3, #1
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d008      	beq.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a08:	4b60      	ldr	r3, [pc, #384]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a0c:	f023 0203 	bic.w	r2, r3, #3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	495d      	ldr	r1, [pc, #372]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a16:	4313      	orrs	r3, r2
 8003a18:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0302 	and.w	r3, r3, #2
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d008      	beq.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a26:	4b59      	ldr	r3, [pc, #356]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a2a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	4956      	ldr	r1, [pc, #344]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a34:	4313      	orrs	r3, r2
 8003a36:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 0304 	and.w	r3, r3, #4
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d008      	beq.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003a44:	4b51      	ldr	r3, [pc, #324]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a48:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	691b      	ldr	r3, [r3, #16]
 8003a50:	494e      	ldr	r1, [pc, #312]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a52:	4313      	orrs	r3, r2
 8003a54:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 0320 	and.w	r3, r3, #32
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d008      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a62:	4b4a      	ldr	r3, [pc, #296]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a66:	f023 0210 	bic.w	r2, r3, #16
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	69db      	ldr	r3, [r3, #28]
 8003a6e:	4947      	ldr	r1, [pc, #284]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a70:	4313      	orrs	r3, r2
 8003a72:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d008      	beq.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003a80:	4b42      	ldr	r3, [pc, #264]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a8c:	493f      	ldr	r1, [pc, #252]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d008      	beq.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a9e:	4b3b      	ldr	r3, [pc, #236]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa2:	f023 0220 	bic.w	r2, r3, #32
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a1b      	ldr	r3, [r3, #32]
 8003aaa:	4938      	ldr	r1, [pc, #224]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003aac:	4313      	orrs	r3, r2
 8003aae:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 0308 	and.w	r3, r3, #8
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d008      	beq.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003abc:	4b33      	ldr	r3, [pc, #204]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	695b      	ldr	r3, [r3, #20]
 8003ac8:	4930      	ldr	r1, [pc, #192]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003aca:	4313      	orrs	r3, r2
 8003acc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0310 	and.w	r3, r3, #16
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d008      	beq.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003ada:	4b2c      	ldr	r3, [pc, #176]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ade:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	699b      	ldr	r3, [r3, #24]
 8003ae6:	4929      	ldr	r1, [pc, #164]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d008      	beq.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003af8:	4b24      	ldr	r3, [pc, #144]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b04:	4921      	ldr	r1, [pc, #132]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b06:	4313      	orrs	r3, r2
 8003b08:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d008      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003b16:	4b1d      	ldr	r3, [pc, #116]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b1a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b22:	491a      	ldr	r1, [pc, #104]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b24:	4313      	orrs	r3, r2
 8003b26:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d008      	beq.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003b34:	4b15      	ldr	r3, [pc, #84]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b38:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b40:	4912      	ldr	r1, [pc, #72]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b42:	4313      	orrs	r3, r2
 8003b44:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d008      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003b52:	4b0e      	ldr	r3, [pc, #56]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b56:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5e:	490b      	ldr	r1, [pc, #44]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b60:	4313      	orrs	r3, r2
 8003b62:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d008      	beq.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003b70:	4b06      	ldr	r3, [pc, #24]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b74:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b7c:	4903      	ldr	r1, [pc, #12]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003b82:	2300      	movs	r3, #0
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3748      	adds	r7, #72	; 0x48
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	40021000 	.word	0x40021000

08003b90 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d101      	bne.n	8003ba2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e09d      	b.n	8003cde <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d108      	bne.n	8003bbc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bb2:	d009      	beq.n	8003bc8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	61da      	str	r2, [r3, #28]
 8003bba:	e005      	b.n	8003bc8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d106      	bne.n	8003be8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f7fd fc3e 	bl	8001464 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2202      	movs	r2, #2
 8003bec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bfe:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c08:	d902      	bls.n	8003c10 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	60fb      	str	r3, [r7, #12]
 8003c0e:	e002      	b.n	8003c16 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003c10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c14:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003c1e:	d007      	beq.n	8003c30 <HAL_SPI_Init+0xa0>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c28:	d002      	beq.n	8003c30 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003c40:	431a      	orrs	r2, r3
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	691b      	ldr	r3, [r3, #16]
 8003c46:	f003 0302 	and.w	r3, r3, #2
 8003c4a:	431a      	orrs	r2, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	695b      	ldr	r3, [r3, #20]
 8003c50:	f003 0301 	and.w	r3, r3, #1
 8003c54:	431a      	orrs	r2, r3
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	699b      	ldr	r3, [r3, #24]
 8003c5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c5e:	431a      	orrs	r2, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	69db      	ldr	r3, [r3, #28]
 8003c64:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c68:	431a      	orrs	r2, r3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a1b      	ldr	r3, [r3, #32]
 8003c6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c72:	ea42 0103 	orr.w	r1, r2, r3
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c7a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	430a      	orrs	r2, r1
 8003c84:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	699b      	ldr	r3, [r3, #24]
 8003c8a:	0c1b      	lsrs	r3, r3, #16
 8003c8c:	f003 0204 	and.w	r2, r3, #4
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c94:	f003 0310 	and.w	r3, r3, #16
 8003c98:	431a      	orrs	r2, r3
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c9e:	f003 0308 	and.w	r3, r3, #8
 8003ca2:	431a      	orrs	r2, r3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003cac:	ea42 0103 	orr.w	r1, r2, r3
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	430a      	orrs	r2, r1
 8003cbc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	69da      	ldr	r2, [r3, #28]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ccc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003cdc:	2300      	movs	r3, #0
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3710      	adds	r7, #16
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}

08003ce6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ce6:	b580      	push	{r7, lr}
 8003ce8:	b088      	sub	sp, #32
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	60f8      	str	r0, [r7, #12]
 8003cee:	60b9      	str	r1, [r7, #8]
 8003cf0:	603b      	str	r3, [r7, #0]
 8003cf2:	4613      	mov	r3, r2
 8003cf4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d101      	bne.n	8003d08 <HAL_SPI_Transmit+0x22>
 8003d04:	2302      	movs	r3, #2
 8003d06:	e158      	b.n	8003fba <HAL_SPI_Transmit+0x2d4>
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d10:	f7fd fe86 	bl	8001a20 <HAL_GetTick>
 8003d14:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003d16:	88fb      	ldrh	r3, [r7, #6]
 8003d18:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d002      	beq.n	8003d2c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003d26:	2302      	movs	r3, #2
 8003d28:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003d2a:	e13d      	b.n	8003fa8 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d002      	beq.n	8003d38 <HAL_SPI_Transmit+0x52>
 8003d32:	88fb      	ldrh	r3, [r7, #6]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d102      	bne.n	8003d3e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003d3c:	e134      	b.n	8003fa8 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2203      	movs	r2, #3
 8003d42:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	68ba      	ldr	r2, [r7, #8]
 8003d50:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	88fa      	ldrh	r2, [r7, #6]
 8003d56:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	88fa      	ldrh	r2, [r7, #6]
 8003d5c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2200      	movs	r2, #0
 8003d62:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2200      	movs	r2, #0
 8003d68:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2200      	movs	r2, #0
 8003d78:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d88:	d10f      	bne.n	8003daa <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d98:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003da8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003db4:	2b40      	cmp	r3, #64	; 0x40
 8003db6:	d007      	beq.n	8003dc8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003dc6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003dd0:	d94b      	bls.n	8003e6a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d002      	beq.n	8003de0 <HAL_SPI_Transmit+0xfa>
 8003dda:	8afb      	ldrh	r3, [r7, #22]
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d13e      	bne.n	8003e5e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de4:	881a      	ldrh	r2, [r3, #0]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df0:	1c9a      	adds	r2, r3, #2
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	3b01      	subs	r3, #1
 8003dfe:	b29a      	uxth	r2, r3
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003e04:	e02b      	b.n	8003e5e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	f003 0302 	and.w	r3, r3, #2
 8003e10:	2b02      	cmp	r3, #2
 8003e12:	d112      	bne.n	8003e3a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e18:	881a      	ldrh	r2, [r3, #0]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e24:	1c9a      	adds	r2, r3, #2
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	3b01      	subs	r3, #1
 8003e32:	b29a      	uxth	r2, r3
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003e38:	e011      	b.n	8003e5e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e3a:	f7fd fdf1 	bl	8001a20 <HAL_GetTick>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	69bb      	ldr	r3, [r7, #24]
 8003e42:	1ad3      	subs	r3, r2, r3
 8003e44:	683a      	ldr	r2, [r7, #0]
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d803      	bhi.n	8003e52 <HAL_SPI_Transmit+0x16c>
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e50:	d102      	bne.n	8003e58 <HAL_SPI_Transmit+0x172>
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d102      	bne.n	8003e5e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003e58:	2303      	movs	r3, #3
 8003e5a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003e5c:	e0a4      	b.n	8003fa8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d1ce      	bne.n	8003e06 <HAL_SPI_Transmit+0x120>
 8003e68:	e07c      	b.n	8003f64 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d002      	beq.n	8003e78 <HAL_SPI_Transmit+0x192>
 8003e72:	8afb      	ldrh	r3, [r7, #22]
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d170      	bne.n	8003f5a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d912      	bls.n	8003ea8 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e86:	881a      	ldrh	r2, [r3, #0]
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e92:	1c9a      	adds	r2, r3, #2
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	3b02      	subs	r3, #2
 8003ea0:	b29a      	uxth	r2, r3
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003ea6:	e058      	b.n	8003f5a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	330c      	adds	r3, #12
 8003eb2:	7812      	ldrb	r2, [r2, #0]
 8003eb4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eba:	1c5a      	adds	r2, r3, #1
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	3b01      	subs	r3, #1
 8003ec8:	b29a      	uxth	r2, r3
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003ece:	e044      	b.n	8003f5a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	f003 0302 	and.w	r3, r3, #2
 8003eda:	2b02      	cmp	r3, #2
 8003edc:	d12b      	bne.n	8003f36 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d912      	bls.n	8003f0e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eec:	881a      	ldrh	r2, [r3, #0]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ef8:	1c9a      	adds	r2, r3, #2
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	3b02      	subs	r3, #2
 8003f06:	b29a      	uxth	r2, r3
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003f0c:	e025      	b.n	8003f5a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	330c      	adds	r3, #12
 8003f18:	7812      	ldrb	r2, [r2, #0]
 8003f1a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f20:	1c5a      	adds	r2, r3, #1
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f2a:	b29b      	uxth	r3, r3
 8003f2c:	3b01      	subs	r3, #1
 8003f2e:	b29a      	uxth	r2, r3
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003f34:	e011      	b.n	8003f5a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f36:	f7fd fd73 	bl	8001a20 <HAL_GetTick>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	69bb      	ldr	r3, [r7, #24]
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	683a      	ldr	r2, [r7, #0]
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d803      	bhi.n	8003f4e <HAL_SPI_Transmit+0x268>
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f4c:	d102      	bne.n	8003f54 <HAL_SPI_Transmit+0x26e>
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d102      	bne.n	8003f5a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003f54:	2303      	movs	r3, #3
 8003f56:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003f58:	e026      	b.n	8003fa8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d1b5      	bne.n	8003ed0 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f64:	69ba      	ldr	r2, [r7, #24]
 8003f66:	6839      	ldr	r1, [r7, #0]
 8003f68:	68f8      	ldr	r0, [r7, #12]
 8003f6a:	f000 f949 	bl	8004200 <SPI_EndRxTxTransaction>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d002      	beq.n	8003f7a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2220      	movs	r2, #32
 8003f78:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d10a      	bne.n	8003f98 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f82:	2300      	movs	r3, #0
 8003f84:	613b      	str	r3, [r7, #16]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	613b      	str	r3, [r7, #16]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	613b      	str	r3, [r7, #16]
 8003f96:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d002      	beq.n	8003fa6 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	77fb      	strb	r3, [r7, #31]
 8003fa4:	e000      	b.n	8003fa8 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8003fa6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003fb8:	7ffb      	ldrb	r3, [r7, #31]
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3720      	adds	r7, #32
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
	...

08003fc4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b088      	sub	sp, #32
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	60f8      	str	r0, [r7, #12]
 8003fcc:	60b9      	str	r1, [r7, #8]
 8003fce:	603b      	str	r3, [r7, #0]
 8003fd0:	4613      	mov	r3, r2
 8003fd2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003fd4:	f7fd fd24 	bl	8001a20 <HAL_GetTick>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fdc:	1a9b      	subs	r3, r3, r2
 8003fde:	683a      	ldr	r2, [r7, #0]
 8003fe0:	4413      	add	r3, r2
 8003fe2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003fe4:	f7fd fd1c 	bl	8001a20 <HAL_GetTick>
 8003fe8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003fea:	4b39      	ldr	r3, [pc, #228]	; (80040d0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	015b      	lsls	r3, r3, #5
 8003ff0:	0d1b      	lsrs	r3, r3, #20
 8003ff2:	69fa      	ldr	r2, [r7, #28]
 8003ff4:	fb02 f303 	mul.w	r3, r2, r3
 8003ff8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ffa:	e054      	b.n	80040a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004002:	d050      	beq.n	80040a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004004:	f7fd fd0c 	bl	8001a20 <HAL_GetTick>
 8004008:	4602      	mov	r2, r0
 800400a:	69bb      	ldr	r3, [r7, #24]
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	69fa      	ldr	r2, [r7, #28]
 8004010:	429a      	cmp	r2, r3
 8004012:	d902      	bls.n	800401a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004014:	69fb      	ldr	r3, [r7, #28]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d13d      	bne.n	8004096 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	685a      	ldr	r2, [r3, #4]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004028:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004032:	d111      	bne.n	8004058 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800403c:	d004      	beq.n	8004048 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004046:	d107      	bne.n	8004058 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004056:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800405c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004060:	d10f      	bne.n	8004082 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004070:	601a      	str	r2, [r3, #0]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004080:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2201      	movs	r2, #1
 8004086:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2200      	movs	r2, #0
 800408e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e017      	b.n	80040c6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d101      	bne.n	80040a0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800409c:	2300      	movs	r3, #0
 800409e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	3b01      	subs	r3, #1
 80040a4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	689a      	ldr	r2, [r3, #8]
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	4013      	ands	r3, r2
 80040b0:	68ba      	ldr	r2, [r7, #8]
 80040b2:	429a      	cmp	r2, r3
 80040b4:	bf0c      	ite	eq
 80040b6:	2301      	moveq	r3, #1
 80040b8:	2300      	movne	r3, #0
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	461a      	mov	r2, r3
 80040be:	79fb      	ldrb	r3, [r7, #7]
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d19b      	bne.n	8003ffc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80040c4:	2300      	movs	r3, #0
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3720      	adds	r7, #32
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop
 80040d0:	20000004 	.word	0x20000004

080040d4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b08a      	sub	sp, #40	; 0x28
 80040d8:	af00      	add	r7, sp, #0
 80040da:	60f8      	str	r0, [r7, #12]
 80040dc:	60b9      	str	r1, [r7, #8]
 80040de:	607a      	str	r2, [r7, #4]
 80040e0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80040e2:	2300      	movs	r3, #0
 80040e4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80040e6:	f7fd fc9b 	bl	8001a20 <HAL_GetTick>
 80040ea:	4602      	mov	r2, r0
 80040ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ee:	1a9b      	subs	r3, r3, r2
 80040f0:	683a      	ldr	r2, [r7, #0]
 80040f2:	4413      	add	r3, r2
 80040f4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80040f6:	f7fd fc93 	bl	8001a20 <HAL_GetTick>
 80040fa:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	330c      	adds	r3, #12
 8004102:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004104:	4b3d      	ldr	r3, [pc, #244]	; (80041fc <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	4613      	mov	r3, r2
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	4413      	add	r3, r2
 800410e:	00da      	lsls	r2, r3, #3
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	0d1b      	lsrs	r3, r3, #20
 8004114:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004116:	fb02 f303 	mul.w	r3, r2, r3
 800411a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800411c:	e060      	b.n	80041e0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004124:	d107      	bne.n	8004136 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d104      	bne.n	8004136 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800412c:	69fb      	ldr	r3, [r7, #28]
 800412e:	781b      	ldrb	r3, [r3, #0]
 8004130:	b2db      	uxtb	r3, r3
 8004132:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004134:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800413c:	d050      	beq.n	80041e0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800413e:	f7fd fc6f 	bl	8001a20 <HAL_GetTick>
 8004142:	4602      	mov	r2, r0
 8004144:	6a3b      	ldr	r3, [r7, #32]
 8004146:	1ad3      	subs	r3, r2, r3
 8004148:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800414a:	429a      	cmp	r2, r3
 800414c:	d902      	bls.n	8004154 <SPI_WaitFifoStateUntilTimeout+0x80>
 800414e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004150:	2b00      	cmp	r3, #0
 8004152:	d13d      	bne.n	80041d0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	685a      	ldr	r2, [r3, #4]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004162:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800416c:	d111      	bne.n	8004192 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004176:	d004      	beq.n	8004182 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004180:	d107      	bne.n	8004192 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004190:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004196:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800419a:	d10f      	bne.n	80041bc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80041aa:	601a      	str	r2, [r3, #0]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80041ba:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2201      	movs	r2, #1
 80041c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2200      	movs	r2, #0
 80041c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80041cc:	2303      	movs	r3, #3
 80041ce:	e010      	b.n	80041f2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80041d0:	69bb      	ldr	r3, [r7, #24]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d101      	bne.n	80041da <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80041d6:	2300      	movs	r3, #0
 80041d8:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 80041da:	69bb      	ldr	r3, [r7, #24]
 80041dc:	3b01      	subs	r3, #1
 80041de:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	689a      	ldr	r2, [r3, #8]
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	4013      	ands	r3, r2
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d196      	bne.n	800411e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80041f0:	2300      	movs	r3, #0
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3728      	adds	r7, #40	; 0x28
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	20000004 	.word	0x20000004

08004200 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b086      	sub	sp, #24
 8004204:	af02      	add	r7, sp, #8
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	60b9      	str	r1, [r7, #8]
 800420a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	9300      	str	r3, [sp, #0]
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	2200      	movs	r2, #0
 8004214:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004218:	68f8      	ldr	r0, [r7, #12]
 800421a:	f7ff ff5b 	bl	80040d4 <SPI_WaitFifoStateUntilTimeout>
 800421e:	4603      	mov	r3, r0
 8004220:	2b00      	cmp	r3, #0
 8004222:	d007      	beq.n	8004234 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004228:	f043 0220 	orr.w	r2, r3, #32
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004230:	2303      	movs	r3, #3
 8004232:	e027      	b.n	8004284 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	9300      	str	r3, [sp, #0]
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	2200      	movs	r2, #0
 800423c:	2180      	movs	r1, #128	; 0x80
 800423e:	68f8      	ldr	r0, [r7, #12]
 8004240:	f7ff fec0 	bl	8003fc4 <SPI_WaitFlagStateUntilTimeout>
 8004244:	4603      	mov	r3, r0
 8004246:	2b00      	cmp	r3, #0
 8004248:	d007      	beq.n	800425a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800424e:	f043 0220 	orr.w	r2, r3, #32
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004256:	2303      	movs	r3, #3
 8004258:	e014      	b.n	8004284 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	9300      	str	r3, [sp, #0]
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	2200      	movs	r2, #0
 8004262:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004266:	68f8      	ldr	r0, [r7, #12]
 8004268:	f7ff ff34 	bl	80040d4 <SPI_WaitFifoStateUntilTimeout>
 800426c:	4603      	mov	r3, r0
 800426e:	2b00      	cmp	r3, #0
 8004270:	d007      	beq.n	8004282 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004276:	f043 0220 	orr.w	r2, r3, #32
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800427e:	2303      	movs	r3, #3
 8004280:	e000      	b.n	8004284 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004282:	2300      	movs	r3, #0
}
 8004284:	4618      	mov	r0, r3
 8004286:	3710      	adds	r7, #16
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b082      	sub	sp, #8
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d101      	bne.n	800429e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e049      	b.n	8004332 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d106      	bne.n	80042b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f7fd fa8c 	bl	80017d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2202      	movs	r2, #2
 80042bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	3304      	adds	r3, #4
 80042c8:	4619      	mov	r1, r3
 80042ca:	4610      	mov	r0, r2
 80042cc:	f000 fae0 	bl	8004890 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2201      	movs	r2, #1
 8004304:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2201      	movs	r2, #1
 800430c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2201      	movs	r2, #1
 8004314:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2201      	movs	r2, #1
 800431c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2201      	movs	r2, #1
 800432c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004330:	2300      	movs	r3, #0
}
 8004332:	4618      	mov	r0, r3
 8004334:	3708      	adds	r7, #8
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
	...

0800433c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800433c:	b480      	push	{r7}
 800433e:	b085      	sub	sp, #20
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800434a:	b2db      	uxtb	r3, r3
 800434c:	2b01      	cmp	r3, #1
 800434e:	d001      	beq.n	8004354 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	e04a      	b.n	80043ea <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2202      	movs	r2, #2
 8004358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	68da      	ldr	r2, [r3, #12]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f042 0201 	orr.w	r2, r2, #1
 800436a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a21      	ldr	r2, [pc, #132]	; (80043f8 <HAL_TIM_Base_Start_IT+0xbc>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d018      	beq.n	80043a8 <HAL_TIM_Base_Start_IT+0x6c>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800437e:	d013      	beq.n	80043a8 <HAL_TIM_Base_Start_IT+0x6c>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a1d      	ldr	r2, [pc, #116]	; (80043fc <HAL_TIM_Base_Start_IT+0xc0>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d00e      	beq.n	80043a8 <HAL_TIM_Base_Start_IT+0x6c>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a1c      	ldr	r2, [pc, #112]	; (8004400 <HAL_TIM_Base_Start_IT+0xc4>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d009      	beq.n	80043a8 <HAL_TIM_Base_Start_IT+0x6c>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a1a      	ldr	r2, [pc, #104]	; (8004404 <HAL_TIM_Base_Start_IT+0xc8>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d004      	beq.n	80043a8 <HAL_TIM_Base_Start_IT+0x6c>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a19      	ldr	r2, [pc, #100]	; (8004408 <HAL_TIM_Base_Start_IT+0xcc>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d115      	bne.n	80043d4 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	689a      	ldr	r2, [r3, #8]
 80043ae:	4b17      	ldr	r3, [pc, #92]	; (800440c <HAL_TIM_Base_Start_IT+0xd0>)
 80043b0:	4013      	ands	r3, r2
 80043b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2b06      	cmp	r3, #6
 80043b8:	d015      	beq.n	80043e6 <HAL_TIM_Base_Start_IT+0xaa>
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043c0:	d011      	beq.n	80043e6 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f042 0201 	orr.w	r2, r2, #1
 80043d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043d2:	e008      	b.n	80043e6 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f042 0201 	orr.w	r2, r2, #1
 80043e2:	601a      	str	r2, [r3, #0]
 80043e4:	e000      	b.n	80043e8 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043e6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80043e8:	2300      	movs	r3, #0
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3714      	adds	r7, #20
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr
 80043f6:	bf00      	nop
 80043f8:	40012c00 	.word	0x40012c00
 80043fc:	40000400 	.word	0x40000400
 8004400:	40000800 	.word	0x40000800
 8004404:	40013400 	.word	0x40013400
 8004408:	40014000 	.word	0x40014000
 800440c:	00010007 	.word	0x00010007

08004410 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004410:	b480      	push	{r7}
 8004412:	b083      	sub	sp, #12
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	68da      	ldr	r2, [r3, #12]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f022 0201 	bic.w	r2, r2, #1
 8004426:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	6a1a      	ldr	r2, [r3, #32]
 800442e:	f241 1311 	movw	r3, #4369	; 0x1111
 8004432:	4013      	ands	r3, r2
 8004434:	2b00      	cmp	r3, #0
 8004436:	d10f      	bne.n	8004458 <HAL_TIM_Base_Stop_IT+0x48>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	6a1a      	ldr	r2, [r3, #32]
 800443e:	f240 4344 	movw	r3, #1092	; 0x444
 8004442:	4013      	ands	r3, r2
 8004444:	2b00      	cmp	r3, #0
 8004446:	d107      	bne.n	8004458 <HAL_TIM_Base_Stop_IT+0x48>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f022 0201 	bic.w	r2, r2, #1
 8004456:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2201      	movs	r2, #1
 800445c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004460:	2300      	movs	r3, #0
}
 8004462:	4618      	mov	r0, r3
 8004464:	370c      	adds	r7, #12
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr

0800446e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800446e:	b580      	push	{r7, lr}
 8004470:	b082      	sub	sp, #8
 8004472:	af00      	add	r7, sp, #0
 8004474:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	691b      	ldr	r3, [r3, #16]
 800447c:	f003 0302 	and.w	r3, r3, #2
 8004480:	2b02      	cmp	r3, #2
 8004482:	d122      	bne.n	80044ca <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	68db      	ldr	r3, [r3, #12]
 800448a:	f003 0302 	and.w	r3, r3, #2
 800448e:	2b02      	cmp	r3, #2
 8004490:	d11b      	bne.n	80044ca <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f06f 0202 	mvn.w	r2, #2
 800449a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2201      	movs	r2, #1
 80044a0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	699b      	ldr	r3, [r3, #24]
 80044a8:	f003 0303 	and.w	r3, r3, #3
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d003      	beq.n	80044b8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	f000 f9ce 	bl	8004852 <HAL_TIM_IC_CaptureCallback>
 80044b6:	e005      	b.n	80044c4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	f000 f9c0 	bl	800483e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f000 f9d1 	bl	8004866 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2200      	movs	r2, #0
 80044c8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	691b      	ldr	r3, [r3, #16]
 80044d0:	f003 0304 	and.w	r3, r3, #4
 80044d4:	2b04      	cmp	r3, #4
 80044d6:	d122      	bne.n	800451e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	68db      	ldr	r3, [r3, #12]
 80044de:	f003 0304 	and.w	r3, r3, #4
 80044e2:	2b04      	cmp	r3, #4
 80044e4:	d11b      	bne.n	800451e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f06f 0204 	mvn.w	r2, #4
 80044ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2202      	movs	r2, #2
 80044f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	699b      	ldr	r3, [r3, #24]
 80044fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004500:	2b00      	cmp	r3, #0
 8004502:	d003      	beq.n	800450c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f000 f9a4 	bl	8004852 <HAL_TIM_IC_CaptureCallback>
 800450a:	e005      	b.n	8004518 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f000 f996 	bl	800483e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f000 f9a7 	bl	8004866 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2200      	movs	r2, #0
 800451c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	691b      	ldr	r3, [r3, #16]
 8004524:	f003 0308 	and.w	r3, r3, #8
 8004528:	2b08      	cmp	r3, #8
 800452a:	d122      	bne.n	8004572 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	68db      	ldr	r3, [r3, #12]
 8004532:	f003 0308 	and.w	r3, r3, #8
 8004536:	2b08      	cmp	r3, #8
 8004538:	d11b      	bne.n	8004572 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f06f 0208 	mvn.w	r2, #8
 8004542:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2204      	movs	r2, #4
 8004548:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	69db      	ldr	r3, [r3, #28]
 8004550:	f003 0303 	and.w	r3, r3, #3
 8004554:	2b00      	cmp	r3, #0
 8004556:	d003      	beq.n	8004560 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f000 f97a 	bl	8004852 <HAL_TIM_IC_CaptureCallback>
 800455e:	e005      	b.n	800456c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f000 f96c 	bl	800483e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f000 f97d 	bl	8004866 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2200      	movs	r2, #0
 8004570:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	691b      	ldr	r3, [r3, #16]
 8004578:	f003 0310 	and.w	r3, r3, #16
 800457c:	2b10      	cmp	r3, #16
 800457e:	d122      	bne.n	80045c6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	f003 0310 	and.w	r3, r3, #16
 800458a:	2b10      	cmp	r3, #16
 800458c:	d11b      	bne.n	80045c6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f06f 0210 	mvn.w	r2, #16
 8004596:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2208      	movs	r2, #8
 800459c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	69db      	ldr	r3, [r3, #28]
 80045a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d003      	beq.n	80045b4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f000 f950 	bl	8004852 <HAL_TIM_IC_CaptureCallback>
 80045b2:	e005      	b.n	80045c0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f000 f942 	bl	800483e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f000 f953 	bl	8004866 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2200      	movs	r2, #0
 80045c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	691b      	ldr	r3, [r3, #16]
 80045cc:	f003 0301 	and.w	r3, r3, #1
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d10e      	bne.n	80045f2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	68db      	ldr	r3, [r3, #12]
 80045da:	f003 0301 	and.w	r3, r3, #1
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d107      	bne.n	80045f2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f06f 0201 	mvn.w	r2, #1
 80045ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f7fc fcb1 	bl	8000f54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	691b      	ldr	r3, [r3, #16]
 80045f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045fc:	2b80      	cmp	r3, #128	; 0x80
 80045fe:	d10e      	bne.n	800461e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	68db      	ldr	r3, [r3, #12]
 8004606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800460a:	2b80      	cmp	r3, #128	; 0x80
 800460c:	d107      	bne.n	800461e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004616:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f000 faed 	bl	8004bf8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	691b      	ldr	r3, [r3, #16]
 8004624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004628:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800462c:	d10e      	bne.n	800464c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004638:	2b80      	cmp	r3, #128	; 0x80
 800463a:	d107      	bne.n	800464c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004644:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f000 fae0 	bl	8004c0c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	691b      	ldr	r3, [r3, #16]
 8004652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004656:	2b40      	cmp	r3, #64	; 0x40
 8004658:	d10e      	bne.n	8004678 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004664:	2b40      	cmp	r3, #64	; 0x40
 8004666:	d107      	bne.n	8004678 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004670:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f000 f901 	bl	800487a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	691b      	ldr	r3, [r3, #16]
 800467e:	f003 0320 	and.w	r3, r3, #32
 8004682:	2b20      	cmp	r3, #32
 8004684:	d10e      	bne.n	80046a4 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	f003 0320 	and.w	r3, r3, #32
 8004690:	2b20      	cmp	r3, #32
 8004692:	d107      	bne.n	80046a4 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f06f 0220 	mvn.w	r2, #32
 800469c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f000 faa0 	bl	8004be4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80046a4:	bf00      	nop
 80046a6:	3708      	adds	r7, #8
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}

080046ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b084      	sub	sp, #16
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046b6:	2300      	movs	r3, #0
 80046b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d101      	bne.n	80046c8 <HAL_TIM_ConfigClockSource+0x1c>
 80046c4:	2302      	movs	r3, #2
 80046c6:	e0b6      	b.n	8004836 <HAL_TIM_ConfigClockSource+0x18a>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2201      	movs	r2, #1
 80046cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2202      	movs	r2, #2
 80046d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80046ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	68ba      	ldr	r2, [r7, #8]
 80046fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004704:	d03e      	beq.n	8004784 <HAL_TIM_ConfigClockSource+0xd8>
 8004706:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800470a:	f200 8087 	bhi.w	800481c <HAL_TIM_ConfigClockSource+0x170>
 800470e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004712:	f000 8086 	beq.w	8004822 <HAL_TIM_ConfigClockSource+0x176>
 8004716:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800471a:	d87f      	bhi.n	800481c <HAL_TIM_ConfigClockSource+0x170>
 800471c:	2b70      	cmp	r3, #112	; 0x70
 800471e:	d01a      	beq.n	8004756 <HAL_TIM_ConfigClockSource+0xaa>
 8004720:	2b70      	cmp	r3, #112	; 0x70
 8004722:	d87b      	bhi.n	800481c <HAL_TIM_ConfigClockSource+0x170>
 8004724:	2b60      	cmp	r3, #96	; 0x60
 8004726:	d050      	beq.n	80047ca <HAL_TIM_ConfigClockSource+0x11e>
 8004728:	2b60      	cmp	r3, #96	; 0x60
 800472a:	d877      	bhi.n	800481c <HAL_TIM_ConfigClockSource+0x170>
 800472c:	2b50      	cmp	r3, #80	; 0x50
 800472e:	d03c      	beq.n	80047aa <HAL_TIM_ConfigClockSource+0xfe>
 8004730:	2b50      	cmp	r3, #80	; 0x50
 8004732:	d873      	bhi.n	800481c <HAL_TIM_ConfigClockSource+0x170>
 8004734:	2b40      	cmp	r3, #64	; 0x40
 8004736:	d058      	beq.n	80047ea <HAL_TIM_ConfigClockSource+0x13e>
 8004738:	2b40      	cmp	r3, #64	; 0x40
 800473a:	d86f      	bhi.n	800481c <HAL_TIM_ConfigClockSource+0x170>
 800473c:	2b30      	cmp	r3, #48	; 0x30
 800473e:	d064      	beq.n	800480a <HAL_TIM_ConfigClockSource+0x15e>
 8004740:	2b30      	cmp	r3, #48	; 0x30
 8004742:	d86b      	bhi.n	800481c <HAL_TIM_ConfigClockSource+0x170>
 8004744:	2b20      	cmp	r3, #32
 8004746:	d060      	beq.n	800480a <HAL_TIM_ConfigClockSource+0x15e>
 8004748:	2b20      	cmp	r3, #32
 800474a:	d867      	bhi.n	800481c <HAL_TIM_ConfigClockSource+0x170>
 800474c:	2b00      	cmp	r3, #0
 800474e:	d05c      	beq.n	800480a <HAL_TIM_ConfigClockSource+0x15e>
 8004750:	2b10      	cmp	r3, #16
 8004752:	d05a      	beq.n	800480a <HAL_TIM_ConfigClockSource+0x15e>
 8004754:	e062      	b.n	800481c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6818      	ldr	r0, [r3, #0]
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	6899      	ldr	r1, [r3, #8]
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	685a      	ldr	r2, [r3, #4]
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	f000 f99d 	bl	8004aa4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004778:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	68ba      	ldr	r2, [r7, #8]
 8004780:	609a      	str	r2, [r3, #8]
      break;
 8004782:	e04f      	b.n	8004824 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6818      	ldr	r0, [r3, #0]
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	6899      	ldr	r1, [r3, #8]
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	685a      	ldr	r2, [r3, #4]
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	f000 f986 	bl	8004aa4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	689a      	ldr	r2, [r3, #8]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047a6:	609a      	str	r2, [r3, #8]
      break;
 80047a8:	e03c      	b.n	8004824 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6818      	ldr	r0, [r3, #0]
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	6859      	ldr	r1, [r3, #4]
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	461a      	mov	r2, r3
 80047b8:	f000 f8fa 	bl	80049b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	2150      	movs	r1, #80	; 0x50
 80047c2:	4618      	mov	r0, r3
 80047c4:	f000 f953 	bl	8004a6e <TIM_ITRx_SetConfig>
      break;
 80047c8:	e02c      	b.n	8004824 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6818      	ldr	r0, [r3, #0]
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	6859      	ldr	r1, [r3, #4]
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	68db      	ldr	r3, [r3, #12]
 80047d6:	461a      	mov	r2, r3
 80047d8:	f000 f919 	bl	8004a0e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	2160      	movs	r1, #96	; 0x60
 80047e2:	4618      	mov	r0, r3
 80047e4:	f000 f943 	bl	8004a6e <TIM_ITRx_SetConfig>
      break;
 80047e8:	e01c      	b.n	8004824 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6818      	ldr	r0, [r3, #0]
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	6859      	ldr	r1, [r3, #4]
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	68db      	ldr	r3, [r3, #12]
 80047f6:	461a      	mov	r2, r3
 80047f8:	f000 f8da 	bl	80049b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	2140      	movs	r1, #64	; 0x40
 8004802:	4618      	mov	r0, r3
 8004804:	f000 f933 	bl	8004a6e <TIM_ITRx_SetConfig>
      break;
 8004808:	e00c      	b.n	8004824 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4619      	mov	r1, r3
 8004814:	4610      	mov	r0, r2
 8004816:	f000 f92a 	bl	8004a6e <TIM_ITRx_SetConfig>
      break;
 800481a:	e003      	b.n	8004824 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	73fb      	strb	r3, [r7, #15]
      break;
 8004820:	e000      	b.n	8004824 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004822:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2201      	movs	r2, #1
 8004828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2200      	movs	r2, #0
 8004830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004834:	7bfb      	ldrb	r3, [r7, #15]
}
 8004836:	4618      	mov	r0, r3
 8004838:	3710      	adds	r7, #16
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}

0800483e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800483e:	b480      	push	{r7}
 8004840:	b083      	sub	sp, #12
 8004842:	af00      	add	r7, sp, #0
 8004844:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004846:	bf00      	nop
 8004848:	370c      	adds	r7, #12
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr

08004852 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004852:	b480      	push	{r7}
 8004854:	b083      	sub	sp, #12
 8004856:	af00      	add	r7, sp, #0
 8004858:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800485a:	bf00      	nop
 800485c:	370c      	adds	r7, #12
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr

08004866 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004866:	b480      	push	{r7}
 8004868:	b083      	sub	sp, #12
 800486a:	af00      	add	r7, sp, #0
 800486c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800486e:	bf00      	nop
 8004870:	370c      	adds	r7, #12
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr

0800487a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800487a:	b480      	push	{r7}
 800487c:	b083      	sub	sp, #12
 800487e:	af00      	add	r7, sp, #0
 8004880:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004882:	bf00      	nop
 8004884:	370c      	adds	r7, #12
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr
	...

08004890 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004890:	b480      	push	{r7}
 8004892:	b085      	sub	sp, #20
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
 8004898:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	4a3c      	ldr	r2, [pc, #240]	; (8004994 <TIM_Base_SetConfig+0x104>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d00f      	beq.n	80048c8 <TIM_Base_SetConfig+0x38>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048ae:	d00b      	beq.n	80048c8 <TIM_Base_SetConfig+0x38>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	4a39      	ldr	r2, [pc, #228]	; (8004998 <TIM_Base_SetConfig+0x108>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d007      	beq.n	80048c8 <TIM_Base_SetConfig+0x38>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	4a38      	ldr	r2, [pc, #224]	; (800499c <TIM_Base_SetConfig+0x10c>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d003      	beq.n	80048c8 <TIM_Base_SetConfig+0x38>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	4a37      	ldr	r2, [pc, #220]	; (80049a0 <TIM_Base_SetConfig+0x110>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d108      	bne.n	80048da <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	68fa      	ldr	r2, [r7, #12]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	4a2d      	ldr	r2, [pc, #180]	; (8004994 <TIM_Base_SetConfig+0x104>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d01b      	beq.n	800491a <TIM_Base_SetConfig+0x8a>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048e8:	d017      	beq.n	800491a <TIM_Base_SetConfig+0x8a>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	4a2a      	ldr	r2, [pc, #168]	; (8004998 <TIM_Base_SetConfig+0x108>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d013      	beq.n	800491a <TIM_Base_SetConfig+0x8a>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	4a29      	ldr	r2, [pc, #164]	; (800499c <TIM_Base_SetConfig+0x10c>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d00f      	beq.n	800491a <TIM_Base_SetConfig+0x8a>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	4a28      	ldr	r2, [pc, #160]	; (80049a0 <TIM_Base_SetConfig+0x110>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d00b      	beq.n	800491a <TIM_Base_SetConfig+0x8a>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	4a27      	ldr	r2, [pc, #156]	; (80049a4 <TIM_Base_SetConfig+0x114>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d007      	beq.n	800491a <TIM_Base_SetConfig+0x8a>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	4a26      	ldr	r2, [pc, #152]	; (80049a8 <TIM_Base_SetConfig+0x118>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d003      	beq.n	800491a <TIM_Base_SetConfig+0x8a>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	4a25      	ldr	r2, [pc, #148]	; (80049ac <TIM_Base_SetConfig+0x11c>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d108      	bne.n	800492c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004920:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	68fa      	ldr	r2, [r7, #12]
 8004928:	4313      	orrs	r3, r2
 800492a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	695b      	ldr	r3, [r3, #20]
 8004936:	4313      	orrs	r3, r2
 8004938:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	68fa      	ldr	r2, [r7, #12]
 800493e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	689a      	ldr	r2, [r3, #8]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	4a10      	ldr	r2, [pc, #64]	; (8004994 <TIM_Base_SetConfig+0x104>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d00f      	beq.n	8004978 <TIM_Base_SetConfig+0xe8>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	4a11      	ldr	r2, [pc, #68]	; (80049a0 <TIM_Base_SetConfig+0x110>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d00b      	beq.n	8004978 <TIM_Base_SetConfig+0xe8>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	4a10      	ldr	r2, [pc, #64]	; (80049a4 <TIM_Base_SetConfig+0x114>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d007      	beq.n	8004978 <TIM_Base_SetConfig+0xe8>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	4a0f      	ldr	r2, [pc, #60]	; (80049a8 <TIM_Base_SetConfig+0x118>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d003      	beq.n	8004978 <TIM_Base_SetConfig+0xe8>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	4a0e      	ldr	r2, [pc, #56]	; (80049ac <TIM_Base_SetConfig+0x11c>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d103      	bne.n	8004980 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	691a      	ldr	r2, [r3, #16]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2201      	movs	r2, #1
 8004984:	615a      	str	r2, [r3, #20]
}
 8004986:	bf00      	nop
 8004988:	3714      	adds	r7, #20
 800498a:	46bd      	mov	sp, r7
 800498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004990:	4770      	bx	lr
 8004992:	bf00      	nop
 8004994:	40012c00 	.word	0x40012c00
 8004998:	40000400 	.word	0x40000400
 800499c:	40000800 	.word	0x40000800
 80049a0:	40013400 	.word	0x40013400
 80049a4:	40014000 	.word	0x40014000
 80049a8:	40014400 	.word	0x40014400
 80049ac:	40014800 	.word	0x40014800

080049b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b087      	sub	sp, #28
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	60f8      	str	r0, [r7, #12]
 80049b8:	60b9      	str	r1, [r7, #8]
 80049ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	6a1b      	ldr	r3, [r3, #32]
 80049c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	6a1b      	ldr	r3, [r3, #32]
 80049c6:	f023 0201 	bic.w	r2, r3, #1
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	699b      	ldr	r3, [r3, #24]
 80049d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	011b      	lsls	r3, r3, #4
 80049e0:	693a      	ldr	r2, [r7, #16]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	f023 030a 	bic.w	r3, r3, #10
 80049ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80049ee:	697a      	ldr	r2, [r7, #20]
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	4313      	orrs	r3, r2
 80049f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	693a      	ldr	r2, [r7, #16]
 80049fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	697a      	ldr	r2, [r7, #20]
 8004a00:	621a      	str	r2, [r3, #32]
}
 8004a02:	bf00      	nop
 8004a04:	371c      	adds	r7, #28
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr

08004a0e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a0e:	b480      	push	{r7}
 8004a10:	b087      	sub	sp, #28
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	60f8      	str	r0, [r7, #12]
 8004a16:	60b9      	str	r1, [r7, #8]
 8004a18:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	6a1b      	ldr	r3, [r3, #32]
 8004a1e:	f023 0210 	bic.w	r2, r3, #16
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	699b      	ldr	r3, [r3, #24]
 8004a2a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	6a1b      	ldr	r3, [r3, #32]
 8004a30:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a38:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	031b      	lsls	r3, r3, #12
 8004a3e:	697a      	ldr	r2, [r7, #20]
 8004a40:	4313      	orrs	r3, r2
 8004a42:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004a4a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	011b      	lsls	r3, r3, #4
 8004a50:	693a      	ldr	r2, [r7, #16]
 8004a52:	4313      	orrs	r3, r2
 8004a54:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	697a      	ldr	r2, [r7, #20]
 8004a5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	693a      	ldr	r2, [r7, #16]
 8004a60:	621a      	str	r2, [r3, #32]
}
 8004a62:	bf00      	nop
 8004a64:	371c      	adds	r7, #28
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr

08004a6e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a6e:	b480      	push	{r7}
 8004a70:	b085      	sub	sp, #20
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	6078      	str	r0, [r7, #4]
 8004a76:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a84:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a86:	683a      	ldr	r2, [r7, #0]
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	f043 0307 	orr.w	r3, r3, #7
 8004a90:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	68fa      	ldr	r2, [r7, #12]
 8004a96:	609a      	str	r2, [r3, #8]
}
 8004a98:	bf00      	nop
 8004a9a:	3714      	adds	r7, #20
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr

08004aa4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b087      	sub	sp, #28
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	60f8      	str	r0, [r7, #12]
 8004aac:	60b9      	str	r1, [r7, #8]
 8004aae:	607a      	str	r2, [r7, #4]
 8004ab0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004abe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	021a      	lsls	r2, r3, #8
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	431a      	orrs	r2, r3
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	4313      	orrs	r3, r2
 8004acc:	697a      	ldr	r2, [r7, #20]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	697a      	ldr	r2, [r7, #20]
 8004ad6:	609a      	str	r2, [r3, #8]
}
 8004ad8:	bf00      	nop
 8004ada:	371c      	adds	r7, #28
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr

08004ae4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b085      	sub	sp, #20
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
 8004aec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d101      	bne.n	8004afc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004af8:	2302      	movs	r3, #2
 8004afa:	e063      	b.n	8004bc4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2201      	movs	r2, #1
 8004b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2202      	movs	r2, #2
 8004b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a2b      	ldr	r2, [pc, #172]	; (8004bd0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d004      	beq.n	8004b30 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a2a      	ldr	r2, [pc, #168]	; (8004bd4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d108      	bne.n	8004b42 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004b36:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	68fa      	ldr	r2, [r7, #12]
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b48:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	68fa      	ldr	r2, [r7, #12]
 8004b50:	4313      	orrs	r3, r2
 8004b52:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	68fa      	ldr	r2, [r7, #12]
 8004b5a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a1b      	ldr	r2, [pc, #108]	; (8004bd0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d018      	beq.n	8004b98 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b6e:	d013      	beq.n	8004b98 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a18      	ldr	r2, [pc, #96]	; (8004bd8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d00e      	beq.n	8004b98 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a17      	ldr	r2, [pc, #92]	; (8004bdc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d009      	beq.n	8004b98 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a12      	ldr	r2, [pc, #72]	; (8004bd4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d004      	beq.n	8004b98 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a13      	ldr	r2, [pc, #76]	; (8004be0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d10c      	bne.n	8004bb2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b9e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	68ba      	ldr	r2, [r7, #8]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	68ba      	ldr	r2, [r7, #8]
 8004bb0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004bc2:	2300      	movs	r3, #0
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3714      	adds	r7, #20
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr
 8004bd0:	40012c00 	.word	0x40012c00
 8004bd4:	40013400 	.word	0x40013400
 8004bd8:	40000400 	.word	0x40000400
 8004bdc:	40000800 	.word	0x40000800
 8004be0:	40014000 	.word	0x40014000

08004be4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b083      	sub	sp, #12
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004bec:	bf00      	nop
 8004bee:	370c      	adds	r7, #12
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	4770      	bx	lr

08004bf8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b083      	sub	sp, #12
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c00:	bf00      	nop
 8004c02:	370c      	adds	r7, #12
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr

08004c0c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b083      	sub	sp, #12
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004c14:	bf00      	nop
 8004c16:	370c      	adds	r7, #12
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1e:	4770      	bx	lr

08004c20 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b085      	sub	sp, #20
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004c28:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004c2c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004c34:	b29a      	uxth	r2, r3
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	43db      	mvns	r3, r3
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	4013      	ands	r3, r2
 8004c40:	b29a      	uxth	r2, r3
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004c48:	2300      	movs	r3, #0
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3714      	adds	r7, #20
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr

08004c56 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004c56:	b084      	sub	sp, #16
 8004c58:	b480      	push	{r7}
 8004c5a:	b083      	sub	sp, #12
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
 8004c60:	f107 0014 	add.w	r0, r7, #20
 8004c64:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2200      	movs	r2, #0
 8004c84:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004c88:	2300      	movs	r3, #0
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	370c      	adds	r7, #12
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	b004      	add	sp, #16
 8004c96:	4770      	bx	lr

08004c98 <__errno>:
 8004c98:	4b01      	ldr	r3, [pc, #4]	; (8004ca0 <__errno+0x8>)
 8004c9a:	6818      	ldr	r0, [r3, #0]
 8004c9c:	4770      	bx	lr
 8004c9e:	bf00      	nop
 8004ca0:	20000010 	.word	0x20000010

08004ca4 <__libc_init_array>:
 8004ca4:	b570      	push	{r4, r5, r6, lr}
 8004ca6:	4d0d      	ldr	r5, [pc, #52]	; (8004cdc <__libc_init_array+0x38>)
 8004ca8:	4c0d      	ldr	r4, [pc, #52]	; (8004ce0 <__libc_init_array+0x3c>)
 8004caa:	1b64      	subs	r4, r4, r5
 8004cac:	10a4      	asrs	r4, r4, #2
 8004cae:	2600      	movs	r6, #0
 8004cb0:	42a6      	cmp	r6, r4
 8004cb2:	d109      	bne.n	8004cc8 <__libc_init_array+0x24>
 8004cb4:	4d0b      	ldr	r5, [pc, #44]	; (8004ce4 <__libc_init_array+0x40>)
 8004cb6:	4c0c      	ldr	r4, [pc, #48]	; (8004ce8 <__libc_init_array+0x44>)
 8004cb8:	f000 fca8 	bl	800560c <_init>
 8004cbc:	1b64      	subs	r4, r4, r5
 8004cbe:	10a4      	asrs	r4, r4, #2
 8004cc0:	2600      	movs	r6, #0
 8004cc2:	42a6      	cmp	r6, r4
 8004cc4:	d105      	bne.n	8004cd2 <__libc_init_array+0x2e>
 8004cc6:	bd70      	pop	{r4, r5, r6, pc}
 8004cc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ccc:	4798      	blx	r3
 8004cce:	3601      	adds	r6, #1
 8004cd0:	e7ee      	b.n	8004cb0 <__libc_init_array+0xc>
 8004cd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cd6:	4798      	blx	r3
 8004cd8:	3601      	adds	r6, #1
 8004cda:	e7f2      	b.n	8004cc2 <__libc_init_array+0x1e>
 8004cdc:	08005e34 	.word	0x08005e34
 8004ce0:	08005e34 	.word	0x08005e34
 8004ce4:	08005e34 	.word	0x08005e34
 8004ce8:	08005e38 	.word	0x08005e38

08004cec <memset>:
 8004cec:	4402      	add	r2, r0
 8004cee:	4603      	mov	r3, r0
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d100      	bne.n	8004cf6 <memset+0xa>
 8004cf4:	4770      	bx	lr
 8004cf6:	f803 1b01 	strb.w	r1, [r3], #1
 8004cfa:	e7f9      	b.n	8004cf0 <memset+0x4>

08004cfc <_vsniprintf_r>:
 8004cfc:	b530      	push	{r4, r5, lr}
 8004cfe:	4614      	mov	r4, r2
 8004d00:	2c00      	cmp	r4, #0
 8004d02:	b09b      	sub	sp, #108	; 0x6c
 8004d04:	4605      	mov	r5, r0
 8004d06:	461a      	mov	r2, r3
 8004d08:	da05      	bge.n	8004d16 <_vsniprintf_r+0x1a>
 8004d0a:	238b      	movs	r3, #139	; 0x8b
 8004d0c:	6003      	str	r3, [r0, #0]
 8004d0e:	f04f 30ff 	mov.w	r0, #4294967295
 8004d12:	b01b      	add	sp, #108	; 0x6c
 8004d14:	bd30      	pop	{r4, r5, pc}
 8004d16:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004d1a:	f8ad 300c 	strh.w	r3, [sp, #12]
 8004d1e:	bf14      	ite	ne
 8004d20:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004d24:	4623      	moveq	r3, r4
 8004d26:	9302      	str	r3, [sp, #8]
 8004d28:	9305      	str	r3, [sp, #20]
 8004d2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004d2e:	9100      	str	r1, [sp, #0]
 8004d30:	9104      	str	r1, [sp, #16]
 8004d32:	f8ad 300e 	strh.w	r3, [sp, #14]
 8004d36:	4669      	mov	r1, sp
 8004d38:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004d3a:	f000 f875 	bl	8004e28 <_svfiprintf_r>
 8004d3e:	1c43      	adds	r3, r0, #1
 8004d40:	bfbc      	itt	lt
 8004d42:	238b      	movlt	r3, #139	; 0x8b
 8004d44:	602b      	strlt	r3, [r5, #0]
 8004d46:	2c00      	cmp	r4, #0
 8004d48:	d0e3      	beq.n	8004d12 <_vsniprintf_r+0x16>
 8004d4a:	9b00      	ldr	r3, [sp, #0]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	701a      	strb	r2, [r3, #0]
 8004d50:	e7df      	b.n	8004d12 <_vsniprintf_r+0x16>
	...

08004d54 <vsniprintf>:
 8004d54:	b507      	push	{r0, r1, r2, lr}
 8004d56:	9300      	str	r3, [sp, #0]
 8004d58:	4613      	mov	r3, r2
 8004d5a:	460a      	mov	r2, r1
 8004d5c:	4601      	mov	r1, r0
 8004d5e:	4803      	ldr	r0, [pc, #12]	; (8004d6c <vsniprintf+0x18>)
 8004d60:	6800      	ldr	r0, [r0, #0]
 8004d62:	f7ff ffcb 	bl	8004cfc <_vsniprintf_r>
 8004d66:	b003      	add	sp, #12
 8004d68:	f85d fb04 	ldr.w	pc, [sp], #4
 8004d6c:	20000010 	.word	0x20000010

08004d70 <__ssputs_r>:
 8004d70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d74:	688e      	ldr	r6, [r1, #8]
 8004d76:	429e      	cmp	r6, r3
 8004d78:	4682      	mov	sl, r0
 8004d7a:	460c      	mov	r4, r1
 8004d7c:	4690      	mov	r8, r2
 8004d7e:	461f      	mov	r7, r3
 8004d80:	d838      	bhi.n	8004df4 <__ssputs_r+0x84>
 8004d82:	898a      	ldrh	r2, [r1, #12]
 8004d84:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004d88:	d032      	beq.n	8004df0 <__ssputs_r+0x80>
 8004d8a:	6825      	ldr	r5, [r4, #0]
 8004d8c:	6909      	ldr	r1, [r1, #16]
 8004d8e:	eba5 0901 	sub.w	r9, r5, r1
 8004d92:	6965      	ldr	r5, [r4, #20]
 8004d94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004d98:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004d9c:	3301      	adds	r3, #1
 8004d9e:	444b      	add	r3, r9
 8004da0:	106d      	asrs	r5, r5, #1
 8004da2:	429d      	cmp	r5, r3
 8004da4:	bf38      	it	cc
 8004da6:	461d      	movcc	r5, r3
 8004da8:	0553      	lsls	r3, r2, #21
 8004daa:	d531      	bpl.n	8004e10 <__ssputs_r+0xa0>
 8004dac:	4629      	mov	r1, r5
 8004dae:	f000 fb63 	bl	8005478 <_malloc_r>
 8004db2:	4606      	mov	r6, r0
 8004db4:	b950      	cbnz	r0, 8004dcc <__ssputs_r+0x5c>
 8004db6:	230c      	movs	r3, #12
 8004db8:	f8ca 3000 	str.w	r3, [sl]
 8004dbc:	89a3      	ldrh	r3, [r4, #12]
 8004dbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004dc2:	81a3      	strh	r3, [r4, #12]
 8004dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8004dc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dcc:	6921      	ldr	r1, [r4, #16]
 8004dce:	464a      	mov	r2, r9
 8004dd0:	f000 fabe 	bl	8005350 <memcpy>
 8004dd4:	89a3      	ldrh	r3, [r4, #12]
 8004dd6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004dda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dde:	81a3      	strh	r3, [r4, #12]
 8004de0:	6126      	str	r6, [r4, #16]
 8004de2:	6165      	str	r5, [r4, #20]
 8004de4:	444e      	add	r6, r9
 8004de6:	eba5 0509 	sub.w	r5, r5, r9
 8004dea:	6026      	str	r6, [r4, #0]
 8004dec:	60a5      	str	r5, [r4, #8]
 8004dee:	463e      	mov	r6, r7
 8004df0:	42be      	cmp	r6, r7
 8004df2:	d900      	bls.n	8004df6 <__ssputs_r+0x86>
 8004df4:	463e      	mov	r6, r7
 8004df6:	6820      	ldr	r0, [r4, #0]
 8004df8:	4632      	mov	r2, r6
 8004dfa:	4641      	mov	r1, r8
 8004dfc:	f000 fab6 	bl	800536c <memmove>
 8004e00:	68a3      	ldr	r3, [r4, #8]
 8004e02:	1b9b      	subs	r3, r3, r6
 8004e04:	60a3      	str	r3, [r4, #8]
 8004e06:	6823      	ldr	r3, [r4, #0]
 8004e08:	4433      	add	r3, r6
 8004e0a:	6023      	str	r3, [r4, #0]
 8004e0c:	2000      	movs	r0, #0
 8004e0e:	e7db      	b.n	8004dc8 <__ssputs_r+0x58>
 8004e10:	462a      	mov	r2, r5
 8004e12:	f000 fba5 	bl	8005560 <_realloc_r>
 8004e16:	4606      	mov	r6, r0
 8004e18:	2800      	cmp	r0, #0
 8004e1a:	d1e1      	bne.n	8004de0 <__ssputs_r+0x70>
 8004e1c:	6921      	ldr	r1, [r4, #16]
 8004e1e:	4650      	mov	r0, sl
 8004e20:	f000 fabe 	bl	80053a0 <_free_r>
 8004e24:	e7c7      	b.n	8004db6 <__ssputs_r+0x46>
	...

08004e28 <_svfiprintf_r>:
 8004e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e2c:	4698      	mov	r8, r3
 8004e2e:	898b      	ldrh	r3, [r1, #12]
 8004e30:	061b      	lsls	r3, r3, #24
 8004e32:	b09d      	sub	sp, #116	; 0x74
 8004e34:	4607      	mov	r7, r0
 8004e36:	460d      	mov	r5, r1
 8004e38:	4614      	mov	r4, r2
 8004e3a:	d50e      	bpl.n	8004e5a <_svfiprintf_r+0x32>
 8004e3c:	690b      	ldr	r3, [r1, #16]
 8004e3e:	b963      	cbnz	r3, 8004e5a <_svfiprintf_r+0x32>
 8004e40:	2140      	movs	r1, #64	; 0x40
 8004e42:	f000 fb19 	bl	8005478 <_malloc_r>
 8004e46:	6028      	str	r0, [r5, #0]
 8004e48:	6128      	str	r0, [r5, #16]
 8004e4a:	b920      	cbnz	r0, 8004e56 <_svfiprintf_r+0x2e>
 8004e4c:	230c      	movs	r3, #12
 8004e4e:	603b      	str	r3, [r7, #0]
 8004e50:	f04f 30ff 	mov.w	r0, #4294967295
 8004e54:	e0d1      	b.n	8004ffa <_svfiprintf_r+0x1d2>
 8004e56:	2340      	movs	r3, #64	; 0x40
 8004e58:	616b      	str	r3, [r5, #20]
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	9309      	str	r3, [sp, #36]	; 0x24
 8004e5e:	2320      	movs	r3, #32
 8004e60:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004e64:	f8cd 800c 	str.w	r8, [sp, #12]
 8004e68:	2330      	movs	r3, #48	; 0x30
 8004e6a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005014 <_svfiprintf_r+0x1ec>
 8004e6e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004e72:	f04f 0901 	mov.w	r9, #1
 8004e76:	4623      	mov	r3, r4
 8004e78:	469a      	mov	sl, r3
 8004e7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004e7e:	b10a      	cbz	r2, 8004e84 <_svfiprintf_r+0x5c>
 8004e80:	2a25      	cmp	r2, #37	; 0x25
 8004e82:	d1f9      	bne.n	8004e78 <_svfiprintf_r+0x50>
 8004e84:	ebba 0b04 	subs.w	fp, sl, r4
 8004e88:	d00b      	beq.n	8004ea2 <_svfiprintf_r+0x7a>
 8004e8a:	465b      	mov	r3, fp
 8004e8c:	4622      	mov	r2, r4
 8004e8e:	4629      	mov	r1, r5
 8004e90:	4638      	mov	r0, r7
 8004e92:	f7ff ff6d 	bl	8004d70 <__ssputs_r>
 8004e96:	3001      	adds	r0, #1
 8004e98:	f000 80aa 	beq.w	8004ff0 <_svfiprintf_r+0x1c8>
 8004e9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e9e:	445a      	add	r2, fp
 8004ea0:	9209      	str	r2, [sp, #36]	; 0x24
 8004ea2:	f89a 3000 	ldrb.w	r3, [sl]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	f000 80a2 	beq.w	8004ff0 <_svfiprintf_r+0x1c8>
 8004eac:	2300      	movs	r3, #0
 8004eae:	f04f 32ff 	mov.w	r2, #4294967295
 8004eb2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004eb6:	f10a 0a01 	add.w	sl, sl, #1
 8004eba:	9304      	str	r3, [sp, #16]
 8004ebc:	9307      	str	r3, [sp, #28]
 8004ebe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004ec2:	931a      	str	r3, [sp, #104]	; 0x68
 8004ec4:	4654      	mov	r4, sl
 8004ec6:	2205      	movs	r2, #5
 8004ec8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ecc:	4851      	ldr	r0, [pc, #324]	; (8005014 <_svfiprintf_r+0x1ec>)
 8004ece:	f7fb f97f 	bl	80001d0 <memchr>
 8004ed2:	9a04      	ldr	r2, [sp, #16]
 8004ed4:	b9d8      	cbnz	r0, 8004f0e <_svfiprintf_r+0xe6>
 8004ed6:	06d0      	lsls	r0, r2, #27
 8004ed8:	bf44      	itt	mi
 8004eda:	2320      	movmi	r3, #32
 8004edc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ee0:	0711      	lsls	r1, r2, #28
 8004ee2:	bf44      	itt	mi
 8004ee4:	232b      	movmi	r3, #43	; 0x2b
 8004ee6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004eea:	f89a 3000 	ldrb.w	r3, [sl]
 8004eee:	2b2a      	cmp	r3, #42	; 0x2a
 8004ef0:	d015      	beq.n	8004f1e <_svfiprintf_r+0xf6>
 8004ef2:	9a07      	ldr	r2, [sp, #28]
 8004ef4:	4654      	mov	r4, sl
 8004ef6:	2000      	movs	r0, #0
 8004ef8:	f04f 0c0a 	mov.w	ip, #10
 8004efc:	4621      	mov	r1, r4
 8004efe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f02:	3b30      	subs	r3, #48	; 0x30
 8004f04:	2b09      	cmp	r3, #9
 8004f06:	d94e      	bls.n	8004fa6 <_svfiprintf_r+0x17e>
 8004f08:	b1b0      	cbz	r0, 8004f38 <_svfiprintf_r+0x110>
 8004f0a:	9207      	str	r2, [sp, #28]
 8004f0c:	e014      	b.n	8004f38 <_svfiprintf_r+0x110>
 8004f0e:	eba0 0308 	sub.w	r3, r0, r8
 8004f12:	fa09 f303 	lsl.w	r3, r9, r3
 8004f16:	4313      	orrs	r3, r2
 8004f18:	9304      	str	r3, [sp, #16]
 8004f1a:	46a2      	mov	sl, r4
 8004f1c:	e7d2      	b.n	8004ec4 <_svfiprintf_r+0x9c>
 8004f1e:	9b03      	ldr	r3, [sp, #12]
 8004f20:	1d19      	adds	r1, r3, #4
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	9103      	str	r1, [sp, #12]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	bfbb      	ittet	lt
 8004f2a:	425b      	neglt	r3, r3
 8004f2c:	f042 0202 	orrlt.w	r2, r2, #2
 8004f30:	9307      	strge	r3, [sp, #28]
 8004f32:	9307      	strlt	r3, [sp, #28]
 8004f34:	bfb8      	it	lt
 8004f36:	9204      	strlt	r2, [sp, #16]
 8004f38:	7823      	ldrb	r3, [r4, #0]
 8004f3a:	2b2e      	cmp	r3, #46	; 0x2e
 8004f3c:	d10c      	bne.n	8004f58 <_svfiprintf_r+0x130>
 8004f3e:	7863      	ldrb	r3, [r4, #1]
 8004f40:	2b2a      	cmp	r3, #42	; 0x2a
 8004f42:	d135      	bne.n	8004fb0 <_svfiprintf_r+0x188>
 8004f44:	9b03      	ldr	r3, [sp, #12]
 8004f46:	1d1a      	adds	r2, r3, #4
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	9203      	str	r2, [sp, #12]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	bfb8      	it	lt
 8004f50:	f04f 33ff 	movlt.w	r3, #4294967295
 8004f54:	3402      	adds	r4, #2
 8004f56:	9305      	str	r3, [sp, #20]
 8004f58:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005024 <_svfiprintf_r+0x1fc>
 8004f5c:	7821      	ldrb	r1, [r4, #0]
 8004f5e:	2203      	movs	r2, #3
 8004f60:	4650      	mov	r0, sl
 8004f62:	f7fb f935 	bl	80001d0 <memchr>
 8004f66:	b140      	cbz	r0, 8004f7a <_svfiprintf_r+0x152>
 8004f68:	2340      	movs	r3, #64	; 0x40
 8004f6a:	eba0 000a 	sub.w	r0, r0, sl
 8004f6e:	fa03 f000 	lsl.w	r0, r3, r0
 8004f72:	9b04      	ldr	r3, [sp, #16]
 8004f74:	4303      	orrs	r3, r0
 8004f76:	3401      	adds	r4, #1
 8004f78:	9304      	str	r3, [sp, #16]
 8004f7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f7e:	4826      	ldr	r0, [pc, #152]	; (8005018 <_svfiprintf_r+0x1f0>)
 8004f80:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004f84:	2206      	movs	r2, #6
 8004f86:	f7fb f923 	bl	80001d0 <memchr>
 8004f8a:	2800      	cmp	r0, #0
 8004f8c:	d038      	beq.n	8005000 <_svfiprintf_r+0x1d8>
 8004f8e:	4b23      	ldr	r3, [pc, #140]	; (800501c <_svfiprintf_r+0x1f4>)
 8004f90:	bb1b      	cbnz	r3, 8004fda <_svfiprintf_r+0x1b2>
 8004f92:	9b03      	ldr	r3, [sp, #12]
 8004f94:	3307      	adds	r3, #7
 8004f96:	f023 0307 	bic.w	r3, r3, #7
 8004f9a:	3308      	adds	r3, #8
 8004f9c:	9303      	str	r3, [sp, #12]
 8004f9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fa0:	4433      	add	r3, r6
 8004fa2:	9309      	str	r3, [sp, #36]	; 0x24
 8004fa4:	e767      	b.n	8004e76 <_svfiprintf_r+0x4e>
 8004fa6:	fb0c 3202 	mla	r2, ip, r2, r3
 8004faa:	460c      	mov	r4, r1
 8004fac:	2001      	movs	r0, #1
 8004fae:	e7a5      	b.n	8004efc <_svfiprintf_r+0xd4>
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	3401      	adds	r4, #1
 8004fb4:	9305      	str	r3, [sp, #20]
 8004fb6:	4619      	mov	r1, r3
 8004fb8:	f04f 0c0a 	mov.w	ip, #10
 8004fbc:	4620      	mov	r0, r4
 8004fbe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004fc2:	3a30      	subs	r2, #48	; 0x30
 8004fc4:	2a09      	cmp	r2, #9
 8004fc6:	d903      	bls.n	8004fd0 <_svfiprintf_r+0x1a8>
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d0c5      	beq.n	8004f58 <_svfiprintf_r+0x130>
 8004fcc:	9105      	str	r1, [sp, #20]
 8004fce:	e7c3      	b.n	8004f58 <_svfiprintf_r+0x130>
 8004fd0:	fb0c 2101 	mla	r1, ip, r1, r2
 8004fd4:	4604      	mov	r4, r0
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e7f0      	b.n	8004fbc <_svfiprintf_r+0x194>
 8004fda:	ab03      	add	r3, sp, #12
 8004fdc:	9300      	str	r3, [sp, #0]
 8004fde:	462a      	mov	r2, r5
 8004fe0:	4b0f      	ldr	r3, [pc, #60]	; (8005020 <_svfiprintf_r+0x1f8>)
 8004fe2:	a904      	add	r1, sp, #16
 8004fe4:	4638      	mov	r0, r7
 8004fe6:	f3af 8000 	nop.w
 8004fea:	1c42      	adds	r2, r0, #1
 8004fec:	4606      	mov	r6, r0
 8004fee:	d1d6      	bne.n	8004f9e <_svfiprintf_r+0x176>
 8004ff0:	89ab      	ldrh	r3, [r5, #12]
 8004ff2:	065b      	lsls	r3, r3, #25
 8004ff4:	f53f af2c 	bmi.w	8004e50 <_svfiprintf_r+0x28>
 8004ff8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004ffa:	b01d      	add	sp, #116	; 0x74
 8004ffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005000:	ab03      	add	r3, sp, #12
 8005002:	9300      	str	r3, [sp, #0]
 8005004:	462a      	mov	r2, r5
 8005006:	4b06      	ldr	r3, [pc, #24]	; (8005020 <_svfiprintf_r+0x1f8>)
 8005008:	a904      	add	r1, sp, #16
 800500a:	4638      	mov	r0, r7
 800500c:	f000 f87a 	bl	8005104 <_printf_i>
 8005010:	e7eb      	b.n	8004fea <_svfiprintf_r+0x1c2>
 8005012:	bf00      	nop
 8005014:	08005e01 	.word	0x08005e01
 8005018:	08005e0b 	.word	0x08005e0b
 800501c:	00000000 	.word	0x00000000
 8005020:	08004d71 	.word	0x08004d71
 8005024:	08005e07 	.word	0x08005e07

08005028 <_printf_common>:
 8005028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800502c:	4616      	mov	r6, r2
 800502e:	4699      	mov	r9, r3
 8005030:	688a      	ldr	r2, [r1, #8]
 8005032:	690b      	ldr	r3, [r1, #16]
 8005034:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005038:	4293      	cmp	r3, r2
 800503a:	bfb8      	it	lt
 800503c:	4613      	movlt	r3, r2
 800503e:	6033      	str	r3, [r6, #0]
 8005040:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005044:	4607      	mov	r7, r0
 8005046:	460c      	mov	r4, r1
 8005048:	b10a      	cbz	r2, 800504e <_printf_common+0x26>
 800504a:	3301      	adds	r3, #1
 800504c:	6033      	str	r3, [r6, #0]
 800504e:	6823      	ldr	r3, [r4, #0]
 8005050:	0699      	lsls	r1, r3, #26
 8005052:	bf42      	ittt	mi
 8005054:	6833      	ldrmi	r3, [r6, #0]
 8005056:	3302      	addmi	r3, #2
 8005058:	6033      	strmi	r3, [r6, #0]
 800505a:	6825      	ldr	r5, [r4, #0]
 800505c:	f015 0506 	ands.w	r5, r5, #6
 8005060:	d106      	bne.n	8005070 <_printf_common+0x48>
 8005062:	f104 0a19 	add.w	sl, r4, #25
 8005066:	68e3      	ldr	r3, [r4, #12]
 8005068:	6832      	ldr	r2, [r6, #0]
 800506a:	1a9b      	subs	r3, r3, r2
 800506c:	42ab      	cmp	r3, r5
 800506e:	dc26      	bgt.n	80050be <_printf_common+0x96>
 8005070:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005074:	1e13      	subs	r3, r2, #0
 8005076:	6822      	ldr	r2, [r4, #0]
 8005078:	bf18      	it	ne
 800507a:	2301      	movne	r3, #1
 800507c:	0692      	lsls	r2, r2, #26
 800507e:	d42b      	bmi.n	80050d8 <_printf_common+0xb0>
 8005080:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005084:	4649      	mov	r1, r9
 8005086:	4638      	mov	r0, r7
 8005088:	47c0      	blx	r8
 800508a:	3001      	adds	r0, #1
 800508c:	d01e      	beq.n	80050cc <_printf_common+0xa4>
 800508e:	6823      	ldr	r3, [r4, #0]
 8005090:	68e5      	ldr	r5, [r4, #12]
 8005092:	6832      	ldr	r2, [r6, #0]
 8005094:	f003 0306 	and.w	r3, r3, #6
 8005098:	2b04      	cmp	r3, #4
 800509a:	bf08      	it	eq
 800509c:	1aad      	subeq	r5, r5, r2
 800509e:	68a3      	ldr	r3, [r4, #8]
 80050a0:	6922      	ldr	r2, [r4, #16]
 80050a2:	bf0c      	ite	eq
 80050a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80050a8:	2500      	movne	r5, #0
 80050aa:	4293      	cmp	r3, r2
 80050ac:	bfc4      	itt	gt
 80050ae:	1a9b      	subgt	r3, r3, r2
 80050b0:	18ed      	addgt	r5, r5, r3
 80050b2:	2600      	movs	r6, #0
 80050b4:	341a      	adds	r4, #26
 80050b6:	42b5      	cmp	r5, r6
 80050b8:	d11a      	bne.n	80050f0 <_printf_common+0xc8>
 80050ba:	2000      	movs	r0, #0
 80050bc:	e008      	b.n	80050d0 <_printf_common+0xa8>
 80050be:	2301      	movs	r3, #1
 80050c0:	4652      	mov	r2, sl
 80050c2:	4649      	mov	r1, r9
 80050c4:	4638      	mov	r0, r7
 80050c6:	47c0      	blx	r8
 80050c8:	3001      	adds	r0, #1
 80050ca:	d103      	bne.n	80050d4 <_printf_common+0xac>
 80050cc:	f04f 30ff 	mov.w	r0, #4294967295
 80050d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050d4:	3501      	adds	r5, #1
 80050d6:	e7c6      	b.n	8005066 <_printf_common+0x3e>
 80050d8:	18e1      	adds	r1, r4, r3
 80050da:	1c5a      	adds	r2, r3, #1
 80050dc:	2030      	movs	r0, #48	; 0x30
 80050de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80050e2:	4422      	add	r2, r4
 80050e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80050e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80050ec:	3302      	adds	r3, #2
 80050ee:	e7c7      	b.n	8005080 <_printf_common+0x58>
 80050f0:	2301      	movs	r3, #1
 80050f2:	4622      	mov	r2, r4
 80050f4:	4649      	mov	r1, r9
 80050f6:	4638      	mov	r0, r7
 80050f8:	47c0      	blx	r8
 80050fa:	3001      	adds	r0, #1
 80050fc:	d0e6      	beq.n	80050cc <_printf_common+0xa4>
 80050fe:	3601      	adds	r6, #1
 8005100:	e7d9      	b.n	80050b6 <_printf_common+0x8e>
	...

08005104 <_printf_i>:
 8005104:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005108:	7e0f      	ldrb	r7, [r1, #24]
 800510a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800510c:	2f78      	cmp	r7, #120	; 0x78
 800510e:	4691      	mov	r9, r2
 8005110:	4680      	mov	r8, r0
 8005112:	460c      	mov	r4, r1
 8005114:	469a      	mov	sl, r3
 8005116:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800511a:	d807      	bhi.n	800512c <_printf_i+0x28>
 800511c:	2f62      	cmp	r7, #98	; 0x62
 800511e:	d80a      	bhi.n	8005136 <_printf_i+0x32>
 8005120:	2f00      	cmp	r7, #0
 8005122:	f000 80d8 	beq.w	80052d6 <_printf_i+0x1d2>
 8005126:	2f58      	cmp	r7, #88	; 0x58
 8005128:	f000 80a3 	beq.w	8005272 <_printf_i+0x16e>
 800512c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005130:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005134:	e03a      	b.n	80051ac <_printf_i+0xa8>
 8005136:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800513a:	2b15      	cmp	r3, #21
 800513c:	d8f6      	bhi.n	800512c <_printf_i+0x28>
 800513e:	a101      	add	r1, pc, #4	; (adr r1, 8005144 <_printf_i+0x40>)
 8005140:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005144:	0800519d 	.word	0x0800519d
 8005148:	080051b1 	.word	0x080051b1
 800514c:	0800512d 	.word	0x0800512d
 8005150:	0800512d 	.word	0x0800512d
 8005154:	0800512d 	.word	0x0800512d
 8005158:	0800512d 	.word	0x0800512d
 800515c:	080051b1 	.word	0x080051b1
 8005160:	0800512d 	.word	0x0800512d
 8005164:	0800512d 	.word	0x0800512d
 8005168:	0800512d 	.word	0x0800512d
 800516c:	0800512d 	.word	0x0800512d
 8005170:	080052bd 	.word	0x080052bd
 8005174:	080051e1 	.word	0x080051e1
 8005178:	0800529f 	.word	0x0800529f
 800517c:	0800512d 	.word	0x0800512d
 8005180:	0800512d 	.word	0x0800512d
 8005184:	080052df 	.word	0x080052df
 8005188:	0800512d 	.word	0x0800512d
 800518c:	080051e1 	.word	0x080051e1
 8005190:	0800512d 	.word	0x0800512d
 8005194:	0800512d 	.word	0x0800512d
 8005198:	080052a7 	.word	0x080052a7
 800519c:	682b      	ldr	r3, [r5, #0]
 800519e:	1d1a      	adds	r2, r3, #4
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	602a      	str	r2, [r5, #0]
 80051a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80051a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80051ac:	2301      	movs	r3, #1
 80051ae:	e0a3      	b.n	80052f8 <_printf_i+0x1f4>
 80051b0:	6820      	ldr	r0, [r4, #0]
 80051b2:	6829      	ldr	r1, [r5, #0]
 80051b4:	0606      	lsls	r6, r0, #24
 80051b6:	f101 0304 	add.w	r3, r1, #4
 80051ba:	d50a      	bpl.n	80051d2 <_printf_i+0xce>
 80051bc:	680e      	ldr	r6, [r1, #0]
 80051be:	602b      	str	r3, [r5, #0]
 80051c0:	2e00      	cmp	r6, #0
 80051c2:	da03      	bge.n	80051cc <_printf_i+0xc8>
 80051c4:	232d      	movs	r3, #45	; 0x2d
 80051c6:	4276      	negs	r6, r6
 80051c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051cc:	485e      	ldr	r0, [pc, #376]	; (8005348 <_printf_i+0x244>)
 80051ce:	230a      	movs	r3, #10
 80051d0:	e019      	b.n	8005206 <_printf_i+0x102>
 80051d2:	680e      	ldr	r6, [r1, #0]
 80051d4:	602b      	str	r3, [r5, #0]
 80051d6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80051da:	bf18      	it	ne
 80051dc:	b236      	sxthne	r6, r6
 80051de:	e7ef      	b.n	80051c0 <_printf_i+0xbc>
 80051e0:	682b      	ldr	r3, [r5, #0]
 80051e2:	6820      	ldr	r0, [r4, #0]
 80051e4:	1d19      	adds	r1, r3, #4
 80051e6:	6029      	str	r1, [r5, #0]
 80051e8:	0601      	lsls	r1, r0, #24
 80051ea:	d501      	bpl.n	80051f0 <_printf_i+0xec>
 80051ec:	681e      	ldr	r6, [r3, #0]
 80051ee:	e002      	b.n	80051f6 <_printf_i+0xf2>
 80051f0:	0646      	lsls	r6, r0, #25
 80051f2:	d5fb      	bpl.n	80051ec <_printf_i+0xe8>
 80051f4:	881e      	ldrh	r6, [r3, #0]
 80051f6:	4854      	ldr	r0, [pc, #336]	; (8005348 <_printf_i+0x244>)
 80051f8:	2f6f      	cmp	r7, #111	; 0x6f
 80051fa:	bf0c      	ite	eq
 80051fc:	2308      	moveq	r3, #8
 80051fe:	230a      	movne	r3, #10
 8005200:	2100      	movs	r1, #0
 8005202:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005206:	6865      	ldr	r5, [r4, #4]
 8005208:	60a5      	str	r5, [r4, #8]
 800520a:	2d00      	cmp	r5, #0
 800520c:	bfa2      	ittt	ge
 800520e:	6821      	ldrge	r1, [r4, #0]
 8005210:	f021 0104 	bicge.w	r1, r1, #4
 8005214:	6021      	strge	r1, [r4, #0]
 8005216:	b90e      	cbnz	r6, 800521c <_printf_i+0x118>
 8005218:	2d00      	cmp	r5, #0
 800521a:	d04d      	beq.n	80052b8 <_printf_i+0x1b4>
 800521c:	4615      	mov	r5, r2
 800521e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005222:	fb03 6711 	mls	r7, r3, r1, r6
 8005226:	5dc7      	ldrb	r7, [r0, r7]
 8005228:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800522c:	4637      	mov	r7, r6
 800522e:	42bb      	cmp	r3, r7
 8005230:	460e      	mov	r6, r1
 8005232:	d9f4      	bls.n	800521e <_printf_i+0x11a>
 8005234:	2b08      	cmp	r3, #8
 8005236:	d10b      	bne.n	8005250 <_printf_i+0x14c>
 8005238:	6823      	ldr	r3, [r4, #0]
 800523a:	07de      	lsls	r6, r3, #31
 800523c:	d508      	bpl.n	8005250 <_printf_i+0x14c>
 800523e:	6923      	ldr	r3, [r4, #16]
 8005240:	6861      	ldr	r1, [r4, #4]
 8005242:	4299      	cmp	r1, r3
 8005244:	bfde      	ittt	le
 8005246:	2330      	movle	r3, #48	; 0x30
 8005248:	f805 3c01 	strble.w	r3, [r5, #-1]
 800524c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005250:	1b52      	subs	r2, r2, r5
 8005252:	6122      	str	r2, [r4, #16]
 8005254:	f8cd a000 	str.w	sl, [sp]
 8005258:	464b      	mov	r3, r9
 800525a:	aa03      	add	r2, sp, #12
 800525c:	4621      	mov	r1, r4
 800525e:	4640      	mov	r0, r8
 8005260:	f7ff fee2 	bl	8005028 <_printf_common>
 8005264:	3001      	adds	r0, #1
 8005266:	d14c      	bne.n	8005302 <_printf_i+0x1fe>
 8005268:	f04f 30ff 	mov.w	r0, #4294967295
 800526c:	b004      	add	sp, #16
 800526e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005272:	4835      	ldr	r0, [pc, #212]	; (8005348 <_printf_i+0x244>)
 8005274:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005278:	6829      	ldr	r1, [r5, #0]
 800527a:	6823      	ldr	r3, [r4, #0]
 800527c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005280:	6029      	str	r1, [r5, #0]
 8005282:	061d      	lsls	r5, r3, #24
 8005284:	d514      	bpl.n	80052b0 <_printf_i+0x1ac>
 8005286:	07df      	lsls	r7, r3, #31
 8005288:	bf44      	itt	mi
 800528a:	f043 0320 	orrmi.w	r3, r3, #32
 800528e:	6023      	strmi	r3, [r4, #0]
 8005290:	b91e      	cbnz	r6, 800529a <_printf_i+0x196>
 8005292:	6823      	ldr	r3, [r4, #0]
 8005294:	f023 0320 	bic.w	r3, r3, #32
 8005298:	6023      	str	r3, [r4, #0]
 800529a:	2310      	movs	r3, #16
 800529c:	e7b0      	b.n	8005200 <_printf_i+0xfc>
 800529e:	6823      	ldr	r3, [r4, #0]
 80052a0:	f043 0320 	orr.w	r3, r3, #32
 80052a4:	6023      	str	r3, [r4, #0]
 80052a6:	2378      	movs	r3, #120	; 0x78
 80052a8:	4828      	ldr	r0, [pc, #160]	; (800534c <_printf_i+0x248>)
 80052aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80052ae:	e7e3      	b.n	8005278 <_printf_i+0x174>
 80052b0:	0659      	lsls	r1, r3, #25
 80052b2:	bf48      	it	mi
 80052b4:	b2b6      	uxthmi	r6, r6
 80052b6:	e7e6      	b.n	8005286 <_printf_i+0x182>
 80052b8:	4615      	mov	r5, r2
 80052ba:	e7bb      	b.n	8005234 <_printf_i+0x130>
 80052bc:	682b      	ldr	r3, [r5, #0]
 80052be:	6826      	ldr	r6, [r4, #0]
 80052c0:	6961      	ldr	r1, [r4, #20]
 80052c2:	1d18      	adds	r0, r3, #4
 80052c4:	6028      	str	r0, [r5, #0]
 80052c6:	0635      	lsls	r5, r6, #24
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	d501      	bpl.n	80052d0 <_printf_i+0x1cc>
 80052cc:	6019      	str	r1, [r3, #0]
 80052ce:	e002      	b.n	80052d6 <_printf_i+0x1d2>
 80052d0:	0670      	lsls	r0, r6, #25
 80052d2:	d5fb      	bpl.n	80052cc <_printf_i+0x1c8>
 80052d4:	8019      	strh	r1, [r3, #0]
 80052d6:	2300      	movs	r3, #0
 80052d8:	6123      	str	r3, [r4, #16]
 80052da:	4615      	mov	r5, r2
 80052dc:	e7ba      	b.n	8005254 <_printf_i+0x150>
 80052de:	682b      	ldr	r3, [r5, #0]
 80052e0:	1d1a      	adds	r2, r3, #4
 80052e2:	602a      	str	r2, [r5, #0]
 80052e4:	681d      	ldr	r5, [r3, #0]
 80052e6:	6862      	ldr	r2, [r4, #4]
 80052e8:	2100      	movs	r1, #0
 80052ea:	4628      	mov	r0, r5
 80052ec:	f7fa ff70 	bl	80001d0 <memchr>
 80052f0:	b108      	cbz	r0, 80052f6 <_printf_i+0x1f2>
 80052f2:	1b40      	subs	r0, r0, r5
 80052f4:	6060      	str	r0, [r4, #4]
 80052f6:	6863      	ldr	r3, [r4, #4]
 80052f8:	6123      	str	r3, [r4, #16]
 80052fa:	2300      	movs	r3, #0
 80052fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005300:	e7a8      	b.n	8005254 <_printf_i+0x150>
 8005302:	6923      	ldr	r3, [r4, #16]
 8005304:	462a      	mov	r2, r5
 8005306:	4649      	mov	r1, r9
 8005308:	4640      	mov	r0, r8
 800530a:	47d0      	blx	sl
 800530c:	3001      	adds	r0, #1
 800530e:	d0ab      	beq.n	8005268 <_printf_i+0x164>
 8005310:	6823      	ldr	r3, [r4, #0]
 8005312:	079b      	lsls	r3, r3, #30
 8005314:	d413      	bmi.n	800533e <_printf_i+0x23a>
 8005316:	68e0      	ldr	r0, [r4, #12]
 8005318:	9b03      	ldr	r3, [sp, #12]
 800531a:	4298      	cmp	r0, r3
 800531c:	bfb8      	it	lt
 800531e:	4618      	movlt	r0, r3
 8005320:	e7a4      	b.n	800526c <_printf_i+0x168>
 8005322:	2301      	movs	r3, #1
 8005324:	4632      	mov	r2, r6
 8005326:	4649      	mov	r1, r9
 8005328:	4640      	mov	r0, r8
 800532a:	47d0      	blx	sl
 800532c:	3001      	adds	r0, #1
 800532e:	d09b      	beq.n	8005268 <_printf_i+0x164>
 8005330:	3501      	adds	r5, #1
 8005332:	68e3      	ldr	r3, [r4, #12]
 8005334:	9903      	ldr	r1, [sp, #12]
 8005336:	1a5b      	subs	r3, r3, r1
 8005338:	42ab      	cmp	r3, r5
 800533a:	dcf2      	bgt.n	8005322 <_printf_i+0x21e>
 800533c:	e7eb      	b.n	8005316 <_printf_i+0x212>
 800533e:	2500      	movs	r5, #0
 8005340:	f104 0619 	add.w	r6, r4, #25
 8005344:	e7f5      	b.n	8005332 <_printf_i+0x22e>
 8005346:	bf00      	nop
 8005348:	08005e12 	.word	0x08005e12
 800534c:	08005e23 	.word	0x08005e23

08005350 <memcpy>:
 8005350:	440a      	add	r2, r1
 8005352:	4291      	cmp	r1, r2
 8005354:	f100 33ff 	add.w	r3, r0, #4294967295
 8005358:	d100      	bne.n	800535c <memcpy+0xc>
 800535a:	4770      	bx	lr
 800535c:	b510      	push	{r4, lr}
 800535e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005362:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005366:	4291      	cmp	r1, r2
 8005368:	d1f9      	bne.n	800535e <memcpy+0xe>
 800536a:	bd10      	pop	{r4, pc}

0800536c <memmove>:
 800536c:	4288      	cmp	r0, r1
 800536e:	b510      	push	{r4, lr}
 8005370:	eb01 0402 	add.w	r4, r1, r2
 8005374:	d902      	bls.n	800537c <memmove+0x10>
 8005376:	4284      	cmp	r4, r0
 8005378:	4623      	mov	r3, r4
 800537a:	d807      	bhi.n	800538c <memmove+0x20>
 800537c:	1e43      	subs	r3, r0, #1
 800537e:	42a1      	cmp	r1, r4
 8005380:	d008      	beq.n	8005394 <memmove+0x28>
 8005382:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005386:	f803 2f01 	strb.w	r2, [r3, #1]!
 800538a:	e7f8      	b.n	800537e <memmove+0x12>
 800538c:	4402      	add	r2, r0
 800538e:	4601      	mov	r1, r0
 8005390:	428a      	cmp	r2, r1
 8005392:	d100      	bne.n	8005396 <memmove+0x2a>
 8005394:	bd10      	pop	{r4, pc}
 8005396:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800539a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800539e:	e7f7      	b.n	8005390 <memmove+0x24>

080053a0 <_free_r>:
 80053a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80053a2:	2900      	cmp	r1, #0
 80053a4:	d044      	beq.n	8005430 <_free_r+0x90>
 80053a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053aa:	9001      	str	r0, [sp, #4]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	f1a1 0404 	sub.w	r4, r1, #4
 80053b2:	bfb8      	it	lt
 80053b4:	18e4      	addlt	r4, r4, r3
 80053b6:	f000 f913 	bl	80055e0 <__malloc_lock>
 80053ba:	4a1e      	ldr	r2, [pc, #120]	; (8005434 <_free_r+0x94>)
 80053bc:	9801      	ldr	r0, [sp, #4]
 80053be:	6813      	ldr	r3, [r2, #0]
 80053c0:	b933      	cbnz	r3, 80053d0 <_free_r+0x30>
 80053c2:	6063      	str	r3, [r4, #4]
 80053c4:	6014      	str	r4, [r2, #0]
 80053c6:	b003      	add	sp, #12
 80053c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80053cc:	f000 b90e 	b.w	80055ec <__malloc_unlock>
 80053d0:	42a3      	cmp	r3, r4
 80053d2:	d908      	bls.n	80053e6 <_free_r+0x46>
 80053d4:	6825      	ldr	r5, [r4, #0]
 80053d6:	1961      	adds	r1, r4, r5
 80053d8:	428b      	cmp	r3, r1
 80053da:	bf01      	itttt	eq
 80053dc:	6819      	ldreq	r1, [r3, #0]
 80053de:	685b      	ldreq	r3, [r3, #4]
 80053e0:	1949      	addeq	r1, r1, r5
 80053e2:	6021      	streq	r1, [r4, #0]
 80053e4:	e7ed      	b.n	80053c2 <_free_r+0x22>
 80053e6:	461a      	mov	r2, r3
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	b10b      	cbz	r3, 80053f0 <_free_r+0x50>
 80053ec:	42a3      	cmp	r3, r4
 80053ee:	d9fa      	bls.n	80053e6 <_free_r+0x46>
 80053f0:	6811      	ldr	r1, [r2, #0]
 80053f2:	1855      	adds	r5, r2, r1
 80053f4:	42a5      	cmp	r5, r4
 80053f6:	d10b      	bne.n	8005410 <_free_r+0x70>
 80053f8:	6824      	ldr	r4, [r4, #0]
 80053fa:	4421      	add	r1, r4
 80053fc:	1854      	adds	r4, r2, r1
 80053fe:	42a3      	cmp	r3, r4
 8005400:	6011      	str	r1, [r2, #0]
 8005402:	d1e0      	bne.n	80053c6 <_free_r+0x26>
 8005404:	681c      	ldr	r4, [r3, #0]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	6053      	str	r3, [r2, #4]
 800540a:	4421      	add	r1, r4
 800540c:	6011      	str	r1, [r2, #0]
 800540e:	e7da      	b.n	80053c6 <_free_r+0x26>
 8005410:	d902      	bls.n	8005418 <_free_r+0x78>
 8005412:	230c      	movs	r3, #12
 8005414:	6003      	str	r3, [r0, #0]
 8005416:	e7d6      	b.n	80053c6 <_free_r+0x26>
 8005418:	6825      	ldr	r5, [r4, #0]
 800541a:	1961      	adds	r1, r4, r5
 800541c:	428b      	cmp	r3, r1
 800541e:	bf04      	itt	eq
 8005420:	6819      	ldreq	r1, [r3, #0]
 8005422:	685b      	ldreq	r3, [r3, #4]
 8005424:	6063      	str	r3, [r4, #4]
 8005426:	bf04      	itt	eq
 8005428:	1949      	addeq	r1, r1, r5
 800542a:	6021      	streq	r1, [r4, #0]
 800542c:	6054      	str	r4, [r2, #4]
 800542e:	e7ca      	b.n	80053c6 <_free_r+0x26>
 8005430:	b003      	add	sp, #12
 8005432:	bd30      	pop	{r4, r5, pc}
 8005434:	2000070c 	.word	0x2000070c

08005438 <sbrk_aligned>:
 8005438:	b570      	push	{r4, r5, r6, lr}
 800543a:	4e0e      	ldr	r6, [pc, #56]	; (8005474 <sbrk_aligned+0x3c>)
 800543c:	460c      	mov	r4, r1
 800543e:	6831      	ldr	r1, [r6, #0]
 8005440:	4605      	mov	r5, r0
 8005442:	b911      	cbnz	r1, 800544a <sbrk_aligned+0x12>
 8005444:	f000 f8bc 	bl	80055c0 <_sbrk_r>
 8005448:	6030      	str	r0, [r6, #0]
 800544a:	4621      	mov	r1, r4
 800544c:	4628      	mov	r0, r5
 800544e:	f000 f8b7 	bl	80055c0 <_sbrk_r>
 8005452:	1c43      	adds	r3, r0, #1
 8005454:	d00a      	beq.n	800546c <sbrk_aligned+0x34>
 8005456:	1cc4      	adds	r4, r0, #3
 8005458:	f024 0403 	bic.w	r4, r4, #3
 800545c:	42a0      	cmp	r0, r4
 800545e:	d007      	beq.n	8005470 <sbrk_aligned+0x38>
 8005460:	1a21      	subs	r1, r4, r0
 8005462:	4628      	mov	r0, r5
 8005464:	f000 f8ac 	bl	80055c0 <_sbrk_r>
 8005468:	3001      	adds	r0, #1
 800546a:	d101      	bne.n	8005470 <sbrk_aligned+0x38>
 800546c:	f04f 34ff 	mov.w	r4, #4294967295
 8005470:	4620      	mov	r0, r4
 8005472:	bd70      	pop	{r4, r5, r6, pc}
 8005474:	20000710 	.word	0x20000710

08005478 <_malloc_r>:
 8005478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800547c:	1ccd      	adds	r5, r1, #3
 800547e:	f025 0503 	bic.w	r5, r5, #3
 8005482:	3508      	adds	r5, #8
 8005484:	2d0c      	cmp	r5, #12
 8005486:	bf38      	it	cc
 8005488:	250c      	movcc	r5, #12
 800548a:	2d00      	cmp	r5, #0
 800548c:	4607      	mov	r7, r0
 800548e:	db01      	blt.n	8005494 <_malloc_r+0x1c>
 8005490:	42a9      	cmp	r1, r5
 8005492:	d905      	bls.n	80054a0 <_malloc_r+0x28>
 8005494:	230c      	movs	r3, #12
 8005496:	603b      	str	r3, [r7, #0]
 8005498:	2600      	movs	r6, #0
 800549a:	4630      	mov	r0, r6
 800549c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054a0:	4e2e      	ldr	r6, [pc, #184]	; (800555c <_malloc_r+0xe4>)
 80054a2:	f000 f89d 	bl	80055e0 <__malloc_lock>
 80054a6:	6833      	ldr	r3, [r6, #0]
 80054a8:	461c      	mov	r4, r3
 80054aa:	bb34      	cbnz	r4, 80054fa <_malloc_r+0x82>
 80054ac:	4629      	mov	r1, r5
 80054ae:	4638      	mov	r0, r7
 80054b0:	f7ff ffc2 	bl	8005438 <sbrk_aligned>
 80054b4:	1c43      	adds	r3, r0, #1
 80054b6:	4604      	mov	r4, r0
 80054b8:	d14d      	bne.n	8005556 <_malloc_r+0xde>
 80054ba:	6834      	ldr	r4, [r6, #0]
 80054bc:	4626      	mov	r6, r4
 80054be:	2e00      	cmp	r6, #0
 80054c0:	d140      	bne.n	8005544 <_malloc_r+0xcc>
 80054c2:	6823      	ldr	r3, [r4, #0]
 80054c4:	4631      	mov	r1, r6
 80054c6:	4638      	mov	r0, r7
 80054c8:	eb04 0803 	add.w	r8, r4, r3
 80054cc:	f000 f878 	bl	80055c0 <_sbrk_r>
 80054d0:	4580      	cmp	r8, r0
 80054d2:	d13a      	bne.n	800554a <_malloc_r+0xd2>
 80054d4:	6821      	ldr	r1, [r4, #0]
 80054d6:	3503      	adds	r5, #3
 80054d8:	1a6d      	subs	r5, r5, r1
 80054da:	f025 0503 	bic.w	r5, r5, #3
 80054de:	3508      	adds	r5, #8
 80054e0:	2d0c      	cmp	r5, #12
 80054e2:	bf38      	it	cc
 80054e4:	250c      	movcc	r5, #12
 80054e6:	4629      	mov	r1, r5
 80054e8:	4638      	mov	r0, r7
 80054ea:	f7ff ffa5 	bl	8005438 <sbrk_aligned>
 80054ee:	3001      	adds	r0, #1
 80054f0:	d02b      	beq.n	800554a <_malloc_r+0xd2>
 80054f2:	6823      	ldr	r3, [r4, #0]
 80054f4:	442b      	add	r3, r5
 80054f6:	6023      	str	r3, [r4, #0]
 80054f8:	e00e      	b.n	8005518 <_malloc_r+0xa0>
 80054fa:	6822      	ldr	r2, [r4, #0]
 80054fc:	1b52      	subs	r2, r2, r5
 80054fe:	d41e      	bmi.n	800553e <_malloc_r+0xc6>
 8005500:	2a0b      	cmp	r2, #11
 8005502:	d916      	bls.n	8005532 <_malloc_r+0xba>
 8005504:	1961      	adds	r1, r4, r5
 8005506:	42a3      	cmp	r3, r4
 8005508:	6025      	str	r5, [r4, #0]
 800550a:	bf18      	it	ne
 800550c:	6059      	strne	r1, [r3, #4]
 800550e:	6863      	ldr	r3, [r4, #4]
 8005510:	bf08      	it	eq
 8005512:	6031      	streq	r1, [r6, #0]
 8005514:	5162      	str	r2, [r4, r5]
 8005516:	604b      	str	r3, [r1, #4]
 8005518:	4638      	mov	r0, r7
 800551a:	f104 060b 	add.w	r6, r4, #11
 800551e:	f000 f865 	bl	80055ec <__malloc_unlock>
 8005522:	f026 0607 	bic.w	r6, r6, #7
 8005526:	1d23      	adds	r3, r4, #4
 8005528:	1af2      	subs	r2, r6, r3
 800552a:	d0b6      	beq.n	800549a <_malloc_r+0x22>
 800552c:	1b9b      	subs	r3, r3, r6
 800552e:	50a3      	str	r3, [r4, r2]
 8005530:	e7b3      	b.n	800549a <_malloc_r+0x22>
 8005532:	6862      	ldr	r2, [r4, #4]
 8005534:	42a3      	cmp	r3, r4
 8005536:	bf0c      	ite	eq
 8005538:	6032      	streq	r2, [r6, #0]
 800553a:	605a      	strne	r2, [r3, #4]
 800553c:	e7ec      	b.n	8005518 <_malloc_r+0xa0>
 800553e:	4623      	mov	r3, r4
 8005540:	6864      	ldr	r4, [r4, #4]
 8005542:	e7b2      	b.n	80054aa <_malloc_r+0x32>
 8005544:	4634      	mov	r4, r6
 8005546:	6876      	ldr	r6, [r6, #4]
 8005548:	e7b9      	b.n	80054be <_malloc_r+0x46>
 800554a:	230c      	movs	r3, #12
 800554c:	603b      	str	r3, [r7, #0]
 800554e:	4638      	mov	r0, r7
 8005550:	f000 f84c 	bl	80055ec <__malloc_unlock>
 8005554:	e7a1      	b.n	800549a <_malloc_r+0x22>
 8005556:	6025      	str	r5, [r4, #0]
 8005558:	e7de      	b.n	8005518 <_malloc_r+0xa0>
 800555a:	bf00      	nop
 800555c:	2000070c 	.word	0x2000070c

08005560 <_realloc_r>:
 8005560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005564:	4680      	mov	r8, r0
 8005566:	4614      	mov	r4, r2
 8005568:	460e      	mov	r6, r1
 800556a:	b921      	cbnz	r1, 8005576 <_realloc_r+0x16>
 800556c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005570:	4611      	mov	r1, r2
 8005572:	f7ff bf81 	b.w	8005478 <_malloc_r>
 8005576:	b92a      	cbnz	r2, 8005584 <_realloc_r+0x24>
 8005578:	f7ff ff12 	bl	80053a0 <_free_r>
 800557c:	4625      	mov	r5, r4
 800557e:	4628      	mov	r0, r5
 8005580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005584:	f000 f838 	bl	80055f8 <_malloc_usable_size_r>
 8005588:	4284      	cmp	r4, r0
 800558a:	4607      	mov	r7, r0
 800558c:	d802      	bhi.n	8005594 <_realloc_r+0x34>
 800558e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005592:	d812      	bhi.n	80055ba <_realloc_r+0x5a>
 8005594:	4621      	mov	r1, r4
 8005596:	4640      	mov	r0, r8
 8005598:	f7ff ff6e 	bl	8005478 <_malloc_r>
 800559c:	4605      	mov	r5, r0
 800559e:	2800      	cmp	r0, #0
 80055a0:	d0ed      	beq.n	800557e <_realloc_r+0x1e>
 80055a2:	42bc      	cmp	r4, r7
 80055a4:	4622      	mov	r2, r4
 80055a6:	4631      	mov	r1, r6
 80055a8:	bf28      	it	cs
 80055aa:	463a      	movcs	r2, r7
 80055ac:	f7ff fed0 	bl	8005350 <memcpy>
 80055b0:	4631      	mov	r1, r6
 80055b2:	4640      	mov	r0, r8
 80055b4:	f7ff fef4 	bl	80053a0 <_free_r>
 80055b8:	e7e1      	b.n	800557e <_realloc_r+0x1e>
 80055ba:	4635      	mov	r5, r6
 80055bc:	e7df      	b.n	800557e <_realloc_r+0x1e>
	...

080055c0 <_sbrk_r>:
 80055c0:	b538      	push	{r3, r4, r5, lr}
 80055c2:	4d06      	ldr	r5, [pc, #24]	; (80055dc <_sbrk_r+0x1c>)
 80055c4:	2300      	movs	r3, #0
 80055c6:	4604      	mov	r4, r0
 80055c8:	4608      	mov	r0, r1
 80055ca:	602b      	str	r3, [r5, #0]
 80055cc:	f7fc f864 	bl	8001698 <_sbrk>
 80055d0:	1c43      	adds	r3, r0, #1
 80055d2:	d102      	bne.n	80055da <_sbrk_r+0x1a>
 80055d4:	682b      	ldr	r3, [r5, #0]
 80055d6:	b103      	cbz	r3, 80055da <_sbrk_r+0x1a>
 80055d8:	6023      	str	r3, [r4, #0]
 80055da:	bd38      	pop	{r3, r4, r5, pc}
 80055dc:	20000714 	.word	0x20000714

080055e0 <__malloc_lock>:
 80055e0:	4801      	ldr	r0, [pc, #4]	; (80055e8 <__malloc_lock+0x8>)
 80055e2:	f000 b811 	b.w	8005608 <__retarget_lock_acquire_recursive>
 80055e6:	bf00      	nop
 80055e8:	20000718 	.word	0x20000718

080055ec <__malloc_unlock>:
 80055ec:	4801      	ldr	r0, [pc, #4]	; (80055f4 <__malloc_unlock+0x8>)
 80055ee:	f000 b80c 	b.w	800560a <__retarget_lock_release_recursive>
 80055f2:	bf00      	nop
 80055f4:	20000718 	.word	0x20000718

080055f8 <_malloc_usable_size_r>:
 80055f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055fc:	1f18      	subs	r0, r3, #4
 80055fe:	2b00      	cmp	r3, #0
 8005600:	bfbc      	itt	lt
 8005602:	580b      	ldrlt	r3, [r1, r0]
 8005604:	18c0      	addlt	r0, r0, r3
 8005606:	4770      	bx	lr

08005608 <__retarget_lock_acquire_recursive>:
 8005608:	4770      	bx	lr

0800560a <__retarget_lock_release_recursive>:
 800560a:	4770      	bx	lr

0800560c <_init>:
 800560c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800560e:	bf00      	nop
 8005610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005612:	bc08      	pop	{r3}
 8005614:	469e      	mov	lr, r3
 8005616:	4770      	bx	lr

08005618 <_fini>:
 8005618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800561a:	bf00      	nop
 800561c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800561e:	bc08      	pop	{r3}
 8005620:	469e      	mov	lr, r3
 8005622:	4770      	bx	lr
